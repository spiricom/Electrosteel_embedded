
electrosteel_strings_STM32H730.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008894  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000077c  08008b68  08008b68  00018b68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080092e4  080092e4  000192e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080092e8  080092e8  000192e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  24000000  080092ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000078c  24000078  08009364  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000804  08009364  00020804  2**0
                  ALLOC
  8 .RAM_D1       0004baf0  24000e20  08009364  00020e20  2**5
                  ALLOC
  9 .RAM_D2       000001c8  30000000  30000000  00030000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002753a  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000039bf  00000000  00000000  000475e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00018589  00000000  00000000  0004af9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c8  00000000  00000000  00063528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001eb8  00000000  00000000  00064cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000368b8  00000000  00000000  00066ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000243b4  00000000  00000000  0009d460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015b816  00000000  00000000  000c1814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021d02a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004834  00000000  00000000  0021d07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08008b4c 	.word	0x08008b4c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	08008b4c 	.word	0x08008b4c

08000310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000312:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000314:	2400      	movs	r4, #0
 8000316:	9407      	str	r4, [sp, #28]
 8000318:	9408      	str	r4, [sp, #32]
 800031a:	9409      	str	r4, [sp, #36]	; 0x24
 800031c:	940a      	str	r4, [sp, #40]	; 0x28
 800031e:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000320:	4b36      	ldr	r3, [pc, #216]	; (80003fc <MX_GPIO_Init+0xec>)
 8000322:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000326:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800032a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800032e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000332:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000336:	9201      	str	r2, [sp, #4]
 8000338:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800033e:	f042 0201 	orr.w	r2, r2, #1
 8000342:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000346:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800034a:	f002 0201 	and.w	r2, r2, #1
 800034e:	9202      	str	r2, [sp, #8]
 8000350:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000352:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000356:	f042 0204 	orr.w	r2, r2, #4
 800035a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800035e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000362:	f002 0204 	and.w	r2, r2, #4
 8000366:	9203      	str	r2, [sp, #12]
 8000368:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800036e:	f042 0202 	orr.w	r2, r2, #2
 8000372:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000376:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800037a:	f002 0202 	and.w	r2, r2, #2
 800037e:	9204      	str	r2, [sp, #16]
 8000380:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000382:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000386:	f042 0208 	orr.w	r2, r2, #8
 800038a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800038e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000392:	f002 0208 	and.w	r2, r2, #8
 8000396:	9205      	str	r2, [sp, #20]
 8000398:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800039a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800039e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80003a2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80003a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ae:	9306      	str	r3, [sp, #24]
 80003b0:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 80003b2:	4f13      	ldr	r7, [pc, #76]	; (8000400 <MX_GPIO_Init+0xf0>)
 80003b4:	4622      	mov	r2, r4
 80003b6:	f248 0101 	movw	r1, #32769	; 0x8001
 80003ba:	4638      	mov	r0, r7
 80003bc:	f003 fdba 	bl	8003f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80003c0:	4d10      	ldr	r5, [pc, #64]	; (8000404 <MX_GPIO_Init+0xf4>)
 80003c2:	4622      	mov	r2, r4
 80003c4:	2110      	movs	r1, #16
 80003c6:	4628      	mov	r0, r5
 80003c8:	f003 fdb4 	bl	8003f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD15 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0;
 80003cc:	f248 0301 	movw	r3, #32769	; 0x8001
 80003d0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d2:	2601      	movs	r6, #1
 80003d4:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003d8:	2303      	movs	r3, #3
 80003da:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003dc:	a907      	add	r1, sp, #28
 80003de:	4638      	mov	r0, r7
 80003e0:	f003 fc9e 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80003e4:	2310      	movs	r3, #16
 80003e6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e8:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ec:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ee:	a907      	add	r1, sp, #28
 80003f0:	4628      	mov	r0, r5
 80003f2:	f003 fc95 	bl	8003d20 <HAL_GPIO_Init>

}
 80003f6:	b00d      	add	sp, #52	; 0x34
 80003f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003fa:	bf00      	nop
 80003fc:	58024400 	.word	0x58024400
 8000400:	58020c00 	.word	0x58020c00
 8000404:	58020400 	.word	0x58020400

08000408 <MX_DMA_Init>:
{
 8000408:	b500      	push	{lr}
 800040a:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <MX_DMA_Init+0x54>)
 800040e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000412:	f042 0201 	orr.w	r2, r2, #1
 8000416:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800041a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800041e:	f003 0301 	and.w	r3, r3, #1
 8000422:	9301      	str	r3, [sp, #4]
 8000424:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8000426:	2200      	movs	r2, #0
 8000428:	2101      	movs	r1, #1
 800042a:	200b      	movs	r0, #11
 800042c:	f002 f9d2 	bl	80027d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000430:	200b      	movs	r0, #11
 8000432:	f002 fa05 	bl	8002840 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 8000436:	2200      	movs	r2, #0
 8000438:	2101      	movs	r1, #1
 800043a:	200c      	movs	r0, #12
 800043c:	f002 f9ca 	bl	80027d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000440:	200c      	movs	r0, #12
 8000442:	f002 f9fd 	bl	8002840 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	4611      	mov	r1, r2
 800044a:	200d      	movs	r0, #13
 800044c:	f002 f9c2 	bl	80027d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000450:	200d      	movs	r0, #13
 8000452:	f002 f9f5 	bl	8002840 <HAL_NVIC_EnableIRQ>
}
 8000456:	b003      	add	sp, #12
 8000458:	f85d fb04 	ldr.w	pc, [sp], #4
 800045c:	58024400 	.word	0x58024400

08000460 <randomNumber>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
float randomNumber(void) {
 8000460:	b500      	push	{lr}
 8000462:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8000464:	a901      	add	r1, sp, #4
 8000466:	4807      	ldr	r0, [pc, #28]	; (8000484 <randomNumber+0x24>)
 8000468:	f005 ffdf 	bl	800642a <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 800046c:	eddd 7a01 	vldr	s15, [sp, #4]
 8000470:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 8000474:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8000488 <randomNumber+0x28>
 8000478:	ee27 0a80 	vmul.f32	s0, s15, s0
 800047c:	b003      	add	sp, #12
 800047e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000482:	bf00      	nop
 8000484:	24000378 	.word	0x24000378
 8000488:	2f80000d 	.word	0x2f80000d

0800048c <MPU_Conf>:



void MPU_Conf(void)
{
 800048c:	b500      	push	{lr}
 800048e:	b085      	sub	sp, #20
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();
 8000490:	f002 f9f8 	bl	8002884 <HAL_MPU_Disable>

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000494:	2201      	movs	r2, #1
 8000496:	f88d 2000 	strb.w	r2, [sp]

	  //D2 Domain�SRAM1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 800049a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800049e:	9301      	str	r3, [sp, #4]
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80004a0:	230e      	movs	r3, #14
 80004a2:	f88d 3008 	strb.w	r3, [sp, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80004a6:	2303      	movs	r3, #3
 80004a8:	f88d 300b 	strb.w	r3, [sp, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80004ac:	f88d 200a 	strb.w	r2, [sp, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	f88d 300e 	strb.w	r3, [sp, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80004b6:	f88d 300f 	strb.w	r3, [sp, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80004ba:	f88d 300d 	strb.w	r3, [sp, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80004be:	f88d 3001 	strb.w	r3, [sp, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 80004c2:	f88d 3009 	strb.w	r3, [sp, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80004c6:	f88d 200c 	strb.w	r2, [sp, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004ca:	4668      	mov	r0, sp
 80004cc:	f002 f9f8 	bl	80028c0 <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80004d0:	2004      	movs	r0, #4
 80004d2:	f002 f9e5 	bl	80028a0 <HAL_MPU_Enable>
}
 80004d6:	b005      	add	sp, #20
 80004d8:	f85d fb04 	ldr.w	pc, [sp], #4

080004dc <attackDetectPeak2>:
int downCounter[NUM_STRINGS];
int armedCounter[NUM_STRINGS];
float slopeStorage[NUM_STRINGS];
float integerVersions[NUM_STRINGS];
int attackDetectPeak2 (int whichString, int tempInt)
{
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	ed2d 8b02 	vpush	{d8}
 80004e2:	4604      	mov	r4, r0
 80004e4:	ee00 1a10 	vmov	s0, r1
	float output = -1;
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 80004e8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80004ec:	eddf 7a6c 	vldr	s15, [pc, #432]	; 80006a0 <attackDetectPeak2+0x1c4>
 80004f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80004f4:	eddf 7a6b 	vldr	s15, [pc, #428]	; 80006a4 <attackDetectPeak2+0x1c8>
 80004f8:	ee20 0a27 	vmul.f32	s0, s0, s15
	for (int k = 0; k < FILTER_ORDER; k++)
 80004fc:	2500      	movs	r5, #0
 80004fe:	e00e      	b.n	800051e <attackDetectPeak2+0x42>
	{
		// a highpass filter, remove any slow moving signal (effectively centers the signal around zero and gets rid of the signal that isn't high frequency vibration) cutoff of 100Hz, // applied 8 times to get rid of a lot of low frequency bumbling around
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000500:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 8000504:	009e      	lsls	r6, r3, #2
 8000506:	4868      	ldr	r0, [pc, #416]	; (80006a8 <attackDetectPeak2+0x1cc>)
 8000508:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800050c:	f006 fd21 	bl	8006f52 <tHighpass_tick>
		tempSamp = tVZFilter_tick(&opticalLowpass[whichString][k], tempSamp * 2.0f);
 8000510:	ee30 0a00 	vadd.f32	s0, s0, s0
 8000514:	4865      	ldr	r0, [pc, #404]	; (80006ac <attackDetectPeak2+0x1d0>)
 8000516:	4430      	add	r0, r6
 8000518:	f006 fd2f 	bl	8006f7a <tVZFilter_tick>
	for (int k = 0; k < FILTER_ORDER; k++)
 800051c:	3501      	adds	r5, #1
 800051e:	2d01      	cmp	r5, #1
 8000520:	ddee      	ble.n	8000500 <attackDetectPeak2+0x24>
	}

	float tempAbs = fabsf(tempSamp);

	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 8000522:	00a5      	lsls	r5, r4, #2
 8000524:	eeb0 0ac0 	vabs.f32	s0, s0
 8000528:	4861      	ldr	r0, [pc, #388]	; (80006b0 <attackDetectPeak2+0x1d4>)
 800052a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800052e:	f006 fcb7 	bl	8006ea0 <tSlide_tick>
 8000532:	4b60      	ldr	r3, [pc, #384]	; (80006b4 <attackDetectPeak2+0x1d8>)
 8000534:	ed83 0a00 	vstr	s0, [r3]
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000538:	485f      	ldr	r0, [pc, #380]	; (80006b8 <attackDetectPeak2+0x1dc>)
 800053a:	4428      	add	r0, r5
 800053c:	f006 fcb0 	bl	8006ea0 <tSlide_tick>
 8000540:	eef0 0a40 	vmov.f32	s1, s0
 8000544:	4d5d      	ldr	r5, [pc, #372]	; (80006bc <attackDetectPeak2+0x1e0>)
 8000546:	ed85 0a00 	vstr	s0, [r5]
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 800054a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800054e:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 80006c0 <attackDetectPeak2+0x1e4>
 8000552:	f006 ff69 	bl	8007428 <LEAF_clip>
 8000556:	ed85 0a00 	vstr	s0, [r5]
	//dbSmoothed2 = atodb(Dsmoothed2);
	dbSmoothed2 = LEAF_clip(-45.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 800055a:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80006c4 <attackDetectPeak2+0x1e8>
 800055e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000562:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8000566:	4b58      	ldr	r3, [pc, #352]	; (80006c8 <attackDetectPeak2+0x1ec>)
 8000568:	ee10 2a10 	vmov	r2, s0
 800056c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000570:	eeb2 1a08 	vmov.f32	s2, #40	; 0x41400000  12.0
 8000574:	edd3 0a00 	vldr	s1, [r3]
 8000578:	ed9f 0a54 	vldr	s0, [pc, #336]	; 80006cc <attackDetectPeak2+0x1f0>
 800057c:	f006 ff54 	bl	8007428 <LEAF_clip>
 8000580:	4b53      	ldr	r3, [pc, #332]	; (80006d0 <attackDetectPeak2+0x1f4>)
 8000582:	ed83 0a00 	vstr	s0, [r3]
	if (whichString == 0)
 8000586:	b914      	cbnz	r4, 800058e <attackDetectPeak2+0xb2>
	{
		dbSmoothedStorage = dbSmoothed2;
 8000588:	4b52      	ldr	r3, [pc, #328]	; (80006d4 <attackDetectPeak2+0x1f8>)
 800058a:	ed83 0a00 	vstr	s0, [r3]
	}
	//dbSmoothed2 = LEAF_clip(-50.f, dbSmoothed2, 12.0f);
	//get the slope
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 800058e:	4b52      	ldr	r3, [pc, #328]	; (80006d8 <attackDetectPeak2+0x1fc>)
 8000590:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000594:	ed93 8a00 	vldr	s16, [r3]
 8000598:	ee30 8a48 	vsub.f32	s16, s0, s16
	slopeStorage[whichString] = slope;
 800059c:	4b4f      	ldr	r3, [pc, #316]	; (80006dc <attackDetectPeak2+0x200>)
 800059e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80005a2:	ed83 8a00 	vstr	s16, [r3]
	float integerVersion = Dsmoothed2 * (TWO_TO_16 - 1);
 80005a6:	4b45      	ldr	r3, [pc, #276]	; (80006bc <attackDetectPeak2+0x1e0>)
 80005a8:	edd3 8a00 	vldr	s17, [r3]
 80005ac:	eddf 7a4c 	vldr	s15, [pc, #304]	; 80006e0 <attackDetectPeak2+0x204>
 80005b0:	ee68 8aa7 	vmul.f32	s17, s17, s15
	integerVersions[whichString] = integerVersion;
 80005b4:	4b4b      	ldr	r3, [pc, #300]	; (80006e4 <attackDetectPeak2+0x208>)
 80005b6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80005ba:	edc3 8a00 	vstr	s17, [r3]
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 80005be:	eeb0 0a68 	vmov.f32	s0, s17
 80005c2:	4849      	ldr	r0, [pc, #292]	; (80006e8 <attackDetectPeak2+0x20c>)
 80005c4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80005c8:	f006 fc19 	bl	8006dfe <tThreshold_tick>
 80005cc:	4b47      	ldr	r3, [pc, #284]	; (80006ec <attackDetectPeak2+0x210>)
 80005ce:	6018      	str	r0, [r3, #0]

	if ((slope > .5f) && (threshOut > 0))
 80005d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80005d4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80005d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005dc:	dd05      	ble.n	80005ea <attackDetectPeak2+0x10e>
 80005de:	2800      	cmp	r0, #0
 80005e0:	dd03      	ble.n	80005ea <attackDetectPeak2+0x10e>
	{
		armed[whichString] = 1;
 80005e2:	4b43      	ldr	r3, [pc, #268]	; (80006f0 <attackDetectPeak2+0x214>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	}

	if (armed[whichString] == 1)
 80005ea:	4b41      	ldr	r3, [pc, #260]	; (80006f0 <attackDetectPeak2+0x214>)
 80005ec:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d00e      	beq.n	8000612 <attackDetectPeak2+0x136>
	float output = -1;
 80005f4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
			downCounter[whichString] = 0;
			stringMaxes[whichString] = 0;
		}
	}

	prevdbSmoothed2[whichString] = dbSmoothed2;
 80005f8:	4837      	ldr	r0, [pc, #220]	; (80006d8 <attackDetectPeak2+0x1fc>)
 80005fa:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80005fe:	4b34      	ldr	r3, [pc, #208]	; (80006d0 <attackDetectPeak2+0x1f4>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	6023      	str	r3, [r4, #0]
	return (int)output;
}
 8000604:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8000608:	ee17 0a90 	vmov	r0, s15
 800060c:	ecbd 8b02 	vpop	{d8}
 8000610:	bd70      	pop	{r4, r5, r6, pc}
		if (integerVersion > stringMaxes[whichString])
 8000612:	4b38      	ldr	r3, [pc, #224]	; (80006f4 <attackDetectPeak2+0x218>)
 8000614:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000618:	edd3 7a00 	vldr	s15, [r3]
 800061c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000620:	eef4 7ae8 	vcmpe.f32	s15, s17
 8000624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000628:	d506      	bpl.n	8000638 <attackDetectPeak2+0x15c>
			stringMaxes[whichString] = integerVersion;
 800062a:	eefd 8ae8 	vcvt.s32.f32	s17, s17
 800062e:	4b31      	ldr	r3, [pc, #196]	; (80006f4 <attackDetectPeak2+0x218>)
 8000630:	ee18 2a90 	vmov	r2, s17
 8000634:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		armedCounter[whichString]++;
 8000638:	4a2f      	ldr	r2, [pc, #188]	; (80006f8 <attackDetectPeak2+0x21c>)
 800063a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800063e:	3301      	adds	r3, #1
 8000640:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		if (slope <= 0.0f)
 8000644:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800064c:	d907      	bls.n	800065e <attackDetectPeak2+0x182>
		if (downCounter[whichString] > 128)
 800064e:	4b2b      	ldr	r3, [pc, #172]	; (80006fc <attackDetectPeak2+0x220>)
 8000650:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8000654:	2b80      	cmp	r3, #128	; 0x80
 8000656:	dc09      	bgt.n	800066c <attackDetectPeak2+0x190>
	float output = -1;
 8000658:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800065c:	e7cc      	b.n	80005f8 <attackDetectPeak2+0x11c>
			downCounter[whichString]++;
 800065e:	4a27      	ldr	r2, [pc, #156]	; (80006fc <attackDetectPeak2+0x220>)
 8000660:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8000664:	3301      	adds	r3, #1
 8000666:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800066a:	e7f0      	b.n	800064e <attackDetectPeak2+0x172>
			output = stringMaxes[whichString];
 800066c:	4d21      	ldr	r5, [pc, #132]	; (80006f4 <attackDetectPeak2+0x218>)
			output = LEAF_clip(0.0f, output, 65535.0f);
 800066e:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 80006e0 <attackDetectPeak2+0x204>
 8000672:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8000676:	ee07 3a90 	vmov	s15, r3
 800067a:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800067e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80006c0 <attackDetectPeak2+0x1e4>
 8000682:	f006 fed1 	bl	8007428 <LEAF_clip>
			armed[whichString] = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <attackDetectPeak2+0x214>)
 800068a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			armedCounter[whichString] = 0;
 800068e:	4a1a      	ldr	r2, [pc, #104]	; (80006f8 <attackDetectPeak2+0x21c>)
 8000690:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			downCounter[whichString] = 0;
 8000694:	4a19      	ldr	r2, [pc, #100]	; (80006fc <attackDetectPeak2+0x220>)
 8000696:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			stringMaxes[whichString] = 0;
 800069a:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800069e:	e7ab      	b.n	80005f8 <attackDetectPeak2+0x11c>
 80006a0:	47000000 	.word	0x47000000
 80006a4:	37fffffc 	.word	0x37fffffc
 80006a8:	240005a4 	.word	0x240005a4
 80006ac:	24000604 	.word	0x24000604
 80006b0:	24000170 	.word	0x24000170
 80006b4:	24000094 	.word	0x24000094
 80006b8:	240006f4 	.word	0x240006f4
 80006bc:	24000098 	.word	0x24000098
 80006c0:	00000000 	.word	0x00000000
 80006c4:	46c34e00 	.word	0x46c34e00
 80006c8:	24000e20 	.word	0x24000e20
 80006cc:	c2340000 	.word	0xc2340000
 80006d0:	24000108 	.word	0x24000108
 80006d4:	2400010c 	.word	0x2400010c
 80006d8:	24000694 	.word	0x24000694
 80006dc:	240006c4 	.word	0x240006c4
 80006e0:	477fff00 	.word	0x477fff00
 80006e4:	24000524 	.word	0x24000524
 80006e8:	240007d0 	.word	0x240007d0
 80006ec:	240007cc 	.word	0x240007cc
 80006f0:	240000a4 	.word	0x240000a4
 80006f4:	24000724 	.word	0x24000724
 80006f8:	240000d4 	.word	0x240000d4
 80006fc:	24000140 	.word	0x24000140

08000700 <ADC_Frame>:
int didPlucked2[NUM_STRINGS];
int pluckDelay[NUM_STRINGS];
int pluckValues[NUM_STRINGS];
uint32_t string_values[12];
void ADC_Frame(int offset)
{
 8000700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000702:	4607      	mov	r7, r0
	//HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_11);
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	4611      	mov	r1, r2
 8000708:	4849      	ldr	r0, [pc, #292]	; (8000830 <ADC_Frame+0x130>)
 800070a:	f003 fc13 	bl	8003f34 <HAL_GPIO_WritePin>
	int changeHappened = 0;
	//sampRecords[currentSamp] = frameCount;
	//currentSamp++;

	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 800070e:	463d      	mov	r5, r7
	int changeHappened = 0;
 8000710:	2600      	movs	r6, #0
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 8000712:	e06b      	b.n	80007ec <ADC_Frame+0xec>



		for (int k = 0; k < 12; k++)
		{
			string_values[k] = ADC_values1[(i*NUM_ADC_CHANNELS) + k];
 8000714:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8000718:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800071c:	4945      	ldr	r1, [pc, #276]	; (8000834 <ADC_Frame+0x134>)
 800071e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000722:	4a45      	ldr	r2, [pc, #276]	; (8000838 <ADC_Frame+0x138>)
 8000724:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int k = 0; k < 12; k++)
 8000728:	3301      	adds	r3, #1
 800072a:	2b0b      	cmp	r3, #11
 800072c:	ddf2      	ble.n	8000714 <ADC_Frame+0x14>
		}

		for (int j = 0; j < 12; j++)
 800072e:	2400      	movs	r4, #0
 8000730:	e00b      	b.n	800074a <ADC_Frame+0x4a>
			{
				stringTouchRH[j] = (RHbits[0] >> j) & 1;
			}
			else
			{
				stringTouchRH[j] = (RHbits[1] >> (j-8)) & 1;
 8000732:	4b42      	ldr	r3, [pc, #264]	; (800083c <ADC_Frame+0x13c>)
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	f1a4 0208 	sub.w	r2, r4, #8
 800073a:	4113      	asrs	r3, r2
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	4a3f      	ldr	r2, [pc, #252]	; (8000840 <ADC_Frame+0x140>)
 8000742:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
 8000746:	e00f      	b.n	8000768 <ADC_Frame+0x68>
		for (int j = 0; j < 12; j++)
 8000748:	3401      	adds	r4, #1
 800074a:	2c0b      	cmp	r4, #11
 800074c:	dc4d      	bgt.n	80007ea <ADC_Frame+0xea>
			int tempInt = string_values[j];
 800074e:	4b3a      	ldr	r3, [pc, #232]	; (8000838 <ADC_Frame+0x138>)
 8000750:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
			if (j < 8)
 8000754:	2c07      	cmp	r4, #7
 8000756:	dcec      	bgt.n	8000732 <ADC_Frame+0x32>
				stringTouchRH[j] = (RHbits[0] >> j) & 1;
 8000758:	4b38      	ldr	r3, [pc, #224]	; (800083c <ADC_Frame+0x13c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4123      	asrs	r3, r4
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	4a37      	ldr	r2, [pc, #220]	; (8000840 <ADC_Frame+0x140>)
 8000764:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
			}
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8000768:	4620      	mov	r0, r4
 800076a:	f7ff feb7 	bl	80004dc <attackDetectPeak2>
 800076e:	4b35      	ldr	r3, [pc, #212]	; (8000844 <ADC_Frame+0x144>)
 8000770:	f843 0024 	str.w	r0, [r3, r4, lsl #2]

			if (howManyFrames == 0)
 8000774:	4b34      	ldr	r3, [pc, #208]	; (8000848 <ADC_Frame+0x148>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1e5      	bne.n	8000748 <ADC_Frame+0x48>
			{
				if ((didPlucked[j] > 0) && (!stringSounding[j]))
 800077c:	2800      	cmp	r0, #0
 800077e:	dd16      	ble.n	80007ae <ADC_Frame+0xae>
 8000780:	4b32      	ldr	r3, [pc, #200]	; (800084c <ADC_Frame+0x14c>)
 8000782:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8000786:	b993      	cbnz	r3, 80007ae <ADC_Frame+0xae>
				{
					SPI_PLUCK_TX[(j * 2) + 1] = (didPlucked[j] >> 8);
 8000788:	1201      	asrs	r1, r0, #8
 800078a:	0063      	lsls	r3, r4, #1
 800078c:	3301      	adds	r3, #1
 800078e:	4a29      	ldr	r2, [pc, #164]	; (8000834 <ADC_Frame+0x134>)
 8000790:	4413      	add	r3, r2
 8000792:	f883 1180 	strb.w	r1, [r3, #384]	; 0x180
					SPI_PLUCK_TX[(j * 2) + 2] = (didPlucked[j] & 0xff);
 8000796:	1c63      	adds	r3, r4, #1
 8000798:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800079c:	f882 0180 	strb.w	r0, [r2, #384]	; 0x180
					pluckValues[j] = didPlucked[j];
 80007a0:	4b2b      	ldr	r3, [pc, #172]	; (8000850 <ADC_Frame+0x150>)
 80007a2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
					changeHappened = 1;
					stringSounding[j] = 1;
 80007a6:	2601      	movs	r6, #1
 80007a8:	4b28      	ldr	r3, [pc, #160]	; (800084c <ADC_Frame+0x14c>)
 80007aa:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
				}

				if ((stringTouchRH[j]) && (stringSounding[j]))
 80007ae:	4b24      	ldr	r3, [pc, #144]	; (8000840 <ADC_Frame+0x140>)
 80007b0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d0c7      	beq.n	8000748 <ADC_Frame+0x48>
 80007b8:	4b24      	ldr	r3, [pc, #144]	; (800084c <ADC_Frame+0x14c>)
 80007ba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d0c2      	beq.n	8000748 <ADC_Frame+0x48>
				{

					SPI_PLUCK_TX[(j * 2) + 1] = 0;
 80007c2:	0063      	lsls	r3, r4, #1
 80007c4:	3301      	adds	r3, #1
 80007c6:	491b      	ldr	r1, [pc, #108]	; (8000834 <ADC_Frame+0x134>)
 80007c8:	440b      	add	r3, r1
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
					SPI_PLUCK_TX[(j * 2) + 2] = 0;
 80007d0:	1c63      	adds	r3, r4, #1
 80007d2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80007d6:	f881 2180 	strb.w	r2, [r1, #384]	; 0x180
					pluckValues[j] = 0;
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <ADC_Frame+0x150>)
 80007dc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
					changeHappened = 1;
					stringSounding[j] = 0;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <ADC_Frame+0x14c>)
 80007e2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
					changeHappened = 1;
 80007e6:	2601      	movs	r6, #1
 80007e8:	e7ae      	b.n	8000748 <ADC_Frame+0x48>
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 80007ea:	3501      	adds	r5, #1
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	42ab      	cmp	r3, r5
 80007f0:	db08      	blt.n	8000804 <ADC_Frame+0x104>
		if (howManyFrames > 0)
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <ADC_Frame+0x148>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	dd02      	ble.n	8000800 <ADC_Frame+0x100>
			howManyFrames--;
 80007fa:	3b01      	subs	r3, #1
 80007fc:	4a12      	ldr	r2, [pc, #72]	; (8000848 <ADC_Frame+0x148>)
 80007fe:	6013      	str	r3, [r2, #0]
{
 8000800:	2300      	movs	r3, #0
 8000802:	e792      	b.n	800072a <ADC_Frame+0x2a>


			}
		}
	}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2101      	movs	r1, #1
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <ADC_Frame+0x130>)
 800080a:	f003 fb93 	bl	8003f34 <HAL_GPIO_WritePin>
	if (changeHappened)
 800080e:	b906      	cbnz	r6, 8000812 <ADC_Frame+0x112>
		SPI_PLUCK_TX[0] = 254;
		SPI_PLUCK_TX[25] = 253;
		HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 26);
	}

}
 8000810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SPI_PLUCK_TX[0] = 254;
 8000812:	4908      	ldr	r1, [pc, #32]	; (8000834 <ADC_Frame+0x134>)
 8000814:	23fe      	movs	r3, #254	; 0xfe
 8000816:	f881 3180 	strb.w	r3, [r1, #384]	; 0x180
		SPI_PLUCK_TX[25] = 253;
 800081a:	23fd      	movs	r3, #253	; 0xfd
 800081c:	f881 3199 	strb.w	r3, [r1, #409]	; 0x199
		HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 26);
 8000820:	221a      	movs	r2, #26
 8000822:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8000826:	480b      	ldr	r0, [pc, #44]	; (8000854 <ADC_Frame+0x154>)
 8000828:	f005 ff8c 	bl	8006744 <HAL_SPI_Transmit_DMA>
}
 800082c:	e7f0      	b.n	8000810 <ADC_Frame+0x110>
 800082e:	bf00      	nop
 8000830:	58020c00 	.word	0x58020c00
 8000834:	30000000 	.word	0x30000000
 8000838:	2400079c 	.word	0x2400079c
 800083c:	2400009c 	.word	0x2400009c
 8000840:	24000784 	.word	0x24000784
 8000844:	24000110 	.word	0x24000110
 8000848:	24000000 	.word	0x24000000
 800084c:	24000754 	.word	0x24000754
 8000850:	24000664 	.word	0x24000664
 8000854:	2400038c 	.word	0x2400038c

08000858 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000858:	b508      	push	{r3, lr}
	ADC_Frame(ADC_FRAME_SIZE);
 800085a:	2008      	movs	r0, #8
 800085c:	f7ff ff50 	bl	8000700 <ADC_Frame>
}
 8000860:	bd08      	pop	{r3, pc}

08000862 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000862:	b508      	push	{r3, lr}
	ADC_Frame(0);
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff ff4b 	bl	8000700 <ADC_Frame>
}
 800086a:	bd08      	pop	{r3, pc}

0800086c <HAL_SPI_RxCpltCallback>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800086c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2110      	movs	r1, #16
 8000872:	480e      	ldr	r0, [pc, #56]	; (80008ac <HAL_SPI_RxCpltCallback+0x40>)
 8000874:	f003 fb5e 	bl	8003f34 <HAL_GPIO_WritePin>
	if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <HAL_SPI_RxCpltCallback+0x44>)
 800087a:	f893 31a6 	ldrb.w	r3, [r3, #422]	; 0x1a6
 800087e:	2bfe      	cmp	r3, #254	; 0xfe
 8000880:	d000      	beq.n	8000884 <HAL_SPI_RxCpltCallback+0x18>
		for (int i = 0; i < 2; i++)
		{
			RHbits[i] = SPI_RX[i+4];
		}
	}
}
 8000882:	bd08      	pop	{r3, pc}
	if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <HAL_SPI_RxCpltCallback+0x44>)
 8000886:	f893 31a7 	ldrb.w	r3, [r3, #423]	; 0x1a7
 800088a:	2bfd      	cmp	r3, #253	; 0xfd
 800088c:	d1f9      	bne.n	8000882 <HAL_SPI_RxCpltCallback+0x16>
		for (int i = 0; i < 2; i++)
 800088e:	2300      	movs	r3, #0
 8000890:	e008      	b.n	80008a4 <HAL_SPI_RxCpltCallback+0x38>
			RHbits[i] = SPI_RX[i+4];
 8000892:	1d19      	adds	r1, r3, #4
 8000894:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <HAL_SPI_RxCpltCallback+0x44>)
 8000896:	440a      	add	r2, r1
 8000898:	f892 11a0 	ldrb.w	r1, [r2, #416]	; 0x1a0
 800089c:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <HAL_SPI_RxCpltCallback+0x48>)
 800089e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 2; i++)
 80008a2:	3301      	adds	r3, #1
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	ddf4      	ble.n	8000892 <HAL_SPI_RxCpltCallback+0x26>
 80008a8:	e7eb      	b.n	8000882 <HAL_SPI_RxCpltCallback+0x16>
 80008aa:	bf00      	nop
 80008ac:	58020400 	.word	0x58020400
 80008b0:	30000000 	.word	0x30000000
 80008b4:	2400009c 	.word	0x2400009c

080008b8 <HAL_SPI_RxHalfCpltCallback>:

void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80008b8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	2110      	movs	r1, #16
 80008be:	480d      	ldr	r0, [pc, #52]	; (80008f4 <HAL_SPI_RxHalfCpltCallback+0x3c>)
 80008c0:	f003 fb38 	bl	8003f34 <HAL_GPIO_WritePin>
	if ((SPI_RX[2] == 254) && (SPI_RX[3] == 253))
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_SPI_RxHalfCpltCallback+0x40>)
 80008c6:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 80008ca:	2bfe      	cmp	r3, #254	; 0xfe
 80008cc:	d000      	beq.n	80008d0 <HAL_SPI_RxHalfCpltCallback+0x18>
		for (int i = 0; i < 2; i++)
		{
			RHbits[i] = SPI_RX[i];
		}
	}
}
 80008ce:	bd08      	pop	{r3, pc}
	if ((SPI_RX[2] == 254) && (SPI_RX[3] == 253))
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_SPI_RxHalfCpltCallback+0x40>)
 80008d2:	f893 31a3 	ldrb.w	r3, [r3, #419]	; 0x1a3
 80008d6:	2bfd      	cmp	r3, #253	; 0xfd
 80008d8:	d1f9      	bne.n	80008ce <HAL_SPI_RxHalfCpltCallback+0x16>
		for (int i = 0; i < 2; i++)
 80008da:	2300      	movs	r3, #0
 80008dc:	e007      	b.n	80008ee <HAL_SPI_RxHalfCpltCallback+0x36>
			RHbits[i] = SPI_RX[i];
 80008de:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <HAL_SPI_RxHalfCpltCallback+0x40>)
 80008e0:	441a      	add	r2, r3
 80008e2:	f892 11a0 	ldrb.w	r1, [r2, #416]	; 0x1a0
 80008e6:	4a05      	ldr	r2, [pc, #20]	; (80008fc <HAL_SPI_RxHalfCpltCallback+0x44>)
 80008e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 2; i++)
 80008ec:	3301      	adds	r3, #1
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	ddf5      	ble.n	80008de <HAL_SPI_RxHalfCpltCallback+0x26>
 80008f2:	e7ec      	b.n	80008ce <HAL_SPI_RxHalfCpltCallback+0x16>
 80008f4:	58020400 	.word	0x58020400
 80008f8:	30000000 	.word	0x30000000
 80008fc:	2400009c 	.word	0x2400009c

08000900 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000902:	e7fe      	b.n	8000902 <Error_Handler+0x2>

08000904 <MX_SPI1_Init>:
{
 8000904:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8000906:	4814      	ldr	r0, [pc, #80]	; (8000958 <MX_SPI1_Init+0x54>)
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_SPI1_Init+0x58>)
 800090a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800090c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000910:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000912:	2300      	movs	r3, #0
 8000914:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000916:	2207      	movs	r2, #7
 8000918:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800091a:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091c:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800091e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000922:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000924:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000928:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800092c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800092e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000930:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000932:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000936:	6342      	str	r2, [r0, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000938:	6383      	str	r3, [r0, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800093a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800093c:	6403      	str	r3, [r0, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800093e:	6443      	str	r3, [r0, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000940:	6483      	str	r3, [r0, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000942:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000944:	6503      	str	r3, [r0, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000946:	6543      	str	r3, [r0, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000948:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800094a:	f005 fe33 	bl	80065b4 <HAL_SPI_Init>
 800094e:	b900      	cbnz	r0, 8000952 <MX_SPI1_Init+0x4e>
}
 8000950:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000952:	f7ff ffd5 	bl	8000900 <Error_Handler>
 8000956:	bf00      	nop
 8000958:	2400038c 	.word	0x2400038c
 800095c:	40013000 	.word	0x40013000

08000960 <MX_SPI3_Init>:
{
 8000960:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 8000962:	480f      	ldr	r0, [pc, #60]	; (80009a0 <MX_SPI3_Init+0x40>)
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_SPI3_Init+0x44>)
 8000966:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000968:	2300      	movs	r3, #0
 800096a:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800096c:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800096e:	2207      	movs	r2, #7
 8000970:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000972:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000974:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000976:	6183      	str	r3, [r0, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000978:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800097a:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097c:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800097e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000980:	6343      	str	r3, [r0, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000982:	6383      	str	r3, [r0, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000984:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000986:	6403      	str	r3, [r0, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000988:	6443      	str	r3, [r0, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800098a:	6483      	str	r3, [r0, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800098c:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800098e:	6503      	str	r3, [r0, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000990:	6543      	str	r3, [r0, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000992:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000994:	f005 fe0e 	bl	80065b4 <HAL_SPI_Init>
 8000998:	b900      	cbnz	r0, 800099c <MX_SPI3_Init+0x3c>
}
 800099a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800099c:	f7ff ffb0 	bl	8000900 <Error_Handler>
 80009a0:	2400049c 	.word	0x2400049c
 80009a4:	40003c00 	.word	0x40003c00

080009a8 <MX_SPI2_Init>:
{
 80009a8:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 80009aa:	480f      	ldr	r0, [pc, #60]	; (80009e8 <MX_SPI2_Init+0x40>)
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_SPI2_Init+0x44>)
 80009ae:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009b4:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009b6:	2207      	movs	r2, #7
 80009b8:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ba:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009bc:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80009be:	6183      	str	r3, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c0:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c2:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80009c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009c8:	6343      	str	r3, [r0, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009ca:	6383      	str	r3, [r0, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009cc:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009ce:	6403      	str	r3, [r0, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009d0:	6443      	str	r3, [r0, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009d2:	6483      	str	r3, [r0, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009d4:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009d6:	6503      	str	r3, [r0, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009d8:	6543      	str	r3, [r0, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009da:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009dc:	f005 fdea 	bl	80065b4 <HAL_SPI_Init>
 80009e0:	b900      	cbnz	r0, 80009e4 <MX_SPI2_Init+0x3c>
}
 80009e2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80009e4:	f7ff ff8c 	bl	8000900 <Error_Handler>
 80009e8:	24000414 	.word	0x24000414
 80009ec:	40003800 	.word	0x40003800

080009f0 <MX_ADC1_Init>:
{
 80009f0:	b510      	push	{r4, lr}
 80009f2:	b08c      	sub	sp, #48	; 0x30
  ADC_MultiModeTypeDef multimode = {0};
 80009f4:	2400      	movs	r4, #0
 80009f6:	9409      	str	r4, [sp, #36]	; 0x24
 80009f8:	940a      	str	r4, [sp, #40]	; 0x28
 80009fa:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 80009fc:	2224      	movs	r2, #36	; 0x24
 80009fe:	4621      	mov	r1, r4
 8000a00:	4668      	mov	r0, sp
 8000a02:	f006 fee3 	bl	80077cc <memset>
  hadc1.Instance = ADC1;
 8000a06:	486c      	ldr	r0, [pc, #432]	; (8000bb8 <MX_ADC1_Init+0x1c8>)
 8000a08:	4b6c      	ldr	r3, [pc, #432]	; (8000bbc <MX_ADC1_Init+0x1cc>)
 8000a0a:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a0c:	6044      	str	r4, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a0e:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a10:	2301      	movs	r3, #1
 8000a12:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a14:	2208      	movs	r2, #8
 8000a16:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a18:	7604      	strb	r4, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a1a:	7643      	strb	r3, [r0, #25]
  hadc1.Init.NbrOfConversion = 12;
 8000a1c:	220c      	movs	r2, #12
 8000a1e:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a20:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a24:	6284      	str	r4, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a26:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000a28:	2203      	movs	r2, #3
 8000a2a:	6302      	str	r2, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a30:	63c2      	str	r2, [r0, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a32:	6404      	str	r4, [r0, #64]	; 0x40
  hadc1.Init.OversamplingMode = ENABLE;
 8000a34:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  hadc1.Init.Oversampling.Ratio = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	6483      	str	r3, [r0, #72]	; 0x48
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	64c3      	str	r3, [r0, #76]	; 0x4c
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000a40:	6504      	str	r4, [r0, #80]	; 0x50
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 8000a42:	f240 4301 	movw	r3, #1025	; 0x401
 8000a46:	6543      	str	r3, [r0, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a48:	f001 fc8a 	bl	8002360 <HAL_ADC_Init>
 8000a4c:	2800      	cmp	r0, #0
 8000a4e:	f040 8096 	bne.w	8000b7e <MX_ADC1_Init+0x18e>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a52:	2300      	movs	r3, #0
 8000a54:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a56:	a909      	add	r1, sp, #36	; 0x24
 8000a58:	4857      	ldr	r0, [pc, #348]	; (8000bb8 <MX_ADC1_Init+0x1c8>)
 8000a5a:	f001 fdf7 	bl	800264c <HAL_ADCEx_MultiModeConfigChannel>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	f040 808f 	bne.w	8000b82 <MX_ADC1_Init+0x192>
  sConfig.Channel = ADC_CHANNEL_16;
 8000a64:	4b56      	ldr	r3, [pc, #344]	; (8000bc0 <MX_ADC1_Init+0x1d0>)
 8000a66:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a68:	2306      	movs	r3, #6
 8000a6a:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a70:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000a74:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a76:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	9305      	str	r3, [sp, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a7c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a80:	4669      	mov	r1, sp
 8000a82:	484d      	ldr	r0, [pc, #308]	; (8000bb8 <MX_ADC1_Init+0x1c8>)
 8000a84:	f000 ff64 	bl	8001950 <HAL_ADC_ConfigChannel>
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	d17c      	bne.n	8000b86 <MX_ADC1_Init+0x196>
  sConfig.Channel = ADC_CHANNEL_17;
 8000a8c:	4b4d      	ldr	r3, [pc, #308]	; (8000bc4 <MX_ADC1_Init+0x1d4>)
 8000a8e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a90:	230c      	movs	r3, #12
 8000a92:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a94:	4669      	mov	r1, sp
 8000a96:	4848      	ldr	r0, [pc, #288]	; (8000bb8 <MX_ADC1_Init+0x1c8>)
 8000a98:	f000 ff5a 	bl	8001950 <HAL_ADC_ConfigChannel>
 8000a9c:	2800      	cmp	r0, #0
 8000a9e:	d174      	bne.n	8000b8a <MX_ADC1_Init+0x19a>
  sConfig.Channel = ADC_CHANNEL_14;
 8000aa0:	4b49      	ldr	r3, [pc, #292]	; (8000bc8 <MX_ADC1_Init+0x1d8>)
 8000aa2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000aa4:	2312      	movs	r3, #18
 8000aa6:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa8:	4669      	mov	r1, sp
 8000aaa:	4843      	ldr	r0, [pc, #268]	; (8000bb8 <MX_ADC1_Init+0x1c8>)
 8000aac:	f000 ff50 	bl	8001950 <HAL_ADC_ConfigChannel>
 8000ab0:	2800      	cmp	r0, #0
 8000ab2:	d16c      	bne.n	8000b8e <MX_ADC1_Init+0x19e>
  sConfig.Channel = ADC_CHANNEL_15;
 8000ab4:	4b45      	ldr	r3, [pc, #276]	; (8000bcc <MX_ADC1_Init+0x1dc>)
 8000ab6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000ab8:	2318      	movs	r3, #24
 8000aba:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000abc:	2305      	movs	r3, #5
 8000abe:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac0:	4669      	mov	r1, sp
 8000ac2:	483d      	ldr	r0, [pc, #244]	; (8000bb8 <MX_ADC1_Init+0x1c8>)
 8000ac4:	f000 ff44 	bl	8001950 <HAL_ADC_ConfigChannel>
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	d162      	bne.n	8000b92 <MX_ADC1_Init+0x1a2>
  sConfig.Channel = ADC_CHANNEL_18;
 8000acc:	4b40      	ldr	r3, [pc, #256]	; (8000bd0 <MX_ADC1_Init+0x1e0>)
 8000ace:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad4:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ada:	4669      	mov	r1, sp
 8000adc:	4836      	ldr	r0, [pc, #216]	; (8000bb8 <MX_ADC1_Init+0x1c8>)
 8000ade:	f000 ff37 	bl	8001950 <HAL_ADC_ConfigChannel>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	d157      	bne.n	8000b96 <MX_ADC1_Init+0x1a6>
  sConfig.Channel = ADC_CHANNEL_19;
 8000ae6:	4b3b      	ldr	r3, [pc, #236]	; (8000bd4 <MX_ADC1_Init+0x1e4>)
 8000ae8:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000aea:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000aee:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af0:	4669      	mov	r1, sp
 8000af2:	4831      	ldr	r0, [pc, #196]	; (8000bb8 <MX_ADC1_Init+0x1c8>)
 8000af4:	f000 ff2c 	bl	8001950 <HAL_ADC_ConfigChannel>
 8000af8:	2800      	cmp	r0, #0
 8000afa:	d14e      	bne.n	8000b9a <MX_ADC1_Init+0x1aa>
  sConfig.Channel = ADC_CHANNEL_3;
 8000afc:	4b36      	ldr	r3, [pc, #216]	; (8000bd8 <MX_ADC1_Init+0x1e8>)
 8000afe:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000b00:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000b04:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b06:	4669      	mov	r1, sp
 8000b08:	482b      	ldr	r0, [pc, #172]	; (8000bb8 <MX_ADC1_Init+0x1c8>)
 8000b0a:	f000 ff21 	bl	8001950 <HAL_ADC_ConfigChannel>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	d145      	bne.n	8000b9e <MX_ADC1_Init+0x1ae>
  sConfig.Channel = ADC_CHANNEL_7;
 8000b12:	4b32      	ldr	r3, [pc, #200]	; (8000bdc <MX_ADC1_Init+0x1ec>)
 8000b14:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000b16:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000b1a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b1c:	4669      	mov	r1, sp
 8000b1e:	4826      	ldr	r0, [pc, #152]	; (8000bb8 <MX_ADC1_Init+0x1c8>)
 8000b20:	f000 ff16 	bl	8001950 <HAL_ADC_ConfigChannel>
 8000b24:	2800      	cmp	r0, #0
 8000b26:	d13c      	bne.n	8000ba2 <MX_ADC1_Init+0x1b2>
  sConfig.Channel = ADC_CHANNEL_4;
 8000b28:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <MX_ADC1_Init+0x1f0>)
 8000b2a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000b2c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000b30:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b32:	4669      	mov	r1, sp
 8000b34:	4820      	ldr	r0, [pc, #128]	; (8000bb8 <MX_ADC1_Init+0x1c8>)
 8000b36:	f000 ff0b 	bl	8001950 <HAL_ADC_ConfigChannel>
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	d133      	bne.n	8000ba6 <MX_ADC1_Init+0x1b6>
  sConfig.Channel = ADC_CHANNEL_8;
 8000b3e:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <MX_ADC1_Init+0x1f4>)
 8000b40:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b46:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b48:	4669      	mov	r1, sp
 8000b4a:	481b      	ldr	r0, [pc, #108]	; (8000bb8 <MX_ADC1_Init+0x1c8>)
 8000b4c:	f000 ff00 	bl	8001950 <HAL_ADC_ConfigChannel>
 8000b50:	bb58      	cbnz	r0, 8000baa <MX_ADC1_Init+0x1ba>
  sConfig.Channel = ADC_CHANNEL_9;
 8000b52:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <MX_ADC1_Init+0x1f8>)
 8000b54:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000b56:	f240 2306 	movw	r3, #518	; 0x206
 8000b5a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b5c:	4669      	mov	r1, sp
 8000b5e:	4816      	ldr	r0, [pc, #88]	; (8000bb8 <MX_ADC1_Init+0x1c8>)
 8000b60:	f000 fef6 	bl	8001950 <HAL_ADC_ConfigChannel>
 8000b64:	bb18      	cbnz	r0, 8000bae <MX_ADC1_Init+0x1be>
  sConfig.Channel = ADC_CHANNEL_5;
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <MX_ADC1_Init+0x1fc>)
 8000b68:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000b6a:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8000b6e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b70:	4669      	mov	r1, sp
 8000b72:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <MX_ADC1_Init+0x1c8>)
 8000b74:	f000 feec 	bl	8001950 <HAL_ADC_ConfigChannel>
 8000b78:	b9d8      	cbnz	r0, 8000bb2 <MX_ADC1_Init+0x1c2>
}
 8000b7a:	b00c      	add	sp, #48	; 0x30
 8000b7c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000b7e:	f7ff febf 	bl	8000900 <Error_Handler>
    Error_Handler();
 8000b82:	f7ff febd 	bl	8000900 <Error_Handler>
    Error_Handler();
 8000b86:	f7ff febb 	bl	8000900 <Error_Handler>
    Error_Handler();
 8000b8a:	f7ff feb9 	bl	8000900 <Error_Handler>
    Error_Handler();
 8000b8e:	f7ff feb7 	bl	8000900 <Error_Handler>
    Error_Handler();
 8000b92:	f7ff feb5 	bl	8000900 <Error_Handler>
    Error_Handler();
 8000b96:	f7ff feb3 	bl	8000900 <Error_Handler>
    Error_Handler();
 8000b9a:	f7ff feb1 	bl	8000900 <Error_Handler>
    Error_Handler();
 8000b9e:	f7ff feaf 	bl	8000900 <Error_Handler>
    Error_Handler();
 8000ba2:	f7ff fead 	bl	8000900 <Error_Handler>
    Error_Handler();
 8000ba6:	f7ff feab 	bl	8000900 <Error_Handler>
    Error_Handler();
 8000baa:	f7ff fea9 	bl	8000900 <Error_Handler>
    Error_Handler();
 8000bae:	f7ff fea7 	bl	8000900 <Error_Handler>
    Error_Handler();
 8000bb2:	f7ff fea5 	bl	8000900 <Error_Handler>
 8000bb6:	bf00      	nop
 8000bb8:	240001a0 	.word	0x240001a0
 8000bbc:	40022000 	.word	0x40022000
 8000bc0:	43210000 	.word	0x43210000
 8000bc4:	47520000 	.word	0x47520000
 8000bc8:	3ac04000 	.word	0x3ac04000
 8000bcc:	3ef08000 	.word	0x3ef08000
 8000bd0:	4b840000 	.word	0x4b840000
 8000bd4:	4fb80000 	.word	0x4fb80000
 8000bd8:	0c900008 	.word	0x0c900008
 8000bdc:	1d500080 	.word	0x1d500080
 8000be0:	10c00010 	.word	0x10c00010
 8000be4:	21800100 	.word	0x21800100
 8000be8:	25b00200 	.word	0x25b00200
 8000bec:	14f00020 	.word	0x14f00020

08000bf0 <MX_RNG_Init>:
{
 8000bf0:	b508      	push	{r3, lr}
  hrng.Instance = RNG;
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_RNG_Init+0x18>)
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <MX_RNG_Init+0x1c>)
 8000bf6:	6003      	str	r3, [r0, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	6043      	str	r3, [r0, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000bfc:	f005 fb50 	bl	80062a0 <HAL_RNG_Init>
 8000c00:	b900      	cbnz	r0, 8000c04 <MX_RNG_Init+0x14>
}
 8000c02:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000c04:	f7ff fe7c 	bl	8000900 <Error_Handler>
 8000c08:	24000378 	.word	0x24000378
 8000c0c:	48021800 	.word	0x48021800

08000c10 <SystemClock_Config>:
{
 8000c10:	b500      	push	{lr}
 8000c12:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c14:	224c      	movs	r2, #76	; 0x4c
 8000c16:	2100      	movs	r1, #0
 8000c18:	a809      	add	r0, sp, #36	; 0x24
 8000c1a:	f006 fdd7 	bl	80077cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1e:	2220      	movs	r2, #32
 8000c20:	2100      	movs	r1, #0
 8000c22:	a801      	add	r0, sp, #4
 8000c24:	f006 fdd2 	bl	80077cc <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f003 f989 	bl	8003f40 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c2e:	2300      	movs	r3, #0
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <SystemClock_Config+0xb8>)
 8000c34:	699a      	ldr	r2, [r3, #24]
 8000c36:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000c3a:	619a      	str	r2, [r3, #24]
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c46:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <SystemClock_Config+0xb8>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000c4e:	d0fa      	beq.n	8000c46 <SystemClock_Config+0x36>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000c50:	4a1e      	ldr	r2, [pc, #120]	; (8000ccc <SystemClock_Config+0xbc>)
 8000c52:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000c54:	f023 0303 	bic.w	r3, r3, #3
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000c5e:	2321      	movs	r3, #33	; 0x21
 8000c60:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c66:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c68:	2201      	movs	r2, #1
 8000c6a:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c70:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c72:	2119      	movs	r1, #25
 8000c74:	9114      	str	r1, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 420;
 8000c76:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8000c7a:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c7c:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c7e:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c80:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000c82:	2200      	movs	r2, #0
 8000c84:	9219      	str	r2, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000c86:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c88:	921b      	str	r2, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8a:	a809      	add	r0, sp, #36	; 0x24
 8000c8c:	f003 f982 	bl	8003f94 <HAL_RCC_OscConfig>
 8000c90:	b9b0      	cbnz	r0, 8000cc0 <SystemClock_Config+0xb0>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c92:	233f      	movs	r3, #63	; 0x3f
 8000c94:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c96:	2303      	movs	r3, #3
 8000c98:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c9e:	2308      	movs	r3, #8
 8000ca0:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ca2:	2340      	movs	r3, #64	; 0x40
 8000ca4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ca6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ca8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cac:	9207      	str	r2, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cae:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	a801      	add	r0, sp, #4
 8000cb4:	f003 fd5e 	bl	8004774 <HAL_RCC_ClockConfig>
 8000cb8:	b920      	cbnz	r0, 8000cc4 <SystemClock_Config+0xb4>
}
 8000cba:	b01d      	add	sp, #116	; 0x74
 8000cbc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000cc0:	f7ff fe1e 	bl	8000900 <Error_Handler>
    Error_Handler();
 8000cc4:	f7ff fe1c 	bl	8000900 <Error_Handler>
 8000cc8:	58024800 	.word	0x58024800
 8000ccc:	58024400 	.word	0x58024400

08000cd0 <main>:
{
 8000cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MPU_Conf();
 8000cd2:	f7ff fbdb 	bl	800048c <MPU_Conf>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000cd6:	4b67      	ldr	r3, [pc, #412]	; (8000e74 <main+0x1a4>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000cde:	d113      	bne.n	8000d08 <main+0x38>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ce0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ce4:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ce8:	4b62      	ldr	r3, [pc, #392]	; (8000e74 <main+0x1a4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000cf0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cf4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000cf8:	695a      	ldr	r2, [r3, #20]
 8000cfa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000cfe:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d04:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000d08:	4b5a      	ldr	r3, [pc, #360]	; (8000e74 <main+0x1a4>)
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000d10:	d127      	bne.n	8000d62 <main+0x92>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000d12:	4b58      	ldr	r3, [pc, #352]	; (8000e74 <main+0x1a4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000d1a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000d1e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d22:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8000d26:	e000      	b.n	8000d2a <main+0x5a>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000d28:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d2a:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d2e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000d32:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8000d36:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000d3a:	494e      	ldr	r1, [pc, #312]	; (8000e74 <main+0x1a4>)
 8000d3c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000d40:	4613      	mov	r3, r2
 8000d42:	3a01      	subs	r2, #1
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1f2      	bne.n	8000d2e <main+0x5e>
    } while(sets-- != 0U);
 8000d48:	1e43      	subs	r3, r0, #1
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	d1ec      	bne.n	8000d28 <main+0x58>
 8000d4e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d52:	694b      	ldr	r3, [r1, #20]
 8000d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d58:	614b      	str	r3, [r1, #20]
 8000d5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d5e:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000d62:	f000 fbdb 	bl	800151c <HAL_Init>
  SystemClock_Config();
 8000d66:	f7ff ff53 	bl	8000c10 <SystemClock_Config>
  MX_GPIO_Init();
 8000d6a:	f7ff fad1 	bl	8000310 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d6e:	f7ff fb4b 	bl	8000408 <MX_DMA_Init>
  MX_SPI1_Init();
 8000d72:	f7ff fdc7 	bl	8000904 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000d76:	f7ff fdf3 	bl	8000960 <MX_SPI3_Init>
  MX_SPI2_Init();
 8000d7a:	f7ff fe15 	bl	80009a8 <MX_SPI2_Init>
  MX_ADC1_Init();
 8000d7e:	f7ff fe37 	bl	80009f0 <MX_ADC1_Init>
  MX_RNG_Init();
 8000d82:	f7ff ff35 	bl	8000bf0 <MX_RNG_Init>
  return __builtin_arm_get_fpscr();
 8000d86:	eef1 3a10 	vmrs	r3, fpscr
   tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 8000d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
 8000d8e:	eee1 3a10 	vmsr	fpscr, r3
   for (int i = 0; i < 4; i++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	e008      	b.n	8000da8 <main+0xd8>
 	  SPI_TX[i] = counter++;
 8000d96:	4a38      	ldr	r2, [pc, #224]	; (8000e78 <main+0x1a8>)
 8000d98:	7811      	ldrb	r1, [r2, #0]
 8000d9a:	1c48      	adds	r0, r1, #1
 8000d9c:	7010      	strb	r0, [r2, #0]
 8000d9e:	4a37      	ldr	r2, [pc, #220]	; (8000e7c <main+0x1ac>)
 8000da0:	441a      	add	r2, r3
 8000da2:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
   for (int i = 0; i < 4; i++)
 8000da6:	3301      	adds	r3, #1
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	ddf4      	ble.n	8000d96 <main+0xc6>
   for (int i = 0; i < 26; i++)
 8000dac:	2300      	movs	r3, #0
 8000dae:	e005      	b.n	8000dbc <main+0xec>
 	  SPI_PLUCK_TX[i] = 0;
 8000db0:	4a32      	ldr	r2, [pc, #200]	; (8000e7c <main+0x1ac>)
 8000db2:	441a      	add	r2, r3
 8000db4:	2100      	movs	r1, #0
 8000db6:	f882 1180 	strb.w	r1, [r2, #384]	; 0x180
   for (int i = 0; i < 26; i++)
 8000dba:	3301      	adds	r3, #1
 8000dbc:	2b19      	cmp	r3, #25
 8000dbe:	ddf7      	ble.n	8000db0 <main+0xe0>
   HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 8);
 8000dc0:	2208      	movs	r2, #8
 8000dc2:	492f      	ldr	r1, [pc, #188]	; (8000e80 <main+0x1b0>)
 8000dc4:	482f      	ldr	r0, [pc, #188]	; (8000e84 <main+0x1b4>)
 8000dc6:	f005 fda1 	bl	800690c <HAL_SPI_Receive_DMA>
   HAL_Delay(10);
 8000dca:	200a      	movs	r0, #10
 8000dcc:	f000 fbe6 	bl	800159c <HAL_Delay>
   LEAF_init(&leaf, SAMPLE_RATE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 8000dd0:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <main+0x1b8>)
 8000dd2:	4a2e      	ldr	r2, [pc, #184]	; (8000e8c <main+0x1bc>)
 8000dd4:	492e      	ldr	r1, [pc, #184]	; (8000e90 <main+0x1c0>)
 8000dd6:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8000e94 <main+0x1c4>
 8000dda:	482f      	ldr	r0, [pc, #188]	; (8000e98 <main+0x1c8>)
 8000ddc:	f006 fc90 	bl	8007700 <LEAF_init>
   for (int i = 0; i < NUM_STRINGS; i++)
 8000de0:	2500      	movs	r5, #0
 8000de2:	e019      	b.n	8000e18 <main+0x148>
   		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 1000.0f, 0.6f, &leaf);
 8000de4:	4e2c      	ldr	r6, [pc, #176]	; (8000e98 <main+0x1c8>)
 8000de6:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 8000dea:	009f      	lsls	r7, r3, #2
 8000dec:	4632      	mov	r2, r6
 8000dee:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8000e9c <main+0x1cc>
 8000df2:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8000ea0 <main+0x1d0>
 8000df6:	2101      	movs	r1, #1
 8000df8:	482a      	ldr	r0, [pc, #168]	; (8000ea4 <main+0x1d4>)
 8000dfa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8000dfe:	f006 fae9 	bl	80073d4 <tVZFilter_init>
   		tHighpass_init(&opticalHighpass[i][j], 10.0f, &leaf);
 8000e02:	4631      	mov	r1, r6
 8000e04:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000e08:	4827      	ldr	r0, [pc, #156]	; (8000ea8 <main+0x1d8>)
 8000e0a:	4438      	add	r0, r7
 8000e0c:	f006 f89c 	bl	8006f48 <tHighpass_init>
   	for (int j = 0; j < FILTER_ORDER; j++)
 8000e10:	3401      	adds	r4, #1
 8000e12:	2c01      	cmp	r4, #1
 8000e14:	dde6      	ble.n	8000de4 <main+0x114>
   for (int i = 0; i < NUM_STRINGS; i++)
 8000e16:	3501      	adds	r5, #1
 8000e18:	2d0b      	cmp	r5, #11
 8000e1a:	dc1f      	bgt.n	8000e5c <main+0x18c>
   	tThreshold_init(&threshold[i],1000.0f, 1200.0f, &leaf);
 8000e1c:	4e1e      	ldr	r6, [pc, #120]	; (8000e98 <main+0x1c8>)
 8000e1e:	00ac      	lsls	r4, r5, #2
 8000e20:	4631      	mov	r1, r6
 8000e22:	eddf 0a22 	vldr	s1, [pc, #136]	; 8000eac <main+0x1dc>
 8000e26:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8000ea0 <main+0x1d0>
 8000e2a:	4821      	ldr	r0, [pc, #132]	; (8000eb0 <main+0x1e0>)
 8000e2c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8000e30:	f005 ffe0 	bl	8006df4 <tThreshold_init>
   	tSlide_init(&fastSlide[i],1.0f,500.0f, &leaf); //1110
 8000e34:	4631      	mov	r1, r6
 8000e36:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8000eb4 <main+0x1e4>
 8000e3a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000e3e:	481e      	ldr	r0, [pc, #120]	; (8000eb8 <main+0x1e8>)
 8000e40:	4420      	add	r0, r4
 8000e42:	f006 f827 	bl	8006e94 <tSlide_init>
   	tSlide_init(&slowSlide[i],1.0f,1100.0f, &leaf); //1110
 8000e46:	4631      	mov	r1, r6
 8000e48:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8000ebc <main+0x1ec>
 8000e4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000e50:	481b      	ldr	r0, [pc, #108]	; (8000ec0 <main+0x1f0>)
 8000e52:	4420      	add	r0, r4
 8000e54:	f006 f81e 	bl	8006e94 <tSlide_init>
   	for (int j = 0; j < FILTER_ORDER; j++)
 8000e58:	2400      	movs	r4, #0
 8000e5a:	e7da      	b.n	8000e12 <main+0x142>
   LEAF_generate_atodb(atodbTable, ATODB_TABLE_SIZE);
 8000e5c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000e60:	4818      	ldr	r0, [pc, #96]	; (8000ec4 <main+0x1f4>)
 8000e62:	f006 fb05 	bl	8007470 <LEAF_generate_atodb>
   HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values1,NUM_ADC_CHANNELS * ADC_BUFFER_SIZE);
 8000e66:	22c0      	movs	r2, #192	; 0xc0
 8000e68:	4904      	ldr	r1, [pc, #16]	; (8000e7c <main+0x1ac>)
 8000e6a:	4817      	ldr	r0, [pc, #92]	; (8000ec8 <main+0x1f8>)
 8000e6c:	f001 f93c 	bl	80020e8 <HAL_ADC_Start_DMA>
   while (1)
 8000e70:	e7fe      	b.n	8000e70 <main+0x1a0>
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00
 8000e78:	24000104 	.word	0x24000104
 8000e7c:	30000000 	.word	0x30000000
 8000e80:	300001a0 	.word	0x300001a0
 8000e84:	24000414 	.word	0x24000414
 8000e88:	08000461 	.word	0x08000461
 8000e8c:	00033450 	.word	0x00033450
 8000e90:	240194c0 	.word	0x240194c0
 8000e94:	473b8000 	.word	0x473b8000
 8000e98:	24000554 	.word	0x24000554
 8000e9c:	3f19999a 	.word	0x3f19999a
 8000ea0:	447a0000 	.word	0x447a0000
 8000ea4:	24000604 	.word	0x24000604
 8000ea8:	240005a4 	.word	0x240005a4
 8000eac:	44960000 	.word	0x44960000
 8000eb0:	240007d0 	.word	0x240007d0
 8000eb4:	43fa0000 	.word	0x43fa0000
 8000eb8:	24000170 	.word	0x24000170
 8000ebc:	44898000 	.word	0x44898000
 8000ec0:	240006f4 	.word	0x240006f4
 8000ec4:	24000e20 	.word	0x24000e20
 8000ec8:	240001a0 	.word	0x240001a0

08000ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	4b07      	ldr	r3, [pc, #28]	; (8000eec <HAL_MspInit+0x20>)
 8000ed0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000ed4:	f042 0202 	orr.w	r2, r2, #2
 8000ed8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000edc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee8:	b002      	add	sp, #8
 8000eea:	4770      	bx	lr
 8000eec:	58024400 	.word	0x58024400

08000ef0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ef0:	b570      	push	{r4, r5, r6, lr}
 8000ef2:	b0b8      	sub	sp, #224	; 0xe0
 8000ef4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	9133      	str	r1, [sp, #204]	; 0xcc
 8000efa:	9134      	str	r1, [sp, #208]	; 0xd0
 8000efc:	9135      	str	r1, [sp, #212]	; 0xd4
 8000efe:	9136      	str	r1, [sp, #216]	; 0xd8
 8000f00:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f02:	22b8      	movs	r2, #184	; 0xb8
 8000f04:	a804      	add	r0, sp, #16
 8000f06:	f006 fc61 	bl	80077cc <memset>
  if(hadc->Instance==ADC1)
 8000f0a:	6822      	ldr	r2, [r4, #0]
 8000f0c:	4b4c      	ldr	r3, [pc, #304]	; (8001040 <HAL_ADC_MspInit+0x150>)
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d001      	beq.n	8000f16 <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f12:	b038      	add	sp, #224	; 0xe0
 8000f14:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f16:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000f20:	2319      	movs	r3, #25
 8000f22:	930e      	str	r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 220;
 8000f24:	23dc      	movs	r3, #220	; 0xdc
 8000f26:	930f      	str	r3, [sp, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 4;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	9311      	str	r3, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 5;
 8000f30:	2305      	movs	r3, #5
 8000f32:	9312      	str	r3, [sp, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f38:	9314      	str	r3, [sp, #80]	; 0x50
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000f3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f3e:	932c      	str	r3, [sp, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f40:	a804      	add	r0, sp, #16
 8000f42:	f003 fea1 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 8000f46:	2800      	cmp	r0, #0
 8000f48:	d173      	bne.n	8001032 <HAL_ADC_MspInit+0x142>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f4a:	4b3e      	ldr	r3, [pc, #248]	; (8001044 <HAL_ADC_MspInit+0x154>)
 8000f4c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000f50:	f042 0220 	orr.w	r2, r2, #32
 8000f54:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000f58:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000f5c:	f002 0220 	and.w	r2, r2, #32
 8000f60:	9200      	str	r2, [sp, #0]
 8000f62:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f68:	f042 0201 	orr.w	r2, r2, #1
 8000f6c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f74:	f002 0201 	and.w	r2, r2, #1
 8000f78:	9201      	str	r2, [sp, #4]
 8000f7a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f80:	f042 0204 	orr.w	r2, r2, #4
 8000f84:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f8c:	f002 0204 	and.w	r2, r2, #4
 8000f90:	9202      	str	r2, [sp, #8]
 8000f92:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f98:	f042 0202 	orr.w	r2, r2, #2
 8000f9c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	9303      	str	r3, [sp, #12]
 8000faa:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000fac:	23ff      	movs	r3, #255	; 0xff
 8000fae:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb0:	2603      	movs	r6, #3
 8000fb2:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2500      	movs	r5, #0
 8000fb6:	9535      	str	r5, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	a933      	add	r1, sp, #204	; 0xcc
 8000fba:	4823      	ldr	r0, [pc, #140]	; (8001048 <HAL_ADC_MspInit+0x158>)
 8000fbc:	f002 feb0 	bl	8003d20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fc0:	2330      	movs	r3, #48	; 0x30
 8000fc2:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fc4:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	9535      	str	r5, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc8:	a933      	add	r1, sp, #204	; 0xcc
 8000fca:	4820      	ldr	r0, [pc, #128]	; (800104c <HAL_ADC_MspInit+0x15c>)
 8000fcc:	f002 fea8 	bl	8003d20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fd0:	9633      	str	r6, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd2:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	9535      	str	r5, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	a933      	add	r1, sp, #204	; 0xcc
 8000fd8:	481d      	ldr	r0, [pc, #116]	; (8001050 <HAL_ADC_MspInit+0x160>)
 8000fda:	f002 fea1 	bl	8003d20 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream2;
 8000fde:	481d      	ldr	r0, [pc, #116]	; (8001054 <HAL_ADC_MspInit+0x164>)
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <HAL_ADC_MspInit+0x168>)
 8000fe2:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000fe4:	2309      	movs	r3, #9
 8000fe6:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fe8:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fea:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff0:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ff2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ff6:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffc:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001002:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001004:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001008:	6203      	str	r3, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800100a:	2304      	movs	r3, #4
 800100c:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800100e:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001010:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001012:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001014:	f001 fe98 	bl	8002d48 <HAL_DMA_Init>
 8001018:	b970      	cbnz	r0, 8001038 <HAL_ADC_MspInit+0x148>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_ADC_MspInit+0x164>)
 800101c:	65a3      	str	r3, [r4, #88]	; 0x58
 800101e:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	4611      	mov	r1, r2
 8001024:	2012      	movs	r0, #18
 8001026:	f001 fbd5 	bl	80027d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800102a:	2012      	movs	r0, #18
 800102c:	f001 fc08 	bl	8002840 <HAL_NVIC_EnableIRQ>
}
 8001030:	e76f      	b.n	8000f12 <HAL_ADC_MspInit+0x22>
      Error_Handler();
 8001032:	f7ff fc65 	bl	8000900 <Error_Handler>
 8001036:	e788      	b.n	8000f4a <HAL_ADC_MspInit+0x5a>
      Error_Handler();
 8001038:	f7ff fc62 	bl	8000900 <Error_Handler>
 800103c:	e7ed      	b.n	800101a <HAL_ADC_MspInit+0x12a>
 800103e:	bf00      	nop
 8001040:	40022000 	.word	0x40022000
 8001044:	58024400 	.word	0x58024400
 8001048:	58020000 	.word	0x58020000
 800104c:	58020800 	.word	0x58020800
 8001050:	58020400 	.word	0x58020400
 8001054:	24000210 	.word	0x24000210
 8001058:	40020040 	.word	0x40020040

0800105c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800105c:	b510      	push	{r4, lr}
 800105e:	b0b0      	sub	sp, #192	; 0xc0
 8001060:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001062:	22b8      	movs	r2, #184	; 0xb8
 8001064:	2100      	movs	r1, #0
 8001066:	a802      	add	r0, sp, #8
 8001068:	f006 fbb0 	bl	80077cc <memset>
  if(hrng->Instance==RNG)
 800106c:	6822      	ldr	r2, [r4, #0]
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_RNG_MspInit+0x50>)
 8001070:	429a      	cmp	r2, r3
 8001072:	d001      	beq.n	8001078 <HAL_RNG_MspInit+0x1c>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001074:	b030      	add	sp, #192	; 0xc0
 8001076:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001078:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800107c:	2300      	movs	r3, #0
 800107e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001082:	a802      	add	r0, sp, #8
 8001084:	f003 fe00 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 8001088:	b968      	cbnz	r0, 80010a6 <HAL_RNG_MspInit+0x4a>
    __HAL_RCC_RNG_CLK_ENABLE();
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <HAL_RNG_MspInit+0x54>)
 800108c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8001090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001094:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8001098:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800109c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	9b01      	ldr	r3, [sp, #4]
}
 80010a4:	e7e6      	b.n	8001074 <HAL_RNG_MspInit+0x18>
      Error_Handler();
 80010a6:	f7ff fc2b 	bl	8000900 <Error_Handler>
 80010aa:	e7ee      	b.n	800108a <HAL_RNG_MspInit+0x2e>
 80010ac:	48021800 	.word	0x48021800
 80010b0:	58024400 	.word	0x58024400

080010b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b6:	b0bd      	sub	sp, #244	; 0xf4
 80010b8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	2100      	movs	r1, #0
 80010bc:	9137      	str	r1, [sp, #220]	; 0xdc
 80010be:	9138      	str	r1, [sp, #224]	; 0xe0
 80010c0:	9139      	str	r1, [sp, #228]	; 0xe4
 80010c2:	913a      	str	r1, [sp, #232]	; 0xe8
 80010c4:	913b      	str	r1, [sp, #236]	; 0xec
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c6:	22b8      	movs	r2, #184	; 0xb8
 80010c8:	a808      	add	r0, sp, #32
 80010ca:	f006 fb7f 	bl	80077cc <memset>
  if(hspi->Instance==SPI1)
 80010ce:	6823      	ldr	r3, [r4, #0]
 80010d0:	4a93      	ldr	r2, [pc, #588]	; (8001320 <HAL_SPI_MspInit+0x26c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d008      	beq.n	80010e8 <HAL_SPI_MspInit+0x34>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 80010d6:	4a93      	ldr	r2, [pc, #588]	; (8001324 <HAL_SPI_MspInit+0x270>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d077      	beq.n	80011cc <HAL_SPI_MspInit+0x118>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 80010dc:	4a92      	ldr	r2, [pc, #584]	; (8001328 <HAL_SPI_MspInit+0x274>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	f000 80d1 	beq.w	8001286 <HAL_SPI_MspInit+0x1d2>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010e4:	b03d      	add	sp, #244	; 0xf4
 80010e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ec:	2300      	movs	r3, #0
 80010ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f2:	a808      	add	r0, sp, #32
 80010f4:	f003 fdc8 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	2800      	cmp	r0, #0
 80010fa:	d161      	bne.n	80011c0 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010fc:	4b8b      	ldr	r3, [pc, #556]	; (800132c <HAL_SPI_MspInit+0x278>)
 80010fe:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001102:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001106:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800110a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800110e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001112:	9200      	str	r2, [sp, #0]
 8001114:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001116:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800111a:	f042 0208 	orr.w	r2, r2, #8
 800111e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001122:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001126:	f002 0208 	and.w	r2, r2, #8
 800112a:	9201      	str	r2, [sp, #4]
 800112c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800112e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001132:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001136:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800113a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001142:	9302      	str	r3, [sp, #8]
 8001144:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2602      	movs	r6, #2
 800114c:	9638      	str	r6, [sp, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2500      	movs	r5, #0
 8001150:	9539      	str	r5, [sp, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001152:	963a      	str	r6, [sp, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001154:	2705      	movs	r7, #5
 8001156:	973b      	str	r7, [sp, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001158:	a937      	add	r1, sp, #220	; 0xdc
 800115a:	4875      	ldr	r0, [pc, #468]	; (8001330 <HAL_SPI_MspInit+0x27c>)
 800115c:	f002 fde0 	bl	8003d20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001160:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001164:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	9638      	str	r6, [sp, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	9539      	str	r5, [sp, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800116a:	963a      	str	r6, [sp, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800116c:	973b      	str	r7, [sp, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800116e:	a937      	add	r1, sp, #220	; 0xdc
 8001170:	4870      	ldr	r0, [pc, #448]	; (8001334 <HAL_SPI_MspInit+0x280>)
 8001172:	f002 fdd5 	bl	8003d20 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001176:	4870      	ldr	r0, [pc, #448]	; (8001338 <HAL_SPI_MspInit+0x284>)
 8001178:	4b70      	ldr	r3, [pc, #448]	; (800133c <HAL_SPI_MspInit+0x288>)
 800117a:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800117c:	2326      	movs	r3, #38	; 0x26
 800117e:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001180:	2340      	movs	r3, #64	; 0x40
 8001182:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001184:	60c5      	str	r5, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800118a:	6103      	str	r3, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800118c:	6145      	str	r5, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800118e:	6185      	str	r5, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001190:	61c5      	str	r5, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001192:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001196:	6203      	str	r3, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001198:	2304      	movs	r3, #4
 800119a:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800119c:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800119e:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011a0:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80011a2:	f001 fdd1 	bl	8002d48 <HAL_DMA_Init>
 80011a6:	b970      	cbnz	r0, 80011c6 <HAL_SPI_MspInit+0x112>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80011a8:	4b63      	ldr	r3, [pc, #396]	; (8001338 <HAL_SPI_MspInit+0x284>)
 80011aa:	67a3      	str	r3, [r4, #120]	; 0x78
 80011ac:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2101      	movs	r1, #1
 80011b2:	2023      	movs	r0, #35	; 0x23
 80011b4:	f001 fb0e 	bl	80027d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011b8:	2023      	movs	r0, #35	; 0x23
 80011ba:	f001 fb41 	bl	8002840 <HAL_NVIC_EnableIRQ>
 80011be:	e791      	b.n	80010e4 <HAL_SPI_MspInit+0x30>
      Error_Handler();
 80011c0:	f7ff fb9e 	bl	8000900 <Error_Handler>
 80011c4:	e79a      	b.n	80010fc <HAL_SPI_MspInit+0x48>
      Error_Handler();
 80011c6:	f7ff fb9b 	bl	8000900 <Error_Handler>
 80011ca:	e7ed      	b.n	80011a8 <HAL_SPI_MspInit+0xf4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80011cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011d0:	2300      	movs	r3, #0
 80011d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d6:	a808      	add	r0, sp, #32
 80011d8:	f003 fd56 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 80011dc:	2800      	cmp	r0, #0
 80011de:	d14c      	bne.n	800127a <HAL_SPI_MspInit+0x1c6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011e0:	4b52      	ldr	r3, [pc, #328]	; (800132c <HAL_SPI_MspInit+0x278>)
 80011e2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80011e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011ea:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80011ee:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80011f2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80011f6:	9203      	str	r2, [sp, #12]
 80011f8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011fe:	f042 0202 	orr.w	r2, r2, #2
 8001202:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	9304      	str	r3, [sp, #16]
 8001210:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001212:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001216:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	9338      	str	r3, [sp, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2500      	movs	r5, #0
 800121e:	9539      	str	r5, [sp, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001220:	933a      	str	r3, [sp, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001222:	2305      	movs	r3, #5
 8001224:	933b      	str	r3, [sp, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001226:	a937      	add	r1, sp, #220	; 0xdc
 8001228:	4845      	ldr	r0, [pc, #276]	; (8001340 <HAL_SPI_MspInit+0x28c>)
 800122a:	f002 fd79 	bl	8003d20 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 800122e:	4845      	ldr	r0, [pc, #276]	; (8001344 <HAL_SPI_MspInit+0x290>)
 8001230:	4b45      	ldr	r3, [pc, #276]	; (8001348 <HAL_SPI_MspInit+0x294>)
 8001232:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001234:	2327      	movs	r3, #39	; 0x27
 8001236:	6043      	str	r3, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001238:	6085      	str	r5, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800123a:	60c5      	str	r5, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800123c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001240:	6103      	str	r3, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001242:	6145      	str	r5, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001244:	6185      	str	r5, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800124a:	61c3      	str	r3, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800124c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001250:	6203      	str	r3, [r0, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001252:	2304      	movs	r3, #4
 8001254:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001256:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001258:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800125a:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800125c:	f001 fd74 	bl	8002d48 <HAL_DMA_Init>
 8001260:	b970      	cbnz	r0, 8001280 <HAL_SPI_MspInit+0x1cc>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001262:	4b38      	ldr	r3, [pc, #224]	; (8001344 <HAL_SPI_MspInit+0x290>)
 8001264:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001266:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2102      	movs	r1, #2
 800126c:	2024      	movs	r0, #36	; 0x24
 800126e:	f001 fab1 	bl	80027d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001272:	2024      	movs	r0, #36	; 0x24
 8001274:	f001 fae4 	bl	8002840 <HAL_NVIC_EnableIRQ>
 8001278:	e734      	b.n	80010e4 <HAL_SPI_MspInit+0x30>
      Error_Handler();
 800127a:	f7ff fb41 	bl	8000900 <Error_Handler>
 800127e:	e7af      	b.n	80011e0 <HAL_SPI_MspInit+0x12c>
      Error_Handler();
 8001280:	f7ff fb3e 	bl	8000900 <Error_Handler>
 8001284:	e7ed      	b.n	8001262 <HAL_SPI_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001286:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800128a:	2300      	movs	r3, #0
 800128c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001290:	a808      	add	r0, sp, #32
 8001292:	f003 fcf9 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 8001296:	2800      	cmp	r0, #0
 8001298:	d13e      	bne.n	8001318 <HAL_SPI_MspInit+0x264>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800129a:	4b24      	ldr	r3, [pc, #144]	; (800132c <HAL_SPI_MspInit+0x278>)
 800129c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80012a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012a4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80012a8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80012ac:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80012b0:	9205      	str	r2, [sp, #20]
 80012b2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012b8:	f042 0201 	orr.w	r2, r2, #1
 80012bc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80012c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012c4:	f002 0201 	and.w	r2, r2, #1
 80012c8:	9206      	str	r2, [sp, #24]
 80012ca:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012d0:	f042 0204 	orr.w	r2, r2, #4
 80012d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	9307      	str	r3, [sp, #28]
 80012e2:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012e8:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2402      	movs	r4, #2
 80012ec:	9438      	str	r4, [sp, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2600      	movs	r6, #0
 80012f0:	9639      	str	r6, [sp, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f2:	943a      	str	r4, [sp, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012f4:	2506      	movs	r5, #6
 80012f6:	953b      	str	r5, [sp, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	a937      	add	r1, sp, #220	; 0xdc
 80012fa:	4814      	ldr	r0, [pc, #80]	; (800134c <HAL_SPI_MspInit+0x298>)
 80012fc:	f002 fd10 	bl	8003d20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001300:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001304:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	9438      	str	r4, [sp, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	9639      	str	r6, [sp, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800130a:	943a      	str	r4, [sp, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800130c:	953b      	str	r5, [sp, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130e:	a937      	add	r1, sp, #220	; 0xdc
 8001310:	480f      	ldr	r0, [pc, #60]	; (8001350 <HAL_SPI_MspInit+0x29c>)
 8001312:	f002 fd05 	bl	8003d20 <HAL_GPIO_Init>
}
 8001316:	e6e5      	b.n	80010e4 <HAL_SPI_MspInit+0x30>
      Error_Handler();
 8001318:	f7ff faf2 	bl	8000900 <Error_Handler>
 800131c:	e7bd      	b.n	800129a <HAL_SPI_MspInit+0x1e6>
 800131e:	bf00      	nop
 8001320:	40013000 	.word	0x40013000
 8001324:	40003800 	.word	0x40003800
 8001328:	40003c00 	.word	0x40003c00
 800132c:	58024400 	.word	0x58024400
 8001330:	58020c00 	.word	0x58020c00
 8001334:	58021800 	.word	0x58021800
 8001338:	24000288 	.word	0x24000288
 800133c:	40020010 	.word	0x40020010
 8001340:	58020400 	.word	0x58020400
 8001344:	24000300 	.word	0x24000300
 8001348:	40020028 	.word	0x40020028
 800134c:	58020000 	.word	0x58020000
 8001350:	58020800 	.word	0x58020800

08001354 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <NMI_Handler>

08001356 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <HardFault_Handler>

08001358 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler>

0800135a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <BusFault_Handler>

0800135c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler>

0800135e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135e:	4770      	bx	lr

08001360 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001360:	4770      	bx	lr

08001362 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001362:	4770      	bx	lr

08001364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001364:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001366:	f000 f907 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136a:	bd08      	pop	{r3, pc}

0800136c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800136c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800136e:	4802      	ldr	r0, [pc, #8]	; (8001378 <DMA1_Stream0_IRQHandler+0xc>)
 8001370:	f002 f938 	bl	80035e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001374:	bd08      	pop	{r3, pc}
 8001376:	bf00      	nop
 8001378:	24000288 	.word	0x24000288

0800137c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800137c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800137e:	4802      	ldr	r0, [pc, #8]	; (8001388 <DMA1_Stream1_IRQHandler+0xc>)
 8001380:	f002 f930 	bl	80035e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001384:	bd08      	pop	{r3, pc}
 8001386:	bf00      	nop
 8001388:	24000300 	.word	0x24000300

0800138c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800138c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800138e:	4802      	ldr	r0, [pc, #8]	; (8001398 <DMA1_Stream2_IRQHandler+0xc>)
 8001390:	f002 f928 	bl	80035e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001394:	bd08      	pop	{r3, pc}
 8001396:	bf00      	nop
 8001398:	24000210 	.word	0x24000210

0800139c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800139c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800139e:	4802      	ldr	r0, [pc, #8]	; (80013a8 <ADC_IRQHandler+0xc>)
 80013a0:	f000 f918 	bl	80015d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80013a4:	bd08      	pop	{r3, pc}
 80013a6:	bf00      	nop
 80013a8:	240001a0 	.word	0x240001a0

080013ac <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80013ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80013ae:	4802      	ldr	r0, [pc, #8]	; (80013b8 <SPI1_IRQHandler+0xc>)
 80013b0:	f005 fbee 	bl	8006b90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80013b4:	bd08      	pop	{r3, pc}
 80013b6:	bf00      	nop
 80013b8:	2400038c 	.word	0x2400038c

080013bc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80013bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80013be:	4802      	ldr	r0, [pc, #8]	; (80013c8 <SPI2_IRQHandler+0xc>)
 80013c0:	f005 fbe6 	bl	8006b90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80013c4:	bd08      	pop	{r3, pc}
 80013c6:	bf00      	nop
 80013c8:	24000414 	.word	0x24000414

080013cc <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013cc:	4a22      	ldr	r2, [pc, #136]	; (8001458 <SystemInit+0x8c>)
 80013ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80013d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <SystemInit+0x90>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d806      	bhi.n	80013f4 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013e6:	4a1d      	ldr	r2, [pc, #116]	; (800145c <SystemInit+0x90>)
 80013e8:	6813      	ldr	r3, [r2, #0]
 80013ea:	f023 030f 	bic.w	r3, r3, #15
 80013ee:	f043 0307 	orr.w	r3, r3, #7
 80013f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013f4:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <SystemInit+0x94>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	f042 0201 	orr.w	r2, r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001402:	6819      	ldr	r1, [r3, #0]
 8001404:	4a17      	ldr	r2, [pc, #92]	; (8001464 <SystemInit+0x98>)
 8001406:	400a      	ands	r2, r1
 8001408:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <SystemInit+0x90>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f013 0f08 	tst.w	r3, #8
 8001412:	d006      	beq.n	8001422 <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001414:	4a11      	ldr	r2, [pc, #68]	; (800145c <SystemInit+0x90>)
 8001416:	6813      	ldr	r3, [r2, #0]
 8001418:	f023 030f 	bic.w	r3, r3, #15
 800141c:	f043 0307 	orr.w	r3, r3, #7
 8001420:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <SystemInit+0x94>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001428:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800142a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800142c:	490e      	ldr	r1, [pc, #56]	; (8001468 <SystemInit+0x9c>)
 800142e:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001430:	490e      	ldr	r1, [pc, #56]	; (800146c <SystemInit+0xa0>)
 8001432:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001434:	490e      	ldr	r1, [pc, #56]	; (8001470 <SystemInit+0xa4>)
 8001436:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001438:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800143a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800143c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800143e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001440:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001442:	6819      	ldr	r1, [r3, #0]
 8001444:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001448:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800144a:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <SystemInit+0xa8>)
 800144e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001452:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00
 800145c:	52002000 	.word	0x52002000
 8001460:	58024400 	.word	0x58024400
 8001464:	eaf6ed7f 	.word	0xeaf6ed7f
 8001468:	02020200 	.word	0x02020200
 800146c:	01ff0000 	.word	0x01ff0000
 8001470:	01010280 	.word	0x01010280
 8001474:	52004000 	.word	0x52004000

08001478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800147c:	f7ff ffa6 	bl	80013cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001480:	480c      	ldr	r0, [pc, #48]	; (80014b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001482:	490d      	ldr	r1, [pc, #52]	; (80014b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001484:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001498:	4c0a      	ldr	r4, [pc, #40]	; (80014c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a6:	f006 f96d 	bl	8007784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014aa:	f7ff fc11 	bl	8000cd0 <main>
  bx  lr
 80014ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014b0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80014b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014b8:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80014bc:	080092ec 	.word	0x080092ec
  ldr r2, =_sbss
 80014c0:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80014c4:	24000804 	.word	0x24000804

080014c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC3_IRQHandler>
	...

080014cc <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_InitTick+0x44>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b90b      	cbnz	r3, 80014d6 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80014d2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014d4:	4770      	bx	lr
{
 80014d6:	b510      	push	{r4, lr}
 80014d8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014de:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e2:	4a0c      	ldr	r2, [pc, #48]	; (8001514 <HAL_InitTick+0x48>)
 80014e4:	6810      	ldr	r0, [r2, #0]
 80014e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80014ea:	f001 f9b7 	bl	800285c <HAL_SYSTICK_Config>
 80014ee:	b968      	cbnz	r0, 800150c <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f0:	2c0f      	cmp	r4, #15
 80014f2:	d901      	bls.n	80014f8 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80014f4:	2001      	movs	r0, #1
 80014f6:	e00a      	b.n	800150e <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f8:	2200      	movs	r2, #0
 80014fa:	4621      	mov	r1, r4
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001500:	f001 f968 	bl	80027d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <HAL_InitTick+0x4c>)
 8001506:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8001508:	2000      	movs	r0, #0
 800150a:	e000      	b.n	800150e <HAL_InitTick+0x42>
      return HAL_ERROR;
 800150c:	2001      	movs	r0, #1
}
 800150e:	bd10      	pop	{r4, pc}
 8001510:	2400000c 	.word	0x2400000c
 8001514:	24000004 	.word	0x24000004
 8001518:	24000010 	.word	0x24000010

0800151c <HAL_Init>:
{
 800151c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151e:	2003      	movs	r0, #3
 8001520:	f001 f946 	bl	80027b0 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001524:	f003 f82c 	bl	8004580 <HAL_RCC_GetSysClockFreq>
 8001528:	490f      	ldr	r1, [pc, #60]	; (8001568 <HAL_Init+0x4c>)
 800152a:	698b      	ldr	r3, [r1, #24]
 800152c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001530:	4a0e      	ldr	r2, [pc, #56]	; (800156c <HAL_Init+0x50>)
 8001532:	5cd3      	ldrb	r3, [r2, r3]
 8001534:	f003 031f 	and.w	r3, r3, #31
 8001538:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800153a:	698b      	ldr	r3, [r1, #24]
 800153c:	f003 030f 	and.w	r3, r3, #15
 8001540:	5cd3      	ldrb	r3, [r2, r3]
 8001542:	f003 031f 	and.w	r3, r3, #31
 8001546:	fa20 f303 	lsr.w	r3, r0, r3
 800154a:	4a09      	ldr	r2, [pc, #36]	; (8001570 <HAL_Init+0x54>)
 800154c:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <HAL_Init+0x58>)
 8001550:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001552:	200f      	movs	r0, #15
 8001554:	f7ff ffba 	bl	80014cc <HAL_InitTick>
 8001558:	b110      	cbz	r0, 8001560 <HAL_Init+0x44>
    return HAL_ERROR;
 800155a:	2401      	movs	r4, #1
}
 800155c:	4620      	mov	r0, r4
 800155e:	bd10      	pop	{r4, pc}
 8001560:	4604      	mov	r4, r0
  HAL_MspInit();
 8001562:	f7ff fcb3 	bl	8000ecc <HAL_MspInit>
  return HAL_OK;
 8001566:	e7f9      	b.n	800155c <HAL_Init+0x40>
 8001568:	58024400 	.word	0x58024400
 800156c:	08008b68 	.word	0x08008b68
 8001570:	24000008 	.word	0x24000008
 8001574:	24000004 	.word	0x24000004

08001578 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <HAL_IncTick+0x10>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4a03      	ldr	r2, [pc, #12]	; (800158c <HAL_IncTick+0x14>)
 800157e:	6811      	ldr	r1, [r2, #0]
 8001580:	440b      	add	r3, r1
 8001582:	6013      	str	r3, [r2, #0]
}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	2400000c 	.word	0x2400000c
 800158c:	24000800 	.word	0x24000800

08001590 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001590:	4b01      	ldr	r3, [pc, #4]	; (8001598 <HAL_GetTick+0x8>)
 8001592:	6818      	ldr	r0, [r3, #0]
}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	24000800 	.word	0x24000800

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b538      	push	{r3, r4, r5, lr}
 800159e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff fff6 	bl	8001590 <HAL_GetTick>
 80015a4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80015aa:	d002      	beq.n	80015b2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <HAL_Delay+0x24>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015b2:	f7ff ffed 	bl	8001590 <HAL_GetTick>
 80015b6:	1b40      	subs	r0, r0, r5
 80015b8:	42a0      	cmp	r0, r4
 80015ba:	d3fa      	bcc.n	80015b2 <HAL_Delay+0x16>
  {
  }
}
 80015bc:	bd38      	pop	{r3, r4, r5, pc}
 80015be:	bf00      	nop
 80015c0:	2400000c 	.word	0x2400000c

080015c4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80015c4:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015c6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80015c8:	f7ff f94b 	bl	8000862 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015cc:	bd08      	pop	{r3, pc}

080015ce <HAL_ADC_LevelOutOfWindowCallback>:
}
 80015ce:	4770      	bx	lr

080015d0 <HAL_ADC_ErrorCallback>:
}
 80015d0:	4770      	bx	lr
	...

080015d4 <HAL_ADC_IRQHandler>:
{
 80015d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015d6:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80015d8:	6803      	ldr	r3, [r0, #0]
 80015da:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80015dc:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015de:	4996      	ldr	r1, [pc, #600]	; (8001838 <HAL_ADC_IRQHandler+0x264>)
 80015e0:	4a96      	ldr	r2, [pc, #600]	; (800183c <HAL_ADC_IRQHandler+0x268>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	bf18      	it	ne
 80015e6:	428b      	cmpne	r3, r1
 80015e8:	d140      	bne.n	800166c <HAL_ADC_IRQHandler+0x98>
 80015ea:	4b95      	ldr	r3, [pc, #596]	; (8001840 <HAL_ADC_IRQHandler+0x26c>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015ec:	689f      	ldr	r7, [r3, #8]
 80015ee:	f007 071f 	and.w	r7, r7, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80015f2:	f015 0f02 	tst.w	r5, #2
 80015f6:	d010      	beq.n	800161a <HAL_ADC_IRQHandler+0x46>
 80015f8:	f016 0f02 	tst.w	r6, #2
 80015fc:	d00d      	beq.n	800161a <HAL_ADC_IRQHandler+0x46>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015fe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001600:	f013 0f10 	tst.w	r3, #16
 8001604:	d103      	bne.n	800160e <HAL_ADC_IRQHandler+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001606:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001608:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800160c:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800160e:	4620      	mov	r0, r4
 8001610:	f001 f81a 	bl	8002648 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001614:	6823      	ldr	r3, [r4, #0]
 8001616:	2202      	movs	r2, #2
 8001618:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800161a:	f015 0f04 	tst.w	r5, #4
 800161e:	d002      	beq.n	8001626 <HAL_ADC_IRQHandler+0x52>
 8001620:	f016 0f04 	tst.w	r6, #4
 8001624:	d105      	bne.n	8001632 <HAL_ADC_IRQHandler+0x5e>
 8001626:	f015 0f08 	tst.w	r5, #8
 800162a:	d04f      	beq.n	80016cc <HAL_ADC_IRQHandler+0xf8>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800162c:	f016 0f08 	tst.w	r6, #8
 8001630:	d04c      	beq.n	80016cc <HAL_ADC_IRQHandler+0xf8>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001632:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001634:	f013 0f10 	tst.w	r3, #16
 8001638:	d103      	bne.n	8001642 <HAL_ADC_IRQHandler+0x6e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800163a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800163c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001640:	6623      	str	r3, [r4, #96]	; 0x60
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001642:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001644:	68da      	ldr	r2, [r3, #12]
 8001646:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800164a:	d139      	bne.n	80016c0 <HAL_ADC_IRQHandler+0xec>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800164c:	4a7b      	ldr	r2, [pc, #492]	; (800183c <HAL_ADC_IRQHandler+0x268>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d00e      	beq.n	8001670 <HAL_ADC_IRQHandler+0x9c>
 8001652:	461a      	mov	r2, r3
 8001654:	4293      	cmp	r3, r2
 8001656:	d00e      	beq.n	8001676 <HAL_ADC_IRQHandler+0xa2>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001658:	2f05      	cmp	r7, #5
 800165a:	bf14      	ite	ne
 800165c:	2100      	movne	r1, #0
 800165e:	2101      	moveq	r1, #1
 8001660:	b14f      	cbz	r7, 8001676 <HAL_ADC_IRQHandler+0xa2>
 8001662:	b941      	cbnz	r1, 8001676 <HAL_ADC_IRQHandler+0xa2>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001664:	2f09      	cmp	r7, #9
 8001666:	d006      	beq.n	8001676 <HAL_ADC_IRQHandler+0xa2>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001668:	68d2      	ldr	r2, [r2, #12]
 800166a:	e005      	b.n	8001678 <HAL_ADC_IRQHandler+0xa4>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800166c:	4b75      	ldr	r3, [pc, #468]	; (8001844 <HAL_ADC_IRQHandler+0x270>)
 800166e:	e7bd      	b.n	80015ec <HAL_ADC_IRQHandler+0x18>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001670:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8001674:	e7ee      	b.n	8001654 <HAL_ADC_IRQHandler+0x80>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001676:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001678:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800167c:	d120      	bne.n	80016c0 <HAL_ADC_IRQHandler+0xec>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	f012 0f08 	tst.w	r2, #8
 8001684:	d01c      	beq.n	80016c0 <HAL_ADC_IRQHandler+0xec>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	f012 0f04 	tst.w	r2, #4
 800168c:	d110      	bne.n	80016b0 <HAL_ADC_IRQHandler+0xdc>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	f022 020c 	bic.w	r2, r2, #12
 8001694:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001696:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800169c:	6623      	str	r3, [r4, #96]	; 0x60
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800169e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016a0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80016a4:	d10c      	bne.n	80016c0 <HAL_ADC_IRQHandler+0xec>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6623      	str	r3, [r4, #96]	; 0x60
 80016ae:	e007      	b.n	80016c0 <HAL_ADC_IRQHandler+0xec>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016b0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016b2:	f043 0310 	orr.w	r3, r3, #16
 80016b6:	6623      	str	r3, [r4, #96]	; 0x60
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6663      	str	r3, [r4, #100]	; 0x64
    HAL_ADC_ConvCpltCallback(hadc);
 80016c0:	4620      	mov	r0, r4
 80016c2:	f7ff f8c9 	bl	8000858 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80016c6:	6823      	ldr	r3, [r4, #0]
 80016c8:	220c      	movs	r2, #12
 80016ca:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80016cc:	f015 0f20 	tst.w	r5, #32
 80016d0:	d002      	beq.n	80016d8 <HAL_ADC_IRQHandler+0x104>
 80016d2:	f016 0f20 	tst.w	r6, #32
 80016d6:	d105      	bne.n	80016e4 <HAL_ADC_IRQHandler+0x110>
 80016d8:	f015 0f40 	tst.w	r5, #64	; 0x40
 80016dc:	d063      	beq.n	80017a6 <HAL_ADC_IRQHandler+0x1d2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80016de:	f016 0f40 	tst.w	r6, #64	; 0x40
 80016e2:	d060      	beq.n	80017a6 <HAL_ADC_IRQHandler+0x1d2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016e6:	f013 0f10 	tst.w	r3, #16
 80016ea:	d103      	bne.n	80016f4 <HAL_ADC_IRQHandler+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80016ec:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016f2:	6623      	str	r3, [r4, #96]	; 0x60
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80016f4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80016f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016f8:	f412 7fc0 	tst.w	r2, #384	; 0x180
 80016fc:	d119      	bne.n	8001732 <HAL_ADC_IRQHandler+0x15e>
 80016fe:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001706:	d116      	bne.n	8001736 <HAL_ADC_IRQHandler+0x162>
 8001708:	2001      	movs	r0, #1
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800170a:	4a4c      	ldr	r2, [pc, #304]	; (800183c <HAL_ADC_IRQHandler+0x268>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d014      	beq.n	800173a <HAL_ADC_IRQHandler+0x166>
 8001710:	461a      	mov	r2, r3
 8001712:	4293      	cmp	r3, r2
 8001714:	d014      	beq.n	8001740 <HAL_ADC_IRQHandler+0x16c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001716:	2f06      	cmp	r7, #6
 8001718:	bf14      	ite	ne
 800171a:	f04f 0c00 	movne.w	ip, #0
 800171e:	f04f 0c01 	moveq.w	ip, #1
 8001722:	b16f      	cbz	r7, 8001740 <HAL_ADC_IRQHandler+0x16c>
 8001724:	f1bc 0f00 	cmp.w	ip, #0
 8001728:	d10a      	bne.n	8001740 <HAL_ADC_IRQHandler+0x16c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800172a:	2f07      	cmp	r7, #7
 800172c:	d008      	beq.n	8001740 <HAL_ADC_IRQHandler+0x16c>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800172e:	68d2      	ldr	r2, [r2, #12]
 8001730:	e007      	b.n	8001742 <HAL_ADC_IRQHandler+0x16e>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001732:	2100      	movs	r1, #0
 8001734:	e7e4      	b.n	8001700 <HAL_ADC_IRQHandler+0x12c>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001736:	2000      	movs	r0, #0
 8001738:	e7e7      	b.n	800170a <HAL_ADC_IRQHandler+0x136>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800173a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800173e:	e7e8      	b.n	8001712 <HAL_ADC_IRQHandler+0x13e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001740:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001742:	b351      	cbz	r1, 800179a <HAL_ADC_IRQHandler+0x1c6>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001744:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001748:	d003      	beq.n	8001752 <HAL_ADC_IRQHandler+0x17e>
 800174a:	b330      	cbz	r0, 800179a <HAL_ADC_IRQHandler+0x1c6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800174c:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001750:	d123      	bne.n	800179a <HAL_ADC_IRQHandler+0x1c6>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001752:	6819      	ldr	r1, [r3, #0]
 8001754:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001758:	d01f      	beq.n	800179a <HAL_ADC_IRQHandler+0x1c6>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800175a:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 800175e:	d11c      	bne.n	800179a <HAL_ADC_IRQHandler+0x1c6>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	f012 0f08 	tst.w	r2, #8
 8001766:	d110      	bne.n	800178a <HAL_ADC_IRQHandler+0x1b6>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800176e:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001770:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001772:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001776:	6623      	str	r3, [r4, #96]	; 0x60
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001778:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800177a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800177e:	d10c      	bne.n	800179a <HAL_ADC_IRQHandler+0x1c6>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001780:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6623      	str	r3, [r4, #96]	; 0x60
 8001788:	e007      	b.n	800179a <HAL_ADC_IRQHandler+0x1c6>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800178a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800178c:	f043 0310 	orr.w	r3, r3, #16
 8001790:	6623      	str	r3, [r4, #96]	; 0x60
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001792:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6663      	str	r3, [r4, #100]	; 0x64
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800179a:	4620      	mov	r0, r4
 800179c:	f000 ff50 	bl	8002640 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	2260      	movs	r2, #96	; 0x60
 80017a4:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80017a6:	f015 0f80 	tst.w	r5, #128	; 0x80
 80017aa:	d002      	beq.n	80017b2 <HAL_ADC_IRQHandler+0x1de>
 80017ac:	f016 0f80 	tst.w	r6, #128	; 0x80
 80017b0:	d136      	bne.n	8001820 <HAL_ADC_IRQHandler+0x24c>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80017b2:	f415 7f80 	tst.w	r5, #256	; 0x100
 80017b6:	d002      	beq.n	80017be <HAL_ADC_IRQHandler+0x1ea>
 80017b8:	f416 7f80 	tst.w	r6, #256	; 0x100
 80017bc:	d144      	bne.n	8001848 <HAL_ADC_IRQHandler+0x274>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80017be:	f415 7f00 	tst.w	r5, #512	; 0x200
 80017c2:	d002      	beq.n	80017ca <HAL_ADC_IRQHandler+0x1f6>
 80017c4:	f416 7f00 	tst.w	r6, #512	; 0x200
 80017c8:	d14a      	bne.n	8001860 <HAL_ADC_IRQHandler+0x28c>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80017ca:	f015 0f10 	tst.w	r5, #16
 80017ce:	d020      	beq.n	8001812 <HAL_ADC_IRQHandler+0x23e>
 80017d0:	f016 0f10 	tst.w	r6, #16
 80017d4:	d01d      	beq.n	8001812 <HAL_ADC_IRQHandler+0x23e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80017d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017d8:	b16b      	cbz	r3, 80017f6 <HAL_ADC_IRQHandler+0x222>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80017da:	2f00      	cmp	r7, #0
 80017dc:	d04e      	beq.n	800187c <HAL_ADC_IRQHandler+0x2a8>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80017de:	6823      	ldr	r3, [r4, #0]
 80017e0:	4915      	ldr	r1, [pc, #84]	; (8001838 <HAL_ADC_IRQHandler+0x264>)
 80017e2:	4a16      	ldr	r2, [pc, #88]	; (800183c <HAL_ADC_IRQHandler+0x268>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	bf18      	it	ne
 80017e8:	428b      	cmpne	r3, r1
 80017ea:	d145      	bne.n	8001878 <HAL_ADC_IRQHandler+0x2a4>
 80017ec:	4b14      	ldr	r3, [pc, #80]	; (8001840 <HAL_ADC_IRQHandler+0x26c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 80017f4:	d00a      	beq.n	800180c <HAL_ADC_IRQHandler+0x238>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80017f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80017f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017fc:	6623      	str	r3, [r4, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80017fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6663      	str	r3, [r4, #100]	; 0x64
      HAL_ADC_ErrorCallback(hadc);
 8001806:	4620      	mov	r0, r4
 8001808:	f7ff fee2 	bl	80015d0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	2210      	movs	r2, #16
 8001810:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001812:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8001816:	d002      	beq.n	800181e <HAL_ADC_IRQHandler+0x24a>
 8001818:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800181c:	d134      	bne.n	8001888 <HAL_ADC_IRQHandler+0x2b4>
}
 800181e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001820:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001826:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001828:	4620      	mov	r0, r4
 800182a:	f7ff fed0 	bl	80015ce <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	2280      	movs	r2, #128	; 0x80
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	e7bd      	b.n	80017b2 <HAL_ADC_IRQHandler+0x1de>
 8001836:	bf00      	nop
 8001838:	40022000 	.word	0x40022000
 800183c:	40022100 	.word	0x40022100
 8001840:	40022300 	.word	0x40022300
 8001844:	58026300 	.word	0x58026300
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001848:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800184a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184e:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001850:	4620      	mov	r0, r4
 8001852:	f000 fef7 	bl	8002644 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001856:	6823      	ldr	r3, [r4, #0]
 8001858:	f44f 7280 	mov.w	r2, #256	; 0x100
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e7ae      	b.n	80017be <HAL_ADC_IRQHandler+0x1ea>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001860:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001862:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001866:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001868:	4620      	mov	r0, r4
 800186a:	f000 feec 	bl	8002646 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800186e:	6823      	ldr	r3, [r4, #0]
 8001870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	e7a8      	b.n	80017ca <HAL_ADC_IRQHandler+0x1f6>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_ADC_IRQHandler+0x2d4>)
 800187a:	e7b8      	b.n	80017ee <HAL_ADC_IRQHandler+0x21a>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800187c:	6823      	ldr	r3, [r4, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f013 0f03 	tst.w	r3, #3
 8001884:	d0c2      	beq.n	800180c <HAL_ADC_IRQHandler+0x238>
 8001886:	e7b6      	b.n	80017f6 <HAL_ADC_IRQHandler+0x222>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001888:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800188a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800188e:	6623      	str	r3, [r4, #96]	; 0x60
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001890:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001892:	f043 0308 	orr.w	r3, r3, #8
 8001896:	6663      	str	r3, [r4, #100]	; 0x64
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001898:	6823      	ldr	r3, [r4, #0]
 800189a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800189e:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80018a0:	4620      	mov	r0, r4
 80018a2:	f000 fece 	bl	8002642 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 80018a6:	e7ba      	b.n	800181e <HAL_ADC_IRQHandler+0x24a>
 80018a8:	58026300 	.word	0x58026300

080018ac <ADC_DMAConvCplt>:
{
 80018ac:	b508      	push	{r3, lr}
 80018ae:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018b0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80018b2:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80018b4:	f012 0f50 	tst.w	r2, #80	; 0x50
 80018b8:	d130      	bne.n	800191c <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018ba:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80018bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018c0:	6603      	str	r3, [r0, #96]	; 0x60
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80018c2:	6803      	ldr	r3, [r0, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	f012 0f08 	tst.w	r2, #8
 80018ca:	d014      	beq.n	80018f6 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80018d2:	d120      	bne.n	8001916 <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80018da:	d11c      	bne.n	8001916 <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018dc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80018de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018e2:	6603      	str	r3, [r0, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80018e4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80018e6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80018ea:	d114      	bne.n	8001916 <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018ec:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6603      	str	r3, [r0, #96]	; 0x60
 80018f4:	e00f      	b.n	8001916 <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f013 0f03 	tst.w	r3, #3
 80018fc:	d10b      	bne.n	8001916 <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018fe:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001904:	6603      	str	r3, [r0, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001906:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001908:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800190c:	d103      	bne.n	8001916 <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800190e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6603      	str	r3, [r0, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 8001916:	f7fe ff9f 	bl	8000858 <HAL_ADC_ConvCpltCallback>
}
 800191a:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800191c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800191e:	f012 0f10 	tst.w	r2, #16
 8001922:	d104      	bne.n	800192e <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001924:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001926:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001928:	4618      	mov	r0, r3
 800192a:	4790      	blx	r2
}
 800192c:	e7f5      	b.n	800191a <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 800192e:	f7ff fe4f 	bl	80015d0 <HAL_ADC_ErrorCallback>
 8001932:	e7f2      	b.n	800191a <ADC_DMAConvCplt+0x6e>

08001934 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001934:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001936:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001938:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800193a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800193e:	6603      	str	r3, [r0, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001940:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001942:	f043 0304 	orr.w	r3, r3, #4
 8001946:	6643      	str	r3, [r0, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001948:	f7ff fe42 	bl	80015d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800194c:	bd08      	pop	{r3, pc}
	...

08001950 <HAL_ADC_ConfigChannel>:
{
 8001950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001952:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8001954:	2200      	movs	r2, #0
 8001956:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001958:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 800195c:	2a01      	cmp	r2, #1
 800195e:	f000 8342 	beq.w	8001fe6 <HAL_ADC_ConfigChannel+0x696>
 8001962:	4603      	mov	r3, r0
 8001964:	2201      	movs	r2, #1
 8001966:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800196a:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800196c:	6890      	ldr	r0, [r2, #8]
 800196e:	f010 0f04 	tst.w	r0, #4
 8001972:	d009      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001974:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001976:	f042 0220 	orr.w	r2, r2, #32
 800197a:	661a      	str	r2, [r3, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 800197c:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800197e:	2200      	movs	r2, #0
 8001980:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 8001984:	b003      	add	sp, #12
 8001986:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (hadc->Instance != ADC3)
 8001988:	489b      	ldr	r0, [pc, #620]	; (8001bf8 <HAL_ADC_ConfigChannel+0x2a8>)
 800198a:	4282      	cmp	r2, r0
 800198c:	d00b      	beq.n	80019a6 <HAL_ADC_ConfigChannel+0x56>
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800198e:	6808      	ldr	r0, [r1, #0]
 8001990:	f3c0 0413 	ubfx	r4, r0, #0, #20
 8001994:	2c00      	cmp	r4, #0
 8001996:	d152      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0xee>
 8001998:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800199c:	2401      	movs	r4, #1
 800199e:	4084      	lsls	r4, r0
 80019a0:	69d0      	ldr	r0, [r2, #28]
 80019a2:	4320      	orrs	r0, r4
 80019a4:	61d0      	str	r0, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80019a6:	681d      	ldr	r5, [r3, #0]
 80019a8:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019aa:	3530      	adds	r5, #48	; 0x30
 80019ac:	0a22      	lsrs	r2, r4, #8
 80019ae:	0092      	lsls	r2, r2, #2
 80019b0:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 80019b4:	58a8      	ldr	r0, [r5, r2]
 80019b6:	f004 0e1f 	and.w	lr, r4, #31
 80019ba:	241f      	movs	r4, #31
 80019bc:	fa04 f40e 	lsl.w	r4, r4, lr
 80019c0:	ea20 0004 	bic.w	r0, r0, r4
 80019c4:	680c      	ldr	r4, [r1, #0]
 80019c6:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 80019ca:	fa0c fc0e 	lsl.w	ip, ip, lr
 80019ce:	ea40 000c 	orr.w	r0, r0, ip
 80019d2:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019d4:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019d6:	68a2      	ldr	r2, [r4, #8]
 80019d8:	f012 0204 	ands.w	r2, r2, #4
 80019dc:	d000      	beq.n	80019e0 <HAL_ADC_ConfigChannel+0x90>
 80019de:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019e0:	68a0      	ldr	r0, [r4, #8]
 80019e2:	f010 0008 	ands.w	r0, r0, #8
 80019e6:	d000      	beq.n	80019ea <HAL_ADC_ConfigChannel+0x9a>
 80019e8:	2001      	movs	r0, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019ea:	4302      	orrs	r2, r0
 80019ec:	d033      	beq.n	8001a56 <HAL_ADC_ConfigChannel+0x106>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019ee:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019f0:	6890      	ldr	r0, [r2, #8]
 80019f2:	f010 0f01 	tst.w	r0, #1
 80019f6:	f040 82f2 	bne.w	8001fde <HAL_ADC_ConfigChannel+0x68e>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80019fa:	6808      	ldr	r0, [r1, #0]
 80019fc:	68cd      	ldr	r5, [r1, #12]
  if (ADCx == ADC3)
 80019fe:	4c7e      	ldr	r4, [pc, #504]	; (8001bf8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a00:	42a2      	cmp	r2, r4
 8001a02:	f000 819c 	beq.w	8001d3e <HAL_ADC_ConfigChannel+0x3ee>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001a06:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
 8001a0a:	f3c0 0613 	ubfx	r6, r0, #0, #20
 8001a0e:	ea24 0406 	bic.w	r4, r4, r6
 8001a12:	f005 0518 	and.w	r5, r5, #24
 8001a16:	4e79      	ldr	r6, [pc, #484]	; (8001bfc <HAL_ADC_ConfigChannel+0x2ac>)
 8001a18:	fa26 f505 	lsr.w	r5, r6, r5
 8001a1c:	4028      	ands	r0, r5
 8001a1e:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8001a22:	4320      	orrs	r0, r4
 8001a24:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a28:	68c8      	ldr	r0, [r1, #12]
 8001a2a:	4a75      	ldr	r2, [pc, #468]	; (8001c00 <HAL_ADC_ConfigChannel+0x2b0>)
 8001a2c:	4290      	cmp	r0, r2
 8001a2e:	f000 8198 	beq.w	8001d62 <HAL_ADC_ConfigChannel+0x412>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a32:	680a      	ldr	r2, [r1, #0]
 8001a34:	2a00      	cmp	r2, #0
 8001a36:	f2c0 8251 	blt.w	8001edc <HAL_ADC_ConfigChannel+0x58c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	e79f      	b.n	800197e <HAL_ADC_ConfigChannel+0x2e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	fa90 f0a0 	rbit	r0, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a42:	b130      	cbz	r0, 8001a52 <HAL_ADC_ConfigChannel+0x102>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001a44:	fab0 f080 	clz	r0, r0
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001a48:	f000 001f 	and.w	r0, r0, #31
 8001a4c:	2401      	movs	r4, #1
 8001a4e:	4084      	lsls	r4, r0
 8001a50:	e7a6      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x50>
    return 32U;
 8001a52:	2020      	movs	r0, #32
 8001a54:	e7f8      	b.n	8001a48 <HAL_ADC_ConfigChannel+0xf8>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a56:	680f      	ldr	r7, [r1, #0]
 8001a58:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a5a:	3414      	adds	r4, #20
 8001a5c:	0e78      	lsrs	r0, r7, #25
 8001a5e:	0080      	lsls	r0, r0, #2
 8001a60:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8001a64:	5826      	ldr	r6, [r4, r0]
 8001a66:	f3c7 5e04 	ubfx	lr, r7, #20, #5
 8001a6a:	f04f 0c07 	mov.w	ip, #7
 8001a6e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001a72:	ea26 0c0c 	bic.w	ip, r6, ip
 8001a76:	fa05 f50e 	lsl.w	r5, r5, lr
 8001a7a:	ea4c 0505 	orr.w	r5, ip, r5
 8001a7e:	5025      	str	r5, [r4, r0]
      if (hadc->Instance == ADC3)
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	4c5d      	ldr	r4, [pc, #372]	; (8001bf8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a84:	42a0      	cmp	r0, r4
 8001a86:	d011      	beq.n	8001aac <HAL_ADC_ConfigChannel+0x15c>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a88:	4c5e      	ldr	r4, [pc, #376]	; (8001c04 <HAL_ADC_ConfigChannel+0x2b4>)
 8001a8a:	6824      	ldr	r4, [r4, #0]
 8001a8c:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
 8001a90:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 8001a94:	d03f      	beq.n	8001b16 <HAL_ADC_ConfigChannel+0x1c6>
 8001a96:	68c4      	ldr	r4, [r0, #12]
 8001a98:	f014 0f10 	tst.w	r4, #16
 8001a9c:	d142      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x1d4>
 8001a9e:	694c      	ldr	r4, [r1, #20]
 8001aa0:	68c5      	ldr	r5, [r0, #12]
 8001aa2:	f3c5 0582 	ubfx	r5, r5, #2, #3
 8001aa6:	006d      	lsls	r5, r5, #1
 8001aa8:	40ac      	lsls	r4, r5
 8001aaa:	e005      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x168>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001aac:	694c      	ldr	r4, [r1, #20]
 8001aae:	68c5      	ldr	r5, [r0, #12]
 8001ab0:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 8001ab4:	006d      	lsls	r5, r5, #1
 8001ab6:	40ac      	lsls	r4, r5
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ab8:	690d      	ldr	r5, [r1, #16]
 8001aba:	2d04      	cmp	r5, #4
 8001abc:	d13a      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x1e4>
        if (hadc->Instance == ADC3)
 8001abe:	4a4e      	ldr	r2, [pc, #312]	; (8001bf8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001ac0:	4290      	cmp	r0, r2
 8001ac2:	f000 80a1 	beq.w	8001c08 <HAL_ADC_ConfigChannel+0x2b8>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ac6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001ac8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001acc:	680c      	ldr	r4, [r1, #0]
 8001ace:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001ad2:	f000 8125 	beq.w	8001d20 <HAL_ADC_ConfigChannel+0x3d0>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001ada:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001ade:	680c      	ldr	r4, [r1, #0]
 8001ae0:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001ae4:	f000 8121 	beq.w	8001d2a <HAL_ADC_ConfigChannel+0x3da>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001aec:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001af0:	680c      	ldr	r4, [r1, #0]
 8001af2:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001af6:	f000 811d 	beq.w	8001d34 <HAL_ADC_ConfigChannel+0x3e4>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001afe:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001b02:	680c      	ldr	r4, [r1, #0]
 8001b04:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001b08:	f47f af71 	bne.w	80019ee <HAL_ADC_ConfigChannel+0x9e>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001b0c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001b0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b12:	66c2      	str	r2, [r0, #108]	; 0x6c
 8001b14:	e76b      	b.n	80019ee <HAL_ADC_ConfigChannel+0x9e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b16:	694c      	ldr	r4, [r1, #20]
 8001b18:	68c5      	ldr	r5, [r0, #12]
 8001b1a:	f3c5 0582 	ubfx	r5, r5, #2, #3
 8001b1e:	006d      	lsls	r5, r5, #1
 8001b20:	40ac      	lsls	r4, r5
 8001b22:	e7c9      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x168>
 8001b24:	694c      	ldr	r4, [r1, #20]
 8001b26:	68c5      	ldr	r5, [r0, #12]
 8001b28:	08ad      	lsrs	r5, r5, #2
 8001b2a:	f005 0504 	and.w	r5, r5, #4
 8001b2e:	006d      	lsls	r5, r5, #1
 8001b30:	40ac      	lsls	r4, r5
 8001b32:	e7c1      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x168>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b34:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b36:	f100 0760 	add.w	r7, r0, #96	; 0x60
  if (ADCx == ADC3)
 8001b3a:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8001bf8 <HAL_ADC_ConfigChannel+0x2a8>
 8001b3e:	4560      	cmp	r0, ip
 8001b40:	d029      	beq.n	8001b96 <HAL_ADC_ConfigChannel+0x246>
    MODIFY_REG(*preg,
 8001b42:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 8001b46:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001b4a:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001b4e:	4334      	orrs	r4, r6
 8001b50:	4304      	orrs	r4, r0
 8001b52:	f847 4025 	str.w	r4, [r7, r5, lsl #2]
        if (hadc->Instance == ADC3)
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	4c27      	ldr	r4, [pc, #156]	; (8001bf8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001b5a:	42a0      	cmp	r0, r4
 8001b5c:	d025      	beq.n	8001baa <HAL_ADC_ConfigChannel+0x25a>
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001b5e:	690e      	ldr	r6, [r1, #16]
 8001b60:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
 8001b64:	2c01      	cmp	r4, #1
 8001b66:	d040      	beq.n	8001bea <HAL_ADC_ConfigChannel+0x29a>
 8001b68:	4615      	mov	r5, r2
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b6a:	3060      	adds	r0, #96	; 0x60
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001b6c:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8001b70:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8001b74:	432c      	orrs	r4, r5
 8001b76:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001b7a:	681d      	ldr	r5, [r3, #0]
 8001b7c:	690c      	ldr	r4, [r1, #16]
 8001b7e:	7e08      	ldrb	r0, [r1, #24]
 8001b80:	2801      	cmp	r0, #1
 8001b82:	d035      	beq.n	8001bf0 <HAL_ADC_ConfigChannel+0x2a0>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001b84:	6928      	ldr	r0, [r5, #16]
 8001b86:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8001b8a:	f004 041f 	and.w	r4, r4, #31
 8001b8e:	40a2      	lsls	r2, r4
 8001b90:	4302      	orrs	r2, r0
 8001b92:	612a      	str	r2, [r5, #16]
}
 8001b94:	e72b      	b.n	80019ee <HAL_ADC_ConfigChannel+0x9e>
    MODIFY_REG(*preg,
 8001b96:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 8001b9a:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001b9e:	4334      	orrs	r4, r6
 8001ba0:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8001ba4:	f847 4025 	str.w	r4, [r7, r5, lsl #2]
 8001ba8:	e7d5      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x206>
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001baa:	690e      	ldr	r6, [r1, #16]
 8001bac:	69cc      	ldr	r4, [r1, #28]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bae:	3060      	adds	r0, #96	; 0x60
    MODIFY_REG(*preg,
 8001bb0:	f850 5026 	ldr.w	r5, [r0, r6, lsl #2]
 8001bb4:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8001bb8:	432c      	orrs	r4, r5
 8001bba:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	690d      	ldr	r5, [r1, #16]
 8001bc2:	f891 4020 	ldrb.w	r4, [r1, #32]
 8001bc6:	2c01      	cmp	r4, #1
 8001bc8:	d00c      	beq.n	8001be4 <HAL_ADC_ConfigChannel+0x294>
  if (ADCx == ADC3)
 8001bca:	4c0b      	ldr	r4, [pc, #44]	; (8001bf8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001bcc:	42a0      	cmp	r0, r4
 8001bce:	f47f af0e 	bne.w	80019ee <HAL_ADC_ConfigChannel+0x9e>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bd2:	3060      	adds	r0, #96	; 0x60
    MODIFY_REG(*preg,
 8001bd4:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 8001bd8:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8001bdc:	4322      	orrs	r2, r4
 8001bde:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
 8001be2:	e704      	b.n	80019ee <HAL_ADC_ConfigChannel+0x9e>
 8001be4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001be8:	e7ef      	b.n	8001bca <HAL_ADC_ConfigChannel+0x27a>
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001bea:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8001bee:	e7bc      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x21a>
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001bf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bf4:	e7c6      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x234>
 8001bf6:	bf00      	nop
 8001bf8:	58026000 	.word	0x58026000
 8001bfc:	000fffff 	.word	0x000fffff
 8001c00:	47ff0000 	.word	0x47ff0000
 8001c04:	5c001000 	.word	0x5c001000
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c08:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001c0a:	6e04      	ldr	r4, [r0, #96]	; 0x60
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c0c:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001c10:	680a      	ldr	r2, [r1, #0]
 8001c12:	f3c2 0513 	ubfx	r5, r2, #0, #20
 8001c16:	2d00      	cmp	r5, #0
 8001c18:	d136      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x338>
 8001c1a:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001c1e:	4294      	cmp	r4, r2
 8001c20:	d03a      	beq.n	8001c98 <HAL_ADC_ConfigChannel+0x348>
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c22:	681c      	ldr	r4, [r3, #0]
 8001c24:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001c26:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001c28:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001c2c:	680a      	ldr	r2, [r1, #0]
 8001c2e:	f3c2 0513 	ubfx	r5, r2, #0, #20
 8001c32:	2d00      	cmp	r5, #0
 8001c34:	d13d      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x362>
 8001c36:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001c3a:	4290      	cmp	r0, r2
 8001c3c:	d041      	beq.n	8001cc2 <HAL_ADC_ConfigChannel+0x372>
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c3e:	681c      	ldr	r4, [r3, #0]
 8001c40:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001c42:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001c44:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001c48:	680a      	ldr	r2, [r1, #0]
 8001c4a:	f3c2 0513 	ubfx	r5, r2, #0, #20
 8001c4e:	2d00      	cmp	r5, #0
 8001c50:	d144      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x38c>
 8001c52:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001c56:	4290      	cmp	r0, r2
 8001c58:	d048      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x39c>
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c5a:	681c      	ldr	r4, [r3, #0]
 8001c5c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001c5e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001c60:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001c64:	680a      	ldr	r2, [r1, #0]
 8001c66:	f3c2 0513 	ubfx	r5, r2, #0, #20
 8001c6a:	2d00      	cmp	r5, #0
 8001c6c:	d14b      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x3b6>
 8001c6e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001c72:	4290      	cmp	r0, r2
 8001c74:	f47f aebb 	bne.w	80019ee <HAL_ADC_ConfigChannel+0x9e>
  if (ADCx == ADC3)
 8001c78:	4a96      	ldr	r2, [pc, #600]	; (8001ed4 <HAL_ADC_ConfigChannel+0x584>)
 8001c7a:	4294      	cmp	r4, r2
 8001c7c:	d04b      	beq.n	8001d16 <HAL_ADC_ConfigChannel+0x3c6>
    MODIFY_REG(*preg,
 8001c7e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001c80:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c84:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 8001c86:	e6b2      	b.n	80019ee <HAL_ADC_ConfigChannel+0x9e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001c8c:	b112      	cbz	r2, 8001c94 <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 8001c8e:	fab2 f282 	clz	r2, r2
 8001c92:	e7c4      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x2ce>
    return 32U;
 8001c94:	2220      	movs	r2, #32
 8001c96:	e7c2      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x2ce>
  if (ADCx == ADC3)
 8001c98:	4a8e      	ldr	r2, [pc, #568]	; (8001ed4 <HAL_ADC_ConfigChannel+0x584>)
 8001c9a:	4290      	cmp	r0, r2
 8001c9c:	d004      	beq.n	8001ca8 <HAL_ADC_ConfigChannel+0x358>
    MODIFY_REG(*preg,
 8001c9e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001ca0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ca4:	6602      	str	r2, [r0, #96]	; 0x60
}
 8001ca6:	e7bc      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x2d2>
    MODIFY_REG(*preg,
 8001ca8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001caa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cae:	6602      	str	r2, [r0, #96]	; 0x60
 8001cb0:	e7b7      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x2d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001cb6:	b112      	cbz	r2, 8001cbe <HAL_ADC_ConfigChannel+0x36e>
  return __builtin_clz(value);
 8001cb8:	fab2 f282 	clz	r2, r2
 8001cbc:	e7bd      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x2ea>
    return 32U;
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	e7bb      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x2ea>
  if (ADCx == ADC3)
 8001cc2:	4a84      	ldr	r2, [pc, #528]	; (8001ed4 <HAL_ADC_ConfigChannel+0x584>)
 8001cc4:	4294      	cmp	r4, r2
 8001cc6:	d004      	beq.n	8001cd2 <HAL_ADC_ConfigChannel+0x382>
    MODIFY_REG(*preg,
 8001cc8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001cca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cce:	6662      	str	r2, [r4, #100]	; 0x64
}
 8001cd0:	e7b5      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x2ee>
    MODIFY_REG(*preg,
 8001cd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001cd4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cd8:	6662      	str	r2, [r4, #100]	; 0x64
 8001cda:	e7b0      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x2ee>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001ce0:	b112      	cbz	r2, 8001ce8 <HAL_ADC_ConfigChannel+0x398>
  return __builtin_clz(value);
 8001ce2:	fab2 f282 	clz	r2, r2
 8001ce6:	e7b6      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001ce8:	2220      	movs	r2, #32
 8001cea:	e7b4      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x306>
  if (ADCx == ADC3)
 8001cec:	4a79      	ldr	r2, [pc, #484]	; (8001ed4 <HAL_ADC_ConfigChannel+0x584>)
 8001cee:	4294      	cmp	r4, r2
 8001cf0:	d004      	beq.n	8001cfc <HAL_ADC_ConfigChannel+0x3ac>
    MODIFY_REG(*preg,
 8001cf2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001cf4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cf8:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8001cfa:	e7ae      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x30a>
    MODIFY_REG(*preg,
 8001cfc:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001cfe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d02:	66a2      	str	r2, [r4, #104]	; 0x68
 8001d04:	e7a9      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x30a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d06:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001d0a:	b112      	cbz	r2, 8001d12 <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8001d0c:	fab2 f282 	clz	r2, r2
 8001d10:	e7af      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x322>
    return 32U;
 8001d12:	2220      	movs	r2, #32
 8001d14:	e7ad      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x322>
 8001d16:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001d18:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d1c:	66e2      	str	r2, [r4, #108]	; 0x6c
 8001d1e:	e666      	b.n	80019ee <HAL_ADC_ConfigChannel+0x9e>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001d20:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001d22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d26:	6602      	str	r2, [r0, #96]	; 0x60
 8001d28:	e6d5      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x186>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001d2a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001d2c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d30:	6642      	str	r2, [r0, #100]	; 0x64
 8001d32:	e6d9      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x198>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001d34:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001d36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d3a:	6682      	str	r2, [r0, #104]	; 0x68
 8001d3c:	e6dd      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1aa>
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001d3e:	f8d2 60b0 	ldr.w	r6, [r2, #176]	; 0xb0
 8001d42:	f3c0 0413 	ubfx	r4, r0, #0, #20
 8001d46:	ea26 0604 	bic.w	r6, r6, r4
 8001d4a:	f005 0518 	and.w	r5, r5, #24
 8001d4e:	4c62      	ldr	r4, [pc, #392]	; (8001ed8 <HAL_ADC_ConfigChannel+0x588>)
 8001d50:	fa24 f505 	lsr.w	r5, r4, r5
 8001d54:	4028      	ands	r0, r5
 8001d56:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8001d5a:	4330      	orrs	r0, r6
 8001d5c:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 8001d60:	e662      	b.n	8001a28 <HAL_ADC_ConfigChannel+0xd8>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d62:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d64:	680a      	ldr	r2, [r1, #0]
 8001d66:	f3c2 0513 	ubfx	r5, r2, #0, #20
 8001d6a:	2d00      	cmp	r5, #0
 8001d6c:	d134      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x488>
 8001d6e:	0e90      	lsrs	r0, r2, #26
 8001d70:	3001      	adds	r0, #1
 8001d72:	f000 001f 	and.w	r0, r0, #31
 8001d76:	2809      	cmp	r0, #9
 8001d78:	bf8c      	ite	hi
 8001d7a:	2000      	movhi	r0, #0
 8001d7c:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d7e:	2800      	cmp	r0, #0
 8001d80:	d061      	beq.n	8001e46 <HAL_ADC_ConfigChannel+0x4f6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d82:	2d00      	cmp	r5, #0
 8001d84:	d137      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x4a6>
 8001d86:	0e90      	lsrs	r0, r2, #26
 8001d88:	3001      	adds	r0, #1
 8001d8a:	0680      	lsls	r0, r0, #26
 8001d8c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001d90:	2d00      	cmp	r5, #0
 8001d92:	d13c      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x4be>
 8001d94:	0e96      	lsrs	r6, r2, #26
 8001d96:	3601      	adds	r6, #1
 8001d98:	f006 071f 	and.w	r7, r6, #31
 8001d9c:	2601      	movs	r6, #1
 8001d9e:	40be      	lsls	r6, r7
 8001da0:	4330      	orrs	r0, r6
 8001da2:	2d00      	cmp	r5, #0
 8001da4:	d141      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x4da>
 8001da6:	0e92      	lsrs	r2, r2, #26
 8001da8:	3201      	adds	r2, #1
 8001daa:	f002 021f 	and.w	r2, r2, #31
 8001dae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001db2:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001db4:	4302      	orrs	r2, r0
 8001db6:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001db8:	3414      	adds	r4, #20
 8001dba:	0e55      	lsrs	r5, r2, #25
 8001dbc:	00ad      	lsls	r5, r5, #2
 8001dbe:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8001dc2:	5966      	ldr	r6, [r4, r5]
 8001dc4:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8001dc8:	2707      	movs	r7, #7
 8001dca:	4097      	lsls	r7, r2
 8001dcc:	ea26 0607 	bic.w	r6, r6, r7
 8001dd0:	4090      	lsls	r0, r2
 8001dd2:	4330      	orrs	r0, r6
 8001dd4:	5160      	str	r0, [r4, r5]
}
 8001dd6:	e62c      	b.n	8001a32 <HAL_ADC_ConfigChannel+0xe2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd8:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8001ddc:	b148      	cbz	r0, 8001df2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001dde:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001de2:	3001      	adds	r0, #1
 8001de4:	f000 001f 	and.w	r0, r0, #31
 8001de8:	2809      	cmp	r0, #9
 8001dea:	bf8c      	ite	hi
 8001dec:	2000      	movhi	r0, #0
 8001dee:	2001      	movls	r0, #1
 8001df0:	e7c5      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 8001df2:	2020      	movs	r0, #32
 8001df4:	e7f5      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x492>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8001dfa:	b130      	cbz	r0, 8001e0a <HAL_ADC_ConfigChannel+0x4ba>
  return __builtin_clz(value);
 8001dfc:	fab0 f080 	clz	r0, r0
 8001e00:	3001      	adds	r0, #1
 8001e02:	0680      	lsls	r0, r0, #26
 8001e04:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001e08:	e7c2      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x440>
    return 32U;
 8001e0a:	2020      	movs	r0, #32
 8001e0c:	e7f8      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x4b0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8001e12:	b146      	cbz	r6, 8001e26 <HAL_ADC_ConfigChannel+0x4d6>
  return __builtin_clz(value);
 8001e14:	fab6 f686 	clz	r6, r6
 8001e18:	3601      	adds	r6, #1
 8001e1a:	f006 061f 	and.w	r6, r6, #31
 8001e1e:	2701      	movs	r7, #1
 8001e20:	fa07 f606 	lsl.w	r6, r7, r6
 8001e24:	e7bc      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8001e26:	2620      	movs	r6, #32
 8001e28:	e7f6      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x4c8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001e2e:	b142      	cbz	r2, 8001e42 <HAL_ADC_ConfigChannel+0x4f2>
  return __builtin_clz(value);
 8001e30:	fab2 f282 	clz	r2, r2
 8001e34:	3201      	adds	r2, #1
 8001e36:	f002 021f 	and.w	r2, r2, #31
 8001e3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001e3e:	0512      	lsls	r2, r2, #20
 8001e40:	e7b8      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x464>
    return 32U;
 8001e42:	2220      	movs	r2, #32
 8001e44:	e7f6      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x4e4>
 8001e46:	b9cd      	cbnz	r5, 8001e7c <HAL_ADC_ConfigChannel+0x52c>
 8001e48:	0e90      	lsrs	r0, r2, #26
 8001e4a:	3001      	adds	r0, #1
 8001e4c:	0680      	lsls	r0, r0, #26
 8001e4e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001e52:	b9fd      	cbnz	r5, 8001e94 <HAL_ADC_ConfigChannel+0x544>
 8001e54:	0e96      	lsrs	r6, r2, #26
 8001e56:	3601      	adds	r6, #1
 8001e58:	f006 071f 	and.w	r7, r6, #31
 8001e5c:	2601      	movs	r6, #1
 8001e5e:	40be      	lsls	r6, r7
 8001e60:	4330      	orrs	r0, r6
 8001e62:	bb2d      	cbnz	r5, 8001eb0 <HAL_ADC_ConfigChannel+0x560>
 8001e64:	0e92      	lsrs	r2, r2, #26
 8001e66:	3201      	adds	r2, #1
 8001e68:	f002 021f 	and.w	r2, r2, #31
 8001e6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001e70:	3a1e      	subs	r2, #30
 8001e72:	0512      	lsls	r2, r2, #20
 8001e74:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e78:	4302      	orrs	r2, r0
 8001e7a:	e79c      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x466>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8001e80:	b130      	cbz	r0, 8001e90 <HAL_ADC_ConfigChannel+0x540>
  return __builtin_clz(value);
 8001e82:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e86:	3001      	adds	r0, #1
 8001e88:	0680      	lsls	r0, r0, #26
 8001e8a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001e8e:	e7e0      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x502>
    return 32U;
 8001e90:	2020      	movs	r0, #32
 8001e92:	e7f8      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x536>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8001e98:	b146      	cbz	r6, 8001eac <HAL_ADC_ConfigChannel+0x55c>
  return __builtin_clz(value);
 8001e9a:	fab6 f686 	clz	r6, r6
 8001e9e:	3601      	adds	r6, #1
 8001ea0:	f006 061f 	and.w	r6, r6, #31
 8001ea4:	2701      	movs	r7, #1
 8001ea6:	fa07 f606 	lsl.w	r6, r7, r6
 8001eaa:	e7d9      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 8001eac:	2620      	movs	r6, #32
 8001eae:	e7f6      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x54e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001eb4:	b15a      	cbz	r2, 8001ece <HAL_ADC_ConfigChannel+0x57e>
  return __builtin_clz(value);
 8001eb6:	fab2 f282 	clz	r2, r2
 8001eba:	3201      	adds	r2, #1
 8001ebc:	f002 021f 	and.w	r2, r2, #31
 8001ec0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001ec4:	3a1e      	subs	r2, #30
 8001ec6:	0512      	lsls	r2, r2, #20
 8001ec8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001ecc:	e7d4      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001ece:	2220      	movs	r2, #32
 8001ed0:	e7f3      	b.n	8001eba <HAL_ADC_ConfigChannel+0x56a>
 8001ed2:	bf00      	nop
 8001ed4:	58026000 	.word	0x58026000
 8001ed8:	000fffff 	.word	0x000fffff
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001edc:	6819      	ldr	r1, [r3, #0]
 8001ede:	4843      	ldr	r0, [pc, #268]	; (8001fec <HAL_ADC_ConfigChannel+0x69c>)
 8001ee0:	4c43      	ldr	r4, [pc, #268]	; (8001ff0 <HAL_ADC_ConfigChannel+0x6a0>)
 8001ee2:	42a1      	cmp	r1, r4
 8001ee4:	bf18      	it	ne
 8001ee6:	4281      	cmpne	r1, r0
 8001ee8:	bf0c      	ite	eq
 8001eea:	2001      	moveq	r0, #1
 8001eec:	2000      	movne	r0, #0
 8001eee:	d121      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x5e4>
 8001ef0:	4e40      	ldr	r6, [pc, #256]	; (8001ff4 <HAL_ADC_ConfigChannel+0x6a4>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ef2:	68b5      	ldr	r5, [r6, #8]
 8001ef4:	f005 77e0 	and.w	r7, r5, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ef8:	b1f0      	cbz	r0, 8001f38 <HAL_ADC_ConfigChannel+0x5e8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001efa:	483c      	ldr	r0, [pc, #240]	; (8001fec <HAL_ADC_ConfigChannel+0x69c>)
 8001efc:	6880      	ldr	r0, [r0, #8]
 8001efe:	f010 0001 	ands.w	r0, r0, #1
 8001f02:	d000      	beq.n	8001f06 <HAL_ADC_ConfigChannel+0x5b6>
 8001f04:	2001      	movs	r0, #1
 8001f06:	4c3a      	ldr	r4, [pc, #232]	; (8001ff0 <HAL_ADC_ConfigChannel+0x6a0>)
 8001f08:	68a4      	ldr	r4, [r4, #8]
 8001f0a:	f014 0401 	ands.w	r4, r4, #1
 8001f0e:	d000      	beq.n	8001f12 <HAL_ADC_ConfigChannel+0x5c2>
 8001f10:	2401      	movs	r4, #1
 8001f12:	4320      	orrs	r0, r4
 8001f14:	bf0c      	ite	eq
 8001f16:	2001      	moveq	r0, #1
 8001f18:	2000      	movne	r0, #0
 8001f1a:	2800      	cmp	r0, #0
 8001f1c:	d059      	beq.n	8001fd2 <HAL_ADC_ConfigChannel+0x682>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f1e:	4836      	ldr	r0, [pc, #216]	; (8001ff8 <HAL_ADC_ConfigChannel+0x6a8>)
 8001f20:	4282      	cmp	r2, r0
 8001f22:	d012      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x5fa>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f24:	4835      	ldr	r0, [pc, #212]	; (8001ffc <HAL_ADC_ConfigChannel+0x6ac>)
 8001f26:	4282      	cmp	r2, r0
 8001f28:	d031      	beq.n	8001f8e <HAL_ADC_ConfigChannel+0x63e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f2a:	4835      	ldr	r0, [pc, #212]	; (8002000 <HAL_ADC_ConfigChannel+0x6b0>)
 8001f2c:	4282      	cmp	r2, r0
 8001f2e:	d03f      	beq.n	8001fb0 <HAL_ADC_ConfigChannel+0x660>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f30:	2000      	movs	r0, #0
 8001f32:	e524      	b.n	800197e <HAL_ADC_ConfigChannel+0x2e>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f34:	4e33      	ldr	r6, [pc, #204]	; (8002004 <HAL_ADC_ConfigChannel+0x6b4>)
 8001f36:	e7dc      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x5a2>
 8001f38:	4833      	ldr	r0, [pc, #204]	; (8002008 <HAL_ADC_ConfigChannel+0x6b8>)
 8001f3a:	6880      	ldr	r0, [r0, #8]
 8001f3c:	f010 0001 	ands.w	r0, r0, #1
 8001f40:	d000      	beq.n	8001f44 <HAL_ADC_ConfigChannel+0x5f4>
 8001f42:	2001      	movs	r0, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f44:	f080 0001 	eor.w	r0, r0, #1
 8001f48:	e7e7      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x5ca>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f4a:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8001f4e:	d1e9      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x5d4>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f50:	4a2d      	ldr	r2, [pc, #180]	; (8002008 <HAL_ADC_ConfigChannel+0x6b8>)
 8001f52:	4291      	cmp	r1, r2
 8001f54:	d001      	beq.n	8001f5a <HAL_ADC_ConfigChannel+0x60a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f56:	2000      	movs	r0, #0
 8001f58:	e511      	b.n	800197e <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001f5a:	f447 0200 	orr.w	r2, r7, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f5e:	68b1      	ldr	r1, [r6, #8]
 8001f60:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001f64:	430a      	orrs	r2, r1
 8001f66:	60b2      	str	r2, [r6, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f68:	4a28      	ldr	r2, [pc, #160]	; (800200c <HAL_ADC_ConfigChannel+0x6bc>)
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	0992      	lsrs	r2, r2, #6
 8001f6e:	4928      	ldr	r1, [pc, #160]	; (8002010 <HAL_ADC_ConfigChannel+0x6c0>)
 8001f70:	fba1 1202 	umull	r1, r2, r1, r2
 8001f74:	0992      	lsrs	r2, r2, #6
 8001f76:	3201      	adds	r2, #1
 8001f78:	0052      	lsls	r2, r2, #1
 8001f7a:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001f7c:	e002      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x634>
                wait_loop_index--;
 8001f7e:	9a01      	ldr	r2, [sp, #4]
 8001f80:	3a01      	subs	r2, #1
 8001f82:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001f84:	9a01      	ldr	r2, [sp, #4]
 8001f86:	2a00      	cmp	r2, #0
 8001f88:	d1f9      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x62e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	e4f7      	b.n	800197e <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f8e:	f015 7f80 	tst.w	r5, #16777216	; 0x1000000
 8001f92:	d1ca      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x5da>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f94:	4a1c      	ldr	r2, [pc, #112]	; (8002008 <HAL_ADC_ConfigChannel+0x6b8>)
 8001f96:	4291      	cmp	r1, r2
 8001f98:	d001      	beq.n	8001f9e <HAL_ADC_ConfigChannel+0x64e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	e4ef      	b.n	800197e <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001f9e:	f047 7280 	orr.w	r2, r7, #16777216	; 0x1000000
 8001fa2:	68b1      	ldr	r1, [r6, #8]
 8001fa4:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	60b2      	str	r2, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fac:	2000      	movs	r0, #0
}
 8001fae:	e4e6      	b.n	800197e <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fb0:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8001fb4:	d115      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x692>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001fb6:	4a14      	ldr	r2, [pc, #80]	; (8002008 <HAL_ADC_ConfigChannel+0x6b8>)
 8001fb8:	4291      	cmp	r1, r2
 8001fba:	d001      	beq.n	8001fc0 <HAL_ADC_ConfigChannel+0x670>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	e4de      	b.n	800197e <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001fc0:	f447 0280 	orr.w	r2, r7, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001fc4:	68b1      	ldr	r1, [r6, #8]
 8001fc6:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	60b2      	str	r2, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fce:	2000      	movs	r0, #0
}
 8001fd0:	e4d5      	b.n	800197e <HAL_ADC_ConfigChannel+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fd2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fd4:	f042 0220 	orr.w	r2, r2, #32
 8001fd8:	661a      	str	r2, [r3, #96]	; 0x60
          tmp_hal_status = HAL_ERROR;
 8001fda:	2001      	movs	r0, #1
 8001fdc:	e4cf      	b.n	800197e <HAL_ADC_ConfigChannel+0x2e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fde:	2000      	movs	r0, #0
 8001fe0:	e4cd      	b.n	800197e <HAL_ADC_ConfigChannel+0x2e>
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	e4cb      	b.n	800197e <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8001fe6:	2002      	movs	r0, #2
 8001fe8:	e4cc      	b.n	8001984 <HAL_ADC_ConfigChannel+0x34>
 8001fea:	bf00      	nop
 8001fec:	40022000 	.word	0x40022000
 8001ff0:	40022100 	.word	0x40022100
 8001ff4:	40022300 	.word	0x40022300
 8001ff8:	c7520000 	.word	0xc7520000
 8001ffc:	c3210000 	.word	0xc3210000
 8002000:	cb840000 	.word	0xcb840000
 8002004:	58026300 	.word	0x58026300
 8002008:	58026000 	.word	0x58026000
 800200c:	24000004 	.word	0x24000004
 8002010:	053e2d63 	.word	0x053e2d63

08002014 <ADC_Enable>:
{
 8002014:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002016:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	f012 0f01 	tst.w	r2, #1
 800201e:	d156      	bne.n	80020ce <ADC_Enable+0xba>
 8002020:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002022:	6899      	ldr	r1, [r3, #8]
 8002024:	4a2b      	ldr	r2, [pc, #172]	; (80020d4 <ADC_Enable+0xc0>)
 8002026:	4211      	tst	r1, r2
 8002028:	d009      	beq.n	800203e <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800202c:	f043 0310 	orr.w	r3, r3, #16
 8002030:	6603      	str	r3, [r0, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002032:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6643      	str	r3, [r0, #100]	; 0x64
      return HAL_ERROR;
 800203a:	2001      	movs	r0, #1
 800203c:	e048      	b.n	80020d0 <ADC_Enable+0xbc>
  MODIFY_REG(ADCx->CR,
 800203e:	6899      	ldr	r1, [r3, #8]
 8002040:	4a25      	ldr	r2, [pc, #148]	; (80020d8 <ADC_Enable+0xc4>)
 8002042:	400a      	ands	r2, r1
 8002044:	f042 0201 	orr.w	r2, r2, #1
 8002048:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800204a:	f7ff faa1 	bl	8001590 <HAL_GetTick>
 800204e:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002050:	6823      	ldr	r3, [r4, #0]
 8002052:	4922      	ldr	r1, [pc, #136]	; (80020dc <ADC_Enable+0xc8>)
 8002054:	4a22      	ldr	r2, [pc, #136]	; (80020e0 <ADC_Enable+0xcc>)
 8002056:	4293      	cmp	r3, r2
 8002058:	bf18      	it	ne
 800205a:	428b      	cmpne	r3, r1
 800205c:	d10d      	bne.n	800207a <ADC_Enable+0x66>
 800205e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002062:	6892      	ldr	r2, [r2, #8]
 8002064:	f002 021f 	and.w	r2, r2, #31
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002068:	491d      	ldr	r1, [pc, #116]	; (80020e0 <ADC_Enable+0xcc>)
 800206a:	428b      	cmp	r3, r1
 800206c:	d007      	beq.n	800207e <ADC_Enable+0x6a>
 800206e:	4619      	mov	r1, r3
 8002070:	4299      	cmp	r1, r3
 8002072:	d007      	beq.n	8002084 <ADC_Enable+0x70>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002074:	b132      	cbz	r2, 8002084 <ADC_Enable+0x70>
  return HAL_OK;
 8002076:	2000      	movs	r0, #0
 8002078:	e02a      	b.n	80020d0 <ADC_Enable+0xbc>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800207a:	4a1a      	ldr	r2, [pc, #104]	; (80020e4 <ADC_Enable+0xd0>)
 800207c:	e7f1      	b.n	8002062 <ADC_Enable+0x4e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800207e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8002082:	e7f5      	b.n	8002070 <ADC_Enable+0x5c>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	f012 0f01 	tst.w	r2, #1
 800208c:	d11d      	bne.n	80020ca <ADC_Enable+0xb6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	f012 0f01 	tst.w	r2, #1
 8002094:	d105      	bne.n	80020a2 <ADC_Enable+0x8e>
  MODIFY_REG(ADCx->CR,
 8002096:	6899      	ldr	r1, [r3, #8]
 8002098:	4a0f      	ldr	r2, [pc, #60]	; (80020d8 <ADC_Enable+0xc4>)
 800209a:	400a      	ands	r2, r1
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020a2:	f7ff fa75 	bl	8001590 <HAL_GetTick>
 80020a6:	1b40      	subs	r0, r0, r5
 80020a8:	2802      	cmp	r0, #2
 80020aa:	d9eb      	bls.n	8002084 <ADC_Enable+0x70>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020ac:	6823      	ldr	r3, [r4, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f013 0f01 	tst.w	r3, #1
 80020b4:	d1e6      	bne.n	8002084 <ADC_Enable+0x70>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80020b8:	f043 0310 	orr.w	r3, r3, #16
 80020bc:	6623      	str	r3, [r4, #96]	; 0x60
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6663      	str	r3, [r4, #100]	; 0x64
            return HAL_ERROR;
 80020c6:	2001      	movs	r0, #1
 80020c8:	e002      	b.n	80020d0 <ADC_Enable+0xbc>
  return HAL_OK;
 80020ca:	2000      	movs	r0, #0
 80020cc:	e000      	b.n	80020d0 <ADC_Enable+0xbc>
 80020ce:	2000      	movs	r0, #0
}
 80020d0:	bd38      	pop	{r3, r4, r5, pc}
 80020d2:	bf00      	nop
 80020d4:	8000003f 	.word	0x8000003f
 80020d8:	7fffffc0 	.word	0x7fffffc0
 80020dc:	40022000 	.word	0x40022000
 80020e0:	40022100 	.word	0x40022100
 80020e4:	58026300 	.word	0x58026300

080020e8 <HAL_ADC_Start_DMA>:
{
 80020e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ea:	4604      	mov	r4, r0
 80020ec:	460e      	mov	r6, r1
 80020ee:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020f0:	6800      	ldr	r0, [r0, #0]
 80020f2:	4a46      	ldr	r2, [pc, #280]	; (800220c <HAL_ADC_Start_DMA+0x124>)
 80020f4:	4b46      	ldr	r3, [pc, #280]	; (8002210 <HAL_ADC_Start_DMA+0x128>)
 80020f6:	4298      	cmp	r0, r3
 80020f8:	bf18      	it	ne
 80020fa:	4290      	cmpne	r0, r2
 80020fc:	d11a      	bne.n	8002134 <HAL_ADC_Start_DMA+0x4c>
 80020fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002102:	689d      	ldr	r5, [r3, #8]
 8002104:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002108:	6880      	ldr	r0, [r0, #8]
 800210a:	f010 0f04 	tst.w	r0, #4
 800210e:	d178      	bne.n	8002202 <HAL_ADC_Start_DMA+0x11a>
    __HAL_LOCK(hadc);
 8002110:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8002114:	2b01      	cmp	r3, #1
 8002116:	d076      	beq.n	8002206 <HAL_ADC_Start_DMA+0x11e>
 8002118:	2301      	movs	r3, #1
 800211a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800211e:	2d05      	cmp	r5, #5
 8002120:	bf18      	it	ne
 8002122:	2d00      	cmpne	r5, #0
 8002124:	d008      	beq.n	8002138 <HAL_ADC_Start_DMA+0x50>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002126:	2d09      	cmp	r5, #9
 8002128:	d006      	beq.n	8002138 <HAL_ADC_Start_DMA+0x50>
      __HAL_UNLOCK(hadc);
 800212a:	2300      	movs	r3, #0
 800212c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 8002130:	2001      	movs	r0, #1
 8002132:	e067      	b.n	8002204 <HAL_ADC_Start_DMA+0x11c>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002134:	4b37      	ldr	r3, [pc, #220]	; (8002214 <HAL_ADC_Start_DMA+0x12c>)
 8002136:	e7e4      	b.n	8002102 <HAL_ADC_Start_DMA+0x1a>
      tmp_hal_status = ADC_Enable(hadc);
 8002138:	4620      	mov	r0, r4
 800213a:	f7ff ff6b 	bl	8002014 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800213e:	2800      	cmp	r0, #0
 8002140:	d15b      	bne.n	80021fa <HAL_ADC_Start_DMA+0x112>
        ADC_STATE_CLR_SET(hadc->State,
 8002142:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002144:	f6a0 7302 	subw	r3, r0, #3842	; 0xf02
 8002148:	4013      	ands	r3, r2
 800214a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214e:	6623      	str	r3, [r4, #96]	; 0x60
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002150:	6823      	ldr	r3, [r4, #0]
 8002152:	4a2f      	ldr	r2, [pc, #188]	; (8002210 <HAL_ADC_Start_DMA+0x128>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d03c      	beq.n	80021d2 <HAL_ADC_Start_DMA+0xea>
 8002158:	461a      	mov	r2, r3
 800215a:	4293      	cmp	r3, r2
 800215c:	d000      	beq.n	8002160 <HAL_ADC_Start_DMA+0x78>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800215e:	b91d      	cbnz	r5, 8002168 <HAL_ADC_Start_DMA+0x80>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002160:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002162:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002166:	6623      	str	r3, [r4, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002168:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800216a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800216e:	d033      	beq.n	80021d8 <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002170:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002172:	f023 0306 	bic.w	r3, r3, #6
 8002176:	6663      	str	r3, [r4, #100]	; 0x64
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002178:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800217a:	4a27      	ldr	r2, [pc, #156]	; (8002218 <HAL_ADC_Start_DMA+0x130>)
 800217c:	63da      	str	r2, [r3, #60]	; 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800217e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002180:	4a26      	ldr	r2, [pc, #152]	; (800221c <HAL_ADC_Start_DMA+0x134>)
 8002182:	641a      	str	r2, [r3, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002184:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002186:	4a26      	ldr	r2, [pc, #152]	; (8002220 <HAL_ADC_Start_DMA+0x138>)
 8002188:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	221c      	movs	r2, #28
 800218e:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8002190:	2300      	movs	r3, #0
 8002192:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002196:	6822      	ldr	r2, [r4, #0]
 8002198:	6853      	ldr	r3, [r2, #4]
 800219a:	f043 0310 	orr.w	r3, r3, #16
 800219e:	6053      	str	r3, [r2, #4]
        if (hadc->Instance == ADC3)
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	4a20      	ldr	r2, [pc, #128]	; (8002224 <HAL_ADC_Start_DMA+0x13c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d01a      	beq.n	80021de <HAL_ADC_Start_DMA+0xf6>
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80021a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80021aa:	68d9      	ldr	r1, [r3, #12]
 80021ac:	f021 0103 	bic.w	r1, r1, #3
 80021b0:	430a      	orrs	r2, r1
 80021b2:	60da      	str	r2, [r3, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021b4:	6821      	ldr	r1, [r4, #0]
 80021b6:	463b      	mov	r3, r7
 80021b8:	4632      	mov	r2, r6
 80021ba:	3140      	adds	r1, #64	; 0x40
 80021bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021be:	f000 ff8d 	bl	80030dc <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021c2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80021c4:	6891      	ldr	r1, [r2, #8]
 80021c6:	4b18      	ldr	r3, [pc, #96]	; (8002228 <HAL_ADC_Start_DMA+0x140>)
 80021c8:	400b      	ands	r3, r1
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	6093      	str	r3, [r2, #8]
}
 80021d0:	e018      	b.n	8002204 <HAL_ADC_Start_DMA+0x11c>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021d2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80021d6:	e7c0      	b.n	800215a <HAL_ADC_Start_DMA+0x72>
          ADC_CLEAR_ERRORCODE(hadc);
 80021d8:	2300      	movs	r3, #0
 80021da:	6663      	str	r3, [r4, #100]	; 0x64
 80021dc:	e7cc      	b.n	8002178 <HAL_ADC_Start_DMA+0x90>
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021de:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	f022 0203 	bic.w	r2, r2, #3
 80021e8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80021ec:	60da      	str	r2, [r3, #12]
          LL_ADC_EnableDMAReq(hadc->Instance);
 80021ee:	6822      	ldr	r2, [r4, #0]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80021f0:	68d3      	ldr	r3, [r2, #12]
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	60d3      	str	r3, [r2, #12]
}
 80021f8:	e7dc      	b.n	80021b4 <HAL_ADC_Start_DMA+0xcc>
        __HAL_UNLOCK(hadc);
 80021fa:	2300      	movs	r3, #0
 80021fc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8002200:	e000      	b.n	8002204 <HAL_ADC_Start_DMA+0x11c>
    tmp_hal_status = HAL_BUSY;
 8002202:	2002      	movs	r0, #2
}
 8002204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8002206:	2002      	movs	r0, #2
 8002208:	e7fc      	b.n	8002204 <HAL_ADC_Start_DMA+0x11c>
 800220a:	bf00      	nop
 800220c:	40022000 	.word	0x40022000
 8002210:	40022100 	.word	0x40022100
 8002214:	58026300 	.word	0x58026300
 8002218:	080018ad 	.word	0x080018ad
 800221c:	080015c5 	.word	0x080015c5
 8002220:	08001935 	.word	0x08001935
 8002224:	58026000 	.word	0x58026000
 8002228:	7fffffc0 	.word	0x7fffffc0

0800222c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800222c:	b510      	push	{r4, lr}
 800222e:	4604      	mov	r4, r0
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002230:	6803      	ldr	r3, [r0, #0]
 8002232:	4944      	ldr	r1, [pc, #272]	; (8002344 <ADC_ConfigureBoostMode+0x118>)
 8002234:	4a44      	ldr	r2, [pc, #272]	; (8002348 <ADC_ConfigureBoostMode+0x11c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	bf18      	it	ne
 800223a:	428b      	cmpne	r3, r1
 800223c:	d11c      	bne.n	8002278 <ADC_ConfigureBoostMode+0x4c>
 800223e:	4b43      	ldr	r3, [pc, #268]	; (800234c <ADC_ConfigureBoostMode+0x120>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002246:	bf14      	ite	ne
 8002248:	2301      	movne	r3, #1
 800224a:	2300      	moveq	r3, #0
 800224c:	b313      	cbz	r3, 8002294 <ADC_ConfigureBoostMode+0x68>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800224e:	f002 fbdb 	bl	8004a08 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8002252:	6863      	ldr	r3, [r4, #4]
 8002254:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002258:	d016      	beq.n	8002288 <ADC_ConfigureBoostMode+0x5c>
 800225a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800225e:	d017      	beq.n	8002290 <ADC_ConfigureBoostMode+0x64>
 8002260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002264:	d010      	beq.n	8002288 <ADC_ConfigureBoostMode+0x5c>
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
  if (freq <= 6250000UL)
 8002266:	4b3a      	ldr	r3, [pc, #232]	; (8002350 <ADC_ConfigureBoostMode+0x124>)
 8002268:	4298      	cmp	r0, r3
 800226a:	d84e      	bhi.n	800230a <ADC_ConfigureBoostMode+0xde>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800226c:	6822      	ldr	r2, [r4, #0]
 800226e:	6893      	ldr	r3, [r2, #8]
 8002270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002274:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002276:	bd10      	pop	{r4, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002278:	4b36      	ldr	r3, [pc, #216]	; (8002354 <ADC_ConfigureBoostMode+0x128>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002280:	bf14      	ite	ne
 8002282:	2301      	movne	r3, #1
 8002284:	2300      	moveq	r3, #0
 8002286:	e7e1      	b.n	800224c <ADC_ConfigureBoostMode+0x20>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 800228e:	e7ea      	b.n	8002266 <ADC_ConfigureBoostMode+0x3a>
        freq /= 4UL;
 8002290:	0880      	lsrs	r0, r0, #2
        break;
 8002292:	e7e8      	b.n	8002266 <ADC_ConfigureBoostMode+0x3a>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002294:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002298:	2100      	movs	r1, #0
 800229a:	f003 fd01 	bl	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800229e:	6863      	ldr	r3, [r4, #4]
 80022a0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80022a4:	d02d      	beq.n	8002302 <ADC_ConfigureBoostMode+0xd6>
 80022a6:	d822      	bhi.n	80022ee <ADC_ConfigureBoostMode+0xc2>
 80022a8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80022ac:	d027      	beq.n	80022fe <ADC_ConfigureBoostMode+0xd2>
 80022ae:	d904      	bls.n	80022ba <ADC_ConfigureBoostMode+0x8e>
 80022b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022b4:	d1d7      	bne.n	8002266 <ADC_ConfigureBoostMode+0x3a>
        freq /= 32UL;
 80022b6:	0940      	lsrs	r0, r0, #5
        break;
 80022b8:	e7d5      	b.n	8002266 <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 80022ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022be:	d00d      	beq.n	80022dc <ADC_ConfigureBoostMode+0xb0>
 80022c0:	d906      	bls.n	80022d0 <ADC_ConfigureBoostMode+0xa4>
 80022c2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80022c6:	d009      	beq.n	80022dc <ADC_ConfigureBoostMode+0xb0>
 80022c8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80022cc:	d006      	beq.n	80022dc <ADC_ConfigureBoostMode+0xb0>
 80022ce:	e7ca      	b.n	8002266 <ADC_ConfigureBoostMode+0x3a>
 80022d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022d4:	d002      	beq.n	80022dc <ADC_ConfigureBoostMode+0xb0>
 80022d6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80022da:	d104      	bne.n	80022e6 <ADC_ConfigureBoostMode+0xba>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80022dc:	0c9b      	lsrs	r3, r3, #18
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80022e4:	e7bf      	b.n	8002266 <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 80022e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022ea:	d0f7      	beq.n	80022dc <ADC_ConfigureBoostMode+0xb0>
 80022ec:	e7bb      	b.n	8002266 <ADC_ConfigureBoostMode+0x3a>
 80022ee:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80022f2:	d008      	beq.n	8002306 <ADC_ConfigureBoostMode+0xda>
 80022f4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80022f8:	d1b5      	bne.n	8002266 <ADC_ConfigureBoostMode+0x3a>
        freq /= 256UL;
 80022fa:	0a00      	lsrs	r0, r0, #8
        break;
 80022fc:	e7b3      	b.n	8002266 <ADC_ConfigureBoostMode+0x3a>
        freq /= 16UL;
 80022fe:	0900      	lsrs	r0, r0, #4
        break;
 8002300:	e7b1      	b.n	8002266 <ADC_ConfigureBoostMode+0x3a>
        freq /= 64UL;
 8002302:	0980      	lsrs	r0, r0, #6
        break;
 8002304:	e7af      	b.n	8002266 <ADC_ConfigureBoostMode+0x3a>
        freq /= 128UL;
 8002306:	09c0      	lsrs	r0, r0, #7
        break;
 8002308:	e7ad      	b.n	8002266 <ADC_ConfigureBoostMode+0x3a>
  else if (freq <= 12500000UL)
 800230a:	4b13      	ldr	r3, [pc, #76]	; (8002358 <ADC_ConfigureBoostMode+0x12c>)
 800230c:	4298      	cmp	r0, r3
 800230e:	d807      	bhi.n	8002320 <ADC_ConfigureBoostMode+0xf4>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002310:	6822      	ldr	r2, [r4, #0]
 8002312:	6893      	ldr	r3, [r2, #8]
 8002314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231c:	6093      	str	r3, [r2, #8]
 800231e:	e7aa      	b.n	8002276 <ADC_ConfigureBoostMode+0x4a>
  else if (freq <= 25000000UL)
 8002320:	4b0e      	ldr	r3, [pc, #56]	; (800235c <ADC_ConfigureBoostMode+0x130>)
 8002322:	4298      	cmp	r0, r3
 8002324:	d807      	bhi.n	8002336 <ADC_ConfigureBoostMode+0x10a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002326:	6822      	ldr	r2, [r4, #0]
 8002328:	6893      	ldr	r3, [r2, #8]
 800232a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800232e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002332:	6093      	str	r3, [r2, #8]
 8002334:	e79f      	b.n	8002276 <ADC_ConfigureBoostMode+0x4a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002336:	6822      	ldr	r2, [r4, #0]
 8002338:	6893      	ldr	r3, [r2, #8]
 800233a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800233e:	6093      	str	r3, [r2, #8]
}
 8002340:	e799      	b.n	8002276 <ADC_ConfigureBoostMode+0x4a>
 8002342:	bf00      	nop
 8002344:	40022000 	.word	0x40022000
 8002348:	40022100 	.word	0x40022100
 800234c:	40022300 	.word	0x40022300
 8002350:	00bebc21 	.word	0x00bebc21
 8002354:	58026300 	.word	0x58026300
 8002358:	017d7841 	.word	0x017d7841
 800235c:	02faf081 	.word	0x02faf081

08002360 <HAL_ADC_Init>:
{
 8002360:	b530      	push	{r4, r5, lr}
 8002362:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8002364:	2300      	movs	r3, #0
 8002366:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8002368:	2800      	cmp	r0, #0
 800236a:	f000 8167 	beq.w	800263c <HAL_ADC_Init+0x2dc>
 800236e:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002370:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002372:	b1eb      	cbz	r3, 80023b0 <HAL_ADC_Init+0x50>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002374:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 800237c:	d003      	beq.n	8002386 <HAL_ADC_Init+0x26>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800237e:	6899      	ldr	r1, [r3, #8]
 8002380:	4a9c      	ldr	r2, [pc, #624]	; (80025f4 <HAL_ADC_Init+0x294>)
 8002382:	400a      	ands	r2, r1
 8002384:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002386:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800238e:	d11c      	bne.n	80023ca <HAL_ADC_Init+0x6a>
  MODIFY_REG(ADCx->CR,
 8002390:	6899      	ldr	r1, [r3, #8]
 8002392:	4a99      	ldr	r2, [pc, #612]	; (80025f8 <HAL_ADC_Init+0x298>)
 8002394:	400a      	ands	r2, r1
 8002396:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800239a:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800239c:	4b97      	ldr	r3, [pc, #604]	; (80025fc <HAL_ADC_Init+0x29c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	099b      	lsrs	r3, r3, #6
 80023a2:	4a97      	ldr	r2, [pc, #604]	; (8002600 <HAL_ADC_Init+0x2a0>)
 80023a4:	fba2 2303 	umull	r2, r3, r2, r3
 80023a8:	099b      	lsrs	r3, r3, #6
 80023aa:	3301      	adds	r3, #1
 80023ac:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80023ae:	e009      	b.n	80023c4 <HAL_ADC_Init+0x64>
    HAL_ADC_MspInit(hadc);
 80023b0:	f7fe fd9e 	bl	8000ef0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80023b4:	2300      	movs	r3, #0
 80023b6:	6663      	str	r3, [r4, #100]	; 0x64
    hadc->Lock = HAL_UNLOCKED;
 80023b8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80023bc:	e7da      	b.n	8002374 <HAL_ADC_Init+0x14>
      wait_loop_index--;
 80023be:	9b01      	ldr	r3, [sp, #4]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80023c4:	9b01      	ldr	r3, [sp, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f9      	bne.n	80023be <HAL_ADC_Init+0x5e>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ca:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80023d2:	f040 80a2 	bne.w	800251a <HAL_ADC_Init+0x1ba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80023d8:	f042 0210 	orr.w	r2, r2, #16
 80023dc:	6622      	str	r2, [r4, #96]	; 0x60
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80023e0:	f042 0201 	orr.w	r2, r2, #1
 80023e4:	6662      	str	r2, [r4, #100]	; 0x64
    tmp_hal_status = HAL_ERROR;
 80023e6:	2501      	movs	r5, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	f012 0204 	ands.w	r2, r2, #4
 80023ee:	d000      	beq.n	80023f2 <HAL_ADC_Init+0x92>
 80023f0:	2201      	movs	r2, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023f2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80023f4:	f011 0f10 	tst.w	r1, #16
 80023f8:	f040 8118 	bne.w	800262c <HAL_ADC_Init+0x2cc>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023fc:	2a00      	cmp	r2, #0
 80023fe:	f040 8115 	bne.w	800262c <HAL_ADC_Init+0x2cc>
    ADC_STATE_CLR_SET(hadc->State,
 8002402:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002404:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8002408:	f041 0102 	orr.w	r1, r1, #2
 800240c:	6621      	str	r1, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800240e:	6899      	ldr	r1, [r3, #8]
 8002410:	f011 0f01 	tst.w	r1, #1
 8002414:	d121      	bne.n	800245a <HAL_ADC_Init+0xfa>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002416:	487b      	ldr	r0, [pc, #492]	; (8002604 <HAL_ADC_Init+0x2a4>)
 8002418:	497b      	ldr	r1, [pc, #492]	; (8002608 <HAL_ADC_Init+0x2a8>)
 800241a:	428b      	cmp	r3, r1
 800241c:	bf18      	it	ne
 800241e:	4283      	cmpne	r3, r0
 8002420:	bf0c      	ite	eq
 8002422:	2301      	moveq	r3, #1
 8002424:	2300      	movne	r3, #0
 8002426:	d17a      	bne.n	800251e <HAL_ADC_Init+0x1be>
 8002428:	6881      	ldr	r1, [r0, #8]
 800242a:	f011 0101 	ands.w	r1, r1, #1
 800242e:	d000      	beq.n	8002432 <HAL_ADC_Init+0xd2>
 8002430:	2101      	movs	r1, #1
 8002432:	4875      	ldr	r0, [pc, #468]	; (8002608 <HAL_ADC_Init+0x2a8>)
 8002434:	6880      	ldr	r0, [r0, #8]
 8002436:	f010 0001 	ands.w	r0, r0, #1
 800243a:	d000      	beq.n	800243e <HAL_ADC_Init+0xde>
 800243c:	2001      	movs	r0, #1
 800243e:	4301      	orrs	r1, r0
 8002440:	bf0c      	ite	eq
 8002442:	2101      	moveq	r1, #1
 8002444:	2100      	movne	r1, #0
 8002446:	b141      	cbz	r1, 800245a <HAL_ADC_Init+0xfa>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002448:	2b00      	cmp	r3, #0
 800244a:	d071      	beq.n	8002530 <HAL_ADC_Init+0x1d0>
 800244c:	486f      	ldr	r0, [pc, #444]	; (800260c <HAL_ADC_Init+0x2ac>)
 800244e:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002450:	6881      	ldr	r1, [r0, #8]
 8002452:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8002456:	430b      	orrs	r3, r1
 8002458:	6083      	str	r3, [r0, #8]
    if (hadc->Instance == ADC3)
 800245a:	6821      	ldr	r1, [r4, #0]
 800245c:	4b6c      	ldr	r3, [pc, #432]	; (8002610 <HAL_ADC_Init+0x2b0>)
 800245e:	4299      	cmp	r1, r3
 8002460:	d068      	beq.n	8002534 <HAL_ADC_Init+0x1d4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002462:	7e62      	ldrb	r2, [r4, #25]
                  hadc->Init.Overrun                                                    |
 8002464:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002466:	ea43 3242 	orr.w	r2, r3, r2, lsl #13
                  hadc->Init.Resolution                                                 |
 800246a:	68a3      	ldr	r3, [r4, #8]
                  hadc->Init.Overrun                                                    |
 800246c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800246e:	f894 3020 	ldrb.w	r3, [r4, #32]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002472:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002476:	f894 3020 	ldrb.w	r3, [r4, #32]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d074      	beq.n	8002568 <HAL_ADC_Init+0x208>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800247e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002480:	b123      	cbz	r3, 800248c <HAL_ADC_Init+0x12c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002482:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002486:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002488:	4303      	orrs	r3, r0
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800248a:	431a      	orrs	r2, r3
    if (hadc->Instance == ADC3)
 800248c:	4b60      	ldr	r3, [pc, #384]	; (8002610 <HAL_ADC_Init+0x2b0>)
 800248e:	4299      	cmp	r1, r3
 8002490:	d06f      	beq.n	8002572 <HAL_ADC_Init+0x212>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002492:	68c8      	ldr	r0, [r1, #12]
 8002494:	4b5f      	ldr	r3, [pc, #380]	; (8002614 <HAL_ADC_Init+0x2b4>)
 8002496:	4003      	ands	r3, r0
 8002498:	431a      	orrs	r2, r3
 800249a:	60ca      	str	r2, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800249c:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800249e:	688b      	ldr	r3, [r1, #8]
 80024a0:	f013 0304 	ands.w	r3, r3, #4
 80024a4:	d000      	beq.n	80024a8 <HAL_ADC_Init+0x148>
 80024a6:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024a8:	688a      	ldr	r2, [r1, #8]
 80024aa:	f012 0208 	ands.w	r2, r2, #8
 80024ae:	d000      	beq.n	80024b2 <HAL_ADC_Init+0x152>
 80024b0:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	d122      	bne.n	80024fc <HAL_ADC_Init+0x19c>
      if (hadc->Instance == ADC3)
 80024b6:	4b56      	ldr	r3, [pc, #344]	; (8002610 <HAL_ADC_Init+0x2b0>)
 80024b8:	4299      	cmp	r1, r3
 80024ba:	d067      	beq.n	800258c <HAL_ADC_Init+0x22c>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024bc:	7e22      	ldrb	r2, [r4, #24]
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80024be:	6b23      	ldr	r3, [r4, #48]	; 0x30
        tmpCFGR = (
 80024c0:	ea43 3282 	orr.w	r2, r3, r2, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024c4:	68c8      	ldr	r0, [r1, #12]
 80024c6:	4b54      	ldr	r3, [pc, #336]	; (8002618 <HAL_ADC_Init+0x2b8>)
 80024c8:	4003      	ands	r3, r0
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60cb      	str	r3, [r1, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80024ce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d061      	beq.n	800259a <HAL_ADC_Init+0x23a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024d6:	6822      	ldr	r2, [r4, #0]
 80024d8:	6913      	ldr	r3, [r2, #16]
 80024da:	f023 0301 	bic.w	r3, r3, #1
 80024de:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80024e0:	6822      	ldr	r2, [r4, #0]
 80024e2:	6913      	ldr	r3, [r2, #16]
 80024e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80024e8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80024ea:	430b      	orrs	r3, r1
 80024ec:	6113      	str	r3, [r2, #16]
      if (hadc->Instance != ADC3)
 80024ee:	6822      	ldr	r2, [r4, #0]
 80024f0:	4b47      	ldr	r3, [pc, #284]	; (8002610 <HAL_ADC_Init+0x2b0>)
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d002      	beq.n	80024fc <HAL_ADC_Init+0x19c>
        ADC_ConfigureBoostMode(hadc);
 80024f6:	4620      	mov	r0, r4
 80024f8:	f7ff fe98 	bl	800222c <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024fc:	6923      	ldr	r3, [r4, #16]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d06f      	beq.n	80025e2 <HAL_ADC_Init+0x282>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002502:	6822      	ldr	r2, [r4, #0]
 8002504:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002506:	f023 030f 	bic.w	r3, r3, #15
 800250a:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800250c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800250e:	f023 0303 	bic.w	r3, r3, #3
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	6623      	str	r3, [r4, #96]	; 0x60
 8002518:	e08d      	b.n	8002636 <HAL_ADC_Init+0x2d6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800251a:	2500      	movs	r5, #0
 800251c:	e764      	b.n	80023e8 <HAL_ADC_Init+0x88>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800251e:	493c      	ldr	r1, [pc, #240]	; (8002610 <HAL_ADC_Init+0x2b0>)
 8002520:	6889      	ldr	r1, [r1, #8]
 8002522:	f011 0101 	ands.w	r1, r1, #1
 8002526:	d000      	beq.n	800252a <HAL_ADC_Init+0x1ca>
 8002528:	2101      	movs	r1, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800252a:	f081 0101 	eor.w	r1, r1, #1
 800252e:	e78a      	b.n	8002446 <HAL_ADC_Init+0xe6>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002530:	483a      	ldr	r0, [pc, #232]	; (800261c <HAL_ADC_Init+0x2bc>)
 8002532:	e78c      	b.n	800244e <HAL_ADC_Init+0xee>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002534:	7e60      	ldrb	r0, [r4, #25]
                  hadc->Init.Overrun                                                     |
 8002536:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002538:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
                  hadc->Init.DataAlign                                                   |
 800253c:	68e0      	ldr	r0, [r4, #12]
                  hadc->Init.Overrun                                                     |
 800253e:	4303      	orrs	r3, r0
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002540:	68a0      	ldr	r0, [r4, #8]
 8002542:	2808      	cmp	r0, #8
 8002544:	d008      	beq.n	8002558 <HAL_ADC_Init+0x1f8>
 8002546:	280c      	cmp	r0, #12
 8002548:	d005      	beq.n	8002556 <HAL_ADC_Init+0x1f6>
 800254a:	281c      	cmp	r0, #28
 800254c:	d00a      	beq.n	8002564 <HAL_ADC_Init+0x204>
 800254e:	2818      	cmp	r0, #24
 8002550:	d102      	bne.n	8002558 <HAL_ADC_Init+0x1f8>
 8002552:	4602      	mov	r2, r0
 8002554:	e000      	b.n	8002558 <HAL_ADC_Init+0x1f8>
 8002556:	2208      	movs	r2, #8
                  hadc->Init.DataAlign                                                   |
 8002558:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800255a:	f894 3020 	ldrb.w	r3, [r4, #32]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800255e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002562:	e788      	b.n	8002476 <HAL_ADC_Init+0x116>
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002564:	2210      	movs	r2, #16
 8002566:	e7f7      	b.n	8002558 <HAL_ADC_Init+0x1f8>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002568:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800256a:	3b01      	subs	r3, #1
 800256c:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8002570:	e785      	b.n	800247e <HAL_ADC_Init+0x11e>
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002572:	68c8      	ldr	r0, [r1, #12]
 8002574:	4b2a      	ldr	r3, [pc, #168]	; (8002620 <HAL_ADC_Init+0x2c0>)
 8002576:	4003      	ands	r3, r0
 8002578:	431a      	orrs	r2, r3
 800257a:	60ca      	str	r2, [r1, #12]
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800257c:	6822      	ldr	r2, [r4, #0]
 800257e:	6913      	ldr	r3, [r2, #16]
 8002580:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002586:	430b      	orrs	r3, r1
 8002588:	6113      	str	r3, [r2, #16]
 800258a:	e787      	b.n	800249c <HAL_ADC_Init+0x13c>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800258c:	7e22      	ldrb	r2, [r4, #24]
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800258e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002592:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002594:	ea43 3282 	orr.w	r2, r3, r2, lsl #14
 8002598:	e794      	b.n	80024c4 <HAL_ADC_Init+0x164>
        if (hadc->Instance == ADC3)
 800259a:	6821      	ldr	r1, [r4, #0]
        if (hadc->Instance == ADC3)
 800259c:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <HAL_ADC_Init+0x2b0>)
 800259e:	4299      	cmp	r1, r3
 80025a0:	d010      	beq.n	80025c4 <HAL_ADC_Init+0x264>
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80025a2:	690a      	ldr	r2, [r1, #16]
 80025a4:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <HAL_ADC_Init+0x2c4>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80025aa:	1e50      	subs	r0, r2, #1
 80025ac:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80025ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80025b2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80025b4:	4302      	orrs	r2, r0
 80025b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025b8:	4302      	orrs	r2, r0
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	610b      	str	r3, [r1, #16]
 80025c2:	e78d      	b.n	80024e0 <HAL_ADC_Init+0x180>
          MODIFY_REG(hadc->Instance->CFGR2,
 80025c4:	690a      	ldr	r2, [r1, #16]
 80025c6:	4b18      	ldr	r3, [pc, #96]	; (8002628 <HAL_ADC_Init+0x2c8>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80025cc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80025ce:	4302      	orrs	r2, r0
 80025d0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80025d2:	4302      	orrs	r2, r0
 80025d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025d6:	4302      	orrs	r2, r0
 80025d8:	4313      	orrs	r3, r2
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	610b      	str	r3, [r1, #16]
 80025e0:	e77e      	b.n	80024e0 <HAL_ADC_Init+0x180>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025e2:	6821      	ldr	r1, [r4, #0]
 80025e4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80025e6:	f023 030f 	bic.w	r3, r3, #15
 80025ea:	69e2      	ldr	r2, [r4, #28]
 80025ec:	3a01      	subs	r2, #1
 80025ee:	4313      	orrs	r3, r2
 80025f0:	630b      	str	r3, [r1, #48]	; 0x30
 80025f2:	e78b      	b.n	800250c <HAL_ADC_Init+0x1ac>
 80025f4:	5fffffc0 	.word	0x5fffffc0
 80025f8:	6fffffc0 	.word	0x6fffffc0
 80025fc:	24000004 	.word	0x24000004
 8002600:	053e2d63 	.word	0x053e2d63
 8002604:	40022000 	.word	0x40022000
 8002608:	40022100 	.word	0x40022100
 800260c:	40022300 	.word	0x40022300
 8002610:	58026000 	.word	0x58026000
 8002614:	fff0c003 	.word	0xfff0c003
 8002618:	ffffbffc 	.word	0xffffbffc
 800261c:	58026300 	.word	0x58026300
 8002620:	fff04007 	.word	0xfff04007
 8002624:	fc00f81e 	.word	0xfc00f81e
 8002628:	fc00f81f 	.word	0xfc00f81f
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800262e:	f043 0310 	orr.w	r3, r3, #16
 8002632:	6623      	str	r3, [r4, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 8002634:	2501      	movs	r5, #1
}
 8002636:	4628      	mov	r0, r5
 8002638:	b003      	add	sp, #12
 800263a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800263c:	2501      	movs	r5, #1
 800263e:	e7fa      	b.n	8002636 <HAL_ADC_Init+0x2d6>

08002640 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002640:	4770      	bx	lr

08002642 <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002642:	4770      	bx	lr

08002644 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002644:	4770      	bx	lr

08002646 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002646:	4770      	bx	lr

08002648 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002648:	4770      	bx	lr
	...

0800264c <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800264c:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8002650:	2a01      	cmp	r2, #1
 8002652:	f000 80a1 	beq.w	8002798 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
{
 8002656:	b430      	push	{r4, r5}
 8002658:	b09c      	sub	sp, #112	; 0x70
 800265a:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800265c:	2201      	movs	r2, #1
 800265e:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002662:	2200      	movs	r2, #0
 8002664:	9218      	str	r2, [sp, #96]	; 0x60
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002666:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002668:	6800      	ldr	r0, [r0, #0]
 800266a:	4a4c      	ldr	r2, [pc, #304]	; (800279c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800266c:	4290      	cmp	r0, r2
 800266e:	d042      	beq.n	80026f6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002670:	2200      	movs	r2, #0
 8002672:	9200      	str	r2, [sp, #0]

  if (tmphadcSlave.Instance == NULL)
 8002674:	9a00      	ldr	r2, [sp, #0]
 8002676:	2a00      	cmp	r2, #0
 8002678:	d041      	beq.n	80026fe <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800267a:	6892      	ldr	r2, [r2, #8]
 800267c:	f012 0204 	ands.w	r2, r2, #4
 8002680:	d000      	beq.n	8002684 <HAL_ADCEx_MultiModeConfigChannel+0x38>
 8002682:	2201      	movs	r2, #1
 8002684:	6884      	ldr	r4, [r0, #8]
 8002686:	f014 0f04 	tst.w	r4, #4
 800268a:	d176      	bne.n	800277a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 800268c:	2a00      	cmp	r2, #0
 800268e:	d174      	bne.n	800277a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002690:	4c42      	ldr	r4, [pc, #264]	; (800279c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002692:	4a43      	ldr	r2, [pc, #268]	; (80027a0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002694:	4290      	cmp	r0, r2
 8002696:	bf18      	it	ne
 8002698:	42a0      	cmpne	r0, r4
 800269a:	d139      	bne.n	8002710 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 800269c:	f502 7200 	add.w	r2, r2, #512	; 0x200

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026a0:	6808      	ldr	r0, [r1, #0]
 80026a2:	2800      	cmp	r0, #0
 80026a4:	d03f      	beq.n	8002726 <HAL_ADCEx_MultiModeConfigChannel+0xda>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80026a6:	6890      	ldr	r0, [r2, #8]
 80026a8:	f420 4040 	bic.w	r0, r0, #49152	; 0xc000
 80026ac:	684c      	ldr	r4, [r1, #4]
 80026ae:	4320      	orrs	r0, r4
 80026b0:	6090      	str	r0, [r2, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	4d39      	ldr	r5, [pc, #228]	; (800279c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026b6:	4c3a      	ldr	r4, [pc, #232]	; (80027a0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026b8:	42a0      	cmp	r0, r4
 80026ba:	bf18      	it	ne
 80026bc:	42a8      	cmpne	r0, r5
 80026be:	d129      	bne.n	8002714 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026c0:	68a8      	ldr	r0, [r5, #8]
 80026c2:	f010 0001 	ands.w	r0, r0, #1
 80026c6:	d000      	beq.n	80026ca <HAL_ADCEx_MultiModeConfigChannel+0x7e>
 80026c8:	2001      	movs	r0, #1
 80026ca:	4c35      	ldr	r4, [pc, #212]	; (80027a0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026cc:	68a4      	ldr	r4, [r4, #8]
 80026ce:	f014 0401 	ands.w	r4, r4, #1
 80026d2:	d000      	beq.n	80026d6 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 80026d4:	2401      	movs	r4, #1
 80026d6:	4320      	orrs	r0, r4
 80026d8:	bf0c      	ite	eq
 80026da:	2001      	moveq	r0, #1
 80026dc:	2000      	movne	r0, #0
 80026de:	2800      	cmp	r0, #0
 80026e0:	d056      	beq.n	8002790 <HAL_ADCEx_MultiModeConfigChannel+0x144>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80026e2:	6894      	ldr	r4, [r2, #8]
 80026e4:	482f      	ldr	r0, [pc, #188]	; (80027a4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80026e6:	4020      	ands	r0, r4
 80026e8:	680c      	ldr	r4, [r1, #0]
 80026ea:	6889      	ldr	r1, [r1, #8]
 80026ec:	4321      	orrs	r1, r4
 80026ee:	4308      	orrs	r0, r1
 80026f0:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f2:	2000      	movs	r0, #0
 80026f4:	e046      	b.n	8002784 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80026f6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80026fa:	9200      	str	r2, [sp, #0]
 80026fc:	e7ba      	b.n	8002674 <HAL_ADCEx_MultiModeConfigChannel+0x28>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002700:	f042 0220 	orr.w	r2, r2, #32
 8002704:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_UNLOCK(hadc);
 8002706:	2200      	movs	r2, #0
 8002708:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 800270c:	2001      	movs	r0, #1
 800270e:	e03c      	b.n	800278a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002710:	4a25      	ldr	r2, [pc, #148]	; (80027a8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002712:	e7c5      	b.n	80026a0 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 8002714:	4825      	ldr	r0, [pc, #148]	; (80027ac <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 8002716:	6880      	ldr	r0, [r0, #8]
 8002718:	f010 0001 	ands.w	r0, r0, #1
 800271c:	d000      	beq.n	8002720 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 800271e:	2001      	movs	r0, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002720:	f080 0001 	eor.w	r0, r0, #1
 8002724:	e7db      	b.n	80026de <HAL_ADCEx_MultiModeConfigChannel+0x92>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002726:	6891      	ldr	r1, [r2, #8]
 8002728:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 800272c:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800272e:	6819      	ldr	r1, [r3, #0]
 8002730:	4c1a      	ldr	r4, [pc, #104]	; (800279c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002732:	481b      	ldr	r0, [pc, #108]	; (80027a0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002734:	4281      	cmp	r1, r0
 8002736:	bf18      	it	ne
 8002738:	42a1      	cmpne	r1, r4
 800273a:	d115      	bne.n	8002768 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800273c:	68a1      	ldr	r1, [r4, #8]
 800273e:	f011 0101 	ands.w	r1, r1, #1
 8002742:	d000      	beq.n	8002746 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002744:	2101      	movs	r1, #1
 8002746:	4816      	ldr	r0, [pc, #88]	; (80027a0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002748:	6880      	ldr	r0, [r0, #8]
 800274a:	f010 0001 	ands.w	r0, r0, #1
 800274e:	d000      	beq.n	8002752 <HAL_ADCEx_MultiModeConfigChannel+0x106>
 8002750:	2001      	movs	r0, #1
 8002752:	4301      	orrs	r1, r0
 8002754:	bf0c      	ite	eq
 8002756:	2101      	moveq	r1, #1
 8002758:	2100      	movne	r1, #0
 800275a:	b1d9      	cbz	r1, 8002794 <HAL_ADCEx_MultiModeConfigChannel+0x148>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800275c:	6890      	ldr	r0, [r2, #8]
 800275e:	4911      	ldr	r1, [pc, #68]	; (80027a4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002760:	4001      	ands	r1, r0
 8002762:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002764:	2000      	movs	r0, #0
 8002766:	e00d      	b.n	8002784 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002768:	4910      	ldr	r1, [pc, #64]	; (80027ac <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 800276a:	6889      	ldr	r1, [r1, #8]
 800276c:	f011 0101 	ands.w	r1, r1, #1
 8002770:	d000      	beq.n	8002774 <HAL_ADCEx_MultiModeConfigChannel+0x128>
 8002772:	2101      	movs	r1, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002774:	f081 0101 	eor.w	r1, r1, #1
 8002778:	e7ef      	b.n	800275a <HAL_ADCEx_MultiModeConfigChannel+0x10e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800277a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800277c:	f042 0220 	orr.w	r2, r2, #32
 8002780:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002782:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002784:	2200      	movs	r2, #0
 8002786:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
}
 800278a:	b01c      	add	sp, #112	; 0x70
 800278c:	bc30      	pop	{r4, r5}
 800278e:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002790:	2000      	movs	r0, #0
 8002792:	e7f7      	b.n	8002784 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002794:	2000      	movs	r0, #0
 8002796:	e7f5      	b.n	8002784 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  __HAL_LOCK(hadc);
 8002798:	2002      	movs	r0, #2
}
 800279a:	4770      	bx	lr
 800279c:	40022000 	.word	0x40022000
 80027a0:	40022100 	.word	0x40022100
 80027a4:	fffff0e0 	.word	0xfffff0e0
 80027a8:	58026300 	.word	0x58026300
 80027ac:	58026000 	.word	0x58026000

080027b0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b0:	4906      	ldr	r1, [pc, #24]	; (80027cc <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80027b2:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027b8:	041b      	lsls	r3, r3, #16
 80027ba:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027bc:	0200      	lsls	r0, r0, #8
 80027be:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80027c4:	4a02      	ldr	r2, [pc, #8]	; (80027d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80027c6:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80027c8:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80027ca:	4770      	bx	lr
 80027cc:	e000ed00 	.word	0xe000ed00
 80027d0:	05fa0000 	.word	0x05fa0000

080027d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d4:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d6:	4b17      	ldr	r3, [pc, #92]	; (8002834 <HAL_NVIC_SetPriority+0x60>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027de:	f1c3 0c07 	rsb	ip, r3, #7
 80027e2:	f1bc 0f04 	cmp.w	ip, #4
 80027e6:	bf28      	it	cs
 80027e8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ec:	f103 0e04 	add.w	lr, r3, #4
 80027f0:	f1be 0f06 	cmp.w	lr, #6
 80027f4:	d914      	bls.n	8002820 <HAL_NVIC_SetPriority+0x4c>
 80027f6:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80027fc:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002800:	ea21 010c 	bic.w	r1, r1, ip
 8002804:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002806:	fa0e f303 	lsl.w	r3, lr, r3
 800280a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002810:	2800      	cmp	r0, #0
 8002812:	db07      	blt.n	8002824 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002814:	0109      	lsls	r1, r1, #4
 8002816:	b2c9      	uxtb	r1, r1
 8002818:	4b07      	ldr	r3, [pc, #28]	; (8002838 <HAL_NVIC_SetPriority+0x64>)
 800281a:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800281c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002820:	2300      	movs	r3, #0
 8002822:	e7e9      	b.n	80027f8 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002824:	f000 000f 	and.w	r0, r0, #15
 8002828:	0109      	lsls	r1, r1, #4
 800282a:	b2c9      	uxtb	r1, r1
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <HAL_NVIC_SetPriority+0x68>)
 800282e:	5419      	strb	r1, [r3, r0]
 8002830:	e7f4      	b.n	800281c <HAL_NVIC_SetPriority+0x48>
 8002832:	bf00      	nop
 8002834:	e000ed00 	.word	0xe000ed00
 8002838:	e000e400 	.word	0xe000e400
 800283c:	e000ed14 	.word	0xe000ed14

08002840 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002840:	2800      	cmp	r0, #0
 8002842:	db07      	blt.n	8002854 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002844:	f000 021f 	and.w	r2, r0, #31
 8002848:	0940      	lsrs	r0, r0, #5
 800284a:	2301      	movs	r3, #1
 800284c:	4093      	lsls	r3, r2
 800284e:	4a02      	ldr	r2, [pc, #8]	; (8002858 <HAL_NVIC_EnableIRQ+0x18>)
 8002850:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	e000e100 	.word	0xe000e100

0800285c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800285c:	3801      	subs	r0, #1
 800285e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002862:	d20b      	bcs.n	800287c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002864:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002868:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286a:	4a05      	ldr	r2, [pc, #20]	; (8002880 <HAL_SYSTICK_Config+0x24>)
 800286c:	21f0      	movs	r1, #240	; 0xf0
 800286e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002872:	2000      	movs	r0, #0
 8002874:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002876:	2207      	movs	r2, #7
 8002878:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800287a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800287c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800287e:	4770      	bx	lr
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8002884:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <HAL_MPU_Disable+0x18>)
 800288a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800288c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002890:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002892:	2200      	movs	r2, #0
 8002894:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80028a0:	f040 0001 	orr.w	r0, r0, #1
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_MPU_Enable+0x1c>)
 80028a6:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80028aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80028b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80028b6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80028ba:	4770      	bx	lr
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80028c0:	7842      	ldrb	r2, [r0, #1]
 80028c2:	4b16      	ldr	r3, [pc, #88]	; (800291c <HAL_MPU_ConfigRegion+0x5c>)
 80028c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 80028c8:	7803      	ldrb	r3, [r0, #0]
 80028ca:	b1fb      	cbz	r3, 800290c <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80028cc:	6843      	ldr	r3, [r0, #4]
 80028ce:	4a13      	ldr	r2, [pc, #76]	; (800291c <HAL_MPU_ConfigRegion+0x5c>)
 80028d0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028d4:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80028d6:	7ac3      	ldrb	r3, [r0, #11]
 80028d8:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028da:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80028de:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80028e0:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80028e4:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80028e6:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80028ea:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80028ec:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80028f0:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80028f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80028f6:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80028f8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80028fc:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80028fe:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002902:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002904:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002906:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 800290a:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 800290c:	4b03      	ldr	r3, [pc, #12]	; (800291c <HAL_MPU_ConfigRegion+0x5c>)
 800290e:	2200      	movs	r2, #0
 8002910:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 8002914:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002920:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002922:	6d87      	ldr	r7, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002924:	6804      	ldr	r4, [r0, #0]
 8002926:	4e66      	ldr	r6, [pc, #408]	; (8002ac0 <DMA_SetConfig+0x1a0>)
 8002928:	4d66      	ldr	r5, [pc, #408]	; (8002ac4 <DMA_SetConfig+0x1a4>)
 800292a:	42ac      	cmp	r4, r5
 800292c:	bf18      	it	ne
 800292e:	42b4      	cmpne	r4, r6
 8002930:	d042      	beq.n	80029b8 <DMA_SetConfig+0x98>
 8002932:	3518      	adds	r5, #24
 8002934:	42ac      	cmp	r4, r5
 8002936:	d03f      	beq.n	80029b8 <DMA_SetConfig+0x98>
 8002938:	3518      	adds	r5, #24
 800293a:	42ac      	cmp	r4, r5
 800293c:	d03c      	beq.n	80029b8 <DMA_SetConfig+0x98>
 800293e:	3518      	adds	r5, #24
 8002940:	42ac      	cmp	r4, r5
 8002942:	d039      	beq.n	80029b8 <DMA_SetConfig+0x98>
 8002944:	3518      	adds	r5, #24
 8002946:	42ac      	cmp	r4, r5
 8002948:	d036      	beq.n	80029b8 <DMA_SetConfig+0x98>
 800294a:	3518      	adds	r5, #24
 800294c:	42ac      	cmp	r4, r5
 800294e:	d033      	beq.n	80029b8 <DMA_SetConfig+0x98>
 8002950:	3518      	adds	r5, #24
 8002952:	42ac      	cmp	r4, r5
 8002954:	d030      	beq.n	80029b8 <DMA_SetConfig+0x98>
 8002956:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800295a:	42ac      	cmp	r4, r5
 800295c:	d02c      	beq.n	80029b8 <DMA_SetConfig+0x98>
 800295e:	3518      	adds	r5, #24
 8002960:	42ac      	cmp	r4, r5
 8002962:	d029      	beq.n	80029b8 <DMA_SetConfig+0x98>
 8002964:	3518      	adds	r5, #24
 8002966:	42ac      	cmp	r4, r5
 8002968:	d026      	beq.n	80029b8 <DMA_SetConfig+0x98>
 800296a:	3518      	adds	r5, #24
 800296c:	42ac      	cmp	r4, r5
 800296e:	d023      	beq.n	80029b8 <DMA_SetConfig+0x98>
 8002970:	3518      	adds	r5, #24
 8002972:	42ac      	cmp	r4, r5
 8002974:	d020      	beq.n	80029b8 <DMA_SetConfig+0x98>
 8002976:	3518      	adds	r5, #24
 8002978:	42ac      	cmp	r4, r5
 800297a:	d01d      	beq.n	80029b8 <DMA_SetConfig+0x98>
 800297c:	3518      	adds	r5, #24
 800297e:	42ac      	cmp	r4, r5
 8002980:	d01a      	beq.n	80029b8 <DMA_SetConfig+0x98>
 8002982:	3518      	adds	r5, #24
 8002984:	42ac      	cmp	r4, r5
 8002986:	d017      	beq.n	80029b8 <DMA_SetConfig+0x98>
 8002988:	4d4f      	ldr	r5, [pc, #316]	; (8002ac8 <DMA_SetConfig+0x1a8>)
 800298a:	42ac      	cmp	r4, r5
 800298c:	d014      	beq.n	80029b8 <DMA_SetConfig+0x98>
 800298e:	3514      	adds	r5, #20
 8002990:	42ac      	cmp	r4, r5
 8002992:	d011      	beq.n	80029b8 <DMA_SetConfig+0x98>
 8002994:	3514      	adds	r5, #20
 8002996:	42ac      	cmp	r4, r5
 8002998:	d00e      	beq.n	80029b8 <DMA_SetConfig+0x98>
 800299a:	3514      	adds	r5, #20
 800299c:	42ac      	cmp	r4, r5
 800299e:	d00b      	beq.n	80029b8 <DMA_SetConfig+0x98>
 80029a0:	3514      	adds	r5, #20
 80029a2:	42ac      	cmp	r4, r5
 80029a4:	d008      	beq.n	80029b8 <DMA_SetConfig+0x98>
 80029a6:	3514      	adds	r5, #20
 80029a8:	42ac      	cmp	r4, r5
 80029aa:	d005      	beq.n	80029b8 <DMA_SetConfig+0x98>
 80029ac:	3514      	adds	r5, #20
 80029ae:	42ac      	cmp	r4, r5
 80029b0:	d002      	beq.n	80029b8 <DMA_SetConfig+0x98>
 80029b2:	3514      	adds	r5, #20
 80029b4:	42ac      	cmp	r4, r5
 80029b6:	d107      	bne.n	80029c8 <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029b8:	6e44      	ldr	r4, [r0, #100]	; 0x64
 80029ba:	6e85      	ldr	r5, [r0, #104]	; 0x68
 80029bc:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80029be:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 80029c0:	b114      	cbz	r4, 80029c8 <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029c2:	6f04      	ldr	r4, [r0, #112]	; 0x70
 80029c4:	6f45      	ldr	r5, [r0, #116]	; 0x74
 80029c6:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029c8:	6804      	ldr	r4, [r0, #0]
 80029ca:	4e3d      	ldr	r6, [pc, #244]	; (8002ac0 <DMA_SetConfig+0x1a0>)
 80029cc:	4d3d      	ldr	r5, [pc, #244]	; (8002ac4 <DMA_SetConfig+0x1a4>)
 80029ce:	42ac      	cmp	r4, r5
 80029d0:	bf18      	it	ne
 80029d2:	42b4      	cmpne	r4, r6
 80029d4:	d052      	beq.n	8002a7c <DMA_SetConfig+0x15c>
 80029d6:	3518      	adds	r5, #24
 80029d8:	42ac      	cmp	r4, r5
 80029da:	d04f      	beq.n	8002a7c <DMA_SetConfig+0x15c>
 80029dc:	3518      	adds	r5, #24
 80029de:	42ac      	cmp	r4, r5
 80029e0:	d04c      	beq.n	8002a7c <DMA_SetConfig+0x15c>
 80029e2:	3518      	adds	r5, #24
 80029e4:	42ac      	cmp	r4, r5
 80029e6:	d049      	beq.n	8002a7c <DMA_SetConfig+0x15c>
 80029e8:	3518      	adds	r5, #24
 80029ea:	42ac      	cmp	r4, r5
 80029ec:	d046      	beq.n	8002a7c <DMA_SetConfig+0x15c>
 80029ee:	3518      	adds	r5, #24
 80029f0:	42ac      	cmp	r4, r5
 80029f2:	d043      	beq.n	8002a7c <DMA_SetConfig+0x15c>
 80029f4:	3518      	adds	r5, #24
 80029f6:	42ac      	cmp	r4, r5
 80029f8:	d040      	beq.n	8002a7c <DMA_SetConfig+0x15c>
 80029fa:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80029fe:	42ac      	cmp	r4, r5
 8002a00:	d03c      	beq.n	8002a7c <DMA_SetConfig+0x15c>
 8002a02:	3518      	adds	r5, #24
 8002a04:	42ac      	cmp	r4, r5
 8002a06:	d039      	beq.n	8002a7c <DMA_SetConfig+0x15c>
 8002a08:	3518      	adds	r5, #24
 8002a0a:	42ac      	cmp	r4, r5
 8002a0c:	d036      	beq.n	8002a7c <DMA_SetConfig+0x15c>
 8002a0e:	3518      	adds	r5, #24
 8002a10:	42ac      	cmp	r4, r5
 8002a12:	d033      	beq.n	8002a7c <DMA_SetConfig+0x15c>
 8002a14:	3518      	adds	r5, #24
 8002a16:	42ac      	cmp	r4, r5
 8002a18:	d030      	beq.n	8002a7c <DMA_SetConfig+0x15c>
 8002a1a:	3518      	adds	r5, #24
 8002a1c:	42ac      	cmp	r4, r5
 8002a1e:	d02d      	beq.n	8002a7c <DMA_SetConfig+0x15c>
 8002a20:	3518      	adds	r5, #24
 8002a22:	42ac      	cmp	r4, r5
 8002a24:	d02a      	beq.n	8002a7c <DMA_SetConfig+0x15c>
 8002a26:	3518      	adds	r5, #24
 8002a28:	42ac      	cmp	r4, r5
 8002a2a:	d027      	beq.n	8002a7c <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a2c:	4e26      	ldr	r6, [pc, #152]	; (8002ac8 <DMA_SetConfig+0x1a8>)
 8002a2e:	4d27      	ldr	r5, [pc, #156]	; (8002acc <DMA_SetConfig+0x1ac>)
 8002a30:	42ac      	cmp	r4, r5
 8002a32:	bf18      	it	ne
 8002a34:	42b4      	cmpne	r4, r6
 8002a36:	d011      	beq.n	8002a5c <DMA_SetConfig+0x13c>
 8002a38:	4d25      	ldr	r5, [pc, #148]	; (8002ad0 <DMA_SetConfig+0x1b0>)
 8002a3a:	42ac      	cmp	r4, r5
 8002a3c:	d00e      	beq.n	8002a5c <DMA_SetConfig+0x13c>
 8002a3e:	3514      	adds	r5, #20
 8002a40:	42ac      	cmp	r4, r5
 8002a42:	d00b      	beq.n	8002a5c <DMA_SetConfig+0x13c>
 8002a44:	3514      	adds	r5, #20
 8002a46:	42ac      	cmp	r4, r5
 8002a48:	d008      	beq.n	8002a5c <DMA_SetConfig+0x13c>
 8002a4a:	3514      	adds	r5, #20
 8002a4c:	42ac      	cmp	r4, r5
 8002a4e:	d005      	beq.n	8002a5c <DMA_SetConfig+0x13c>
 8002a50:	3514      	adds	r5, #20
 8002a52:	42ac      	cmp	r4, r5
 8002a54:	d002      	beq.n	8002a5c <DMA_SetConfig+0x13c>
 8002a56:	3514      	adds	r5, #20
 8002a58:	42ac      	cmp	r4, r5
 8002a5a:	d124      	bne.n	8002aa6 <DMA_SetConfig+0x186>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002a5c:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8002a5e:	f004 051f 	and.w	r5, r4, #31
 8002a62:	2401      	movs	r4, #1
 8002a64:	40ac      	lsls	r4, r5
 8002a66:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002a68:	6804      	ldr	r4, [r0, #0]
 8002a6a:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a6c:	6883      	ldr	r3, [r0, #8]
 8002a6e:	2b40      	cmp	r3, #64	; 0x40
 8002a70:	d020      	beq.n	8002ab4 <DMA_SetConfig+0x194>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002a72:	6803      	ldr	r3, [r0, #0]
 8002a74:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002a76:	6803      	ldr	r3, [r0, #0]
 8002a78:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002a7a:	e014      	b.n	8002aa6 <DMA_SetConfig+0x186>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a7c:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8002a7e:	f004 0c1f 	and.w	ip, r4, #31
 8002a82:	243f      	movs	r4, #63	; 0x3f
 8002a84:	fa04 f40c 	lsl.w	r4, r4, ip
 8002a88:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a8a:	6805      	ldr	r5, [r0, #0]
 8002a8c:	682c      	ldr	r4, [r5, #0]
 8002a8e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8002a92:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002a94:	6804      	ldr	r4, [r0, #0]
 8002a96:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a98:	6883      	ldr	r3, [r0, #8]
 8002a9a:	2b40      	cmp	r3, #64	; 0x40
 8002a9c:	d005      	beq.n	8002aaa <DMA_SetConfig+0x18a>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002a9e:	6803      	ldr	r3, [r0, #0]
 8002aa0:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002aa2:	6803      	ldr	r3, [r0, #0]
 8002aa4:	60da      	str	r2, [r3, #12]
}
 8002aa6:	bcf0      	pop	{r4, r5, r6, r7}
 8002aa8:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002aaa:	6803      	ldr	r3, [r0, #0]
 8002aac:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002aae:	6803      	ldr	r3, [r0, #0]
 8002ab0:	60d9      	str	r1, [r3, #12]
 8002ab2:	e7f8      	b.n	8002aa6 <DMA_SetConfig+0x186>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002ab4:	6803      	ldr	r3, [r0, #0]
 8002ab6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002ab8:	6803      	ldr	r3, [r0, #0]
 8002aba:	60d9      	str	r1, [r3, #12]
 8002abc:	e7f3      	b.n	8002aa6 <DMA_SetConfig+0x186>
 8002abe:	bf00      	nop
 8002ac0:	40020010 	.word	0x40020010
 8002ac4:	40020028 	.word	0x40020028
 8002ac8:	58025408 	.word	0x58025408
 8002acc:	5802541c 	.word	0x5802541c
 8002ad0:	58025430 	.word	0x58025430

08002ad4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ad4:	6803      	ldr	r3, [r0, #0]
 8002ad6:	4927      	ldr	r1, [pc, #156]	; (8002b74 <DMA_CalcBaseAndBitshift+0xa0>)
 8002ad8:	4a27      	ldr	r2, [pc, #156]	; (8002b78 <DMA_CalcBaseAndBitshift+0xa4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	bf18      	it	ne
 8002ade:	428b      	cmpne	r3, r1
 8002ae0:	d02f      	beq.n	8002b42 <DMA_CalcBaseAndBitshift+0x6e>
 8002ae2:	3218      	adds	r2, #24
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d02c      	beq.n	8002b42 <DMA_CalcBaseAndBitshift+0x6e>
 8002ae8:	3218      	adds	r2, #24
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d029      	beq.n	8002b42 <DMA_CalcBaseAndBitshift+0x6e>
 8002aee:	3218      	adds	r2, #24
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d026      	beq.n	8002b42 <DMA_CalcBaseAndBitshift+0x6e>
 8002af4:	3218      	adds	r2, #24
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d023      	beq.n	8002b42 <DMA_CalcBaseAndBitshift+0x6e>
 8002afa:	3218      	adds	r2, #24
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d020      	beq.n	8002b42 <DMA_CalcBaseAndBitshift+0x6e>
 8002b00:	3218      	adds	r2, #24
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d01d      	beq.n	8002b42 <DMA_CalcBaseAndBitshift+0x6e>
 8002b06:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d019      	beq.n	8002b42 <DMA_CalcBaseAndBitshift+0x6e>
 8002b0e:	3218      	adds	r2, #24
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d016      	beq.n	8002b42 <DMA_CalcBaseAndBitshift+0x6e>
 8002b14:	3218      	adds	r2, #24
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d013      	beq.n	8002b42 <DMA_CalcBaseAndBitshift+0x6e>
 8002b1a:	3218      	adds	r2, #24
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d010      	beq.n	8002b42 <DMA_CalcBaseAndBitshift+0x6e>
 8002b20:	3218      	adds	r2, #24
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00d      	beq.n	8002b42 <DMA_CalcBaseAndBitshift+0x6e>
 8002b26:	3218      	adds	r2, #24
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d00a      	beq.n	8002b42 <DMA_CalcBaseAndBitshift+0x6e>
 8002b2c:	3218      	adds	r2, #24
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d007      	beq.n	8002b42 <DMA_CalcBaseAndBitshift+0x6e>
 8002b32:	3218      	adds	r2, #24
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d004      	beq.n	8002b42 <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002b38:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b3c:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 8002b3e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002b40:	4770      	bx	lr
{
 8002b42:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002b44:	b2d9      	uxtb	r1, r3
 8002b46:	3910      	subs	r1, #16
 8002b48:	4a0c      	ldr	r2, [pc, #48]	; (8002b7c <DMA_CalcBaseAndBitshift+0xa8>)
 8002b4a:	fba2 4201 	umull	r4, r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002b4e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8002b52:	4c0b      	ldr	r4, [pc, #44]	; (8002b80 <DMA_CalcBaseAndBitshift+0xac>)
 8002b54:	5ca2      	ldrb	r2, [r4, r2]
 8002b56:	65c2      	str	r2, [r0, #92]	; 0x5c
    if (stream_number > 3U)
 8002b58:	295f      	cmp	r1, #95	; 0x5f
 8002b5a:	d907      	bls.n	8002b6c <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002b5c:	4a09      	ldr	r2, [pc, #36]	; (8002b84 <DMA_CalcBaseAndBitshift+0xb0>)
 8002b5e:	401a      	ands	r2, r3
 8002b60:	3204      	adds	r2, #4
 8002b62:	6582      	str	r2, [r0, #88]	; 0x58
}
 8002b64:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002b66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b6a:	4770      	bx	lr
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002b6c:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <DMA_CalcBaseAndBitshift+0xb0>)
 8002b6e:	401a      	ands	r2, r3
 8002b70:	6582      	str	r2, [r0, #88]	; 0x58
 8002b72:	e7f7      	b.n	8002b64 <DMA_CalcBaseAndBitshift+0x90>
 8002b74:	40020010 	.word	0x40020010
 8002b78:	40020028 	.word	0x40020028
 8002b7c:	aaaaaaab 	.word	0xaaaaaaab
 8002b80:	08008b78 	.word	0x08008b78
 8002b84:	fffffc00 	.word	0xfffffc00

08002b88 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b88:	6983      	ldr	r3, [r0, #24]
 8002b8a:	b99b      	cbnz	r3, 8002bb4 <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 8002b8c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d00a      	beq.n	8002ba8 <DMA_CheckFifoParam+0x20>
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d002      	beq.n	8002b9c <DMA_CheckFifoParam+0x14>
 8002b96:	b10b      	cbz	r3, 8002b9c <DMA_CheckFifoParam+0x14>
 8002b98:	2000      	movs	r0, #0
 8002b9a:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b9c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b9e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002ba2:	d12a      	bne.n	8002bfa <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ba8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002baa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bae:	d026      	beq.n	8002bfe <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb8:	d00a      	beq.n	8002bd0 <DMA_CheckFifoParam+0x48>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002bba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d926      	bls.n	8002c0e <DMA_CheckFifoParam+0x86>
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d126      	bne.n	8002c12 <DMA_CheckFifoParam+0x8a>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bc4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002bc6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002bca:	d124      	bne.n	8002c16 <DMA_CheckFifoParam+0x8e>
  HAL_StatusTypeDef status = HAL_OK;
 8002bcc:	2000      	movs	r0, #0
 8002bce:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8002bd0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d803      	bhi.n	8002bde <DMA_CheckFifoParam+0x56>
 8002bd6:	e8df f003 	tbb	[pc, r3]
 8002bda:	0414      	.short	0x0414
 8002bdc:	0a14      	.short	0x0a14
 8002bde:	2000      	movs	r0, #0
 8002be0:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002be2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002be4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002be8:	d10d      	bne.n	8002c06 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8002bea:	2000      	movs	r0, #0
 8002bec:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002bf0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bf4:	d009      	beq.n	8002c0a <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	4770      	bx	lr
          status = HAL_ERROR;
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	4770      	bx	lr
          status = HAL_ERROR;
 8002bfe:	2001      	movs	r0, #1
 8002c00:	4770      	bx	lr
        status = HAL_ERROR;
 8002c02:	2001      	movs	r0, #1
 8002c04:	4770      	bx	lr
          status = HAL_ERROR;
 8002c06:	2001      	movs	r0, #1
 8002c08:	4770      	bx	lr
          status = HAL_ERROR;
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	4770      	bx	lr
        status = HAL_ERROR;
 8002c0e:	2001      	movs	r0, #1
 8002c10:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8002c12:	2000      	movs	r0, #0
 8002c14:	4770      	bx	lr
        {
          status = HAL_ERROR;
 8002c16:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 8002c18:	4770      	bx	lr
	...

08002c1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002c1c:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c1e:	4922      	ldr	r1, [pc, #136]	; (8002ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002c20:	4a22      	ldr	r2, [pc, #136]	; (8002cac <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	bf18      	it	ne
 8002c26:	428b      	cmpne	r3, r1
 8002c28:	d028      	beq.n	8002c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8002c2a:	3214      	adds	r2, #20
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d025      	beq.n	8002c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8002c30:	3214      	adds	r2, #20
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d022      	beq.n	8002c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8002c36:	3214      	adds	r2, #20
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d01f      	beq.n	8002c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8002c3c:	3214      	adds	r2, #20
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d01c      	beq.n	8002c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8002c42:	3214      	adds	r2, #20
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d019      	beq.n	8002c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8002c48:	3214      	adds	r2, #20
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d016      	beq.n	8002c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	3a10      	subs	r2, #16
 8002c52:	4917      	ldr	r1, [pc, #92]	; (8002cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 8002c54:	fba1 1202 	umull	r1, r2, r1, r2
 8002c58:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002c5a:	4916      	ldr	r1, [pc, #88]	; (8002cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 8002c5c:	4419      	add	r1, r3
 8002c5e:	29a8      	cmp	r1, #168	; 0xa8
 8002c60:	d91f      	bls.n	8002ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x86>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c6a:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8002c6c:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002c6e:	f002 021f 	and.w	r2, r2, #31
 8002c72:	2301      	movs	r3, #1
 8002c74:	fa03 f202 	lsl.w	r2, r3, r2
 8002c78:	6682      	str	r2, [r0, #104]	; 0x68
  }
}
 8002c7a:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	3b08      	subs	r3, #8
 8002c80:	4a0f      	ldr	r2, [pc, #60]	; (8002cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002c86:	4a0f      	ldr	r2, [pc, #60]	; (8002cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8002c88:	eb02 1213 	add.w	r2, r2, r3, lsr #4
 8002c8c:	0092      	lsls	r2, r2, #2
 8002c8e:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002c90:	4a0d      	ldr	r2, [pc, #52]	; (8002cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8002c92:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002c94:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8002c98:	2201      	movs	r2, #1
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	6683      	str	r3, [r0, #104]	; 0x68
 8002ca0:	4770      	bx	lr
      stream_number += 8U;
 8002ca2:	3208      	adds	r2, #8
 8002ca4:	e7dd      	b.n	8002c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 8002ca6:	bf00      	nop
 8002ca8:	58025408 	.word	0x58025408
 8002cac:	5802541c 	.word	0x5802541c
 8002cb0:	aaaaaaab 	.word	0xaaaaaaab
 8002cb4:	bffdfbf0 	.word	0xbffdfbf0
 8002cb8:	10008200 	.word	0x10008200
 8002cbc:	40020880 	.word	0x40020880
 8002cc0:	cccccccd 	.word	0xcccccccd
 8002cc4:	16009600 	.word	0x16009600
 8002cc8:	58025880 	.word	0x58025880

08002ccc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ccc:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002cce:	1e4a      	subs	r2, r1, #1
 8002cd0:	2a07      	cmp	r2, #7
 8002cd2:	d82c      	bhi.n	8002d2e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x62>
{
 8002cd4:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002cd6:	6803      	ldr	r3, [r0, #0]
 8002cd8:	4d15      	ldr	r5, [pc, #84]	; (8002d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 8002cda:	4c16      	ldr	r4, [pc, #88]	; (8002d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8002cdc:	42a3      	cmp	r3, r4
 8002cde:	bf18      	it	ne
 8002ce0:	42ab      	cmpne	r3, r5
 8002ce2:	d018      	beq.n	8002d16 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8002ce4:	3414      	adds	r4, #20
 8002ce6:	42a3      	cmp	r3, r4
 8002ce8:	d015      	beq.n	8002d16 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8002cea:	3414      	adds	r4, #20
 8002cec:	42a3      	cmp	r3, r4
 8002cee:	d012      	beq.n	8002d16 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8002cf0:	3414      	adds	r4, #20
 8002cf2:	42a3      	cmp	r3, r4
 8002cf4:	d00f      	beq.n	8002d16 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8002cf6:	3414      	adds	r4, #20
 8002cf8:	42a3      	cmp	r3, r4
 8002cfa:	d00c      	beq.n	8002d16 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8002cfc:	3414      	adds	r4, #20
 8002cfe:	42a3      	cmp	r3, r4
 8002d00:	d009      	beq.n	8002d16 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8002d02:	3414      	adds	r4, #20
 8002d04:	42a3      	cmp	r3, r4
 8002d06:	d006      	beq.n	8002d16 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8002d0a:	440b      	add	r3, r1
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d10:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 8002d12:	6703      	str	r3, [r0, #112]	; 0x70
 8002d14:	e005      	b.n	8002d22 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 8002d18:	440b      	add	r3, r1
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002d1e:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 8002d20:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002d22:	2301      	movs	r3, #1
 8002d24:	fa03 f202 	lsl.w	r2, r3, r2
 8002d28:	6742      	str	r2, [r0, #116]	; 0x74
  }
}
 8002d2a:	bc30      	pop	{r4, r5}
 8002d2c:	4770      	bx	lr
 8002d2e:	4770      	bx	lr
 8002d30:	58025408 	.word	0x58025408
 8002d34:	5802541c 	.word	0x5802541c
 8002d38:	1000823f 	.word	0x1000823f
 8002d3c:	40020940 	.word	0x40020940
 8002d40:	1600963f 	.word	0x1600963f
 8002d44:	58025940 	.word	0x58025940

08002d48 <HAL_DMA_Init>:
{
 8002d48:	b570      	push	{r4, r5, r6, lr}
 8002d4a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002d4c:	f7fe fc20 	bl	8001590 <HAL_GetTick>
  if(hdma == NULL)
 8002d50:	2c00      	cmp	r4, #0
 8002d52:	f000 81b3 	beq.w	80030bc <HAL_DMA_Init+0x374>
 8002d56:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	4953      	ldr	r1, [pc, #332]	; (8002ea8 <HAL_DMA_Init+0x160>)
 8002d5c:	4a53      	ldr	r2, [pc, #332]	; (8002eac <HAL_DMA_Init+0x164>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	bf18      	it	ne
 8002d62:	428b      	cmpne	r3, r1
 8002d64:	bf0c      	ite	eq
 8002d66:	2201      	moveq	r2, #1
 8002d68:	2200      	movne	r2, #0
 8002d6a:	d050      	beq.n	8002e0e <HAL_DMA_Init+0xc6>
 8002d6c:	3130      	adds	r1, #48	; 0x30
 8002d6e:	428b      	cmp	r3, r1
 8002d70:	d04d      	beq.n	8002e0e <HAL_DMA_Init+0xc6>
 8002d72:	3118      	adds	r1, #24
 8002d74:	428b      	cmp	r3, r1
 8002d76:	d04a      	beq.n	8002e0e <HAL_DMA_Init+0xc6>
 8002d78:	3118      	adds	r1, #24
 8002d7a:	428b      	cmp	r3, r1
 8002d7c:	d047      	beq.n	8002e0e <HAL_DMA_Init+0xc6>
 8002d7e:	3118      	adds	r1, #24
 8002d80:	428b      	cmp	r3, r1
 8002d82:	d044      	beq.n	8002e0e <HAL_DMA_Init+0xc6>
 8002d84:	3118      	adds	r1, #24
 8002d86:	428b      	cmp	r3, r1
 8002d88:	d041      	beq.n	8002e0e <HAL_DMA_Init+0xc6>
 8002d8a:	3118      	adds	r1, #24
 8002d8c:	428b      	cmp	r3, r1
 8002d8e:	d03e      	beq.n	8002e0e <HAL_DMA_Init+0xc6>
 8002d90:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002d94:	428b      	cmp	r3, r1
 8002d96:	d03a      	beq.n	8002e0e <HAL_DMA_Init+0xc6>
 8002d98:	3118      	adds	r1, #24
 8002d9a:	428b      	cmp	r3, r1
 8002d9c:	d037      	beq.n	8002e0e <HAL_DMA_Init+0xc6>
 8002d9e:	3118      	adds	r1, #24
 8002da0:	428b      	cmp	r3, r1
 8002da2:	d034      	beq.n	8002e0e <HAL_DMA_Init+0xc6>
 8002da4:	3118      	adds	r1, #24
 8002da6:	428b      	cmp	r3, r1
 8002da8:	d031      	beq.n	8002e0e <HAL_DMA_Init+0xc6>
 8002daa:	3118      	adds	r1, #24
 8002dac:	428b      	cmp	r3, r1
 8002dae:	d02e      	beq.n	8002e0e <HAL_DMA_Init+0xc6>
 8002db0:	3118      	adds	r1, #24
 8002db2:	428b      	cmp	r3, r1
 8002db4:	d02b      	beq.n	8002e0e <HAL_DMA_Init+0xc6>
 8002db6:	3118      	adds	r1, #24
 8002db8:	428b      	cmp	r3, r1
 8002dba:	d028      	beq.n	8002e0e <HAL_DMA_Init+0xc6>
 8002dbc:	3118      	adds	r1, #24
 8002dbe:	428b      	cmp	r3, r1
 8002dc0:	d025      	beq.n	8002e0e <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002dc2:	493b      	ldr	r1, [pc, #236]	; (8002eb0 <HAL_DMA_Init+0x168>)
 8002dc4:	4a3b      	ldr	r2, [pc, #236]	; (8002eb4 <HAL_DMA_Init+0x16c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	bf18      	it	ne
 8002dca:	428b      	cmpne	r3, r1
 8002dcc:	f000 812e 	beq.w	800302c <HAL_DMA_Init+0x2e4>
 8002dd0:	4a39      	ldr	r2, [pc, #228]	; (8002eb8 <HAL_DMA_Init+0x170>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	f000 812a 	beq.w	800302c <HAL_DMA_Init+0x2e4>
 8002dd8:	3214      	adds	r2, #20
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	f000 8126 	beq.w	800302c <HAL_DMA_Init+0x2e4>
 8002de0:	3214      	adds	r2, #20
 8002de2:	4293      	cmp	r3, r2
 8002de4:	f000 8122 	beq.w	800302c <HAL_DMA_Init+0x2e4>
 8002de8:	3214      	adds	r2, #20
 8002dea:	4293      	cmp	r3, r2
 8002dec:	f000 811e 	beq.w	800302c <HAL_DMA_Init+0x2e4>
 8002df0:	3214      	adds	r2, #20
 8002df2:	4293      	cmp	r3, r2
 8002df4:	f000 811a 	beq.w	800302c <HAL_DMA_Init+0x2e4>
 8002df8:	3214      	adds	r2, #20
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	f000 8116 	beq.w	800302c <HAL_DMA_Init+0x2e4>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e00:	2340      	movs	r3, #64	; 0x40
 8002e02:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002e04:	2303      	movs	r3, #3
 8002e06:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	e04a      	b.n	8002ea4 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e0e:	2102      	movs	r1, #2
 8002e10:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002e14:	2100      	movs	r1, #0
 8002e16:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8002e1a:	bb7a      	cbnz	r2, 8002e7c <HAL_DMA_Init+0x134>
 8002e1c:	4a27      	ldr	r2, [pc, #156]	; (8002ebc <HAL_DMA_Init+0x174>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d02c      	beq.n	8002e7c <HAL_DMA_Init+0x134>
 8002e22:	3218      	adds	r2, #24
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d029      	beq.n	8002e7c <HAL_DMA_Init+0x134>
 8002e28:	3218      	adds	r2, #24
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d026      	beq.n	8002e7c <HAL_DMA_Init+0x134>
 8002e2e:	3218      	adds	r2, #24
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d023      	beq.n	8002e7c <HAL_DMA_Init+0x134>
 8002e34:	3218      	adds	r2, #24
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d020      	beq.n	8002e7c <HAL_DMA_Init+0x134>
 8002e3a:	3218      	adds	r2, #24
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d01d      	beq.n	8002e7c <HAL_DMA_Init+0x134>
 8002e40:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d019      	beq.n	8002e7c <HAL_DMA_Init+0x134>
 8002e48:	3218      	adds	r2, #24
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d016      	beq.n	8002e7c <HAL_DMA_Init+0x134>
 8002e4e:	3218      	adds	r2, #24
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d013      	beq.n	8002e7c <HAL_DMA_Init+0x134>
 8002e54:	3218      	adds	r2, #24
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d010      	beq.n	8002e7c <HAL_DMA_Init+0x134>
 8002e5a:	3218      	adds	r2, #24
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d00d      	beq.n	8002e7c <HAL_DMA_Init+0x134>
 8002e60:	3218      	adds	r2, #24
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00a      	beq.n	8002e7c <HAL_DMA_Init+0x134>
 8002e66:	3218      	adds	r2, #24
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d007      	beq.n	8002e7c <HAL_DMA_Init+0x134>
 8002e6c:	3218      	adds	r2, #24
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d004      	beq.n	8002e7c <HAL_DMA_Init+0x134>
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	f022 0201 	bic.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	e003      	b.n	8002e84 <HAL_DMA_Init+0x13c>
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e84:	6823      	ldr	r3, [r4, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	f012 0f01 	tst.w	r2, #1
 8002e8c:	d018      	beq.n	8002ec0 <HAL_DMA_Init+0x178>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e8e:	f7fe fb7f 	bl	8001590 <HAL_GetTick>
 8002e92:	1b43      	subs	r3, r0, r5
 8002e94:	2b05      	cmp	r3, #5
 8002e96:	d9f5      	bls.n	8002e84 <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e98:	2320      	movs	r3, #32
 8002e9a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8002ea2:	2001      	movs	r0, #1
}
 8002ea4:	bd70      	pop	{r4, r5, r6, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40020010 	.word	0x40020010
 8002eac:	40020028 	.word	0x40020028
 8002eb0:	58025408 	.word	0x58025408
 8002eb4:	5802541c 	.word	0x5802541c
 8002eb8:	58025430 	.word	0x58025430
 8002ebc:	40020040 	.word	0x40020040
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002ec0:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ec2:	487f      	ldr	r0, [pc, #508]	; (80030c0 <HAL_DMA_Init+0x378>)
 8002ec4:	4010      	ands	r0, r2
    registerValue |=  hdma->Init.Direction           |
 8002ec6:	68a1      	ldr	r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec8:	68e2      	ldr	r2, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 8002eca:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ecc:	6921      	ldr	r1, [r4, #16]
 8002ece:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed0:	6961      	ldr	r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed2:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed4:	69a1      	ldr	r1, [r4, #24]
 8002ed6:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ed8:	69e1      	ldr	r1, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eda:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8002edc:	6a21      	ldr	r1, [r4, #32]
 8002ede:	430a      	orrs	r2, r1
    registerValue |=  hdma->Init.Direction           |
 8002ee0:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ee2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002ee4:	2904      	cmp	r1, #4
 8002ee6:	f000 8096 	beq.w	8003016 <HAL_DMA_Init+0x2ce>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002eea:	6861      	ldr	r1, [r4, #4]
 8002eec:	f1a1 0529 	sub.w	r5, r1, #41	; 0x29
 8002ef0:	f1a1 003f 	sub.w	r0, r1, #63	; 0x3f
 8002ef4:	2803      	cmp	r0, #3
 8002ef6:	bf88      	it	hi
 8002ef8:	2d05      	cmphi	r5, #5
 8002efa:	d90a      	bls.n	8002f12 <HAL_DMA_Init+0x1ca>
 8002efc:	f1a1 0047 	sub.w	r0, r1, #71	; 0x47
 8002f00:	2801      	cmp	r0, #1
 8002f02:	d906      	bls.n	8002f12 <HAL_DMA_Init+0x1ca>
 8002f04:	f1a1 004f 	sub.w	r0, r1, #79	; 0x4f
 8002f08:	2803      	cmp	r0, #3
 8002f0a:	d902      	bls.n	8002f12 <HAL_DMA_Init+0x1ca>
 8002f0c:	3974      	subs	r1, #116	; 0x74
 8002f0e:	2903      	cmp	r1, #3
 8002f10:	d801      	bhi.n	8002f16 <HAL_DMA_Init+0x1ce>
        registerValue |= DMA_SxCR_TRBUFF;
 8002f12:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f16:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002f18:	6826      	ldr	r6, [r4, #0]
 8002f1a:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f1c:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 8002f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f22:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d108      	bne.n	8002f3a <HAL_DMA_Init+0x1f2>
      registerValue |= hdma->Init.FIFOThreshold;
 8002f28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f2a:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f2e:	b123      	cbz	r3, 8002f3a <HAL_DMA_Init+0x1f2>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f30:	4620      	mov	r0, r4
 8002f32:	f7ff fe29 	bl	8002b88 <DMA_CheckFifoParam>
 8002f36:	2800      	cmp	r0, #0
 8002f38:	d172      	bne.n	8003020 <HAL_DMA_Init+0x2d8>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002f3a:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	f7ff fdc9 	bl	8002ad4 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f42:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f44:	f003 021f 	and.w	r2, r3, #31
 8002f48:	233f      	movs	r3, #63	; 0x3f
 8002f4a:	4093      	lsls	r3, r2
 8002f4c:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	495c      	ldr	r1, [pc, #368]	; (80030c4 <HAL_DMA_Init+0x37c>)
 8002f52:	4a5d      	ldr	r2, [pc, #372]	; (80030c8 <HAL_DMA_Init+0x380>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	bf18      	it	ne
 8002f58:	428b      	cmpne	r3, r1
 8002f5a:	d042      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002f5c:	3218      	adds	r2, #24
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d03f      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002f62:	3218      	adds	r2, #24
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d03c      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002f68:	3218      	adds	r2, #24
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d039      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002f6e:	3218      	adds	r2, #24
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d036      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002f74:	3218      	adds	r2, #24
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d033      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002f7a:	3218      	adds	r2, #24
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d030      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002f80:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d02c      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002f88:	3218      	adds	r2, #24
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d029      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002f8e:	3218      	adds	r2, #24
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d026      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002f94:	3218      	adds	r2, #24
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d023      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002f9a:	3218      	adds	r2, #24
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d020      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002fa0:	3218      	adds	r2, #24
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d01d      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002fa6:	3218      	adds	r2, #24
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d01a      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002fac:	3218      	adds	r2, #24
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d017      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002fb2:	4a46      	ldr	r2, [pc, #280]	; (80030cc <HAL_DMA_Init+0x384>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d014      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002fb8:	3214      	adds	r2, #20
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d011      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002fbe:	3214      	adds	r2, #20
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00e      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002fc4:	3214      	adds	r2, #20
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00b      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002fca:	3214      	adds	r2, #20
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d008      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002fd0:	3214      	adds	r2, #20
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d005      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002fd6:	3214      	adds	r2, #20
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d002      	beq.n	8002fe2 <HAL_DMA_Init+0x29a>
 8002fdc:	3214      	adds	r2, #20
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d113      	bne.n	800300a <HAL_DMA_Init+0x2c2>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	f7ff fe1a 	bl	8002c1c <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fe8:	68a3      	ldr	r3, [r4, #8]
 8002fea:	2b80      	cmp	r3, #128	; 0x80
 8002fec:	d059      	beq.n	80030a2 <HAL_DMA_Init+0x35a>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002fee:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002ff0:	7922      	ldrb	r2, [r4, #4]
 8002ff2:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ff6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8002ff8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002ffa:	6863      	ldr	r3, [r4, #4]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	2b07      	cmp	r3, #7
 8003000:	d952      	bls.n	80030a8 <HAL_DMA_Init+0x360>
      hdma->DMAmuxRequestGen = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003006:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003008:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800300a:	2000      	movs	r0, #0
 800300c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800300e:	2301      	movs	r3, #1
 8003010:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003014:	e746      	b.n	8002ea4 <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003016:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003018:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800301a:	4301      	orrs	r1, r0
 800301c:	430a      	orrs	r2, r1
 800301e:	e764      	b.n	8002eea <HAL_DMA_Init+0x1a2>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003020:	2340      	movs	r3, #64	; 0x40
 8003022:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8003024:	2001      	movs	r0, #1
 8003026:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 800302a:	e73b      	b.n	8002ea4 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 800302c:	2202      	movs	r2, #2
 800302e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8003032:	2200      	movs	r2, #0
 8003034:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003038:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800303a:	4925      	ldr	r1, [pc, #148]	; (80030d0 <HAL_DMA_Init+0x388>)
 800303c:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800303e:	68a2      	ldr	r2, [r4, #8]
 8003040:	2a40      	cmp	r2, #64	; 0x40
 8003042:	d02c      	beq.n	800309e <HAL_DMA_Init+0x356>
 8003044:	2a80      	cmp	r2, #128	; 0x80
 8003046:	d027      	beq.n	8003098 <HAL_DMA_Init+0x350>
 8003048:	2200      	movs	r2, #0
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800304a:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800304c:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003050:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003052:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003056:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003058:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800305c:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800305e:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003062:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003064:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003068:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800306a:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800306e:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003070:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003072:	6822      	ldr	r2, [r4, #0]
 8003074:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <HAL_DMA_Init+0x38c>)
 8003076:	4413      	add	r3, r2
 8003078:	4a17      	ldr	r2, [pc, #92]	; (80030d8 <HAL_DMA_Init+0x390>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003084:	4620      	mov	r0, r4
 8003086:	f7ff fd25 	bl	8002ad4 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800308a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800308c:	f002 011f 	and.w	r1, r2, #31
 8003090:	2201      	movs	r2, #1
 8003092:	408a      	lsls	r2, r1
 8003094:	6042      	str	r2, [r0, #4]
 8003096:	e75a      	b.n	8002f4e <HAL_DMA_Init+0x206>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003098:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800309c:	e7d5      	b.n	800304a <HAL_DMA_Init+0x302>
 800309e:	2210      	movs	r2, #16
 80030a0:	e7d3      	b.n	800304a <HAL_DMA_Init+0x302>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80030a2:	2300      	movs	r3, #0
 80030a4:	6063      	str	r3, [r4, #4]
 80030a6:	e7a2      	b.n	8002fee <HAL_DMA_Init+0x2a6>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030a8:	4620      	mov	r0, r4
 80030aa:	f7ff fe0f 	bl	8002ccc <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80030ae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80030b6:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	e7a6      	b.n	800300a <HAL_DMA_Init+0x2c2>
    return HAL_ERROR;
 80030bc:	2001      	movs	r0, #1
 80030be:	e6f1      	b.n	8002ea4 <HAL_DMA_Init+0x15c>
 80030c0:	fe10803f 	.word	0xfe10803f
 80030c4:	40020010 	.word	0x40020010
 80030c8:	40020028 	.word	0x40020028
 80030cc:	58025408 	.word	0x58025408
 80030d0:	fffe000f 	.word	0xfffe000f
 80030d4:	a7fdabf8 	.word	0xa7fdabf8
 80030d8:	cccccccd 	.word	0xcccccccd

080030dc <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 80030dc:	2800      	cmp	r0, #0
 80030de:	f000 813e 	beq.w	800335e <HAL_DMA_Start_IT+0x282>
{
 80030e2:	b570      	push	{r4, r5, r6, lr}
 80030e4:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80030e6:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80030ea:	2801      	cmp	r0, #1
 80030ec:	f000 8139 	beq.w	8003362 <HAL_DMA_Start_IT+0x286>
 80030f0:	2001      	movs	r0, #1
 80030f2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80030f6:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 80030fa:	b2c0      	uxtb	r0, r0
 80030fc:	2801      	cmp	r0, #1
 80030fe:	d007      	beq.n	8003110 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003100:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003104:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8003106:	2300      	movs	r3, #0
 8003108:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_ERROR;
 800310c:	2001      	movs	r0, #1
}
 800310e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003110:	2002      	movs	r0, #2
 8003112:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003116:	2000      	movs	r0, #0
 8003118:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800311a:	6820      	ldr	r0, [r4, #0]
 800311c:	4e92      	ldr	r6, [pc, #584]	; (8003368 <HAL_DMA_Start_IT+0x28c>)
 800311e:	4d93      	ldr	r5, [pc, #588]	; (800336c <HAL_DMA_Start_IT+0x290>)
 8003120:	42a8      	cmp	r0, r5
 8003122:	bf18      	it	ne
 8003124:	42b0      	cmpne	r0, r6
 8003126:	d02f      	beq.n	8003188 <HAL_DMA_Start_IT+0xac>
 8003128:	3518      	adds	r5, #24
 800312a:	42a8      	cmp	r0, r5
 800312c:	d02c      	beq.n	8003188 <HAL_DMA_Start_IT+0xac>
 800312e:	3518      	adds	r5, #24
 8003130:	42a8      	cmp	r0, r5
 8003132:	d029      	beq.n	8003188 <HAL_DMA_Start_IT+0xac>
 8003134:	3518      	adds	r5, #24
 8003136:	42a8      	cmp	r0, r5
 8003138:	d026      	beq.n	8003188 <HAL_DMA_Start_IT+0xac>
 800313a:	3518      	adds	r5, #24
 800313c:	42a8      	cmp	r0, r5
 800313e:	d023      	beq.n	8003188 <HAL_DMA_Start_IT+0xac>
 8003140:	3518      	adds	r5, #24
 8003142:	42a8      	cmp	r0, r5
 8003144:	d020      	beq.n	8003188 <HAL_DMA_Start_IT+0xac>
 8003146:	3518      	adds	r5, #24
 8003148:	42a8      	cmp	r0, r5
 800314a:	d01d      	beq.n	8003188 <HAL_DMA_Start_IT+0xac>
 800314c:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8003150:	42a8      	cmp	r0, r5
 8003152:	d019      	beq.n	8003188 <HAL_DMA_Start_IT+0xac>
 8003154:	3518      	adds	r5, #24
 8003156:	42a8      	cmp	r0, r5
 8003158:	d016      	beq.n	8003188 <HAL_DMA_Start_IT+0xac>
 800315a:	3518      	adds	r5, #24
 800315c:	42a8      	cmp	r0, r5
 800315e:	d013      	beq.n	8003188 <HAL_DMA_Start_IT+0xac>
 8003160:	3518      	adds	r5, #24
 8003162:	42a8      	cmp	r0, r5
 8003164:	d010      	beq.n	8003188 <HAL_DMA_Start_IT+0xac>
 8003166:	3518      	adds	r5, #24
 8003168:	42a8      	cmp	r0, r5
 800316a:	d00d      	beq.n	8003188 <HAL_DMA_Start_IT+0xac>
 800316c:	3518      	adds	r5, #24
 800316e:	42a8      	cmp	r0, r5
 8003170:	d00a      	beq.n	8003188 <HAL_DMA_Start_IT+0xac>
 8003172:	3518      	adds	r5, #24
 8003174:	42a8      	cmp	r0, r5
 8003176:	d007      	beq.n	8003188 <HAL_DMA_Start_IT+0xac>
 8003178:	3518      	adds	r5, #24
 800317a:	42a8      	cmp	r0, r5
 800317c:	d004      	beq.n	8003188 <HAL_DMA_Start_IT+0xac>
 800317e:	6805      	ldr	r5, [r0, #0]
 8003180:	f025 0501 	bic.w	r5, r5, #1
 8003184:	6005      	str	r5, [r0, #0]
 8003186:	e003      	b.n	8003190 <HAL_DMA_Start_IT+0xb4>
 8003188:	6805      	ldr	r5, [r0, #0]
 800318a:	f025 0501 	bic.w	r5, r5, #1
 800318e:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003190:	4620      	mov	r0, r4
 8003192:	f7ff fbc5 	bl	8002920 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	4973      	ldr	r1, [pc, #460]	; (8003368 <HAL_DMA_Start_IT+0x28c>)
 800319a:	4a74      	ldr	r2, [pc, #464]	; (800336c <HAL_DMA_Start_IT+0x290>)
 800319c:	4293      	cmp	r3, r2
 800319e:	bf18      	it	ne
 80031a0:	428b      	cmpne	r3, r1
 80031a2:	d038      	beq.n	8003216 <HAL_DMA_Start_IT+0x13a>
 80031a4:	3218      	adds	r2, #24
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d035      	beq.n	8003216 <HAL_DMA_Start_IT+0x13a>
 80031aa:	3218      	adds	r2, #24
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d032      	beq.n	8003216 <HAL_DMA_Start_IT+0x13a>
 80031b0:	3218      	adds	r2, #24
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d02f      	beq.n	8003216 <HAL_DMA_Start_IT+0x13a>
 80031b6:	3218      	adds	r2, #24
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d02c      	beq.n	8003216 <HAL_DMA_Start_IT+0x13a>
 80031bc:	3218      	adds	r2, #24
 80031be:	4293      	cmp	r3, r2
 80031c0:	d029      	beq.n	8003216 <HAL_DMA_Start_IT+0x13a>
 80031c2:	3218      	adds	r2, #24
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d026      	beq.n	8003216 <HAL_DMA_Start_IT+0x13a>
 80031c8:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d022      	beq.n	8003216 <HAL_DMA_Start_IT+0x13a>
 80031d0:	3218      	adds	r2, #24
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d01f      	beq.n	8003216 <HAL_DMA_Start_IT+0x13a>
 80031d6:	3218      	adds	r2, #24
 80031d8:	4293      	cmp	r3, r2
 80031da:	d01c      	beq.n	8003216 <HAL_DMA_Start_IT+0x13a>
 80031dc:	3218      	adds	r2, #24
 80031de:	4293      	cmp	r3, r2
 80031e0:	d019      	beq.n	8003216 <HAL_DMA_Start_IT+0x13a>
 80031e2:	3218      	adds	r2, #24
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d016      	beq.n	8003216 <HAL_DMA_Start_IT+0x13a>
 80031e8:	3218      	adds	r2, #24
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d013      	beq.n	8003216 <HAL_DMA_Start_IT+0x13a>
 80031ee:	3218      	adds	r2, #24
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d010      	beq.n	8003216 <HAL_DMA_Start_IT+0x13a>
 80031f4:	3218      	adds	r2, #24
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00d      	beq.n	8003216 <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	f022 020e 	bic.w	r2, r2, #14
 8003200:	f042 020a 	orr.w	r2, r2, #10
 8003204:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003206:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003208:	b193      	cbz	r3, 8003230 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800320a:	6822      	ldr	r2, [r4, #0]
 800320c:	6813      	ldr	r3, [r2, #0]
 800320e:	f043 0304 	orr.w	r3, r3, #4
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	e00c      	b.n	8003230 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	f022 021e 	bic.w	r2, r2, #30
 800321c:	f042 0216 	orr.w	r2, r2, #22
 8003220:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003222:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003224:	b123      	cbz	r3, 8003230 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003226:	6822      	ldr	r2, [r4, #0]
 8003228:	6813      	ldr	r3, [r2, #0]
 800322a:	f043 0308 	orr.w	r3, r3, #8
 800322e:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	494d      	ldr	r1, [pc, #308]	; (8003368 <HAL_DMA_Start_IT+0x28c>)
 8003234:	4a4d      	ldr	r2, [pc, #308]	; (800336c <HAL_DMA_Start_IT+0x290>)
 8003236:	4293      	cmp	r3, r2
 8003238:	bf18      	it	ne
 800323a:	428b      	cmpne	r3, r1
 800323c:	d042      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 800323e:	3218      	adds	r2, #24
 8003240:	4293      	cmp	r3, r2
 8003242:	d03f      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 8003244:	3218      	adds	r2, #24
 8003246:	4293      	cmp	r3, r2
 8003248:	d03c      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 800324a:	3218      	adds	r2, #24
 800324c:	4293      	cmp	r3, r2
 800324e:	d039      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 8003250:	3218      	adds	r2, #24
 8003252:	4293      	cmp	r3, r2
 8003254:	d036      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 8003256:	3218      	adds	r2, #24
 8003258:	4293      	cmp	r3, r2
 800325a:	d033      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 800325c:	3218      	adds	r2, #24
 800325e:	4293      	cmp	r3, r2
 8003260:	d030      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 8003262:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003266:	4293      	cmp	r3, r2
 8003268:	d02c      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 800326a:	3218      	adds	r2, #24
 800326c:	4293      	cmp	r3, r2
 800326e:	d029      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 8003270:	3218      	adds	r2, #24
 8003272:	4293      	cmp	r3, r2
 8003274:	d026      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 8003276:	3218      	adds	r2, #24
 8003278:	4293      	cmp	r3, r2
 800327a:	d023      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 800327c:	3218      	adds	r2, #24
 800327e:	4293      	cmp	r3, r2
 8003280:	d020      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 8003282:	3218      	adds	r2, #24
 8003284:	4293      	cmp	r3, r2
 8003286:	d01d      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 8003288:	3218      	adds	r2, #24
 800328a:	4293      	cmp	r3, r2
 800328c:	d01a      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 800328e:	3218      	adds	r2, #24
 8003290:	4293      	cmp	r3, r2
 8003292:	d017      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 8003294:	4a36      	ldr	r2, [pc, #216]	; (8003370 <HAL_DMA_Start_IT+0x294>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d014      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 800329a:	3214      	adds	r2, #20
 800329c:	4293      	cmp	r3, r2
 800329e:	d011      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 80032a0:	3214      	adds	r2, #20
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d00e      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 80032a6:	3214      	adds	r2, #20
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00b      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 80032ac:	3214      	adds	r2, #20
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d008      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 80032b2:	3214      	adds	r2, #20
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d005      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 80032b8:	3214      	adds	r2, #20
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d002      	beq.n	80032c4 <HAL_DMA_Start_IT+0x1e8>
 80032be:	3214      	adds	r2, #20
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d10e      	bne.n	80032e2 <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032c4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80032cc:	d003      	beq.n	80032d6 <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032d4:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 80032d6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80032d8:	b11b      	cbz	r3, 80032e2 <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	4920      	ldr	r1, [pc, #128]	; (8003368 <HAL_DMA_Start_IT+0x28c>)
 80032e6:	4a21      	ldr	r2, [pc, #132]	; (800336c <HAL_DMA_Start_IT+0x290>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	bf18      	it	ne
 80032ec:	428b      	cmpne	r3, r1
 80032ee:	d030      	beq.n	8003352 <HAL_DMA_Start_IT+0x276>
 80032f0:	3218      	adds	r2, #24
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d02d      	beq.n	8003352 <HAL_DMA_Start_IT+0x276>
 80032f6:	3218      	adds	r2, #24
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d02a      	beq.n	8003352 <HAL_DMA_Start_IT+0x276>
 80032fc:	3218      	adds	r2, #24
 80032fe:	4293      	cmp	r3, r2
 8003300:	d027      	beq.n	8003352 <HAL_DMA_Start_IT+0x276>
 8003302:	3218      	adds	r2, #24
 8003304:	4293      	cmp	r3, r2
 8003306:	d024      	beq.n	8003352 <HAL_DMA_Start_IT+0x276>
 8003308:	3218      	adds	r2, #24
 800330a:	4293      	cmp	r3, r2
 800330c:	d021      	beq.n	8003352 <HAL_DMA_Start_IT+0x276>
 800330e:	3218      	adds	r2, #24
 8003310:	4293      	cmp	r3, r2
 8003312:	d01e      	beq.n	8003352 <HAL_DMA_Start_IT+0x276>
 8003314:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003318:	4293      	cmp	r3, r2
 800331a:	d01a      	beq.n	8003352 <HAL_DMA_Start_IT+0x276>
 800331c:	3218      	adds	r2, #24
 800331e:	4293      	cmp	r3, r2
 8003320:	d017      	beq.n	8003352 <HAL_DMA_Start_IT+0x276>
 8003322:	3218      	adds	r2, #24
 8003324:	4293      	cmp	r3, r2
 8003326:	d014      	beq.n	8003352 <HAL_DMA_Start_IT+0x276>
 8003328:	3218      	adds	r2, #24
 800332a:	4293      	cmp	r3, r2
 800332c:	d011      	beq.n	8003352 <HAL_DMA_Start_IT+0x276>
 800332e:	3218      	adds	r2, #24
 8003330:	4293      	cmp	r3, r2
 8003332:	d00e      	beq.n	8003352 <HAL_DMA_Start_IT+0x276>
 8003334:	3218      	adds	r2, #24
 8003336:	4293      	cmp	r3, r2
 8003338:	d00b      	beq.n	8003352 <HAL_DMA_Start_IT+0x276>
 800333a:	3218      	adds	r2, #24
 800333c:	4293      	cmp	r3, r2
 800333e:	d008      	beq.n	8003352 <HAL_DMA_Start_IT+0x276>
 8003340:	3218      	adds	r2, #24
 8003342:	4293      	cmp	r3, r2
 8003344:	d005      	beq.n	8003352 <HAL_DMA_Start_IT+0x276>
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	f042 0201 	orr.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800334e:	2000      	movs	r0, #0
 8003350:	e6dd      	b.n	800310e <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	f042 0201 	orr.w	r2, r2, #1
 8003358:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800335a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800335c:	e6d7      	b.n	800310e <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 800335e:	2001      	movs	r0, #1
}
 8003360:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8003362:	2002      	movs	r0, #2
 8003364:	e6d3      	b.n	800310e <HAL_DMA_Start_IT+0x32>
 8003366:	bf00      	nop
 8003368:	40020010 	.word	0x40020010
 800336c:	40020028 	.word	0x40020028
 8003370:	58025408 	.word	0x58025408

08003374 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8003374:	2800      	cmp	r0, #0
 8003376:	f000 8129 	beq.w	80035cc <HAL_DMA_Abort_IT+0x258>
{
 800337a:	b508      	push	{r3, lr}
 800337c:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800337e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d003      	beq.n	8003390 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800338c:	2001      	movs	r0, #1
}
 800338e:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003390:	6803      	ldr	r3, [r0, #0]
 8003392:	4890      	ldr	r0, [pc, #576]	; (80035d4 <HAL_DMA_Abort_IT+0x260>)
 8003394:	4990      	ldr	r1, [pc, #576]	; (80035d8 <HAL_DMA_Abort_IT+0x264>)
 8003396:	428b      	cmp	r3, r1
 8003398:	bf18      	it	ne
 800339a:	4283      	cmpne	r3, r0
 800339c:	bf0c      	ite	eq
 800339e:	2101      	moveq	r1, #1
 80033a0:	2100      	movne	r1, #0
 80033a2:	d066      	beq.n	8003472 <HAL_DMA_Abort_IT+0xfe>
 80033a4:	3030      	adds	r0, #48	; 0x30
 80033a6:	4283      	cmp	r3, r0
 80033a8:	d063      	beq.n	8003472 <HAL_DMA_Abort_IT+0xfe>
 80033aa:	3018      	adds	r0, #24
 80033ac:	4283      	cmp	r3, r0
 80033ae:	d060      	beq.n	8003472 <HAL_DMA_Abort_IT+0xfe>
 80033b0:	3018      	adds	r0, #24
 80033b2:	4283      	cmp	r3, r0
 80033b4:	d05d      	beq.n	8003472 <HAL_DMA_Abort_IT+0xfe>
 80033b6:	3018      	adds	r0, #24
 80033b8:	4283      	cmp	r3, r0
 80033ba:	d05a      	beq.n	8003472 <HAL_DMA_Abort_IT+0xfe>
 80033bc:	3018      	adds	r0, #24
 80033be:	4283      	cmp	r3, r0
 80033c0:	d057      	beq.n	8003472 <HAL_DMA_Abort_IT+0xfe>
 80033c2:	3018      	adds	r0, #24
 80033c4:	4283      	cmp	r3, r0
 80033c6:	d054      	beq.n	8003472 <HAL_DMA_Abort_IT+0xfe>
 80033c8:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80033cc:	4283      	cmp	r3, r0
 80033ce:	d050      	beq.n	8003472 <HAL_DMA_Abort_IT+0xfe>
 80033d0:	3018      	adds	r0, #24
 80033d2:	4283      	cmp	r3, r0
 80033d4:	d04d      	beq.n	8003472 <HAL_DMA_Abort_IT+0xfe>
 80033d6:	3018      	adds	r0, #24
 80033d8:	4283      	cmp	r3, r0
 80033da:	d04a      	beq.n	8003472 <HAL_DMA_Abort_IT+0xfe>
 80033dc:	3018      	adds	r0, #24
 80033de:	4283      	cmp	r3, r0
 80033e0:	d047      	beq.n	8003472 <HAL_DMA_Abort_IT+0xfe>
 80033e2:	3018      	adds	r0, #24
 80033e4:	4283      	cmp	r3, r0
 80033e6:	d044      	beq.n	8003472 <HAL_DMA_Abort_IT+0xfe>
 80033e8:	3018      	adds	r0, #24
 80033ea:	4283      	cmp	r3, r0
 80033ec:	d041      	beq.n	8003472 <HAL_DMA_Abort_IT+0xfe>
 80033ee:	3018      	adds	r0, #24
 80033f0:	4283      	cmp	r3, r0
 80033f2:	d03e      	beq.n	8003472 <HAL_DMA_Abort_IT+0xfe>
 80033f4:	3018      	adds	r0, #24
 80033f6:	4283      	cmp	r3, r0
 80033f8:	d03b      	beq.n	8003472 <HAL_DMA_Abort_IT+0xfe>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80033fa:	6819      	ldr	r1, [r3, #0]
 80033fc:	f021 010e 	bic.w	r1, r1, #14
 8003400:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8003402:	6813      	ldr	r3, [r2, #0]
 8003404:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
 8003408:	4973      	ldr	r1, [pc, #460]	; (80035d8 <HAL_DMA_Abort_IT+0x264>)
 800340a:	428b      	cmp	r3, r1
 800340c:	bf18      	it	ne
 800340e:	4283      	cmpne	r3, r0
 8003410:	d06a      	beq.n	80034e8 <HAL_DMA_Abort_IT+0x174>
 8003412:	4972      	ldr	r1, [pc, #456]	; (80035dc <HAL_DMA_Abort_IT+0x268>)
 8003414:	428b      	cmp	r3, r1
 8003416:	d067      	beq.n	80034e8 <HAL_DMA_Abort_IT+0x174>
 8003418:	3118      	adds	r1, #24
 800341a:	428b      	cmp	r3, r1
 800341c:	d064      	beq.n	80034e8 <HAL_DMA_Abort_IT+0x174>
 800341e:	3118      	adds	r1, #24
 8003420:	428b      	cmp	r3, r1
 8003422:	d061      	beq.n	80034e8 <HAL_DMA_Abort_IT+0x174>
 8003424:	3118      	adds	r1, #24
 8003426:	428b      	cmp	r3, r1
 8003428:	d05e      	beq.n	80034e8 <HAL_DMA_Abort_IT+0x174>
 800342a:	3118      	adds	r1, #24
 800342c:	428b      	cmp	r3, r1
 800342e:	d05b      	beq.n	80034e8 <HAL_DMA_Abort_IT+0x174>
 8003430:	3118      	adds	r1, #24
 8003432:	428b      	cmp	r3, r1
 8003434:	d058      	beq.n	80034e8 <HAL_DMA_Abort_IT+0x174>
 8003436:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800343a:	428b      	cmp	r3, r1
 800343c:	d054      	beq.n	80034e8 <HAL_DMA_Abort_IT+0x174>
 800343e:	3118      	adds	r1, #24
 8003440:	428b      	cmp	r3, r1
 8003442:	d051      	beq.n	80034e8 <HAL_DMA_Abort_IT+0x174>
 8003444:	3118      	adds	r1, #24
 8003446:	428b      	cmp	r3, r1
 8003448:	d04e      	beq.n	80034e8 <HAL_DMA_Abort_IT+0x174>
 800344a:	3118      	adds	r1, #24
 800344c:	428b      	cmp	r3, r1
 800344e:	d04b      	beq.n	80034e8 <HAL_DMA_Abort_IT+0x174>
 8003450:	3118      	adds	r1, #24
 8003452:	428b      	cmp	r3, r1
 8003454:	d048      	beq.n	80034e8 <HAL_DMA_Abort_IT+0x174>
 8003456:	3118      	adds	r1, #24
 8003458:	428b      	cmp	r3, r1
 800345a:	d045      	beq.n	80034e8 <HAL_DMA_Abort_IT+0x174>
 800345c:	3118      	adds	r1, #24
 800345e:	428b      	cmp	r3, r1
 8003460:	d042      	beq.n	80034e8 <HAL_DMA_Abort_IT+0x174>
 8003462:	3118      	adds	r1, #24
 8003464:	428b      	cmp	r3, r1
 8003466:	d03f      	beq.n	80034e8 <HAL_DMA_Abort_IT+0x174>
 8003468:	6819      	ldr	r1, [r3, #0]
 800346a:	f021 0101 	bic.w	r1, r1, #1
 800346e:	6019      	str	r1, [r3, #0]
 8003470:	e03e      	b.n	80034f0 <HAL_DMA_Abort_IT+0x17c>
      hdma->State = HAL_DMA_STATE_ABORT;
 8003472:	2004      	movs	r0, #4
 8003474:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8003478:	bb81      	cbnz	r1, 80034dc <HAL_DMA_Abort_IT+0x168>
 800347a:	4a58      	ldr	r2, [pc, #352]	; (80035dc <HAL_DMA_Abort_IT+0x268>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d02d      	beq.n	80034dc <HAL_DMA_Abort_IT+0x168>
 8003480:	3218      	adds	r2, #24
 8003482:	4293      	cmp	r3, r2
 8003484:	d02a      	beq.n	80034dc <HAL_DMA_Abort_IT+0x168>
 8003486:	3218      	adds	r2, #24
 8003488:	4293      	cmp	r3, r2
 800348a:	d027      	beq.n	80034dc <HAL_DMA_Abort_IT+0x168>
 800348c:	3218      	adds	r2, #24
 800348e:	4293      	cmp	r3, r2
 8003490:	d024      	beq.n	80034dc <HAL_DMA_Abort_IT+0x168>
 8003492:	3218      	adds	r2, #24
 8003494:	4293      	cmp	r3, r2
 8003496:	d021      	beq.n	80034dc <HAL_DMA_Abort_IT+0x168>
 8003498:	3218      	adds	r2, #24
 800349a:	4293      	cmp	r3, r2
 800349c:	d01e      	beq.n	80034dc <HAL_DMA_Abort_IT+0x168>
 800349e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d01a      	beq.n	80034dc <HAL_DMA_Abort_IT+0x168>
 80034a6:	3218      	adds	r2, #24
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d017      	beq.n	80034dc <HAL_DMA_Abort_IT+0x168>
 80034ac:	3218      	adds	r2, #24
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d014      	beq.n	80034dc <HAL_DMA_Abort_IT+0x168>
 80034b2:	3218      	adds	r2, #24
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d011      	beq.n	80034dc <HAL_DMA_Abort_IT+0x168>
 80034b8:	3218      	adds	r2, #24
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00e      	beq.n	80034dc <HAL_DMA_Abort_IT+0x168>
 80034be:	3218      	adds	r2, #24
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00b      	beq.n	80034dc <HAL_DMA_Abort_IT+0x168>
 80034c4:	3218      	adds	r2, #24
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d008      	beq.n	80034dc <HAL_DMA_Abort_IT+0x168>
 80034ca:	3218      	adds	r2, #24
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d005      	beq.n	80034dc <HAL_DMA_Abort_IT+0x168>
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	f022 0201 	bic.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80034d8:	2000      	movs	r0, #0
 80034da:	e758      	b.n	800338e <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80034e4:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 80034e6:	e752      	b.n	800338e <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 80034e8:	6819      	ldr	r1, [r3, #0]
 80034ea:	f021 0101 	bic.w	r1, r1, #1
 80034ee:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034f0:	6813      	ldr	r3, [r2, #0]
 80034f2:	4838      	ldr	r0, [pc, #224]	; (80035d4 <HAL_DMA_Abort_IT+0x260>)
 80034f4:	4938      	ldr	r1, [pc, #224]	; (80035d8 <HAL_DMA_Abort_IT+0x264>)
 80034f6:	428b      	cmp	r3, r1
 80034f8:	bf18      	it	ne
 80034fa:	4283      	cmpne	r3, r0
 80034fc:	d042      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 80034fe:	3118      	adds	r1, #24
 8003500:	428b      	cmp	r3, r1
 8003502:	d03f      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 8003504:	3118      	adds	r1, #24
 8003506:	428b      	cmp	r3, r1
 8003508:	d03c      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 800350a:	3118      	adds	r1, #24
 800350c:	428b      	cmp	r3, r1
 800350e:	d039      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 8003510:	3118      	adds	r1, #24
 8003512:	428b      	cmp	r3, r1
 8003514:	d036      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 8003516:	3118      	adds	r1, #24
 8003518:	428b      	cmp	r3, r1
 800351a:	d033      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 800351c:	3118      	adds	r1, #24
 800351e:	428b      	cmp	r3, r1
 8003520:	d030      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 8003522:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003526:	428b      	cmp	r3, r1
 8003528:	d02c      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 800352a:	3118      	adds	r1, #24
 800352c:	428b      	cmp	r3, r1
 800352e:	d029      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 8003530:	3118      	adds	r1, #24
 8003532:	428b      	cmp	r3, r1
 8003534:	d026      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 8003536:	3118      	adds	r1, #24
 8003538:	428b      	cmp	r3, r1
 800353a:	d023      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 800353c:	3118      	adds	r1, #24
 800353e:	428b      	cmp	r3, r1
 8003540:	d020      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 8003542:	3118      	adds	r1, #24
 8003544:	428b      	cmp	r3, r1
 8003546:	d01d      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 8003548:	3118      	adds	r1, #24
 800354a:	428b      	cmp	r3, r1
 800354c:	d01a      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 800354e:	3118      	adds	r1, #24
 8003550:	428b      	cmp	r3, r1
 8003552:	d017      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 8003554:	4922      	ldr	r1, [pc, #136]	; (80035e0 <HAL_DMA_Abort_IT+0x26c>)
 8003556:	428b      	cmp	r3, r1
 8003558:	d014      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 800355a:	3114      	adds	r1, #20
 800355c:	428b      	cmp	r3, r1
 800355e:	d011      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 8003560:	3114      	adds	r1, #20
 8003562:	428b      	cmp	r3, r1
 8003564:	d00e      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 8003566:	3114      	adds	r1, #20
 8003568:	428b      	cmp	r3, r1
 800356a:	d00b      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 800356c:	3114      	adds	r1, #20
 800356e:	428b      	cmp	r3, r1
 8003570:	d008      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 8003572:	3114      	adds	r1, #20
 8003574:	428b      	cmp	r3, r1
 8003576:	d005      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 8003578:	3114      	adds	r1, #20
 800357a:	428b      	cmp	r3, r1
 800357c:	d002      	beq.n	8003584 <HAL_DMA_Abort_IT+0x210>
 800357e:	3114      	adds	r1, #20
 8003580:	428b      	cmp	r3, r1
 8003582:	d117      	bne.n	80035b4 <HAL_DMA_Abort_IT+0x240>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003584:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8003586:	680b      	ldr	r3, [r1, #0]
 8003588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800358c:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800358e:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003590:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8003592:	f003 011f 	and.w	r1, r3, #31
 8003596:	2301      	movs	r3, #1
 8003598:	408b      	lsls	r3, r1
 800359a:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800359c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800359e:	6e91      	ldr	r1, [r2, #104]	; 0x68
 80035a0:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80035a2:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 80035a4:	b133      	cbz	r3, 80035b4 <HAL_DMA_Abort_IT+0x240>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035a6:	6819      	ldr	r1, [r3, #0]
 80035a8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80035ac:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035ae:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80035b0:	6f51      	ldr	r1, [r2, #116]	; 0x74
 80035b2:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 80035b4:	2301      	movs	r3, #1
 80035b6:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80035ba:	2300      	movs	r3, #0
 80035bc:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 80035c0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80035c2:	b12b      	cbz	r3, 80035d0 <HAL_DMA_Abort_IT+0x25c>
        hdma->XferAbortCallback(hdma);
 80035c4:	4610      	mov	r0, r2
 80035c6:	4798      	blx	r3
  return HAL_OK;
 80035c8:	2000      	movs	r0, #0
 80035ca:	e6e0      	b.n	800338e <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 80035cc:	2001      	movs	r0, #1
}
 80035ce:	4770      	bx	lr
  return HAL_OK;
 80035d0:	2000      	movs	r0, #0
 80035d2:	e6dc      	b.n	800338e <HAL_DMA_Abort_IT+0x1a>
 80035d4:	40020010 	.word	0x40020010
 80035d8:	40020028 	.word	0x40020028
 80035dc:	40020040 	.word	0x40020040
 80035e0:	58025408 	.word	0x58025408

080035e4 <HAL_DMA_IRQHandler>:
{
 80035e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035e6:	b083      	sub	sp, #12
 80035e8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035ee:	4b7d      	ldr	r3, [pc, #500]	; (80037e4 <HAL_DMA_IRQHandler+0x200>)
 80035f0:	681d      	ldr	r5, [r3, #0]
 80035f2:	4b7d      	ldr	r3, [pc, #500]	; (80037e8 <HAL_DMA_IRQHandler+0x204>)
 80035f4:	fba3 3505 	umull	r3, r5, r3, r5
 80035f8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035fa:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 80035fc:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 80035fe:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003602:	6803      	ldr	r3, [r0, #0]
 8003604:	4979      	ldr	r1, [pc, #484]	; (80037ec <HAL_DMA_IRQHandler+0x208>)
 8003606:	487a      	ldr	r0, [pc, #488]	; (80037f0 <HAL_DMA_IRQHandler+0x20c>)
 8003608:	4283      	cmp	r3, r0
 800360a:	bf18      	it	ne
 800360c:	428b      	cmpne	r3, r1
 800360e:	bf0c      	ite	eq
 8003610:	2001      	moveq	r0, #1
 8003612:	2000      	movne	r0, #0
 8003614:	d061      	beq.n	80036da <HAL_DMA_IRQHandler+0xf6>
 8003616:	4a77      	ldr	r2, [pc, #476]	; (80037f4 <HAL_DMA_IRQHandler+0x210>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d05e      	beq.n	80036da <HAL_DMA_IRQHandler+0xf6>
 800361c:	3218      	adds	r2, #24
 800361e:	4293      	cmp	r3, r2
 8003620:	d05b      	beq.n	80036da <HAL_DMA_IRQHandler+0xf6>
 8003622:	3218      	adds	r2, #24
 8003624:	4293      	cmp	r3, r2
 8003626:	d058      	beq.n	80036da <HAL_DMA_IRQHandler+0xf6>
 8003628:	3218      	adds	r2, #24
 800362a:	4293      	cmp	r3, r2
 800362c:	d055      	beq.n	80036da <HAL_DMA_IRQHandler+0xf6>
 800362e:	3218      	adds	r2, #24
 8003630:	4293      	cmp	r3, r2
 8003632:	d052      	beq.n	80036da <HAL_DMA_IRQHandler+0xf6>
 8003634:	3218      	adds	r2, #24
 8003636:	4293      	cmp	r3, r2
 8003638:	d04f      	beq.n	80036da <HAL_DMA_IRQHandler+0xf6>
 800363a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800363e:	4293      	cmp	r3, r2
 8003640:	d04b      	beq.n	80036da <HAL_DMA_IRQHandler+0xf6>
 8003642:	3218      	adds	r2, #24
 8003644:	4293      	cmp	r3, r2
 8003646:	d048      	beq.n	80036da <HAL_DMA_IRQHandler+0xf6>
 8003648:	3218      	adds	r2, #24
 800364a:	4293      	cmp	r3, r2
 800364c:	d045      	beq.n	80036da <HAL_DMA_IRQHandler+0xf6>
 800364e:	3218      	adds	r2, #24
 8003650:	4293      	cmp	r3, r2
 8003652:	d042      	beq.n	80036da <HAL_DMA_IRQHandler+0xf6>
 8003654:	3218      	adds	r2, #24
 8003656:	4293      	cmp	r3, r2
 8003658:	d03f      	beq.n	80036da <HAL_DMA_IRQHandler+0xf6>
 800365a:	3218      	adds	r2, #24
 800365c:	4293      	cmp	r3, r2
 800365e:	d03c      	beq.n	80036da <HAL_DMA_IRQHandler+0xf6>
 8003660:	3218      	adds	r2, #24
 8003662:	4293      	cmp	r3, r2
 8003664:	d039      	beq.n	80036da <HAL_DMA_IRQHandler+0xf6>
 8003666:	3218      	adds	r2, #24
 8003668:	4293      	cmp	r3, r2
 800366a:	d036      	beq.n	80036da <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800366c:	4962      	ldr	r1, [pc, #392]	; (80037f8 <HAL_DMA_IRQHandler+0x214>)
 800366e:	4a63      	ldr	r2, [pc, #396]	; (80037fc <HAL_DMA_IRQHandler+0x218>)
 8003670:	4293      	cmp	r3, r2
 8003672:	bf18      	it	ne
 8003674:	428b      	cmpne	r3, r1
 8003676:	d012      	beq.n	800369e <HAL_DMA_IRQHandler+0xba>
 8003678:	4a61      	ldr	r2, [pc, #388]	; (8003800 <HAL_DMA_IRQHandler+0x21c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00f      	beq.n	800369e <HAL_DMA_IRQHandler+0xba>
 800367e:	3214      	adds	r2, #20
 8003680:	4293      	cmp	r3, r2
 8003682:	d00c      	beq.n	800369e <HAL_DMA_IRQHandler+0xba>
 8003684:	3214      	adds	r2, #20
 8003686:	4293      	cmp	r3, r2
 8003688:	d009      	beq.n	800369e <HAL_DMA_IRQHandler+0xba>
 800368a:	3214      	adds	r2, #20
 800368c:	4293      	cmp	r3, r2
 800368e:	d006      	beq.n	800369e <HAL_DMA_IRQHandler+0xba>
 8003690:	3214      	adds	r2, #20
 8003692:	4293      	cmp	r3, r2
 8003694:	d003      	beq.n	800369e <HAL_DMA_IRQHandler+0xba>
 8003696:	3214      	adds	r2, #20
 8003698:	4293      	cmp	r3, r2
 800369a:	f040 8261 	bne.w	8003b60 <HAL_DMA_IRQHandler+0x57c>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800369e:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80036a0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80036a2:	f001 011f 	and.w	r1, r1, #31
 80036a6:	2004      	movs	r0, #4
 80036a8:	4088      	lsls	r0, r1
 80036aa:	ea10 0f0c 	tst.w	r0, ip
 80036ae:	f000 82a7 	beq.w	8003c00 <HAL_DMA_IRQHandler+0x61c>
 80036b2:	f012 0f04 	tst.w	r2, #4
 80036b6:	f000 82a3 	beq.w	8003c00 <HAL_DMA_IRQHandler+0x61c>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80036ba:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036bc:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80036c0:	f000 825a 	beq.w	8003b78 <HAL_DMA_IRQHandler+0x594>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80036c4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80036c8:	f040 8250 	bne.w	8003b6c <HAL_DMA_IRQHandler+0x588>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 8246 	beq.w	8003b60 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1HalfCpltCallback(hdma);
 80036d4:	4620      	mov	r0, r4
 80036d6:	4798      	blx	r3
 80036d8:	e242      	b.n	8003b60 <HAL_DMA_IRQHandler+0x57c>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80036dc:	f002 011f 	and.w	r1, r2, #31
 80036e0:	2208      	movs	r2, #8
 80036e2:	408a      	lsls	r2, r1
 80036e4:	4232      	tst	r2, r6
 80036e6:	d041      	beq.n	800376c <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80036e8:	bb70      	cbnz	r0, 8003748 <HAL_DMA_IRQHandler+0x164>
 80036ea:	4a42      	ldr	r2, [pc, #264]	; (80037f4 <HAL_DMA_IRQHandler+0x210>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d02b      	beq.n	8003748 <HAL_DMA_IRQHandler+0x164>
 80036f0:	3218      	adds	r2, #24
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d028      	beq.n	8003748 <HAL_DMA_IRQHandler+0x164>
 80036f6:	3218      	adds	r2, #24
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d025      	beq.n	8003748 <HAL_DMA_IRQHandler+0x164>
 80036fc:	3218      	adds	r2, #24
 80036fe:	4293      	cmp	r3, r2
 8003700:	d022      	beq.n	8003748 <HAL_DMA_IRQHandler+0x164>
 8003702:	3218      	adds	r2, #24
 8003704:	4293      	cmp	r3, r2
 8003706:	d01f      	beq.n	8003748 <HAL_DMA_IRQHandler+0x164>
 8003708:	3218      	adds	r2, #24
 800370a:	4293      	cmp	r3, r2
 800370c:	d01c      	beq.n	8003748 <HAL_DMA_IRQHandler+0x164>
 800370e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003712:	4293      	cmp	r3, r2
 8003714:	d018      	beq.n	8003748 <HAL_DMA_IRQHandler+0x164>
 8003716:	3218      	adds	r2, #24
 8003718:	4293      	cmp	r3, r2
 800371a:	d015      	beq.n	8003748 <HAL_DMA_IRQHandler+0x164>
 800371c:	3218      	adds	r2, #24
 800371e:	4293      	cmp	r3, r2
 8003720:	d012      	beq.n	8003748 <HAL_DMA_IRQHandler+0x164>
 8003722:	3218      	adds	r2, #24
 8003724:	4293      	cmp	r3, r2
 8003726:	d00f      	beq.n	8003748 <HAL_DMA_IRQHandler+0x164>
 8003728:	3218      	adds	r2, #24
 800372a:	4293      	cmp	r3, r2
 800372c:	d00c      	beq.n	8003748 <HAL_DMA_IRQHandler+0x164>
 800372e:	3218      	adds	r2, #24
 8003730:	4293      	cmp	r3, r2
 8003732:	d009      	beq.n	8003748 <HAL_DMA_IRQHandler+0x164>
 8003734:	3218      	adds	r2, #24
 8003736:	4293      	cmp	r3, r2
 8003738:	d006      	beq.n	8003748 <HAL_DMA_IRQHandler+0x164>
 800373a:	3218      	adds	r2, #24
 800373c:	4293      	cmp	r3, r2
 800373e:	d003      	beq.n	8003748 <HAL_DMA_IRQHandler+0x164>
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8003746:	e002      	b.n	800374e <HAL_DMA_IRQHandler+0x16a>
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800374e:	b16a      	cbz	r2, 800376c <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	f022 0204 	bic.w	r2, r2, #4
 8003756:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003758:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800375a:	f003 021f 	and.w	r2, r3, #31
 800375e:	2308      	movs	r3, #8
 8003760:	4093      	lsls	r3, r2
 8003762:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003764:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800376c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800376e:	f002 021f 	and.w	r2, r2, #31
 8003772:	fa26 f302 	lsr.w	r3, r6, r2
 8003776:	f013 0f01 	tst.w	r3, #1
 800377a:	d047      	beq.n	800380c <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	481b      	ldr	r0, [pc, #108]	; (80037ec <HAL_DMA_IRQHandler+0x208>)
 8003780:	491b      	ldr	r1, [pc, #108]	; (80037f0 <HAL_DMA_IRQHandler+0x20c>)
 8003782:	428b      	cmp	r3, r1
 8003784:	bf18      	it	ne
 8003786:	4283      	cmpne	r3, r0
 8003788:	d03c      	beq.n	8003804 <HAL_DMA_IRQHandler+0x220>
 800378a:	3118      	adds	r1, #24
 800378c:	428b      	cmp	r3, r1
 800378e:	d039      	beq.n	8003804 <HAL_DMA_IRQHandler+0x220>
 8003790:	3118      	adds	r1, #24
 8003792:	428b      	cmp	r3, r1
 8003794:	d036      	beq.n	8003804 <HAL_DMA_IRQHandler+0x220>
 8003796:	3118      	adds	r1, #24
 8003798:	428b      	cmp	r3, r1
 800379a:	d033      	beq.n	8003804 <HAL_DMA_IRQHandler+0x220>
 800379c:	3118      	adds	r1, #24
 800379e:	428b      	cmp	r3, r1
 80037a0:	d030      	beq.n	8003804 <HAL_DMA_IRQHandler+0x220>
 80037a2:	3118      	adds	r1, #24
 80037a4:	428b      	cmp	r3, r1
 80037a6:	d02d      	beq.n	8003804 <HAL_DMA_IRQHandler+0x220>
 80037a8:	3118      	adds	r1, #24
 80037aa:	428b      	cmp	r3, r1
 80037ac:	d02a      	beq.n	8003804 <HAL_DMA_IRQHandler+0x220>
 80037ae:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80037b2:	428b      	cmp	r3, r1
 80037b4:	d026      	beq.n	8003804 <HAL_DMA_IRQHandler+0x220>
 80037b6:	3118      	adds	r1, #24
 80037b8:	428b      	cmp	r3, r1
 80037ba:	d023      	beq.n	8003804 <HAL_DMA_IRQHandler+0x220>
 80037bc:	3118      	adds	r1, #24
 80037be:	428b      	cmp	r3, r1
 80037c0:	d020      	beq.n	8003804 <HAL_DMA_IRQHandler+0x220>
 80037c2:	3118      	adds	r1, #24
 80037c4:	428b      	cmp	r3, r1
 80037c6:	d01d      	beq.n	8003804 <HAL_DMA_IRQHandler+0x220>
 80037c8:	3118      	adds	r1, #24
 80037ca:	428b      	cmp	r3, r1
 80037cc:	d01a      	beq.n	8003804 <HAL_DMA_IRQHandler+0x220>
 80037ce:	3118      	adds	r1, #24
 80037d0:	428b      	cmp	r3, r1
 80037d2:	d017      	beq.n	8003804 <HAL_DMA_IRQHandler+0x220>
 80037d4:	3118      	adds	r1, #24
 80037d6:	428b      	cmp	r3, r1
 80037d8:	d014      	beq.n	8003804 <HAL_DMA_IRQHandler+0x220>
 80037da:	3118      	adds	r1, #24
 80037dc:	428b      	cmp	r3, r1
 80037de:	d011      	beq.n	8003804 <HAL_DMA_IRQHandler+0x220>
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	e013      	b.n	800380c <HAL_DMA_IRQHandler+0x228>
 80037e4:	24000004 	.word	0x24000004
 80037e8:	1b4e81b5 	.word	0x1b4e81b5
 80037ec:	40020010 	.word	0x40020010
 80037f0:	40020028 	.word	0x40020028
 80037f4:	40020040 	.word	0x40020040
 80037f8:	58025408 	.word	0x58025408
 80037fc:	5802541c 	.word	0x5802541c
 8003800:	58025430 	.word	0x58025430
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f013 0f80 	tst.w	r3, #128	; 0x80
 800380a:	d13b      	bne.n	8003884 <HAL_DMA_IRQHandler+0x2a0>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800380c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	2204      	movs	r2, #4
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	4233      	tst	r3, r6
 800381a:	d040      	beq.n	800389e <HAL_DMA_IRQHandler+0x2ba>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800381c:	6822      	ldr	r2, [r4, #0]
 800381e:	4896      	ldr	r0, [pc, #600]	; (8003a78 <HAL_DMA_IRQHandler+0x494>)
 8003820:	4996      	ldr	r1, [pc, #600]	; (8003a7c <HAL_DMA_IRQHandler+0x498>)
 8003822:	428a      	cmp	r2, r1
 8003824:	bf18      	it	ne
 8003826:	4282      	cmpne	r2, r0
 8003828:	d035      	beq.n	8003896 <HAL_DMA_IRQHandler+0x2b2>
 800382a:	3118      	adds	r1, #24
 800382c:	428a      	cmp	r2, r1
 800382e:	d032      	beq.n	8003896 <HAL_DMA_IRQHandler+0x2b2>
 8003830:	3118      	adds	r1, #24
 8003832:	428a      	cmp	r2, r1
 8003834:	d02f      	beq.n	8003896 <HAL_DMA_IRQHandler+0x2b2>
 8003836:	3118      	adds	r1, #24
 8003838:	428a      	cmp	r2, r1
 800383a:	d02c      	beq.n	8003896 <HAL_DMA_IRQHandler+0x2b2>
 800383c:	3118      	adds	r1, #24
 800383e:	428a      	cmp	r2, r1
 8003840:	d029      	beq.n	8003896 <HAL_DMA_IRQHandler+0x2b2>
 8003842:	3118      	adds	r1, #24
 8003844:	428a      	cmp	r2, r1
 8003846:	d026      	beq.n	8003896 <HAL_DMA_IRQHandler+0x2b2>
 8003848:	3118      	adds	r1, #24
 800384a:	428a      	cmp	r2, r1
 800384c:	d023      	beq.n	8003896 <HAL_DMA_IRQHandler+0x2b2>
 800384e:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003852:	428a      	cmp	r2, r1
 8003854:	d01f      	beq.n	8003896 <HAL_DMA_IRQHandler+0x2b2>
 8003856:	3118      	adds	r1, #24
 8003858:	428a      	cmp	r2, r1
 800385a:	d01c      	beq.n	8003896 <HAL_DMA_IRQHandler+0x2b2>
 800385c:	3118      	adds	r1, #24
 800385e:	428a      	cmp	r2, r1
 8003860:	d019      	beq.n	8003896 <HAL_DMA_IRQHandler+0x2b2>
 8003862:	3118      	adds	r1, #24
 8003864:	428a      	cmp	r2, r1
 8003866:	d016      	beq.n	8003896 <HAL_DMA_IRQHandler+0x2b2>
 8003868:	3118      	adds	r1, #24
 800386a:	428a      	cmp	r2, r1
 800386c:	d013      	beq.n	8003896 <HAL_DMA_IRQHandler+0x2b2>
 800386e:	3118      	adds	r1, #24
 8003870:	428a      	cmp	r2, r1
 8003872:	d010      	beq.n	8003896 <HAL_DMA_IRQHandler+0x2b2>
 8003874:	3118      	adds	r1, #24
 8003876:	428a      	cmp	r2, r1
 8003878:	d00d      	beq.n	8003896 <HAL_DMA_IRQHandler+0x2b2>
 800387a:	3118      	adds	r1, #24
 800387c:	428a      	cmp	r2, r1
 800387e:	d00a      	beq.n	8003896 <HAL_DMA_IRQHandler+0x2b2>
 8003880:	6813      	ldr	r3, [r2, #0]
 8003882:	e00c      	b.n	800389e <HAL_DMA_IRQHandler+0x2ba>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003884:	2301      	movs	r3, #1
 8003886:	fa03 f202 	lsl.w	r2, r3, r2
 800388a:	60ba      	str	r2, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800388c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800388e:	f043 0302 	orr.w	r3, r3, #2
 8003892:	6563      	str	r3, [r4, #84]	; 0x54
 8003894:	e7ba      	b.n	800380c <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	f012 0f02 	tst.w	r2, #2
 800389c:	d13d      	bne.n	800391a <HAL_DMA_IRQHandler+0x336>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800389e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	2210      	movs	r2, #16
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	4233      	tst	r3, r6
 80038ac:	d05f      	beq.n	800396e <HAL_DMA_IRQHandler+0x38a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80038ae:	6822      	ldr	r2, [r4, #0]
 80038b0:	4871      	ldr	r0, [pc, #452]	; (8003a78 <HAL_DMA_IRQHandler+0x494>)
 80038b2:	4972      	ldr	r1, [pc, #456]	; (8003a7c <HAL_DMA_IRQHandler+0x498>)
 80038b4:	428a      	cmp	r2, r1
 80038b6:	bf18      	it	ne
 80038b8:	4282      	cmpne	r2, r0
 80038ba:	d034      	beq.n	8003926 <HAL_DMA_IRQHandler+0x342>
 80038bc:	3118      	adds	r1, #24
 80038be:	428a      	cmp	r2, r1
 80038c0:	d031      	beq.n	8003926 <HAL_DMA_IRQHandler+0x342>
 80038c2:	3118      	adds	r1, #24
 80038c4:	428a      	cmp	r2, r1
 80038c6:	d02e      	beq.n	8003926 <HAL_DMA_IRQHandler+0x342>
 80038c8:	3118      	adds	r1, #24
 80038ca:	428a      	cmp	r2, r1
 80038cc:	d02b      	beq.n	8003926 <HAL_DMA_IRQHandler+0x342>
 80038ce:	3118      	adds	r1, #24
 80038d0:	428a      	cmp	r2, r1
 80038d2:	d028      	beq.n	8003926 <HAL_DMA_IRQHandler+0x342>
 80038d4:	3118      	adds	r1, #24
 80038d6:	428a      	cmp	r2, r1
 80038d8:	d025      	beq.n	8003926 <HAL_DMA_IRQHandler+0x342>
 80038da:	3118      	adds	r1, #24
 80038dc:	428a      	cmp	r2, r1
 80038de:	d022      	beq.n	8003926 <HAL_DMA_IRQHandler+0x342>
 80038e0:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80038e4:	428a      	cmp	r2, r1
 80038e6:	d01e      	beq.n	8003926 <HAL_DMA_IRQHandler+0x342>
 80038e8:	3118      	adds	r1, #24
 80038ea:	428a      	cmp	r2, r1
 80038ec:	d01b      	beq.n	8003926 <HAL_DMA_IRQHandler+0x342>
 80038ee:	3118      	adds	r1, #24
 80038f0:	428a      	cmp	r2, r1
 80038f2:	d018      	beq.n	8003926 <HAL_DMA_IRQHandler+0x342>
 80038f4:	3118      	adds	r1, #24
 80038f6:	428a      	cmp	r2, r1
 80038f8:	d015      	beq.n	8003926 <HAL_DMA_IRQHandler+0x342>
 80038fa:	3118      	adds	r1, #24
 80038fc:	428a      	cmp	r2, r1
 80038fe:	d012      	beq.n	8003926 <HAL_DMA_IRQHandler+0x342>
 8003900:	3118      	adds	r1, #24
 8003902:	428a      	cmp	r2, r1
 8003904:	d00f      	beq.n	8003926 <HAL_DMA_IRQHandler+0x342>
 8003906:	3118      	adds	r1, #24
 8003908:	428a      	cmp	r2, r1
 800390a:	d00c      	beq.n	8003926 <HAL_DMA_IRQHandler+0x342>
 800390c:	3118      	adds	r1, #24
 800390e:	428a      	cmp	r2, r1
 8003910:	d009      	beq.n	8003926 <HAL_DMA_IRQHandler+0x342>
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8003918:	e008      	b.n	800392c <HAL_DMA_IRQHandler+0x348>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800391a:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800391c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800391e:	f043 0304 	orr.w	r3, r3, #4
 8003922:	6563      	str	r3, [r4, #84]	; 0x54
 8003924:	e7bb      	b.n	800389e <HAL_DMA_IRQHandler+0x2ba>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800392c:	b1fa      	cbz	r2, 800396e <HAL_DMA_IRQHandler+0x38a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800392e:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003938:	d00d      	beq.n	8003956 <HAL_DMA_IRQHandler+0x372>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003940:	d104      	bne.n	800394c <HAL_DMA_IRQHandler+0x368>
            if(hdma->XferHalfCpltCallback != NULL)
 8003942:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003944:	b19b      	cbz	r3, 800396e <HAL_DMA_IRQHandler+0x38a>
              hdma->XferHalfCpltCallback(hdma);
 8003946:	4620      	mov	r0, r4
 8003948:	4798      	blx	r3
 800394a:	e010      	b.n	800396e <HAL_DMA_IRQHandler+0x38a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800394c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800394e:	b173      	cbz	r3, 800396e <HAL_DMA_IRQHandler+0x38a>
              hdma->XferM1HalfCpltCallback(hdma);
 8003950:	4620      	mov	r0, r4
 8003952:	4798      	blx	r3
 8003954:	e00b      	b.n	800396e <HAL_DMA_IRQHandler+0x38a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	f412 7f80 	tst.w	r2, #256	; 0x100
 800395c:	d103      	bne.n	8003966 <HAL_DMA_IRQHandler+0x382>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	f022 0208 	bic.w	r2, r2, #8
 8003964:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8003966:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003968:	b10b      	cbz	r3, 800396e <HAL_DMA_IRQHandler+0x38a>
            hdma->XferHalfCpltCallback(hdma);
 800396a:	4620      	mov	r0, r4
 800396c:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800396e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003970:	f003 031f 	and.w	r3, r3, #31
 8003974:	2220      	movs	r2, #32
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	4233      	tst	r3, r6
 800397c:	f000 8092 	beq.w	8003aa4 <HAL_DMA_IRQHandler+0x4c0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003980:	6822      	ldr	r2, [r4, #0]
 8003982:	483d      	ldr	r0, [pc, #244]	; (8003a78 <HAL_DMA_IRQHandler+0x494>)
 8003984:	493d      	ldr	r1, [pc, #244]	; (8003a7c <HAL_DMA_IRQHandler+0x498>)
 8003986:	428a      	cmp	r2, r1
 8003988:	bf18      	it	ne
 800398a:	4282      	cmpne	r2, r0
 800398c:	d02e      	beq.n	80039ec <HAL_DMA_IRQHandler+0x408>
 800398e:	3118      	adds	r1, #24
 8003990:	428a      	cmp	r2, r1
 8003992:	d02b      	beq.n	80039ec <HAL_DMA_IRQHandler+0x408>
 8003994:	3118      	adds	r1, #24
 8003996:	428a      	cmp	r2, r1
 8003998:	d028      	beq.n	80039ec <HAL_DMA_IRQHandler+0x408>
 800399a:	3118      	adds	r1, #24
 800399c:	428a      	cmp	r2, r1
 800399e:	d025      	beq.n	80039ec <HAL_DMA_IRQHandler+0x408>
 80039a0:	3118      	adds	r1, #24
 80039a2:	428a      	cmp	r2, r1
 80039a4:	d022      	beq.n	80039ec <HAL_DMA_IRQHandler+0x408>
 80039a6:	3118      	adds	r1, #24
 80039a8:	428a      	cmp	r2, r1
 80039aa:	d01f      	beq.n	80039ec <HAL_DMA_IRQHandler+0x408>
 80039ac:	3118      	adds	r1, #24
 80039ae:	428a      	cmp	r2, r1
 80039b0:	d01c      	beq.n	80039ec <HAL_DMA_IRQHandler+0x408>
 80039b2:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80039b6:	428a      	cmp	r2, r1
 80039b8:	d018      	beq.n	80039ec <HAL_DMA_IRQHandler+0x408>
 80039ba:	3118      	adds	r1, #24
 80039bc:	428a      	cmp	r2, r1
 80039be:	d015      	beq.n	80039ec <HAL_DMA_IRQHandler+0x408>
 80039c0:	3118      	adds	r1, #24
 80039c2:	428a      	cmp	r2, r1
 80039c4:	d012      	beq.n	80039ec <HAL_DMA_IRQHandler+0x408>
 80039c6:	3118      	adds	r1, #24
 80039c8:	428a      	cmp	r2, r1
 80039ca:	d00f      	beq.n	80039ec <HAL_DMA_IRQHandler+0x408>
 80039cc:	3118      	adds	r1, #24
 80039ce:	428a      	cmp	r2, r1
 80039d0:	d00c      	beq.n	80039ec <HAL_DMA_IRQHandler+0x408>
 80039d2:	3118      	adds	r1, #24
 80039d4:	428a      	cmp	r2, r1
 80039d6:	d009      	beq.n	80039ec <HAL_DMA_IRQHandler+0x408>
 80039d8:	3118      	adds	r1, #24
 80039da:	428a      	cmp	r2, r1
 80039dc:	d006      	beq.n	80039ec <HAL_DMA_IRQHandler+0x408>
 80039de:	3118      	adds	r1, #24
 80039e0:	428a      	cmp	r2, r1
 80039e2:	d003      	beq.n	80039ec <HAL_DMA_IRQHandler+0x408>
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80039ea:	e002      	b.n	80039f2 <HAL_DMA_IRQHandler+0x40e>
 80039ec:	6812      	ldr	r2, [r2, #0]
 80039ee:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80039f2:	2a00      	cmp	r2, #0
 80039f4:	d056      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x4c0>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039f6:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80039f8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d00e      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x43c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003a0a:	d039      	beq.n	8003a80 <HAL_DMA_IRQHandler+0x49c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003a12:	d12c      	bne.n	8003a6e <HAL_DMA_IRQHandler+0x48a>
            if(hdma->XferM1CpltCallback != NULL)
 8003a14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d044      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferM1CpltCallback(hdma);
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	4798      	blx	r3
 8003a1e:	e041      	b.n	8003aa4 <HAL_DMA_IRQHandler+0x4c0>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a20:	6822      	ldr	r2, [r4, #0]
 8003a22:	6813      	ldr	r3, [r2, #0]
 8003a24:	f023 0316 	bic.w	r3, r3, #22
 8003a28:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a2a:	6822      	ldr	r2, [r4, #0]
 8003a2c:	6953      	ldr	r3, [r2, #20]
 8003a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a32:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a36:	b1b3      	cbz	r3, 8003a66 <HAL_DMA_IRQHandler+0x482>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a38:	6822      	ldr	r2, [r4, #0]
 8003a3a:	6813      	ldr	r3, [r2, #0]
 8003a3c:	f023 0308 	bic.w	r3, r3, #8
 8003a40:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a42:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003a44:	f003 021f 	and.w	r2, r3, #31
 8003a48:	233f      	movs	r3, #63	; 0x3f
 8003a4a:	4093      	lsls	r3, r2
 8003a4c:	60bb      	str	r3, [r7, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8003a54:	2300      	movs	r3, #0
 8003a56:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8003a5a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d07f      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferAbortCallback(hdma);
 8003a60:	4620      	mov	r0, r4
 8003a62:	4798      	blx	r3
          return;
 8003a64:	e07c      	b.n	8003b60 <HAL_DMA_IRQHandler+0x57c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a66:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1e5      	bne.n	8003a38 <HAL_DMA_IRQHandler+0x454>
 8003a6c:	e7e9      	b.n	8003a42 <HAL_DMA_IRQHandler+0x45e>
            if(hdma->XferCpltCallback != NULL)
 8003a6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a70:	b1c3      	cbz	r3, 8003aa4 <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferCpltCallback(hdma);
 8003a72:	4620      	mov	r0, r4
 8003a74:	4798      	blx	r3
 8003a76:	e015      	b.n	8003aa4 <HAL_DMA_IRQHandler+0x4c0>
 8003a78:	40020010 	.word	0x40020010
 8003a7c:	40020028 	.word	0x40020028
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003a86:	d109      	bne.n	8003a9c <HAL_DMA_IRQHandler+0x4b8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	f022 0210 	bic.w	r2, r2, #16
 8003a8e:	601a      	str	r2, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8003a96:	2300      	movs	r3, #0
 8003a98:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferCpltCallback != NULL)
 8003a9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a9e:	b10b      	cbz	r3, 8003aa4 <HAL_DMA_IRQHandler+0x4c0>
            hdma->XferCpltCallback(hdma);
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003aa4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d05a      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x57c>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003aaa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003aac:	f013 0f01 	tst.w	r3, #1
 8003ab0:	d052      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x574>
        hdma->State = HAL_DMA_STATE_ABORT;
 8003ab2:	2304      	movs	r3, #4
 8003ab4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	4996      	ldr	r1, [pc, #600]	; (8003d14 <HAL_DMA_IRQHandler+0x730>)
 8003abc:	4a96      	ldr	r2, [pc, #600]	; (8003d18 <HAL_DMA_IRQHandler+0x734>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	bf18      	it	ne
 8003ac2:	428b      	cmpne	r3, r1
 8003ac4:	d02f      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x542>
 8003ac6:	3218      	adds	r2, #24
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d02c      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x542>
 8003acc:	3218      	adds	r2, #24
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d029      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x542>
 8003ad2:	3218      	adds	r2, #24
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d026      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x542>
 8003ad8:	3218      	adds	r2, #24
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d023      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x542>
 8003ade:	3218      	adds	r2, #24
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d020      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x542>
 8003ae4:	3218      	adds	r2, #24
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d01d      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x542>
 8003aea:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d019      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x542>
 8003af2:	3218      	adds	r2, #24
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d016      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x542>
 8003af8:	3218      	adds	r2, #24
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d013      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x542>
 8003afe:	3218      	adds	r2, #24
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d010      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x542>
 8003b04:	3218      	adds	r2, #24
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00d      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x542>
 8003b0a:	3218      	adds	r2, #24
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00a      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x542>
 8003b10:	3218      	adds	r2, #24
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d007      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x542>
 8003b16:	3218      	adds	r2, #24
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d004      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x542>
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	f022 0201 	bic.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	e003      	b.n	8003b2e <HAL_DMA_IRQHandler+0x54a>
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	f022 0201 	bic.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8003b2e:	9b01      	ldr	r3, [sp, #4]
 8003b30:	3301      	adds	r3, #1
 8003b32:	9301      	str	r3, [sp, #4]
 8003b34:	42ab      	cmp	r3, r5
 8003b36:	d804      	bhi.n	8003b42 <HAL_DMA_IRQHandler+0x55e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f013 0f01 	tst.w	r3, #1
 8003b40:	d1f5      	bne.n	8003b2e <HAL_DMA_IRQHandler+0x54a>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f013 0f01 	tst.w	r3, #1
 8003b4a:	d00b      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x580>
          hdma->State = HAL_DMA_STATE_ERROR;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8003b52:	2300      	movs	r3, #0
 8003b54:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8003b58:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003b5a:	b10b      	cbz	r3, 8003b60 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	4798      	blx	r3
}
 8003b60:	b003      	add	sp, #12
 8003b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8003b6a:	e7f2      	b.n	8003b52 <HAL_DMA_IRQHandler+0x56e>
          if(hdma->XferHalfCpltCallback != NULL)
 8003b6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f6      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferHalfCpltCallback(hdma);
 8003b72:	4620      	mov	r0, r4
 8003b74:	4798      	blx	r3
 8003b76:	e7f3      	b.n	8003b60 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b78:	f012 0f20 	tst.w	r2, #32
 8003b7c:	d13a      	bne.n	8003bf4 <HAL_DMA_IRQHandler+0x610>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b7e:	6823      	ldr	r3, [r4, #0]
 8003b80:	4964      	ldr	r1, [pc, #400]	; (8003d14 <HAL_DMA_IRQHandler+0x730>)
 8003b82:	4a65      	ldr	r2, [pc, #404]	; (8003d18 <HAL_DMA_IRQHandler+0x734>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	bf18      	it	ne
 8003b88:	428b      	cmpne	r3, r1
 8003b8a:	d02f      	beq.n	8003bec <HAL_DMA_IRQHandler+0x608>
 8003b8c:	3218      	adds	r2, #24
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d02c      	beq.n	8003bec <HAL_DMA_IRQHandler+0x608>
 8003b92:	3218      	adds	r2, #24
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d029      	beq.n	8003bec <HAL_DMA_IRQHandler+0x608>
 8003b98:	3218      	adds	r2, #24
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d026      	beq.n	8003bec <HAL_DMA_IRQHandler+0x608>
 8003b9e:	3218      	adds	r2, #24
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d023      	beq.n	8003bec <HAL_DMA_IRQHandler+0x608>
 8003ba4:	3218      	adds	r2, #24
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d020      	beq.n	8003bec <HAL_DMA_IRQHandler+0x608>
 8003baa:	3218      	adds	r2, #24
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d01d      	beq.n	8003bec <HAL_DMA_IRQHandler+0x608>
 8003bb0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d019      	beq.n	8003bec <HAL_DMA_IRQHandler+0x608>
 8003bb8:	3218      	adds	r2, #24
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d016      	beq.n	8003bec <HAL_DMA_IRQHandler+0x608>
 8003bbe:	3218      	adds	r2, #24
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d013      	beq.n	8003bec <HAL_DMA_IRQHandler+0x608>
 8003bc4:	3218      	adds	r2, #24
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d010      	beq.n	8003bec <HAL_DMA_IRQHandler+0x608>
 8003bca:	3218      	adds	r2, #24
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00d      	beq.n	8003bec <HAL_DMA_IRQHandler+0x608>
 8003bd0:	3218      	adds	r2, #24
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00a      	beq.n	8003bec <HAL_DMA_IRQHandler+0x608>
 8003bd6:	3218      	adds	r2, #24
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d007      	beq.n	8003bec <HAL_DMA_IRQHandler+0x608>
 8003bdc:	3218      	adds	r2, #24
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d004      	beq.n	8003bec <HAL_DMA_IRQHandler+0x608>
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	f022 0204 	bic.w	r2, r2, #4
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	e003      	b.n	8003bf4 <HAL_DMA_IRQHandler+0x610>
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	f022 0208 	bic.w	r2, r2, #8
 8003bf2:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8003bf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0b2      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferHalfCpltCallback(hdma);
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	4798      	blx	r3
 8003bfe:	e7af      	b.n	8003b60 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003c00:	2002      	movs	r0, #2
 8003c02:	4088      	lsls	r0, r1
 8003c04:	ea10 0f0c 	tst.w	r0, ip
 8003c08:	d060      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x6e8>
 8003c0a:	f012 0f02 	tst.w	r2, #2
 8003c0e:	d05d      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x6e8>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003c10:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c12:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003c16:	d00e      	beq.n	8003c36 <HAL_DMA_IRQHandler+0x652>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c18:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003c1c:	d105      	bne.n	8003c2a <HAL_DMA_IRQHandler+0x646>
          if(hdma->XferM1CpltCallback != NULL)
 8003c1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d09d      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1CpltCallback(hdma);
 8003c24:	4620      	mov	r0, r4
 8003c26:	4798      	blx	r3
 8003c28:	e79a      	b.n	8003b60 <HAL_DMA_IRQHandler+0x57c>
          if(hdma->XferCpltCallback != NULL)
 8003c2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d097      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferCpltCallback(hdma);
 8003c30:	4620      	mov	r0, r4
 8003c32:	4798      	blx	r3
 8003c34:	e794      	b.n	8003b60 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c36:	f012 0f20 	tst.w	r2, #32
 8003c3a:	d140      	bne.n	8003cbe <HAL_DMA_IRQHandler+0x6da>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	4935      	ldr	r1, [pc, #212]	; (8003d14 <HAL_DMA_IRQHandler+0x730>)
 8003c40:	4a35      	ldr	r2, [pc, #212]	; (8003d18 <HAL_DMA_IRQHandler+0x734>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	bf18      	it	ne
 8003c46:	428b      	cmpne	r3, r1
 8003c48:	d02f      	beq.n	8003caa <HAL_DMA_IRQHandler+0x6c6>
 8003c4a:	3218      	adds	r2, #24
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d02c      	beq.n	8003caa <HAL_DMA_IRQHandler+0x6c6>
 8003c50:	3218      	adds	r2, #24
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d029      	beq.n	8003caa <HAL_DMA_IRQHandler+0x6c6>
 8003c56:	3218      	adds	r2, #24
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d026      	beq.n	8003caa <HAL_DMA_IRQHandler+0x6c6>
 8003c5c:	3218      	adds	r2, #24
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d023      	beq.n	8003caa <HAL_DMA_IRQHandler+0x6c6>
 8003c62:	3218      	adds	r2, #24
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d020      	beq.n	8003caa <HAL_DMA_IRQHandler+0x6c6>
 8003c68:	3218      	adds	r2, #24
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d01d      	beq.n	8003caa <HAL_DMA_IRQHandler+0x6c6>
 8003c6e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d019      	beq.n	8003caa <HAL_DMA_IRQHandler+0x6c6>
 8003c76:	3218      	adds	r2, #24
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d016      	beq.n	8003caa <HAL_DMA_IRQHandler+0x6c6>
 8003c7c:	3218      	adds	r2, #24
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d013      	beq.n	8003caa <HAL_DMA_IRQHandler+0x6c6>
 8003c82:	3218      	adds	r2, #24
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d010      	beq.n	8003caa <HAL_DMA_IRQHandler+0x6c6>
 8003c88:	3218      	adds	r2, #24
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00d      	beq.n	8003caa <HAL_DMA_IRQHandler+0x6c6>
 8003c8e:	3218      	adds	r2, #24
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00a      	beq.n	8003caa <HAL_DMA_IRQHandler+0x6c6>
 8003c94:	3218      	adds	r2, #24
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d007      	beq.n	8003caa <HAL_DMA_IRQHandler+0x6c6>
 8003c9a:	3218      	adds	r2, #24
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d004      	beq.n	8003caa <HAL_DMA_IRQHandler+0x6c6>
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	f022 020a 	bic.w	r2, r2, #10
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	e003      	b.n	8003cb2 <HAL_DMA_IRQHandler+0x6ce>
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	f022 0214 	bic.w	r2, r2, #20
 8003cb0:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8003cbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f43f af4d 	beq.w	8003b60 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferCpltCallback(hdma);
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	4798      	blx	r3
 8003cca:	e749      	b.n	8003b60 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ccc:	2008      	movs	r0, #8
 8003cce:	fa00 f101 	lsl.w	r1, r0, r1
 8003cd2:	ea11 0f0c 	tst.w	r1, ip
 8003cd6:	f43f af43 	beq.w	8003b60 <HAL_DMA_IRQHandler+0x57c>
 8003cda:	f012 0f08 	tst.w	r2, #8
 8003cde:	f43f af3f 	beq.w	8003b60 <HAL_DMA_IRQHandler+0x57c>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	f022 020e 	bic.w	r2, r2, #14
 8003ce8:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003cea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003cec:	f003 031f 	and.w	r3, r3, #31
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cf8:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_READY;
 8003cfa:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if (hdma->XferErrorCallback != NULL)
 8003d04:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f43f af2a 	beq.w	8003b60 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	4798      	blx	r3
  }
 8003d10:	e726      	b.n	8003b60 <HAL_DMA_IRQHandler+0x57c>
 8003d12:	bf00      	nop
 8003d14:	40020010 	.word	0x40020010
 8003d18:	40020028 	.word	0x40020028

08003d1c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8003d1c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8003d1e:	4770      	bx	lr

08003d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d22:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8003d24:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d26:	e06b      	b.n	8003e00 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d28:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d2a:	005e      	lsls	r6, r3, #1
 8003d2c:	2403      	movs	r4, #3
 8003d2e:	40b4      	lsls	r4, r6
 8003d30:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d34:	68cc      	ldr	r4, [r1, #12]
 8003d36:	40b4      	lsls	r4, r6
 8003d38:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003d3a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d3c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d3e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d42:	684c      	ldr	r4, [r1, #4]
 8003d44:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003d48:	409c      	lsls	r4, r3
 8003d4a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8003d4e:	6044      	str	r4, [r0, #4]
 8003d50:	e068      	b.n	8003e24 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d52:	08dd      	lsrs	r5, r3, #3
 8003d54:	3508      	adds	r5, #8
 8003d56:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d5a:	f003 0407 	and.w	r4, r3, #7
 8003d5e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003d62:	240f      	movs	r4, #15
 8003d64:	fa04 f40c 	lsl.w	r4, r4, ip
 8003d68:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d6c:	690c      	ldr	r4, [r1, #16]
 8003d6e:	fa04 f40c 	lsl.w	r4, r4, ip
 8003d72:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8003d76:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003d7a:	e06b      	b.n	8003e54 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d7c:	2409      	movs	r4, #9
 8003d7e:	e000      	b.n	8003d82 <HAL_GPIO_Init+0x62>
 8003d80:	2400      	movs	r4, #0
 8003d82:	fa04 f40e 	lsl.w	r4, r4, lr
 8003d86:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d88:	f10c 0c02 	add.w	ip, ip, #2
 8003d8c:	4d66      	ldr	r5, [pc, #408]	; (8003f28 <HAL_GPIO_Init+0x208>)
 8003d8e:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d92:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8003d96:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8003d98:	43d4      	mvns	r4, r2
 8003d9a:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d9e:	684f      	ldr	r7, [r1, #4]
 8003da0:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003da4:	d001      	beq.n	8003daa <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 8003da6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003daa:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8003dae:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8003db0:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003db2:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003db6:	684f      	ldr	r7, [r1, #4]
 8003db8:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8003dbc:	d001      	beq.n	8003dc2 <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 8003dbe:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003dc2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8003dc6:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003dc8:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 8003dcc:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dd0:	684f      	ldr	r7, [r1, #4]
 8003dd2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003dd6:	d001      	beq.n	8003ddc <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8003dd8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ddc:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8003de0:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003de4:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 8003de8:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dea:	684e      	ldr	r6, [r1, #4]
 8003dec:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8003df0:	d001      	beq.n	8003df6 <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 8003df2:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003df6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dfa:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 8003dfe:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e00:	680a      	ldr	r2, [r1, #0]
 8003e02:	fa32 f403 	lsrs.w	r4, r2, r3
 8003e06:	f000 808c 	beq.w	8003f22 <HAL_GPIO_Init+0x202>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e0a:	f04f 0c01 	mov.w	ip, #1
 8003e0e:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 8003e12:	ea1c 0202 	ands.w	r2, ip, r2
 8003e16:	d0f2      	beq.n	8003dfe <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e18:	684c      	ldr	r4, [r1, #4]
 8003e1a:	f004 0403 	and.w	r4, r4, #3
 8003e1e:	3c01      	subs	r4, #1
 8003e20:	2c01      	cmp	r4, #1
 8003e22:	d981      	bls.n	8003d28 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e24:	684c      	ldr	r4, [r1, #4]
 8003e26:	f004 0403 	and.w	r4, r4, #3
 8003e2a:	2c03      	cmp	r4, #3
 8003e2c:	d00c      	beq.n	8003e48 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 8003e2e:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e30:	005d      	lsls	r5, r3, #1
 8003e32:	f04f 0c03 	mov.w	ip, #3
 8003e36:	fa0c fc05 	lsl.w	ip, ip, r5
 8003e3a:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e3e:	688c      	ldr	r4, [r1, #8]
 8003e40:	40ac      	lsls	r4, r5
 8003e42:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 8003e46:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e48:	684c      	ldr	r4, [r1, #4]
 8003e4a:	f004 0403 	and.w	r4, r4, #3
 8003e4e:	2c02      	cmp	r4, #2
 8003e50:	f43f af7f 	beq.w	8003d52 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8003e54:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e56:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003e5a:	f04f 0c03 	mov.w	ip, #3
 8003e5e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003e62:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e66:	684c      	ldr	r4, [r1, #4]
 8003e68:	f004 0403 	and.w	r4, r4, #3
 8003e6c:	fa04 f40e 	lsl.w	r4, r4, lr
 8003e70:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003e74:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e76:	684c      	ldr	r4, [r1, #4]
 8003e78:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8003e7c:	d0bf      	beq.n	8003dfe <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e7e:	4c2b      	ldr	r4, [pc, #172]	; (8003f2c <HAL_GPIO_Init+0x20c>)
 8003e80:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8003e84:	f045 0502 	orr.w	r5, r5, #2
 8003e88:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 8003e8c:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8003e90:	f004 0402 	and.w	r4, r4, #2
 8003e94:	9401      	str	r4, [sp, #4]
 8003e96:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003e98:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003e9c:	f10c 0502 	add.w	r5, ip, #2
 8003ea0:	4c21      	ldr	r4, [pc, #132]	; (8003f28 <HAL_GPIO_Init+0x208>)
 8003ea2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ea6:	f003 0403 	and.w	r4, r3, #3
 8003eaa:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003eae:	240f      	movs	r4, #15
 8003eb0:	fa04 f40e 	lsl.w	r4, r4, lr
 8003eb4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003eb8:	4c1d      	ldr	r4, [pc, #116]	; (8003f30 <HAL_GPIO_Init+0x210>)
 8003eba:	42a0      	cmp	r0, r4
 8003ebc:	f43f af60 	beq.w	8003d80 <HAL_GPIO_Init+0x60>
 8003ec0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003ec4:	42a0      	cmp	r0, r4
 8003ec6:	d01e      	beq.n	8003f06 <HAL_GPIO_Init+0x1e6>
 8003ec8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003ecc:	42a0      	cmp	r0, r4
 8003ece:	d01c      	beq.n	8003f0a <HAL_GPIO_Init+0x1ea>
 8003ed0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003ed4:	42a0      	cmp	r0, r4
 8003ed6:	d01a      	beq.n	8003f0e <HAL_GPIO_Init+0x1ee>
 8003ed8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003edc:	42a0      	cmp	r0, r4
 8003ede:	d018      	beq.n	8003f12 <HAL_GPIO_Init+0x1f2>
 8003ee0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003ee4:	42a0      	cmp	r0, r4
 8003ee6:	d016      	beq.n	8003f16 <HAL_GPIO_Init+0x1f6>
 8003ee8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003eec:	42a0      	cmp	r0, r4
 8003eee:	d014      	beq.n	8003f1a <HAL_GPIO_Init+0x1fa>
 8003ef0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003ef4:	42a0      	cmp	r0, r4
 8003ef6:	d012      	beq.n	8003f1e <HAL_GPIO_Init+0x1fe>
 8003ef8:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003efc:	42a0      	cmp	r0, r4
 8003efe:	f43f af3d 	beq.w	8003d7c <HAL_GPIO_Init+0x5c>
 8003f02:	240a      	movs	r4, #10
 8003f04:	e73d      	b.n	8003d82 <HAL_GPIO_Init+0x62>
 8003f06:	2401      	movs	r4, #1
 8003f08:	e73b      	b.n	8003d82 <HAL_GPIO_Init+0x62>
 8003f0a:	2402      	movs	r4, #2
 8003f0c:	e739      	b.n	8003d82 <HAL_GPIO_Init+0x62>
 8003f0e:	2403      	movs	r4, #3
 8003f10:	e737      	b.n	8003d82 <HAL_GPIO_Init+0x62>
 8003f12:	2404      	movs	r4, #4
 8003f14:	e735      	b.n	8003d82 <HAL_GPIO_Init+0x62>
 8003f16:	2405      	movs	r4, #5
 8003f18:	e733      	b.n	8003d82 <HAL_GPIO_Init+0x62>
 8003f1a:	2406      	movs	r4, #6
 8003f1c:	e731      	b.n	8003d82 <HAL_GPIO_Init+0x62>
 8003f1e:	2407      	movs	r4, #7
 8003f20:	e72f      	b.n	8003d82 <HAL_GPIO_Init+0x62>
  }
}
 8003f22:	b003      	add	sp, #12
 8003f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f26:	bf00      	nop
 8003f28:	58000400 	.word	0x58000400
 8003f2c:	58024400 	.word	0x58024400
 8003f30:	58020000 	.word	0x58020000

08003f34 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f34:	b10a      	cbz	r2, 8003f3a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f36:	6181      	str	r1, [r0, #24]
 8003f38:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003f3a:	0409      	lsls	r1, r1, #16
 8003f3c:	6181      	str	r1, [r0, #24]
  }
}
 8003f3e:	4770      	bx	lr

08003f40 <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003f40:	4b13      	ldr	r3, [pc, #76]	; (8003f90 <HAL_PWREx_ConfigSupply+0x50>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f013 0f04 	tst.w	r3, #4
 8003f48:	d107      	bne.n	8003f5a <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003f4a:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <HAL_PWREx_ConfigSupply+0x50>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	4283      	cmp	r3, r0
 8003f54:	d01a      	beq.n	8003f8c <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003f56:	2001      	movs	r0, #1
 8003f58:	4770      	bx	lr
{
 8003f5a:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003f5c:	4a0c      	ldr	r2, [pc, #48]	; (8003f90 <HAL_PWREx_ConfigSupply+0x50>)
 8003f5e:	68d3      	ldr	r3, [r2, #12]
 8003f60:	f023 0307 	bic.w	r3, r3, #7
 8003f64:	4318      	orrs	r0, r3
 8003f66:	60d0      	str	r0, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003f68:	f7fd fb12 	bl	8001590 <HAL_GetTick>
 8003f6c:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f6e:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <HAL_PWREx_ConfigSupply+0x50>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003f76:	d107      	bne.n	8003f88 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f78:	f7fd fb0a 	bl	8001590 <HAL_GetTick>
 8003f7c:	1b00      	subs	r0, r0, r4
 8003f7e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003f82:	d9f4      	bls.n	8003f6e <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 8003f84:	2001      	movs	r0, #1
 8003f86:	e000      	b.n	8003f8a <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003f88:	2000      	movs	r0, #0
}
 8003f8a:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8003f8c:	2000      	movs	r0, #0
}
 8003f8e:	4770      	bx	lr
 8003f90:	58024800 	.word	0x58024800

08003f94 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f94:	2800      	cmp	r0, #0
 8003f96:	f000 82d7 	beq.w	8004548 <HAL_RCC_OscConfig+0x5b4>
{
 8003f9a:	b538      	push	{r3, r4, r5, lr}
 8003f9c:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f9e:	6803      	ldr	r3, [r0, #0]
 8003fa0:	f013 0f01 	tst.w	r3, #1
 8003fa4:	d025      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fa6:	4aa0      	ldr	r2, [pc, #640]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 8003fa8:	6913      	ldr	r3, [r2, #16]
 8003faa:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fae:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003fb0:	2b10      	cmp	r3, #16
 8003fb2:	d015      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x4c>
 8003fb4:	2b18      	cmp	r3, #24
 8003fb6:	d00f      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fb8:	6863      	ldr	r3, [r4, #4]
 8003fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fbe:	d03f      	beq.n	8004040 <HAL_RCC_OscConfig+0xac>
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d153      	bne.n	800406c <HAL_RCC_OscConfig+0xd8>
 8003fc4:	4b98      	ldr	r3, [pc, #608]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	e038      	b.n	800404a <HAL_RCC_OscConfig+0xb6>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003fd8:	f002 0203 	and.w	r2, r2, #3
 8003fdc:	2a02      	cmp	r2, #2
 8003fde:	d1eb      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x24>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe0:	4b91      	ldr	r3, [pc, #580]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003fe8:	d003      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x5e>
 8003fea:	6863      	ldr	r3, [r4, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 82ad 	beq.w	800454c <HAL_RCC_OscConfig+0x5b8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	f013 0f02 	tst.w	r3, #2
 8003ff8:	f000 8088 	beq.w	800410c <HAL_RCC_OscConfig+0x178>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ffc:	4a8a      	ldr	r2, [pc, #552]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 8003ffe:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004000:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004002:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8004006:	d05a      	beq.n	80040be <HAL_RCC_OscConfig+0x12a>
 8004008:	2b18      	cmp	r3, #24
 800400a:	d055      	beq.n	80040b8 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800400c:	68e3      	ldr	r3, [r4, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 80a9 	beq.w	8004166 <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004014:	4984      	ldr	r1, [pc, #528]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 8004016:	680a      	ldr	r2, [r1, #0]
 8004018:	f022 0219 	bic.w	r2, r2, #25
 800401c:	4313      	orrs	r3, r2
 800401e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004020:	f7fd fab6 	bl	8001590 <HAL_GetTick>
 8004024:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004026:	4b80      	ldr	r3, [pc, #512]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f013 0f04 	tst.w	r3, #4
 800402e:	f040 8091 	bne.w	8004154 <HAL_RCC_OscConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004032:	f7fd faad 	bl	8001590 <HAL_GetTick>
 8004036:	1b40      	subs	r0, r0, r5
 8004038:	2802      	cmp	r0, #2
 800403a:	d9f4      	bls.n	8004026 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 800403c:	2003      	movs	r0, #3
 800403e:	e28c      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004040:	4a79      	ldr	r2, [pc, #484]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 8004042:	6813      	ldr	r3, [r2, #0]
 8004044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004048:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800404a:	6863      	ldr	r3, [r4, #4]
 800404c:	b32b      	cbz	r3, 800409a <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 800404e:	f7fd fa9f 	bl	8001590 <HAL_GetTick>
 8004052:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004054:	4b74      	ldr	r3, [pc, #464]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800405c:	d1c9      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800405e:	f7fd fa97 	bl	8001590 <HAL_GetTick>
 8004062:	1b40      	subs	r0, r0, r5
 8004064:	2864      	cmp	r0, #100	; 0x64
 8004066:	d9f5      	bls.n	8004054 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8004068:	2003      	movs	r0, #3
 800406a:	e276      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800406c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004070:	d009      	beq.n	8004086 <HAL_RCC_OscConfig+0xf2>
 8004072:	4b6d      	ldr	r3, [pc, #436]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	e7e1      	b.n	800404a <HAL_RCC_OscConfig+0xb6>
 8004086:	4b68      	ldr	r3, [pc, #416]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	e7d7      	b.n	800404a <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 800409a:	f7fd fa79 	bl	8001590 <HAL_GetTick>
 800409e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040a0:	4b61      	ldr	r3, [pc, #388]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80040a8:	d0a3      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040aa:	f7fd fa71 	bl	8001590 <HAL_GetTick>
 80040ae:	1b40      	subs	r0, r0, r5
 80040b0:	2864      	cmp	r0, #100	; 0x64
 80040b2:	d9f5      	bls.n	80040a0 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 80040b4:	2003      	movs	r0, #3
 80040b6:	e250      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80040b8:	f012 0f03 	tst.w	r2, #3
 80040bc:	d1a6      	bne.n	800400c <HAL_RCC_OscConfig+0x78>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040be:	4b5a      	ldr	r3, [pc, #360]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f013 0f04 	tst.w	r3, #4
 80040c6:	d003      	beq.n	80040d0 <HAL_RCC_OscConfig+0x13c>
 80040c8:	68e3      	ldr	r3, [r4, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8240 	beq.w	8004550 <HAL_RCC_OscConfig+0x5bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80040d0:	4a55      	ldr	r2, [pc, #340]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 80040d2:	6813      	ldr	r3, [r2, #0]
 80040d4:	f023 0319 	bic.w	r3, r3, #25
 80040d8:	68e1      	ldr	r1, [r4, #12]
 80040da:	430b      	orrs	r3, r1
 80040dc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80040de:	f7fd fa57 	bl	8001590 <HAL_GetTick>
 80040e2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040e4:	4b50      	ldr	r3, [pc, #320]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f013 0f04 	tst.w	r3, #4
 80040ec:	d106      	bne.n	80040fc <HAL_RCC_OscConfig+0x168>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ee:	f7fd fa4f 	bl	8001590 <HAL_GetTick>
 80040f2:	1b40      	subs	r0, r0, r5
 80040f4:	2802      	cmp	r0, #2
 80040f6:	d9f5      	bls.n	80040e4 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 80040f8:	2003      	movs	r0, #3
 80040fa:	e22e      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fc:	4a4a      	ldr	r2, [pc, #296]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 80040fe:	6853      	ldr	r3, [r2, #4]
 8004100:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004104:	6921      	ldr	r1, [r4, #16]
 8004106:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800410a:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	f013 0f10 	tst.w	r3, #16
 8004112:	d051      	beq.n	80041b8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004114:	4a44      	ldr	r2, [pc, #272]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 8004116:	6913      	ldr	r3, [r2, #16]
 8004118:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800411c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800411e:	2b08      	cmp	r3, #8
 8004120:	d039      	beq.n	8004196 <HAL_RCC_OscConfig+0x202>
 8004122:	2b18      	cmp	r3, #24
 8004124:	d033      	beq.n	800418e <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004126:	69e3      	ldr	r3, [r4, #28]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d069      	beq.n	8004200 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800412c:	4a3e      	ldr	r2, [pc, #248]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 800412e:	6813      	ldr	r3, [r2, #0]
 8004130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004136:	f7fd fa2b 	bl	8001590 <HAL_GetTick>
 800413a:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800413c:	4b3a      	ldr	r3, [pc, #232]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004144:	d153      	bne.n	80041ee <HAL_RCC_OscConfig+0x25a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004146:	f7fd fa23 	bl	8001590 <HAL_GetTick>
 800414a:	1b40      	subs	r0, r0, r5
 800414c:	2802      	cmp	r0, #2
 800414e:	d9f5      	bls.n	800413c <HAL_RCC_OscConfig+0x1a8>
          {
            return HAL_TIMEOUT;
 8004150:	2003      	movs	r0, #3
 8004152:	e202      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004154:	4a34      	ldr	r2, [pc, #208]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 8004156:	6853      	ldr	r3, [r2, #4]
 8004158:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800415c:	6921      	ldr	r1, [r4, #16]
 800415e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004162:	6053      	str	r3, [r2, #4]
 8004164:	e7d2      	b.n	800410c <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_DISABLE();
 8004166:	4a30      	ldr	r2, [pc, #192]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 8004168:	6813      	ldr	r3, [r2, #0]
 800416a:	f023 0301 	bic.w	r3, r3, #1
 800416e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004170:	f7fd fa0e 	bl	8001590 <HAL_GetTick>
 8004174:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004176:	4b2c      	ldr	r3, [pc, #176]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f013 0f04 	tst.w	r3, #4
 800417e:	d0c5      	beq.n	800410c <HAL_RCC_OscConfig+0x178>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004180:	f7fd fa06 	bl	8001590 <HAL_GetTick>
 8004184:	1b40      	subs	r0, r0, r5
 8004186:	2802      	cmp	r0, #2
 8004188:	d9f5      	bls.n	8004176 <HAL_RCC_OscConfig+0x1e2>
            return HAL_TIMEOUT;
 800418a:	2003      	movs	r0, #3
 800418c:	e1e5      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800418e:	f002 0203 	and.w	r2, r2, #3
 8004192:	2a01      	cmp	r2, #1
 8004194:	d1c7      	bne.n	8004126 <HAL_RCC_OscConfig+0x192>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004196:	4b24      	ldr	r3, [pc, #144]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800419e:	d003      	beq.n	80041a8 <HAL_RCC_OscConfig+0x214>
 80041a0:	69e3      	ldr	r3, [r4, #28]
 80041a2:	2b80      	cmp	r3, #128	; 0x80
 80041a4:	f040 81d6 	bne.w	8004554 <HAL_RCC_OscConfig+0x5c0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041a8:	4a1f      	ldr	r2, [pc, #124]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 80041aa:	68d3      	ldr	r3, [r2, #12]
 80041ac:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80041b0:	6a21      	ldr	r1, [r4, #32]
 80041b2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80041b6:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	f013 0f08 	tst.w	r3, #8
 80041be:	d049      	beq.n	8004254 <HAL_RCC_OscConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041c0:	6963      	ldr	r3, [r4, #20]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d032      	beq.n	800422c <HAL_RCC_OscConfig+0x298>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041c6:	4a18      	ldr	r2, [pc, #96]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 80041c8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d0:	f7fd f9de 	bl	8001590 <HAL_GetTick>
 80041d4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041d6:	4b14      	ldr	r3, [pc, #80]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 80041d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041da:	f013 0f02 	tst.w	r3, #2
 80041de:	d139      	bne.n	8004254 <HAL_RCC_OscConfig+0x2c0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041e0:	f7fd f9d6 	bl	8001590 <HAL_GetTick>
 80041e4:	1b40      	subs	r0, r0, r5
 80041e6:	2802      	cmp	r0, #2
 80041e8:	d9f5      	bls.n	80041d6 <HAL_RCC_OscConfig+0x242>
        {
          return HAL_TIMEOUT;
 80041ea:	2003      	movs	r0, #3
 80041ec:	e1b5      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041ee:	4a0e      	ldr	r2, [pc, #56]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 80041f0:	68d3      	ldr	r3, [r2, #12]
 80041f2:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80041f6:	6a21      	ldr	r1, [r4, #32]
 80041f8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80041fc:	60d3      	str	r3, [r2, #12]
 80041fe:	e7db      	b.n	80041b8 <HAL_RCC_OscConfig+0x224>
        __HAL_RCC_CSI_DISABLE();
 8004200:	4a09      	ldr	r2, [pc, #36]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 8004202:	6813      	ldr	r3, [r2, #0]
 8004204:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004208:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800420a:	f7fd f9c1 	bl	8001590 <HAL_GetTick>
 800420e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <HAL_RCC_OscConfig+0x294>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004218:	d0ce      	beq.n	80041b8 <HAL_RCC_OscConfig+0x224>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800421a:	f7fd f9b9 	bl	8001590 <HAL_GetTick>
 800421e:	1b40      	subs	r0, r0, r5
 8004220:	2802      	cmp	r0, #2
 8004222:	d9f5      	bls.n	8004210 <HAL_RCC_OscConfig+0x27c>
            return HAL_TIMEOUT;
 8004224:	2003      	movs	r0, #3
 8004226:	e198      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
 8004228:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800422c:	4a9d      	ldr	r2, [pc, #628]	; (80044a4 <HAL_RCC_OscConfig+0x510>)
 800422e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004230:	f023 0301 	bic.w	r3, r3, #1
 8004234:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004236:	f7fd f9ab 	bl	8001590 <HAL_GetTick>
 800423a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800423c:	4b99      	ldr	r3, [pc, #612]	; (80044a4 <HAL_RCC_OscConfig+0x510>)
 800423e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004240:	f013 0f02 	tst.w	r3, #2
 8004244:	d006      	beq.n	8004254 <HAL_RCC_OscConfig+0x2c0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004246:	f7fd f9a3 	bl	8001590 <HAL_GetTick>
 800424a:	1b40      	subs	r0, r0, r5
 800424c:	2802      	cmp	r0, #2
 800424e:	d9f5      	bls.n	800423c <HAL_RCC_OscConfig+0x2a8>
        {
          return HAL_TIMEOUT;
 8004250:	2003      	movs	r0, #3
 8004252:	e182      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	f013 0f20 	tst.w	r3, #32
 800425a:	d029      	beq.n	80042b0 <HAL_RCC_OscConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800425c:	69a3      	ldr	r3, [r4, #24]
 800425e:	b19b      	cbz	r3, 8004288 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004260:	4a90      	ldr	r2, [pc, #576]	; (80044a4 <HAL_RCC_OscConfig+0x510>)
 8004262:	6813      	ldr	r3, [r2, #0]
 8004264:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004268:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800426a:	f7fd f991 	bl	8001590 <HAL_GetTick>
 800426e:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004270:	4b8c      	ldr	r3, [pc, #560]	; (80044a4 <HAL_RCC_OscConfig+0x510>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004278:	d11a      	bne.n	80042b0 <HAL_RCC_OscConfig+0x31c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800427a:	f7fd f989 	bl	8001590 <HAL_GetTick>
 800427e:	1b40      	subs	r0, r0, r5
 8004280:	2802      	cmp	r0, #2
 8004282:	d9f5      	bls.n	8004270 <HAL_RCC_OscConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 8004284:	2003      	movs	r0, #3
 8004286:	e168      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004288:	4a86      	ldr	r2, [pc, #536]	; (80044a4 <HAL_RCC_OscConfig+0x510>)
 800428a:	6813      	ldr	r3, [r2, #0]
 800428c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004290:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004292:	f7fd f97d 	bl	8001590 <HAL_GetTick>
 8004296:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004298:	4b82      	ldr	r3, [pc, #520]	; (80044a4 <HAL_RCC_OscConfig+0x510>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80042a0:	d006      	beq.n	80042b0 <HAL_RCC_OscConfig+0x31c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042a2:	f7fd f975 	bl	8001590 <HAL_GetTick>
 80042a6:	1b40      	subs	r0, r0, r5
 80042a8:	2802      	cmp	r0, #2
 80042aa:	d9f5      	bls.n	8004298 <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 80042ac:	2003      	movs	r0, #3
 80042ae:	e154      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042b0:	6823      	ldr	r3, [r4, #0]
 80042b2:	f013 0f04 	tst.w	r3, #4
 80042b6:	d121      	bne.n	80042fc <HAL_RCC_OscConfig+0x368>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 814c 	beq.w	8004558 <HAL_RCC_OscConfig+0x5c4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80042c0:	4a78      	ldr	r2, [pc, #480]	; (80044a4 <HAL_RCC_OscConfig+0x510>)
 80042c2:	6912      	ldr	r2, [r2, #16]
 80042c4:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80042c8:	2a18      	cmp	r2, #24
 80042ca:	f000 80f3 	beq.w	80044b4 <HAL_RCC_OscConfig+0x520>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d075      	beq.n	80043be <HAL_RCC_OscConfig+0x42a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d2:	4a74      	ldr	r2, [pc, #464]	; (80044a4 <HAL_RCC_OscConfig+0x510>)
 80042d4:	6813      	ldr	r3, [r2, #0]
 80042d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fd f958 	bl	8001590 <HAL_GetTick>
 80042e0:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042e2:	4b70      	ldr	r3, [pc, #448]	; (80044a4 <HAL_RCC_OscConfig+0x510>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80042ea:	f000 80d8 	beq.w	800449e <HAL_RCC_OscConfig+0x50a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ee:	f7fd f94f 	bl	8001590 <HAL_GetTick>
 80042f2:	1b00      	subs	r0, r0, r4
 80042f4:	2802      	cmp	r0, #2
 80042f6:	d9f4      	bls.n	80042e2 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80042f8:	2003      	movs	r0, #3
 80042fa:	e12e      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
    PWR->CR1 |= PWR_CR1_DBP;
 80042fc:	4a6a      	ldr	r2, [pc, #424]	; (80044a8 <HAL_RCC_OscConfig+0x514>)
 80042fe:	6813      	ldr	r3, [r2, #0]
 8004300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004304:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004306:	f7fd f943 	bl	8001590 <HAL_GetTick>
 800430a:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800430c:	4b66      	ldr	r3, [pc, #408]	; (80044a8 <HAL_RCC_OscConfig+0x514>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004314:	d106      	bne.n	8004324 <HAL_RCC_OscConfig+0x390>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004316:	f7fd f93b 	bl	8001590 <HAL_GetTick>
 800431a:	1b40      	subs	r0, r0, r5
 800431c:	2864      	cmp	r0, #100	; 0x64
 800431e:	d9f5      	bls.n	800430c <HAL_RCC_OscConfig+0x378>
        return HAL_TIMEOUT;
 8004320:	2003      	movs	r0, #3
 8004322:	e11a      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004324:	68a3      	ldr	r3, [r4, #8]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d00a      	beq.n	8004340 <HAL_RCC_OscConfig+0x3ac>
 800432a:	bb0b      	cbnz	r3, 8004370 <HAL_RCC_OscConfig+0x3dc>
 800432c:	4b5d      	ldr	r3, [pc, #372]	; (80044a4 <HAL_RCC_OscConfig+0x510>)
 800432e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004330:	f022 0201 	bic.w	r2, r2, #1
 8004334:	671a      	str	r2, [r3, #112]	; 0x70
 8004336:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004338:	f022 0204 	bic.w	r2, r2, #4
 800433c:	671a      	str	r2, [r3, #112]	; 0x70
 800433e:	e004      	b.n	800434a <HAL_RCC_OscConfig+0x3b6>
 8004340:	4a58      	ldr	r2, [pc, #352]	; (80044a4 <HAL_RCC_OscConfig+0x510>)
 8004342:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800434a:	68a3      	ldr	r3, [r4, #8]
 800434c:	b333      	cbz	r3, 800439c <HAL_RCC_OscConfig+0x408>
      tickstart = HAL_GetTick();
 800434e:	f7fd f91f 	bl	8001590 <HAL_GetTick>
 8004352:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004354:	4b53      	ldr	r3, [pc, #332]	; (80044a4 <HAL_RCC_OscConfig+0x510>)
 8004356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004358:	f013 0f02 	tst.w	r3, #2
 800435c:	d1ac      	bne.n	80042b8 <HAL_RCC_OscConfig+0x324>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800435e:	f7fd f917 	bl	8001590 <HAL_GetTick>
 8004362:	1b40      	subs	r0, r0, r5
 8004364:	f241 3388 	movw	r3, #5000	; 0x1388
 8004368:	4298      	cmp	r0, r3
 800436a:	d9f3      	bls.n	8004354 <HAL_RCC_OscConfig+0x3c0>
          return HAL_TIMEOUT;
 800436c:	2003      	movs	r0, #3
 800436e:	e0f4      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004370:	2b05      	cmp	r3, #5
 8004372:	d009      	beq.n	8004388 <HAL_RCC_OscConfig+0x3f4>
 8004374:	4b4b      	ldr	r3, [pc, #300]	; (80044a4 <HAL_RCC_OscConfig+0x510>)
 8004376:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004378:	f022 0201 	bic.w	r2, r2, #1
 800437c:	671a      	str	r2, [r3, #112]	; 0x70
 800437e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004380:	f022 0204 	bic.w	r2, r2, #4
 8004384:	671a      	str	r2, [r3, #112]	; 0x70
 8004386:	e7e0      	b.n	800434a <HAL_RCC_OscConfig+0x3b6>
 8004388:	4b46      	ldr	r3, [pc, #280]	; (80044a4 <HAL_RCC_OscConfig+0x510>)
 800438a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800438c:	f042 0204 	orr.w	r2, r2, #4
 8004390:	671a      	str	r2, [r3, #112]	; 0x70
 8004392:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004394:	f042 0201 	orr.w	r2, r2, #1
 8004398:	671a      	str	r2, [r3, #112]	; 0x70
 800439a:	e7d6      	b.n	800434a <HAL_RCC_OscConfig+0x3b6>
      tickstart = HAL_GetTick();
 800439c:	f7fd f8f8 	bl	8001590 <HAL_GetTick>
 80043a0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043a2:	4b40      	ldr	r3, [pc, #256]	; (80044a4 <HAL_RCC_OscConfig+0x510>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	f013 0f02 	tst.w	r3, #2
 80043aa:	d085      	beq.n	80042b8 <HAL_RCC_OscConfig+0x324>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ac:	f7fd f8f0 	bl	8001590 <HAL_GetTick>
 80043b0:	1b40      	subs	r0, r0, r5
 80043b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80043b6:	4298      	cmp	r0, r3
 80043b8:	d9f3      	bls.n	80043a2 <HAL_RCC_OscConfig+0x40e>
          return HAL_TIMEOUT;
 80043ba:	2003      	movs	r0, #3
 80043bc:	e0cd      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
        __HAL_RCC_PLL_DISABLE();
 80043be:	4a39      	ldr	r2, [pc, #228]	; (80044a4 <HAL_RCC_OscConfig+0x510>)
 80043c0:	6813      	ldr	r3, [r2, #0]
 80043c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043c6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80043c8:	f7fd f8e2 	bl	8001590 <HAL_GetTick>
 80043cc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043ce:	4b35      	ldr	r3, [pc, #212]	; (80044a4 <HAL_RCC_OscConfig+0x510>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80043d6:	d006      	beq.n	80043e6 <HAL_RCC_OscConfig+0x452>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d8:	f7fd f8da 	bl	8001590 <HAL_GetTick>
 80043dc:	1b40      	subs	r0, r0, r5
 80043de:	2802      	cmp	r0, #2
 80043e0:	d9f5      	bls.n	80043ce <HAL_RCC_OscConfig+0x43a>
            return HAL_TIMEOUT;
 80043e2:	2003      	movs	r0, #3
 80043e4:	e0b9      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043e6:	4b2f      	ldr	r3, [pc, #188]	; (80044a4 <HAL_RCC_OscConfig+0x510>)
 80043e8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80043ea:	4a30      	ldr	r2, [pc, #192]	; (80044ac <HAL_RCC_OscConfig+0x518>)
 80043ec:	400a      	ands	r2, r1
 80043ee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80043f0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80043f2:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80043f6:	430a      	orrs	r2, r1
 80043f8:	629a      	str	r2, [r3, #40]	; 0x28
 80043fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80043fc:	3a01      	subs	r2, #1
 80043fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004402:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004404:	3901      	subs	r1, #1
 8004406:	0249      	lsls	r1, r1, #9
 8004408:	b289      	uxth	r1, r1
 800440a:	430a      	orrs	r2, r1
 800440c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800440e:	3901      	subs	r1, #1
 8004410:	0409      	lsls	r1, r1, #16
 8004412:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8004416:	430a      	orrs	r2, r1
 8004418:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800441a:	3901      	subs	r1, #1
 800441c:	0609      	lsls	r1, r1, #24
 800441e:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8004422:	430a      	orrs	r2, r1
 8004424:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8004426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004428:	f022 0201 	bic.w	r2, r2, #1
 800442c:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800442e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004430:	4a1f      	ldr	r2, [pc, #124]	; (80044b0 <HAL_RCC_OscConfig+0x51c>)
 8004432:	400a      	ands	r2, r1
 8004434:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004436:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800443a:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800443c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443e:	f022 020c 	bic.w	r2, r2, #12
 8004442:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004444:	430a      	orrs	r2, r1
 8004446:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444a:	f022 0202 	bic.w	r2, r2, #2
 800444e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004450:	430a      	orrs	r2, r1
 8004452:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004456:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800445a:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800445c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004462:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004466:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800446a:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800446c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800447a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800447c:	f7fd f888 	bl	8001590 <HAL_GetTick>
 8004480:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004482:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <HAL_RCC_OscConfig+0x510>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800448a:	d106      	bne.n	800449a <HAL_RCC_OscConfig+0x506>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800448c:	f7fd f880 	bl	8001590 <HAL_GetTick>
 8004490:	1b00      	subs	r0, r0, r4
 8004492:	2802      	cmp	r0, #2
 8004494:	d9f5      	bls.n	8004482 <HAL_RCC_OscConfig+0x4ee>
            return HAL_TIMEOUT;
 8004496:	2003      	movs	r0, #3
 8004498:	e05f      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800449a:	2000      	movs	r0, #0
 800449c:	e05d      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
 800449e:	2000      	movs	r0, #0
 80044a0:	e05b      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
 80044a2:	bf00      	nop
 80044a4:	58024400 	.word	0x58024400
 80044a8:	58024800 	.word	0x58024800
 80044ac:	fffffc0c 	.word	0xfffffc0c
 80044b0:	ffff0007 	.word	0xffff0007
      temp1_pllckcfg = RCC->PLLCKSELR;
 80044b4:	4930      	ldr	r1, [pc, #192]	; (8004578 <HAL_RCC_OscConfig+0x5e4>)
 80044b6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80044b8:	6b08      	ldr	r0, [r1, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d04e      	beq.n	800455c <HAL_RCC_OscConfig+0x5c8>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044be:	f002 0303 	and.w	r3, r2, #3
 80044c2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044c4:	428b      	cmp	r3, r1
 80044c6:	d14b      	bne.n	8004560 <HAL_RCC_OscConfig+0x5cc>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044c8:	f3c2 1205 	ubfx	r2, r2, #4, #6
 80044cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d148      	bne.n	8004564 <HAL_RCC_OscConfig+0x5d0>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044d2:	f3c0 0208 	ubfx	r2, r0, #0, #9
 80044d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80044d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044da:	429a      	cmp	r2, r3
 80044dc:	d144      	bne.n	8004568 <HAL_RCC_OscConfig+0x5d4>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044de:	f3c0 2246 	ubfx	r2, r0, #9, #7
 80044e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044e4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d140      	bne.n	800456c <HAL_RCC_OscConfig+0x5d8>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044ea:	f3c0 4206 	ubfx	r2, r0, #16, #7
 80044ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80044f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d13c      	bne.n	8004570 <HAL_RCC_OscConfig+0x5dc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80044f6:	f3c0 6006 	ubfx	r0, r0, #24, #7
 80044fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80044fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044fe:	4298      	cmp	r0, r3
 8004500:	d138      	bne.n	8004574 <HAL_RCC_OscConfig+0x5e0>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004502:	4b1d      	ldr	r3, [pc, #116]	; (8004578 <HAL_RCC_OscConfig+0x5e4>)
 8004504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004506:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800450a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800450c:	429a      	cmp	r2, r3
 800450e:	d101      	bne.n	8004514 <HAL_RCC_OscConfig+0x580>
  return HAL_OK;
 8004510:	2000      	movs	r0, #0
 8004512:	e022      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
          __HAL_RCC_PLLFRACN_DISABLE();
 8004514:	4a18      	ldr	r2, [pc, #96]	; (8004578 <HAL_RCC_OscConfig+0x5e4>)
 8004516:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004518:	f023 0301 	bic.w	r3, r3, #1
 800451c:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 800451e:	f7fd f837 	bl	8001590 <HAL_GetTick>
 8004522:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004524:	f7fd f834 	bl	8001590 <HAL_GetTick>
 8004528:	42a8      	cmp	r0, r5
 800452a:	d0fb      	beq.n	8004524 <HAL_RCC_OscConfig+0x590>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800452c:	4a12      	ldr	r2, [pc, #72]	; (8004578 <HAL_RCC_OscConfig+0x5e4>)
 800452e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004530:	4b12      	ldr	r3, [pc, #72]	; (800457c <HAL_RCC_OscConfig+0x5e8>)
 8004532:	400b      	ands	r3, r1
 8004534:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004536:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800453a:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800453c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	62d3      	str	r3, [r2, #44]	; 0x2c
  return HAL_OK;
 8004544:	2000      	movs	r0, #0
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
    return HAL_ERROR;
 8004548:	2001      	movs	r0, #1
}
 800454a:	4770      	bx	lr
        return HAL_ERROR;
 800454c:	2001      	movs	r0, #1
 800454e:	e004      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
        return HAL_ERROR;
 8004550:	2001      	movs	r0, #1
 8004552:	e002      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
        return HAL_ERROR;
 8004554:	2001      	movs	r0, #1
 8004556:	e000      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
  return HAL_OK;
 8004558:	2000      	movs	r0, #0
}
 800455a:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800455c:	2001      	movs	r0, #1
 800455e:	e7fc      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
 8004560:	2001      	movs	r0, #1
 8004562:	e7fa      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
 8004564:	2001      	movs	r0, #1
 8004566:	e7f8      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
 8004568:	2001      	movs	r0, #1
 800456a:	e7f6      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
 800456c:	2001      	movs	r0, #1
 800456e:	e7f4      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
 8004570:	2001      	movs	r0, #1
 8004572:	e7f2      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
 8004574:	2001      	movs	r0, #1
 8004576:	e7f0      	b.n	800455a <HAL_RCC_OscConfig+0x5c6>
 8004578:	58024400 	.word	0x58024400
 800457c:	ffff0007 	.word	0xffff0007

08004580 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004580:	4b74      	ldr	r3, [pc, #464]	; (8004754 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004588:	2b10      	cmp	r3, #16
 800458a:	f000 80de 	beq.w	800474a <HAL_RCC_GetSysClockFreq+0x1ca>
 800458e:	2b18      	cmp	r3, #24
 8004590:	d010      	beq.n	80045b4 <HAL_RCC_GetSysClockFreq+0x34>
 8004592:	b10b      	cbz	r3, 8004598 <HAL_RCC_GetSysClockFreq+0x18>
 8004594:	4870      	ldr	r0, [pc, #448]	; (8004758 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004596:	4770      	bx	lr
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004598:	4b6e      	ldr	r3, [pc, #440]	; (8004754 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f013 0f20 	tst.w	r3, #32
 80045a0:	f000 80d5 	beq.w	800474e <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045a4:	4b6b      	ldr	r3, [pc, #428]	; (8004754 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80045ac:	4b6b      	ldr	r3, [pc, #428]	; (800475c <HAL_RCC_GetSysClockFreq+0x1dc>)
 80045ae:	fa23 f000 	lsr.w	r0, r3, r0
 80045b2:	4770      	bx	lr
{
 80045b4:	b410      	push	{r4}
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045b6:	4a67      	ldr	r2, [pc, #412]	; (8004754 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80045b8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80045ba:	f001 0103 	and.w	r1, r1, #3
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80045be:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80045c0:	f3c4 1005 	ubfx	r0, r4, #4, #6
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80045c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80045c6:	f003 0c01 	and.w	ip, r3, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80045ca:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80045cc:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80045d0:	fb0c f303 	mul.w	r3, ip, r3
 80045d4:	ee07 3a90 	vmov	s15, r3
 80045d8:	eef8 7a67 	vcvt.f32.u32	s15, s15

      if (pllm != 0U)
 80045dc:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 80045e0:	f000 8093 	beq.w	800470a <HAL_RCC_GetSysClockFreq+0x18a>
      {
        switch (pllsource)
 80045e4:	2901      	cmp	r1, #1
 80045e6:	d065      	beq.n	80046b4 <HAL_RCC_GetSysClockFreq+0x134>
 80045e8:	2902      	cmp	r1, #2
 80045ea:	f000 8091 	beq.w	8004710 <HAL_RCC_GetSysClockFreq+0x190>
 80045ee:	b1e1      	cbz	r1, 800462a <HAL_RCC_GetSysClockFreq+0xaa>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045f0:	ee07 0a10 	vmov	s14, r0
 80045f4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80045f8:	ed9f 6a59 	vldr	s12, [pc, #356]	; 8004760 <HAL_RCC_GetSysClockFreq+0x1e0>
 80045fc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004600:	4b54      	ldr	r3, [pc, #336]	; (8004754 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004608:	ee06 3a90 	vmov	s13, r3
 800460c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004610:	ed9f 6a54 	vldr	s12, [pc, #336]	; 8004764 <HAL_RCC_GetSysClockFreq+0x1e4>
 8004614:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004618:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800461c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004620:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004624:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 8004628:	e060      	b.n	80046ec <HAL_RCC_GetSysClockFreq+0x16c>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800462a:	6813      	ldr	r3, [r2, #0]
 800462c:	f013 0f20 	tst.w	r3, #32
 8004630:	d023      	beq.n	800467a <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004632:	4611      	mov	r1, r2
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800463a:	4b48      	ldr	r3, [pc, #288]	; (800475c <HAL_RCC_GetSysClockFreq+0x1dc>)
 800463c:	40d3      	lsrs	r3, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800463e:	ee07 3a10 	vmov	s14, r3
 8004642:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004646:	ee07 0a10 	vmov	s14, r0
 800464a:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800464e:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8004652:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8004654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004658:	ee06 3a90 	vmov	s13, r3
 800465c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004660:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8004764 <HAL_RCC_GetSysClockFreq+0x1e4>
 8004664:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004668:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004674:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004678:	e038      	b.n	80046ec <HAL_RCC_GetSysClockFreq+0x16c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800467a:	ee07 0a10 	vmov	s14, r0
 800467e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004682:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8004768 <HAL_RCC_GetSysClockFreq+0x1e8>
 8004686:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800468a:	4b32      	ldr	r3, [pc, #200]	; (8004754 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004692:	ee06 3a90 	vmov	s13, r3
 8004696:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800469a:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004764 <HAL_RCC_GetSysClockFreq+0x1e4>
 800469e:	ee67 7a86 	vmul.f32	s15, s15, s12
 80046a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046b2:	e01b      	b.n	80046ec <HAL_RCC_GetSysClockFreq+0x16c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046b4:	ee07 0a10 	vmov	s14, r0
 80046b8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80046bc:	ed9f 6a28 	vldr	s12, [pc, #160]	; 8004760 <HAL_RCC_GetSysClockFreq+0x1e0>
 80046c0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80046c4:	4b23      	ldr	r3, [pc, #140]	; (8004754 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80046c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046cc:	ee06 3a90 	vmov	s13, r3
 80046d0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80046d4:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8004764 <HAL_RCC_GetSysClockFreq+0x1e4>
 80046d8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80046dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046e8:	ee27 7a27 	vmul.f32	s14, s14, s15
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80046ec:	4b19      	ldr	r3, [pc, #100]	; (8004754 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80046f4:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004702:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8004706:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800470a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800470e:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004710:	ee07 0a10 	vmov	s14, r0
 8004714:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004718:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800476c <HAL_RCC_GetSysClockFreq+0x1ec>
 800471c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004720:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004728:	ee06 3a90 	vmov	s13, r3
 800472c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004730:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8004764 <HAL_RCC_GetSysClockFreq+0x1e4>
 8004734:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004738:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004740:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004744:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 8004748:	e7d0      	b.n	80046ec <HAL_RCC_GetSysClockFreq+0x16c>
      sysclockfreq = HSE_VALUE;
 800474a:	4809      	ldr	r0, [pc, #36]	; (8004770 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800474c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800474e:	4803      	ldr	r0, [pc, #12]	; (800475c <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	58024400 	.word	0x58024400
 8004758:	003d0900 	.word	0x003d0900
 800475c:	03d09000 	.word	0x03d09000
 8004760:	4a742400 	.word	0x4a742400
 8004764:	39000000 	.word	0x39000000
 8004768:	4c742400 	.word	0x4c742400
 800476c:	4bbebc20 	.word	0x4bbebc20
 8004770:	017d7840 	.word	0x017d7840

08004774 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004774:	2800      	cmp	r0, #0
 8004776:	f000 8132 	beq.w	80049de <HAL_RCC_ClockConfig+0x26a>
{
 800477a:	b570      	push	{r4, r5, r6, lr}
 800477c:	460d      	mov	r5, r1
 800477e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004780:	4b9b      	ldr	r3, [pc, #620]	; (80049f0 <HAL_RCC_ClockConfig+0x27c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	428b      	cmp	r3, r1
 800478a:	d20b      	bcs.n	80047a4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478c:	4a98      	ldr	r2, [pc, #608]	; (80049f0 <HAL_RCC_ClockConfig+0x27c>)
 800478e:	6813      	ldr	r3, [r2, #0]
 8004790:	f023 030f 	bic.w	r3, r3, #15
 8004794:	430b      	orrs	r3, r1
 8004796:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004798:	6813      	ldr	r3, [r2, #0]
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	428b      	cmp	r3, r1
 80047a0:	f040 811f 	bne.w	80049e2 <HAL_RCC_ClockConfig+0x26e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	f013 0f04 	tst.w	r3, #4
 80047aa:	d00c      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047ac:	6922      	ldr	r2, [r4, #16]
 80047ae:	4b91      	ldr	r3, [pc, #580]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d905      	bls.n	80047c6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047ba:	498e      	ldr	r1, [pc, #568]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 80047bc:	698b      	ldr	r3, [r1, #24]
 80047be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c2:	431a      	orrs	r2, r3
 80047c4:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	f013 0f08 	tst.w	r3, #8
 80047cc:	d00c      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x74>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047ce:	6962      	ldr	r2, [r4, #20]
 80047d0:	4b88      	ldr	r3, [pc, #544]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047d8:	429a      	cmp	r2, r3
 80047da:	d905      	bls.n	80047e8 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047dc:	4985      	ldr	r1, [pc, #532]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 80047de:	69cb      	ldr	r3, [r1, #28]
 80047e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e4:	431a      	orrs	r2, r3
 80047e6:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	f013 0f10 	tst.w	r3, #16
 80047ee:	d00c      	beq.n	800480a <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047f0:	69a2      	ldr	r2, [r4, #24]
 80047f2:	4b80      	ldr	r3, [pc, #512]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d905      	bls.n	800480a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80047fe:	497d      	ldr	r1, [pc, #500]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 8004800:	69cb      	ldr	r3, [r1, #28]
 8004802:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004806:	431a      	orrs	r2, r3
 8004808:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	f013 0f20 	tst.w	r3, #32
 8004810:	d00c      	beq.n	800482c <HAL_RCC_ClockConfig+0xb8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004812:	69e2      	ldr	r2, [r4, #28]
 8004814:	4b77      	ldr	r3, [pc, #476]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800481c:	429a      	cmp	r2, r3
 800481e:	d905      	bls.n	800482c <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004820:	4974      	ldr	r1, [pc, #464]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 8004822:	6a0b      	ldr	r3, [r1, #32]
 8004824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004828:	431a      	orrs	r2, r3
 800482a:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	f013 0f02 	tst.w	r3, #2
 8004832:	d00c      	beq.n	800484e <HAL_RCC_ClockConfig+0xda>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004834:	68e2      	ldr	r2, [r4, #12]
 8004836:	4b6f      	ldr	r3, [pc, #444]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	429a      	cmp	r2, r3
 8004840:	d905      	bls.n	800484e <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004842:	496c      	ldr	r1, [pc, #432]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 8004844:	698b      	ldr	r3, [r1, #24]
 8004846:	f023 030f 	bic.w	r3, r3, #15
 800484a:	431a      	orrs	r2, r3
 800484c:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	f013 0f01 	tst.w	r3, #1
 8004854:	d041      	beq.n	80048da <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004856:	4a67      	ldr	r2, [pc, #412]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 8004858:	6993      	ldr	r3, [r2, #24]
 800485a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800485e:	68a1      	ldr	r1, [r4, #8]
 8004860:	430b      	orrs	r3, r1
 8004862:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004864:	6863      	ldr	r3, [r4, #4]
 8004866:	2b02      	cmp	r3, #2
 8004868:	d00a      	beq.n	8004880 <HAL_RCC_ClockConfig+0x10c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800486a:	2b03      	cmp	r3, #3
 800486c:	d027      	beq.n	80048be <HAL_RCC_ClockConfig+0x14a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800486e:	2b01      	cmp	r3, #1
 8004870:	d02c      	beq.n	80048cc <HAL_RCC_ClockConfig+0x158>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004872:	4a60      	ldr	r2, [pc, #384]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 8004874:	6812      	ldr	r2, [r2, #0]
 8004876:	f012 0f04 	tst.w	r2, #4
 800487a:	d106      	bne.n	800488a <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 800487c:	2001      	movs	r0, #1
 800487e:	e0ad      	b.n	80049dc <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004880:	6812      	ldr	r2, [r2, #0]
 8004882:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004886:	f000 80ae 	beq.w	80049e6 <HAL_RCC_ClockConfig+0x272>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800488a:	495a      	ldr	r1, [pc, #360]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 800488c:	690a      	ldr	r2, [r1, #16]
 800488e:	f022 0207 	bic.w	r2, r2, #7
 8004892:	4313      	orrs	r3, r2
 8004894:	610b      	str	r3, [r1, #16]
    tickstart = HAL_GetTick();
 8004896:	f7fc fe7b 	bl	8001590 <HAL_GetTick>
 800489a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489c:	4b55      	ldr	r3, [pc, #340]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048a4:	6862      	ldr	r2, [r4, #4]
 80048a6:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80048aa:	d016      	beq.n	80048da <HAL_RCC_ClockConfig+0x166>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ac:	f7fc fe70 	bl	8001590 <HAL_GetTick>
 80048b0:	1b80      	subs	r0, r0, r6
 80048b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80048b6:	4298      	cmp	r0, r3
 80048b8:	d9f0      	bls.n	800489c <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 80048ba:	2003      	movs	r0, #3
 80048bc:	e08e      	b.n	80049dc <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048be:	4a4d      	ldr	r2, [pc, #308]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 80048c0:	6812      	ldr	r2, [r2, #0]
 80048c2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80048c6:	d1e0      	bne.n	800488a <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 80048c8:	2001      	movs	r0, #1
 80048ca:	e087      	b.n	80049dc <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048cc:	4a49      	ldr	r2, [pc, #292]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 80048ce:	6812      	ldr	r2, [r2, #0]
 80048d0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80048d4:	d1d9      	bne.n	800488a <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 80048d6:	2001      	movs	r0, #1
 80048d8:	e080      	b.n	80049dc <HAL_RCC_ClockConfig+0x268>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	f013 0f02 	tst.w	r3, #2
 80048e0:	d00c      	beq.n	80048fc <HAL_RCC_ClockConfig+0x188>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80048e2:	68e2      	ldr	r2, [r4, #12]
 80048e4:	4b43      	ldr	r3, [pc, #268]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	f003 030f 	and.w	r3, r3, #15
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d205      	bcs.n	80048fc <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f0:	4940      	ldr	r1, [pc, #256]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 80048f2:	698b      	ldr	r3, [r1, #24]
 80048f4:	f023 030f 	bic.w	r3, r3, #15
 80048f8:	431a      	orrs	r2, r3
 80048fa:	618a      	str	r2, [r1, #24]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048fc:	4b3c      	ldr	r3, [pc, #240]	; (80049f0 <HAL_RCC_ClockConfig+0x27c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	42ab      	cmp	r3, r5
 8004906:	d90a      	bls.n	800491e <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004908:	4a39      	ldr	r2, [pc, #228]	; (80049f0 <HAL_RCC_ClockConfig+0x27c>)
 800490a:	6813      	ldr	r3, [r2, #0]
 800490c:	f023 030f 	bic.w	r3, r3, #15
 8004910:	432b      	orrs	r3, r5
 8004912:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004914:	6813      	ldr	r3, [r2, #0]
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	42ab      	cmp	r3, r5
 800491c:	d165      	bne.n	80049ea <HAL_RCC_ClockConfig+0x276>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	f013 0f04 	tst.w	r3, #4
 8004924:	d00c      	beq.n	8004940 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004926:	6922      	ldr	r2, [r4, #16]
 8004928:	4b32      	ldr	r3, [pc, #200]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004930:	429a      	cmp	r2, r3
 8004932:	d205      	bcs.n	8004940 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004934:	492f      	ldr	r1, [pc, #188]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 8004936:	698b      	ldr	r3, [r1, #24]
 8004938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493c:	431a      	orrs	r2, r3
 800493e:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	f013 0f08 	tst.w	r3, #8
 8004946:	d00c      	beq.n	8004962 <HAL_RCC_ClockConfig+0x1ee>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004948:	6962      	ldr	r2, [r4, #20]
 800494a:	4b2a      	ldr	r3, [pc, #168]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004952:	429a      	cmp	r2, r3
 8004954:	d205      	bcs.n	8004962 <HAL_RCC_ClockConfig+0x1ee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004956:	4927      	ldr	r1, [pc, #156]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 8004958:	69cb      	ldr	r3, [r1, #28]
 800495a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495e:	431a      	orrs	r2, r3
 8004960:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	f013 0f10 	tst.w	r3, #16
 8004968:	d00c      	beq.n	8004984 <HAL_RCC_ClockConfig+0x210>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800496a:	69a2      	ldr	r2, [r4, #24]
 800496c:	4b21      	ldr	r3, [pc, #132]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004974:	429a      	cmp	r2, r3
 8004976:	d205      	bcs.n	8004984 <HAL_RCC_ClockConfig+0x210>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004978:	491e      	ldr	r1, [pc, #120]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 800497a:	69cb      	ldr	r3, [r1, #28]
 800497c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004980:	431a      	orrs	r2, r3
 8004982:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	f013 0f20 	tst.w	r3, #32
 800498a:	d00c      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x232>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800498c:	69e2      	ldr	r2, [r4, #28]
 800498e:	4b19      	ldr	r3, [pc, #100]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004996:	429a      	cmp	r2, r3
 8004998:	d205      	bcs.n	80049a6 <HAL_RCC_ClockConfig+0x232>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800499a:	4916      	ldr	r1, [pc, #88]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 800499c:	6a0b      	ldr	r3, [r1, #32]
 800499e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a2:	431a      	orrs	r2, r3
 80049a4:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80049a6:	f7ff fdeb 	bl	8004580 <HAL_RCC_GetSysClockFreq>
 80049aa:	4912      	ldr	r1, [pc, #72]	; (80049f4 <HAL_RCC_ClockConfig+0x280>)
 80049ac:	698b      	ldr	r3, [r1, #24]
 80049ae:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80049b2:	4a11      	ldr	r2, [pc, #68]	; (80049f8 <HAL_RCC_ClockConfig+0x284>)
 80049b4:	5cd3      	ldrb	r3, [r2, r3]
 80049b6:	f003 031f 	and.w	r3, r3, #31
 80049ba:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049bc:	698b      	ldr	r3, [r1, #24]
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	5cd3      	ldrb	r3, [r2, r3]
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	fa20 f303 	lsr.w	r3, r0, r3
 80049cc:	4a0b      	ldr	r2, [pc, #44]	; (80049fc <HAL_RCC_ClockConfig+0x288>)
 80049ce:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80049d0:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <HAL_RCC_ClockConfig+0x28c>)
 80049d2:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 80049d4:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <HAL_RCC_ClockConfig+0x290>)
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	f7fc fd78 	bl	80014cc <HAL_InitTick>
}
 80049dc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80049de:	2001      	movs	r0, #1
}
 80049e0:	4770      	bx	lr
      return HAL_ERROR;
 80049e2:	2001      	movs	r0, #1
 80049e4:	e7fa      	b.n	80049dc <HAL_RCC_ClockConfig+0x268>
        return HAL_ERROR;
 80049e6:	2001      	movs	r0, #1
 80049e8:	e7f8      	b.n	80049dc <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 80049ea:	2001      	movs	r0, #1
 80049ec:	e7f6      	b.n	80049dc <HAL_RCC_ClockConfig+0x268>
 80049ee:	bf00      	nop
 80049f0:	52002000 	.word	0x52002000
 80049f4:	58024400 	.word	0x58024400
 80049f8:	08008b68 	.word	0x08008b68
 80049fc:	24000008 	.word	0x24000008
 8004a00:	24000004 	.word	0x24000004
 8004a04:	24000010 	.word	0x24000010

08004a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a08:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004a0a:	f7ff fdb9 	bl	8004580 <HAL_RCC_GetSysClockFreq>
 8004a0e:	4a0b      	ldr	r2, [pc, #44]	; (8004a3c <HAL_RCC_GetHCLKFreq+0x34>)
 8004a10:	6993      	ldr	r3, [r2, #24]
 8004a12:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004a16:	490a      	ldr	r1, [pc, #40]	; (8004a40 <HAL_RCC_GetHCLKFreq+0x38>)
 8004a18:	5ccb      	ldrb	r3, [r1, r3]
 8004a1a:	f003 031f 	and.w	r3, r3, #31
 8004a1e:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a22:	6992      	ldr	r2, [r2, #24]
 8004a24:	f002 020f 	and.w	r2, r2, #15
 8004a28:	5c88      	ldrb	r0, [r1, r2]
 8004a2a:	f000 001f 	and.w	r0, r0, #31
 8004a2e:	fa23 f000 	lsr.w	r0, r3, r0
 8004a32:	4a04      	ldr	r2, [pc, #16]	; (8004a44 <HAL_RCC_GetHCLKFreq+0x3c>)
 8004a34:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a36:	4a04      	ldr	r2, [pc, #16]	; (8004a48 <HAL_RCC_GetHCLKFreq+0x40>)
 8004a38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004a3a:	bd08      	pop	{r3, pc}
 8004a3c:	58024400 	.word	0x58024400
 8004a40:	08008b68 	.word	0x08008b68
 8004a44:	24000008 	.word	0x24000008
 8004a48:	24000004 	.word	0x24000004

08004a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a4c:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004a4e:	f7ff ffdb 	bl	8004a08 <HAL_RCC_GetHCLKFreq>
 8004a52:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004a5a:	4a04      	ldr	r2, [pc, #16]	; (8004a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a5c:	5cd3      	ldrb	r3, [r2, r3]
 8004a5e:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004a62:	40d8      	lsrs	r0, r3
 8004a64:	bd08      	pop	{r3, pc}
 8004a66:	bf00      	nop
 8004a68:	58024400 	.word	0x58024400
 8004a6c:	08008b68 	.word	0x08008b68

08004a70 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a70:	4b40      	ldr	r3, [pc, #256]	; (8004b74 <RCCEx_PLL2_Config+0x104>)
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d079      	beq.n	8004b70 <RCCEx_PLL2_Config+0x100>
{
 8004a7c:	b570      	push	{r4, r5, r6, lr}
 8004a7e:	4605      	mov	r5, r0
 8004a80:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a82:	4a3c      	ldr	r2, [pc, #240]	; (8004b74 <RCCEx_PLL2_Config+0x104>)
 8004a84:	6813      	ldr	r3, [r2, #0]
 8004a86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8c:	f7fc fd80 	bl	8001590 <HAL_GetTick>
 8004a90:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a92:	4b38      	ldr	r3, [pc, #224]	; (8004b74 <RCCEx_PLL2_Config+0x104>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004a9a:	d006      	beq.n	8004aaa <RCCEx_PLL2_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a9c:	f7fc fd78 	bl	8001590 <HAL_GetTick>
 8004aa0:	1b03      	subs	r3, r0, r4
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d9f5      	bls.n	8004a92 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8004aa6:	2003      	movs	r0, #3

  }


  return status;
}
 8004aa8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004aaa:	4b32      	ldr	r3, [pc, #200]	; (8004b74 <RCCEx_PLL2_Config+0x104>)
 8004aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aae:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8004ab2:	6829      	ldr	r1, [r5, #0]
 8004ab4:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8004ab8:	629a      	str	r2, [r3, #40]	; 0x28
 8004aba:	686a      	ldr	r2, [r5, #4]
 8004abc:	3a01      	subs	r2, #1
 8004abe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac2:	68a9      	ldr	r1, [r5, #8]
 8004ac4:	3901      	subs	r1, #1
 8004ac6:	0249      	lsls	r1, r1, #9
 8004ac8:	b289      	uxth	r1, r1
 8004aca:	430a      	orrs	r2, r1
 8004acc:	68e9      	ldr	r1, [r5, #12]
 8004ace:	3901      	subs	r1, #1
 8004ad0:	0409      	lsls	r1, r1, #16
 8004ad2:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	6929      	ldr	r1, [r5, #16]
 8004ada:	3901      	subs	r1, #1
 8004adc:	0609      	lsls	r1, r1, #24
 8004ade:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004aec:	6969      	ldr	r1, [r5, #20]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af4:	f022 0220 	bic.w	r2, r2, #32
 8004af8:	69a9      	ldr	r1, [r5, #24]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b00:	f022 0210 	bic.w	r2, r2, #16
 8004b04:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b06:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004b08:	4a1b      	ldr	r2, [pc, #108]	; (8004b78 <RCCEx_PLL2_Config+0x108>)
 8004b0a:	400a      	ands	r2, r1
 8004b0c:	69e9      	ldr	r1, [r5, #28]
 8004b0e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004b12:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b16:	f042 0210 	orr.w	r2, r2, #16
 8004b1a:	62da      	str	r2, [r3, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004b1c:	b9c6      	cbnz	r6, 8004b50 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b1e:	461a      	mov	r2, r3
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b26:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8004b28:	4a12      	ldr	r2, [pc, #72]	; (8004b74 <RCCEx_PLL2_Config+0x104>)
 8004b2a:	6813      	ldr	r3, [r2, #0]
 8004b2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b30:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004b32:	f7fc fd2d 	bl	8001590 <HAL_GetTick>
 8004b36:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b38:	4b0e      	ldr	r3, [pc, #56]	; (8004b74 <RCCEx_PLL2_Config+0x104>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004b40:	d114      	bne.n	8004b6c <RCCEx_PLL2_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b42:	f7fc fd25 	bl	8001590 <HAL_GetTick>
 8004b46:	1b00      	subs	r0, r0, r4
 8004b48:	2802      	cmp	r0, #2
 8004b4a:	d9f5      	bls.n	8004b38 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8004b4c:	2003      	movs	r0, #3
 8004b4e:	e7ab      	b.n	8004aa8 <RCCEx_PLL2_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b50:	2e01      	cmp	r6, #1
 8004b52:	d005      	beq.n	8004b60 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b54:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <RCCEx_PLL2_Config+0x104>)
 8004b56:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b5c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b5e:	e7e3      	b.n	8004b28 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b60:	4a04      	ldr	r2, [pc, #16]	; (8004b74 <RCCEx_PLL2_Config+0x104>)
 8004b62:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b68:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b6a:	e7dd      	b.n	8004b28 <RCCEx_PLL2_Config+0xb8>
  return status;
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	e79b      	b.n	8004aa8 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8004b70:	2001      	movs	r0, #1
}
 8004b72:	4770      	bx	lr
 8004b74:	58024400 	.word	0x58024400
 8004b78:	ffff0007 	.word	0xffff0007

08004b7c <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b7c:	4b40      	ldr	r3, [pc, #256]	; (8004c80 <RCCEx_PLL3_Config+0x104>)
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d079      	beq.n	8004c7c <RCCEx_PLL3_Config+0x100>
{
 8004b88:	b570      	push	{r4, r5, r6, lr}
 8004b8a:	4605      	mov	r5, r0
 8004b8c:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b8e:	4a3c      	ldr	r2, [pc, #240]	; (8004c80 <RCCEx_PLL3_Config+0x104>)
 8004b90:	6813      	ldr	r3, [r2, #0]
 8004b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b98:	f7fc fcfa 	bl	8001590 <HAL_GetTick>
 8004b9c:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b9e:	4b38      	ldr	r3, [pc, #224]	; (8004c80 <RCCEx_PLL3_Config+0x104>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004ba6:	d006      	beq.n	8004bb6 <RCCEx_PLL3_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ba8:	f7fc fcf2 	bl	8001590 <HAL_GetTick>
 8004bac:	1b03      	subs	r3, r0, r4
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d9f5      	bls.n	8004b9e <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8004bb2:	2003      	movs	r0, #3

  }


  return status;
}
 8004bb4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004bb6:	4b32      	ldr	r3, [pc, #200]	; (8004c80 <RCCEx_PLL3_Config+0x104>)
 8004bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bba:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8004bbe:	6829      	ldr	r1, [r5, #0]
 8004bc0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8004bc4:	629a      	str	r2, [r3, #40]	; 0x28
 8004bc6:	686a      	ldr	r2, [r5, #4]
 8004bc8:	3a01      	subs	r2, #1
 8004bca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bce:	68a9      	ldr	r1, [r5, #8]
 8004bd0:	3901      	subs	r1, #1
 8004bd2:	0249      	lsls	r1, r1, #9
 8004bd4:	b289      	uxth	r1, r1
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	68e9      	ldr	r1, [r5, #12]
 8004bda:	3901      	subs	r1, #1
 8004bdc:	0409      	lsls	r1, r1, #16
 8004bde:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8004be2:	430a      	orrs	r2, r1
 8004be4:	6929      	ldr	r1, [r5, #16]
 8004be6:	3901      	subs	r1, #1
 8004be8:	0609      	lsls	r1, r1, #24
 8004bea:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004bf8:	6969      	ldr	r1, [r5, #20]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c04:	69a9      	ldr	r1, [r5, #24]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c10:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c12:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004c14:	4a1b      	ldr	r2, [pc, #108]	; (8004c84 <RCCEx_PLL3_Config+0x108>)
 8004c16:	400a      	ands	r2, r1
 8004c18:	69e9      	ldr	r1, [r5, #28]
 8004c1a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004c1e:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c26:	62da      	str	r2, [r3, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004c28:	b9c6      	cbnz	r6, 8004c5c <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c32:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8004c34:	4a12      	ldr	r2, [pc, #72]	; (8004c80 <RCCEx_PLL3_Config+0x104>)
 8004c36:	6813      	ldr	r3, [r2, #0]
 8004c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004c3e:	f7fc fca7 	bl	8001590 <HAL_GetTick>
 8004c42:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c44:	4b0e      	ldr	r3, [pc, #56]	; (8004c80 <RCCEx_PLL3_Config+0x104>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004c4c:	d114      	bne.n	8004c78 <RCCEx_PLL3_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c4e:	f7fc fc9f 	bl	8001590 <HAL_GetTick>
 8004c52:	1b00      	subs	r0, r0, r4
 8004c54:	2802      	cmp	r0, #2
 8004c56:	d9f5      	bls.n	8004c44 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8004c58:	2003      	movs	r0, #3
 8004c5a:	e7ab      	b.n	8004bb4 <RCCEx_PLL3_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c5c:	2e01      	cmp	r6, #1
 8004c5e:	d005      	beq.n	8004c6c <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c60:	4a07      	ldr	r2, [pc, #28]	; (8004c80 <RCCEx_PLL3_Config+0x104>)
 8004c62:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c68:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c6a:	e7e3      	b.n	8004c34 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c6c:	4a04      	ldr	r2, [pc, #16]	; (8004c80 <RCCEx_PLL3_Config+0x104>)
 8004c6e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c74:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c76:	e7dd      	b.n	8004c34 <RCCEx_PLL3_Config+0xb8>
  return status;
 8004c78:	2000      	movs	r0, #0
 8004c7a:	e79b      	b.n	8004bb4 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8004c7c:	2001      	movs	r0, #1
}
 8004c7e:	4770      	bx	lr
 8004c80:	58024400 	.word	0x58024400
 8004c84:	ffff0007 	.word	0xffff0007

08004c88 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c8c:	6803      	ldr	r3, [r0, #0]
 8004c8e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004c92:	d030      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004c94:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004c96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c9a:	d026      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004c9c:	d80e      	bhi.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004c9e:	b1eb      	cbz	r3, 8004cdc <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004ca0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ca4:	d107      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ca6:	2102      	movs	r1, #2
 8004ca8:	3008      	adds	r0, #8
 8004caa:	f7ff fee1 	bl	8004a70 <RCCEx_PLL2_Config>
 8004cae:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004cb0:	b145      	cbz	r5, 8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004cb2:	462e      	mov	r6, r5
 8004cb4:	e021      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004cb6:	2601      	movs	r6, #1
 8004cb8:	4635      	mov	r5, r6
 8004cba:	e01e      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004cbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cc0:	d109      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004cc2:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004cc4:	4a9f      	ldr	r2, [pc, #636]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004cc6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004cc8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004ccc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cd2:	2600      	movs	r6, #0
 8004cd4:	e011      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004cd6:	2601      	movs	r6, #1
 8004cd8:	4635      	mov	r5, r6
 8004cda:	e00e      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x72>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cdc:	4a99      	ldr	r2, [pc, #612]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004cde:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ce4:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ce6:	2500      	movs	r5, #0
 8004ce8:	e7ec      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cea:	2102      	movs	r1, #2
 8004cec:	3028      	adds	r0, #40	; 0x28
 8004cee:	f7ff ff45 	bl	8004b7c <RCCEx_PLL3_Config>
 8004cf2:	4605      	mov	r5, r0
        break;
 8004cf4:	e7dc      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cf6:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cf8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004d00:	d027      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004d02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d820      	bhi.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8004d08:	e8df f003 	tbb	[pc, r3]
 8004d0c:	08181103 	.word	0x08181103
 8004d10:	08          	.byte	0x08
 8004d11:	00          	.byte	0x00
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d12:	4a8c      	ldr	r2, [pc, #560]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d14:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d1a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8004d1c:	b9c5      	cbnz	r5, 8004d50 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d1e:	4a89      	ldr	r2, [pc, #548]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d20:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004d22:	f023 0307 	bic.w	r3, r3, #7
 8004d26:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	6513      	str	r3, [r2, #80]	; 0x50
 8004d2c:	e011      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xca>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d2e:	2100      	movs	r1, #0
 8004d30:	f104 0008 	add.w	r0, r4, #8
 8004d34:	f7ff fe9c 	bl	8004a70 <RCCEx_PLL2_Config>
 8004d38:	4605      	mov	r5, r0
        break;
 8004d3a:	e7ef      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x94>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004d42:	f7ff ff1b 	bl	8004b7c <RCCEx_PLL3_Config>
 8004d46:	4605      	mov	r5, r0
        break;
 8004d48:	e7e8      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004d4a:	2601      	movs	r6, #1
 8004d4c:	4635      	mov	r5, r6
 8004d4e:	e000      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8004d50:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004d58:	d022      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004d5a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8004d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d62:	d03f      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004d64:	d80d      	bhi.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004d66:	b3bb      	cbz	r3, 8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8004d68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d6c:	d106      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d6e:	2100      	movs	r1, #0
 8004d70:	f104 0008 	add.w	r0, r4, #8
 8004d74:	f7ff fe7c 	bl	8004a70 <RCCEx_PLL2_Config>
 8004d78:	4605      	mov	r5, r0
        break;
 8004d7a:	e008      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x106>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004d7c:	2601      	movs	r6, #1
 8004d7e:	4635      	mov	r5, r6
 8004d80:	e00e      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004d82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d86:	d002      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d88:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004d8c:	d11e      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x144>
    if (ret == HAL_OK)
 8004d8e:	bb85      	cbnz	r5, 8004df2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004d90:	4a6c      	ldr	r2, [pc, #432]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d92:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004d94:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8004d98:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004da6:	d039      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x194>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004da8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8004dac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004db0:	d05a      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8004db2:	d823      	bhi.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x174>
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d051      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dbc:	d11b      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	f104 0008 	add.w	r0, r4, #8
 8004dc4:	f7ff fe54 	bl	8004a70 <RCCEx_PLL2_Config>
 8004dc8:	4605      	mov	r5, r0
        break;
 8004dca:	e01d      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004dcc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004dd0:	d0dd      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004dd2:	2601      	movs	r6, #1
 8004dd4:	4635      	mov	r5, r6
 8004dd6:	e7e3      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x118>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dd8:	4a5a      	ldr	r2, [pc, #360]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004dda:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004de0:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8004de2:	e7d4      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x106>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004de4:	2100      	movs	r1, #0
 8004de6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004dea:	f7ff fec7 	bl	8004b7c <RCCEx_PLL3_Config>
 8004dee:	4605      	mov	r5, r0
        break;
 8004df0:	e7cd      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004df2:	462e      	mov	r6, r5
 8004df4:	e7d4      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004df6:	2601      	movs	r6, #1
 8004df8:	4635      	mov	r5, r6
 8004dfa:	e00f      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x194>
 8004dfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e00:	d002      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004e02:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004e06:	d123      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    if (ret == HAL_OK)
 8004e08:	2d00      	cmp	r5, #0
 8004e0a:	d134      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004e0c:	4a4d      	ldr	r2, [pc, #308]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e0e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004e10:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004e14:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8004e18:	430b      	orrs	r3, r1
 8004e1a:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004e22:	d031      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->OspiClockSelection)
 8004e24:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004e26:	2b20      	cmp	r3, #32
 8004e28:	d042      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004e2a:	d829      	bhi.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004e2c:	b133      	cbz	r3, 8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004e2e:	2b10      	cmp	r3, #16
 8004e30:	d123      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e32:	4a44      	ldr	r2, [pc, #272]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e34:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e3a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8004e3c:	2d00      	cmp	r5, #0
 8004e3e:	d13e      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x236>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004e40:	4a40      	ldr	r2, [pc, #256]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e42:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004e44:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004e48:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004e4a:	430b      	orrs	r3, r1
 8004e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e4e:	e01b      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004e50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e54:	d0d8      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004e56:	2601      	movs	r6, #1
 8004e58:	4635      	mov	r5, r6
 8004e5a:	e7df      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x194>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e5c:	4a39      	ldr	r2, [pc, #228]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e5e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e64:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8004e66:	e7cf      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x180>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e68:	2100      	movs	r1, #0
 8004e6a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004e6e:	f7ff fe85 	bl	8004b7c <RCCEx_PLL3_Config>
 8004e72:	4605      	mov	r5, r0
        break;
 8004e74:	e7c8      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004e76:	462e      	mov	r6, r5
 8004e78:	e7d0      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x194>
    switch (PeriphClkInit->OspiClockSelection)
 8004e7a:	2601      	movs	r6, #1
 8004e7c:	4635      	mov	r5, r6
 8004e7e:	e003      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004e80:	2b30      	cmp	r3, #48	; 0x30
 8004e82:	d0db      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004e84:	2601      	movs	r6, #1
 8004e86:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004e8e:	d03b      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x280>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004e90:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e96:	d02f      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x270>
 8004e98:	d816      	bhi.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004e9a:	b33b      	cbz	r3, 8004eec <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea0:	d10f      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	f104 0008 	add.w	r0, r4, #8
 8004ea8:	f7ff fde2 	bl	8004a70 <RCCEx_PLL2_Config>
 8004eac:	4605      	mov	r5, r0
        break;
 8004eae:	e011      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004eb0:	2102      	movs	r1, #2
 8004eb2:	f104 0008 	add.w	r0, r4, #8
 8004eb6:	f7ff fddb 	bl	8004a70 <RCCEx_PLL2_Config>
 8004eba:	4605      	mov	r5, r0
        break;
 8004ebc:	e7be      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004ebe:	462e      	mov	r6, r5
 8004ec0:	e7e2      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004ec2:	2601      	movs	r6, #1
 8004ec4:	4635      	mov	r5, r6
 8004ec6:	e01f      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8004ec8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ecc:	d002      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8004ece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ed2:	d108      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    if (ret == HAL_OK)
 8004ed4:	b9bd      	cbnz	r5, 8004f06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004ed6:	4a1b      	ldr	r2, [pc, #108]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ed8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ede:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	6513      	str	r3, [r2, #80]	; 0x50
 8004ee4:	e010      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x280>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004ee6:	2601      	movs	r6, #1
 8004ee8:	4635      	mov	r5, r6
 8004eea:	e00d      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x280>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eec:	4a15      	ldr	r2, [pc, #84]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004eee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef4:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8004ef6:	e7ed      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ef8:	2100      	movs	r1, #0
 8004efa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004efe:	f7ff fe3d 	bl	8004b7c <RCCEx_PLL3_Config>
 8004f02:	4605      	mov	r5, r0
        break;
 8004f04:	e7e6      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8004f06:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004f0e:	d029      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004f10:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004f12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f16:	d044      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8004f18:	d819      	bhi.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 8004f1a:	b143      	cbz	r3, 8004f2e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f20:	d112      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f22:	2101      	movs	r1, #1
 8004f24:	f104 0008 	add.w	r0, r4, #8
 8004f28:	f7ff fda2 	bl	8004a70 <RCCEx_PLL2_Config>
 8004f2c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004f2e:	2d00      	cmp	r5, #0
 8004f30:	d13e      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004f32:	4a04      	ldr	r2, [pc, #16]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004f34:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004f36:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004f3a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	6513      	str	r3, [r2, #80]	; 0x50
 8004f40:	e010      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8004f42:	bf00      	nop
 8004f44:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi45ClockSelection)
 8004f48:	2601      	movs	r6, #1
 8004f4a:	4635      	mov	r5, r6
 8004f4c:	e00a      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8004f4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f52:	d0ec      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f58:	d0e9      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004f5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f5e:	d0e6      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004f60:	2601      	movs	r6, #1
 8004f62:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004f6a:	d031      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x348>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004f6c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8004f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f74:	d045      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004f76:	d820      	bhi.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004f78:	b143      	cbz	r3, 8004f8c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004f7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f7e:	d119      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f80:	2101      	movs	r1, #1
 8004f82:	f104 0008 	add.w	r0, r4, #8
 8004f86:	f7ff fd73 	bl	8004a70 <RCCEx_PLL2_Config>
 8004f8a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004f8c:	2d00      	cmp	r5, #0
 8004f8e:	d13f      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x388>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f90:	4a8f      	ldr	r2, [pc, #572]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f92:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004f94:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004f98:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8004fa0:	e016      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x348>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004fa8:	f7ff fde8 	bl	8004b7c <RCCEx_PLL3_Config>
 8004fac:	4605      	mov	r5, r0
        break;
 8004fae:	e7be      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004fb0:	462e      	mov	r6, r5
 8004fb2:	e7d7      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004fb4:	2601      	movs	r6, #1
 8004fb6:	4635      	mov	r5, r6
 8004fb8:	e00a      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fbe:	d0e5      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fc4:	d0e2      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004fc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fca:	d0df      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004fcc:	2601      	movs	r6, #1
 8004fce:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004fd6:	d009      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x364>
    switch (PeriphClkInit->FdcanClockSelection)
 8004fd8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004fda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fde:	d019      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8004fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fe4:	d024      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8004fe6:	b1d3      	cbz	r3, 800501e <HAL_RCCEx_PeriphCLKConfig+0x396>
 8004fe8:	2601      	movs	r6, #1
 8004fea:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004ff2:	d033      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->FmcClockSelection)
 8004ff4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d85b      	bhi.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8004ffa:	e8df f003 	tbb	[pc, r3]
 8004ffe:	2227      	.short	0x2227
 8005000:	2753      	.short	0x2753
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005002:	2101      	movs	r1, #1
 8005004:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005008:	f7ff fdb8 	bl	8004b7c <RCCEx_PLL3_Config>
 800500c:	4605      	mov	r5, r0
        break;
 800500e:	e7bd      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005010:	462e      	mov	r6, r5
 8005012:	e7dd      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x348>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005014:	4a6e      	ldr	r2, [pc, #440]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005016:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800501c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800501e:	b975      	cbnz	r5, 800503e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005020:	4a6b      	ldr	r2, [pc, #428]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005022:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005024:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005028:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800502a:	430b      	orrs	r3, r1
 800502c:	6513      	str	r3, [r2, #80]	; 0x50
 800502e:	e7dd      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x364>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005030:	2101      	movs	r1, #1
 8005032:	f104 0008 	add.w	r0, r4, #8
 8005036:	f7ff fd1b 	bl	8004a70 <RCCEx_PLL2_Config>
 800503a:	4605      	mov	r5, r0
        break;
 800503c:	e7ef      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x396>
 800503e:	462e      	mov	r6, r5
 8005040:	e7d4      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x364>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005042:	4a63      	ldr	r2, [pc, #396]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005044:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800504a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800504c:	bba5      	cbnz	r5, 80050b8 <HAL_RCCEx_PeriphCLKConfig+0x430>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800504e:	4a60      	ldr	r2, [pc, #384]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005050:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005052:	f023 0303 	bic.w	r3, r3, #3
 8005056:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005058:	430b      	orrs	r3, r1
 800505a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005062:	d12b      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x434>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	f013 0f01 	tst.w	r3, #1
 800506a:	f000 80a3 	beq.w	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    switch (PeriphClkInit->Usart16ClockSelection)
 800506e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005070:	2b28      	cmp	r3, #40	; 0x28
 8005072:	f200 809d 	bhi.w	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005076:	e8df f003 	tbb	[pc, r3]
 800507a:	9b8b      	.short	0x9b8b
 800507c:	9b9b9b9b 	.word	0x9b9b9b9b
 8005080:	9b859b9b 	.word	0x9b859b9b
 8005084:	9b9b9b9b 	.word	0x9b9b9b9b
 8005088:	9b949b9b 	.word	0x9b949b9b
 800508c:	9b9b9b9b 	.word	0x9b9b9b9b
 8005090:	9b8b9b9b 	.word	0x9b8b9b9b
 8005094:	9b9b9b9b 	.word	0x9b9b9b9b
 8005098:	9b8b9b9b 	.word	0x9b8b9b9b
 800509c:	9b9b9b9b 	.word	0x9b9b9b9b
 80050a0:	9b9b      	.short	0x9b9b
 80050a2:	8b          	.byte	0x8b
 80050a3:	00          	.byte	0x00
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050a4:	2102      	movs	r1, #2
 80050a6:	f104 0008 	add.w	r0, r4, #8
 80050aa:	f7ff fce1 	bl	8004a70 <RCCEx_PLL2_Config>
 80050ae:	4605      	mov	r5, r0
        break;
 80050b0:	e7cc      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->FmcClockSelection)
 80050b2:	2601      	movs	r6, #1
 80050b4:	4635      	mov	r5, r6
 80050b6:	e7d1      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 80050b8:	462e      	mov	r6, r5
 80050ba:	e7cf      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050bc:	4a45      	ldr	r2, [pc, #276]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80050be:	6813      	ldr	r3, [r2, #0]
 80050c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80050c6:	f7fc fa63 	bl	8001590 <HAL_GetTick>
 80050ca:	4607      	mov	r7, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050cc:	4b41      	ldr	r3, [pc, #260]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80050d4:	d105      	bne.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050d6:	f7fc fa5b 	bl	8001590 <HAL_GetTick>
 80050da:	1bc0      	subs	r0, r0, r7
 80050dc:	2864      	cmp	r0, #100	; 0x64
 80050de:	d9f5      	bls.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x444>
        ret = HAL_TIMEOUT;
 80050e0:	2503      	movs	r5, #3
    if (ret == HAL_OK)
 80050e2:	2d00      	cmp	r5, #0
 80050e4:	d14a      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80050e6:	4b3a      	ldr	r3, [pc, #232]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80050e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ea:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80050ee:	4053      	eors	r3, r2
 80050f0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80050f4:	d00c      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x488>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050f6:	4b36      	ldr	r3, [pc, #216]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80050f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80050fe:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005100:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005104:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005106:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005108:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800510c:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800510e:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005110:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8005114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005118:	d015      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x4be>
      if (ret == HAL_OK)
 800511a:	bb8d      	cbnz	r5, 8005180 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800511c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8005120:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005124:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005128:	d01e      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800512a:	4a29      	ldr	r2, [pc, #164]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800512c:	6913      	ldr	r3, [r2, #16]
 800512e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005132:	6113      	str	r3, [r2, #16]
 8005134:	4926      	ldr	r1, [pc, #152]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005136:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8005138:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800513c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005140:	4313      	orrs	r3, r2
 8005142:	670b      	str	r3, [r1, #112]	; 0x70
 8005144:	e78e      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        tickstart = HAL_GetTick();
 8005146:	f7fc fa23 	bl	8001590 <HAL_GetTick>
 800514a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800514c:	4b20      	ldr	r3, [pc, #128]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800514e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005150:	f013 0f02 	tst.w	r3, #2
 8005154:	d1e1      	bne.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x492>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005156:	f7fc fa1b 	bl	8001590 <HAL_GetTick>
 800515a:	1bc0      	subs	r0, r0, r7
 800515c:	f241 3388 	movw	r3, #5000	; 0x1388
 8005160:	4298      	cmp	r0, r3
 8005162:	d9f3      	bls.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
            ret = HAL_TIMEOUT;
 8005164:	2503      	movs	r5, #3
 8005166:	e7d8      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x492>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005168:	4819      	ldr	r0, [pc, #100]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800516a:	6902      	ldr	r2, [r0, #16]
 800516c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8005170:	4919      	ldr	r1, [pc, #100]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005172:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8005176:	4313      	orrs	r3, r2
 8005178:	6103      	str	r3, [r0, #16]
 800517a:	e7db      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      status = ret;
 800517c:	462e      	mov	r6, r5
 800517e:	e771      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        status = ret;
 8005180:	462e      	mov	r6, r5
 8005182:	e76f      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005184:	2101      	movs	r1, #1
 8005186:	f104 0008 	add.w	r0, r4, #8
 800518a:	f7ff fc71 	bl	8004a70 <RCCEx_PLL2_Config>
 800518e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005190:	b9e5      	cbnz	r5, 80051cc <HAL_RCCEx_PeriphCLKConfig+0x544>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005192:	4a0f      	ldr	r2, [pc, #60]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005194:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005196:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800519a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800519c:	430b      	orrs	r3, r1
 800519e:	6553      	str	r3, [r2, #84]	; 0x54
 80051a0:	e008      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051a2:	2101      	movs	r1, #1
 80051a4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80051a8:	f7ff fce8 	bl	8004b7c <RCCEx_PLL3_Config>
 80051ac:	4605      	mov	r5, r0
        break;
 80051ae:	e7ef      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x508>
    switch (PeriphClkInit->Usart16ClockSelection)
 80051b0:	2601      	movs	r6, #1
 80051b2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	f013 0f02 	tst.w	r3, #2
 80051ba:	d01d      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80051bc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80051be:	2b05      	cmp	r3, #5
 80051c0:	d82e      	bhi.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80051c2:	e8df f003 	tbb	[pc, r3]
 80051c6:	0b11      	.short	0x0b11
 80051c8:	11111126 	.word	0x11111126
 80051cc:	462e      	mov	r6, r5
 80051ce:	e7f1      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80051d0:	58024400 	.word	0x58024400
 80051d4:	58024800 	.word	0x58024800
 80051d8:	00ffffcf 	.word	0x00ffffcf
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051dc:	2101      	movs	r1, #1
 80051de:	f104 0008 	add.w	r0, r4, #8
 80051e2:	f7ff fc45 	bl	8004a70 <RCCEx_PLL2_Config>
 80051e6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80051e8:	b9ed      	cbnz	r5, 8005226 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80051ea:	4aa9      	ldr	r2, [pc, #676]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x808>)
 80051ec:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80051ee:	f023 0307 	bic.w	r3, r3, #7
 80051f2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80051f4:	430b      	orrs	r3, r1
 80051f6:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	f013 0f04 	tst.w	r3, #4
 80051fe:	d023      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005200:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005204:	2b05      	cmp	r3, #5
 8005206:	d845      	bhi.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005208:	e8df f003 	tbb	[pc, r3]
 800520c:	153d0f15 	.word	0x153d0f15
 8005210:	1515      	.short	0x1515
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005212:	2101      	movs	r1, #1
 8005214:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005218:	f7ff fcb0 	bl	8004b7c <RCCEx_PLL3_Config>
 800521c:	4605      	mov	r5, r0
        break;
 800521e:	e7e3      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005220:	2601      	movs	r6, #1
 8005222:	4635      	mov	r5, r6
 8005224:	e7e8      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005226:	462e      	mov	r6, r5
 8005228:	e7e6      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x570>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800522a:	2101      	movs	r1, #1
 800522c:	f104 0008 	add.w	r0, r4, #8
 8005230:	f7ff fc1e 	bl	8004a70 <RCCEx_PLL2_Config>
 8005234:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005236:	bb85      	cbnz	r5, 800529a <HAL_RCCEx_PeriphCLKConfig+0x612>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005238:	4a95      	ldr	r2, [pc, #596]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x808>)
 800523a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800523c:	f023 0307 	bic.w	r3, r3, #7
 8005240:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005244:	430b      	orrs	r3, r1
 8005246:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	f013 0f20 	tst.w	r3, #32
 800524e:	d034      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x632>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005250:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005258:	d04e      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x670>
 800525a:	d823      	bhi.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800525c:	b143      	cbz	r3, 8005270 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 800525e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005262:	d11c      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x616>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005264:	2100      	movs	r1, #0
 8005266:	f104 0008 	add.w	r0, r4, #8
 800526a:	f7ff fc01 	bl	8004a70 <RCCEx_PLL2_Config>
 800526e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005270:	2d00      	cmp	r5, #0
 8005272:	d148      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005274:	4a86      	ldr	r2, [pc, #536]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x808>)
 8005276:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005278:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800527c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005280:	430b      	orrs	r3, r1
 8005282:	6553      	str	r3, [r2, #84]	; 0x54
 8005284:	e019      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x632>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005286:	2101      	movs	r1, #1
 8005288:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800528c:	f7ff fc76 	bl	8004b7c <RCCEx_PLL3_Config>
 8005290:	4605      	mov	r5, r0
        break;
 8005292:	e7d0      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005294:	2601      	movs	r6, #1
 8005296:	4635      	mov	r5, r6
 8005298:	e7d6      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800529a:	462e      	mov	r6, r5
 800529c:	e7d4      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800529e:	2601      	movs	r6, #1
 80052a0:	4635      	mov	r5, r6
 80052a2:	e00a      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x632>
 80052a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a8:	d0e2      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 80052aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052ae:	d0df      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 80052b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052b4:	d0dc      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 80052b6:	2601      	movs	r6, #1
 80052b8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80052c0:	d031      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x69e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80052c2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80052c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ca:	d04d      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 80052cc:	d820      	bhi.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80052ce:	b143      	cbz	r3, 80052e2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
 80052d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d4:	d119      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052d6:	2100      	movs	r1, #0
 80052d8:	f104 0008 	add.w	r0, r4, #8
 80052dc:	f7ff fbc8 	bl	8004a70 <RCCEx_PLL2_Config>
 80052e0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80052e2:	2d00      	cmp	r5, #0
 80052e4:	d147      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052e6:	4a6a      	ldr	r2, [pc, #424]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x808>)
 80052e8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80052ea:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80052ee:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80052f2:	430b      	orrs	r3, r1
 80052f4:	6593      	str	r3, [r2, #88]	; 0x58
 80052f6:	e016      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x69e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052f8:	2102      	movs	r1, #2
 80052fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80052fe:	f7ff fc3d 	bl	8004b7c <RCCEx_PLL3_Config>
 8005302:	4605      	mov	r5, r0
        break;
 8005304:	e7b4      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 8005306:	462e      	mov	r6, r5
 8005308:	e7d7      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x632>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800530a:	2601      	movs	r6, #1
 800530c:	4635      	mov	r5, r6
 800530e:	e00a      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8005310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005314:	d0e5      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
 8005316:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800531a:	d0e2      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
 800531c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005320:	d0df      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
 8005322:	2601      	movs	r6, #1
 8005324:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	f013 0f80 	tst.w	r3, #128	; 0x80
 800532c:	d033      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800532e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8005332:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005336:	f000 80a1 	beq.w	800547c <HAL_RCCEx_PeriphCLKConfig+0x7f4>
 800533a:	d821      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800533c:	b143      	cbz	r3, 8005350 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 800533e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005342:	d11a      	bne.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005344:	2100      	movs	r1, #0
 8005346:	f104 0008 	add.w	r0, r4, #8
 800534a:	f7ff fb91 	bl	8004a70 <RCCEx_PLL2_Config>
 800534e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005350:	2d00      	cmp	r5, #0
 8005352:	f040 809a 	bne.w	800548a <HAL_RCCEx_PeriphCLKConfig+0x802>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005356:	4a4e      	ldr	r2, [pc, #312]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x808>)
 8005358:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800535a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800535e:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8005362:	430b      	orrs	r3, r1
 8005364:	6593      	str	r3, [r2, #88]	; 0x58
 8005366:	e016      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x70e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005368:	2102      	movs	r1, #2
 800536a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800536e:	f7ff fc05 	bl	8004b7c <RCCEx_PLL3_Config>
 8005372:	4605      	mov	r5, r0
        break;
 8005374:	e7b5      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
 8005376:	462e      	mov	r6, r5
 8005378:	e7d5      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x69e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800537a:	2601      	movs	r6, #1
 800537c:	4635      	mov	r5, r6
 800537e:	e00a      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8005380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005384:	d0e4      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 8005386:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800538a:	d0e1      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 800538c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005390:	d0de      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 8005392:	2601      	movs	r6, #1
 8005394:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	f013 0f08 	tst.w	r3, #8
 800539c:	d00c      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800539e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80053a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a6:	d075      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80053a8:	4a39      	ldr	r2, [pc, #228]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x808>)
 80053aa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80053ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80053b0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80053b4:	430b      	orrs	r3, r1
 80053b6:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	f013 0f10 	tst.w	r3, #16
 80053be:	d00c      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x752>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80053c0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80053c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053c8:	d06d      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053ca:	4a31      	ldr	r2, [pc, #196]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x808>)
 80053cc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80053ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d2:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80053d6:	430b      	orrs	r3, r1
 80053d8:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80053e0:	d00b      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x772>
    switch (PeriphClkInit->AdcClockSelection)
 80053e2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80053e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ea:	d075      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x850>
 80053ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053f0:	d068      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d060      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x830>
 80053f6:	2601      	movs	r6, #1
 80053f8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005400:	d00c      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x794>
    switch (PeriphClkInit->UsbClockSelection)
 8005402:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005406:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800540a:	d07d      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x880>
 800540c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005410:	d070      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8005412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005416:	d068      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x862>
 8005418:	2601      	movs	r6, #1
 800541a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005422:	d008      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    switch (PeriphClkInit->SdmmcClockSelection)
 8005424:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005426:	2b00      	cmp	r3, #0
 8005428:	d077      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x892>
 800542a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800542e:	f000 8082 	beq.w	8005536 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 8005432:	2601      	movs	r6, #1
 8005434:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800543c:	f040 8084 	bne.w	8005548 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005446:	f000 808c 	beq.w	8005562 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    switch (PeriphClkInit->RngClockSelection)
 800544a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800544c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005450:	f000 80df 	beq.w	8005612 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8005454:	f240 8082 	bls.w	800555c <HAL_RCCEx_PeriphCLKConfig+0x8d4>
 8005458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800545c:	d003      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800545e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005462:	f040 80d4 	bne.w	800560e <HAL_RCCEx_PeriphCLKConfig+0x986>
    if (ret == HAL_OK)
 8005466:	2d00      	cmp	r5, #0
 8005468:	f040 80d9 	bne.w	800561e <HAL_RCCEx_PeriphCLKConfig+0x996>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800546c:	4a08      	ldr	r2, [pc, #32]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x808>)
 800546e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005474:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005476:	430b      	orrs	r3, r1
 8005478:	6553      	str	r3, [r2, #84]	; 0x54
 800547a:	e072      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x8da>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800547c:	2102      	movs	r1, #2
 800547e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005482:	f7ff fb7b 	bl	8004b7c <RCCEx_PLL3_Config>
 8005486:	4605      	mov	r5, r0
        break;
 8005488:	e762      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 800548a:	462e      	mov	r6, r5
 800548c:	e783      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 800548e:	bf00      	nop
 8005490:	58024400 	.word	0x58024400
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005494:	2102      	movs	r1, #2
 8005496:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800549a:	f7ff fb6f 	bl	8004b7c <RCCEx_PLL3_Config>
 800549e:	2800      	cmp	r0, #0
 80054a0:	d082      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x720>
        status = HAL_ERROR;
 80054a2:	2601      	movs	r6, #1
 80054a4:	e780      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x720>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054a6:	2102      	movs	r1, #2
 80054a8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80054ac:	f7ff fb66 	bl	8004b7c <RCCEx_PLL3_Config>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d08a      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x742>
        status = HAL_ERROR;
 80054b4:	2601      	movs	r6, #1
 80054b6:	e788      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x742>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054b8:	2100      	movs	r1, #0
 80054ba:	f104 0008 	add.w	r0, r4, #8
 80054be:	f7ff fad7 	bl	8004a70 <RCCEx_PLL2_Config>
 80054c2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80054c4:	b97d      	cbnz	r5, 80054e6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054c6:	4a72      	ldr	r2, [pc, #456]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 80054c8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80054ca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80054ce:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80054d2:	430b      	orrs	r3, r1
 80054d4:	6593      	str	r3, [r2, #88]	; 0x58
 80054d6:	e790      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x772>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054d8:	2102      	movs	r1, #2
 80054da:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80054de:	f7ff fb4d 	bl	8004b7c <RCCEx_PLL3_Config>
 80054e2:	4605      	mov	r5, r0
        break;
 80054e4:	e7ee      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80054e6:	462e      	mov	r6, r5
 80054e8:	e787      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x772>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ea:	4a69      	ldr	r2, [pc, #420]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 80054ec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80054ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054f2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80054f4:	b97d      	cbnz	r5, 8005516 <HAL_RCCEx_PeriphCLKConfig+0x88e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054f6:	4a66      	ldr	r2, [pc, #408]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 80054f8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80054fa:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80054fe:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8005502:	430b      	orrs	r3, r1
 8005504:	6553      	str	r3, [r2, #84]	; 0x54
 8005506:	e789      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x794>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005508:	2101      	movs	r1, #1
 800550a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800550e:	f7ff fb35 	bl	8004b7c <RCCEx_PLL3_Config>
 8005512:	4605      	mov	r5, r0
        break;
 8005514:	e7ee      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8005516:	462e      	mov	r6, r5
 8005518:	e780      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x794>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800551a:	4a5d      	ldr	r2, [pc, #372]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 800551c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800551e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005522:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8005524:	b975      	cbnz	r5, 8005544 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005526:	4a5a      	ldr	r2, [pc, #360]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8005528:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800552a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800552e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005530:	430b      	orrs	r3, r1
 8005532:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005534:	e77f      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005536:	2102      	movs	r1, #2
 8005538:	f104 0008 	add.w	r0, r4, #8
 800553c:	f7ff fa98 	bl	8004a70 <RCCEx_PLL2_Config>
 8005540:	4605      	mov	r5, r0
        break;
 8005542:	e7ef      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8005544:	462e      	mov	r6, r5
 8005546:	e776      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005548:	2102      	movs	r1, #2
 800554a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800554e:	f7ff fb15 	bl	8004b7c <RCCEx_PLL3_Config>
 8005552:	2800      	cmp	r0, #0
 8005554:	f43f af74 	beq.w	8005440 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      status = HAL_ERROR;
 8005558:	2601      	movs	r6, #1
 800555a:	e771      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    switch (PeriphClkInit->RngClockSelection)
 800555c:	2b00      	cmp	r3, #0
 800555e:	d082      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 8005560:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005568:	d006      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800556a:	4a49      	ldr	r2, [pc, #292]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 800556c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800556e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005572:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005574:	430b      	orrs	r3, r1
 8005576:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800557e:	d006      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x906>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005580:	4a43      	ldr	r2, [pc, #268]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8005582:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005584:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005588:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800558a:	430b      	orrs	r3, r1
 800558c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005594:	d009      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x922>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005596:	4b3e      	ldr	r3, [pc, #248]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8005598:	691a      	ldr	r2, [r3, #16]
 800559a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800559e:	611a      	str	r2, [r3, #16]
 80055a0:	691a      	ldr	r2, [r3, #16]
 80055a2:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 80055a6:	430a      	orrs	r2, r1
 80055a8:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	da06      	bge.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x936>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80055b0:	4a37      	ldr	r2, [pc, #220]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 80055b2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80055b4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80055b8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80055ba:	430b      	orrs	r3, r1
 80055bc:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80055c4:	d007      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055c6:	4a32      	ldr	r2, [pc, #200]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 80055c8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80055ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80055ce:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80055d2:	430b      	orrs	r3, r1
 80055d4:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80055d6:	6863      	ldr	r3, [r4, #4]
 80055d8:	f013 0f01 	tst.w	r3, #1
 80055dc:	d121      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80055de:	6863      	ldr	r3, [r4, #4]
 80055e0:	f013 0f02 	tst.w	r3, #2
 80055e4:	d126      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80055e6:	6863      	ldr	r3, [r4, #4]
 80055e8:	f013 0f04 	tst.w	r3, #4
 80055ec:	d12b      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80055ee:	6863      	ldr	r3, [r4, #4]
 80055f0:	f013 0f08 	tst.w	r3, #8
 80055f4:	d130      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80055f6:	6863      	ldr	r3, [r4, #4]
 80055f8:	f013 0f10 	tst.w	r3, #16
 80055fc:	d135      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80055fe:	6863      	ldr	r3, [r4, #4]
 8005600:	f013 0f20 	tst.w	r3, #32
 8005604:	d13a      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  if (status == HAL_OK)
 8005606:	b106      	cbz	r6, 800560a <HAL_RCCEx_PeriphCLKConfig+0x982>
  return HAL_ERROR;
 8005608:	2601      	movs	r6, #1
}
 800560a:	4630      	mov	r0, r6
 800560c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (PeriphClkInit->RngClockSelection)
 800560e:	2601      	movs	r6, #1
 8005610:	e7a7      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x8da>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005612:	4a1f      	ldr	r2, [pc, #124]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8005614:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800561a:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800561c:	e723      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800561e:	462e      	mov	r6, r5
 8005620:	e79f      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005622:	2100      	movs	r1, #0
 8005624:	f104 0008 	add.w	r0, r4, #8
 8005628:	f7ff fa22 	bl	8004a70 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800562c:	2800      	cmp	r0, #0
 800562e:	d0d6      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x956>
      status = ret;
 8005630:	4606      	mov	r6, r0
 8005632:	e7d4      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x956>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005634:	2101      	movs	r1, #1
 8005636:	f104 0008 	add.w	r0, r4, #8
 800563a:	f7ff fa19 	bl	8004a70 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800563e:	2800      	cmp	r0, #0
 8005640:	d0d1      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x95e>
      status = ret;
 8005642:	4606      	mov	r6, r0
 8005644:	e7cf      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x95e>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005646:	2102      	movs	r1, #2
 8005648:	f104 0008 	add.w	r0, r4, #8
 800564c:	f7ff fa10 	bl	8004a70 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8005650:	2800      	cmp	r0, #0
 8005652:	d0cc      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x966>
      status = ret;
 8005654:	4606      	mov	r6, r0
 8005656:	e7ca      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x966>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005658:	2100      	movs	r1, #0
 800565a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800565e:	f7ff fa8d 	bl	8004b7c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8005662:	2800      	cmp	r0, #0
 8005664:	d0c7      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
      status = ret;
 8005666:	4606      	mov	r6, r0
 8005668:	e7c5      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800566a:	2101      	movs	r1, #1
 800566c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005670:	f7ff fa84 	bl	8004b7c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8005674:	2800      	cmp	r0, #0
 8005676:	d0c2      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x976>
      status = ret;
 8005678:	4606      	mov	r6, r0
 800567a:	e7c0      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x976>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800567c:	2102      	movs	r1, #2
 800567e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005682:	f7ff fa7b 	bl	8004b7c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8005686:	2800      	cmp	r0, #0
 8005688:	d0bd      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x97e>
      status = ret;
 800568a:	4606      	mov	r6, r0
 800568c:	e7bb      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800568e:	bf00      	nop
 8005690:	58024400 	.word	0x58024400

08005694 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8005694:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005696:	f7ff f9b7 	bl	8004a08 <HAL_RCC_GetHCLKFreq>
 800569a:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80056a2:	4a04      	ldr	r2, [pc, #16]	; (80056b4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80056a4:	5cd3      	ldrb	r3, [r2, r3]
 80056a6:	f003 031f 	and.w	r3, r3, #31
}
 80056aa:	40d8      	lsrs	r0, r3
 80056ac:	bd08      	pop	{r3, pc}
 80056ae:	bf00      	nop
 80056b0:	58024400 	.word	0x58024400
 80056b4:	08008b68 	.word	0x08008b68

080056b8 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 80056b8:	b510      	push	{r4, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056ba:	4a77      	ldr	r2, [pc, #476]	; (8005898 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 80056bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80056be:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80056c0:	f3c4 3e05 	ubfx	lr, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80056c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80056c6:	f3c3 1c00 	ubfx	ip, r3, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80056ca:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80056cc:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80056d0:	fb0c f303 	mul.w	r3, ip, r3
  if (pll2m != 0U)
 80056d4:	f414 3f7c 	tst.w	r4, #258048	; 0x3f000
 80056d8:	f000 80d8 	beq.w	800588c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
 80056dc:	f001 0103 	and.w	r1, r1, #3
 80056e0:	ee07 3a90 	vmov	s15, r3
 80056e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 80056e8:	2901      	cmp	r1, #1
 80056ea:	d065      	beq.n	80057b8 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 80056ec:	2902      	cmp	r1, #2
 80056ee:	f000 80b0 	beq.w	8005852 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 80056f2:	b1e1      	cbz	r1, 800572e <HAL_RCCEx_GetPLL2ClockFreq+0x76>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80056f4:	ee07 ea10 	vmov	s14, lr
 80056f8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80056fc:	ed9f 6a67 	vldr	s12, [pc, #412]	; 800589c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8005700:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005704:	4b64      	ldr	r3, [pc, #400]	; (8005898 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570c:	ee07 3a10 	vmov	s14, r3
 8005710:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005714:	ed9f 6a62 	vldr	s12, [pc, #392]	; 80058a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8005718:	ee67 7a86 	vmul.f32	s15, s15, s12
 800571c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005720:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005724:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005728:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
 800572c:	e060      	b.n	80057f0 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800572e:	6813      	ldr	r3, [r2, #0]
 8005730:	f013 0f20 	tst.w	r3, #32
 8005734:	d023      	beq.n	800577e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005736:	4611      	mov	r1, r2
 8005738:	6812      	ldr	r2, [r2, #0]
 800573a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800573e:	4b59      	ldr	r3, [pc, #356]	; (80058a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>)
 8005740:	40d3      	lsrs	r3, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005742:	ee07 3a10 	vmov	s14, r3
 8005746:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800574a:	ee06 ea90 	vmov	s13, lr
 800574e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8005752:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8005756:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8005758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800575c:	ee07 3a10 	vmov	s14, r3
 8005760:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005764:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 80058a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8005768:	ee67 7a86 	vmul.f32	s15, s15, s12
 800576c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005774:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005778:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800577c:	e038      	b.n	80057f0 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800577e:	ee07 ea10 	vmov	s14, lr
 8005782:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005786:	ed9f 6a48 	vldr	s12, [pc, #288]	; 80058a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 800578a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800578e:	4b42      	ldr	r3, [pc, #264]	; (8005898 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005796:	ee07 3a10 	vmov	s14, r3
 800579a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800579e:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80058a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80057a2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80057a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80057b6:	e01b      	b.n	80057f0 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057b8:	ee07 ea10 	vmov	s14, lr
 80057bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80057c0:	ed9f 6a36 	vldr	s12, [pc, #216]	; 800589c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 80057c4:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80057c8:	4b33      	ldr	r3, [pc, #204]	; (8005898 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d0:	ee07 3a10 	vmov	s14, r3
 80057d4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80057d8:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80058a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80057dc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80057e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80057f0:	4a29      	ldr	r2, [pc, #164]	; (8005898 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 80057f2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80057f4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80057f8:	ee07 3a10 	vmov	s14, r3
 80057fc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005800:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005804:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800580c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005810:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005814:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005816:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800581a:	ee07 3a10 	vmov	s14, r3
 800581e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005822:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800582a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800582e:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005832:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005834:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005838:	ee07 3a90 	vmov	s15, r3
 800583c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005840:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005844:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005848:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800584c:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8005850:	bd10      	pop	{r4, pc}
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005852:	ee07 ea10 	vmov	s14, lr
 8005856:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800585a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 800585e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005862:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8005864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800586a:	ee07 3a10 	vmov	s14, r3
 800586e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005872:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80058a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8005876:	ee67 7a86 	vmul.f32	s15, s15, s12
 800587a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800587e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005882:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005886:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
 800588a:	e7b1      	b.n	80057f0 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005890:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005892:	6083      	str	r3, [r0, #8]
}
 8005894:	e7dc      	b.n	8005850 <HAL_RCCEx_GetPLL2ClockFreq+0x198>
 8005896:	bf00      	nop
 8005898:	58024400 	.word	0x58024400
 800589c:	4a742400 	.word	0x4a742400
 80058a0:	39000000 	.word	0x39000000
 80058a4:	03d09000 	.word	0x03d09000
 80058a8:	4c742400 	.word	0x4c742400
 80058ac:	4bbebc20 	.word	0x4bbebc20

080058b0 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 80058b0:	b510      	push	{r4, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058b2:	4a77      	ldr	r2, [pc, #476]	; (8005a90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 80058b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80058b6:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80058b8:	f3c4 5e05 	ubfx	lr, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80058bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80058be:	f3c3 2c00 	ubfx	ip, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80058c2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80058c4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80058c8:	fb0c f303 	mul.w	r3, ip, r3
  if (pll3m != 0U)
 80058cc:	f014 7f7c 	tst.w	r4, #66060288	; 0x3f00000
 80058d0:	f000 80d8 	beq.w	8005a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
 80058d4:	f001 0103 	and.w	r1, r1, #3
 80058d8:	ee07 3a90 	vmov	s15, r3
 80058dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 80058e0:	2901      	cmp	r1, #1
 80058e2:	d065      	beq.n	80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 80058e4:	2902      	cmp	r1, #2
 80058e6:	f000 80b0 	beq.w	8005a4a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 80058ea:	b1e1      	cbz	r1, 8005926 <HAL_RCCEx_GetPLL3ClockFreq+0x76>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058ec:	ee07 ea10 	vmov	s14, lr
 80058f0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80058f4:	ed9f 6a67 	vldr	s12, [pc, #412]	; 8005a94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 80058f8:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80058fc:	4b64      	ldr	r3, [pc, #400]	; (8005a90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 80058fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005904:	ee07 3a10 	vmov	s14, r3
 8005908:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800590c:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8005a98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8005910:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005918:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800591c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005920:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
 8005924:	e060      	b.n	80059e8 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005926:	6813      	ldr	r3, [r2, #0]
 8005928:	f013 0f20 	tst.w	r3, #32
 800592c:	d023      	beq.n	8005976 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800592e:	4611      	mov	r1, r2
 8005930:	6812      	ldr	r2, [r2, #0]
 8005932:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005936:	4b59      	ldr	r3, [pc, #356]	; (8005a9c <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>)
 8005938:	40d3      	lsrs	r3, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800593a:	ee07 3a10 	vmov	s14, r3
 800593e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005942:	ee06 ea90 	vmov	s13, lr
 8005946:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800594a:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800594e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005954:	ee07 3a10 	vmov	s14, r3
 8005958:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800595c:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8005a98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8005960:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005968:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800596c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005970:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005974:	e038      	b.n	80059e8 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005976:	ee07 ea10 	vmov	s14, lr
 800597a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800597e:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8005aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 8005982:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005986:	4b42      	ldr	r3, [pc, #264]	; (8005a90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598e:	ee07 3a10 	vmov	s14, r3
 8005992:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005996:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8005a98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800599a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800599e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80059ae:	e01b      	b.n	80059e8 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059b0:	ee07 ea10 	vmov	s14, lr
 80059b4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80059b8:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8005a94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 80059bc:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80059c0:	4b33      	ldr	r3, [pc, #204]	; (8005a90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059c8:	ee07 3a10 	vmov	s14, r3
 80059cc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80059d0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8005a98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80059d4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80059d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80059e8:	4a29      	ldr	r2, [pc, #164]	; (8005a90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 80059ea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80059ec:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80059f0:	ee07 3a10 	vmov	s14, r3
 80059f4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80059f8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80059fc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a08:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005a0c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005a0e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005a12:	ee07 3a10 	vmov	s14, r3
 8005a16:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005a1a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005a1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a26:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005a2a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005a2c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005a30:	ee07 3a90 	vmov	s15, r3
 8005a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a38:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005a3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a40:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005a44:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8005a48:	bd10      	pop	{r4, pc}
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a4a:	ee07 ea10 	vmov	s14, lr
 8005a4e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005a52:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8005aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8005a56:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a62:	ee07 3a10 	vmov	s14, r3
 8005a66:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005a6a:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8005a98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8005a6e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
 8005a82:	e7b1      	b.n	80059e8 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005a88:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005a8a:	6083      	str	r3, [r0, #8]
}
 8005a8c:	e7dc      	b.n	8005a48 <HAL_RCCEx_GetPLL3ClockFreq+0x198>
 8005a8e:	bf00      	nop
 8005a90:	58024400 	.word	0x58024400
 8005a94:	4a742400 	.word	0x4a742400
 8005a98:	39000000 	.word	0x39000000
 8005a9c:	03d09000 	.word	0x03d09000
 8005aa0:	4c742400 	.word	0x4c742400
 8005aa4:	4bbebc20 	.word	0x4bbebc20

08005aa8 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 8005aa8:	b510      	push	{r4, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005aaa:	4a77      	ldr	r2, [pc, #476]	; (8005c88 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8005aac:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005aae:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8005ab0:	f3c4 1e05 	ubfx	lr, r4, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005ab4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005ab6:	f003 0c01 	and.w	ip, r3, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005aba:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005abc:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8005ac0:	fb0c f303 	mul.w	r3, ip, r3
  if (pll1m != 0U)
 8005ac4:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8005ac8:	f000 80d8 	beq.w	8005c7c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
 8005acc:	f001 0103 	and.w	r1, r1, #3
 8005ad0:	ee07 3a90 	vmov	s15, r3
 8005ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8005ad8:	2901      	cmp	r1, #1
 8005ada:	d065      	beq.n	8005ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 8005adc:	2902      	cmp	r1, #2
 8005ade:	f000 80b0 	beq.w	8005c42 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 8005ae2:	b1e1      	cbz	r1, 8005b1e <HAL_RCCEx_GetPLL1ClockFreq+0x76>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ae4:	ee07 ea10 	vmov	s14, lr
 8005ae8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005aec:	ed9f 6a67 	vldr	s12, [pc, #412]	; 8005c8c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8005af0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005af4:	4b64      	ldr	r3, [pc, #400]	; (8005c88 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8005af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005afc:	ee07 3a10 	vmov	s14, r3
 8005b00:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005b04:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8005c90 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8005b08:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b18:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
 8005b1c:	e060      	b.n	8005be0 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b1e:	6813      	ldr	r3, [r2, #0]
 8005b20:	f013 0f20 	tst.w	r3, #32
 8005b24:	d023      	beq.n	8005b6e <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b26:	4611      	mov	r1, r2
 8005b28:	6812      	ldr	r2, [r2, #0]
 8005b2a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005b2e:	4b59      	ldr	r3, [pc, #356]	; (8005c94 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>)
 8005b30:	40d3      	lsrs	r3, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b32:	ee07 3a10 	vmov	s14, r3
 8005b36:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005b3a:	ee06 ea90 	vmov	s13, lr
 8005b3e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8005b42:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8005b46:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8005b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b4c:	ee07 3a10 	vmov	s14, r3
 8005b50:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005b54:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8005c90 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8005b58:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b6c:	e038      	b.n	8005be0 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b6e:	ee07 ea10 	vmov	s14, lr
 8005b72:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005b76:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8005c8c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8005b7a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005b7e:	4b42      	ldr	r3, [pc, #264]	; (8005c88 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b86:	ee07 3a10 	vmov	s14, r3
 8005b8a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005b8e:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8005c90 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8005b92:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ba2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ba6:	e01b      	b.n	8005be0 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ba8:	ee07 ea10 	vmov	s14, lr
 8005bac:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005bb0:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8005c98 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
 8005bb4:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005bb8:	4b33      	ldr	r3, [pc, #204]	; (8005c88 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8005bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bc0:	ee07 3a10 	vmov	s14, r3
 8005bc4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005bc8:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8005c90 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8005bcc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bdc:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005be0:	4a29      	ldr	r2, [pc, #164]	; (8005c88 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8005be2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005be4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005be8:	ee07 3a10 	vmov	s14, r3
 8005bec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005bf0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005bf4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c00:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005c04:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005c06:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005c0a:	ee07 3a10 	vmov	s14, r3
 8005c0e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005c12:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c1e:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005c22:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005c24:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005c28:	ee07 3a90 	vmov	s15, r3
 8005c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c30:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005c34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c38:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005c3c:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8005c40:	bd10      	pop	{r4, pc}
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c42:	ee07 ea10 	vmov	s14, lr
 8005c46:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005c4a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8005c9c <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 8005c4e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005c52:	4b0d      	ldr	r3, [pc, #52]	; (8005c88 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8005c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5a:	ee07 3a10 	vmov	s14, r3
 8005c5e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005c62:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8005c90 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8005c66:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c76:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
 8005c7a:	e7b1      	b.n	8005be0 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005c80:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005c82:	6083      	str	r3, [r0, #8]
}
 8005c84:	e7dc      	b.n	8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x198>
 8005c86:	bf00      	nop
 8005c88:	58024400 	.word	0x58024400
 8005c8c:	4c742400 	.word	0x4c742400
 8005c90:	39000000 	.word	0x39000000
 8005c94:	03d09000 	.word	0x03d09000
 8005c98:	4a742400 	.word	0x4a742400
 8005c9c:	4bbebc20 	.word	0x4bbebc20

08005ca0 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8005ca0:	b500      	push	{lr}
 8005ca2:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005ca4:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8005ca8:	430b      	orrs	r3, r1
 8005caa:	d029      	beq.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005cac:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8005cb0:	430b      	orrs	r3, r1
 8005cb2:	d079      	beq.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005cb4:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	f000 80d2 	beq.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005cbe:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 8005cc2:	430b      	orrs	r3, r1
 8005cc4:	f000 812a 	beq.w	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005cc8:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8005ccc:	430b      	orrs	r3, r1
 8005cce:	f000 8189 	beq.w	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005cd2:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8005cd6:	430b      	orrs	r3, r1
 8005cd8:	f000 81d2 	beq.w	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005cdc:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8005ce0:	430b      	orrs	r3, r1
 8005ce2:	f000 8215 	beq.w	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005ce6:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8005cea:	430b      	orrs	r3, r1
 8005cec:	f000 822e 	beq.w	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005cf0:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8005cf4:	ea50 0301 	orrs.w	r3, r0, r1
 8005cf8:	f000 827a 	beq.w	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
    frequency = 0;
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	e2a8      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005d00:	4b96      	ldr	r3, [pc, #600]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d04:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	f200 8299 	bhi.w	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8005d0e:	e8df f003 	tbb	[pc, r3]
 8005d12:	1005      	.short	0x1005
 8005d14:	031b      	.short	0x031b
 8005d16:	26          	.byte	0x26
 8005d17:	00          	.byte	0x00
 8005d18:	4891      	ldr	r0, [pc, #580]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005d1a:	e29a      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d1c:	4b8f      	ldr	r3, [pc, #572]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d1e:	6818      	ldr	r0, [r3, #0]
 8005d20:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005d24:	f000 8295 	beq.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d28:	a807      	add	r0, sp, #28
 8005d2a:	f7ff febd 	bl	8005aa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d2e:	9808      	ldr	r0, [sp, #32]
 8005d30:	e28f      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d32:	4b8a      	ldr	r3, [pc, #552]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005d3a:	f000 828a 	beq.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d3e:	a804      	add	r0, sp, #16
 8005d40:	f7ff fcba 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d44:	9804      	ldr	r0, [sp, #16]
 8005d46:	e284      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d48:	4b84      	ldr	r3, [pc, #528]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d4a:	6818      	ldr	r0, [r3, #0]
 8005d4c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005d50:	f000 827f 	beq.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d54:	a801      	add	r0, sp, #4
 8005d56:	f7ff fdab 	bl	80058b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d5a:	9801      	ldr	r0, [sp, #4]
 8005d5c:	e279      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d5e:	4a7f      	ldr	r2, [pc, #508]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d60:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005d62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d66:	6812      	ldr	r2, [r2, #0]
 8005d68:	f012 0f04 	tst.w	r2, #4
 8005d6c:	d007      	beq.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 8005d6e:	b933      	cbnz	r3, 8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0xde>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d70:	4b7a      	ldr	r3, [pc, #488]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005d78:	487a      	ldr	r0, [pc, #488]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005d7a:	40d8      	lsrs	r0, r3
 8005d7c:	e269      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d7e:	4a77      	ldr	r2, [pc, #476]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d80:	6812      	ldr	r2, [r2, #0]
 8005d82:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005d86:	d003      	beq.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8005d88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d8c:	f000 825a 	beq.w	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d90:	4a72      	ldr	r2, [pc, #456]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d92:	6812      	ldr	r2, [r2, #0]
 8005d94:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005d98:	f000 8256 	beq.w	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005da0:	f000 8254 	beq.w	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          frequency = 0;
 8005da4:	2000      	movs	r0, #0
 8005da6:	e254      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005da8:	4b6c      	ldr	r3, [pc, #432]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dac:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 8005db0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005db4:	d035      	beq.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8005db6:	d916      	bls.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005db8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005dbc:	f000 8248 	beq.w	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8005dc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005dc4:	d120      	bne.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005dc6:	4a65      	ldr	r2, [pc, #404]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005dc8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005dca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005dce:	6812      	ldr	r2, [r2, #0]
 8005dd0:	f012 0f04 	tst.w	r2, #4
 8005dd4:	d030      	beq.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8005dd6:	bb7b      	cbnz	r3, 8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dd8:	4b60      	ldr	r3, [pc, #384]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005de0:	4860      	ldr	r0, [pc, #384]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005de2:	40d8      	lsrs	r0, r3
 8005de4:	e235      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (saiclocksource)
 8005de6:	b18b      	cbz	r3, 8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8005de8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dec:	d10a      	bne.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005dee:	4b5b      	ldr	r3, [pc, #364]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005df0:	6818      	ldr	r0, [r3, #0]
 8005df2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005df6:	f000 822c 	beq.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dfa:	a804      	add	r0, sp, #16
 8005dfc:	f7ff fc5c 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e00:	9804      	ldr	r0, [sp, #16]
 8005e02:	e226      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        frequency = 0;
 8005e04:	2000      	movs	r0, #0
 8005e06:	e224      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8005e08:	2000      	movs	r0, #0
 8005e0a:	e222      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e0c:	4b53      	ldr	r3, [pc, #332]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e0e:	6818      	ldr	r0, [r3, #0]
 8005e10:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005e14:	f000 821d 	beq.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e18:	a807      	add	r0, sp, #28
 8005e1a:	f7ff fe45 	bl	8005aa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e1e:	9808      	ldr	r0, [sp, #32]
 8005e20:	e217      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e22:	4b4e      	ldr	r3, [pc, #312]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e24:	6818      	ldr	r0, [r3, #0]
 8005e26:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005e2a:	f000 8212 	beq.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e2e:	a801      	add	r0, sp, #4
 8005e30:	f7ff fd3e 	bl	80058b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005e34:	9801      	ldr	r0, [sp, #4]
 8005e36:	e20c      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e38:	4a48      	ldr	r2, [pc, #288]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e3a:	6812      	ldr	r2, [r2, #0]
 8005e3c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005e40:	d003      	beq.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005e42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e46:	f000 8207 	beq.w	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e4a:	4a44      	ldr	r2, [pc, #272]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e4c:	6812      	ldr	r2, [r2, #0]
 8005e4e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005e52:	f000 8203 	beq.w	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 8005e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e5a:	f000 8201 	beq.w	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          frequency = 0;
 8005e5e:	2000      	movs	r0, #0
 8005e60:	e1f7      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005e62:	4b3e      	ldr	r3, [pc, #248]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e66:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 8005e6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e6e:	d035      	beq.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8005e70:	d916      	bls.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
 8005e72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e76:	f000 81f5 	beq.w	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8005e7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e7e:	d120      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e80:	4a36      	ldr	r2, [pc, #216]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e82:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005e84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e88:	6812      	ldr	r2, [r2, #0]
 8005e8a:	f012 0f04 	tst.w	r2, #4
 8005e8e:	d030      	beq.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8005e90:	bb7b      	cbnz	r3, 8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e92:	4b32      	ldr	r3, [pc, #200]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005e9a:	4832      	ldr	r0, [pc, #200]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005e9c:	40d8      	lsrs	r0, r3
 8005e9e:	e1d8      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (saiclocksource)
 8005ea0:	b18b      	cbz	r3, 8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x226>
 8005ea2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ea6:	d10a      	bne.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ea8:	4b2c      	ldr	r3, [pc, #176]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005eb0:	f000 81cf 	beq.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eb4:	a804      	add	r0, sp, #16
 8005eb6:	f7ff fbff 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005eba:	9804      	ldr	r0, [sp, #16]
 8005ebc:	e1c9      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        frequency = 0;
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	e1c7      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8005ec2:	2000      	movs	r0, #0
 8005ec4:	e1c5      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ec6:	4b25      	ldr	r3, [pc, #148]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005ece:	f000 81c0 	beq.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ed2:	a807      	add	r0, sp, #28
 8005ed4:	f7ff fde8 	bl	8005aa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ed8:	9808      	ldr	r0, [sp, #32]
 8005eda:	e1ba      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005edc:	4b1f      	ldr	r3, [pc, #124]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005ede:	6818      	ldr	r0, [r3, #0]
 8005ee0:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005ee4:	f000 81b5 	beq.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ee8:	a801      	add	r0, sp, #4
 8005eea:	f7ff fce1 	bl	80058b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005eee:	9801      	ldr	r0, [sp, #4]
 8005ef0:	e1af      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005ef2:	4a1a      	ldr	r2, [pc, #104]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005ef4:	6812      	ldr	r2, [r2, #0]
 8005ef6:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005efa:	d003      	beq.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005efc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f00:	f000 81b2 	beq.w	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f04:	4a15      	ldr	r2, [pc, #84]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005f06:	6812      	ldr	r2, [r2, #0]
 8005f08:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005f0c:	f000 81ae 	beq.w	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f14:	f000 81ac 	beq.w	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
          frequency = 0;
 8005f18:	2000      	movs	r0, #0
 8005f1a:	e19a      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005f1c:	4b0f      	ldr	r3, [pc, #60]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f20:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 8005f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f28:	d03c      	beq.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005f2a:	d91d      	bls.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8005f2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f30:	f000 81a0 	beq.w	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8005f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f38:	d127      	bne.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f3a:	4a08      	ldr	r2, [pc, #32]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005f3c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005f3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	f012 0f04 	tst.w	r2, #4
 8005f48:	d037      	beq.n	8005fba <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d135      	bne.n	8005fba <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f4e:	4b03      	ldr	r3, [pc, #12]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005f56:	4803      	ldr	r0, [pc, #12]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005f58:	40d8      	lsrs	r0, r3
 8005f5a:	e17a      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8005f5c:	58024400 	.word	0x58024400
 8005f60:	00bb8000 	.word	0x00bb8000
 8005f64:	03d09000 	.word	0x03d09000
    switch (srcclk)
 8005f68:	b18b      	cbz	r3, 8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
 8005f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6e:	d10a      	bne.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f70:	4b9b      	ldr	r3, [pc, #620]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005f72:	6818      	ldr	r0, [r3, #0]
 8005f74:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005f78:	f000 816b 	beq.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f7c:	a804      	add	r0, sp, #16
 8005f7e:	f7ff fb9b 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f82:	9804      	ldr	r0, [sp, #16]
 8005f84:	e165      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        frequency = 0;
 8005f86:	2000      	movs	r0, #0
 8005f88:	e163      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	e161      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f8e:	4b94      	ldr	r3, [pc, #592]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005f90:	6818      	ldr	r0, [r3, #0]
 8005f92:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005f96:	f000 815c 	beq.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f9a:	a807      	add	r0, sp, #28
 8005f9c:	f7ff fd84 	bl	8005aa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fa0:	9808      	ldr	r0, [sp, #32]
 8005fa2:	e156      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005fa4:	4b8e      	ldr	r3, [pc, #568]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005fa6:	6818      	ldr	r0, [r3, #0]
 8005fa8:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005fac:	f000 8151 	beq.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fb0:	a801      	add	r0, sp, #4
 8005fb2:	f7ff fc7d 	bl	80058b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005fb6:	9801      	ldr	r0, [sp, #4]
 8005fb8:	e14b      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005fba:	4a89      	ldr	r2, [pc, #548]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005fbc:	6812      	ldr	r2, [r2, #0]
 8005fbe:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005fc2:	d003      	beq.n	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8005fc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fc8:	f000 8156 	beq.w	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005fcc:	4a84      	ldr	r2, [pc, #528]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005fce:	6812      	ldr	r2, [r2, #0]
 8005fd0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005fd4:	f000 8152 	beq.w	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8005fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fdc:	f000 8150 	beq.w	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
          frequency = 0;
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	e136      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005fe4:	4b7e      	ldr	r3, [pc, #504]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 8005fec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ff0:	d032      	beq.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005ff2:	d816      	bhi.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 8005ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff8:	d023      	beq.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005ffa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ffe:	d10a      	bne.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006000:	4b77      	ldr	r3, [pc, #476]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8006008:	f000 8123 	beq.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800600c:	a801      	add	r0, sp, #4
 800600e:	f7ff fc4f 	bl	80058b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006012:	9802      	ldr	r0, [sp, #8]
 8006014:	e11d      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (srcclk)
 8006016:	b913      	cbnz	r3, 800601e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006018:	f7fe fd18 	bl	8004a4c <HAL_RCC_GetPCLK1Freq>
        break;
 800601c:	e119      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (srcclk)
 800601e:	2000      	movs	r0, #0
 8006020:	e117      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8006022:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006026:	d023      	beq.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
 8006028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800602c:	d107      	bne.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800602e:	4b6c      	ldr	r3, [pc, #432]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006030:	6818      	ldr	r0, [r3, #0]
 8006032:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8006036:	f000 810c 	beq.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 800603a:	486a      	ldr	r0, [pc, #424]	; (80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 800603c:	e109      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (srcclk)
 800603e:	2000      	movs	r0, #0
 8006040:	e107      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006042:	4b67      	ldr	r3, [pc, #412]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006044:	6818      	ldr	r0, [r3, #0]
 8006046:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800604a:	f000 8102 	beq.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800604e:	a804      	add	r0, sp, #16
 8006050:	f7ff fb32 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006054:	9805      	ldr	r0, [sp, #20]
 8006056:	e0fc      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006058:	4b61      	ldr	r3, [pc, #388]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800605a:	6818      	ldr	r0, [r3, #0]
 800605c:	f010 0004 	ands.w	r0, r0, #4
 8006060:	f000 80f7 	beq.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800606a:	485f      	ldr	r0, [pc, #380]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800606c:	40d8      	lsrs	r0, r3
 800606e:	e0f0      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006070:	4b5b      	ldr	r3, [pc, #364]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006072:	6818      	ldr	r0, [r3, #0]
 8006074:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8006078:	f000 80eb 	beq.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = CSI_VALUE;
 800607c:	485b      	ldr	r0, [pc, #364]	; (80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800607e:	e0e8      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006080:	4b57      	ldr	r3, [pc, #348]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006084:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 8006088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800608c:	d010      	beq.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 800608e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006092:	d018      	beq.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
 8006094:	b10b      	cbz	r3, 800609a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8006096:	2000      	movs	r0, #0
 8006098:	e0db      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800609a:	4b51      	ldr	r3, [pc, #324]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800609c:	6818      	ldr	r0, [r3, #0]
 800609e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80060a2:	f000 80d6 	beq.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060a6:	a804      	add	r0, sp, #16
 80060a8:	f7ff fb06 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80060ac:	9804      	ldr	r0, [sp, #16]
 80060ae:	e0d0      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060b0:	4b4b      	ldr	r3, [pc, #300]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80060b2:	6818      	ldr	r0, [r3, #0]
 80060b4:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80060b8:	f000 80cb 	beq.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060bc:	a801      	add	r0, sp, #4
 80060be:	f7ff fbf7 	bl	80058b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80060c2:	9803      	ldr	r0, [sp, #12]
 80060c4:	e0c5      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060c6:	4a46      	ldr	r2, [pc, #280]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80060c8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80060ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	f012 0f04 	tst.w	r2, #4
 80060d4:	d007      	beq.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80060d6:	b933      	cbnz	r3, 80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060d8:	4b41      	ldr	r3, [pc, #260]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80060e0:	4841      	ldr	r0, [pc, #260]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 80060e2:	40d8      	lsrs	r0, r3
 80060e4:	e0b5      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80060e6:	4a3e      	ldr	r2, [pc, #248]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80060e8:	6812      	ldr	r2, [r2, #0]
 80060ea:	f412 7f80 	tst.w	r2, #256	; 0x100
 80060ee:	d003      	beq.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 80060f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060f4:	f000 80c6 	beq.w	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060f8:	4a39      	ldr	r2, [pc, #228]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80060fa:	6812      	ldr	r2, [r2, #0]
 80060fc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006100:	f000 80c2 	beq.w	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8006104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006108:	f000 80c0 	beq.w	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = 0;
 800610c:	2000      	movs	r0, #0
 800610e:	e0a0      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006110:	4b33      	ldr	r3, [pc, #204]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    switch (srcclk)
 8006114:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8006118:	d002      	beq.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 800611a:	b963      	cbnz	r3, 8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800611c:	2000      	movs	r0, #0
 800611e:	e098      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006120:	4b2f      	ldr	r3, [pc, #188]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006122:	6818      	ldr	r0, [r3, #0]
 8006124:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8006128:	f000 8093 	beq.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800612c:	a807      	add	r0, sp, #28
 800612e:	f7ff fcbb 	bl	8005aa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006132:	9808      	ldr	r0, [sp, #32]
 8006134:	e08d      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006136:	4b2a      	ldr	r3, [pc, #168]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006138:	6818      	ldr	r0, [r3, #0]
 800613a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800613e:	f000 8088 	beq.w	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006142:	a804      	add	r0, sp, #16
 8006144:	f7ff fab8 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006148:	9806      	ldr	r0, [sp, #24]
 800614a:	e082      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800614c:	4b24      	ldr	r3, [pc, #144]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800614e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006150:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 8006154:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006158:	d02f      	beq.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 800615a:	d815      	bhi.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 800615c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006160:	d021      	beq.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006166:	d109      	bne.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006168:	4b1d      	ldr	r3, [pc, #116]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800616a:	6818      	ldr	r0, [r3, #0]
 800616c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8006170:	d06f      	beq.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006172:	a801      	add	r0, sp, #4
 8006174:	f7ff fb9c 	bl	80058b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006178:	9802      	ldr	r0, [sp, #8]
 800617a:	e06a      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (srcclk)
 800617c:	b913      	cbnz	r3, 8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800617e:	f7ff fa89 	bl	8005694 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8006182:	e066      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (srcclk)
 8006184:	2000      	movs	r0, #0
 8006186:	e064      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8006188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800618c:	d020      	beq.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>
 800618e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006192:	d106      	bne.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006194:	4b12      	ldr	r3, [pc, #72]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006196:	6818      	ldr	r0, [r3, #0]
 8006198:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800619c:	d059      	beq.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 800619e:	4811      	ldr	r0, [pc, #68]	; (80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 80061a0:	e057      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (srcclk)
 80061a2:	2000      	movs	r0, #0
 80061a4:	e055      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061a6:	4b0e      	ldr	r3, [pc, #56]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80061a8:	6818      	ldr	r0, [r3, #0]
 80061aa:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80061ae:	d050      	beq.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061b0:	a804      	add	r0, sp, #16
 80061b2:	f7ff fa81 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80061b6:	9805      	ldr	r0, [sp, #20]
 80061b8:	e04b      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061ba:	4b09      	ldr	r3, [pc, #36]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	f010 0004 	ands.w	r0, r0, #4
 80061c2:	d046      	beq.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80061ca:	4807      	ldr	r0, [pc, #28]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 80061cc:	40d8      	lsrs	r0, r3
 80061ce:	e040      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80061d0:	4b03      	ldr	r3, [pc, #12]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80061d2:	6818      	ldr	r0, [r3, #0]
 80061d4:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80061d8:	d03b      	beq.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = CSI_VALUE;
 80061da:	4804      	ldr	r0, [pc, #16]	; (80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80061dc:	e039      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 80061de:	bf00      	nop
 80061e0:	58024400 	.word	0x58024400
 80061e4:	017d7840 	.word	0x017d7840
 80061e8:	03d09000 	.word	0x03d09000
 80061ec:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80061f0:	4b27      	ldr	r3, [pc, #156]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 80061f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 80061f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061fc:	d00c      	beq.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80061fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006202:	d013      	beq.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 8006204:	b10b      	cbz	r3, 800620a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8006206:	2000      	movs	r0, #0
  return frequency;
 8006208:	e023      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800620a:	4b21      	ldr	r3, [pc, #132]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800620c:	6818      	ldr	r0, [r3, #0]
 800620e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8006212:	d01e      	beq.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 8006214:	481f      	ldr	r0, [pc, #124]	; (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>)
 8006216:	e01c      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006218:	4b1d      	ldr	r3, [pc, #116]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800621a:	6818      	ldr	r0, [r3, #0]
 800621c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8006220:	d017      	beq.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006222:	a807      	add	r0, sp, #28
 8006224:	f7ff fc40 	bl	8005aa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006228:	9808      	ldr	r0, [sp, #32]
 800622a:	e012      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800622c:	4b18      	ldr	r3, [pc, #96]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800622e:	6818      	ldr	r0, [r3, #0]
 8006230:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8006234:	d00d      	beq.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006236:	a804      	add	r0, sp, #16
 8006238:	f7ff fa3e 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800623c:	9805      	ldr	r0, [sp, #20]
 800623e:	e008      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        frequency = 0;
 8006240:	2000      	movs	r0, #0
 8006242:	e006      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = CSI_VALUE;
 8006244:	4814      	ldr	r0, [pc, #80]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 8006246:	e004      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8006248:	2000      	movs	r0, #0
 800624a:	e002      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 800624c:	4811      	ldr	r0, [pc, #68]	; (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>)
 800624e:	e000      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (saiclocksource)
 8006250:	4812      	ldr	r0, [pc, #72]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>)
}
 8006252:	b00b      	add	sp, #44	; 0x2c
 8006254:	f85d fb04 	ldr.w	pc, [sp], #4
          frequency = CSI_VALUE;
 8006258:	480f      	ldr	r0, [pc, #60]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800625a:	e7fa      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 800625c:	2000      	movs	r0, #0
 800625e:	e7f8      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 8006260:	480c      	ldr	r0, [pc, #48]	; (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>)
 8006262:	e7f6      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (saiclocksource)
 8006264:	480d      	ldr	r0, [pc, #52]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>)
 8006266:	e7f4      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = CSI_VALUE;
 8006268:	480b      	ldr	r0, [pc, #44]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800626a:	e7f2      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 800626c:	2000      	movs	r0, #0
 800626e:	e7f0      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 8006270:	4808      	ldr	r0, [pc, #32]	; (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>)
 8006272:	e7ee      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (srcclk)
 8006274:	4809      	ldr	r0, [pc, #36]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>)
 8006276:	e7ec      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = CSI_VALUE;
 8006278:	4807      	ldr	r0, [pc, #28]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800627a:	e7ea      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 800627c:	2000      	movs	r0, #0
 800627e:	e7e8      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 8006280:	4804      	ldr	r0, [pc, #16]	; (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>)
 8006282:	e7e6      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = CSI_VALUE;
 8006284:	4804      	ldr	r0, [pc, #16]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 8006286:	e7e4      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8006288:	2000      	movs	r0, #0
 800628a:	e7e2      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 800628c:	4801      	ldr	r0, [pc, #4]	; (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>)
 800628e:	e7e0      	b.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8006290:	58024400 	.word	0x58024400
 8006294:	017d7840 	.word	0x017d7840
 8006298:	003d0900 	.word	0x003d0900
 800629c:	00bb8000 	.word	0x00bb8000

080062a0 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d065      	beq.n	8006370 <HAL_RNG_Init+0xd0>
{
 80062a4:	b538      	push	{r3, r4, r5, lr}
 80062a6:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80062a8:	7a43      	ldrb	r3, [r0, #9]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d032      	beq.n	8006314 <HAL_RNG_Init+0x74>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80062ae:	2302      	movs	r3, #2
 80062b0:	7263      	strb	r3, [r4, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 80062b2:	6822      	ldr	r2, [r4, #0]
 80062b4:	6813      	ldr	r3, [r2, #0]
 80062b6:	f023 0304 	bic.w	r3, r3, #4
 80062ba:	6013      	str	r3, [r2, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 80062bc:	6822      	ldr	r2, [r4, #0]
 80062be:	6811      	ldr	r1, [r2, #0]
 80062c0:	4b2c      	ldr	r3, [pc, #176]	; (8006374 <HAL_RNG_Init+0xd4>)
 80062c2:	400b      	ands	r3, r1
 80062c4:	6861      	ldr	r1, [r4, #4]
 80062c6:	430b      	orrs	r3, r1
 80062c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062cc:	6013      	str	r3, [r2, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	4a29      	ldr	r2, [pc, #164]	; (8006378 <HAL_RNG_Init+0xd8>)
 80062d2:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	f247 2274 	movw	r2, #29300	; 0x7274
 80062da:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80062dc:	6822      	ldr	r2, [r4, #0]
 80062de:	6813      	ldr	r3, [r2, #0]
 80062e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062e6:	f7fb f953 	bl	8001590 <HAL_GetTick>
 80062ea:	4605      	mov	r5, r0

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
 80062f4:	d012      	beq.n	800631c <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80062f6:	f7fb f94b 	bl	8001590 <HAL_GetTick>
 80062fa:	1b40      	subs	r0, r0, r5
 80062fc:	2802      	cmp	r0, #2
 80062fe:	d9f5      	bls.n	80062ec <HAL_RNG_Init+0x4c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006308:	d0f0      	beq.n	80062ec <HAL_RNG_Init+0x4c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800630a:	2001      	movs	r0, #1
 800630c:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800630e:	2302      	movs	r3, #2
 8006310:	60e3      	str	r3, [r4, #12]
        return HAL_ERROR;
 8006312:	e00f      	b.n	8006334 <HAL_RNG_Init+0x94>
    hrng->Lock = HAL_UNLOCKED;
 8006314:	7203      	strb	r3, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8006316:	f7fa fea1 	bl	800105c <HAL_RNG_MspInit>
 800631a:	e7c8      	b.n	80062ae <HAL_RNG_Init+0xe>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	f042 0204 	orr.w	r2, r2, #4
 8006322:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f013 0f40 	tst.w	r3, #64	; 0x40
 800632c:	d003      	beq.n	8006336 <HAL_RNG_Init+0x96>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800632e:	2304      	movs	r3, #4
 8006330:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
 8006332:	2001      	movs	r0, #1
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8006334:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 8006336:	f7fb f92b 	bl	8001590 <HAL_GetTick>
 800633a:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f013 0f04 	tst.w	r3, #4
 8006344:	d00f      	beq.n	8006366 <HAL_RNG_Init+0xc6>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006346:	f7fb f923 	bl	8001590 <HAL_GetTick>
 800634a:	1b40      	subs	r0, r0, r5
 800634c:	2802      	cmp	r0, #2
 800634e:	d9f5      	bls.n	800633c <HAL_RNG_Init+0x9c>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f013 0f04 	tst.w	r3, #4
 8006358:	d0f0      	beq.n	800633c <HAL_RNG_Init+0x9c>
        hrng->State = HAL_RNG_STATE_ERROR;
 800635a:	2304      	movs	r3, #4
 800635c:	7263      	strb	r3, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800635e:	2302      	movs	r3, #2
 8006360:	60e3      	str	r3, [r4, #12]
        return HAL_ERROR;
 8006362:	2001      	movs	r0, #1
 8006364:	e7e6      	b.n	8006334 <HAL_RNG_Init+0x94>
  hrng->State = HAL_RNG_STATE_READY;
 8006366:	2301      	movs	r3, #1
 8006368:	7263      	strb	r3, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800636a:	2000      	movs	r0, #0
 800636c:	60e0      	str	r0, [r4, #12]
  return HAL_OK;
 800636e:	e7e1      	b.n	8006334 <HAL_RNG_Init+0x94>
    return HAL_ERROR;
 8006370:	2001      	movs	r0, #1
}
 8006372:	4770      	bx	lr
 8006374:	bfffffdf 	.word	0xbfffffdf
 8006378:	17590abc 	.word	0x17590abc

0800637c <HAL_RNG_ErrorCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800637c:	4770      	bx	lr

0800637e <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 800637e:	b510      	push	{r4, lr}
 8006380:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	9301      	str	r3, [sp, #4]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 8006386:	6803      	ldr	r3, [r0, #0]
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	f012 0f04 	tst.w	r2, #4
 800638e:	d10a      	bne.n	80063a6 <RNG_RecoverSeedError+0x28>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006396:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 8006398:	68c3      	ldr	r3, [r0, #12]
 800639a:	f023 0308 	bic.w	r3, r3, #8
 800639e:	60c3      	str	r3, [r0, #12]
  return HAL_OK;
 80063a0:	2000      	movs	r0, #0
}
 80063a2:	b002      	add	sp, #8
 80063a4:	bd10      	pop	{r4, pc}
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80063ac:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80063ae:	6802      	ldr	r2, [r0, #0]
 80063b0:	6813      	ldr	r3, [r2, #0]
 80063b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063b6:	6013      	str	r3, [r2, #0]
    count = RNG_TIMEOUT_VALUE;
 80063b8:	2302      	movs	r3, #2
 80063ba:	9301      	str	r3, [sp, #4]
      count-- ;
 80063bc:	9b01      	ldr	r3, [sp, #4]
 80063be:	3b01      	subs	r3, #1
 80063c0:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 80063c2:	9b01      	ldr	r3, [sp, #4]
 80063c4:	b1cb      	cbz	r3, 80063fa <RNG_RecoverSeedError+0x7c>
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 80063c6:	6803      	ldr	r3, [r0, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
 80063ce:	d1f5      	bne.n	80063bc <RNG_RecoverSeedError+0x3e>
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80063d6:	d003      	beq.n	80063e0 <RNG_RecoverSeedError+0x62>
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 80063d8:	685a      	ldr	r2, [r3, #4]
 80063da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063de:	605a      	str	r2, [r3, #4]
    count = RNG_TIMEOUT_VALUE;
 80063e0:	2302      	movs	r3, #2
 80063e2:	9301      	str	r3, [sp, #4]
      count-- ;
 80063e4:	9b01      	ldr	r3, [sp, #4]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 80063ea:	9b01      	ldr	r3, [sp, #4]
 80063ec:	b18b      	cbz	r3, 8006412 <RNG_RecoverSeedError+0x94>
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 80063ee:	6803      	ldr	r3, [r0, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f013 0f04 	tst.w	r3, #4
 80063f6:	d1f5      	bne.n	80063e4 <RNG_RecoverSeedError+0x66>
 80063f8:	e7ce      	b.n	8006398 <RNG_RecoverSeedError+0x1a>
        hrng->State = HAL_RNG_STATE_READY;
 80063fa:	2401      	movs	r4, #1
 80063fc:	7244      	strb	r4, [r0, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 80063fe:	68c3      	ldr	r3, [r0, #12]
 8006400:	f043 0302 	orr.w	r3, r3, #2
 8006404:	60c3      	str	r3, [r0, #12]
        __HAL_UNLOCK(hrng);
 8006406:	2300      	movs	r3, #0
 8006408:	7203      	strb	r3, [r0, #8]
        HAL_RNG_ErrorCallback(hrng);
 800640a:	f7ff ffb7 	bl	800637c <HAL_RNG_ErrorCallback>
        return HAL_ERROR;
 800640e:	4620      	mov	r0, r4
 8006410:	e7c7      	b.n	80063a2 <RNG_RecoverSeedError+0x24>
        hrng->State = HAL_RNG_STATE_READY;
 8006412:	2401      	movs	r4, #1
 8006414:	7244      	strb	r4, [r0, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 8006416:	68c3      	ldr	r3, [r0, #12]
 8006418:	f043 0302 	orr.w	r3, r3, #2
 800641c:	60c3      	str	r3, [r0, #12]
        __HAL_UNLOCK(hrng);
 800641e:	2300      	movs	r3, #0
 8006420:	7203      	strb	r3, [r0, #8]
        HAL_RNG_ErrorCallback(hrng);
 8006422:	f7ff ffab 	bl	800637c <HAL_RNG_ErrorCallback>
        return HAL_ERROR;
 8006426:	4620      	mov	r0, r4
 8006428:	e7bb      	b.n	80063a2 <RNG_RecoverSeedError+0x24>

0800642a <HAL_RNG_GenerateRandomNumber>:
{
 800642a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrng);
 800642e:	7a03      	ldrb	r3, [r0, #8]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d04c      	beq.n	80064ce <HAL_RNG_GenerateRandomNumber+0xa4>
 8006434:	4604      	mov	r4, r0
 8006436:	460f      	mov	r7, r1
 8006438:	2301      	movs	r3, #1
 800643a:	7203      	strb	r3, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 800643c:	7a45      	ldrb	r5, [r0, #9]
 800643e:	b2ed      	uxtb	r5, r5
 8006440:	429d      	cmp	r5, r3
 8006442:	d007      	beq.n	8006454 <HAL_RNG_GenerateRandomNumber+0x2a>
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006444:	2304      	movs	r3, #4
 8006446:	60c3      	str	r3, [r0, #12]
    status = HAL_ERROR;
 8006448:	2501      	movs	r5, #1
  __HAL_UNLOCK(hrng);
 800644a:	2300      	movs	r3, #0
 800644c:	7223      	strb	r3, [r4, #8]
}
 800644e:	4628      	mov	r0, r5
 8006450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8006454:	2302      	movs	r3, #2
 8006456:	7243      	strb	r3, [r0, #9]
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006458:	6803      	ldr	r3, [r0, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006460:	d008      	beq.n	8006474 <HAL_RNG_GenerateRandomNumber+0x4a>
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8006462:	2308      	movs	r3, #8
 8006464:	60c3      	str	r3, [r0, #12]
      status = RNG_RecoverSeedError(hrng);
 8006466:	f7ff ff8a 	bl	800637e <RNG_RecoverSeedError>
 800646a:	4680      	mov	r8, r0
      if (status == HAL_ERROR)
 800646c:	2801      	cmp	r0, #1
 800646e:	d103      	bne.n	8006478 <HAL_RNG_GenerateRandomNumber+0x4e>
        return status;
 8006470:	4605      	mov	r5, r0
 8006472:	e7ec      	b.n	800644e <HAL_RNG_GenerateRandomNumber+0x24>
  HAL_StatusTypeDef status = HAL_OK;
 8006474:	f04f 0800 	mov.w	r8, #0
    tickstart = HAL_GetTick();
 8006478:	f7fb f88a 	bl	8001590 <HAL_GetTick>
 800647c:	4606      	mov	r6, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	f012 0f01 	tst.w	r2, #1
 8006486:	d110      	bne.n	80064aa <HAL_RNG_GenerateRandomNumber+0x80>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006488:	f7fb f882 	bl	8001590 <HAL_GetTick>
 800648c:	1b80      	subs	r0, r0, r6
 800648e:	2802      	cmp	r0, #2
 8006490:	d9f5      	bls.n	800647e <HAL_RNG_GenerateRandomNumber+0x54>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f013 0f01 	tst.w	r3, #1
 800649a:	d1f0      	bne.n	800647e <HAL_RNG_GenerateRandomNumber+0x54>
          hrng->State = HAL_RNG_STATE_READY;
 800649c:	2301      	movs	r3, #1
 800649e:	7263      	strb	r3, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80064a0:	2302      	movs	r3, #2
 80064a2:	60e3      	str	r3, [r4, #12]
          __HAL_UNLOCK(hrng);
 80064a4:	2300      	movs	r3, #0
 80064a6:	7223      	strb	r3, [r4, #8]
          return HAL_ERROR;
 80064a8:	e7d1      	b.n	800644e <HAL_RNG_GenerateRandomNumber+0x24>
    hrng->RandomNumber = hrng->Instance->DR;
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	6122      	str	r2, [r4, #16]
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80064ae:	6859      	ldr	r1, [r3, #4]
 80064b0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80064b4:	d008      	beq.n	80064c8 <HAL_RNG_GenerateRandomNumber+0x9e>
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80064b6:	2208      	movs	r2, #8
 80064b8:	60e2      	str	r2, [r4, #12]
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	f022 0201 	bic.w	r2, r2, #1
 80064c0:	605a      	str	r2, [r3, #4]
    hrng->State = HAL_RNG_STATE_READY;
 80064c2:	2301      	movs	r3, #1
 80064c4:	7263      	strb	r3, [r4, #9]
 80064c6:	e7c0      	b.n	800644a <HAL_RNG_GenerateRandomNumber+0x20>
      *random32bit = hrng->RandomNumber;
 80064c8:	603a      	str	r2, [r7, #0]
 80064ca:	4645      	mov	r5, r8
 80064cc:	e7f9      	b.n	80064c2 <HAL_RNG_GenerateRandomNumber+0x98>
  __HAL_LOCK(hrng);
 80064ce:	2502      	movs	r5, #2
 80064d0:	e7bd      	b.n	800644e <HAL_RNG_GenerateRandomNumber+0x24>
	...

080064d4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80064d4:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 80064d6:	6802      	ldr	r2, [r0, #0]
 80064d8:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80064da:	6991      	ldr	r1, [r2, #24]
 80064dc:	f041 0108 	orr.w	r1, r1, #8
 80064e0:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80064e2:	6801      	ldr	r1, [r0, #0]
 80064e4:	698a      	ldr	r2, [r1, #24]
 80064e6:	f042 0210 	orr.w	r2, r2, #16
 80064ea:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064ec:	6801      	ldr	r1, [r0, #0]
 80064ee:	680a      	ldr	r2, [r1, #0]
 80064f0:	f022 0201 	bic.w	r2, r2, #1
 80064f4:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80064f6:	6801      	ldr	r1, [r0, #0]
 80064f8:	690c      	ldr	r4, [r1, #16]
 80064fa:	4a29      	ldr	r2, [pc, #164]	; (80065a0 <SPI_CloseTransfer+0xcc>)
 80064fc:	4022      	ands	r2, r4
 80064fe:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006500:	6801      	ldr	r1, [r0, #0]
 8006502:	688a      	ldr	r2, [r1, #8]
 8006504:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006508:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800650a:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	2a04      	cmp	r2, #4
 8006512:	d00d      	beq.n	8006530 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006514:	f013 0f20 	tst.w	r3, #32
 8006518:	d00a      	beq.n	8006530 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800651a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800651e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006522:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006526:	6801      	ldr	r1, [r0, #0]
 8006528:	698a      	ldr	r2, [r1, #24]
 800652a:	f042 0220 	orr.w	r2, r2, #32
 800652e:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006530:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8006534:	b2d2      	uxtb	r2, r2
 8006536:	2a03      	cmp	r2, #3
 8006538:	d00d      	beq.n	8006556 <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800653a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800653e:	d00a      	beq.n	8006556 <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006540:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006544:	f042 0204 	orr.w	r2, r2, #4
 8006548:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800654c:	6801      	ldr	r1, [r0, #0]
 800654e:	698a      	ldr	r2, [r1, #24]
 8006550:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006554:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006556:	f413 7f00 	tst.w	r3, #512	; 0x200
 800655a:	d00a      	beq.n	8006572 <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800655c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006560:	f042 0201 	orr.w	r2, r2, #1
 8006564:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006568:	6801      	ldr	r1, [r0, #0]
 800656a:	698a      	ldr	r2, [r1, #24]
 800656c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006570:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006572:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006576:	d00a      	beq.n	800658e <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006578:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800657c:	f043 0308 	orr.w	r3, r3, #8
 8006580:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006584:	6802      	ldr	r2, [r0, #0]
 8006586:	6993      	ldr	r3, [r2, #24]
 8006588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800658c:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800658e:	2300      	movs	r3, #0
 8006590:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006594:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8006598:	f85d 4b04 	ldr.w	r4, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	fffffc90 	.word	0xfffffc90

080065a4 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80065a4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80065a6:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80065a8:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80065aa:	3008      	adds	r0, #8
 80065ac:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 80065ae:	fb03 0000 	mla	r0, r3, r0, r0
 80065b2:	4770      	bx	lr

080065b4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80065b4:	2800      	cmp	r0, #0
 80065b6:	f000 80b7 	beq.w	8006728 <HAL_SPI_Init+0x174>
{
 80065ba:	b570      	push	{r4, r5, r6, lr}
 80065bc:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065be:	2300      	movs	r3, #0
 80065c0:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80065c2:	6805      	ldr	r5, [r0, #0]
 80065c4:	4b5c      	ldr	r3, [pc, #368]	; (8006738 <HAL_SPI_Init+0x184>)
 80065c6:	4e5d      	ldr	r6, [pc, #372]	; (800673c <HAL_SPI_Init+0x188>)
 80065c8:	429d      	cmp	r5, r3
 80065ca:	bf18      	it	ne
 80065cc:	42b5      	cmpne	r5, r6
 80065ce:	bf14      	ite	ne
 80065d0:	2601      	movne	r6, #1
 80065d2:	2600      	moveq	r6, #0
 80065d4:	d007      	beq.n	80065e6 <HAL_SPI_Init+0x32>
 80065d6:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 80065da:	429d      	cmp	r5, r3
 80065dc:	d003      	beq.n	80065e6 <HAL_SPI_Init+0x32>
 80065de:	68c3      	ldr	r3, [r0, #12]
 80065e0:	2b0f      	cmp	r3, #15
 80065e2:	f200 80a3 	bhi.w	800672c <HAL_SPI_Init+0x178>
  packet_length = SPI_GetPacketSize(hspi);
 80065e6:	4620      	mov	r0, r4
 80065e8:	f7ff ffdc 	bl	80065a4 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80065ec:	b12e      	cbz	r6, 80065fa <HAL_SPI_Init+0x46>
 80065ee:	4b54      	ldr	r3, [pc, #336]	; (8006740 <HAL_SPI_Init+0x18c>)
 80065f0:	429d      	cmp	r5, r3
 80065f2:	d002      	beq.n	80065fa <HAL_SPI_Init+0x46>
 80065f4:	2808      	cmp	r0, #8
 80065f6:	f200 809b 	bhi.w	8006730 <HAL_SPI_Init+0x17c>
 80065fa:	4a4f      	ldr	r2, [pc, #316]	; (8006738 <HAL_SPI_Init+0x184>)
 80065fc:	4b4f      	ldr	r3, [pc, #316]	; (800673c <HAL_SPI_Init+0x188>)
 80065fe:	429d      	cmp	r5, r3
 8006600:	bf18      	it	ne
 8006602:	4295      	cmpne	r5, r2
 8006604:	d003      	beq.n	800660e <HAL_SPI_Init+0x5a>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800660a:	429d      	cmp	r5, r3
 800660c:	d102      	bne.n	8006614 <HAL_SPI_Init+0x60>
 800660e:	2810      	cmp	r0, #16
 8006610:	f200 8090 	bhi.w	8006734 <HAL_SPI_Init+0x180>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006614:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8006618:	b1f3      	cbz	r3, 8006658 <HAL_SPI_Init+0xa4>
  hspi->State = HAL_SPI_STATE_BUSY;
 800661a:	2302      	movs	r3, #2
 800661c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8006620:	6822      	ldr	r2, [r4, #0]
 8006622:	6813      	ldr	r3, [r2, #0]
 8006624:	f023 0301 	bic.w	r3, r3, #1
 8006628:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800662a:	6821      	ldr	r1, [r4, #0]
 800662c:	688a      	ldr	r2, [r1, #8]
 800662e:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006632:	69a3      	ldr	r3, [r4, #24]
 8006634:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006638:	d014      	beq.n	8006664 <HAL_SPI_Init+0xb0>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800663a:	6863      	ldr	r3, [r4, #4]
 800663c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006640:	d023      	beq.n	800668a <HAL_SPI_Init+0xd6>
 8006642:	68e3      	ldr	r3, [r4, #12]
 8006644:	2b06      	cmp	r3, #6
 8006646:	d920      	bls.n	800668a <HAL_SPI_Init+0xd6>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006648:	6821      	ldr	r1, [r4, #0]
 800664a:	680b      	ldr	r3, [r1, #0]
 800664c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006650:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006652:	4303      	orrs	r3, r0
 8006654:	600b      	str	r3, [r1, #0]
 8006656:	e01d      	b.n	8006694 <HAL_SPI_Init+0xe0>
    hspi->Lock = HAL_UNLOCKED;
 8006658:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800665c:	4620      	mov	r0, r4
 800665e:	f7fa fd29 	bl	80010b4 <HAL_SPI_MspInit>
 8006662:	e7da      	b.n	800661a <HAL_SPI_Init+0x66>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006664:	6863      	ldr	r3, [r4, #4]
 8006666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800666a:	d006      	beq.n	800667a <HAL_SPI_Init+0xc6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e4      	bne.n	800663a <HAL_SPI_Init+0x86>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006670:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006672:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006676:	d1e0      	bne.n	800663a <HAL_SPI_Init+0x86>
 8006678:	e002      	b.n	8006680 <HAL_SPI_Init+0xcc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800667a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800667c:	2800      	cmp	r0, #0
 800667e:	d1f5      	bne.n	800666c <HAL_SPI_Init+0xb8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006680:	680b      	ldr	r3, [r1, #0]
 8006682:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006686:	600b      	str	r3, [r1, #0]
 8006688:	e7d7      	b.n	800663a <HAL_SPI_Init+0x86>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800668a:	6821      	ldr	r1, [r4, #0]
 800668c:	680b      	ldr	r3, [r1, #0]
 800668e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006692:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006694:	69e3      	ldr	r3, [r4, #28]
 8006696:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006698:	430b      	orrs	r3, r1
 800669a:	4313      	orrs	r3, r2
 800669c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800669e:	4313      	orrs	r3, r2
 80066a0:	68e1      	ldr	r1, [r4, #12]
 80066a2:	6822      	ldr	r2, [r4, #0]
 80066a4:	430b      	orrs	r3, r1
 80066a6:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80066a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80066ac:	4313      	orrs	r3, r2
 80066ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80066b0:	4313      	orrs	r3, r2
 80066b2:	69a2      	ldr	r2, [r4, #24]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	6922      	ldr	r2, [r4, #16]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	6962      	ldr	r2, [r4, #20]
 80066bc:	4313      	orrs	r3, r2
 80066be:	6a22      	ldr	r2, [r4, #32]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	6862      	ldr	r2, [r4, #4]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80066c8:	4313      	orrs	r3, r2
 80066ca:	68a2      	ldr	r2, [r4, #8]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80066d0:	4313      	orrs	r3, r2
 80066d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80066d4:	6822      	ldr	r2, [r4, #0]
 80066d6:	430b      	orrs	r3, r1
 80066d8:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80066da:	6863      	ldr	r3, [r4, #4]
 80066dc:	b96b      	cbnz	r3, 80066fa <HAL_SPI_Init+0x146>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80066de:	6822      	ldr	r2, [r4, #0]
 80066e0:	6893      	ldr	r3, [r2, #8]
 80066e2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80066e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80066ea:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80066ec:	6822      	ldr	r2, [r4, #0]
 80066ee:	6893      	ldr	r3, [r2, #8]
 80066f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80066f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066f8:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066fa:	6822      	ldr	r2, [r4, #0]
 80066fc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80066fe:	f023 0301 	bic.w	r3, r3, #1
 8006702:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006704:	6863      	ldr	r3, [r4, #4]
 8006706:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800670a:	d006      	beq.n	800671a <HAL_SPI_Init+0x166>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800670c:	6822      	ldr	r2, [r4, #0]
 800670e:	68d3      	ldr	r3, [r2, #12]
 8006710:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006714:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006716:	430b      	orrs	r3, r1
 8006718:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800671a:	2000      	movs	r0, #0
 800671c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006720:	2301      	movs	r3, #1
 8006722:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8006726:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006728:	2001      	movs	r0, #1
}
 800672a:	4770      	bx	lr
    return HAL_ERROR;
 800672c:	2001      	movs	r0, #1
 800672e:	e7fa      	b.n	8006726 <HAL_SPI_Init+0x172>
    return HAL_ERROR;
 8006730:	2001      	movs	r0, #1
 8006732:	e7f8      	b.n	8006726 <HAL_SPI_Init+0x172>
 8006734:	2001      	movs	r0, #1
 8006736:	e7f6      	b.n	8006726 <HAL_SPI_Init+0x172>
 8006738:	40013000 	.word	0x40013000
 800673c:	40003800 	.word	0x40003800
 8006740:	40003c00 	.word	0x40003c00

08006744 <HAL_SPI_Transmit_DMA>:
{
 8006744:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hspi);
 8006746:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800674a:	2b01      	cmp	r3, #1
 800674c:	f000 80d4 	beq.w	80068f8 <HAL_SPI_Transmit_DMA+0x1b4>
 8006750:	4604      	mov	r4, r0
 8006752:	4616      	mov	r6, r2
 8006754:	2301      	movs	r3, #1
 8006756:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800675a:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
 800675e:	b2ed      	uxtb	r5, r5
 8006760:	429d      	cmp	r5, r3
 8006762:	d17d      	bne.n	8006860 <HAL_SPI_Transmit_DMA+0x11c>
  if ((pData == NULL) || (Size == 0UL))
 8006764:	2a00      	cmp	r2, #0
 8006766:	bf18      	it	ne
 8006768:	2900      	cmpne	r1, #0
 800676a:	d07f      	beq.n	800686c <HAL_SPI_Transmit_DMA+0x128>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800676c:	2303      	movs	r3, #3
 800676e:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006772:	2300      	movs	r3, #0
 8006774:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006778:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800677a:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 800677e:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  hspi->pRxBuffPtr  = NULL;
 8006782:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->TxISR       = NULL;
 8006784:	6743      	str	r3, [r0, #116]	; 0x74
  hspi->RxISR       = NULL;
 8006786:	6703      	str	r3, [r0, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8006788:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800678c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006790:	6883      	ldr	r3, [r0, #8]
 8006792:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006796:	d06d      	beq.n	8006874 <HAL_SPI_Transmit_DMA+0x130>
    SPI_2LINES_TX(hspi);
 8006798:	6802      	ldr	r2, [r0, #0]
 800679a:	68d3      	ldr	r3, [r2, #12]
 800679c:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 80067a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067a4:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80067a6:	68e3      	ldr	r3, [r4, #12]
 80067a8:	2b0f      	cmp	r3, #15
 80067aa:	d904      	bls.n	80067b6 <HAL_SPI_Transmit_DMA+0x72>
 80067ac:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80067ae:	6992      	ldr	r2, [r2, #24]
 80067b0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80067b4:	d164      	bne.n	8006880 <HAL_SPI_Transmit_DMA+0x13c>
 80067b6:	2b07      	cmp	r3, #7
 80067b8:	d907      	bls.n	80067ca <HAL_SPI_Transmit_DMA+0x86>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80067ba:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80067bc:	6992      	ldr	r2, [r2, #24]
 80067be:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80067c2:	bf18      	it	ne
 80067c4:	f5b2 4f80 	cmpne.w	r2, #16384	; 0x4000
 80067c8:	d15a      	bne.n	8006880 <HAL_SPI_Transmit_DMA+0x13c>
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80067ca:	2b07      	cmp	r3, #7
 80067cc:	d86c      	bhi.n	80068a8 <HAL_SPI_Transmit_DMA+0x164>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80067ce:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80067d0:	699a      	ldr	r2, [r3, #24]
 80067d2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80067d6:	d057      	beq.n	8006888 <HAL_SPI_Transmit_DMA+0x144>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067de:	d05b      	beq.n	8006898 <HAL_SPI_Transmit_DMA+0x154>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80067e0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80067e2:	4a46      	ldr	r2, [pc, #280]	; (80068fc <HAL_SPI_Transmit_DMA+0x1b8>)
 80067e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80067e6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80067e8:	4a45      	ldr	r2, [pc, #276]	; (8006900 <HAL_SPI_Transmit_DMA+0x1bc>)
 80067ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80067ec:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80067ee:	4a45      	ldr	r2, [pc, #276]	; (8006904 <HAL_SPI_Transmit_DMA+0x1c0>)
 80067f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 80067f2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80067f4:	2200      	movs	r2, #0
 80067f6:	651a      	str	r2, [r3, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80067f8:	6822      	ldr	r2, [r4, #0]
 80067fa:	6893      	ldr	r3, [r2, #8]
 80067fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006800:	6093      	str	r3, [r2, #8]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8006802:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 8006804:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8006808:	b29b      	uxth	r3, r3
 800680a:	3220      	adds	r2, #32
 800680c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800680e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006810:	f7fc fc64 	bl	80030dc <HAL_DMA_Start_IT>
 8006814:	4601      	mov	r1, r0
 8006816:	2800      	cmp	r0, #0
 8006818:	d155      	bne.n	80068c6 <HAL_SPI_Transmit_DMA+0x182>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800681a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006822:	d05d      	beq.n	80068e0 <HAL_SPI_Transmit_DMA+0x19c>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	6858      	ldr	r0, [r3, #4]
 8006828:	4a37      	ldr	r2, [pc, #220]	; (8006908 <HAL_SPI_Transmit_DMA+0x1c4>)
 800682a:	4002      	ands	r2, r0
 800682c:	4332      	orrs	r2, r6
 800682e:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006830:	6822      	ldr	r2, [r4, #0]
 8006832:	6893      	ldr	r3, [r2, #8]
 8006834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006838:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800683a:	6822      	ldr	r2, [r4, #0]
 800683c:	6913      	ldr	r3, [r2, #16]
 800683e:	f443 7348 	orr.w	r3, r3, #800	; 0x320
 8006842:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 8006844:	6822      	ldr	r2, [r4, #0]
 8006846:	6813      	ldr	r3, [r2, #0]
 8006848:	f043 0301 	orr.w	r3, r3, #1
 800684c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800684e:	6863      	ldr	r3, [r4, #4]
 8006850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006854:	d04a      	beq.n	80068ec <HAL_SPI_Transmit_DMA+0x1a8>
  __HAL_UNLOCK(hspi);
 8006856:	2300      	movs	r3, #0
 8006858:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800685c:	460d      	mov	r5, r1
 800685e:	e003      	b.n	8006868 <HAL_SPI_Transmit_DMA+0x124>
    __HAL_UNLOCK(hspi);
 8006860:	2300      	movs	r3, #0
 8006862:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 8006866:	2502      	movs	r5, #2
}
 8006868:	4628      	mov	r0, r5
 800686a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hspi);
 800686c:	2300      	movs	r3, #0
 800686e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 8006872:	e7f9      	b.n	8006868 <HAL_SPI_Transmit_DMA+0x124>
    SPI_1LINE_TX(hspi);
 8006874:	6802      	ldr	r2, [r0, #0]
 8006876:	6813      	ldr	r3, [r2, #0]
 8006878:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	e792      	b.n	80067a6 <HAL_SPI_Transmit_DMA+0x62>
    __HAL_UNLOCK(hspi);
 8006880:	2300      	movs	r3, #0
 8006882:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 8006886:	e7ef      	b.n	8006868 <HAL_SPI_Transmit_DMA+0x124>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006888:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800688c:	b292      	uxth	r2, r2
 800688e:	3201      	adds	r2, #1
 8006890:	0852      	lsrs	r2, r2, #1
 8006892:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 8006896:	e79f      	b.n	80067d8 <HAL_SPI_Transmit_DMA+0x94>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8006898:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800689c:	b29b      	uxth	r3, r3
 800689e:	3303      	adds	r3, #3
 80068a0:	089b      	lsrs	r3, r3, #2
 80068a2:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 80068a6:	e79b      	b.n	80067e0 <HAL_SPI_Transmit_DMA+0x9c>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80068a8:	2b0f      	cmp	r3, #15
 80068aa:	d899      	bhi.n	80067e0 <HAL_SPI_Transmit_DMA+0x9c>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80068ac:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068b4:	d194      	bne.n	80067e0 <HAL_SPI_Transmit_DMA+0x9c>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80068b6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	3301      	adds	r3, #1
 80068be:	085b      	lsrs	r3, r3, #1
 80068c0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 80068c4:	e78c      	b.n	80067e0 <HAL_SPI_Transmit_DMA+0x9c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80068c6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80068ca:	f043 0310 	orr.w	r3, r3, #16
 80068ce:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_UNLOCK(hspi);
 80068d2:	2300      	movs	r3, #0
 80068d4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    hspi->State = HAL_SPI_STATE_READY;
 80068d8:	2301      	movs	r3, #1
 80068da:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    return errorcode;
 80068de:	e7c3      	b.n	8006868 <HAL_SPI_Transmit_DMA+0x124>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80068e0:	6822      	ldr	r2, [r4, #0]
 80068e2:	6850      	ldr	r0, [r2, #4]
 80068e4:	4b08      	ldr	r3, [pc, #32]	; (8006908 <HAL_SPI_Transmit_DMA+0x1c4>)
 80068e6:	4003      	ands	r3, r0
 80068e8:	6053      	str	r3, [r2, #4]
 80068ea:	e7a1      	b.n	8006830 <HAL_SPI_Transmit_DMA+0xec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80068ec:	6822      	ldr	r2, [r4, #0]
 80068ee:	6813      	ldr	r3, [r2, #0]
 80068f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	e7ae      	b.n	8006856 <HAL_SPI_Transmit_DMA+0x112>
  __HAL_LOCK(hspi);
 80068f8:	2502      	movs	r5, #2
 80068fa:	e7b5      	b.n	8006868 <HAL_SPI_Transmit_DMA+0x124>
 80068fc:	08006b2f 	.word	0x08006b2f
 8006900:	08006ad7 	.word	0x08006ad7
 8006904:	08006b45 	.word	0x08006b45
 8006908:	ffff0000 	.word	0xffff0000

0800690c <HAL_SPI_Receive_DMA>:
{
 800690c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hspi);
 800690e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006912:	2b01      	cmp	r3, #1
 8006914:	f000 80d4 	beq.w	8006ac0 <HAL_SPI_Receive_DMA+0x1b4>
 8006918:	4604      	mov	r4, r0
 800691a:	4616      	mov	r6, r2
 800691c:	2301      	movs	r3, #1
 800691e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 8006922:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
 8006926:	b2ed      	uxtb	r5, r5
 8006928:	429d      	cmp	r5, r3
 800692a:	d17d      	bne.n	8006a28 <HAL_SPI_Receive_DMA+0x11c>
  if ((pData == NULL) || (Size == 0UL))
 800692c:	2a00      	cmp	r2, #0
 800692e:	bf18      	it	ne
 8006930:	2900      	cmpne	r1, #0
 8006932:	d07f      	beq.n	8006a34 <HAL_SPI_Receive_DMA+0x128>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006934:	2304      	movs	r3, #4
 8006936:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800693a:	2300      	movs	r3, #0
 800693c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006940:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8006942:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
  hspi->RxXferCount = Size;
 8006946:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800694a:	6703      	str	r3, [r0, #112]	; 0x70
  hspi->TxISR       = NULL;
 800694c:	6743      	str	r3, [r0, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 800694e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006952:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006956:	6883      	ldr	r3, [r0, #8]
 8006958:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800695c:	d06e      	beq.n	8006a3c <HAL_SPI_Receive_DMA+0x130>
    SPI_2LINES_RX(hspi);
 800695e:	6802      	ldr	r2, [r0, #0]
 8006960:	68d3      	ldr	r3, [r2, #12]
 8006962:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8006966:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800696a:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800696c:	68e3      	ldr	r3, [r4, #12]
 800696e:	2b0f      	cmp	r3, #15
 8006970:	d904      	bls.n	800697c <HAL_SPI_Receive_DMA+0x70>
 8006972:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006974:	6992      	ldr	r2, [r2, #24]
 8006976:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800697a:	d165      	bne.n	8006a48 <HAL_SPI_Receive_DMA+0x13c>
 800697c:	2b07      	cmp	r3, #7
 800697e:	d907      	bls.n	8006990 <HAL_SPI_Receive_DMA+0x84>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006980:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006988:	bf18      	it	ne
 800698a:	f5b3 4f80 	cmpne.w	r3, #16384	; 0x4000
 800698e:	d15b      	bne.n	8006a48 <HAL_SPI_Receive_DMA+0x13c>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006990:	6822      	ldr	r2, [r4, #0]
 8006992:	6893      	ldr	r3, [r2, #8]
 8006994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006998:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800699a:	68e3      	ldr	r3, [r4, #12]
 800699c:	2b07      	cmp	r3, #7
 800699e:	d867      	bhi.n	8006a70 <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80069a0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80069a2:	699a      	ldr	r2, [r3, #24]
 80069a4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80069a8:	d052      	beq.n	8006a50 <HAL_SPI_Receive_DMA+0x144>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069b0:	d056      	beq.n	8006a60 <HAL_SPI_Receive_DMA+0x154>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80069b2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80069b4:	4a43      	ldr	r2, [pc, #268]	; (8006ac4 <HAL_SPI_Receive_DMA+0x1b8>)
 80069b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80069b8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80069ba:	4a43      	ldr	r2, [pc, #268]	; (8006ac8 <HAL_SPI_Receive_DMA+0x1bc>)
 80069bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80069be:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80069c0:	4a42      	ldr	r2, [pc, #264]	; (8006acc <HAL_SPI_Receive_DMA+0x1c0>)
 80069c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 80069c4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80069c6:	2200      	movs	r2, #0
 80069c8:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80069ca:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 80069cc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069d4:	3130      	adds	r1, #48	; 0x30
 80069d6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80069d8:	f7fc fb80 	bl	80030dc <HAL_DMA_Start_IT>
 80069dc:	4601      	mov	r1, r0
 80069de:	2800      	cmp	r0, #0
 80069e0:	d155      	bne.n	8006a8e <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80069e2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ea:	d05d      	beq.n	8006aa8 <HAL_SPI_Receive_DMA+0x19c>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	6858      	ldr	r0, [r3, #4]
 80069f0:	4a37      	ldr	r2, [pc, #220]	; (8006ad0 <HAL_SPI_Receive_DMA+0x1c4>)
 80069f2:	4002      	ands	r2, r0
 80069f4:	4332      	orrs	r2, r6
 80069f6:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80069f8:	6822      	ldr	r2, [r4, #0]
 80069fa:	6893      	ldr	r3, [r2, #8]
 80069fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a00:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006a02:	6822      	ldr	r2, [r4, #0]
 8006a04:	6913      	ldr	r3, [r2, #16]
 8006a06:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 8006a0a:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 8006a0c:	6822      	ldr	r2, [r4, #0]
 8006a0e:	6813      	ldr	r3, [r2, #0]
 8006a10:	f043 0301 	orr.w	r3, r3, #1
 8006a14:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a16:	6863      	ldr	r3, [r4, #4]
 8006a18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a1c:	d04a      	beq.n	8006ab4 <HAL_SPI_Receive_DMA+0x1a8>
  __HAL_UNLOCK(hspi);
 8006a1e:	2300      	movs	r3, #0
 8006a20:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 8006a24:	460d      	mov	r5, r1
 8006a26:	e003      	b.n	8006a30 <HAL_SPI_Receive_DMA+0x124>
    __HAL_UNLOCK(hspi);
 8006a28:	2300      	movs	r3, #0
 8006a2a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 8006a2e:	2502      	movs	r5, #2
}
 8006a30:	4628      	mov	r0, r5
 8006a32:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hspi);
 8006a34:	2300      	movs	r3, #0
 8006a36:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 8006a3a:	e7f9      	b.n	8006a30 <HAL_SPI_Receive_DMA+0x124>
    SPI_1LINE_RX(hspi);
 8006a3c:	6802      	ldr	r2, [r0, #0]
 8006a3e:	6813      	ldr	r3, [r2, #0]
 8006a40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	e791      	b.n	800696c <HAL_SPI_Receive_DMA+0x60>
    __HAL_UNLOCK(hspi);
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 8006a4e:	e7ef      	b.n	8006a30 <HAL_SPI_Receive_DMA+0x124>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8006a50:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006a54:	b292      	uxth	r2, r2
 8006a56:	3201      	adds	r2, #1
 8006a58:	0852      	lsrs	r2, r2, #1
 8006a5a:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 8006a5e:	e7a4      	b.n	80069aa <HAL_SPI_Receive_DMA+0x9e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8006a60:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3303      	adds	r3, #3
 8006a68:	089b      	lsrs	r3, r3, #2
 8006a6a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8006a6e:	e7a0      	b.n	80069b2 <HAL_SPI_Receive_DMA+0xa6>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8006a70:	2b0f      	cmp	r3, #15
 8006a72:	d89e      	bhi.n	80069b2 <HAL_SPI_Receive_DMA+0xa6>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006a74:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a7c:	d199      	bne.n	80069b2 <HAL_SPI_Receive_DMA+0xa6>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8006a7e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	3301      	adds	r3, #1
 8006a86:	085b      	lsrs	r3, r3, #1
 8006a88:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8006a8c:	e791      	b.n	80069b2 <HAL_SPI_Receive_DMA+0xa6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a8e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006a92:	f043 0310 	orr.w	r3, r3, #16
 8006a96:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_UNLOCK(hspi);
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    hspi->State = HAL_SPI_STATE_READY;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    return errorcode;
 8006aa6:	e7c3      	b.n	8006a30 <HAL_SPI_Receive_DMA+0x124>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8006aa8:	6822      	ldr	r2, [r4, #0]
 8006aaa:	6850      	ldr	r0, [r2, #4]
 8006aac:	4b08      	ldr	r3, [pc, #32]	; (8006ad0 <HAL_SPI_Receive_DMA+0x1c4>)
 8006aae:	4003      	ands	r3, r0
 8006ab0:	6053      	str	r3, [r2, #4]
 8006ab2:	e7a1      	b.n	80069f8 <HAL_SPI_Receive_DMA+0xec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006ab4:	6822      	ldr	r2, [r4, #0]
 8006ab6:	6813      	ldr	r3, [r2, #0]
 8006ab8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006abc:	6013      	str	r3, [r2, #0]
 8006abe:	e7ae      	b.n	8006a1e <HAL_SPI_Receive_DMA+0x112>
  __HAL_LOCK(hspi);
 8006ac0:	2502      	movs	r5, #2
 8006ac2:	e7b5      	b.n	8006a30 <HAL_SPI_Receive_DMA+0x124>
 8006ac4:	08006b39 	.word	0x08006b39
 8006ac8:	08006b01 	.word	0x08006b01
 8006acc:	08006b45 	.word	0x08006b45
 8006ad0:	ffff0000 	.word	0xffff0000

08006ad4 <HAL_SPI_TxCpltCallback>:
}
 8006ad4:	4770      	bx	lr

08006ad6 <SPI_DMATransmitCplt>:
{
 8006ad6:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ad8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8006ada:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b07      	cmp	r3, #7
 8006ae2:	d009      	beq.n	8006af8 <SPI_DMATransmitCplt+0x22>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006ae4:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006ae6:	69db      	ldr	r3, [r3, #28]
 8006ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aec:	d005      	beq.n	8006afa <SPI_DMATransmitCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8006aee:	6802      	ldr	r2, [r0, #0]
 8006af0:	6913      	ldr	r3, [r2, #16]
 8006af2:	f043 0308 	orr.w	r3, r3, #8
 8006af6:	6113      	str	r3, [r2, #16]
}
 8006af8:	bd08      	pop	{r3, pc}
      HAL_SPI_TxCpltCallback(hspi);
 8006afa:	f7ff ffeb 	bl	8006ad4 <HAL_SPI_TxCpltCallback>
 8006afe:	e7fb      	b.n	8006af8 <SPI_DMATransmitCplt+0x22>

08006b00 <SPI_DMAReceiveCplt>:
{
 8006b00:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b02:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8006b04:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b07      	cmp	r3, #7
 8006b0c:	d009      	beq.n	8006b22 <SPI_DMAReceiveCplt+0x22>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006b0e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b16:	d005      	beq.n	8006b24 <SPI_DMAReceiveCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8006b18:	6802      	ldr	r2, [r0, #0]
 8006b1a:	6913      	ldr	r3, [r2, #16]
 8006b1c:	f043 0308 	orr.w	r3, r3, #8
 8006b20:	6113      	str	r3, [r2, #16]
}
 8006b22:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 8006b24:	f7f9 fea2 	bl	800086c <HAL_SPI_RxCpltCallback>
 8006b28:	e7fb      	b.n	8006b22 <SPI_DMAReceiveCplt+0x22>

08006b2a <HAL_SPI_TxRxCpltCallback>:
}
 8006b2a:	4770      	bx	lr

08006b2c <HAL_SPI_TxHalfCpltCallback>:
}
 8006b2c:	4770      	bx	lr

08006b2e <SPI_DMAHalfTransmitCplt>:
{
 8006b2e:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006b30:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006b32:	f7ff fffb 	bl	8006b2c <HAL_SPI_TxHalfCpltCallback>
}
 8006b36:	bd08      	pop	{r3, pc}

08006b38 <SPI_DMAHalfReceiveCplt>:
{
 8006b38:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006b3a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006b3c:	f7f9 febc 	bl	80008b8 <HAL_SPI_RxHalfCpltCallback>
}
 8006b40:	bd08      	pop	{r3, pc}

08006b42 <HAL_SPI_ErrorCallback>:
}
 8006b42:	4770      	bx	lr

08006b44 <SPI_DMAError>:
{
 8006b44:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b46:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006b48:	f7fd f8e8 	bl	8003d1c <HAL_DMA_GetError>
 8006b4c:	2802      	cmp	r0, #2
 8006b4e:	d100      	bne.n	8006b52 <SPI_DMAError+0xe>
}
 8006b50:	bd10      	pop	{r4, pc}
    SPI_CloseTransfer(hspi);
 8006b52:	4620      	mov	r0, r4
 8006b54:	f7ff fcbe 	bl	80064d4 <SPI_CloseTransfer>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006b58:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006b5c:	f043 0310 	orr.w	r3, r3, #16
 8006b60:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006b64:	2301      	movs	r3, #1
 8006b66:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f7ff ffe9 	bl	8006b42 <HAL_SPI_ErrorCallback>
}
 8006b70:	e7ee      	b.n	8006b50 <SPI_DMAError+0xc>

08006b72 <SPI_DMAAbortOnError>:
{
 8006b72:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b74:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006b7c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8006b80:	2301      	movs	r3, #1
 8006b82:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8006b86:	f7ff ffdc 	bl	8006b42 <HAL_SPI_ErrorCallback>
}
 8006b8a:	bd08      	pop	{r3, pc}

08006b8c <HAL_SPI_SuspendCallback>:
}
 8006b8c:	4770      	bx	lr
	...

08006b90 <HAL_SPI_IRQHandler>:
{
 8006b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b94:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 8006b96:	6806      	ldr	r6, [r0, #0]
 8006b98:	6932      	ldr	r2, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8006b9a:	6973      	ldr	r3, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 8006b9c:	ea02 0503 	and.w	r5, r2, r3
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006ba0:	f8d6 9008 	ldr.w	r9, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 8006ba4:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 8006ba8:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006baa:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006bae:	d002      	beq.n	8006bb6 <HAL_SPI_IRQHandler+0x26>
 8006bb0:	f012 0f08 	tst.w	r2, #8
 8006bb4:	d13f      	bne.n	8006c36 <HAL_SPI_IRQHandler+0xa6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006bb6:	f005 0364 	and.w	r3, r5, #100	; 0x64
 8006bba:	2b04      	cmp	r3, #4
 8006bbc:	d042      	beq.n	8006c44 <HAL_SPI_IRQHandler+0xb4>
  uint32_t handled  = 0UL;
 8006bbe:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006bc0:	f005 0845 	and.w	r8, r5, #69	; 0x45
 8006bc4:	f1b8 0f01 	cmp.w	r8, #1
 8006bc8:	d044      	beq.n	8006c54 <HAL_SPI_IRQHandler+0xc4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006bca:	f005 0226 	and.w	r2, r5, #38	; 0x26
 8006bce:	2a02      	cmp	r2, #2
 8006bd0:	d045      	beq.n	8006c5e <HAL_SPI_IRQHandler+0xce>
  if (handled != 0UL)
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d146      	bne.n	8006c64 <HAL_SPI_IRQHandler+0xd4>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006bd6:	f015 0f08 	tst.w	r5, #8
 8006bda:	d079      	beq.n	8006cd0 <HAL_SPI_IRQHandler+0x140>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006bdc:	6822      	ldr	r2, [r4, #0]
 8006bde:	6993      	ldr	r3, [r2, #24]
 8006be0:	f043 0308 	orr.w	r3, r3, #8
 8006be4:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006be6:	6822      	ldr	r2, [r4, #0]
 8006be8:	6993      	ldr	r3, [r2, #24]
 8006bea:	f043 0310 	orr.w	r3, r3, #16
 8006bee:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006bf0:	6822      	ldr	r2, [r4, #0]
 8006bf2:	6993      	ldr	r3, [r2, #24]
 8006bf4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006bf8:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006bfa:	6822      	ldr	r2, [r4, #0]
 8006bfc:	6913      	ldr	r3, [r2, #16]
 8006bfe:	f023 0308 	bic.w	r3, r3, #8
 8006c02:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8006c0c:	d03b      	beq.n	8006c86 <HAL_SPI_IRQHandler+0xf6>
    SPI_CloseTransfer(hspi);
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f7ff fc60 	bl	80064d4 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 8006c14:	2301      	movs	r3, #1
 8006c16:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c1a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d14a      	bne.n	8006cb8 <HAL_SPI_IRQHandler+0x128>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006c22:	2f05      	cmp	r7, #5
 8006c24:	d04c      	beq.n	8006cc0 <HAL_SPI_IRQHandler+0x130>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8006c26:	2f04      	cmp	r7, #4
 8006c28:	d04e      	beq.n	8006cc8 <HAL_SPI_IRQHandler+0x138>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006c2a:	2f03      	cmp	r7, #3
 8006c2c:	d11a      	bne.n	8006c64 <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_TxCpltCallback(hspi);
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f7ff ff50 	bl	8006ad4 <HAL_SPI_TxCpltCallback>
    return;
 8006c34:	e016      	b.n	8006c64 <HAL_SPI_IRQHandler+0xd4>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006c36:	69b3      	ldr	r3, [r6, #24]
 8006c38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006c3c:	61b3      	str	r3, [r6, #24]
    HAL_SPI_SuspendCallback(hspi);
 8006c3e:	f7ff ffa5 	bl	8006b8c <HAL_SPI_SuspendCallback>
    return;
 8006c42:	e00f      	b.n	8006c64 <HAL_SPI_IRQHandler+0xd4>
    hspi->TxISR(hspi);
 8006c44:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006c46:	4620      	mov	r0, r4
 8006c48:	4798      	blx	r3
    hspi->RxISR(hspi);
 8006c4a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	4798      	blx	r3
    handled = 1UL;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e7b5      	b.n	8006bc0 <HAL_SPI_IRQHandler+0x30>
    hspi->RxISR(hspi);
 8006c54:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006c56:	4620      	mov	r0, r4
 8006c58:	4798      	blx	r3
    handled = 1UL;
 8006c5a:	4643      	mov	r3, r8
 8006c5c:	e7b5      	b.n	8006bca <HAL_SPI_IRQHandler+0x3a>
    hspi->TxISR(hspi);
 8006c5e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006c60:	4620      	mov	r0, r4
 8006c62:	4798      	blx	r3
}
 8006c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c68:	2b07      	cmp	r3, #7
 8006c6a:	d91c      	bls.n	8006ca6 <HAL_SPI_IRQHandler+0x116>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006c6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c6e:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 8006c70:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c74:	3302      	adds	r3, #2
 8006c76:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8006c78:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8006c86:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d0be      	beq.n	8006c0e <HAL_SPI_IRQHandler+0x7e>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006c90:	68e3      	ldr	r3, [r4, #12]
 8006c92:	2b0f      	cmp	r3, #15
 8006c94:	d9e8      	bls.n	8006c68 <HAL_SPI_IRQHandler+0xd8>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006c96:	6822      	ldr	r2, [r4, #0]
 8006c98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006c9c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006c9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	6663      	str	r3, [r4, #100]	; 0x64
 8006ca4:	e7e8      	b.n	8006c78 <HAL_SPI_IRQHandler+0xe8>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006ca6:	6822      	ldr	r2, [r4, #0]
 8006ca8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006caa:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8006cae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006cb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	6663      	str	r3, [r4, #100]	; 0x64
 8006cb6:	e7df      	b.n	8006c78 <HAL_SPI_IRQHandler+0xe8>
      HAL_SPI_ErrorCallback(hspi);
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f7ff ff42 	bl	8006b42 <HAL_SPI_ErrorCallback>
      return;
 8006cbe:	e7d1      	b.n	8006c64 <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_TxRxCpltCallback(hspi);
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f7ff ff32 	bl	8006b2a <HAL_SPI_TxRxCpltCallback>
 8006cc6:	e7cd      	b.n	8006c64 <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_RxCpltCallback(hspi);
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f7f9 fdcf 	bl	800086c <HAL_SPI_RxCpltCallback>
 8006cce:	e7c9      	b.n	8006c64 <HAL_SPI_IRQHandler+0xd4>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006cd0:	f415 7f58 	tst.w	r5, #864	; 0x360
 8006cd4:	d0c6      	beq.n	8006c64 <HAL_SPI_IRQHandler+0xd4>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006cd6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006cda:	d00a      	beq.n	8006cf2 <HAL_SPI_IRQHandler+0x162>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006cdc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006ce0:	f043 0304 	orr.w	r3, r3, #4
 8006ce4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ce8:	6822      	ldr	r2, [r4, #0]
 8006cea:	6993      	ldr	r3, [r2, #24]
 8006cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cf0:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006cf2:	f415 7f00 	tst.w	r5, #512	; 0x200
 8006cf6:	d00a      	beq.n	8006d0e <HAL_SPI_IRQHandler+0x17e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006cf8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006cfc:	f043 0301 	orr.w	r3, r3, #1
 8006d00:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d04:	6822      	ldr	r2, [r4, #0]
 8006d06:	6993      	ldr	r3, [r2, #24]
 8006d08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d0c:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006d0e:	f415 7f80 	tst.w	r5, #256	; 0x100
 8006d12:	d00a      	beq.n	8006d2a <HAL_SPI_IRQHandler+0x19a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006d14:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006d18:	f043 0308 	orr.w	r3, r3, #8
 8006d1c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006d20:	6822      	ldr	r2, [r4, #0]
 8006d22:	6993      	ldr	r3, [r2, #24]
 8006d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d28:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006d2a:	f015 0f20 	tst.w	r5, #32
 8006d2e:	d00a      	beq.n	8006d46 <HAL_SPI_IRQHandler+0x1b6>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006d30:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d38:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006d3c:	6822      	ldr	r2, [r4, #0]
 8006d3e:	6993      	ldr	r3, [r2, #24]
 8006d40:	f043 0320 	orr.w	r3, r3, #32
 8006d44:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d46:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d08a      	beq.n	8006c64 <HAL_SPI_IRQHandler+0xd4>
      __HAL_SPI_DISABLE(hspi);
 8006d4e:	6822      	ldr	r2, [r4, #0]
 8006d50:	6813      	ldr	r3, [r2, #0]
 8006d52:	f023 0301 	bic.w	r3, r3, #1
 8006d56:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8006d58:	6822      	ldr	r2, [r4, #0]
 8006d5a:	6911      	ldr	r1, [r2, #16]
 8006d5c:	4b1a      	ldr	r3, [pc, #104]	; (8006dc8 <HAL_SPI_IRQHandler+0x238>)
 8006d5e:	400b      	ands	r3, r1
 8006d60:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006d62:	f409 4940 	and.w	r9, r9, #49152	; 0xc000
 8006d66:	f5b9 4f40 	cmp.w	r9, #49152	; 0xc000
 8006d6a:	d125      	bne.n	8006db8 <HAL_SPI_IRQHandler+0x228>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006d6c:	6822      	ldr	r2, [r4, #0]
 8006d6e:	6893      	ldr	r3, [r2, #8]
 8006d70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006d74:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 8006d76:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006d78:	b15b      	cbz	r3, 8006d92 <HAL_SPI_IRQHandler+0x202>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d7a:	4a14      	ldr	r2, [pc, #80]	; (8006dcc <HAL_SPI_IRQHandler+0x23c>)
 8006d7c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006d7e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006d80:	f7fc faf8 	bl	8003374 <HAL_DMA_Abort_IT>
 8006d84:	b128      	cbz	r0, 8006d92 <HAL_SPI_IRQHandler+0x202>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d86:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d8e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 8006d92:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f43f af65 	beq.w	8006c64 <HAL_SPI_IRQHandler+0xd4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d9a:	4a0c      	ldr	r2, [pc, #48]	; (8006dcc <HAL_SPI_IRQHandler+0x23c>)
 8006d9c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d9e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006da0:	f7fc fae8 	bl	8003374 <HAL_DMA_Abort_IT>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	f43f af5d 	beq.w	8006c64 <HAL_SPI_IRQHandler+0xd4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006daa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006db2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8006db6:	e755      	b.n	8006c64 <HAL_SPI_IRQHandler+0xd4>
        hspi->State = HAL_SPI_STATE_READY;
 8006db8:	2301      	movs	r3, #1
 8006dba:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f7ff febf 	bl	8006b42 <HAL_SPI_ErrorCallback>
    return;
 8006dc4:	e74e      	b.n	8006c64 <HAL_SPI_IRQHandler+0xd4>
 8006dc6:	bf00      	nop
 8006dc8:	fffffc94 	.word	0xfffffc94
 8006dcc:	08006b73 	.word	0x08006b73

08006dd0 <tThreshold_initToPool>:
{
	tThreshold_initToPool(th, low, high, &leaf->mempool);
}

void tThreshold_initToPool (tThreshold* const th, float low, float high, tMempool* const mp)
{
 8006dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd2:	4606      	mov	r6, r0
 8006dd4:	ee10 4a10 	vmov	r4, s0
 8006dd8:	ee10 5a90 	vmov	r5, s1
    _tMempool* m = *mp;
 8006ddc:	680f      	ldr	r7, [r1, #0]
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 8006dde:	4639      	mov	r1, r7
 8006de0:	2010      	movs	r0, #16
 8006de2:	f000 fba0 	bl	8007526 <mpool_alloc>
 8006de6:	6030      	str	r0, [r6, #0]
    t->mempool = m;
 8006de8:	6007      	str	r7, [r0, #0]
    
    t->highThresh = high;
 8006dea:	6045      	str	r5, [r0, #4]
    t->lowThresh = low;
 8006dec:	6084      	str	r4, [r0, #8]

    t->currentValue = 0;
 8006dee:	2300      	movs	r3, #0
 8006df0:	60c3      	str	r3, [r0, #12]
}
 8006df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006df4 <tThreshold_init>:
{
 8006df4:	b508      	push	{r3, lr}
	tThreshold_initToPool(th, low, high, &leaf->mempool);
 8006df6:	3118      	adds	r1, #24
 8006df8:	f7ff ffea 	bl	8006dd0 <tThreshold_initToPool>
}
 8006dfc:	bd08      	pop	{r3, pc}

08006dfe <tThreshold_tick>:
    mpool_free((char*)t, t->mempool);
}

int tThreshold_tick(tThreshold* const th, float in)
{
    _tThreshold* t = *th;
 8006dfe:	6803      	ldr	r3, [r0, #0]

    if (in >= t->highThresh)
 8006e00:	edd3 7a01 	vldr	s15, [r3, #4]
 8006e04:	eef4 7ac0 	vcmpe.f32	s15, s0
 8006e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e0c:	d803      	bhi.n	8006e16 <tThreshold_tick+0x18>
    {
    	t->currentValue = 1;
 8006e0e:	2201      	movs	r2, #1
 8006e10:	60da      	str	r2, [r3, #12]
	{
    	t->currentValue = 0;
	}

    return t->currentValue;
}
 8006e12:	68d8      	ldr	r0, [r3, #12]
 8006e14:	4770      	bx	lr
    else if (in <= t->lowThresh)
 8006e16:	edd3 7a02 	vldr	s15, [r3, #8]
 8006e1a:	eef4 7ac0 	vcmpe.f32	s15, s0
 8006e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e22:	dbf6      	blt.n	8006e12 <tThreshold_tick+0x14>
    	t->currentValue = 0;
 8006e24:	2200      	movs	r2, #0
 8006e26:	60da      	str	r2, [r3, #12]
 8006e28:	e7f3      	b.n	8006e12 <tThreshold_tick+0x14>

08006e2a <tSlide_initToPool>:
{
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
 8006e2a:	b538      	push	{r3, r4, r5, lr}
 8006e2c:	ed2d 8b02 	vpush	{d8}
 8006e30:	4604      	mov	r4, r0
 8006e32:	eef0 8a40 	vmov.f32	s17, s0
 8006e36:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
 8006e3a:	680d      	ldr	r5, [r1, #0]
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	201c      	movs	r0, #28
 8006e40:	f000 fb71 	bl	8007526 <mpool_alloc>
 8006e44:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 8006e46:	6005      	str	r5, [r0, #0]
    
    s->prevIn = 0.0f;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 8006e4c:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 8006e4e:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 8006e50:	6183      	str	r3, [r0, #24]
    if (upSlide < 1.0f)
 8006e52:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006e56:	eef4 8ae7 	vcmpe.f32	s17, s15
 8006e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e5e:	d413      	bmi.n	8006e88 <tSlide_initToPool+0x5e>
    {
        upSlide = 1.0f;
    }

    if (downSlide < 1.0f)
 8006e60:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006e64:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e6c:	d40f      	bmi.n	8006e8e <tSlide_initToPool+0x64>
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 8006e6e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006e72:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8006e76:	ed80 7a04 	vstr	s14, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 8006e7a:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8006e7e:	ed80 7a05 	vstr	s14, [r0, #20]
}
 8006e82:	ecbd 8b02 	vpop	{d8}
 8006e86:	bd38      	pop	{r3, r4, r5, pc}
        upSlide = 1.0f;
 8006e88:	eef0 8a67 	vmov.f32	s17, s15
 8006e8c:	e7e8      	b.n	8006e60 <tSlide_initToPool+0x36>
        downSlide = 1.0f;
 8006e8e:	eeb0 8a67 	vmov.f32	s16, s15
 8006e92:	e7ec      	b.n	8006e6e <tSlide_initToPool+0x44>

08006e94 <tSlide_init>:
{
 8006e94:	b508      	push	{r3, lr}
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
 8006e96:	3118      	adds	r1, #24
 8006e98:	f7ff ffc7 	bl	8006e2a <tSlide_initToPool>
}
 8006e9c:	bd08      	pop	{r3, pc}
	...

08006ea0 <tSlide_tick>:
    return s->currentOut;
}

float tSlide_tick(tSlide* const sl, float in)
{
    _tSlide* s = *sl;
 8006ea0:	6803      	ldr	r3, [r0, #0]


    if (in >= s->prevOut)
 8006ea2:	edd3 7a01 	vldr	s15, [r3, #4]
 8006ea6:	eef4 7ac0 	vcmpe.f32	s15, s0
 8006eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eae:	d81b      	bhi.n	8006ee8 <tSlide_tick+0x48>
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8006eb0:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006eb4:	edd3 6a04 	vldr	s13, [r3, #16]
 8006eb8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006ebc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ec0:	edc3 7a02 	vstr	s15, [r3, #8]
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 8006ec4:	ed93 7a02 	vldr	s14, [r3, #8]
 8006ec8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006f00 <tSlide_tick+0x60>
 8006ecc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed4:	d501      	bpl.n	8006eda <tSlide_tick+0x3a>
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	609a      	str	r2, [r3, #8]
#endif
    s->prevIn = in;
 8006eda:	ed83 0a03 	vstr	s0, [r3, #12]
    s->prevOut = s->currentOut;
 8006ede:	ed93 0a02 	vldr	s0, [r3, #8]
 8006ee2:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
 8006ee6:	4770      	bx	lr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 8006ee8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006eec:	edd3 6a05 	vldr	s13, [r3, #20]
 8006ef0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006ef4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ef8:	edc3 7a02 	vstr	s15, [r3, #8]
 8006efc:	e7e2      	b.n	8006ec4 <tSlide_tick+0x24>
 8006efe:	bf00      	nop
 8006f00:	006ce3ee 	.word	0x006ce3ee

08006f04 <tHighpass_initToPool>:
{
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	ed2d 8b02 	vpush	{d8}
 8006f0a:	4605      	mov	r5, r0
 8006f0c:	eeb0 8a40 	vmov.f32	s16, s0
    _tMempool* m = *mp;
 8006f10:	680c      	ldr	r4, [r1, #0]
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8006f12:	4621      	mov	r1, r4
 8006f14:	2018      	movs	r0, #24
 8006f16:	f000 fb7e 	bl	8007616 <mpool_calloc>
 8006f1a:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8006f1c:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 8006f1e:	6863      	ldr	r3, [r4, #4]
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8006f20:	edd3 7a03 	vldr	s15, [r3, #12]
 8006f24:	edc0 7a05 	vstr	s15, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8006f28:	ee67 7a88 	vmul.f32	s15, s15, s16
 8006f2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f34:	edc0 7a03 	vstr	s15, [r0, #12]
    f->ys = 0.0f;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	6083      	str	r3, [r0, #8]
    f->xs = 0.0f;
 8006f3c:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
 8006f3e:	ed80 8a04 	vstr	s16, [r0, #16]
}
 8006f42:	ecbd 8b02 	vpop	{d8}
 8006f46:	bd38      	pop	{r3, r4, r5, pc}

08006f48 <tHighpass_init>:
{
 8006f48:	b508      	push	{r3, lr}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
 8006f4a:	3118      	adds	r1, #24
 8006f4c:	f7ff ffda 	bl	8006f04 <tHighpass_initToPool>
}
 8006f50:	bd08      	pop	{r3, pc}

08006f52 <tHighpass_tick>:
    return f->frequency;
}

// From JOS DC Blocker
float tHighpass_tick(tHighpass* const ft, float x)
{
 8006f52:	eeb0 7a40 	vmov.f32	s14, s0
    _tHighpass* f = *ft;
 8006f56:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 8006f58:	edd3 7a01 	vldr	s15, [r3, #4]
 8006f5c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8006f60:	ed93 0a03 	vldr	s0, [r3, #12]
 8006f64:	edd3 6a02 	vldr	s13, [r3, #8]
 8006f68:	ee20 0a26 	vmul.f32	s0, s0, s13
 8006f6c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006f70:	ed83 0a02 	vstr	s0, [r3, #8]
    f->xs = x;
 8006f74:	ed83 7a01 	vstr	s14, [r3, #4]
    return f->ys;
}
 8006f78:	4770      	bx	lr

08006f7a <tVZFilter_tick>:
    _tVZFilter* f = *vf;
    mpool_free((char*)f, f->mempool);
}

float   tVZFilter_tick              (tVZFilter* const vf, float in)
{
 8006f7a:	b510      	push	{r4, lr}
 8006f7c:	ed2d 8b06 	vpush	{d8-d10}
    _tVZFilter* f = *vf;
 8006f80:	6804      	ldr	r4, [r0, #0]
    
    float yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8006f82:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
 8006f86:	ed94 9a02 	vldr	s18, [r4, #8]
 8006f8a:	ee28 8a09 	vmul.f32	s16, s16, s18
 8006f8e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8006f92:	edd4 9a03 	vldr	s19, [r4, #12]
 8006f96:	ee38 8a69 	vsub.f32	s16, s16, s19
 8006f9a:	ed94 0a06 	vldr	s0, [r4, #24]
 8006f9e:	ee28 8a00 	vmul.f32	s16, s16, s0
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 8006fa2:	edd4 8a04 	vldr	s17, [r4, #16]
 8006fa6:	ee28 aa88 	vmul.f32	s20, s17, s16
    yB = tanhf(v1) + f->s1;
 8006faa:	eeb0 0a4a 	vmov.f32	s0, s20
 8006fae:	f000 fe6f 	bl	8007c90 <tanhf>
 8006fb2:	ee39 9a00 	vadd.f32	s18, s18, s0
    f->s1 = v1 + yB; // state update in 1st integrator
 8006fb6:	ee3a aa09 	vadd.f32	s20, s20, s18
 8006fba:	ed84 aa02 	vstr	s20, [r4, #8]
    
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
 8006fbe:	ee68 8a89 	vmul.f32	s17, s17, s18
    yL = tanhf(v2) + f->s2;
 8006fc2:	eeb0 0a68 	vmov.f32	s0, s17
 8006fc6:	f000 fe63 	bl	8007c90 <tanhf>
 8006fca:	ee79 9a80 	vadd.f32	s19, s19, s0
    f->s2 = v2 + yL; // state update in 2nd integrator
 8006fce:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8006fd2:	edc4 8a03 	vstr	s17, [r4, #12]
    // y = g*x + s; // output computation
    // s = g*x + y; // state update
    
    // if we wanted to go into self-oscillation with stabiity we would need to use an anti-saturator on the feedback loop, haven't figured that out yet. -JS
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8006fd6:	ed94 0a07 	vldr	s0, [r4, #28]
 8006fda:	ee20 0a29 	vmul.f32	s0, s0, s19
 8006fde:	edd4 7a08 	vldr	s15, [r4, #32]
 8006fe2:	ee27 9a89 	vmul.f32	s18, s15, s18
 8006fe6:	ee30 9a09 	vadd.f32	s18, s0, s18
 8006fea:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8006fee:	ee20 0a08 	vmul.f32	s0, s0, s16
}
 8006ff2:	ee39 0a00 	vadd.f32	s0, s18, s0
 8006ff6:	ecbd 8b06 	vpop	{d8-d10}
 8006ffa:	bd10      	pop	{r4, pc}

08006ffc <tVZFilter_calcCoeffs>:
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 8006ffc:	b510      	push	{r4, lr}
 8006ffe:	ed2d 8b04 	vpush	{d8-d9}
    _tVZFilter* f = *vf;
 8007002:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8007004:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 8007008:	eddf 7a98 	vldr	s15, [pc, #608]	; 800726c <tVZFilter_calcCoeffs+0x270>
 800700c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8007010:	ed94 0a12 	vldr	s0, [r4, #72]	; 0x48
 8007014:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007018:	f000 fe0e 	bl	8007c38 <tanf>
 800701c:	ed84 0a04 	vstr	s0, [r4, #16]
    
    switch( f->type )
 8007020:	7923      	ldrb	r3, [r4, #4]
 8007022:	2b0a      	cmp	r3, #10
 8007024:	d80e      	bhi.n	8007044 <tVZFilter_calcCoeffs+0x48>
 8007026:	e8df f003 	tbb	[pc, r3]
 800702a:	262d      	.short	0x262d
 800702c:	4e473b34 	.word	0x4e473b34
 8007030:	06cea98f 	.word	0x06cea98f
 8007034:	c3          	.byte	0xc3
 8007035:	00          	.byte	0x00
    {
        case Bypass:
        {
            f->R2 = f->invG;
 8007036:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007038:	6162      	str	r2, [r4, #20]
            f->cL = 1.0f;
 800703a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800703e:	61e3      	str	r3, [r4, #28]
            f->cB = f->R2;
 8007040:	6222      	str	r2, [r4, #32]
            f->cH = 1.0f;
 8007042:	6263      	str	r3, [r4, #36]	; 0x24
            f->cL *= s; f->cB *= s; f->cH *= s;
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
 8007044:	edd4 7a05 	vldr	s15, [r4, #20]
 8007048:	ed94 7a04 	vldr	s14, [r4, #16]
 800704c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007050:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8007054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007058:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800705c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007060:	ee27 7a07 	vmul.f32	s14, s14, s14
 8007064:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007068:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800706c:	ed84 7a06 	vstr	s14, [r4, #24]
}
 8007070:	ecbd 8b04 	vpop	{d8-d9}
 8007074:	bd10      	pop	{r4, pc}
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8007076:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800707a:	61e3      	str	r3, [r4, #28]
 800707c:	2300      	movs	r3, #0
 800707e:	6223      	str	r3, [r4, #32]
 8007080:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8007082:	e7df      	b.n	8007044 <tVZFilter_calcCoeffs+0x48>
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8007084:	2300      	movs	r3, #0
 8007086:	61e3      	str	r3, [r4, #28]
 8007088:	6223      	str	r3, [r4, #32]
 800708a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800708e:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8007090:	e7d8      	b.n	8007044 <tVZFilter_calcCoeffs+0x48>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8007092:	2300      	movs	r3, #0
 8007094:	61e3      	str	r3, [r4, #28]
 8007096:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800709a:	6222      	str	r2, [r4, #32]
 800709c:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800709e:	e7d1      	b.n	8007044 <tVZFilter_calcCoeffs+0x48>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80070a0:	2300      	movs	r3, #0
 80070a2:	61e3      	str	r3, [r4, #28]
 80070a4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80070a8:	ed94 7a05 	vldr	s14, [r4, #20]
 80070ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80070b0:	edc4 7a08 	vstr	s15, [r4, #32]
 80070b4:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 80070b6:	e7c5      	b.n	8007044 <tVZFilter_calcCoeffs+0x48>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 80070b8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80070bc:	61e3      	str	r3, [r4, #28]
 80070be:	2200      	movs	r2, #0
 80070c0:	6222      	str	r2, [r4, #32]
 80070c2:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 80070c4:	e7be      	b.n	8007044 <tVZFilter_calcCoeffs+0x48>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80070c6:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 80070ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80070ce:	ee60 0ae7 	vnmul.f32	s1, s1, s15
 80070d2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80070d6:	f000 fc4f 	bl	8007978 <powf>
 80070da:	ee28 8a00 	vmul.f32	s16, s16, s0
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 80070de:	ed9f 0a63 	vldr	s0, [pc, #396]	; 800726c <tVZFilter_calcCoeffs+0x270>
 80070e2:	ee28 8a00 	vmul.f32	s16, s16, s0
 80070e6:	ed94 0a12 	vldr	s0, [r4, #72]	; 0x48
 80070ea:	ee28 0a00 	vmul.f32	s0, s16, s0
 80070ee:	f000 fda3 	bl	8007c38 <tanf>
            float r  = f->g/wl;
 80070f2:	ed94 7a04 	vldr	s14, [r4, #16]
 80070f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 80070fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80070fe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007102:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007106:	ee37 7a08 	vadd.f32	s14, s14, s16
 800710a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800710e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007112:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007116:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800711a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800711e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007122:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8007126:	f000 fe33 	bl	8007d90 <sqrtf>
 800712a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800712e:	ed84 0a05 	vstr	s0, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8007132:	ed84 8a07 	vstr	s16, [r4, #28]
 8007136:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800713a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800713e:	ed84 0a08 	vstr	s0, [r4, #32]
 8007142:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
            break;
 8007146:	e77d      	b.n	8007044 <tVZFilter_calcCoeffs+0x48>
            float A = sqrtf(f->G);
 8007148:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 800714c:	f000 fe20 	bl	8007d90 <sqrtf>
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8007150:	f000 fe1e 	bl	8007d90 <sqrtf>
 8007154:	ed94 7a04 	vldr	s14, [r4, #16]
 8007158:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800715c:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8007160:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8007164:	edc4 7a07 	vstr	s15, [r4, #28]
 8007168:	ed94 7a05 	vldr	s14, [r4, #20]
 800716c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007170:	edc4 7a08 	vstr	s15, [r4, #32]
 8007174:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007178:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800717a:	e763      	b.n	8007044 <tVZFilter_calcCoeffs+0x48>
            float A = sqrtf(f->G);
 800717c:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8007180:	f000 fe06 	bl	8007d90 <sqrtf>
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8007184:	f000 fe04 	bl	8007d90 <sqrtf>
 8007188:	edd4 7a04 	vldr	s15, [r4, #16]
 800718c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007190:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8007194:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007198:	61e3      	str	r3, [r4, #28]
 800719a:	edd4 7a05 	vldr	s15, [r4, #20]
 800719e:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 80071a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071a6:	edc4 7a08 	vstr	s15, [r4, #32]
 80071aa:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            break;
 80071ae:	e749      	b.n	8007044 <tVZFilter_calcCoeffs+0x48>
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 80071b0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80071b4:	61e3      	str	r3, [r4, #28]
 80071b6:	edd4 7a05 	vldr	s15, [r4, #20]
 80071ba:	eef1 7a67 	vneg.f32	s15, s15
 80071be:	edc4 7a08 	vstr	s15, [r4, #32]
 80071c2:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 80071c4:	e73e      	b.n	8007044 <tVZFilter_calcCoeffs+0x48>
            float x  = (2.0f*f->m-1.0f);
 80071c6:	ed94 8a0f 	vldr	s16, [r4, #60]	; 0x3c
 80071ca:	ee38 8a08 	vadd.f32	s16, s16, s16
 80071ce:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80071d2:	ee38 8a68 	vsub.f32	s16, s16, s17
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80071d6:	ed9f 9a26 	vldr	s18, [pc, #152]	; 8007270 <tVZFilter_calcCoeffs+0x274>
 80071da:	eef0 0a49 	vmov.f32	s1, s18
 80071de:	eeb1 0a48 	vneg.f32	s0, s16
 80071e2:	f000 f969 	bl	80074b8 <maximum>
 80071e6:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80071ea:	eef0 0a49 	vmov.f32	s1, s18
 80071ee:	eeb0 0a48 	vmov.f32	s0, s16
 80071f2:	f000 f96d 	bl	80074d0 <minimum>
 80071f6:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            f->cB = 1.0f-x*x;
 80071fa:	ee28 8a08 	vmul.f32	s16, s16, s16
 80071fe:	ee38 8ac8 	vsub.f32	s16, s17, s16
 8007202:	ed84 8a08 	vstr	s16, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8007206:	edd4 8a0b 	vldr	s17, [r4, #44]	; 0x2c
 800720a:	edd4 7a05 	vldr	s15, [r4, #20]
 800720e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8007212:	ed94 7a07 	vldr	s14, [r4, #28]
 8007216:	ee67 7a07 	vmul.f32	s15, s14, s14
 800721a:	ee28 8a08 	vmul.f32	s16, s16, s16
 800721e:	ee37 8a88 	vadd.f32	s16, s15, s16
 8007222:	ee60 7a00 	vmul.f32	s15, s0, s0
 8007226:	ee38 8a27 	vadd.f32	s16, s16, s15
 800722a:	ee37 7a07 	vadd.f32	s14, s14, s14
 800722e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007232:	ee38 0a40 	vsub.f32	s0, s16, s0
 8007236:	ee86 0a80 	vdiv.f32	s0, s13, s0
 800723a:	f000 f8d1 	bl	80073e0 <fastsqrtf>
 800723e:	ee28 0a80 	vmul.f32	s0, s17, s0
 8007242:	ee30 0a00 	vadd.f32	s0, s0, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 8007246:	edd4 7a07 	vldr	s15, [r4, #28]
 800724a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800724e:	edc4 7a07 	vstr	s15, [r4, #28]
 8007252:	edd4 7a08 	vldr	s15, [r4, #32]
 8007256:	ee67 7a80 	vmul.f32	s15, s15, s0
 800725a:	edc4 7a08 	vstr	s15, [r4, #32]
 800725e:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8007262:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007266:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 800726a:	e6eb      	b.n	8007044 <tVZFilter_calcCoeffs+0x48>
 800726c:	40490fdb 	.word	0x40490fdb
 8007270:	00000000 	.word	0x00000000

08007274 <tVZFilter_BandwidthToR>:
    f->type = type;
    tVZFilter_calcCoeffs(vf);
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
 8007274:	b510      	push	{r4, lr}
 8007276:	ed2d 8b02 	vpush	{d8}
    _tVZFilter* f = *vf;
 800727a:	6804      	ldr	r4, [r0, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800727c:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 8007280:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8007284:	ee60 0a60 	vnmul.f32	s1, s0, s1
 8007288:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800728c:	f000 fb74 	bl	8007978 <powf>
 8007290:	ee28 8a00 	vmul.f32	s16, s16, s0
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8007294:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80072dc <tVZFilter_BandwidthToR+0x68>
 8007298:	ee28 8a00 	vmul.f32	s16, s16, s0
 800729c:	ed94 0a12 	vldr	s0, [r4, #72]	; 0x48
 80072a0:	ee28 0a00 	vmul.f32	s0, s16, s0
 80072a4:	f000 fcc8 	bl	8007c38 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80072a8:	edd4 7a04 	vldr	s15, [r4, #16]
 80072ac:	ee80 7a27 	vdiv.f32	s14, s0, s15
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80072b0:	ee67 7a07 	vmul.f32	s15, s14, s14
 80072b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80072b8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80072bc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80072c0:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80072c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072cc:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80072d0:	f000 fd5e 	bl	8007d90 <sqrtf>
}
 80072d4:	ecbd 8b02 	vpop	{d8}
 80072d8:	bd10      	pop	{r4, pc}
 80072da:	bf00      	nop
 80072dc:	40490fdb 	.word	0x40490fdb

080072e0 <tVZFilter_setBandwidth>:
{
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	4604      	mov	r4, r0
 80072e4:	eef0 0a40 	vmov.f32	s1, s0
    _tVZFilter* f = *vf;
 80072e8:	6805      	ldr	r5, [r0, #0]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 80072ea:	ed9f 1a09 	vldr	s2, [pc, #36]	; 8007310 <tVZFilter_setBandwidth+0x30>
 80072ee:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8007314 <tVZFilter_setBandwidth+0x34>
 80072f2:	f000 f899 	bl	8007428 <LEAF_clip>
 80072f6:	ed85 0a0e 	vstr	s0, [r5, #56]	; 0x38
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 80072fa:	4620      	mov	r0, r4
 80072fc:	f7ff ffba 	bl	8007274 <tVZFilter_BandwidthToR>
 8007300:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007304:	ed85 0a05 	vstr	s0, [r5, #20]
    tVZFilter_calcCoeffs(vf);
 8007308:	4620      	mov	r0, r4
 800730a:	f7ff fe77 	bl	8006ffc <tVZFilter_calcCoeffs>
}
 800730e:	bd38      	pop	{r3, r4, r5, pc}
 8007310:	42c80000 	.word	0x42c80000
 8007314:	00000000 	.word	0x00000000

08007318 <tVZFilter_initToPool>:
{
 8007318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731a:	ed2d 8b04 	vpush	{d8-d9}
 800731e:	4605      	mov	r5, r0
 8007320:	460e      	mov	r6, r1
 8007322:	eeb0 9a40 	vmov.f32	s18, s0
 8007326:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
 800732a:	6817      	ldr	r7, [r2, #0]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800732c:	4639      	mov	r1, r7
 800732e:	204c      	movs	r0, #76	; 0x4c
 8007330:	f000 f8f9 	bl	8007526 <mpool_alloc>
 8007334:	4604      	mov	r4, r0
 8007336:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8007338:	6007      	str	r7, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 800733a:	687b      	ldr	r3, [r7, #4]
    f->sampleRate = leaf->sampleRate;
 800733c:	ed93 1a00 	vldr	s2, [r3]
 8007340:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->invSampleRate = leaf->invSampleRate;
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8007348:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800734c:	eddf 8a1d 	vldr	s17, [pc, #116]	; 80073c4 <tVZFilter_initToPool+0xac>
 8007350:	ee21 1a29 	vmul.f32	s2, s2, s19
 8007354:	eef0 0a49 	vmov.f32	s1, s18
 8007358:	eeb0 0a68 	vmov.f32	s0, s17
 800735c:	f000 f864 	bl	8007428 <LEAF_clip>
 8007360:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->type = type;
 8007364:	7126      	strb	r6, [r4, #4]
    f->G    = ONE_OVER_SQRT2;
 8007366:	4b18      	ldr	r3, [pc, #96]	; (80073c8 <tVZFilter_initToPool+0xb0>)
 8007368:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->invG = 1.0f/ONE_OVER_SQRT2;
 800736a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80073cc <tVZFilter_initToPool+0xb4>
 800736e:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->B    = bandWidth;
 8007372:	ed84 8a0e 	vstr	s16, [r4, #56]	; 0x38
    f->m    = 0.0f;
 8007376:	edc4 8a0f 	vstr	s17, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 800737a:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 800737e:	edc4 8a02 	vstr	s17, [r4, #8]
    f->s2   = 0.0f;
 8007382:	edc4 8a03 	vstr	s17, [r4, #12]
    f->R2   = f->invG;
 8007386:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
 800738a:	edd4 7a04 	vldr	s15, [r4, #16]
 800738e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007392:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8007396:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80073d0 <tVZFilter_initToPool+0xb8>
 800739a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800739e:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
 80073a2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80073a6:	f000 fc47 	bl	8007c38 <tanf>
 80073aa:	ed84 0a04 	vstr	s0, [r4, #16]
    tVZFilter_setBandwidth(vf,f->B);
 80073ae:	eeb0 0a48 	vmov.f32	s0, s16
 80073b2:	4628      	mov	r0, r5
 80073b4:	f7ff ff94 	bl	80072e0 <tVZFilter_setBandwidth>
    tVZFilter_calcCoeffs(vf);
 80073b8:	4628      	mov	r0, r5
 80073ba:	f7ff fe1f 	bl	8006ffc <tVZFilter_calcCoeffs>
}
 80073be:	ecbd 8b04 	vpop	{d8-d9}
 80073c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073c4:	00000000 	.word	0x00000000
 80073c8:	3f3504f3 	.word	0x3f3504f3
 80073cc:	3fb504f3 	.word	0x3fb504f3
 80073d0:	40490fdb 	.word	0x40490fdb

080073d4 <tVZFilter_init>:
{
 80073d4:	b508      	push	{r3, lr}
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 80073d6:	3218      	adds	r2, #24
 80073d8:	f7ff ff9e 	bl	8007318 <tVZFilter_initToPool>
}
 80073dc:	bd08      	pop	{r3, pc}
	...

080073e0 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
float fastsqrtf(float x)
{
	union { float f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 80073e0:	4b10      	ldr	r3, [pc, #64]	; (8007424 <fastsqrtf+0x44>)
 80073e2:	ee10 2a10 	vmov	r2, s0
 80073e6:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 80073ea:	ee07 3a10 	vmov	s14, r3
 80073ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80073f2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80073f6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80073fa:	ee20 0a07 	vmul.f32	s0, s0, s14
 80073fe:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8007402:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800740a:	ee17 3a90 	vmov	r3, s15
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
 800740e:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 8007412:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 8007416:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 800741a:	336e      	adds	r3, #110	; 0x6e
}
 800741c:	ee00 3a10 	vmov	s0, r3
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	5f3759df 	.word	0x5f3759df

08007428 <LEAF_clip>:
float LEAF_clip(float min, float val, float max)
#endif
{
    float tempmin = min;
    float tempmax = max;
    if (min > max)
 8007428:	eeb4 0ac1 	vcmpe.f32	s0, s2
 800742c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007430:	dc05      	bgt.n	800743e <LEAF_clip+0x16>
 8007432:	ee11 3a10 	vmov	r3, s2
    float tempmin = min;
 8007436:	eeb0 1a40 	vmov.f32	s2, s0
    float tempmax = max;
 800743a:	ee00 3a10 	vmov	s0, r3
    {
        tempmin = max;
        tempmax = min;
    }
    if (val < tempmin)
 800743e:	eeb4 1ae0 	vcmpe.f32	s2, s1
 8007442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007446:	dc05      	bgt.n	8007454 <LEAF_clip+0x2c>
    {
        return tempmin;
    }
    else if (val > tempmax)
 8007448:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800744c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007450:	d503      	bpl.n	800745a <LEAF_clip+0x32>
 8007452:	4770      	bx	lr
        return tempmin;
 8007454:	eeb0 0a41 	vmov.f32	s0, s2
 8007458:	4770      	bx	lr
    {
        return tempmax;
    }
    else
    {
        return val;
 800745a:	eeb0 0a60 	vmov.f32	s0, s1
    }
}
 800745e:	4770      	bx	lr

08007460 <atodb>:
    return (expf((LOGTEN * 0.05f) * (f-100.0f)));
}


float atodb(float a)
{
 8007460:	b508      	push	{r3, lr}
    return 20.0f*log10f(a);
 8007462:	f000 fc67 	bl	8007d34 <log10f>
}
 8007466:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800746a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800746e:	bd08      	pop	{r3, pc}

08007470 <LEAF_generate_atodb>:
{
 8007470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007472:	ed2d 8b02 	vpush	{d8}
 8007476:	4607      	mov	r7, r0
 8007478:	460e      	mov	r6, r1
    float increment = 1.0f / (float)(size-1);
 800747a:	1e4b      	subs	r3, r1, #1
 800747c:	ee07 3a90 	vmov	s15, r3
 8007480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007484:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007488:	eec7 8a27 	vdiv.f32	s17, s14, s15
    for (int i = 0; i < size; i++)
 800748c:	2400      	movs	r4, #0
    float x = 0.0f;
 800748e:	ed9f 8a09 	vldr	s16, [pc, #36]	; 80074b4 <LEAF_generate_atodb+0x44>
    for (int i = 0; i < size; i++)
 8007492:	e00a      	b.n	80074aa <LEAF_generate_atodb+0x3a>
        buffer[i] = atodb(x);
 8007494:	eb07 0584 	add.w	r5, r7, r4, lsl #2
 8007498:	eeb0 0a48 	vmov.f32	s0, s16
 800749c:	f7ff ffe0 	bl	8007460 <atodb>
 80074a0:	ed85 0a00 	vstr	s0, [r5]
        x += increment;
 80074a4:	ee38 8a28 	vadd.f32	s16, s16, s17
    for (int i = 0; i < size; i++)
 80074a8:	3401      	adds	r4, #1
 80074aa:	42b4      	cmp	r4, r6
 80074ac:	dbf2      	blt.n	8007494 <LEAF_generate_atodb+0x24>
}
 80074ae:	ecbd 8b02 	vpop	{d8}
 80074b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b4:	00000000 	.word	0x00000000

080074b8 <maximum>:
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}


float maximum (float num1, float num2)
{
 80074b8:	eef0 7a40 	vmov.f32	s15, s0
 80074bc:	eeb0 0a60 	vmov.f32	s0, s1
    return (num1 > num2 ) ? num1 : num2;
 80074c0:	eef4 7ae0 	vcmpe.f32	s15, s1
 80074c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c8:	dd01      	ble.n	80074ce <maximum+0x16>
 80074ca:	eeb0 0a67 	vmov.f32	s0, s15
}
 80074ce:	4770      	bx	lr

080074d0 <minimum>:

float minimum (float num1, float num2)
{
 80074d0:	eef0 7a40 	vmov.f32	s15, s0
 80074d4:	eeb0 0a60 	vmov.f32	s0, s1
    return (num1 < num2 ) ? num1 : num2;
 80074d8:	eef4 7ae0 	vcmpe.f32	s15, s1
 80074dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e0:	d501      	bpl.n	80074e6 <minimum+0x16>
 80074e2:	eeb0 0a67 	vmov.f32	s0, s15
}
 80074e6:	4770      	bx	lr

080074e8 <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 80074e8:	b410      	push	{r4}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 80074ea:	6853      	ldr	r3, [r2, #4]
 80074ec:	2410      	movs	r4, #16
 80074ee:	635c      	str	r4, [r3, #52]	; 0x34
    
    pool->mpool = (char*)memory;
 80074f0:	6090      	str	r0, [r2, #8]
    pool->usize  = 0;
 80074f2:	2400      	movs	r4, #0
 80074f4:	60d4      	str	r4, [r2, #12]
    pool->msize  = size;
 80074f6:	6111      	str	r1, [r2, #16]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 80074f8:	6853      	ldr	r3, [r2, #4]
 80074fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074fc:	1ac9      	subs	r1, r1, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 80074fe:	4403      	add	r3, r0
 8007500:	6003      	str	r3, [r0, #0]
    node->next = next;
 8007502:	6044      	str	r4, [r0, #4]
    node->prev = prev;
 8007504:	6084      	str	r4, [r0, #8]
    node->size = size;
 8007506:	60c1      	str	r1, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8007508:	6150      	str	r0, [r2, #20]
}
 800750a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800750e:	4770      	bx	lr

08007510 <leaf_pool_init>:
{
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	4604      	mov	r4, r0
 8007514:	4608      	mov	r0, r1
 8007516:	4611      	mov	r1, r2
    mpool_create(memory, size, &leaf->_internal_mempool);
 8007518:	f104 051c 	add.w	r5, r4, #28
 800751c:	462a      	mov	r2, r5
 800751e:	f7ff ffe3 	bl	80074e8 <mpool_create>
    leaf->mempool = &leaf->_internal_mempool;
 8007522:	61a5      	str	r5, [r4, #24]
}
 8007524:	bd38      	pop	{r3, r4, r5, pc}

08007526 <mpool_alloc>:
{
 8007526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007528:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 800752a:	684a      	ldr	r2, [r1, #4]
 800752c:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800752e:	3301      	adds	r3, #1
 8007530:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8007532:	694c      	ldr	r4, [r1, #20]
 8007534:	b1ac      	cbz	r4, 8007562 <mpool_alloc+0x3c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8007536:	1dc2      	adds	r2, r0, #7
 8007538:	f022 0207 	bic.w	r2, r2, #7
    while (node_to_alloc->size < size_to_alloc)
 800753c:	68e3      	ldr	r3, [r4, #12]
 800753e:	4293      	cmp	r3, r2
 8007540:	d226      	bcs.n	8007590 <mpool_alloc+0x6a>
        node_to_alloc = node_to_alloc->next;
 8007542:	6864      	ldr	r4, [r4, #4]
        if (node_to_alloc == NULL)
 8007544:	2c00      	cmp	r4, #0
 8007546:	d1f9      	bne.n	800753c <mpool_alloc+0x16>
            if ((pool->msize - pool->usize) > asize)
 8007548:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800754c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8007550:	1a9b      	subs	r3, r3, r2
 8007552:	4283      	cmp	r3, r0
 8007554:	d916      	bls.n	8007584 <mpool_alloc+0x5e>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8007556:	2101      	movs	r1, #1
 8007558:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800755c:	f000 f902 	bl	8007764 <LEAF_internalErrorCallback>
 8007560:	e057      	b.n	8007612 <mpool_alloc+0xec>
        if ((pool->msize - pool->usize) > asize)
 8007562:	690b      	ldr	r3, [r1, #16]
 8007564:	68ca      	ldr	r2, [r1, #12]
 8007566:	1a9b      	subs	r3, r3, r2
 8007568:	4283      	cmp	r3, r0
 800756a:	d905      	bls.n	8007578 <mpool_alloc+0x52>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800756c:	2101      	movs	r1, #1
 800756e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8007572:	f000 f8f7 	bl	8007764 <LEAF_internalErrorCallback>
 8007576:	e04c      	b.n	8007612 <mpool_alloc+0xec>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8007578:	2100      	movs	r1, #0
 800757a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800757e:	f000 f8f1 	bl	8007764 <LEAF_internalErrorCallback>
        return NULL;
 8007582:	e046      	b.n	8007612 <mpool_alloc+0xec>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8007584:	2100      	movs	r1, #0
 8007586:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800758a:	f000 f8eb 	bl	8007764 <LEAF_internalErrorCallback>
            return NULL;
 800758e:	e040      	b.n	8007612 <mpool_alloc+0xec>
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8007590:	1a98      	subs	r0, r3, r2
    node_to_alloc->size = size_to_alloc;
 8007592:	60e2      	str	r2, [r4, #12]
    if (leftover > pool->leaf->header_size)
 8007594:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007598:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800759a:	4281      	cmp	r1, r0
 800759c:	d22c      	bcs.n	80075f8 <mpool_alloc+0xd2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800759e:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80075a2:	1b63      	subs	r3, r4, r5
        offset += pool->leaf->header_size + node_to_alloc->size;
 80075a4:	440a      	add	r2, r1
 80075a6:	441a      	add	r2, r3
        new_node = create_node(&pool->mpool[offset],
 80075a8:	18ab      	adds	r3, r5, r2
                               node_to_alloc->next,
 80075aa:	6867      	ldr	r7, [r4, #4]
                               node_to_alloc->prev,
 80075ac:	68a6      	ldr	r6, [r4, #8]
        new_node = create_node(&pool->mpool[offset],
 80075ae:	1a40      	subs	r0, r0, r1
    node->pool = block_location + header_size;
 80075b0:	4419      	add	r1, r3
 80075b2:	50a9      	str	r1, [r5, r2]
    node->next = next;
 80075b4:	605f      	str	r7, [r3, #4]
    node->prev = prev;
 80075b6:	609e      	str	r6, [r3, #8]
    node->size = size;
 80075b8:	60d8      	str	r0, [r3, #12]
    if (pool->head == node_to_alloc)
 80075ba:	f8dc 2014 	ldr.w	r2, [ip, #20]
 80075be:	42a2      	cmp	r2, r4
 80075c0:	d01d      	beq.n	80075fe <mpool_alloc+0xd8>
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 80075c2:	6863      	ldr	r3, [r4, #4]
 80075c4:	b10b      	cbz	r3, 80075ca <mpool_alloc+0xa4>
    {
        // Close the link
        node->next->prev = node->prev;
 80075c6:	68a2      	ldr	r2, [r4, #8]
 80075c8:	609a      	str	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 80075ca:	68a3      	ldr	r3, [r4, #8]
 80075cc:	b10b      	cbz	r3, 80075d2 <mpool_alloc+0xac>
    {
        // Close the link
        node->prev->next = node->next;
 80075ce:	6862      	ldr	r2, [r4, #4]
 80075d0:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
 80075d2:	2300      	movs	r3, #0
 80075d4:	6063      	str	r3, [r4, #4]
    node->prev = NULL;
 80075d6:	60a3      	str	r3, [r4, #8]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 80075d8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80075dc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80075de:	68e2      	ldr	r2, [r4, #12]
 80075e0:	441a      	add	r2, r3
 80075e2:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80075e6:	4413      	add	r3, r2
 80075e8:	f8cc 300c 	str.w	r3, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
 80075ec:	694b      	ldr	r3, [r1, #20]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	dd0e      	ble.n	8007610 <mpool_alloc+0xea>
        char* new_pool = (char*)node_to_alloc->pool;
 80075f2:	6821      	ldr	r1, [r4, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	e008      	b.n	800760a <mpool_alloc+0xe4>
        node_to_alloc->size += leftover;
 80075f8:	60e3      	str	r3, [r4, #12]
        new_node = node_to_alloc->next;
 80075fa:	6863      	ldr	r3, [r4, #4]
 80075fc:	e7dd      	b.n	80075ba <mpool_alloc+0x94>
        pool->head = new_node;
 80075fe:	f8cc 3014 	str.w	r3, [ip, #20]
 8007602:	e7de      	b.n	80075c2 <mpool_alloc+0x9c>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8007604:	2200      	movs	r2, #0
 8007606:	54ca      	strb	r2, [r1, r3]
 8007608:	3301      	adds	r3, #1
 800760a:	68e2      	ldr	r2, [r4, #12]
 800760c:	429a      	cmp	r2, r3
 800760e:	d8f9      	bhi.n	8007604 <mpool_alloc+0xde>
    return node_to_alloc->pool;
 8007610:	6824      	ldr	r4, [r4, #0]
}
 8007612:	4620      	mov	r0, r4
 8007614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007616 <mpool_calloc>:
{
 8007616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007618:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 800761a:	684a      	ldr	r2, [r1, #4]
 800761c:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800761e:	3301      	adds	r3, #1
 8007620:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8007622:	694c      	ldr	r4, [r1, #20]
 8007624:	b1ac      	cbz	r4, 8007652 <mpool_calloc+0x3c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8007626:	1dc2      	adds	r2, r0, #7
 8007628:	f022 0207 	bic.w	r2, r2, #7
    while (node_to_alloc->size < size_to_alloc)
 800762c:	68e3      	ldr	r3, [r4, #12]
 800762e:	4293      	cmp	r3, r2
 8007630:	d226      	bcs.n	8007680 <mpool_calloc+0x6a>
        node_to_alloc = node_to_alloc->next;
 8007632:	6864      	ldr	r4, [r4, #4]
        if (node_to_alloc == NULL)
 8007634:	2c00      	cmp	r4, #0
 8007636:	d1f9      	bne.n	800762c <mpool_calloc+0x16>
            if ((pool->msize - pool->usize) > asize)
 8007638:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800763c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8007640:	1a9b      	subs	r3, r3, r2
 8007642:	4283      	cmp	r3, r0
 8007644:	d916      	bls.n	8007674 <mpool_calloc+0x5e>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8007646:	2101      	movs	r1, #1
 8007648:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800764c:	f000 f88a 	bl	8007764 <LEAF_internalErrorCallback>
 8007650:	e053      	b.n	80076fa <mpool_calloc+0xe4>
        if ((pool->msize - pool->usize) > asize)
 8007652:	690b      	ldr	r3, [r1, #16]
 8007654:	68ca      	ldr	r2, [r1, #12]
 8007656:	1a9b      	subs	r3, r3, r2
 8007658:	4283      	cmp	r3, r0
 800765a:	d905      	bls.n	8007668 <mpool_calloc+0x52>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800765c:	2101      	movs	r1, #1
 800765e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8007662:	f000 f87f 	bl	8007764 <LEAF_internalErrorCallback>
 8007666:	e048      	b.n	80076fa <mpool_calloc+0xe4>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8007668:	2100      	movs	r1, #0
 800766a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800766e:	f000 f879 	bl	8007764 <LEAF_internalErrorCallback>
        return NULL;
 8007672:	e042      	b.n	80076fa <mpool_calloc+0xe4>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8007674:	2100      	movs	r1, #0
 8007676:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800767a:	f000 f873 	bl	8007764 <LEAF_internalErrorCallback>
            return NULL;
 800767e:	e03c      	b.n	80076fa <mpool_calloc+0xe4>
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8007680:	1a98      	subs	r0, r3, r2
    node_to_alloc->size = size_to_alloc;
 8007682:	60e2      	str	r2, [r4, #12]
    if (leftover > pool->leaf->header_size)
 8007684:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007688:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800768a:	4281      	cmp	r1, r0
 800768c:	d227      	bcs.n	80076de <mpool_calloc+0xc8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800768e:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8007692:	1b63      	subs	r3, r4, r5
        offset += pool->leaf->header_size + node_to_alloc->size;
 8007694:	440a      	add	r2, r1
 8007696:	441a      	add	r2, r3
        new_node = create_node(&pool->mpool[offset],
 8007698:	18ab      	adds	r3, r5, r2
                               node_to_alloc->next,
 800769a:	6867      	ldr	r7, [r4, #4]
                               node_to_alloc->prev,
 800769c:	68a6      	ldr	r6, [r4, #8]
        new_node = create_node(&pool->mpool[offset],
 800769e:	1a40      	subs	r0, r0, r1
    node->pool = block_location + header_size;
 80076a0:	4419      	add	r1, r3
 80076a2:	50a9      	str	r1, [r5, r2]
    node->next = next;
 80076a4:	605f      	str	r7, [r3, #4]
    node->prev = prev;
 80076a6:	609e      	str	r6, [r3, #8]
    node->size = size;
 80076a8:	60d8      	str	r0, [r3, #12]
    if (pool->head == node_to_alloc)
 80076aa:	f8dc 2014 	ldr.w	r2, [ip, #20]
 80076ae:	42a2      	cmp	r2, r4
 80076b0:	d018      	beq.n	80076e4 <mpool_calloc+0xce>
    if (node->next != NULL)
 80076b2:	6863      	ldr	r3, [r4, #4]
 80076b4:	b10b      	cbz	r3, 80076ba <mpool_calloc+0xa4>
        node->next->prev = node->prev;
 80076b6:	68a2      	ldr	r2, [r4, #8]
 80076b8:	609a      	str	r2, [r3, #8]
    if (node->prev != NULL)
 80076ba:	68a3      	ldr	r3, [r4, #8]
 80076bc:	b10b      	cbz	r3, 80076c2 <mpool_calloc+0xac>
        node->prev->next = node->next;
 80076be:	6862      	ldr	r2, [r4, #4]
 80076c0:	605a      	str	r2, [r3, #4]
    node->next = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	6063      	str	r3, [r4, #4]
    node->prev = NULL;
 80076c6:	60a3      	str	r3, [r4, #8]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 80076c8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80076cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80076ce:	68e1      	ldr	r1, [r4, #12]
 80076d0:	4411      	add	r1, r2
 80076d2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80076d6:	440a      	add	r2, r1
 80076d8:	f8cc 200c 	str.w	r2, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 80076dc:	e009      	b.n	80076f2 <mpool_calloc+0xdc>
        node_to_alloc->size += leftover;
 80076de:	60e3      	str	r3, [r4, #12]
        new_node = node_to_alloc->next;
 80076e0:	6863      	ldr	r3, [r4, #4]
 80076e2:	e7e2      	b.n	80076aa <mpool_calloc+0x94>
        pool->head = new_node;
 80076e4:	f8cc 3014 	str.w	r3, [ip, #20]
 80076e8:	e7e3      	b.n	80076b2 <mpool_calloc+0x9c>
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 80076ea:	6822      	ldr	r2, [r4, #0]
 80076ec:	2100      	movs	r1, #0
 80076ee:	54d1      	strb	r1, [r2, r3]
 80076f0:	3301      	adds	r3, #1
 80076f2:	68e2      	ldr	r2, [r4, #12]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d8f8      	bhi.n	80076ea <mpool_calloc+0xd4>
    return node_to_alloc->pool;
 80076f8:	6824      	ldr	r4, [r4, #0]
}
 80076fa:	4620      	mov	r0, r4
 80076fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076fe <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 80076fe:	4770      	bx	lr

08007700 <LEAF_init>:
{
 8007700:	b538      	push	{r3, r4, r5, lr}
 8007702:	ed2d 8b02 	vpush	{d8}
 8007706:	4604      	mov	r4, r0
 8007708:	eeb0 8a40 	vmov.f32	s16, s0
 800770c:	461d      	mov	r5, r3
    leaf->_internal_mempool.leaf = leaf;
 800770e:	6200      	str	r0, [r0, #32]
    leaf_pool_init(leaf, memory, memorysize);
 8007710:	f7ff fefe 	bl	8007510 <leaf_pool_init>
    leaf->sampleRate = sr;
 8007714:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 8007718:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800771c:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8007720:	edc4 7a01 	vstr	s15, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8007724:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800775c <LEAF_init+0x5c>
 8007728:	ee67 7a87 	vmul.f32	s15, s15, s14
 800772c:	edc4 7a03 	vstr	s15, [r4, #12]
    leaf->random = random;
 8007730:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 8007732:	2300      	movs	r3, #0
 8007734:	6163      	str	r3, [r4, #20]
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 8007736:	4a0a      	ldr	r2, [pc, #40]	; (8007760 <LEAF_init+0x60>)
 8007738:	63a2      	str	r2, [r4, #56]	; 0x38
    for (int i = 0; i < LEAFErrorNil; ++i)
 800773a:	e006      	b.n	800774a <LEAF_init+0x4a>
        leaf->errorState[i] = 0;
 800773c:	f103 020e 	add.w	r2, r3, #14
 8007740:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007744:	2100      	movs	r1, #0
 8007746:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
 8007748:	3301      	adds	r3, #1
 800774a:	2b02      	cmp	r3, #2
 800774c:	ddf6      	ble.n	800773c <LEAF_init+0x3c>
    leaf->allocCount = 0;
 800774e:	2300      	movs	r3, #0
 8007750:	64a3      	str	r3, [r4, #72]	; 0x48
    leaf->freeCount = 0;
 8007752:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8007754:	ecbd 8b02 	vpop	{d8}
 8007758:	bd38      	pop	{r3, r4, r5, pc}
 800775a:	bf00      	nop
 800775c:	40c90fdb 	.word	0x40c90fdb
 8007760:	080076ff 	.word	0x080076ff

08007764 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8007764:	b510      	push	{r4, lr}
    leaf->errorState[whichone] = 1;
 8007766:	f101 030e 	add.w	r3, r1, #14
 800776a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800776e:	2401      	movs	r4, #1
 8007770:	605c      	str	r4, [r3, #4]
    leaf->errorCallback(leaf, whichone);
 8007772:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007774:	4798      	blx	r3
}
 8007776:	bd10      	pop	{r4, pc}

08007778 <__errno>:
 8007778:	4b01      	ldr	r3, [pc, #4]	; (8007780 <__errno+0x8>)
 800777a:	6818      	ldr	r0, [r3, #0]
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	24000014 	.word	0x24000014

08007784 <__libc_init_array>:
 8007784:	b570      	push	{r4, r5, r6, lr}
 8007786:	4d0d      	ldr	r5, [pc, #52]	; (80077bc <__libc_init_array+0x38>)
 8007788:	4c0d      	ldr	r4, [pc, #52]	; (80077c0 <__libc_init_array+0x3c>)
 800778a:	1b64      	subs	r4, r4, r5
 800778c:	10a4      	asrs	r4, r4, #2
 800778e:	2600      	movs	r6, #0
 8007790:	42a6      	cmp	r6, r4
 8007792:	d109      	bne.n	80077a8 <__libc_init_array+0x24>
 8007794:	4d0b      	ldr	r5, [pc, #44]	; (80077c4 <__libc_init_array+0x40>)
 8007796:	4c0c      	ldr	r4, [pc, #48]	; (80077c8 <__libc_init_array+0x44>)
 8007798:	f001 f9d8 	bl	8008b4c <_init>
 800779c:	1b64      	subs	r4, r4, r5
 800779e:	10a4      	asrs	r4, r4, #2
 80077a0:	2600      	movs	r6, #0
 80077a2:	42a6      	cmp	r6, r4
 80077a4:	d105      	bne.n	80077b2 <__libc_init_array+0x2e>
 80077a6:	bd70      	pop	{r4, r5, r6, pc}
 80077a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077ac:	4798      	blx	r3
 80077ae:	3601      	adds	r6, #1
 80077b0:	e7ee      	b.n	8007790 <__libc_init_array+0xc>
 80077b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077b6:	4798      	blx	r3
 80077b8:	3601      	adds	r6, #1
 80077ba:	e7f2      	b.n	80077a2 <__libc_init_array+0x1e>
 80077bc:	080092e4 	.word	0x080092e4
 80077c0:	080092e4 	.word	0x080092e4
 80077c4:	080092e4 	.word	0x080092e4
 80077c8:	080092e8 	.word	0x080092e8

080077cc <memset>:
 80077cc:	4402      	add	r2, r0
 80077ce:	4603      	mov	r3, r0
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d100      	bne.n	80077d6 <memset+0xa>
 80077d4:	4770      	bx	lr
 80077d6:	f803 1b01 	strb.w	r1, [r3], #1
 80077da:	e7f9      	b.n	80077d0 <memset+0x4>

080077dc <with_errnof>:
 80077dc:	b513      	push	{r0, r1, r4, lr}
 80077de:	4604      	mov	r4, r0
 80077e0:	ed8d 0a01 	vstr	s0, [sp, #4]
 80077e4:	f7ff ffc8 	bl	8007778 <__errno>
 80077e8:	ed9d 0a01 	vldr	s0, [sp, #4]
 80077ec:	6004      	str	r4, [r0, #0]
 80077ee:	b002      	add	sp, #8
 80077f0:	bd10      	pop	{r4, pc}

080077f2 <xflowf>:
 80077f2:	b130      	cbz	r0, 8007802 <xflowf+0x10>
 80077f4:	eef1 7a40 	vneg.f32	s15, s0
 80077f8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80077fc:	2022      	movs	r0, #34	; 0x22
 80077fe:	f7ff bfed 	b.w	80077dc <with_errnof>
 8007802:	eef0 7a40 	vmov.f32	s15, s0
 8007806:	e7f7      	b.n	80077f8 <xflowf+0x6>

08007808 <__math_uflowf>:
 8007808:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007810 <__math_uflowf+0x8>
 800780c:	f7ff bff1 	b.w	80077f2 <xflowf>
 8007810:	10000000 	.word	0x10000000

08007814 <__math_may_uflowf>:
 8007814:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800781c <__math_may_uflowf+0x8>
 8007818:	f7ff bfeb 	b.w	80077f2 <xflowf>
 800781c:	1a200000 	.word	0x1a200000

08007820 <__math_oflowf>:
 8007820:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007828 <__math_oflowf+0x8>
 8007824:	f7ff bfe5 	b.w	80077f2 <xflowf>
 8007828:	70000000 	.word	0x70000000

0800782c <__math_divzerof>:
 800782c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007830:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8007834:	2800      	cmp	r0, #0
 8007836:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800783a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8007848 <__math_divzerof+0x1c>
 800783e:	2022      	movs	r0, #34	; 0x22
 8007840:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8007844:	f7ff bfca 	b.w	80077dc <with_errnof>
 8007848:	00000000 	.word	0x00000000

0800784c <__math_invalidf>:
 800784c:	eef0 7a40 	vmov.f32	s15, s0
 8007850:	ee30 7a40 	vsub.f32	s14, s0, s0
 8007854:	eef4 7a67 	vcmp.f32	s15, s15
 8007858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800785c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8007860:	d602      	bvs.n	8007868 <__math_invalidf+0x1c>
 8007862:	2021      	movs	r0, #33	; 0x21
 8007864:	f7ff bfba 	b.w	80077dc <with_errnof>
 8007868:	4770      	bx	lr

0800786a <fabsf>:
 800786a:	ee10 3a10 	vmov	r3, s0
 800786e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007872:	ee00 3a10 	vmov	s0, r3
 8007876:	4770      	bx	lr

08007878 <logf>:
 8007878:	ee10 3a10 	vmov	r3, s0
 800787c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007880:	b410      	push	{r4}
 8007882:	d055      	beq.n	8007930 <logf+0xb8>
 8007884:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8007888:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800788c:	d31a      	bcc.n	80078c4 <logf+0x4c>
 800788e:	005a      	lsls	r2, r3, #1
 8007890:	d104      	bne.n	800789c <logf+0x24>
 8007892:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007896:	2001      	movs	r0, #1
 8007898:	f7ff bfc8 	b.w	800782c <__math_divzerof>
 800789c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80078a0:	d043      	beq.n	800792a <logf+0xb2>
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	db02      	blt.n	80078ac <logf+0x34>
 80078a6:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80078aa:	d303      	bcc.n	80078b4 <logf+0x3c>
 80078ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078b0:	f7ff bfcc 	b.w	800784c <__math_invalidf>
 80078b4:	eddf 7a20 	vldr	s15, [pc, #128]	; 8007938 <logf+0xc0>
 80078b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80078bc:	ee10 3a10 	vmov	r3, s0
 80078c0:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 80078c4:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 80078c8:	491c      	ldr	r1, [pc, #112]	; (800793c <logf+0xc4>)
 80078ca:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 80078ce:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80078d2:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 80078d6:	0dd4      	lsrs	r4, r2, #23
 80078d8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80078dc:	05e4      	lsls	r4, r4, #23
 80078de:	ed90 6b00 	vldr	d6, [r0]
 80078e2:	1b1b      	subs	r3, r3, r4
 80078e4:	ee07 3a90 	vmov	s15, r3
 80078e8:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 80078ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80078f0:	15d2      	asrs	r2, r2, #23
 80078f2:	eea6 0b07 	vfma.f64	d0, d6, d7
 80078f6:	ed90 6b02 	vldr	d6, [r0, #8]
 80078fa:	ee20 4b00 	vmul.f64	d4, d0, d0
 80078fe:	ee07 2a90 	vmov	s15, r2
 8007902:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007906:	eea7 6b05 	vfma.f64	d6, d7, d5
 800790a:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 800790e:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8007912:	eea5 7b00 	vfma.f64	d7, d5, d0
 8007916:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800791a:	ee30 0b06 	vadd.f64	d0, d0, d6
 800791e:	eea5 7b04 	vfma.f64	d7, d5, d4
 8007922:	eea4 0b07 	vfma.f64	d0, d4, d7
 8007926:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800792a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8007940 <logf+0xc8>
 8007934:	e7f9      	b.n	800792a <logf+0xb2>
 8007936:	bf00      	nop
 8007938:	4b000000 	.word	0x4b000000
 800793c:	08008cc8 	.word	0x08008cc8
 8007940:	00000000 	.word	0x00000000

08007944 <checkint>:
 8007944:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007948:	2b7e      	cmp	r3, #126	; 0x7e
 800794a:	dd10      	ble.n	800796e <checkint+0x2a>
 800794c:	2b96      	cmp	r3, #150	; 0x96
 800794e:	dc0c      	bgt.n	800796a <checkint+0x26>
 8007950:	2201      	movs	r2, #1
 8007952:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007956:	fa02 f303 	lsl.w	r3, r2, r3
 800795a:	1e5a      	subs	r2, r3, #1
 800795c:	4202      	tst	r2, r0
 800795e:	d106      	bne.n	800796e <checkint+0x2a>
 8007960:	4203      	tst	r3, r0
 8007962:	bf0c      	ite	eq
 8007964:	2002      	moveq	r0, #2
 8007966:	2001      	movne	r0, #1
 8007968:	4770      	bx	lr
 800796a:	2002      	movs	r0, #2
 800796c:	4770      	bx	lr
 800796e:	2000      	movs	r0, #0
 8007970:	4770      	bx	lr
 8007972:	0000      	movs	r0, r0
 8007974:	0000      	movs	r0, r0
	...

08007978 <powf>:
 8007978:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800797a:	ee10 1a10 	vmov	r1, s0
 800797e:	ee10 4a90 	vmov	r4, s1
 8007982:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8007986:	0062      	lsls	r2, r4, #1
 8007988:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800798c:	eef0 7a40 	vmov.f32	s15, s0
 8007990:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8007994:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8007998:	d252      	bcs.n	8007a40 <powf+0xc8>
 800799a:	4298      	cmp	r0, r3
 800799c:	d252      	bcs.n	8007a44 <powf+0xcc>
 800799e:	2000      	movs	r0, #0
 80079a0:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 80079a4:	4ca0      	ldr	r4, [pc, #640]	; (8007c28 <powf+0x2b0>)
 80079a6:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 80079aa:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80079ae:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 80079b2:	0dd2      	lsrs	r2, r2, #23
 80079b4:	05d2      	lsls	r2, r2, #23
 80079b6:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 80079ba:	1a8b      	subs	r3, r1, r2
 80079bc:	ed95 6b00 	vldr	d6, [r5]
 80079c0:	ee07 3a90 	vmov	s15, r3
 80079c4:	15d2      	asrs	r2, r2, #23
 80079c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80079ca:	eea6 5b07 	vfma.f64	d5, d6, d7
 80079ce:	ed95 6b02 	vldr	d6, [r5, #8]
 80079d2:	ee25 2b05 	vmul.f64	d2, d5, d5
 80079d6:	ee22 1b02 	vmul.f64	d1, d2, d2
 80079da:	ee07 2a90 	vmov	s15, r2
 80079de:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 80079e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80079e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80079ea:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 80079ee:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 80079f2:	eea5 3b06 	vfma.f64	d3, d5, d6
 80079f6:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 80079fa:	eea5 6b04 	vfma.f64	d6, d5, d4
 80079fe:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 8007a02:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8007a06:	eea5 7b04 	vfma.f64	d7, d5, d4
 8007a0a:	eea2 7b06 	vfma.f64	d7, d2, d6
 8007a0e:	eea3 7b01 	vfma.f64	d7, d3, d1
 8007a12:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007a16:	ee10 3a90 	vmov	r3, s1
 8007a1a:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8007a1e:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8007a22:	429a      	cmp	r2, r3
 8007a24:	f0c0 80b1 	bcc.w	8007b8a <powf+0x212>
 8007a28:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8007c08 <powf+0x290>
 8007a2c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a34:	dd79      	ble.n	8007b2a <powf+0x1b2>
 8007a36:	b003      	add	sp, #12
 8007a38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a3c:	f7ff bef0 	b.w	8007820 <__math_oflowf>
 8007a40:	4298      	cmp	r0, r3
 8007a42:	d32d      	bcc.n	8007aa0 <powf+0x128>
 8007a44:	b952      	cbnz	r2, 8007a5c <powf+0xe4>
 8007a46:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8007a4a:	005b      	lsls	r3, r3, #1
 8007a4c:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8007a50:	f240 80c9 	bls.w	8007be6 <powf+0x26e>
 8007a54:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8007a58:	b003      	add	sp, #12
 8007a5a:	bd30      	pop	{r4, r5, pc}
 8007a5c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8007a60:	d105      	bne.n	8007a6e <powf+0xf6>
 8007a62:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8007a66:	0064      	lsls	r4, r4, #1
 8007a68:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8007a6c:	e7f0      	b.n	8007a50 <powf+0xd8>
 8007a6e:	004b      	lsls	r3, r1, #1
 8007a70:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8007a74:	d8ee      	bhi.n	8007a54 <powf+0xdc>
 8007a76:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8007a7a:	d1eb      	bne.n	8007a54 <powf+0xdc>
 8007a7c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8007a80:	f000 80b1 	beq.w	8007be6 <powf+0x26e>
 8007a84:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8007a88:	ea6f 0404 	mvn.w	r4, r4
 8007a8c:	bf34      	ite	cc
 8007a8e:	2300      	movcc	r3, #0
 8007a90:	2301      	movcs	r3, #1
 8007a92:	0fe4      	lsrs	r4, r4, #31
 8007a94:	42a3      	cmp	r3, r4
 8007a96:	f040 80a9 	bne.w	8007bec <powf+0x274>
 8007a9a:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8007a9e:	e7db      	b.n	8007a58 <powf+0xe0>
 8007aa0:	004d      	lsls	r5, r1, #1
 8007aa2:	1e6a      	subs	r2, r5, #1
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d31c      	bcc.n	8007ae2 <powf+0x16a>
 8007aa8:	2900      	cmp	r1, #0
 8007aaa:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007aae:	da0f      	bge.n	8007ad0 <powf+0x158>
 8007ab0:	ee10 0a90 	vmov	r0, s1
 8007ab4:	f7ff ff46 	bl	8007944 <checkint>
 8007ab8:	2801      	cmp	r0, #1
 8007aba:	d109      	bne.n	8007ad0 <powf+0x158>
 8007abc:	eeb1 0a40 	vneg.f32	s0, s0
 8007ac0:	b945      	cbnz	r5, 8007ad4 <powf+0x15c>
 8007ac2:	2c00      	cmp	r4, #0
 8007ac4:	dac8      	bge.n	8007a58 <powf+0xe0>
 8007ac6:	b003      	add	sp, #12
 8007ac8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007acc:	f7ff beae 	b.w	800782c <__math_divzerof>
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	e7f5      	b.n	8007ac0 <powf+0x148>
 8007ad4:	2c00      	cmp	r4, #0
 8007ad6:	dabf      	bge.n	8007a58 <powf+0xe0>
 8007ad8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007adc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8007ae0:	e7ba      	b.n	8007a58 <powf+0xe0>
 8007ae2:	2900      	cmp	r1, #0
 8007ae4:	da1f      	bge.n	8007b26 <powf+0x1ae>
 8007ae6:	ee10 0a90 	vmov	r0, s1
 8007aea:	f7ff ff2b 	bl	8007944 <checkint>
 8007aee:	b920      	cbnz	r0, 8007afa <powf+0x182>
 8007af0:	b003      	add	sp, #12
 8007af2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007af6:	f7ff bea9 	b.w	800784c <__math_invalidf>
 8007afa:	2801      	cmp	r0, #1
 8007afc:	bf14      	ite	ne
 8007afe:	2000      	movne	r0, #0
 8007b00:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8007b04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007b08:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8007b0c:	f4bf af48 	bcs.w	80079a0 <powf+0x28>
 8007b10:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8007c2c <powf+0x2b4>
 8007b14:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007b18:	ee10 3a10 	vmov	r3, s0
 8007b1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b20:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8007b24:	e73c      	b.n	80079a0 <powf+0x28>
 8007b26:	2000      	movs	r0, #0
 8007b28:	e7ee      	b.n	8007b08 <powf+0x190>
 8007b2a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8007c10 <powf+0x298>
 8007b2e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b36:	dd10      	ble.n	8007b5a <powf+0x1e2>
 8007b38:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d158      	bne.n	8007bf2 <powf+0x27a>
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	eddd 7a00 	vldr	s15, [sp]
 8007b46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b4e:	eef4 7a47 	vcmp.f32	s15, s14
 8007b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b56:	f47f af6e 	bne.w	8007a36 <powf+0xbe>
 8007b5a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007c18 <powf+0x2a0>
 8007b5e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b66:	d804      	bhi.n	8007b72 <powf+0x1fa>
 8007b68:	b003      	add	sp, #12
 8007b6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b6e:	f7ff be4b 	b.w	8007808 <__math_uflowf>
 8007b72:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8007c20 <powf+0x2a8>
 8007b76:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b7e:	d504      	bpl.n	8007b8a <powf+0x212>
 8007b80:	b003      	add	sp, #12
 8007b82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b86:	f7ff be45 	b.w	8007814 <__math_may_uflowf>
 8007b8a:	4b29      	ldr	r3, [pc, #164]	; (8007c30 <powf+0x2b8>)
 8007b8c:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8007b90:	ee30 6b07 	vadd.f64	d6, d0, d7
 8007b94:	ee16 2a10 	vmov	r2, s12
 8007b98:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007b9c:	f002 011f 	and.w	r1, r2, #31
 8007ba0:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8007ba4:	ee30 7b47 	vsub.f64	d7, d0, d7
 8007ba8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8007bac:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8007bb0:	ee27 4b07 	vmul.f64	d4, d7, d7
 8007bb4:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8007bb8:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8007bbc:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007bc0:	686d      	ldr	r5, [r5, #4]
 8007bc2:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 8007bc6:	1882      	adds	r2, r0, r2
 8007bc8:	2300      	movs	r3, #0
 8007bca:	1918      	adds	r0, r3, r4
 8007bcc:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8007bd0:	eea7 0b05 	vfma.f64	d0, d7, d5
 8007bd4:	ec41 0b17 	vmov	d7, r0, r1
 8007bd8:	eea6 0b04 	vfma.f64	d0, d6, d4
 8007bdc:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007be0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007be4:	e738      	b.n	8007a58 <powf+0xe0>
 8007be6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007bea:	e735      	b.n	8007a58 <powf+0xe0>
 8007bec:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8007c34 <powf+0x2bc>
 8007bf0:	e732      	b.n	8007a58 <powf+0xe0>
 8007bf2:	9301      	str	r3, [sp, #4]
 8007bf4:	eddd 7a01 	vldr	s15, [sp, #4]
 8007bf8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c00:	e7a5      	b.n	8007b4e <powf+0x1d6>
 8007c02:	bf00      	nop
 8007c04:	f3af 8000 	nop.w
 8007c08:	ffd1d571 	.word	0xffd1d571
 8007c0c:	405fffff 	.word	0x405fffff
 8007c10:	ffa3aae2 	.word	0xffa3aae2
 8007c14:	405fffff 	.word	0x405fffff
 8007c18:	00000000 	.word	0x00000000
 8007c1c:	c062c000 	.word	0xc062c000
 8007c20:	00000000 	.word	0x00000000
 8007c24:	c062a000 	.word	0xc062a000
 8007c28:	08008de8 	.word	0x08008de8
 8007c2c:	4b000000 	.word	0x4b000000
 8007c30:	08008b80 	.word	0x08008b80
 8007c34:	00000000 	.word	0x00000000

08007c38 <tanf>:
 8007c38:	ee10 3a10 	vmov	r3, s0
 8007c3c:	b507      	push	{r0, r1, r2, lr}
 8007c3e:	4a12      	ldr	r2, [pc, #72]	; (8007c88 <tanf+0x50>)
 8007c40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c44:	4293      	cmp	r3, r2
 8007c46:	dc07      	bgt.n	8007c58 <tanf+0x20>
 8007c48:	eddf 0a10 	vldr	s1, [pc, #64]	; 8007c8c <tanf+0x54>
 8007c4c:	2001      	movs	r0, #1
 8007c4e:	b003      	add	sp, #12
 8007c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c54:	f000 bcc8 	b.w	80085e8 <__kernel_tanf>
 8007c58:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007c5c:	db04      	blt.n	8007c68 <tanf+0x30>
 8007c5e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007c62:	b003      	add	sp, #12
 8007c64:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c68:	4668      	mov	r0, sp
 8007c6a:	f000 f907 	bl	8007e7c <__ieee754_rem_pio2f>
 8007c6e:	0040      	lsls	r0, r0, #1
 8007c70:	f000 0002 	and.w	r0, r0, #2
 8007c74:	eddd 0a01 	vldr	s1, [sp, #4]
 8007c78:	ed9d 0a00 	vldr	s0, [sp]
 8007c7c:	f1c0 0001 	rsb	r0, r0, #1
 8007c80:	f000 fcb2 	bl	80085e8 <__kernel_tanf>
 8007c84:	e7ed      	b.n	8007c62 <tanf+0x2a>
 8007c86:	bf00      	nop
 8007c88:	3f490fda 	.word	0x3f490fda
 8007c8c:	00000000 	.word	0x00000000

08007c90 <tanhf>:
 8007c90:	b510      	push	{r4, lr}
 8007c92:	ee10 4a10 	vmov	r4, s0
 8007c96:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007c9a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007c9e:	ed2d 8b02 	vpush	{d8}
 8007ca2:	eeb0 7a40 	vmov.f32	s14, s0
 8007ca6:	db0c      	blt.n	8007cc2 <tanhf+0x32>
 8007ca8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007cac:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8007cb0:	2c00      	cmp	r4, #0
 8007cb2:	bfac      	ite	ge
 8007cb4:	ee37 0a80 	vaddge.f32	s0, s15, s0
 8007cb8:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 8007cbc:	ecbd 8b02 	vpop	{d8}
 8007cc0:	bd10      	pop	{r4, pc}
 8007cc2:	4a1b      	ldr	r2, [pc, #108]	; (8007d30 <tanhf+0xa0>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	dc30      	bgt.n	8007d2a <tanhf+0x9a>
 8007cc8:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8007ccc:	da06      	bge.n	8007cdc <tanhf+0x4c>
 8007cce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007cd2:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007cd6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007cda:	e7ef      	b.n	8007cbc <tanhf+0x2c>
 8007cdc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007ce0:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8007ce4:	db12      	blt.n	8007d0c <tanhf+0x7c>
 8007ce6:	f7ff fdc0 	bl	800786a <fabsf>
 8007cea:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007cee:	f000 fd5b 	bl	80087a8 <expm1f>
 8007cf2:	ee30 0a08 	vadd.f32	s0, s0, s16
 8007cf6:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8007cfa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007cfe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007d02:	2c00      	cmp	r4, #0
 8007d04:	bfb8      	it	lt
 8007d06:	eeb1 0a40 	vneglt.f32	s0, s0
 8007d0a:	e7d7      	b.n	8007cbc <tanhf+0x2c>
 8007d0c:	f7ff fdad 	bl	800786a <fabsf>
 8007d10:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8007d14:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007d18:	f000 fd46 	bl	80087a8 <expm1f>
 8007d1c:	ee70 7a08 	vadd.f32	s15, s0, s16
 8007d20:	eeb1 7a40 	vneg.f32	s14, s0
 8007d24:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8007d28:	e7eb      	b.n	8007d02 <tanhf+0x72>
 8007d2a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007d2e:	e7e8      	b.n	8007d02 <tanhf+0x72>
 8007d30:	41afffff 	.word	0x41afffff

08007d34 <log10f>:
 8007d34:	b508      	push	{r3, lr}
 8007d36:	ed2d 8b02 	vpush	{d8}
 8007d3a:	eeb0 8a40 	vmov.f32	s16, s0
 8007d3e:	f000 f845 	bl	8007dcc <__ieee754_log10f>
 8007d42:	eeb4 8a48 	vcmp.f32	s16, s16
 8007d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d4a:	d60f      	bvs.n	8007d6c <log10f+0x38>
 8007d4c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d54:	d80a      	bhi.n	8007d6c <log10f+0x38>
 8007d56:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d5e:	d108      	bne.n	8007d72 <log10f+0x3e>
 8007d60:	f7ff fd0a 	bl	8007778 <__errno>
 8007d64:	2322      	movs	r3, #34	; 0x22
 8007d66:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8007d88 <log10f+0x54>
 8007d6a:	6003      	str	r3, [r0, #0]
 8007d6c:	ecbd 8b02 	vpop	{d8}
 8007d70:	bd08      	pop	{r3, pc}
 8007d72:	f7ff fd01 	bl	8007778 <__errno>
 8007d76:	ecbd 8b02 	vpop	{d8}
 8007d7a:	2321      	movs	r3, #33	; 0x21
 8007d7c:	6003      	str	r3, [r0, #0]
 8007d7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007d82:	4802      	ldr	r0, [pc, #8]	; (8007d8c <log10f+0x58>)
 8007d84:	f000 be6c 	b.w	8008a60 <nanf>
 8007d88:	ff800000 	.word	0xff800000
 8007d8c:	08008f10 	.word	0x08008f10

08007d90 <sqrtf>:
 8007d90:	b508      	push	{r3, lr}
 8007d92:	ed2d 8b02 	vpush	{d8}
 8007d96:	eeb0 8a40 	vmov.f32	s16, s0
 8007d9a:	f000 f9ab 	bl	80080f4 <__ieee754_sqrtf>
 8007d9e:	eeb4 8a48 	vcmp.f32	s16, s16
 8007da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007da6:	d60c      	bvs.n	8007dc2 <sqrtf+0x32>
 8007da8:	eddf 8a07 	vldr	s17, [pc, #28]	; 8007dc8 <sqrtf+0x38>
 8007dac:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007db4:	d505      	bpl.n	8007dc2 <sqrtf+0x32>
 8007db6:	f7ff fcdf 	bl	8007778 <__errno>
 8007dba:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007dbe:	2321      	movs	r3, #33	; 0x21
 8007dc0:	6003      	str	r3, [r0, #0]
 8007dc2:	ecbd 8b02 	vpop	{d8}
 8007dc6:	bd08      	pop	{r3, pc}
 8007dc8:	00000000 	.word	0x00000000

08007dcc <__ieee754_log10f>:
 8007dcc:	b508      	push	{r3, lr}
 8007dce:	ee10 2a10 	vmov	r2, s0
 8007dd2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8007dd6:	ed2d 8b02 	vpush	{d8}
 8007dda:	d108      	bne.n	8007dee <__ieee754_log10f+0x22>
 8007ddc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007e64 <__ieee754_log10f+0x98>
 8007de0:	eddf 7a21 	vldr	s15, [pc, #132]	; 8007e68 <__ieee754_log10f+0x9c>
 8007de4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8007de8:	ecbd 8b02 	vpop	{d8}
 8007dec:	bd08      	pop	{r3, pc}
 8007dee:	2a00      	cmp	r2, #0
 8007df0:	da02      	bge.n	8007df8 <__ieee754_log10f+0x2c>
 8007df2:	ee30 7a40 	vsub.f32	s14, s0, s0
 8007df6:	e7f3      	b.n	8007de0 <__ieee754_log10f+0x14>
 8007df8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007dfc:	db02      	blt.n	8007e04 <__ieee754_log10f+0x38>
 8007dfe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007e02:	e7f1      	b.n	8007de8 <__ieee754_log10f+0x1c>
 8007e04:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8007e08:	bfbf      	itttt	lt
 8007e0a:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8007e6c <__ieee754_log10f+0xa0>
 8007e0e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8007e12:	f06f 0118 	mvnlt.w	r1, #24
 8007e16:	ee17 2a90 	vmovlt	r2, s15
 8007e1a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8007e1e:	bfa8      	it	ge
 8007e20:	2100      	movge	r1, #0
 8007e22:	3b7f      	subs	r3, #127	; 0x7f
 8007e24:	440b      	add	r3, r1
 8007e26:	0fd9      	lsrs	r1, r3, #31
 8007e28:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8007e2c:	ee07 3a90 	vmov	s15, r3
 8007e30:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8007e34:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8007e38:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007e3c:	ee00 3a10 	vmov	s0, r3
 8007e40:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8007e44:	f7ff fd18 	bl	8007878 <logf>
 8007e48:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007e70 <__ieee754_log10f+0xa4>
 8007e4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007e50:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007e74 <__ieee754_log10f+0xa8>
 8007e54:	eea8 0a27 	vfma.f32	s0, s16, s15
 8007e58:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007e78 <__ieee754_log10f+0xac>
 8007e5c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8007e60:	e7c2      	b.n	8007de8 <__ieee754_log10f+0x1c>
 8007e62:	bf00      	nop
 8007e64:	cc000000 	.word	0xcc000000
 8007e68:	00000000 	.word	0x00000000
 8007e6c:	4c000000 	.word	0x4c000000
 8007e70:	3ede5bd9 	.word	0x3ede5bd9
 8007e74:	355427db 	.word	0x355427db
 8007e78:	3e9a2080 	.word	0x3e9a2080

08007e7c <__ieee754_rem_pio2f>:
 8007e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e7e:	ee10 6a10 	vmov	r6, s0
 8007e82:	4b8e      	ldr	r3, [pc, #568]	; (80080bc <__ieee754_rem_pio2f+0x240>)
 8007e84:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007e88:	429d      	cmp	r5, r3
 8007e8a:	b087      	sub	sp, #28
 8007e8c:	eef0 7a40 	vmov.f32	s15, s0
 8007e90:	4604      	mov	r4, r0
 8007e92:	dc05      	bgt.n	8007ea0 <__ieee754_rem_pio2f+0x24>
 8007e94:	2300      	movs	r3, #0
 8007e96:	ed80 0a00 	vstr	s0, [r0]
 8007e9a:	6043      	str	r3, [r0, #4]
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	e01a      	b.n	8007ed6 <__ieee754_rem_pio2f+0x5a>
 8007ea0:	4b87      	ldr	r3, [pc, #540]	; (80080c0 <__ieee754_rem_pio2f+0x244>)
 8007ea2:	429d      	cmp	r5, r3
 8007ea4:	dc46      	bgt.n	8007f34 <__ieee754_rem_pio2f+0xb8>
 8007ea6:	2e00      	cmp	r6, #0
 8007ea8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80080c4 <__ieee754_rem_pio2f+0x248>
 8007eac:	4b86      	ldr	r3, [pc, #536]	; (80080c8 <__ieee754_rem_pio2f+0x24c>)
 8007eae:	f025 050f 	bic.w	r5, r5, #15
 8007eb2:	dd1f      	ble.n	8007ef4 <__ieee754_rem_pio2f+0x78>
 8007eb4:	429d      	cmp	r5, r3
 8007eb6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007eba:	d00e      	beq.n	8007eda <__ieee754_rem_pio2f+0x5e>
 8007ebc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80080cc <__ieee754_rem_pio2f+0x250>
 8007ec0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007ec4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007ec8:	ed80 0a00 	vstr	s0, [r0]
 8007ecc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ed0:	2001      	movs	r0, #1
 8007ed2:	edc4 7a01 	vstr	s15, [r4, #4]
 8007ed6:	b007      	add	sp, #28
 8007ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eda:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80080d0 <__ieee754_rem_pio2f+0x254>
 8007ede:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80080d4 <__ieee754_rem_pio2f+0x258>
 8007ee2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007ee6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007eea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007eee:	edc0 6a00 	vstr	s13, [r0]
 8007ef2:	e7eb      	b.n	8007ecc <__ieee754_rem_pio2f+0x50>
 8007ef4:	429d      	cmp	r5, r3
 8007ef6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007efa:	d00e      	beq.n	8007f1a <__ieee754_rem_pio2f+0x9e>
 8007efc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80080cc <__ieee754_rem_pio2f+0x250>
 8007f00:	ee37 0a87 	vadd.f32	s0, s15, s14
 8007f04:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007f08:	ed80 0a00 	vstr	s0, [r0]
 8007f0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f14:	edc4 7a01 	vstr	s15, [r4, #4]
 8007f18:	e7dd      	b.n	8007ed6 <__ieee754_rem_pio2f+0x5a>
 8007f1a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80080d0 <__ieee754_rem_pio2f+0x254>
 8007f1e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80080d4 <__ieee754_rem_pio2f+0x258>
 8007f22:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007f26:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007f2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f2e:	edc0 6a00 	vstr	s13, [r0]
 8007f32:	e7eb      	b.n	8007f0c <__ieee754_rem_pio2f+0x90>
 8007f34:	4b68      	ldr	r3, [pc, #416]	; (80080d8 <__ieee754_rem_pio2f+0x25c>)
 8007f36:	429d      	cmp	r5, r3
 8007f38:	dc72      	bgt.n	8008020 <__ieee754_rem_pio2f+0x1a4>
 8007f3a:	f7ff fc96 	bl	800786a <fabsf>
 8007f3e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80080dc <__ieee754_rem_pio2f+0x260>
 8007f42:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007f46:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007f4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007f52:	ee17 0a90 	vmov	r0, s15
 8007f56:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80080c4 <__ieee754_rem_pio2f+0x248>
 8007f5a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007f5e:	281f      	cmp	r0, #31
 8007f60:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80080cc <__ieee754_rem_pio2f+0x250>
 8007f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f68:	eeb1 6a47 	vneg.f32	s12, s14
 8007f6c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007f70:	ee16 2a90 	vmov	r2, s13
 8007f74:	dc1c      	bgt.n	8007fb0 <__ieee754_rem_pio2f+0x134>
 8007f76:	495a      	ldr	r1, [pc, #360]	; (80080e0 <__ieee754_rem_pio2f+0x264>)
 8007f78:	1e47      	subs	r7, r0, #1
 8007f7a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8007f7e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007f82:	428b      	cmp	r3, r1
 8007f84:	d014      	beq.n	8007fb0 <__ieee754_rem_pio2f+0x134>
 8007f86:	6022      	str	r2, [r4, #0]
 8007f88:	ed94 7a00 	vldr	s14, [r4]
 8007f8c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007f90:	2e00      	cmp	r6, #0
 8007f92:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007f96:	ed84 0a01 	vstr	s0, [r4, #4]
 8007f9a:	da9c      	bge.n	8007ed6 <__ieee754_rem_pio2f+0x5a>
 8007f9c:	eeb1 7a47 	vneg.f32	s14, s14
 8007fa0:	eeb1 0a40 	vneg.f32	s0, s0
 8007fa4:	ed84 7a00 	vstr	s14, [r4]
 8007fa8:	ed84 0a01 	vstr	s0, [r4, #4]
 8007fac:	4240      	negs	r0, r0
 8007fae:	e792      	b.n	8007ed6 <__ieee754_rem_pio2f+0x5a>
 8007fb0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007fb4:	15eb      	asrs	r3, r5, #23
 8007fb6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8007fba:	2d08      	cmp	r5, #8
 8007fbc:	dde3      	ble.n	8007f86 <__ieee754_rem_pio2f+0x10a>
 8007fbe:	eddf 7a44 	vldr	s15, [pc, #272]	; 80080d0 <__ieee754_rem_pio2f+0x254>
 8007fc2:	eddf 5a44 	vldr	s11, [pc, #272]	; 80080d4 <__ieee754_rem_pio2f+0x258>
 8007fc6:	eef0 6a40 	vmov.f32	s13, s0
 8007fca:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007fce:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007fd2:	eea6 0a27 	vfma.f32	s0, s12, s15
 8007fd6:	eef0 7a40 	vmov.f32	s15, s0
 8007fda:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8007fde:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8007fe2:	ee15 2a90 	vmov	r2, s11
 8007fe6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007fea:	1a5b      	subs	r3, r3, r1
 8007fec:	2b19      	cmp	r3, #25
 8007fee:	dc04      	bgt.n	8007ffa <__ieee754_rem_pio2f+0x17e>
 8007ff0:	edc4 5a00 	vstr	s11, [r4]
 8007ff4:	eeb0 0a66 	vmov.f32	s0, s13
 8007ff8:	e7c6      	b.n	8007f88 <__ieee754_rem_pio2f+0x10c>
 8007ffa:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80080e4 <__ieee754_rem_pio2f+0x268>
 8007ffe:	eeb0 0a66 	vmov.f32	s0, s13
 8008002:	eea6 0a25 	vfma.f32	s0, s12, s11
 8008006:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800800a:	eddf 6a37 	vldr	s13, [pc, #220]	; 80080e8 <__ieee754_rem_pio2f+0x26c>
 800800e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008012:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8008016:	ee30 7a67 	vsub.f32	s14, s0, s15
 800801a:	ed84 7a00 	vstr	s14, [r4]
 800801e:	e7b3      	b.n	8007f88 <__ieee754_rem_pio2f+0x10c>
 8008020:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008024:	db06      	blt.n	8008034 <__ieee754_rem_pio2f+0x1b8>
 8008026:	ee70 7a40 	vsub.f32	s15, s0, s0
 800802a:	edc0 7a01 	vstr	s15, [r0, #4]
 800802e:	edc0 7a00 	vstr	s15, [r0]
 8008032:	e733      	b.n	8007e9c <__ieee754_rem_pio2f+0x20>
 8008034:	15ea      	asrs	r2, r5, #23
 8008036:	3a86      	subs	r2, #134	; 0x86
 8008038:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800803c:	ee07 3a90 	vmov	s15, r3
 8008040:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008044:	eddf 6a29 	vldr	s13, [pc, #164]	; 80080ec <__ieee754_rem_pio2f+0x270>
 8008048:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800804c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008050:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008054:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008058:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800805c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008060:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008064:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008068:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800806c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008074:	edcd 7a05 	vstr	s15, [sp, #20]
 8008078:	d11e      	bne.n	80080b8 <__ieee754_rem_pio2f+0x23c>
 800807a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800807e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008082:	bf14      	ite	ne
 8008084:	2302      	movne	r3, #2
 8008086:	2301      	moveq	r3, #1
 8008088:	4919      	ldr	r1, [pc, #100]	; (80080f0 <__ieee754_rem_pio2f+0x274>)
 800808a:	9101      	str	r1, [sp, #4]
 800808c:	2102      	movs	r1, #2
 800808e:	9100      	str	r1, [sp, #0]
 8008090:	a803      	add	r0, sp, #12
 8008092:	4621      	mov	r1, r4
 8008094:	f000 f832 	bl	80080fc <__kernel_rem_pio2f>
 8008098:	2e00      	cmp	r6, #0
 800809a:	f6bf af1c 	bge.w	8007ed6 <__ieee754_rem_pio2f+0x5a>
 800809e:	edd4 7a00 	vldr	s15, [r4]
 80080a2:	eef1 7a67 	vneg.f32	s15, s15
 80080a6:	edc4 7a00 	vstr	s15, [r4]
 80080aa:	edd4 7a01 	vldr	s15, [r4, #4]
 80080ae:	eef1 7a67 	vneg.f32	s15, s15
 80080b2:	edc4 7a01 	vstr	s15, [r4, #4]
 80080b6:	e779      	b.n	8007fac <__ieee754_rem_pio2f+0x130>
 80080b8:	2303      	movs	r3, #3
 80080ba:	e7e5      	b.n	8008088 <__ieee754_rem_pio2f+0x20c>
 80080bc:	3f490fd8 	.word	0x3f490fd8
 80080c0:	4016cbe3 	.word	0x4016cbe3
 80080c4:	3fc90f80 	.word	0x3fc90f80
 80080c8:	3fc90fd0 	.word	0x3fc90fd0
 80080cc:	37354443 	.word	0x37354443
 80080d0:	37354400 	.word	0x37354400
 80080d4:	2e85a308 	.word	0x2e85a308
 80080d8:	43490f80 	.word	0x43490f80
 80080dc:	3f22f984 	.word	0x3f22f984
 80080e0:	08008f14 	.word	0x08008f14
 80080e4:	2e85a300 	.word	0x2e85a300
 80080e8:	248d3132 	.word	0x248d3132
 80080ec:	43800000 	.word	0x43800000
 80080f0:	08008f94 	.word	0x08008f94

080080f4 <__ieee754_sqrtf>:
 80080f4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80080f8:	4770      	bx	lr
	...

080080fc <__kernel_rem_pio2f>:
 80080fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008100:	ed2d 8b04 	vpush	{d8-d9}
 8008104:	b0d9      	sub	sp, #356	; 0x164
 8008106:	4688      	mov	r8, r1
 8008108:	9002      	str	r0, [sp, #8]
 800810a:	49bb      	ldr	r1, [pc, #748]	; (80083f8 <__kernel_rem_pio2f+0x2fc>)
 800810c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800810e:	9301      	str	r3, [sp, #4]
 8008110:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8008114:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8008118:	1e59      	subs	r1, r3, #1
 800811a:	1d13      	adds	r3, r2, #4
 800811c:	db27      	blt.n	800816e <__kernel_rem_pio2f+0x72>
 800811e:	f1b2 0b03 	subs.w	fp, r2, #3
 8008122:	bf48      	it	mi
 8008124:	f102 0b04 	addmi.w	fp, r2, #4
 8008128:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800812c:	1c45      	adds	r5, r0, #1
 800812e:	00ec      	lsls	r4, r5, #3
 8008130:	1a47      	subs	r7, r0, r1
 8008132:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8008408 <__kernel_rem_pio2f+0x30c>
 8008136:	9403      	str	r4, [sp, #12]
 8008138:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800813c:	eb0a 0c01 	add.w	ip, sl, r1
 8008140:	ae1c      	add	r6, sp, #112	; 0x70
 8008142:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8008146:	2400      	movs	r4, #0
 8008148:	4564      	cmp	r4, ip
 800814a:	dd12      	ble.n	8008172 <__kernel_rem_pio2f+0x76>
 800814c:	9b01      	ldr	r3, [sp, #4]
 800814e:	ac1c      	add	r4, sp, #112	; 0x70
 8008150:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8008154:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8008158:	f04f 0c00 	mov.w	ip, #0
 800815c:	45d4      	cmp	ip, sl
 800815e:	dc27      	bgt.n	80081b0 <__kernel_rem_pio2f+0xb4>
 8008160:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008164:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8008408 <__kernel_rem_pio2f+0x30c>
 8008168:	4627      	mov	r7, r4
 800816a:	2600      	movs	r6, #0
 800816c:	e016      	b.n	800819c <__kernel_rem_pio2f+0xa0>
 800816e:	2000      	movs	r0, #0
 8008170:	e7dc      	b.n	800812c <__kernel_rem_pio2f+0x30>
 8008172:	42e7      	cmn	r7, r4
 8008174:	bf5d      	ittte	pl
 8008176:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800817a:	ee07 3a90 	vmovpl	s15, r3
 800817e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008182:	eef0 7a47 	vmovmi.f32	s15, s14
 8008186:	ece6 7a01 	vstmia	r6!, {s15}
 800818a:	3401      	adds	r4, #1
 800818c:	e7dc      	b.n	8008148 <__kernel_rem_pio2f+0x4c>
 800818e:	ecf9 6a01 	vldmia	r9!, {s13}
 8008192:	ed97 7a00 	vldr	s14, [r7]
 8008196:	eee6 7a87 	vfma.f32	s15, s13, s14
 800819a:	3601      	adds	r6, #1
 800819c:	428e      	cmp	r6, r1
 800819e:	f1a7 0704 	sub.w	r7, r7, #4
 80081a2:	ddf4      	ble.n	800818e <__kernel_rem_pio2f+0x92>
 80081a4:	eceb 7a01 	vstmia	fp!, {s15}
 80081a8:	f10c 0c01 	add.w	ip, ip, #1
 80081ac:	3404      	adds	r4, #4
 80081ae:	e7d5      	b.n	800815c <__kernel_rem_pio2f+0x60>
 80081b0:	ab08      	add	r3, sp, #32
 80081b2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80081b6:	eddf 8a93 	vldr	s17, [pc, #588]	; 8008404 <__kernel_rem_pio2f+0x308>
 80081ba:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8008400 <__kernel_rem_pio2f+0x304>
 80081be:	9304      	str	r3, [sp, #16]
 80081c0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80081c4:	4656      	mov	r6, sl
 80081c6:	00b3      	lsls	r3, r6, #2
 80081c8:	9305      	str	r3, [sp, #20]
 80081ca:	ab58      	add	r3, sp, #352	; 0x160
 80081cc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80081d0:	ac08      	add	r4, sp, #32
 80081d2:	ab44      	add	r3, sp, #272	; 0x110
 80081d4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80081d8:	46a4      	mov	ip, r4
 80081da:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80081de:	4637      	mov	r7, r6
 80081e0:	2f00      	cmp	r7, #0
 80081e2:	f1a0 0004 	sub.w	r0, r0, #4
 80081e6:	dc4f      	bgt.n	8008288 <__kernel_rem_pio2f+0x18c>
 80081e8:	4628      	mov	r0, r5
 80081ea:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80081ee:	f000 fc3d 	bl	8008a6c <scalbnf>
 80081f2:	eeb0 8a40 	vmov.f32	s16, s0
 80081f6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80081fa:	ee28 0a00 	vmul.f32	s0, s16, s0
 80081fe:	f000 fbed 	bl	80089dc <floorf>
 8008202:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008206:	eea0 8a67 	vfms.f32	s16, s0, s15
 800820a:	2d00      	cmp	r5, #0
 800820c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008210:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008214:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8008218:	ee17 9a90 	vmov	r9, s15
 800821c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008220:	dd44      	ble.n	80082ac <__kernel_rem_pio2f+0x1b0>
 8008222:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8008226:	ab08      	add	r3, sp, #32
 8008228:	f1c5 0e08 	rsb	lr, r5, #8
 800822c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8008230:	fa47 f00e 	asr.w	r0, r7, lr
 8008234:	4481      	add	r9, r0
 8008236:	fa00 f00e 	lsl.w	r0, r0, lr
 800823a:	1a3f      	subs	r7, r7, r0
 800823c:	f1c5 0007 	rsb	r0, r5, #7
 8008240:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8008244:	4107      	asrs	r7, r0
 8008246:	2f00      	cmp	r7, #0
 8008248:	dd3f      	ble.n	80082ca <__kernel_rem_pio2f+0x1ce>
 800824a:	f04f 0e00 	mov.w	lr, #0
 800824e:	f109 0901 	add.w	r9, r9, #1
 8008252:	4673      	mov	r3, lr
 8008254:	4576      	cmp	r6, lr
 8008256:	dc6b      	bgt.n	8008330 <__kernel_rem_pio2f+0x234>
 8008258:	2d00      	cmp	r5, #0
 800825a:	dd04      	ble.n	8008266 <__kernel_rem_pio2f+0x16a>
 800825c:	2d01      	cmp	r5, #1
 800825e:	d078      	beq.n	8008352 <__kernel_rem_pio2f+0x256>
 8008260:	2d02      	cmp	r5, #2
 8008262:	f000 8081 	beq.w	8008368 <__kernel_rem_pio2f+0x26c>
 8008266:	2f02      	cmp	r7, #2
 8008268:	d12f      	bne.n	80082ca <__kernel_rem_pio2f+0x1ce>
 800826a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800826e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008272:	b353      	cbz	r3, 80082ca <__kernel_rem_pio2f+0x1ce>
 8008274:	4628      	mov	r0, r5
 8008276:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800827a:	f000 fbf7 	bl	8008a6c <scalbnf>
 800827e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008282:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008286:	e020      	b.n	80082ca <__kernel_rem_pio2f+0x1ce>
 8008288:	ee60 7a28 	vmul.f32	s15, s0, s17
 800828c:	3f01      	subs	r7, #1
 800828e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008296:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800829a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800829e:	ecac 0a01 	vstmia	ip!, {s0}
 80082a2:	ed90 0a00 	vldr	s0, [r0]
 80082a6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80082aa:	e799      	b.n	80081e0 <__kernel_rem_pio2f+0xe4>
 80082ac:	d105      	bne.n	80082ba <__kernel_rem_pio2f+0x1be>
 80082ae:	1e70      	subs	r0, r6, #1
 80082b0:	ab08      	add	r3, sp, #32
 80082b2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80082b6:	11ff      	asrs	r7, r7, #7
 80082b8:	e7c5      	b.n	8008246 <__kernel_rem_pio2f+0x14a>
 80082ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80082be:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80082c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c6:	da31      	bge.n	800832c <__kernel_rem_pio2f+0x230>
 80082c8:	2700      	movs	r7, #0
 80082ca:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80082ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082d2:	f040 809b 	bne.w	800840c <__kernel_rem_pio2f+0x310>
 80082d6:	1e74      	subs	r4, r6, #1
 80082d8:	46a4      	mov	ip, r4
 80082da:	2000      	movs	r0, #0
 80082dc:	45d4      	cmp	ip, sl
 80082de:	da4a      	bge.n	8008376 <__kernel_rem_pio2f+0x27a>
 80082e0:	2800      	cmp	r0, #0
 80082e2:	d07a      	beq.n	80083da <__kernel_rem_pio2f+0x2de>
 80082e4:	ab08      	add	r3, sp, #32
 80082e6:	3d08      	subs	r5, #8
 80082e8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 8081 	beq.w	80083f4 <__kernel_rem_pio2f+0x2f8>
 80082f2:	4628      	mov	r0, r5
 80082f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80082f8:	00a5      	lsls	r5, r4, #2
 80082fa:	f000 fbb7 	bl	8008a6c <scalbnf>
 80082fe:	aa44      	add	r2, sp, #272	; 0x110
 8008300:	1d2b      	adds	r3, r5, #4
 8008302:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008404 <__kernel_rem_pio2f+0x308>
 8008306:	18d1      	adds	r1, r2, r3
 8008308:	4622      	mov	r2, r4
 800830a:	2a00      	cmp	r2, #0
 800830c:	f280 80ae 	bge.w	800846c <__kernel_rem_pio2f+0x370>
 8008310:	4622      	mov	r2, r4
 8008312:	2a00      	cmp	r2, #0
 8008314:	f2c0 80cc 	blt.w	80084b0 <__kernel_rem_pio2f+0x3b4>
 8008318:	a944      	add	r1, sp, #272	; 0x110
 800831a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800831e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80083fc <__kernel_rem_pio2f+0x300>
 8008322:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008408 <__kernel_rem_pio2f+0x30c>
 8008326:	2000      	movs	r0, #0
 8008328:	1aa1      	subs	r1, r4, r2
 800832a:	e0b6      	b.n	800849a <__kernel_rem_pio2f+0x39e>
 800832c:	2702      	movs	r7, #2
 800832e:	e78c      	b.n	800824a <__kernel_rem_pio2f+0x14e>
 8008330:	6820      	ldr	r0, [r4, #0]
 8008332:	b94b      	cbnz	r3, 8008348 <__kernel_rem_pio2f+0x24c>
 8008334:	b118      	cbz	r0, 800833e <__kernel_rem_pio2f+0x242>
 8008336:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800833a:	6020      	str	r0, [r4, #0]
 800833c:	2001      	movs	r0, #1
 800833e:	f10e 0e01 	add.w	lr, lr, #1
 8008342:	3404      	adds	r4, #4
 8008344:	4603      	mov	r3, r0
 8008346:	e785      	b.n	8008254 <__kernel_rem_pio2f+0x158>
 8008348:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800834c:	6020      	str	r0, [r4, #0]
 800834e:	4618      	mov	r0, r3
 8008350:	e7f5      	b.n	800833e <__kernel_rem_pio2f+0x242>
 8008352:	1e74      	subs	r4, r6, #1
 8008354:	a808      	add	r0, sp, #32
 8008356:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800835a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800835e:	f10d 0c20 	add.w	ip, sp, #32
 8008362:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8008366:	e77e      	b.n	8008266 <__kernel_rem_pio2f+0x16a>
 8008368:	1e74      	subs	r4, r6, #1
 800836a:	a808      	add	r0, sp, #32
 800836c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008370:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008374:	e7f3      	b.n	800835e <__kernel_rem_pio2f+0x262>
 8008376:	ab08      	add	r3, sp, #32
 8008378:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800837c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008380:	4318      	orrs	r0, r3
 8008382:	e7ab      	b.n	80082dc <__kernel_rem_pio2f+0x1e0>
 8008384:	f10c 0c01 	add.w	ip, ip, #1
 8008388:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800838c:	2c00      	cmp	r4, #0
 800838e:	d0f9      	beq.n	8008384 <__kernel_rem_pio2f+0x288>
 8008390:	9b05      	ldr	r3, [sp, #20]
 8008392:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008396:	eb0d 0003 	add.w	r0, sp, r3
 800839a:	9b01      	ldr	r3, [sp, #4]
 800839c:	18f4      	adds	r4, r6, r3
 800839e:	ab1c      	add	r3, sp, #112	; 0x70
 80083a0:	1c77      	adds	r7, r6, #1
 80083a2:	384c      	subs	r0, #76	; 0x4c
 80083a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80083a8:	4466      	add	r6, ip
 80083aa:	42be      	cmp	r6, r7
 80083ac:	f6ff af0b 	blt.w	80081c6 <__kernel_rem_pio2f+0xca>
 80083b0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80083b4:	f8dd e008 	ldr.w	lr, [sp, #8]
 80083b8:	ee07 3a90 	vmov	s15, r3
 80083bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083c0:	f04f 0c00 	mov.w	ip, #0
 80083c4:	ece4 7a01 	vstmia	r4!, {s15}
 80083c8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008408 <__kernel_rem_pio2f+0x30c>
 80083cc:	46a1      	mov	r9, r4
 80083ce:	458c      	cmp	ip, r1
 80083d0:	dd07      	ble.n	80083e2 <__kernel_rem_pio2f+0x2e6>
 80083d2:	ece0 7a01 	vstmia	r0!, {s15}
 80083d6:	3701      	adds	r7, #1
 80083d8:	e7e7      	b.n	80083aa <__kernel_rem_pio2f+0x2ae>
 80083da:	9804      	ldr	r0, [sp, #16]
 80083dc:	f04f 0c01 	mov.w	ip, #1
 80083e0:	e7d2      	b.n	8008388 <__kernel_rem_pio2f+0x28c>
 80083e2:	ecfe 6a01 	vldmia	lr!, {s13}
 80083e6:	ed39 7a01 	vldmdb	r9!, {s14}
 80083ea:	f10c 0c01 	add.w	ip, ip, #1
 80083ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 80083f2:	e7ec      	b.n	80083ce <__kernel_rem_pio2f+0x2d2>
 80083f4:	3c01      	subs	r4, #1
 80083f6:	e775      	b.n	80082e4 <__kernel_rem_pio2f+0x1e8>
 80083f8:	080092d8 	.word	0x080092d8
 80083fc:	080092ac 	.word	0x080092ac
 8008400:	43800000 	.word	0x43800000
 8008404:	3b800000 	.word	0x3b800000
 8008408:	00000000 	.word	0x00000000
 800840c:	9b03      	ldr	r3, [sp, #12]
 800840e:	eeb0 0a48 	vmov.f32	s0, s16
 8008412:	1a98      	subs	r0, r3, r2
 8008414:	f000 fb2a 	bl	8008a6c <scalbnf>
 8008418:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008400 <__kernel_rem_pio2f+0x304>
 800841c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008424:	db19      	blt.n	800845a <__kernel_rem_pio2f+0x35e>
 8008426:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008404 <__kernel_rem_pio2f+0x308>
 800842a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800842e:	aa08      	add	r2, sp, #32
 8008430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008434:	1c74      	adds	r4, r6, #1
 8008436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800843a:	3508      	adds	r5, #8
 800843c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008444:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008448:	ee10 3a10 	vmov	r3, s0
 800844c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008450:	ee17 3a90 	vmov	r3, s15
 8008454:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008458:	e74b      	b.n	80082f2 <__kernel_rem_pio2f+0x1f6>
 800845a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800845e:	aa08      	add	r2, sp, #32
 8008460:	ee10 3a10 	vmov	r3, s0
 8008464:	4634      	mov	r4, r6
 8008466:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800846a:	e742      	b.n	80082f2 <__kernel_rem_pio2f+0x1f6>
 800846c:	a808      	add	r0, sp, #32
 800846e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8008472:	9001      	str	r0, [sp, #4]
 8008474:	ee07 0a90 	vmov	s15, r0
 8008478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800847c:	3a01      	subs	r2, #1
 800847e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008482:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008486:	ed61 7a01 	vstmdb	r1!, {s15}
 800848a:	e73e      	b.n	800830a <__kernel_rem_pio2f+0x20e>
 800848c:	ecfc 6a01 	vldmia	ip!, {s13}
 8008490:	ecb6 7a01 	vldmia	r6!, {s14}
 8008494:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008498:	3001      	adds	r0, #1
 800849a:	4550      	cmp	r0, sl
 800849c:	dc01      	bgt.n	80084a2 <__kernel_rem_pio2f+0x3a6>
 800849e:	4288      	cmp	r0, r1
 80084a0:	ddf4      	ble.n	800848c <__kernel_rem_pio2f+0x390>
 80084a2:	a858      	add	r0, sp, #352	; 0x160
 80084a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80084a8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80084ac:	3a01      	subs	r2, #1
 80084ae:	e730      	b.n	8008312 <__kernel_rem_pio2f+0x216>
 80084b0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80084b2:	2a02      	cmp	r2, #2
 80084b4:	dc09      	bgt.n	80084ca <__kernel_rem_pio2f+0x3ce>
 80084b6:	2a00      	cmp	r2, #0
 80084b8:	dc2a      	bgt.n	8008510 <__kernel_rem_pio2f+0x414>
 80084ba:	d043      	beq.n	8008544 <__kernel_rem_pio2f+0x448>
 80084bc:	f009 0007 	and.w	r0, r9, #7
 80084c0:	b059      	add	sp, #356	; 0x164
 80084c2:	ecbd 8b04 	vpop	{d8-d9}
 80084c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ca:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80084cc:	2b03      	cmp	r3, #3
 80084ce:	d1f5      	bne.n	80084bc <__kernel_rem_pio2f+0x3c0>
 80084d0:	ab30      	add	r3, sp, #192	; 0xc0
 80084d2:	442b      	add	r3, r5
 80084d4:	461a      	mov	r2, r3
 80084d6:	4619      	mov	r1, r3
 80084d8:	4620      	mov	r0, r4
 80084da:	2800      	cmp	r0, #0
 80084dc:	f1a1 0104 	sub.w	r1, r1, #4
 80084e0:	dc51      	bgt.n	8008586 <__kernel_rem_pio2f+0x48a>
 80084e2:	4621      	mov	r1, r4
 80084e4:	2901      	cmp	r1, #1
 80084e6:	f1a2 0204 	sub.w	r2, r2, #4
 80084ea:	dc5c      	bgt.n	80085a6 <__kernel_rem_pio2f+0x4aa>
 80084ec:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008408 <__kernel_rem_pio2f+0x30c>
 80084f0:	3304      	adds	r3, #4
 80084f2:	2c01      	cmp	r4, #1
 80084f4:	dc67      	bgt.n	80085c6 <__kernel_rem_pio2f+0x4ca>
 80084f6:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80084fa:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80084fe:	2f00      	cmp	r7, #0
 8008500:	d167      	bne.n	80085d2 <__kernel_rem_pio2f+0x4d6>
 8008502:	edc8 6a00 	vstr	s13, [r8]
 8008506:	ed88 7a01 	vstr	s14, [r8, #4]
 800850a:	edc8 7a02 	vstr	s15, [r8, #8]
 800850e:	e7d5      	b.n	80084bc <__kernel_rem_pio2f+0x3c0>
 8008510:	aa30      	add	r2, sp, #192	; 0xc0
 8008512:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8008408 <__kernel_rem_pio2f+0x30c>
 8008516:	4413      	add	r3, r2
 8008518:	4622      	mov	r2, r4
 800851a:	2a00      	cmp	r2, #0
 800851c:	da24      	bge.n	8008568 <__kernel_rem_pio2f+0x46c>
 800851e:	b34f      	cbz	r7, 8008574 <__kernel_rem_pio2f+0x478>
 8008520:	eef1 7a47 	vneg.f32	s15, s14
 8008524:	edc8 7a00 	vstr	s15, [r8]
 8008528:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800852c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008530:	aa31      	add	r2, sp, #196	; 0xc4
 8008532:	2301      	movs	r3, #1
 8008534:	429c      	cmp	r4, r3
 8008536:	da20      	bge.n	800857a <__kernel_rem_pio2f+0x47e>
 8008538:	b10f      	cbz	r7, 800853e <__kernel_rem_pio2f+0x442>
 800853a:	eef1 7a67 	vneg.f32	s15, s15
 800853e:	edc8 7a01 	vstr	s15, [r8, #4]
 8008542:	e7bb      	b.n	80084bc <__kernel_rem_pio2f+0x3c0>
 8008544:	aa30      	add	r2, sp, #192	; 0xc0
 8008546:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8008408 <__kernel_rem_pio2f+0x30c>
 800854a:	4413      	add	r3, r2
 800854c:	2c00      	cmp	r4, #0
 800854e:	da05      	bge.n	800855c <__kernel_rem_pio2f+0x460>
 8008550:	b10f      	cbz	r7, 8008556 <__kernel_rem_pio2f+0x45a>
 8008552:	eef1 7a67 	vneg.f32	s15, s15
 8008556:	edc8 7a00 	vstr	s15, [r8]
 800855a:	e7af      	b.n	80084bc <__kernel_rem_pio2f+0x3c0>
 800855c:	ed33 7a01 	vldmdb	r3!, {s14}
 8008560:	3c01      	subs	r4, #1
 8008562:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008566:	e7f1      	b.n	800854c <__kernel_rem_pio2f+0x450>
 8008568:	ed73 7a01 	vldmdb	r3!, {s15}
 800856c:	3a01      	subs	r2, #1
 800856e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008572:	e7d2      	b.n	800851a <__kernel_rem_pio2f+0x41e>
 8008574:	eef0 7a47 	vmov.f32	s15, s14
 8008578:	e7d4      	b.n	8008524 <__kernel_rem_pio2f+0x428>
 800857a:	ecb2 7a01 	vldmia	r2!, {s14}
 800857e:	3301      	adds	r3, #1
 8008580:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008584:	e7d6      	b.n	8008534 <__kernel_rem_pio2f+0x438>
 8008586:	edd1 7a00 	vldr	s15, [r1]
 800858a:	edd1 6a01 	vldr	s13, [r1, #4]
 800858e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008592:	3801      	subs	r0, #1
 8008594:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008598:	ed81 7a00 	vstr	s14, [r1]
 800859c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085a0:	edc1 7a01 	vstr	s15, [r1, #4]
 80085a4:	e799      	b.n	80084da <__kernel_rem_pio2f+0x3de>
 80085a6:	edd2 7a00 	vldr	s15, [r2]
 80085aa:	edd2 6a01 	vldr	s13, [r2, #4]
 80085ae:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80085b2:	3901      	subs	r1, #1
 80085b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085b8:	ed82 7a00 	vstr	s14, [r2]
 80085bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085c0:	edc2 7a01 	vstr	s15, [r2, #4]
 80085c4:	e78e      	b.n	80084e4 <__kernel_rem_pio2f+0x3e8>
 80085c6:	ed33 7a01 	vldmdb	r3!, {s14}
 80085ca:	3c01      	subs	r4, #1
 80085cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80085d0:	e78f      	b.n	80084f2 <__kernel_rem_pio2f+0x3f6>
 80085d2:	eef1 6a66 	vneg.f32	s13, s13
 80085d6:	eeb1 7a47 	vneg.f32	s14, s14
 80085da:	edc8 6a00 	vstr	s13, [r8]
 80085de:	ed88 7a01 	vstr	s14, [r8, #4]
 80085e2:	eef1 7a67 	vneg.f32	s15, s15
 80085e6:	e790      	b.n	800850a <__kernel_rem_pio2f+0x40e>

080085e8 <__kernel_tanf>:
 80085e8:	b508      	push	{r3, lr}
 80085ea:	ee10 3a10 	vmov	r3, s0
 80085ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80085f2:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 80085f6:	eef0 7a40 	vmov.f32	s15, s0
 80085fa:	da17      	bge.n	800862c <__kernel_tanf+0x44>
 80085fc:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8008600:	ee17 1a10 	vmov	r1, s14
 8008604:	bb41      	cbnz	r1, 8008658 <__kernel_tanf+0x70>
 8008606:	1c43      	adds	r3, r0, #1
 8008608:	4313      	orrs	r3, r2
 800860a:	d108      	bne.n	800861e <__kernel_tanf+0x36>
 800860c:	f7ff f92d 	bl	800786a <fabsf>
 8008610:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008614:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008618:	eeb0 0a67 	vmov.f32	s0, s15
 800861c:	bd08      	pop	{r3, pc}
 800861e:	2801      	cmp	r0, #1
 8008620:	d0fa      	beq.n	8008618 <__kernel_tanf+0x30>
 8008622:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008626:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800862a:	e7f5      	b.n	8008618 <__kernel_tanf+0x30>
 800862c:	494c      	ldr	r1, [pc, #304]	; (8008760 <__kernel_tanf+0x178>)
 800862e:	428a      	cmp	r2, r1
 8008630:	db12      	blt.n	8008658 <__kernel_tanf+0x70>
 8008632:	2b00      	cmp	r3, #0
 8008634:	bfb8      	it	lt
 8008636:	eef1 7a40 	vneglt.f32	s15, s0
 800863a:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8008764 <__kernel_tanf+0x17c>
 800863e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008642:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8008768 <__kernel_tanf+0x180>
 8008646:	bfb8      	it	lt
 8008648:	eef1 0a60 	vneglt.f32	s1, s1
 800864c:	ee70 0a60 	vsub.f32	s1, s0, s1
 8008650:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8008654:	eddf 0a45 	vldr	s1, [pc, #276]	; 800876c <__kernel_tanf+0x184>
 8008658:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008770 <__kernel_tanf+0x188>
 800865c:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8008774 <__kernel_tanf+0x18c>
 8008660:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8008778 <__kernel_tanf+0x190>
 8008664:	493e      	ldr	r1, [pc, #248]	; (8008760 <__kernel_tanf+0x178>)
 8008666:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800866a:	428a      	cmp	r2, r1
 800866c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8008670:	eea7 6a25 	vfma.f32	s12, s14, s11
 8008674:	eddf 5a41 	vldr	s11, [pc, #260]	; 800877c <__kernel_tanf+0x194>
 8008678:	eee6 5a07 	vfma.f32	s11, s12, s14
 800867c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8008780 <__kernel_tanf+0x198>
 8008680:	eea5 6a87 	vfma.f32	s12, s11, s14
 8008684:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008784 <__kernel_tanf+0x19c>
 8008688:	eee6 5a07 	vfma.f32	s11, s12, s14
 800868c:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8008788 <__kernel_tanf+0x1a0>
 8008690:	eea5 6a87 	vfma.f32	s12, s11, s14
 8008694:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800878c <__kernel_tanf+0x1a4>
 8008698:	eee7 5a05 	vfma.f32	s11, s14, s10
 800869c:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8008790 <__kernel_tanf+0x1a8>
 80086a0:	eea5 5a87 	vfma.f32	s10, s11, s14
 80086a4:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8008794 <__kernel_tanf+0x1ac>
 80086a8:	eee5 5a07 	vfma.f32	s11, s10, s14
 80086ac:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8008798 <__kernel_tanf+0x1b0>
 80086b0:	eea5 5a87 	vfma.f32	s10, s11, s14
 80086b4:	eddf 5a39 	vldr	s11, [pc, #228]	; 800879c <__kernel_tanf+0x1b4>
 80086b8:	eee5 5a07 	vfma.f32	s11, s10, s14
 80086bc:	eeb0 7a46 	vmov.f32	s14, s12
 80086c0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80086c4:	ee27 5aa6 	vmul.f32	s10, s15, s13
 80086c8:	eeb0 6a60 	vmov.f32	s12, s1
 80086cc:	eea7 6a05 	vfma.f32	s12, s14, s10
 80086d0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80087a0 <__kernel_tanf+0x1b8>
 80086d4:	eee6 0a26 	vfma.f32	s1, s12, s13
 80086d8:	eee5 0a07 	vfma.f32	s1, s10, s14
 80086dc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80086e0:	db1d      	blt.n	800871e <__kernel_tanf+0x136>
 80086e2:	ee06 0a90 	vmov	s13, r0
 80086e6:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 80086ea:	ee27 6a07 	vmul.f32	s12, s14, s14
 80086ee:	ee37 7a00 	vadd.f32	s14, s14, s0
 80086f2:	179b      	asrs	r3, r3, #30
 80086f4:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80086f8:	f003 0302 	and.w	r3, r3, #2
 80086fc:	f1c3 0301 	rsb	r3, r3, #1
 8008700:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008704:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8008708:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800870c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008710:	ee07 3a90 	vmov	s15, r3
 8008714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008718:	ee67 7a80 	vmul.f32	s15, s15, s0
 800871c:	e77c      	b.n	8008618 <__kernel_tanf+0x30>
 800871e:	2801      	cmp	r0, #1
 8008720:	d01b      	beq.n	800875a <__kernel_tanf+0x172>
 8008722:	4b20      	ldr	r3, [pc, #128]	; (80087a4 <__kernel_tanf+0x1bc>)
 8008724:	ee17 2a10 	vmov	r2, s14
 8008728:	401a      	ands	r2, r3
 800872a:	ee06 2a10 	vmov	s12, r2
 800872e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8008732:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8008736:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800873a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800873e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008742:	ee16 2a90 	vmov	r2, s13
 8008746:	4013      	ands	r3, r2
 8008748:	ee07 3a90 	vmov	s15, r3
 800874c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8008750:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8008754:	eee7 7a26 	vfma.f32	s15, s14, s13
 8008758:	e75e      	b.n	8008618 <__kernel_tanf+0x30>
 800875a:	eef0 7a47 	vmov.f32	s15, s14
 800875e:	e75b      	b.n	8008618 <__kernel_tanf+0x30>
 8008760:	3f2ca140 	.word	0x3f2ca140
 8008764:	3f490fda 	.word	0x3f490fda
 8008768:	33222168 	.word	0x33222168
 800876c:	00000000 	.word	0x00000000
 8008770:	b79bae5f 	.word	0xb79bae5f
 8008774:	38a3f445 	.word	0x38a3f445
 8008778:	37d95384 	.word	0x37d95384
 800877c:	3a1a26c8 	.word	0x3a1a26c8
 8008780:	3b6b6916 	.word	0x3b6b6916
 8008784:	3cb327a4 	.word	0x3cb327a4
 8008788:	3e088889 	.word	0x3e088889
 800878c:	3895c07a 	.word	0x3895c07a
 8008790:	398137b9 	.word	0x398137b9
 8008794:	3abede48 	.word	0x3abede48
 8008798:	3c11371f 	.word	0x3c11371f
 800879c:	3d5d0dd1 	.word	0x3d5d0dd1
 80087a0:	3eaaaaab 	.word	0x3eaaaaab
 80087a4:	fffff000 	.word	0xfffff000

080087a8 <expm1f>:
 80087a8:	ee10 2a10 	vmov	r2, s0
 80087ac:	497c      	ldr	r1, [pc, #496]	; (80089a0 <expm1f+0x1f8>)
 80087ae:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80087b2:	428b      	cmp	r3, r1
 80087b4:	d920      	bls.n	80087f8 <expm1f+0x50>
 80087b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80087ba:	d902      	bls.n	80087c2 <expm1f+0x1a>
 80087bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80087c0:	4770      	bx	lr
 80087c2:	d105      	bne.n	80087d0 <expm1f+0x28>
 80087c4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80087c8:	2a00      	cmp	r2, #0
 80087ca:	fe20 0a27 	vselge.f32	s0, s0, s15
 80087ce:	4770      	bx	lr
 80087d0:	2a00      	cmp	r2, #0
 80087d2:	db05      	blt.n	80087e0 <expm1f+0x38>
 80087d4:	4973      	ldr	r1, [pc, #460]	; (80089a4 <expm1f+0x1fc>)
 80087d6:	428b      	cmp	r3, r1
 80087d8:	d95c      	bls.n	8008894 <expm1f+0xec>
 80087da:	2000      	movs	r0, #0
 80087dc:	f7ff b820 	b.w	8007820 <__math_oflowf>
 80087e0:	eddf 7a71 	vldr	s15, [pc, #452]	; 80089a8 <expm1f+0x200>
 80087e4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80087e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80087ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087f0:	d550      	bpl.n	8008894 <expm1f+0xec>
 80087f2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80087f6:	4770      	bx	lr
 80087f8:	496c      	ldr	r1, [pc, #432]	; (80089ac <expm1f+0x204>)
 80087fa:	428b      	cmp	r3, r1
 80087fc:	d966      	bls.n	80088cc <expm1f+0x124>
 80087fe:	496c      	ldr	r1, [pc, #432]	; (80089b0 <expm1f+0x208>)
 8008800:	428b      	cmp	r3, r1
 8008802:	d847      	bhi.n	8008894 <expm1f+0xec>
 8008804:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80089b4 <expm1f+0x20c>
 8008808:	2a00      	cmp	r2, #0
 800880a:	bfa7      	ittee	ge
 800880c:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8008810:	eddf 7a69 	vldrge	s15, [pc, #420]	; 80089b8 <expm1f+0x210>
 8008814:	eddf 7a69 	vldrlt	s15, [pc, #420]	; 80089bc <expm1f+0x214>
 8008818:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800881c:	bfac      	ite	ge
 800881e:	2301      	movge	r3, #1
 8008820:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008824:	ee37 0a67 	vsub.f32	s0, s14, s15
 8008828:	ee37 7a40 	vsub.f32	s14, s14, s0
 800882c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008830:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8008834:	ee20 4a25 	vmul.f32	s8, s0, s11
 8008838:	ed9f 6a61 	vldr	s12, [pc, #388]	; 80089c0 <expm1f+0x218>
 800883c:	eddf 6a61 	vldr	s13, [pc, #388]	; 80089c4 <expm1f+0x21c>
 8008840:	ed9f 5a61 	vldr	s10, [pc, #388]	; 80089c8 <expm1f+0x220>
 8008844:	ee20 7a04 	vmul.f32	s14, s0, s8
 8008848:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800884c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8008850:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 80089cc <expm1f+0x224>
 8008854:	eea6 6a87 	vfma.f32	s12, s13, s14
 8008858:	eddf 6a5d 	vldr	s13, [pc, #372]	; 80089d0 <expm1f+0x228>
 800885c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8008860:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008864:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008868:	eef0 6a46 	vmov.f32	s13, s12
 800886c:	eee5 6a07 	vfma.f32	s13, s10, s14
 8008870:	eee4 4a66 	vfms.f32	s9, s8, s13
 8008874:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8008878:	eea0 4a64 	vfms.f32	s8, s0, s9
 800887c:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8008880:	eec5 6a04 	vdiv.f32	s13, s10, s8
 8008884:	ee66 6a87 	vmul.f32	s13, s13, s14
 8008888:	bb73      	cbnz	r3, 80088e8 <expm1f+0x140>
 800888a:	eef0 7a47 	vmov.f32	s15, s14
 800888e:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8008892:	e024      	b.n	80088de <expm1f+0x136>
 8008894:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8008898:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800889c:	2a00      	cmp	r2, #0
 800889e:	fe67 7a87 	vselge.f32	s15, s15, s14
 80088a2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80089d4 <expm1f+0x22c>
 80088a6:	eddf 6a43 	vldr	s13, [pc, #268]	; 80089b4 <expm1f+0x20c>
 80088aa:	ee40 7a07 	vmla.f32	s15, s0, s14
 80088ae:	eeb0 7a40 	vmov.f32	s14, s0
 80088b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088b6:	ee17 3a90 	vmov	r3, s15
 80088ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088be:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80088c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80089b8 <expm1f+0x210>
 80088c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80088ca:	e7ab      	b.n	8008824 <expm1f+0x7c>
 80088cc:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 80088d0:	d208      	bcs.n	80088e4 <expm1f+0x13c>
 80088d2:	eddf 7a41 	vldr	s15, [pc, #260]	; 80089d8 <expm1f+0x230>
 80088d6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80088da:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80088de:	ee30 0a67 	vsub.f32	s0, s0, s15
 80088e2:	4770      	bx	lr
 80088e4:	2300      	movs	r3, #0
 80088e6:	e7a3      	b.n	8008830 <expm1f+0x88>
 80088e8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80088ec:	1c5a      	adds	r2, r3, #1
 80088ee:	eed6 7a80 	vfnms.f32	s15, s13, s0
 80088f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80088f6:	d106      	bne.n	8008906 <expm1f+0x15e>
 80088f8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80088fc:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8008900:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8008904:	4770      	bx	lr
 8008906:	2b01      	cmp	r3, #1
 8008908:	d118      	bne.n	800893c <expm1f+0x194>
 800890a:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800890e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008916:	bf5b      	ittet	pl
 8008918:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 800891c:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 8008920:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8008924:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8008928:	bf43      	ittte	mi
 800892a:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 800892e:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 8008932:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8008936:	eeb0 0a46 	vmovpl.f32	s0, s12
 800893a:	4770      	bx	lr
 800893c:	1c5a      	adds	r2, r3, #1
 800893e:	2a39      	cmp	r2, #57	; 0x39
 8008940:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8008944:	d90b      	bls.n	800895e <expm1f+0x1b6>
 8008946:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800894a:	ee36 0a40 	vsub.f32	s0, s12, s0
 800894e:	ee10 3a10 	vmov	r3, s0
 8008952:	440b      	add	r3, r1
 8008954:	ee00 3a10 	vmov	s0, r3
 8008958:	ee30 0a46 	vsub.f32	s0, s0, s12
 800895c:	4770      	bx	lr
 800895e:	2b16      	cmp	r3, #22
 8008960:	dc11      	bgt.n	8008986 <expm1f+0x1de>
 8008962:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008966:	fa42 f303 	asr.w	r3, r2, r3
 800896a:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800896e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008972:	ee07 3a90 	vmov	s15, r3
 8008976:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800897a:	ee10 3a10 	vmov	r3, s0
 800897e:	440b      	add	r3, r1
 8008980:	ee00 3a10 	vmov	s0, r3
 8008984:	4770      	bx	lr
 8008986:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800898a:	05db      	lsls	r3, r3, #23
 800898c:	ee07 3a10 	vmov	s14, r3
 8008990:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008994:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008998:	ee37 0a86 	vadd.f32	s0, s15, s12
 800899c:	e7ed      	b.n	800897a <expm1f+0x1d2>
 800899e:	bf00      	nop
 80089a0:	4195b843 	.word	0x4195b843
 80089a4:	42b17217 	.word	0x42b17217
 80089a8:	0da24260 	.word	0x0da24260
 80089ac:	3eb17218 	.word	0x3eb17218
 80089b0:	3f851591 	.word	0x3f851591
 80089b4:	3f317180 	.word	0x3f317180
 80089b8:	3717f7d1 	.word	0x3717f7d1
 80089bc:	b717f7d1 	.word	0xb717f7d1
 80089c0:	b457edbb 	.word	0xb457edbb
 80089c4:	36867e54 	.word	0x36867e54
 80089c8:	bd088889 	.word	0xbd088889
 80089cc:	b8a670cd 	.word	0xb8a670cd
 80089d0:	3ad00d01 	.word	0x3ad00d01
 80089d4:	3fb8aa3b 	.word	0x3fb8aa3b
 80089d8:	7149f2ca 	.word	0x7149f2ca

080089dc <floorf>:
 80089dc:	ee10 3a10 	vmov	r3, s0
 80089e0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80089e4:	3a7f      	subs	r2, #127	; 0x7f
 80089e6:	2a16      	cmp	r2, #22
 80089e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80089ec:	dc2a      	bgt.n	8008a44 <floorf+0x68>
 80089ee:	2a00      	cmp	r2, #0
 80089f0:	da11      	bge.n	8008a16 <floorf+0x3a>
 80089f2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008a54 <floorf+0x78>
 80089f6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80089fa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80089fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a02:	dd05      	ble.n	8008a10 <floorf+0x34>
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	da23      	bge.n	8008a50 <floorf+0x74>
 8008a08:	4a13      	ldr	r2, [pc, #76]	; (8008a58 <floorf+0x7c>)
 8008a0a:	2900      	cmp	r1, #0
 8008a0c:	bf18      	it	ne
 8008a0e:	4613      	movne	r3, r2
 8008a10:	ee00 3a10 	vmov	s0, r3
 8008a14:	4770      	bx	lr
 8008a16:	4911      	ldr	r1, [pc, #68]	; (8008a5c <floorf+0x80>)
 8008a18:	4111      	asrs	r1, r2
 8008a1a:	420b      	tst	r3, r1
 8008a1c:	d0fa      	beq.n	8008a14 <floorf+0x38>
 8008a1e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008a54 <floorf+0x78>
 8008a22:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008a26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a2e:	ddef      	ble.n	8008a10 <floorf+0x34>
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	bfbe      	ittt	lt
 8008a34:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008a38:	fa40 f202 	asrlt.w	r2, r0, r2
 8008a3c:	189b      	addlt	r3, r3, r2
 8008a3e:	ea23 0301 	bic.w	r3, r3, r1
 8008a42:	e7e5      	b.n	8008a10 <floorf+0x34>
 8008a44:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008a48:	d3e4      	bcc.n	8008a14 <floorf+0x38>
 8008a4a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008a4e:	4770      	bx	lr
 8008a50:	2300      	movs	r3, #0
 8008a52:	e7dd      	b.n	8008a10 <floorf+0x34>
 8008a54:	7149f2ca 	.word	0x7149f2ca
 8008a58:	bf800000 	.word	0xbf800000
 8008a5c:	007fffff 	.word	0x007fffff

08008a60 <nanf>:
 8008a60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008a68 <nanf+0x8>
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	7fc00000 	.word	0x7fc00000

08008a6c <scalbnf>:
 8008a6c:	ee10 3a10 	vmov	r3, s0
 8008a70:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008a74:	d024      	beq.n	8008ac0 <scalbnf+0x54>
 8008a76:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008a7a:	d302      	bcc.n	8008a82 <scalbnf+0x16>
 8008a7c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008a80:	4770      	bx	lr
 8008a82:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008a86:	d121      	bne.n	8008acc <scalbnf+0x60>
 8008a88:	4b29      	ldr	r3, [pc, #164]	; (8008b30 <scalbnf+0xc4>)
 8008a8a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8008b34 <scalbnf+0xc8>
 8008a8e:	4298      	cmp	r0, r3
 8008a90:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008a94:	db15      	blt.n	8008ac2 <scalbnf+0x56>
 8008a96:	ee10 3a10 	vmov	r3, s0
 8008a9a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008a9e:	3a19      	subs	r2, #25
 8008aa0:	4402      	add	r2, r0
 8008aa2:	2afe      	cmp	r2, #254	; 0xfe
 8008aa4:	dd14      	ble.n	8008ad0 <scalbnf+0x64>
 8008aa6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008b38 <scalbnf+0xcc>
 8008aaa:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008b3c <scalbnf+0xd0>
 8008aae:	ee10 3a10 	vmov	r3, s0
 8008ab2:	eeb0 7a67 	vmov.f32	s14, s15
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	fe67 7aa6 	vselge.f32	s15, s15, s13
 8008abc:	ee27 0a27 	vmul.f32	s0, s14, s15
 8008ac0:	4770      	bx	lr
 8008ac2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008b40 <scalbnf+0xd4>
 8008ac6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008aca:	4770      	bx	lr
 8008acc:	0dd2      	lsrs	r2, r2, #23
 8008ace:	e7e7      	b.n	8008aa0 <scalbnf+0x34>
 8008ad0:	2a00      	cmp	r2, #0
 8008ad2:	dd06      	ble.n	8008ae2 <scalbnf+0x76>
 8008ad4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ad8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008adc:	ee00 3a10 	vmov	s0, r3
 8008ae0:	4770      	bx	lr
 8008ae2:	f112 0f16 	cmn.w	r2, #22
 8008ae6:	da19      	bge.n	8008b1c <scalbnf+0xb0>
 8008ae8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008aec:	4298      	cmp	r0, r3
 8008aee:	ee10 3a10 	vmov	r3, s0
 8008af2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008af6:	dd09      	ble.n	8008b0c <scalbnf+0xa0>
 8008af8:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8008b38 <scalbnf+0xcc>
 8008afc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8008b3c <scalbnf+0xd0>
 8008b00:	eef0 7a40 	vmov.f32	s15, s0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	fe00 0a07 	vseleq.f32	s0, s0, s14
 8008b0a:	e7dc      	b.n	8008ac6 <scalbnf+0x5a>
 8008b0c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008b40 <scalbnf+0xd4>
 8008b10:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008b44 <scalbnf+0xd8>
 8008b14:	eef0 7a40 	vmov.f32	s15, s0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	e7f4      	b.n	8008b06 <scalbnf+0x9a>
 8008b1c:	3219      	adds	r2, #25
 8008b1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b22:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008b26:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008b48 <scalbnf+0xdc>
 8008b2a:	ee07 3a10 	vmov	s14, r3
 8008b2e:	e7c5      	b.n	8008abc <scalbnf+0x50>
 8008b30:	ffff3cb0 	.word	0xffff3cb0
 8008b34:	4c000000 	.word	0x4c000000
 8008b38:	7149f2ca 	.word	0x7149f2ca
 8008b3c:	f149f2ca 	.word	0xf149f2ca
 8008b40:	0da24260 	.word	0x0da24260
 8008b44:	8da24260 	.word	0x8da24260
 8008b48:	33000000 	.word	0x33000000

08008b4c <_init>:
 8008b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4e:	bf00      	nop
 8008b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b52:	bc08      	pop	{r3}
 8008b54:	469e      	mov	lr, r3
 8008b56:	4770      	bx	lr

08008b58 <_fini>:
 8008b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5a:	bf00      	nop
 8008b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5e:	bc08      	pop	{r3}
 8008b60:	469e      	mov	lr, r3
 8008b62:	4770      	bx	lr
