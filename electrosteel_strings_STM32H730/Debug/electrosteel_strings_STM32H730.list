
electrosteel_strings_STM32H730.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008040  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000077c  08008310  08008310  00018310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008a8c  08008a8c  00018a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008a90  08008a90  00018a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  24000000  08008a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000790  24000078  08008b0c  00020078  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  24000808  08008b0c  00020808  2**0
                  ALLOC
  8 .RAM_D1       0004baf0  24000e20  08008b0c  00020e20  2**5
                  ALLOC
  9 .RAM_D2       000001e0  30000000  30000000  00030000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 11 .debug_info   00029d88  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004415  00000000  00000000  00049e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0001dfb5  00000000  00000000  0004e243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  0006c1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004820  00000000  00000000  0006d860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003692d  00000000  00000000  00072080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002782a  00000000  00000000  000a89ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015b85a  00000000  00000000  000d01d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0022ba31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d30  00000000  00000000  0022ba84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080082f8 	.word	0x080082f8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	080082f8 	.word	0x080082f8

08000310 <randomNumber>:

}

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
float randomNumber(void) {
 8000310:	b500      	push	{lr}
 8000312:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8000314:	4807      	ldr	r0, [pc, #28]	; (8000334 <randomNumber+0x24>)
 8000316:	a901      	add	r1, sp, #4
 8000318:	f005 fd04 	bl	8005d24 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 800031c:	eddd 7a01 	vldr	s15, [sp, #4]
 8000320:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000338 <randomNumber+0x28>
 8000324:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 8000328:	ee27 0a80 	vmul.f32	s0, s15, s0
 800032c:	b003      	add	sp, #12
 800032e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000332:	bf00      	nop
 8000334:	24000378 	.word	0x24000378
 8000338:	2f80000d 	.word	0x2f80000d
 800033c:	00000000 	.word	0x00000000

08000340 <SystemClock_Config>:
{
 8000340:	b510      	push	{r4, lr}
 8000342:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000344:	224c      	movs	r2, #76	; 0x4c
 8000346:	2100      	movs	r1, #0
 8000348:	a80a      	add	r0, sp, #40	; 0x28
 800034a:	f006 fe39 	bl	8006fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034e:	2220      	movs	r2, #32
 8000350:	2100      	movs	r1, #0
 8000352:	a802      	add	r0, sp, #8
 8000354:	f006 fe34 	bl	8006fc0 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000358:	2002      	movs	r0, #2
 800035a:	f003 fc33 	bl	8003bc4 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800035e:	4a28      	ldr	r2, [pc, #160]	; (8000400 <SystemClock_Config+0xc0>)
 8000360:	2300      	movs	r3, #0
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	6993      	ldr	r3, [r2, #24]
 8000366:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	6993      	ldr	r3, [r2, #24]
 800036e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000372:	9301      	str	r3, [sp, #4]
 8000374:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000376:	6993      	ldr	r3, [r2, #24]
 8000378:	049b      	lsls	r3, r3, #18
 800037a:	d5fc      	bpl.n	8000376 <SystemClock_Config+0x36>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800037c:	4a21      	ldr	r2, [pc, #132]	; (8000404 <SystemClock_Config+0xc4>)
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037e:	2402      	movs	r4, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000380:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000382:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000384:	f023 0303 	bic.w	r3, r3, #3
 8000388:	f043 0302 	orr.w	r3, r3, #2
 800038c:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800038e:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000390:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000392:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000394:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 420;
 8000396:	2219      	movs	r2, #25
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000398:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800039a:	ed9f 7b17 	vldr	d7, [pc, #92]	; 80003f8 <SystemClock_Config+0xb8>
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800039e:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLN = 420;
 80003a2:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80003a6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003aa:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003ae:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLN = 420;
 80003b2:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b6:	f003 fcad 	bl	8003d14 <HAL_RCC_OscConfig>
 80003ba:	b108      	cbz	r0, 80003c0 <SystemClock_Config+0x80>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003bc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003be:	e7fe      	b.n	80003be <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c0:	223f      	movs	r2, #63	; 0x3f
 80003c2:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003c4:	4621      	mov	r1, r4
 80003c6:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80003cc:	2200      	movs	r2, #0
 80003ce:	2308      	movs	r3, #8
 80003d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80003d4:	2240      	movs	r2, #64	; 0x40
 80003d6:	2340      	movs	r3, #64	; 0x40
 80003d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80003dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003e0:	2340      	movs	r3, #64	; 0x40
 80003e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e6:	f003 ffe1 	bl	80043ac <HAL_RCC_ClockConfig>
 80003ea:	b108      	cbz	r0, 80003f0 <SystemClock_Config+0xb0>
 80003ec:	b672      	cpsid	i
  while (1)
 80003ee:	e7fe      	b.n	80003ee <SystemClock_Config+0xae>
}
 80003f0:	b01e      	add	sp, #120	; 0x78
 80003f2:	bd10      	pop	{r4, pc}
 80003f4:	f3af 8000 	nop.w
 80003f8:	00000021 	.word	0x00000021
 80003fc:	00010000 	.word	0x00010000
 8000400:	58024800 	.word	0x58024800
 8000404:	58024400 	.word	0x58024400

08000408 <MPU_Conf>:
{
 8000408:	b500      	push	{lr}
 800040a:	b085      	sub	sp, #20
	  HAL_MPU_Disable();
 800040c:	f002 f966 	bl	80026dc <HAL_MPU_Disable>
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000410:	2301      	movs	r3, #1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 8000412:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
	  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000416:	4a07      	ldr	r2, [pc, #28]	; (8000434 <MPU_Conf+0x2c>)
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000418:	4668      	mov	r0, sp
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800041a:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 800041e:	9303      	str	r3, [sp, #12]
 8000420:	e9cd 1201 	strd	r1, r2, [sp, #4]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000424:	f002 f978 	bl	8002718 <HAL_MPU_ConfigRegion>
	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000428:	2004      	movs	r0, #4
 800042a:	f002 f965 	bl	80026f8 <HAL_MPU_Enable>
}
 800042e:	b005      	add	sp, #20
 8000430:	f85d fb04 	ldr.w	pc, [sp], #4
 8000434:	0301000e 	.word	0x0301000e

08000438 <main>:
{
 8000438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800043c:	ed2d 8b06 	vpush	{d8-d10}
 8000440:	b094      	sub	sp, #80	; 0x50
	MPU_Conf();
 8000442:	f7ff ffe1 	bl	8000408 <MPU_Conf>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000446:	4ac6      	ldr	r2, [pc, #792]	; (8000760 <main+0x328>)
 8000448:	6953      	ldr	r3, [r2, #20]
 800044a:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 800044e:	d111      	bne.n	8000474 <main+0x3c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000450:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000454:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000458:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800045c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000460:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000464:	6953      	ldr	r3, [r2, #20]
 8000466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800046a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800046c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000470:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000474:	48ba      	ldr	r0, [pc, #744]	; (8000760 <main+0x328>)
 8000476:	6943      	ldr	r3, [r0, #20]
 8000478:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800047c:	d124      	bne.n	80004c8 <main+0x90>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800047e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000482:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000486:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800048a:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800048e:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000492:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8000496:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000498:	ea04 010c 	and.w	r1, r4, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800049c:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800049e:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80004a2:	3b01      	subs	r3, #1
 80004a4:	1c5e      	adds	r6, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004a6:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 80004aa:	d1f8      	bne.n	800049e <main+0x66>
    } while(sets-- != 0U);
 80004ac:	3c20      	subs	r4, #32
 80004ae:	f114 0f20 	cmn.w	r4, #32
 80004b2:	d1f1      	bne.n	8000498 <main+0x60>
 80004b4:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80004b8:	6943      	ldr	r3, [r0, #20]
 80004ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004be:	6143      	str	r3, [r0, #20]
 80004c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004c4:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004c8:	4da6      	ldr	r5, [pc, #664]	; (8000764 <main+0x32c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	2400      	movs	r4, #0
  HAL_Init();
 80004cc:	f001 f834 	bl	8001538 <HAL_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004d0:	2600      	movs	r6, #0
  SystemClock_Config();
 80004d2:	f7ff ff35 	bl	8000340 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 80004d8:	4622      	mov	r2, r4
 80004da:	f248 0101 	movw	r1, #32769	; 0x8001
 80004de:	48a2      	ldr	r0, [pc, #648]	; (8000768 <main+0x330>)
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004e0:	2700      	movs	r7, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 80004e6:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ea:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80004ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80004f6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80004fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000506:	f043 0301 	orr.w	r3, r3, #1
 800050a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800050e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	9302      	str	r3, [sp, #8]
 8000518:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800051e:	f043 0304 	orr.w	r3, r3, #4
 8000522:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000526:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	9303      	str	r3, [sp, #12]
 8000530:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000532:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000536:	f043 0302 	orr.w	r3, r3, #2
 800053a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800053e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000542:	f003 0302 	and.w	r3, r3, #2
 8000546:	9304      	str	r3, [sp, #16]
 8000548:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800054a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800054e:	f043 0308 	orr.w	r3, r3, #8
 8000552:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000556:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800055a:	f003 0308 	and.w	r3, r3, #8
 800055e:	9305      	str	r3, [sp, #20]
 8000560:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000562:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800056a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800056e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000576:	9306      	str	r3, [sp, #24]
 8000578:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 800057a:	f003 fb1f 	bl	8003bbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800057e:	4622      	mov	r2, r4
 8000580:	2110      	movs	r1, #16
 8000582:	487a      	ldr	r0, [pc, #488]	; (800076c <main+0x334>)
 8000584:	f003 fb1a 	bl	8003bbc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0;
 8000588:	f248 0201 	movw	r2, #32769	; 0x8001
 800058c:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800058e:	a90a      	add	r1, sp, #40	; 0x28
 8000590:	4875      	ldr	r0, [pc, #468]	; (8000768 <main+0x330>)
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0;
 8000592:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000596:	2200      	movs	r2, #0
 8000598:	2303      	movs	r3, #3
 800059a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800059e:	f003 f9df 	bl	8003960 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005a2:	2210      	movs	r2, #16
 80005a4:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a6:	a90a      	add	r1, sp, #40	; 0x28
 80005a8:	4870      	ldr	r0, [pc, #448]	; (800076c <main+0x334>)
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80005ae:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b2:	f003 f9d5 	bl	8003960 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b6:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 80005ba:	4622      	mov	r2, r4
 80005bc:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005be:	f043 0301 	orr.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 80005c2:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005c4:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 80005c8:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80005cc:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005d0:	f003 0301 	and.w	r3, r3, #1
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 80005d8:	f002 f81e 	bl	8002618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005dc:	200b      	movs	r0, #11
 80005de:	f002 f859 	bl	8002694 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 80005e2:	4622      	mov	r2, r4
 80005e4:	2101      	movs	r1, #1
 80005e6:	200c      	movs	r0, #12
 80005e8:	f002 f816 	bl	8002618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005ec:	200c      	movs	r0, #12
 80005ee:	f002 f851 	bl	8002694 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80005f2:	4621      	mov	r1, r4
 80005f4:	4622      	mov	r2, r4
 80005f6:	200d      	movs	r0, #13
 80005f8:	f002 f80e 	bl	8002618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80005fc:	200d      	movs	r0, #13
 80005fe:	f002 f849 	bl	8002694 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 8000602:	485b      	ldr	r0, [pc, #364]	; (8000770 <main+0x338>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000604:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000608:	495a      	ldr	r1, [pc, #360]	; (8000774 <main+0x33c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800060a:	6084      	str	r4, [r0, #8]
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800060c:	6584      	str	r4, [r0, #88]	; 0x58
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800060e:	e9c0 1300 	strd	r1, r3, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000612:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000616:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800061a:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCPolynomial = 0x0;
 800061e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000622:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000626:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800062a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800062e:	e9c0 4414 	strd	r4, r4, [r0, #80]	; 0x50
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000632:	e9c0 5306 	strd	r5, r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000636:	2407      	movs	r4, #7
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000638:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800063c:	60c4      	str	r4, [r0, #12]
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800063e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000640:	f005 fc18 	bl	8005e74 <HAL_SPI_Init>
 8000644:	b108      	cbz	r0, 800064a <main+0x212>
  __ASM volatile ("cpsid i" : : : "memory");
 8000646:	b672      	cpsid	i
  while (1)
 8000648:	e7fe      	b.n	8000648 <main+0x210>
  hspi3.Instance = SPI3;
 800064a:	4b4b      	ldr	r3, [pc, #300]	; (8000778 <main+0x340>)
 800064c:	4a4b      	ldr	r2, [pc, #300]	; (800077c <main+0x344>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800064e:	e9c3 0001 	strd	r0, r0, [r3, #4]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000652:	e9c3 4003 	strd	r4, r0, [r3, #12]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000656:	e9c3 0005 	strd	r0, r0, [r3, #20]
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800065a:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800065e:	e9c3 000f 	strd	r0, r0, [r3, #60]	; 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000662:	e9c3 0011 	strd	r0, r0, [r3, #68]	; 0x44
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000666:	e9c3 0013 	strd	r0, r0, [r3, #76]	; 0x4c
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800066a:	e9c3 0015 	strd	r0, r0, [r3, #84]	; 0x54
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800066e:	e9c3 6708 	strd	r6, r7, [r3, #32]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000672:	4618      	mov	r0, r3
  hspi3.Instance = SPI3;
 8000674:	601a      	str	r2, [r3, #0]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000676:	e9c3 670a 	strd	r6, r7, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800067a:	f005 fbfb 	bl	8005e74 <HAL_SPI_Init>
 800067e:	b108      	cbz	r0, 8000684 <main+0x24c>
 8000680:	b672      	cpsid	i
  while (1)
 8000682:	e7fe      	b.n	8000682 <main+0x24a>
  hspi2.Instance = SPI2;
 8000684:	4b3e      	ldr	r3, [pc, #248]	; (8000780 <main+0x348>)
 8000686:	4a3f      	ldr	r2, [pc, #252]	; (8000784 <main+0x34c>)
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000688:	6198      	str	r0, [r3, #24]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800068a:	60dc      	str	r4, [r3, #12]
  hspi2.Instance = SPI2;
 800068c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800068e:	e9c3 0001 	strd	r0, r0, [r3, #4]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000692:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000696:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800069a:	e9c3 000f 	strd	r0, r0, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800069e:	e9c3 0011 	strd	r0, r0, [r3, #68]	; 0x44
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80006a2:	e9c3 0013 	strd	r0, r0, [r3, #76]	; 0x4c
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80006a6:	e9c3 0015 	strd	r0, r0, [r3, #84]	; 0x54
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006aa:	e9c3 6708 	strd	r6, r7, [r3, #32]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006ae:	4618      	mov	r0, r3
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b0:	e9c3 670a 	strd	r6, r7, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006b4:	f005 fbde 	bl	8005e74 <HAL_SPI_Init>
 80006b8:	4605      	mov	r5, r0
 80006ba:	bb88      	cbnz	r0, 8000720 <main+0x2e8>
  ADC_ChannelConfTypeDef sConfig = {0};
 80006bc:	4601      	mov	r1, r0
 80006be:	2224      	movs	r2, #36	; 0x24
  ADC_MultiModeTypeDef multimode = {0};
 80006c0:	9009      	str	r0, [sp, #36]	; 0x24
  hadc1.Instance = ADC1;
 80006c2:	4c31      	ldr	r4, [pc, #196]	; (8000788 <main+0x350>)
  ADC_MultiModeTypeDef multimode = {0};
 80006c4:	e9cd 0007 	strd	r0, r0, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006c8:	a80a      	add	r0, sp, #40	; 0x28
 80006ca:	f006 fc79 	bl	8006fc0 <memset>
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006ce:	2303      	movs	r3, #3
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 80006d0:	f240 4201 	movw	r2, #1025	; 0x401
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d4:	4620      	mov	r0, r4
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006d6:	6323      	str	r3, [r4, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 80006dc:	6562      	str	r2, [r4, #84]	; 0x54
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 80006de:	2202      	movs	r2, #2
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006e0:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 80006e2:	2301      	movs	r3, #1
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e4:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.OversamplingMode = ENABLE;
 80006e8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 80006ec:	2320      	movs	r3, #32
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006ee:	6425      	str	r5, [r4, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80006f0:	6525      	str	r5, [r4, #80]	; 0x50
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 80006f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  hadc1.Instance = ADC1;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <main+0x354>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006f8:	2201      	movs	r2, #1
  hadc1.Instance = ADC1;
 80006fa:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006fc:	2308      	movs	r3, #8
 80006fe:	e9c4 2304 	strd	r2, r3, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000706:	8323      	strh	r3, [r4, #24]
  hadc1.Init.NbrOfConversion = 12;
 8000708:	230c      	movs	r3, #12
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070a:	e9c4 670a 	strd	r6, r7, [r4, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 12;
 800070e:	61e3      	str	r3, [r4, #28]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000710:	e9c4 5501 	strd	r5, r5, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000714:	f001 fda4 	bl	8002260 <HAL_ADC_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	b118      	cbz	r0, 8000724 <main+0x2ec>
 800071c:	b672      	cpsid	i
  while (1)
 800071e:	e7fe      	b.n	800071e <main+0x2e6>
 8000720:	b672      	cpsid	i
 8000722:	e7fe      	b.n	8000722 <main+0x2ea>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000724:	a907      	add	r1, sp, #28
 8000726:	4620      	mov	r0, r4
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000728:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800072a:	f001 fefb 	bl	8002524 <HAL_ADCEx_MultiModeConfigChannel>
 800072e:	b108      	cbz	r0, 8000734 <main+0x2fc>
 8000730:	b672      	cpsid	i
  while (1)
 8000732:	e7fe      	b.n	8000732 <main+0x2fa>
  sConfig.Channel = ADC_CHANNEL_16;
 8000734:	4a16      	ldr	r2, [pc, #88]	; (8000790 <main+0x358>)
 8000736:	2306      	movs	r3, #6
  sConfig.OffsetSignedSaturation = DISABLE;
 8000738:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073c:	a90a      	add	r1, sp, #40	; 0x28
 800073e:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_16;
 8000740:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000744:	2204      	movs	r2, #4
 8000746:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800074a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800074e:	2204      	movs	r2, #4
 8000750:	2300      	movs	r3, #0
 8000752:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000756:	f001 f8d1 	bl	80018fc <HAL_ADC_ConfigChannel>
 800075a:	b1d8      	cbz	r0, 8000794 <main+0x35c>
 800075c:	b672      	cpsid	i
  while (1)
 800075e:	e7fe      	b.n	800075e <main+0x326>
 8000760:	e000ed00 	.word	0xe000ed00
 8000764:	58024400 	.word	0x58024400
 8000768:	58020c00 	.word	0x58020c00
 800076c:	58020400 	.word	0x58020400
 8000770:	2400038c 	.word	0x2400038c
 8000774:	40013000 	.word	0x40013000
 8000778:	240004a0 	.word	0x240004a0
 800077c:	40003c00 	.word	0x40003c00
 8000780:	24000418 	.word	0x24000418
 8000784:	40003800 	.word	0x40003800
 8000788:	240001a0 	.word	0x240001a0
 800078c:	40022000 	.word	0x40022000
 8000790:	43210000 	.word	0x43210000
  sConfig.Channel = ADC_CHANNEL_17;
 8000794:	4a96      	ldr	r2, [pc, #600]	; (80009f0 <main+0x5b8>)
 8000796:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000798:	a90a      	add	r1, sp, #40	; 0x28
 800079a:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_17;
 800079c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a0:	f001 f8ac 	bl	80018fc <HAL_ADC_ConfigChannel>
 80007a4:	b108      	cbz	r0, 80007aa <main+0x372>
 80007a6:	b672      	cpsid	i
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <main+0x370>
  sConfig.Channel = ADC_CHANNEL_14;
 80007aa:	4a92      	ldr	r2, [pc, #584]	; (80009f4 <main+0x5bc>)
 80007ac:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ae:	a90a      	add	r1, sp, #40	; 0x28
 80007b0:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_14;
 80007b2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b6:	f001 f8a1 	bl	80018fc <HAL_ADC_ConfigChannel>
 80007ba:	b108      	cbz	r0, 80007c0 <main+0x388>
 80007bc:	b672      	cpsid	i
  while (1)
 80007be:	e7fe      	b.n	80007be <main+0x386>
  sConfig.Channel = ADC_CHANNEL_15;
 80007c0:	488d      	ldr	r0, [pc, #564]	; (80009f8 <main+0x5c0>)
 80007c2:	2118      	movs	r1, #24
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 80007c4:	2305      	movs	r3, #5
  sConfig.Channel = ADC_CHANNEL_15;
 80007c6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ca:	a90a      	add	r1, sp, #40	; 0x28
 80007cc:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 80007ce:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d0:	f001 f894 	bl	80018fc <HAL_ADC_ConfigChannel>
 80007d4:	b108      	cbz	r0, 80007da <main+0x3a2>
 80007d6:	b672      	cpsid	i
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <main+0x3a0>
  sConfig.Channel = ADC_CHANNEL_18;
 80007da:	4e88      	ldr	r6, [pc, #544]	; (80009fc <main+0x5c4>)
 80007dc:	f44f 7780 	mov.w	r7, #256	; 0x100
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80007e0:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e2:	4620      	mov	r0, r4
 80007e4:	a90a      	add	r1, sp, #40	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80007e6:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.Channel = ADC_CHANNEL_18;
 80007e8:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ec:	f001 f886 	bl	80018fc <HAL_ADC_ConfigChannel>
 80007f0:	b108      	cbz	r0, 80007f6 <main+0x3be>
 80007f2:	b672      	cpsid	i
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <main+0x3bc>
  sConfig.Channel = ADC_CHANNEL_19;
 80007f6:	4a82      	ldr	r2, [pc, #520]	; (8000a00 <main+0x5c8>)
 80007f8:	f44f 7383 	mov.w	r3, #262	; 0x106
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fc:	a90a      	add	r1, sp, #40	; 0x28
 80007fe:	4881      	ldr	r0, [pc, #516]	; (8000a04 <main+0x5cc>)
  sConfig.Channel = ADC_CHANNEL_19;
 8000800:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000804:	f001 f87a 	bl	80018fc <HAL_ADC_ConfigChannel>
 8000808:	b108      	cbz	r0, 800080e <main+0x3d6>
 800080a:	b672      	cpsid	i
  while (1)
 800080c:	e7fe      	b.n	800080c <main+0x3d4>
  sConfig.Channel = ADC_CHANNEL_3;
 800080e:	4a7e      	ldr	r2, [pc, #504]	; (8000a08 <main+0x5d0>)
 8000810:	f44f 7386 	mov.w	r3, #268	; 0x10c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000814:	a90a      	add	r1, sp, #40	; 0x28
 8000816:	487b      	ldr	r0, [pc, #492]	; (8000a04 <main+0x5cc>)
  sConfig.Channel = ADC_CHANNEL_3;
 8000818:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081c:	f001 f86e 	bl	80018fc <HAL_ADC_ConfigChannel>
 8000820:	b108      	cbz	r0, 8000826 <main+0x3ee>
 8000822:	b672      	cpsid	i
  while (1)
 8000824:	e7fe      	b.n	8000824 <main+0x3ec>
  sConfig.Channel = ADC_CHANNEL_7;
 8000826:	a36c      	add	r3, pc, #432	; (adr r3, 80009d8 <main+0x5a0>)
 8000828:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082c:	a90a      	add	r1, sp, #40	; 0x28
 800082e:	4875      	ldr	r0, [pc, #468]	; (8000a04 <main+0x5cc>)
  sConfig.Channel = ADC_CHANNEL_7;
 8000830:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000834:	f001 f862 	bl	80018fc <HAL_ADC_ConfigChannel>
 8000838:	b108      	cbz	r0, 800083e <main+0x406>
 800083a:	b672      	cpsid	i
  while (1)
 800083c:	e7fe      	b.n	800083c <main+0x404>
  sConfig.Channel = ADC_CHANNEL_4;
 800083e:	4a73      	ldr	r2, [pc, #460]	; (8000a0c <main+0x5d4>)
 8000840:	f44f 738c 	mov.w	r3, #280	; 0x118
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000844:	a90a      	add	r1, sp, #40	; 0x28
 8000846:	486f      	ldr	r0, [pc, #444]	; (8000a04 <main+0x5cc>)
  sConfig.Channel = ADC_CHANNEL_4;
 8000848:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084c:	f001 f856 	bl	80018fc <HAL_ADC_ConfigChannel>
 8000850:	b108      	cbz	r0, 8000856 <main+0x41e>
 8000852:	b672      	cpsid	i
  while (1)
 8000854:	e7fe      	b.n	8000854 <main+0x41c>
  sConfig.Channel = ADC_CHANNEL_8;
 8000856:	4a6e      	ldr	r2, [pc, #440]	; (8000a10 <main+0x5d8>)
 8000858:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085c:	a90a      	add	r1, sp, #40	; 0x28
 800085e:	4869      	ldr	r0, [pc, #420]	; (8000a04 <main+0x5cc>)
  sConfig.Channel = ADC_CHANNEL_8;
 8000860:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000864:	f001 f84a 	bl	80018fc <HAL_ADC_ConfigChannel>
 8000868:	b108      	cbz	r0, 800086e <main+0x436>
 800086a:	b672      	cpsid	i
  while (1)
 800086c:	e7fe      	b.n	800086c <main+0x434>
  sConfig.Channel = ADC_CHANNEL_9;
 800086e:	a35c      	add	r3, pc, #368	; (adr r3, 80009e0 <main+0x5a8>)
 8000870:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000874:	a90a      	add	r1, sp, #40	; 0x28
 8000876:	4863      	ldr	r0, [pc, #396]	; (8000a04 <main+0x5cc>)
  sConfig.Channel = ADC_CHANNEL_9;
 8000878:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087c:	f001 f83e 	bl	80018fc <HAL_ADC_ConfigChannel>
 8000880:	b108      	cbz	r0, 8000886 <main+0x44e>
 8000882:	b672      	cpsid	i
  while (1)
 8000884:	e7fe      	b.n	8000884 <main+0x44c>
  sConfig.Channel = ADC_CHANNEL_5;
 8000886:	a358      	add	r3, pc, #352	; (adr r3, 80009e8 <main+0x5b0>)
 8000888:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088c:	a90a      	add	r1, sp, #40	; 0x28
 800088e:	485d      	ldr	r0, [pc, #372]	; (8000a04 <main+0x5cc>)
  sConfig.Channel = ADC_CHANNEL_5;
 8000890:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000894:	f001 f832 	bl	80018fc <HAL_ADC_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	b108      	cbz	r0, 80008a0 <main+0x468>
 800089c:	b672      	cpsid	i
  while (1)
 800089e:	e7fe      	b.n	800089e <main+0x466>
  hrng.Instance = RNG;
 80008a0:	485c      	ldr	r0, [pc, #368]	; (8000a14 <main+0x5dc>)
 80008a2:	4a5d      	ldr	r2, [pc, #372]	; (8000a18 <main+0x5e0>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80008a4:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80008a8:	f005 f988 	bl	8005bbc <HAL_RNG_Init>
 80008ac:	4604      	mov	r4, r0
 80008ae:	b108      	cbz	r0, 80008b4 <main+0x47c>
 80008b0:	b672      	cpsid	i
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <main+0x47a>
  return __builtin_arm_get_fpscr();
 80008b4:	eef1 3a10 	vmrs	r3, fpscr
   tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 80008b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
 80008bc:	eee1 3a10 	vmsr	fpscr, r3
   for (int i = 0; i < 4; i++)
 80008c0:	4956      	ldr	r1, [pc, #344]	; (8000a1c <main+0x5e4>)
 	  SPI_TX[i] = counter++;
 80008c2:	4b57      	ldr	r3, [pc, #348]	; (8000a20 <main+0x5e8>)
 80008c4:	780a      	ldrb	r2, [r1, #0]
 	  SPI_PLUCK_TX[i] = 0;
 80008c6:	6218      	str	r0, [r3, #32]
 	  SPI_TX[i] = counter++;
 80008c8:	1c55      	adds	r5, r2, #1
 80008ca:	f362 0007 	bfi	r0, r2, #0, #8
 80008ce:	4f55      	ldr	r7, [pc, #340]	; (8000a24 <main+0x5ec>)
 80008d0:	f365 200f 	bfi	r0, r5, #8, #8
 80008d4:	1c95      	adds	r5, r2, #2
 80008d6:	4e54      	ldr	r6, [pc, #336]	; (8000a28 <main+0x5f0>)
 80008d8:	f365 4017 	bfi	r0, r5, #16, #8
 80008dc:	1cd5      	adds	r5, r2, #3
 80008de:	3204      	adds	r2, #4
 80008e0:	f8df a180 	ldr.w	sl, [pc, #384]	; 8000a64 <main+0x62c>
 80008e4:	f365 601f 	bfi	r0, r5, #24, #8
 80008e8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8000a68 <main+0x630>
 80008ec:	700a      	strb	r2, [r1, #0]
   HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 8);
 80008ee:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80008f2:	2208      	movs	r2, #8
 	  SPI_TX[i] = counter++;
 80008f4:	f843 0b20 	str.w	r0, [r3], #32
   HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 8);
 80008f8:	484c      	ldr	r0, [pc, #304]	; (8000a2c <main+0x5f4>)
 	  SPI_PLUCK_TX[i] = 0;
 80008fa:	615c      	str	r4, [r3, #20]
 80008fc:	831c      	strh	r4, [r3, #24]
   HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 8);
 80008fe:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8000a6c <main+0x634>
   	tThreshold_init(&threshold[i],700.0f, 1300.0f, &leaf);
 8000902:	4d4b      	ldr	r5, [pc, #300]	; (8000a30 <main+0x5f8>)
 8000904:	ed9f aa4b 	vldr	s20, [pc, #300]	; 8000a34 <main+0x5fc>
 8000908:	eddf 9a4b 	vldr	s19, [pc, #300]	; 8000a38 <main+0x600>
   		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 6000.0f, 0.8f, &leaf);
 800090c:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8000a3c <main+0x604>
 8000910:	eddf 8a4b 	vldr	s17, [pc, #300]	; 8000a40 <main+0x608>
   		tHighpass_init(&opticalHighpass[i][j], 100.0f, &leaf);
 8000914:	ed9f 8a4b 	vldr	s16, [pc, #300]	; 8000a44 <main+0x60c>
 	  SPI_PLUCK_TX[i] = 0;
 8000918:	e9c3 4401 	strd	r4, r4, [r3, #4]
 800091c:	e9c3 4403 	strd	r4, r4, [r3, #12]
   HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 8);
 8000920:	f005 fc3c 	bl	800619c <HAL_SPI_Receive_DMA>
   HAL_Delay(10);
 8000924:	200a      	movs	r0, #10
 8000926:	f000 fe49 	bl	80015bc <HAL_Delay>
   HAL_Delay(10);
 800092a:	200a      	movs	r0, #10
 800092c:	f000 fe46 	bl	80015bc <HAL_Delay>
   LEAF_init(&leaf, SAMPLE_RATE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 8000930:	4b45      	ldr	r3, [pc, #276]	; (8000a48 <main+0x610>)
 8000932:	4a46      	ldr	r2, [pc, #280]	; (8000a4c <main+0x614>)
 8000934:	4946      	ldr	r1, [pc, #280]	; (8000a50 <main+0x618>)
 8000936:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8000a54 <main+0x61c>
 800093a:	483d      	ldr	r0, [pc, #244]	; (8000a30 <main+0x5f8>)
 800093c:	f006 fae2 	bl	8006f04 <LEAF_init>
   	tThreshold_init(&threshold[i],700.0f, 1300.0f, &leaf);
 8000940:	eb0a 0004 	add.w	r0, sl, r4
 8000944:	eef0 0a4a 	vmov.f32	s1, s20
 8000948:	eeb0 0a69 	vmov.f32	s0, s19
 800094c:	4629      	mov	r1, r5
 800094e:	f005 feb1 	bl	80066b4 <tThreshold_init>
   	tSlide_init(&fastSlide[i],1.0f,400.0f, &leaf); //1110
 8000952:	eb09 0004 	add.w	r0, r9, r4
 8000956:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800095a:	4629      	mov	r1, r5
 800095c:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8000a58 <main+0x620>
 8000960:	f005 feda 	bl	8006718 <tSlide_init>
   	tSlide_init(&slowSlide[i],1.0f,700.0f, &leaf); //1110
 8000964:	eb08 0004 	add.w	r0, r8, r4
 8000968:	eef0 0a69 	vmov.f32	s1, s19
 800096c:	4629      	mov	r1, r5
 800096e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   for (int i = 0; i < NUM_STRINGS; i++)
 8000972:	3404      	adds	r4, #4
   	tSlide_init(&slowSlide[i],1.0f,700.0f, &leaf); //1110
 8000974:	f005 fed0 	bl	8006718 <tSlide_init>
   		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 6000.0f, 0.8f, &leaf);
 8000978:	eef0 0a49 	vmov.f32	s1, s18
 800097c:	462a      	mov	r2, r5
 800097e:	4638      	mov	r0, r7
 8000980:	eeb0 0a68 	vmov.f32	s0, s17
 8000984:	2101      	movs	r1, #1
 8000986:	f006 f961 	bl	8006c4c <tVZFilter_init>
   		tHighpass_init(&opticalHighpass[i][j], 100.0f, &leaf);
 800098a:	4630      	mov	r0, r6
 800098c:	eeb0 0a48 	vmov.f32	s0, s16
 8000990:	4629      	mov	r1, r5
 8000992:	f005 ff19 	bl	80067c8 <tHighpass_init>
   		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 6000.0f, 0.8f, &leaf);
 8000996:	1d38      	adds	r0, r7, #4
 8000998:	eef0 0a49 	vmov.f32	s1, s18
 800099c:	462a      	mov	r2, r5
 800099e:	eeb0 0a68 	vmov.f32	s0, s17
 80009a2:	2101      	movs	r1, #1
 80009a4:	f006 f952 	bl	8006c4c <tVZFilter_init>
   		tHighpass_init(&opticalHighpass[i][j], 100.0f, &leaf);
 80009a8:	1d30      	adds	r0, r6, #4
 80009aa:	eeb0 0a48 	vmov.f32	s0, s16
 80009ae:	4629      	mov	r1, r5
 80009b0:	f005 ff0a 	bl	80067c8 <tHighpass_init>
   for (int i = 0; i < NUM_STRINGS; i++)
 80009b4:	2c30      	cmp	r4, #48	; 0x30
 80009b6:	f107 0708 	add.w	r7, r7, #8
 80009ba:	f106 0608 	add.w	r6, r6, #8
 80009be:	d1bf      	bne.n	8000940 <main+0x508>
   LEAF_generate_atodb(atodbTable, ATODB_TABLE_SIZE);
 80009c0:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80009c4:	4825      	ldr	r0, [pc, #148]	; (8000a5c <main+0x624>)
 80009c6:	f006 f97b 	bl	8006cc0 <LEAF_generate_atodb>
   HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values1,NUM_ADC_CHANNELS * ADC_BUFFER_SIZE);
 80009ca:	22c0      	movs	r2, #192	; 0xc0
 80009cc:	4924      	ldr	r1, [pc, #144]	; (8000a60 <main+0x628>)
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <main+0x5cc>)
 80009d0:	f001 fb14 	bl	8001ffc <HAL_ADC_Start_DMA>
   while (1)
 80009d4:	e7fe      	b.n	80009d4 <main+0x59c>
 80009d6:	bf00      	nop
 80009d8:	1d500080 	.word	0x1d500080
 80009dc:	00000112 	.word	0x00000112
 80009e0:	25b00200 	.word	0x25b00200
 80009e4:	00000206 	.word	0x00000206
 80009e8:	14f00020 	.word	0x14f00020
 80009ec:	0000020c 	.word	0x0000020c
 80009f0:	47520000 	.word	0x47520000
 80009f4:	3ac04000 	.word	0x3ac04000
 80009f8:	3ef08000 	.word	0x3ef08000
 80009fc:	4b840000 	.word	0x4b840000
 8000a00:	4fb80000 	.word	0x4fb80000
 8000a04:	240001a0 	.word	0x240001a0
 8000a08:	0c900008 	.word	0x0c900008
 8000a0c:	10c00010 	.word	0x10c00010
 8000a10:	21800100 	.word	0x21800100
 8000a14:	24000378 	.word	0x24000378
 8000a18:	48021800 	.word	0x48021800
 8000a1c:	24000104 	.word	0x24000104
 8000a20:	30000000 	.word	0x30000000
 8000a24:	24000608 	.word	0x24000608
 8000a28:	240005a8 	.word	0x240005a8
 8000a2c:	24000418 	.word	0x24000418
 8000a30:	24000558 	.word	0x24000558
 8000a34:	44a28000 	.word	0x44a28000
 8000a38:	442f0000 	.word	0x442f0000
 8000a3c:	3f4ccccd 	.word	0x3f4ccccd
 8000a40:	45bb8000 	.word	0x45bb8000
 8000a44:	42c80000 	.word	0x42c80000
 8000a48:	08000311 	.word	0x08000311
 8000a4c:	00033450 	.word	0x00033450
 8000a50:	240194c0 	.word	0x240194c0
 8000a54:	473b8000 	.word	0x473b8000
 8000a58:	43c80000 	.word	0x43c80000
 8000a5c:	24000e20 	.word	0x24000e20
 8000a60:	30000060 	.word	0x30000060
 8000a64:	240007d4 	.word	0x240007d4
 8000a68:	24000170 	.word	0x24000170
 8000a6c:	240006f8 	.word	0x240006f8

08000a70 <attackDetectPeak2>:
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 8000a70:	ee07 1a90 	vmov	s15, r1
 8000a74:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8000c1c <attackDetectPeak2+0x1ac>
 8000a78:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8000c20 <attackDetectPeak2+0x1b0>
 8000a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8000a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 8000a84:	ee77 7ac7 	vsub.f32	s15, s15, s14
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000a88:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8000c6c <attackDetectPeak2+0x1fc>
		tempSamp = tVZFilter_tick(&opticalLowpass[whichString][k], tempSamp * 1.0f);
 8000a8c:	4f65      	ldr	r7, [pc, #404]	; (8000c24 <attackDetectPeak2+0x1b4>)
 8000a8e:	00c6      	lsls	r6, r0, #3
{
 8000a90:	4604      	mov	r4, r0
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000a92:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
 8000a96:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000a9a:	00a5      	lsls	r5, r4, #2
{
 8000a9c:	ed2d 8b02 	vpush	{d8}
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000aa0:	f005 feb2 	bl	8006808 <tHighpass_tick>
		tempSamp = tVZFilter_tick(&opticalLowpass[whichString][k], tempSamp * 1.0f);
 8000aa4:	19b8      	adds	r0, r7, r6
 8000aa6:	3604      	adds	r6, #4
 8000aa8:	f005 febe 	bl	8006828 <tVZFilter_tick>
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000aac:	eb08 0006 	add.w	r0, r8, r6
 8000ab0:	f005 feaa 	bl	8006808 <tHighpass_tick>
		tempSamp = tVZFilter_tick(&opticalLowpass[whichString][k], tempSamp * 1.0f);
 8000ab4:	19b8      	adds	r0, r7, r6
 8000ab6:	f005 feb7 	bl	8006828 <tVZFilter_tick>
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 8000aba:	485b      	ldr	r0, [pc, #364]	; (8000c28 <attackDetectPeak2+0x1b8>)
 8000abc:	eeb0 0ac0 	vabs.f32	s0, s0
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000ac0:	4e5a      	ldr	r6, [pc, #360]	; (8000c2c <attackDetectPeak2+0x1bc>)
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 8000ac2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
	dbSmoothed2 = LEAF_clip(-45.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 8000ac6:	4f5a      	ldr	r7, [pc, #360]	; (8000c30 <attackDetectPeak2+0x1c0>)
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 8000ac8:	f005 fe4c 	bl	8006764 <tSlide_tick>
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000acc:	4859      	ldr	r0, [pc, #356]	; (8000c34 <attackDetectPeak2+0x1c4>)
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 8000ace:	4b5a      	ldr	r3, [pc, #360]	; (8000c38 <attackDetectPeak2+0x1c8>)
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000ad0:	4428      	add	r0, r5
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 8000ad2:	ed83 0a00 	vstr	s0, [r3]
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000ad6:	f005 fe45 	bl	8006764 <tSlide_tick>
 8000ada:	eef0 0a40 	vmov.f32	s1, s0
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 8000ade:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8000c3c <attackDetectPeak2+0x1cc>
 8000ae2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000ae6:	edc6 0a00 	vstr	s1, [r6]
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 8000aea:	f006 f8d5 	bl	8006c98 <LEAF_clip>
 8000aee:	eeb0 7a40 	vmov.f32	s14, s0
	dbSmoothed2 = LEAF_clip(-45.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 8000af2:	eddf 7a53 	vldr	s15, [pc, #332]	; 8000c40 <attackDetectPeak2+0x1d0>
 8000af6:	4b53      	ldr	r3, [pc, #332]	; (8000c44 <attackDetectPeak2+0x1d4>)
 8000af8:	eeb2 1a08 	vmov.f32	s2, #40	; 0x41400000  12.0
 8000afc:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8000c48 <attackDetectPeak2+0x1d8>
 8000b00:	ee67 7a27 	vmul.f32	s15, s14, s15
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 8000b04:	ed86 7a00 	vstr	s14, [r6]
	dbSmoothed2 = LEAF_clip(-45.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 8000b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b0c:	ee17 2a90 	vmov	r2, s15
 8000b10:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000b14:	edd3 0a00 	vldr	s1, [r3]
 8000b18:	f006 f8be 	bl	8006c98 <LEAF_clip>
 8000b1c:	ed87 0a00 	vstr	s0, [r7]
	if (whichString == 0)
 8000b20:	b914      	cbnz	r4, 8000b28 <attackDetectPeak2+0xb8>
		dbSmoothedStorage = dbSmoothed2;
 8000b22:	4b4a      	ldr	r3, [pc, #296]	; (8000c4c <attackDetectPeak2+0x1dc>)
 8000b24:	ed83 0a00 	vstr	s0, [r3]
	float integerVersion = Dsmoothed2 * (TWO_TO_16 - 1);
 8000b28:	edd6 8a00 	vldr	s17, [r6]
 8000b2c:	eddf 7a48 	vldr	s15, [pc, #288]	; 8000c50 <attackDetectPeak2+0x1e0>
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8000b30:	4e48      	ldr	r6, [pc, #288]	; (8000c54 <attackDetectPeak2+0x1e4>)
	integerVersions[whichString] = integerVersion;
 8000b32:	4b49      	ldr	r3, [pc, #292]	; (8000c58 <attackDetectPeak2+0x1e8>)
	float integerVersion = Dsmoothed2 * (TWO_TO_16 - 1);
 8000b34:	ee68 8aa7 	vmul.f32	s17, s17, s15
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8000b38:	1972      	adds	r2, r6, r5
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000b3a:	4848      	ldr	r0, [pc, #288]	; (8000c5c <attackDetectPeak2+0x1ec>)
	integerVersions[whichString] = integerVersion;
 8000b3c:	442b      	add	r3, r5
		armed[whichString] = 1;
 8000b3e:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8000c70 <attackDetectPeak2+0x200>
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8000b42:	ed92 8a00 	vldr	s16, [r2]
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000b46:	4428      	add	r0, r5
	integerVersions[whichString] = integerVersion;
 8000b48:	edc3 8a00 	vstr	s17, [r3]
	slopeStorage[whichString] = slope;
 8000b4c:	4b44      	ldr	r3, [pc, #272]	; (8000c60 <attackDetectPeak2+0x1f0>)
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8000b4e:	ee30 8a48 	vsub.f32	s16, s0, s16
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000b52:	eeb0 0a68 	vmov.f32	s0, s17
	slopeStorage[whichString] = slope;
 8000b56:	442b      	add	r3, r5
 8000b58:	ed83 8a00 	vstr	s16, [r3]
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000b5c:	f005 fdc2 	bl	80066e4 <tThreshold_tick>
 8000b60:	4b40      	ldr	r3, [pc, #256]	; (8000c64 <attackDetectPeak2+0x1f4>)
	if ((slope > .3f) && (threshOut > 0))
 8000b62:	2800      	cmp	r0, #0
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000b64:	6018      	str	r0, [r3, #0]
	if ((slope > .3f) && (threshOut > 0))
 8000b66:	dd06      	ble.n	8000b76 <attackDetectPeak2+0x106>
 8000b68:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8000c68 <attackDetectPeak2+0x1f8>
 8000b6c:	eeb4 8a67 	vcmp.f32	s16, s15
 8000b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b74:	dc0c      	bgt.n	8000b90 <attackDetectPeak2+0x120>
	if (armed[whichString] == 1)
 8000b76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d00b      	beq.n	8000b96 <attackDetectPeak2+0x126>
{
 8000b7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	prevdbSmoothed2[whichString] = dbSmoothed2;
 8000b82:	4435      	add	r5, r6
 8000b84:	683b      	ldr	r3, [r7, #0]
}
 8000b86:	ecbd 8b02 	vpop	{d8}
	prevdbSmoothed2[whichString] = dbSmoothed2;
 8000b8a:	602b      	str	r3, [r5, #0]
}
 8000b8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		armed[whichString] = 1;
 8000b90:	2301      	movs	r3, #1
 8000b92:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
		if (integerVersion > stringMaxes[whichString])
 8000b96:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8000c74 <attackDetectPeak2+0x204>
 8000b9a:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8000b9e:	ee07 3a90 	vmov	s15, r3
 8000ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ba6:	eef4 7ae8 	vcmpe.f32	s15, s17
 8000baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bae:	d505      	bpl.n	8000bbc <attackDetectPeak2+0x14c>
			stringMaxes[whichString] = integerVersion;
 8000bb0:	eefd 8ae8 	vcvt.s32.f32	s17, s17
 8000bb4:	ee18 3a90 	vmov	r3, s17
 8000bb8:	f84a 3024 	str.w	r3, [sl, r4, lsl #2]
		armedCounter[whichString]++;
 8000bbc:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8000c78 <attackDetectPeak2+0x208>
		if (slope <= 0.0f)
 8000bc0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
			downCounter[whichString]++;
 8000bc4:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8000c7c <attackDetectPeak2+0x20c>
		armedCounter[whichString]++;
 8000bc8:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
		if (slope <= 0.0f)
 8000bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		armedCounter[whichString]++;
 8000bd0:	f103 0301 	add.w	r3, r3, #1
 8000bd4:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
			downCounter[whichString]++;
 8000bd8:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 8000bdc:	bf9c      	itt	ls
 8000bde:	3301      	addls	r3, #1
 8000be0:	f84b 3024 	strls.w	r3, [fp, r4, lsl #2]
		if (downCounter[whichString] > 128)
 8000be4:	2b80      	cmp	r3, #128	; 0x80
 8000be6:	ddca      	ble.n	8000b7e <attackDetectPeak2+0x10e>
			output = LEAF_clip(0.0f, output, 65535.0f);
 8000be8:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8000bec:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8000c50 <attackDetectPeak2+0x1e0>
 8000bf0:	ee07 3a90 	vmov	s15, r3
 8000bf4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000c3c <attackDetectPeak2+0x1cc>
 8000bf8:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8000bfc:	f006 f84c 	bl	8006c98 <LEAF_clip>
	return (int)output;
 8000c00:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			armed[whichString] = 0;
 8000c04:	2300      	movs	r3, #0
	return (int)output;
 8000c06:	ee17 0a90 	vmov	r0, s15
			armed[whichString] = 0;
 8000c0a:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
			armedCounter[whichString] = 0;
 8000c0e:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
			downCounter[whichString] = 0;
 8000c12:	f84b 3024 	str.w	r3, [fp, r4, lsl #2]
			stringMaxes[whichString] = 0;
 8000c16:	f84a 3024 	str.w	r3, [sl, r4, lsl #2]
 8000c1a:	e7b2      	b.n	8000b82 <attackDetectPeak2+0x112>
 8000c1c:	47000000 	.word	0x47000000
 8000c20:	37fffffc 	.word	0x37fffffc
 8000c24:	24000608 	.word	0x24000608
 8000c28:	24000170 	.word	0x24000170
 8000c2c:	24000098 	.word	0x24000098
 8000c30:	24000108 	.word	0x24000108
 8000c34:	240006f8 	.word	0x240006f8
 8000c38:	24000094 	.word	0x24000094
 8000c3c:	00000000 	.word	0x00000000
 8000c40:	46c34e00 	.word	0x46c34e00
 8000c44:	24000e20 	.word	0x24000e20
 8000c48:	c2340000 	.word	0xc2340000
 8000c4c:	2400010c 	.word	0x2400010c
 8000c50:	477fff00 	.word	0x477fff00
 8000c54:	24000698 	.word	0x24000698
 8000c58:	24000528 	.word	0x24000528
 8000c5c:	240007d4 	.word	0x240007d4
 8000c60:	240006c8 	.word	0x240006c8
 8000c64:	240007d0 	.word	0x240007d0
 8000c68:	3e99999a 	.word	0x3e99999a
 8000c6c:	240005a8 	.word	0x240005a8
 8000c70:	240000a4 	.word	0x240000a4
 8000c74:	24000728 	.word	0x24000728
 8000c78:	240000d4 	.word	0x240000d4
 8000c7c:	24000140 	.word	0x24000140

08000c80 <ADC_Frame>:
{
 8000c80:	4603      	mov	r3, r0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	485e      	ldr	r0, [pc, #376]	; (8000e00 <ADC_Frame+0x180>)
 8000c86:	4611      	mov	r1, r2
{
 8000c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c8c:	461c      	mov	r4, r3
 8000c8e:	b087      	sub	sp, #28
 8000c90:	f8df a190 	ldr.w	sl, [pc, #400]	; 8000e24 <ADC_Frame+0x1a4>
 8000c94:	9302      	str	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000c96:	f002 ff91 	bl	8003bbc <HAL_GPIO_WritePin>
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 8000c9a:	4b5a      	ldr	r3, [pc, #360]	; (8000e04 <ADC_Frame+0x184>)
 8000c9c:	4621      	mov	r1, r4
 8000c9e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000ca2:	3107      	adds	r1, #7
 8000ca4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8000ca8:	3b40      	subs	r3, #64	; 0x40
 8000caa:	9104      	str	r1, [sp, #16]
	int changeHappened = 0;
 8000cac:	2100      	movs	r1, #0
 8000cae:	9201      	str	r2, [sp, #4]
 8000cb0:	9305      	str	r3, [sp, #20]
 8000cb2:	4a55      	ldr	r2, [pc, #340]	; (8000e08 <ADC_Frame+0x188>)
 8000cb4:	4b55      	ldr	r3, [pc, #340]	; (8000e0c <ADC_Frame+0x18c>)
 8000cb6:	9100      	str	r1, [sp, #0]
 8000cb8:	9303      	str	r3, [sp, #12]
		if (howManyFrames > 0)
 8000cba:	6813      	ldr	r3, [r2, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	dd01      	ble.n	8000cc4 <ADC_Frame+0x44>
			howManyFrames--;
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	6013      	str	r3, [r2, #0]
			string_values[k] = ADC_values1[(i*NUM_ADC_CHANNELS) + k];
 8000cc4:	9c01      	ldr	r4, [sp, #4]
 8000cc6:	9d03      	ldr	r5, [sp, #12]
 8000cc8:	8820      	ldrh	r0, [r4, #0]
 8000cca:	8863      	ldrh	r3, [r4, #2]
 8000ccc:	88a1      	ldrh	r1, [r4, #4]
 8000cce:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8000e0c <ADC_Frame+0x18c>
 8000cd2:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8000e28 <ADC_Frame+0x1a8>
 8000cd6:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8000e2c <ADC_Frame+0x1ac>
 8000cda:	4f4d      	ldr	r7, [pc, #308]	; (8000e10 <ADC_Frame+0x190>)
 8000cdc:	4e4d      	ldr	r6, [pc, #308]	; (8000e14 <ADC_Frame+0x194>)
 8000cde:	f8cd b00c 	str.w	fp, [sp, #12]
 8000ce2:	e9c5 0300 	strd	r0, r3, [r5]
 8000ce6:	88e3      	ldrh	r3, [r4, #6]
 8000ce8:	8920      	ldrh	r0, [r4, #8]
 8000cea:	e9c5 1302 	strd	r1, r3, [r5, #8]
 8000cee:	8963      	ldrh	r3, [r4, #10]
 8000cf0:	89a1      	ldrh	r1, [r4, #12]
 8000cf2:	e9c5 0304 	strd	r0, r3, [r5, #16]
 8000cf6:	89e3      	ldrh	r3, [r4, #14]
 8000cf8:	8a20      	ldrh	r0, [r4, #16]
 8000cfa:	e9c5 1306 	strd	r1, r3, [r5, #24]
 8000cfe:	8a63      	ldrh	r3, [r4, #18]
 8000d00:	8aa1      	ldrh	r1, [r4, #20]
 8000d02:	e9c5 0308 	strd	r0, r3, [r5, #32]
 8000d06:	8ae3      	ldrh	r3, [r4, #22]
 8000d08:	2401      	movs	r4, #1
 8000d0a:	62a9      	str	r1, [r5, #40]	; 0x28
 8000d0c:	62eb      	str	r3, [r5, #44]	; 0x2c
		for (int j = 0; j < 12; j++)
 8000d0e:	4d42      	ldr	r5, [pc, #264]	; (8000e18 <ADC_Frame+0x198>)
 8000d10:	e025      	b.n	8000d5e <ADC_Frame+0xde>
				stringTouchRH[j] = (RHbits[0] >> j) & 1;
 8000d12:	f8da 3000 	ldr.w	r3, [sl]
 8000d16:	4103      	asrs	r3, r0
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	802b      	strh	r3, [r5, #0]
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8000d1e:	f7ff fea7 	bl	8000a70 <attackDetectPeak2>
			if (howManyFrames == 0)
 8000d22:	4a39      	ldr	r2, [pc, #228]	; (8000e08 <ADC_Frame+0x188>)
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8000d24:	6030      	str	r0, [r6, #0]
			if (howManyFrames == 0)
 8000d26:	6813      	ldr	r3, [r2, #0]
 8000d28:	b98b      	cbnz	r3, 8000d4e <ADC_Frame+0xce>
				if ((didPlucked[j] > 0) && (!stringSounding[j]))
 8000d2a:	2800      	cmp	r0, #0
 8000d2c:	dd2e      	ble.n	8000d8c <ADC_Frame+0x10c>
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b94b      	cbnz	r3, 8000d46 <ADC_Frame+0xc6>
					stringSounding[j] = 1;
 8000d32:	2301      	movs	r3, #1
					SPI_PLUCK_TX[(j * 2) + 2] = (didPlucked[j] & 0xff);
 8000d34:	f888 0002 	strb.w	r0, [r8, #2]
					pluckValues[j] = didPlucked[j];
 8000d38:	f8c9 0000 	str.w	r0, [r9]
					SPI_PLUCK_TX[(j * 2) + 1] = (didPlucked[j] >> 8);
 8000d3c:	1200      	asrs	r0, r0, #8
					stringSounding[j] = 1;
 8000d3e:	603b      	str	r3, [r7, #0]
					SPI_PLUCK_TX[(j * 2) + 1] = (didPlucked[j] >> 8);
 8000d40:	f888 0001 	strb.w	r0, [r8, #1]
					changeHappened = 1;
 8000d44:	9300      	str	r3, [sp, #0]
				if ((stringTouchRH[j]) && (stringSounding[j]))
 8000d46:	882b      	ldrh	r3, [r5, #0]
 8000d48:	bb33      	cbnz	r3, 8000d98 <ADC_Frame+0x118>
		for (int j = 0; j < 12; j++)
 8000d4a:	2c0c      	cmp	r4, #12
 8000d4c:	d034      	beq.n	8000db8 <ADC_Frame+0x138>
 8000d4e:	3401      	adds	r4, #1
 8000d50:	f108 0802 	add.w	r8, r8, #2
 8000d54:	f109 0904 	add.w	r9, r9, #4
 8000d58:	3704      	adds	r7, #4
 8000d5a:	3502      	adds	r5, #2
 8000d5c:	3604      	adds	r6, #4
 8000d5e:	1e60      	subs	r0, r4, #1
			int tempInt = string_values[j];
 8000d60:	f85b 1b04 	ldr.w	r1, [fp], #4
			if (j < 8)
 8000d64:	2807      	cmp	r0, #7
 8000d66:	d9d4      	bls.n	8000d12 <ADC_Frame+0x92>
				stringTouchRH[j] = (RHbits[1] >> (j-8)) & 1;
 8000d68:	f8da 3004 	ldr.w	r3, [sl, #4]
 8000d6c:	f1a4 0c09 	sub.w	ip, r4, #9
 8000d70:	fa43 f30c 	asr.w	r3, r3, ip
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	802b      	strh	r3, [r5, #0]
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8000d7a:	f7ff fe79 	bl	8000a70 <attackDetectPeak2>
			if (howManyFrames == 0)
 8000d7e:	4a22      	ldr	r2, [pc, #136]	; (8000e08 <ADC_Frame+0x188>)
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8000d80:	6030      	str	r0, [r6, #0]
			if (howManyFrames == 0)
 8000d82:	6813      	ldr	r3, [r2, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1e0      	bne.n	8000d4a <ADC_Frame+0xca>
				if ((didPlucked[j] > 0) && (!stringSounding[j]))
 8000d88:	2800      	cmp	r0, #0
 8000d8a:	dcd0      	bgt.n	8000d2e <ADC_Frame+0xae>
				if ((stringTouchRH[j]) && (stringSounding[j]))
 8000d8c:	882b      	ldrh	r3, [r5, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0db      	beq.n	8000d4a <ADC_Frame+0xca>
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0d8      	beq.n	8000d4a <ADC_Frame+0xca>
					SPI_PLUCK_TX[(j * 2) + 1] = 0;
 8000d98:	f04f 0300 	mov.w	r3, #0
		for (int j = 0; j < 12; j++)
 8000d9c:	2c0c      	cmp	r4, #12
					SPI_PLUCK_TX[(j * 2) + 1] = 0;
 8000d9e:	f888 3001 	strb.w	r3, [r8, #1]
					SPI_PLUCK_TX[(j * 2) + 2] = 0;
 8000da2:	f888 3002 	strb.w	r3, [r8, #2]
					pluckValues[j] = 0;
 8000da6:	f04f 0300 	mov.w	r3, #0
 8000daa:	f8c9 3000 	str.w	r3, [r9]
					stringSounding[j] = 0;
 8000dae:	603b      	str	r3, [r7, #0]
					changeHappened = 1;
 8000db0:	f04f 0301 	mov.w	r3, #1
 8000db4:	9300      	str	r3, [sp, #0]
		for (int j = 0; j < 12; j++)
 8000db6:	d1ca      	bne.n	8000d4e <ADC_Frame+0xce>
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 8000db8:	9901      	ldr	r1, [sp, #4]
 8000dba:	9b02      	ldr	r3, [sp, #8]
 8000dbc:	3118      	adds	r1, #24
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	9101      	str	r1, [sp, #4]
 8000dc2:	9904      	ldr	r1, [sp, #16]
 8000dc4:	9302      	str	r3, [sp, #8]
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	f77f af77 	ble.w	8000cba <ADC_Frame+0x3a>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2101      	movs	r1, #1
 8000dd0:	480b      	ldr	r0, [pc, #44]	; (8000e00 <ADC_Frame+0x180>)
 8000dd2:	f002 fef3 	bl	8003bbc <HAL_GPIO_WritePin>
	if (changeHappened)
 8000dd6:	9b00      	ldr	r3, [sp, #0]
 8000dd8:	b913      	cbnz	r3, 8000de0 <ADC_Frame+0x160>
}
 8000dda:	b007      	add	sp, #28
 8000ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SPI_PLUCK_TX[0] = 254;
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <ADC_Frame+0x19c>)
		SPI_PLUCK_TX[25] = 253;
 8000de2:	20fd      	movs	r0, #253	; 0xfd
		SPI_PLUCK_TX[0] = 254;
 8000de4:	24fe      	movs	r4, #254	; 0xfe
		HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 26);
 8000de6:	221a      	movs	r2, #26
		SPI_PLUCK_TX[25] = 253;
 8000de8:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
		HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 26);
 8000dec:	9905      	ldr	r1, [sp, #20]
 8000dee:	480c      	ldr	r0, [pc, #48]	; (8000e20 <ADC_Frame+0x1a0>)
		SPI_PLUCK_TX[0] = 254;
 8000df0:	f883 4020 	strb.w	r4, [r3, #32]
}
 8000df4:	b007      	add	sp, #28
 8000df6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 26);
 8000dfa:	f005 b90f 	b.w	800601c <HAL_SPI_Transmit_DMA>
 8000dfe:	bf00      	nop
 8000e00:	58020c00 	.word	0x58020c00
 8000e04:	30000060 	.word	0x30000060
 8000e08:	24000000 	.word	0x24000000
 8000e0c:	240007a0 	.word	0x240007a0
 8000e10:	24000758 	.word	0x24000758
 8000e14:	24000110 	.word	0x24000110
 8000e18:	24000788 	.word	0x24000788
 8000e1c:	30000000 	.word	0x30000000
 8000e20:	2400038c 	.word	0x2400038c
 8000e24:	2400009c 	.word	0x2400009c
 8000e28:	30000020 	.word	0x30000020
 8000e2c:	24000668 	.word	0x24000668

08000e30 <HAL_ADC_ConvCpltCallback>:
	ADC_Frame(ADC_FRAME_SIZE);
 8000e30:	2008      	movs	r0, #8
 8000e32:	f7ff bf25 	b.w	8000c80 <ADC_Frame>
 8000e36:	bf00      	nop

08000e38 <HAL_ADC_ConvHalfCpltCallback>:
	ADC_Frame(0);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff bf21 	b.w	8000c80 <ADC_Frame>
 8000e3e:	bf00      	nop

08000e40 <HAL_SPI_RxCpltCallback>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2110      	movs	r1, #16
 8000e44:	480a      	ldr	r0, [pc, #40]	; (8000e70 <HAL_SPI_RxCpltCallback+0x30>)
{
 8000e46:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e48:	f002 feb8 	bl	8003bbc <HAL_GPIO_WritePin>
	if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <HAL_SPI_RxCpltCallback+0x34>)
 8000e4e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8000e52:	2afe      	cmp	r2, #254	; 0xfe
 8000e54:	d000      	beq.n	8000e58 <HAL_SPI_RxCpltCallback+0x18>
}
 8000e56:	bd08      	pop	{r3, pc}
	if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 8000e58:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8000e5c:	2afd      	cmp	r2, #253	; 0xfd
 8000e5e:	d1fa      	bne.n	8000e56 <HAL_SPI_RxCpltCallback+0x16>
			RHbits[i] = SPI_RX[i+4];
 8000e60:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <HAL_SPI_RxCpltCallback+0x38>)
 8000e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e6a:	e9c2 1300 	strd	r1, r3, [r2]
}
 8000e6e:	bd08      	pop	{r3, pc}
 8000e70:	58020400 	.word	0x58020400
 8000e74:	30000000 	.word	0x30000000
 8000e78:	2400009c 	.word	0x2400009c

08000e7c <HAL_SPI_RxHalfCpltCallback>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2110      	movs	r1, #16
 8000e80:	480a      	ldr	r0, [pc, #40]	; (8000eac <HAL_SPI_RxHalfCpltCallback+0x30>)
{
 8000e82:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000e84:	f002 fe9a 	bl	8003bbc <HAL_GPIO_WritePin>
	if ((SPI_RX[2] == 254) && (SPI_RX[3] == 253))
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <HAL_SPI_RxHalfCpltCallback+0x34>)
 8000e8a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8000e8e:	2afe      	cmp	r2, #254	; 0xfe
 8000e90:	d000      	beq.n	8000e94 <HAL_SPI_RxHalfCpltCallback+0x18>
}
 8000e92:	bd08      	pop	{r3, pc}
	if ((SPI_RX[2] == 254) && (SPI_RX[3] == 253))
 8000e94:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8000e98:	2afd      	cmp	r2, #253	; 0xfd
 8000e9a:	d1fa      	bne.n	8000e92 <HAL_SPI_RxHalfCpltCallback+0x16>
			RHbits[i] = SPI_RX[i];
 8000e9c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_SPI_RxHalfCpltCallback+0x38>)
 8000ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ea6:	e9c2 1300 	strd	r1, r3, [r2]
}
 8000eaa:	bd08      	pop	{r3, pc}
 8000eac:	58020400 	.word	0x58020400
 8000eb0:	30000000 	.word	0x30000000
 8000eb4:	2400009c 	.word	0x2400009c

08000eb8 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb8:	b672      	cpsid	i
  while (1)
 8000eba:	e7fe      	b.n	8000eba <Error_Handler+0x2>

08000ebc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <HAL_MspInit+0x20>)
{
 8000ebe:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000ec4:	f042 0202 	orr.w	r2, r2, #2
 8000ec8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000ecc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	9301      	str	r3, [sp, #4]
 8000ed6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed8:	b002      	add	sp, #8
 8000eda:	4770      	bx	lr
 8000edc:	58024400 	.word	0x58024400

08000ee0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ee0:	b570      	push	{r4, r5, r6, lr}
 8000ee2:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	2100      	movs	r1, #0
{
 8000ee6:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee8:	22b8      	movs	r2, #184	; 0xb8
 8000eea:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	9108      	str	r1, [sp, #32]
 8000eee:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000ef2:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef6:	f006 f863 	bl	8006fc0 <memset>
  if(hadc->Instance==ADC1)
 8000efa:	4b4f      	ldr	r3, [pc, #316]	; (8001038 <HAL_ADC_MspInit+0x158>)
 8000efc:	6822      	ldr	r2, [r4, #0]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d001      	beq.n	8000f06 <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f02:	b038      	add	sp, #224	; 0xe0
 8000f04:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f06:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f0a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0c:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000f12:	2219      	movs	r2, #25
 8000f14:	23dc      	movs	r3, #220	; 0xdc
 8000f16:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000f22:	f44f 7300 	mov.w	r3, #512	; 0x200
    PeriphClkInitStruct.PLL3.PLL3R = 5;
 8000f26:	2205      	movs	r2, #5
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000f28:	931a      	str	r3, [sp, #104]	; 0x68
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000f2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    PeriphClkInitStruct.PLL3.PLL3R = 5;
 8000f2e:	9218      	str	r2, [sp, #96]	; 0x60
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000f30:	9332      	str	r3, [sp, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f32:	f003 fcdf 	bl	80048f4 <HAL_RCCEx_PeriphCLKConfig>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	d177      	bne.n	800102a <HAL_ADC_MspInit+0x14a>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f3a:	4b40      	ldr	r3, [pc, #256]	; (800103c <HAL_ADC_MspInit+0x15c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	4840      	ldr	r0, [pc, #256]	; (8001040 <HAL_ADC_MspInit+0x160>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f40:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    hdma_adc1.Instance = DMA1_Stream2;
 8000f44:	4d3f      	ldr	r5, [pc, #252]	; (8001044 <HAL_ADC_MspInit+0x164>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f46:	f042 0220 	orr.w	r2, r2, #32
 8000f4a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000f4e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000f52:	f002 0220 	and.w	r2, r2, #32
 8000f56:	9200      	str	r2, [sp, #0]
 8000f58:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f5e:	f042 0201 	orr.w	r2, r2, #1
 8000f62:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f66:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f6a:	f002 0201 	and.w	r2, r2, #1
 8000f6e:	9201      	str	r2, [sp, #4]
 8000f70:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f76:	f042 0204 	orr.w	r2, r2, #4
 8000f7a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f82:	f002 0204 	and.w	r2, r2, #4
 8000f86:	9202      	str	r2, [sp, #8]
 8000f88:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f8e:	f042 0202 	orr.w	r2, r2, #2
 8000f92:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f96:	22ff      	movs	r2, #255	; 0xff
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000fa4:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000faa:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f002 fcd7 	bl	8003960 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fb2:	2230      	movs	r2, #48	; 0x30
 8000fb4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb6:	a904      	add	r1, sp, #16
 8000fb8:	4823      	ldr	r0, [pc, #140]	; (8001048 <HAL_ADC_MspInit+0x168>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fbc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc0:	f002 fcce 	bl	8003960 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	4820      	ldr	r0, [pc, #128]	; (800104c <HAL_ADC_MspInit+0x16c>)
 8000fca:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fce:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f002 fcc5 	bl	8003960 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream2;
 8000fd6:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <HAL_ADC_MspInit+0x170>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000fd8:	2309      	movs	r3, #9
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fda:	4628      	mov	r0, r5
    hdma_adc1.Instance = DMA1_Stream2;
 8000fdc:	602a      	str	r2, [r5, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000fe2:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fe8:	612a      	str	r2, [r5, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fee:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ff4:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff6:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8000ff8:	62ae      	str	r6, [r5, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000ffa:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ffc:	632e      	str	r6, [r5, #48]	; 0x30
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ffe:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001002:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001006:	2304      	movs	r3, #4
 8001008:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800100c:	f001 fc9c 	bl	8002948 <HAL_DMA_Init>
 8001010:	b970      	cbnz	r0, 8001030 <HAL_ADC_MspInit+0x150>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001016:	65a5      	str	r5, [r4, #88]	; 0x58
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001018:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800101a:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800101c:	f001 fafc 	bl	8002618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001020:	2012      	movs	r0, #18
 8001022:	f001 fb37 	bl	8002694 <HAL_NVIC_EnableIRQ>
}
 8001026:	b038      	add	sp, #224	; 0xe0
 8001028:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800102a:	f7ff ff45 	bl	8000eb8 <Error_Handler>
 800102e:	e784      	b.n	8000f3a <HAL_ADC_MspInit+0x5a>
      Error_Handler();
 8001030:	f7ff ff42 	bl	8000eb8 <Error_Handler>
 8001034:	e7ed      	b.n	8001012 <HAL_ADC_MspInit+0x132>
 8001036:	bf00      	nop
 8001038:	40022000 	.word	0x40022000
 800103c:	58024400 	.word	0x58024400
 8001040:	58020000 	.word	0x58020000
 8001044:	24000210 	.word	0x24000210
 8001048:	58020800 	.word	0x58020800
 800104c:	58020400 	.word	0x58020400
 8001050:	40020040 	.word	0x40020040

08001054 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001054:	b510      	push	{r4, lr}
 8001056:	b0b0      	sub	sp, #192	; 0xc0
 8001058:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800105a:	22b8      	movs	r2, #184	; 0xb8
 800105c:	2100      	movs	r1, #0
 800105e:	a802      	add	r0, sp, #8
 8001060:	f005 ffae 	bl	8006fc0 <memset>
  if(hrng->Instance==RNG)
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <HAL_RNG_MspInit+0x54>)
 8001066:	6822      	ldr	r2, [r4, #0]
 8001068:	429a      	cmp	r2, r3
 800106a:	d001      	beq.n	8001070 <HAL_RNG_MspInit+0x1c>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800106c:	b030      	add	sp, #192	; 0xc0
 800106e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001070:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001074:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001076:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001078:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107c:	f003 fc3a 	bl	80048f4 <HAL_RCCEx_PeriphCLKConfig>
 8001080:	b970      	cbnz	r0, 80010a0 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_RNG_MspInit+0x58>)
 8001084:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8001088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800108c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8001090:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	9b01      	ldr	r3, [sp, #4]
}
 800109c:	b030      	add	sp, #192	; 0xc0
 800109e:	bd10      	pop	{r4, pc}
      Error_Handler();
 80010a0:	f7ff ff0a 	bl	8000eb8 <Error_Handler>
 80010a4:	e7ed      	b.n	8001082 <HAL_RNG_MspInit+0x2e>
 80010a6:	bf00      	nop
 80010a8:	48021800 	.word	0x48021800
 80010ac:	58024400 	.word	0x58024400

080010b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80010b4:	b0bc      	sub	sp, #240	; 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b6:	2100      	movs	r1, #0
{
 80010b8:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ba:	22b8      	movs	r2, #184	; 0xb8
 80010bc:	a80e      	add	r0, sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010be:	910c      	str	r1, [sp, #48]	; 0x30
 80010c0:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80010c4:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c8:	f005 ff7a 	bl	8006fc0 <memset>
  if(hspi->Instance==SPI1)
 80010cc:	6823      	ldr	r3, [r4, #0]
 80010ce:	4a9f      	ldr	r2, [pc, #636]	; (800134c <HAL_SPI_MspInit+0x29c>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d009      	beq.n	80010e8 <HAL_SPI_MspInit+0x38>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 80010d4:	4a9e      	ldr	r2, [pc, #632]	; (8001350 <HAL_SPI_MspInit+0x2a0>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d07c      	beq.n	80011d4 <HAL_SPI_MspInit+0x124>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 80010da:	4a9e      	ldr	r2, [pc, #632]	; (8001354 <HAL_SPI_MspInit+0x2a4>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	f000 80d6 	beq.w	800128e <HAL_SPI_MspInit+0x1de>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010e2:	b03c      	add	sp, #240	; 0xf0
 80010e4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ec:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ee:	a80e      	add	r0, sp, #56	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f4:	f003 fbfe 	bl	80048f4 <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	2800      	cmp	r0, #0
 80010fa:	f040 811a 	bne.w	8001332 <HAL_SPI_MspInit+0x282>
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010fe:	4b96      	ldr	r3, [pc, #600]	; (8001358 <HAL_SPI_MspInit+0x2a8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001100:	2605      	movs	r6, #5
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001102:	f04f 0800 	mov.w	r8, #0
 8001106:	f04f 0902 	mov.w	r9, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 800110a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800110e:	4893      	ldr	r0, [pc, #588]	; (800135c <HAL_SPI_MspInit+0x2ac>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001110:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001114:	4d92      	ldr	r5, [pc, #584]	; (8001360 <HAL_SPI_MspInit+0x2b0>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001116:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800111a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800111e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001122:	9200      	str	r2, [sp, #0]
 8001124:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001126:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800112a:	f042 0208 	orr.w	r2, r2, #8
 800112e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001132:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001136:	f002 0208 	and.w	r2, r2, #8
 800113a:	9201      	str	r2, [sp, #4]
 800113c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800113e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001142:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001146:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800114a:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001150:	960c      	str	r6, [sp, #48]	; 0x30
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001156:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001158:	2302      	movs	r3, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800115a:	9902      	ldr	r1, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800115c:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800115e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001162:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001166:	f002 fbfb 	bl	8003960 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800116a:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 800116e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001170:	a908      	add	r1, sp, #32
 8001172:	487c      	ldr	r0, [pc, #496]	; (8001364 <HAL_SPI_MspInit+0x2b4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001174:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001176:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800117a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800117e:	f002 fbef 	bl	8003960 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001182:	4979      	ldr	r1, [pc, #484]	; (8001368 <HAL_SPI_MspInit+0x2b8>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001184:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001186:	2300      	movs	r3, #0
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001188:	6029      	str	r1, [r5, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800118a:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800118c:	606a      	str	r2, [r5, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800118e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001192:	60a9      	str	r1, [r5, #8]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001194:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001198:	612a      	str	r2, [r5, #16]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800119a:	2204      	movs	r2, #4
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800119c:	4628      	mov	r0, r5
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800119e:	60eb      	str	r3, [r5, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011a0:	616b      	str	r3, [r5, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a2:	61ab      	str	r3, [r5, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80011a4:	e9c5 3107 	strd	r3, r1, [r5, #28]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011a8:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011ac:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80011b0:	f001 fbca 	bl	8002948 <HAL_DMA_Init>
 80011b4:	2800      	cmp	r0, #0
 80011b6:	f040 80b9 	bne.w	800132c <HAL_SPI_MspInit+0x27c>
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2101      	movs	r1, #1
 80011be:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80011c0:	67a5      	str	r5, [r4, #120]	; 0x78
 80011c2:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80011c4:	f001 fa28 	bl	8002618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011c8:	2023      	movs	r0, #35	; 0x23
 80011ca:	f001 fa63 	bl	8002694 <HAL_NVIC_EnableIRQ>
}
 80011ce:	b03c      	add	sp, #240	; 0xf0
 80011d0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80011d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011d8:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011da:	a80e      	add	r0, sp, #56	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80011dc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e0:	f003 fb88 	bl	80048f4 <HAL_RCCEx_PeriphCLKConfig>
 80011e4:	2800      	cmp	r0, #0
 80011e6:	f040 80a7 	bne.w	8001338 <HAL_SPI_MspInit+0x288>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011ea:	4b5b      	ldr	r3, [pc, #364]	; (8001358 <HAL_SPI_MspInit+0x2a8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ec:	2005      	movs	r0, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	a908      	add	r1, sp, #32
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011f0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80011f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011f8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80011fc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001200:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001204:	9203      	str	r2, [sp, #12]
 8001206:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800120c:	f042 0202 	orr.w	r2, r2, #2
 8001210:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001214:	f44f 4270 	mov.w	r2, #61440	; 0xf000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800121c:	900c      	str	r0, [sp, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	f003 0302 	and.w	r3, r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	4852      	ldr	r0, [pc, #328]	; (800136c <HAL_SPI_MspInit+0x2bc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001224:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001226:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001228:	9d04      	ldr	r5, [sp, #16]
    hdma_spi2_rx.Instance = DMA1_Stream1;
 800122a:	4d51      	ldr	r5, [pc, #324]	; (8001370 <HAL_SPI_MspInit+0x2c0>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800122c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001230:	2200      	movs	r2, #0
 8001232:	2302      	movs	r3, #2
 8001234:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001238:	f002 fb92 	bl	8003960 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 800123c:	494d      	ldr	r1, [pc, #308]	; (8001374 <HAL_SPI_MspInit+0x2c4>)
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800123e:	2227      	movs	r2, #39	; 0x27
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001240:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001242:	4628      	mov	r0, r5
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001244:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001246:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800124a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800124e:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001252:	6129      	str	r1, [r5, #16]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001254:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001258:	61ea      	str	r2, [r5, #28]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800125a:	2204      	movs	r2, #4
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800125c:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001260:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001264:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001268:	e9c5 1208 	strd	r1, r2, [r5, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800126c:	f001 fb6c 	bl	8002948 <HAL_DMA_Init>
 8001270:	2800      	cmp	r0, #0
 8001272:	d164      	bne.n	800133e <HAL_SPI_MspInit+0x28e>
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2102      	movs	r1, #2
 8001278:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800127a:	67e5      	str	r5, [r4, #124]	; 0x7c
 800127c:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 800127e:	f001 f9cb 	bl	8002618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001282:	2024      	movs	r0, #36	; 0x24
 8001284:	f001 fa06 	bl	8002694 <HAL_NVIC_EnableIRQ>
}
 8001288:	b03c      	add	sp, #240	; 0xf0
 800128a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800128e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001292:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001294:	a80e      	add	r0, sp, #56	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001296:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800129a:	f003 fb2b 	bl	80048f4 <HAL_RCCEx_PeriphCLKConfig>
 800129e:	2800      	cmp	r0, #0
 80012a0:	d150      	bne.n	8001344 <HAL_SPI_MspInit+0x294>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012a2:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <HAL_SPI_MspInit+0x2a8>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012a8:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012aa:	2406      	movs	r4, #6
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012ac:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012b0:	f04f 0800 	mov.w	r8, #0
 80012b4:	f04f 0902 	mov.w	r9, #2
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012bc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80012c0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80012c4:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80012c8:	9205      	str	r2, [sp, #20]
 80012ca:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012d0:	f042 0201 	orr.w	r2, r2, #1
 80012d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80012d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012dc:	f002 0201 	and.w	r2, r2, #1
 80012e0:	9206      	str	r2, [sp, #24]
 80012e2:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012e8:	f042 0204 	orr.w	r2, r2, #4
 80012ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012f4:	940c      	str	r4, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012fa:	e9cd 0108 	strd	r0, r1, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	a908      	add	r1, sp, #32
 8001302:	481d      	ldr	r0, [pc, #116]	; (8001378 <HAL_SPI_MspInit+0x2c8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001304:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001306:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f002 fb29 	bl	8003960 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800130e:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001312:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001314:	a908      	add	r1, sp, #32
 8001316:	4819      	ldr	r0, [pc, #100]	; (800137c <HAL_SPI_MspInit+0x2cc>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001318:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800131a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800131e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001322:	f002 fb1d 	bl	8003960 <HAL_GPIO_Init>
}
 8001326:	b03c      	add	sp, #240	; 0xf0
 8001328:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
      Error_Handler();
 800132c:	f7ff fdc4 	bl	8000eb8 <Error_Handler>
 8001330:	e743      	b.n	80011ba <HAL_SPI_MspInit+0x10a>
      Error_Handler();
 8001332:	f7ff fdc1 	bl	8000eb8 <Error_Handler>
 8001336:	e6e2      	b.n	80010fe <HAL_SPI_MspInit+0x4e>
      Error_Handler();
 8001338:	f7ff fdbe 	bl	8000eb8 <Error_Handler>
 800133c:	e755      	b.n	80011ea <HAL_SPI_MspInit+0x13a>
      Error_Handler();
 800133e:	f7ff fdbb 	bl	8000eb8 <Error_Handler>
 8001342:	e797      	b.n	8001274 <HAL_SPI_MspInit+0x1c4>
      Error_Handler();
 8001344:	f7ff fdb8 	bl	8000eb8 <Error_Handler>
 8001348:	e7ab      	b.n	80012a2 <HAL_SPI_MspInit+0x1f2>
 800134a:	bf00      	nop
 800134c:	40013000 	.word	0x40013000
 8001350:	40003800 	.word	0x40003800
 8001354:	40003c00 	.word	0x40003c00
 8001358:	58024400 	.word	0x58024400
 800135c:	58020c00 	.word	0x58020c00
 8001360:	24000288 	.word	0x24000288
 8001364:	58021800 	.word	0x58021800
 8001368:	40020010 	.word	0x40020010
 800136c:	58020400 	.word	0x58020400
 8001370:	24000300 	.word	0x24000300
 8001374:	40020028 	.word	0x40020028
 8001378:	58020000 	.word	0x58020000
 800137c:	58020800 	.word	0x58020800

08001380 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <NMI_Handler>
 8001382:	bf00      	nop

08001384 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <HardFault_Handler>
 8001386:	bf00      	nop

08001388 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <MemManage_Handler>
 800138a:	bf00      	nop

0800138c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <BusFault_Handler>
 800138e:	bf00      	nop

08001390 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <UsageFault_Handler>
 8001392:	bf00      	nop

08001394 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop

08001398 <DebugMon_Handler>:
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop

0800139c <PendSV_Handler>:
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a0:	f000 b8fa 	b.w	8001598 <HAL_IncTick>

080013a4 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80013a4:	4801      	ldr	r0, [pc, #4]	; (80013ac <DMA1_Stream0_IRQHandler+0x8>)
 80013a6:	f001 bf89 	b.w	80032bc <HAL_DMA_IRQHandler>
 80013aa:	bf00      	nop
 80013ac:	24000288 	.word	0x24000288

080013b0 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80013b0:	4801      	ldr	r0, [pc, #4]	; (80013b8 <DMA1_Stream1_IRQHandler+0x8>)
 80013b2:	f001 bf83 	b.w	80032bc <HAL_DMA_IRQHandler>
 80013b6:	bf00      	nop
 80013b8:	24000300 	.word	0x24000300

080013bc <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013bc:	4801      	ldr	r0, [pc, #4]	; (80013c4 <DMA1_Stream2_IRQHandler+0x8>)
 80013be:	f001 bf7d 	b.w	80032bc <HAL_DMA_IRQHandler>
 80013c2:	bf00      	nop
 80013c4:	24000210 	.word	0x24000210

080013c8 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013c8:	4801      	ldr	r0, [pc, #4]	; (80013d0 <ADC_IRQHandler+0x8>)
 80013ca:	f000 b913 	b.w	80015f4 <HAL_ADC_IRQHandler>
 80013ce:	bf00      	nop
 80013d0:	240001a0 	.word	0x240001a0

080013d4 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80013d4:	4801      	ldr	r0, [pc, #4]	; (80013dc <SPI1_IRQHandler+0x8>)
 80013d6:	f005 b863 	b.w	80064a0 <HAL_SPI_IRQHandler>
 80013da:	bf00      	nop
 80013dc:	2400038c 	.word	0x2400038c

080013e0 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80013e0:	4801      	ldr	r0, [pc, #4]	; (80013e8 <SPI2_IRQHandler+0x8>)
 80013e2:	f005 b85d 	b.w	80064a0 <HAL_SPI_IRQHandler>
 80013e6:	bf00      	nop
 80013e8:	24000418 	.word	0x24000418

080013ec <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013ec:	4922      	ldr	r1, [pc, #136]	; (8001478 <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013ee:	4a23      	ldr	r2, [pc, #140]	; (800147c <SystemInit+0x90>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013f0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80013f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 80013f8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013fe:	6813      	ldr	r3, [r2, #0]
 8001400:	f003 030f 	and.w	r3, r3, #15
 8001404:	2b06      	cmp	r3, #6
 8001406:	d805      	bhi.n	8001414 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001408:	6813      	ldr	r3, [r2, #0]
 800140a:	f023 030f 	bic.w	r3, r3, #15
 800140e:	f043 0307 	orr.w	r3, r3, #7
 8001412:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001416:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001418:	4a1a      	ldr	r2, [pc, #104]	; (8001484 <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 800141a:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800141c:	4817      	ldr	r0, [pc, #92]	; (800147c <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 800141e:	f041 0101 	orr.w	r1, r1, #1
 8001422:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001424:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8001426:	6819      	ldr	r1, [r3, #0]
 8001428:	400a      	ands	r2, r1
 800142a:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800142c:	6803      	ldr	r3, [r0, #0]
 800142e:	071b      	lsls	r3, r3, #28
 8001430:	d505      	bpl.n	800143e <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001432:	6803      	ldr	r3, [r0, #0]
 8001434:	f023 030f 	bic.w	r3, r3, #15
 8001438:	f043 0307 	orr.w	r3, r3, #7
 800143c:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <SystemInit+0x94>)
 8001440:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001442:	4911      	ldr	r1, [pc, #68]	; (8001488 <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 8001444:	4c11      	ldr	r4, [pc, #68]	; (800148c <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 8001446:	4812      	ldr	r0, [pc, #72]	; (8001490 <SystemInit+0xa4>)
  RCC->D1CFGR = 0x00000000;
 8001448:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800144a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800144c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800144e:	629c      	str	r4, [r3, #40]	; 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001450:	f243 04d2 	movw	r4, #12498	; 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 8001454:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8001456:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8001458:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 800145a:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 800145c:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 800145e:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8001460:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8001462:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001464:	480b      	ldr	r0, [pc, #44]	; (8001494 <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 8001466:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800146a:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 800146c:	661a      	str	r2, [r3, #96]	; 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800146e:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001470:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00
 800147c:	52002000 	.word	0x52002000
 8001480:	58024400 	.word	0x58024400
 8001484:	eaf6ed7f 	.word	0xeaf6ed7f
 8001488:	01010280 	.word	0x01010280
 800148c:	02020200 	.word	0x02020200
 8001490:	01ff0000 	.word	0x01ff0000
 8001494:	52004000 	.word	0x52004000

08001498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800149c:	f7ff ffa6 	bl	80013ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014a2:	490d      	ldr	r1, [pc, #52]	; (80014d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014a4:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a8:	e002      	b.n	80014b0 <LoopCopyDataInit>

080014aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ae:	3304      	adds	r3, #4

080014b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b4:	d3f9      	bcc.n	80014aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014b8:	4c0a      	ldr	r4, [pc, #40]	; (80014e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014bc:	e001      	b.n	80014c2 <LoopFillZerobss>

080014be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c0:	3204      	adds	r2, #4

080014c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c4:	d3fb      	bcc.n	80014be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014c6:	f005 fd57 	bl	8006f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ca:	f7fe ffb5 	bl	8000438 <main>
  bx  lr
 80014ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014d0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80014d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014d8:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80014dc:	08008a94 	.word	0x08008a94
  ldr r2, =_sbss
 80014e0:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80014e4:	24000808 	.word	0x24000808

080014e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <ADC3_IRQHandler>
	...

080014ec <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_InitTick+0x40>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b90b      	cbnz	r3, 80014f6 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80014f2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014f4:	4770      	bx	lr
{
 80014f6:	b510      	push	{r4, lr}
 80014f8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014fe:	4a0c      	ldr	r2, [pc, #48]	; (8001530 <HAL_InitTick+0x44>)
 8001500:	fbb0 f3f3 	udiv	r3, r0, r3
 8001504:	6810      	ldr	r0, [r2, #0]
 8001506:	fbb0 f0f3 	udiv	r0, r0, r3
 800150a:	f001 f8d1 	bl	80026b0 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150e:	2c0f      	cmp	r4, #15
 8001510:	d800      	bhi.n	8001514 <HAL_InitTick+0x28>
 8001512:	b108      	cbz	r0, 8001518 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001514:	2001      	movs	r0, #1
}
 8001516:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001518:	2200      	movs	r2, #0
 800151a:	4621      	mov	r1, r4
 800151c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001520:	f001 f87a 	bl	8002618 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <HAL_InitTick+0x48>)
 8001526:	2000      	movs	r0, #0
 8001528:	601c      	str	r4, [r3, #0]
}
 800152a:	bd10      	pop	{r4, pc}
 800152c:	2400000c 	.word	0x2400000c
 8001530:	24000004 	.word	0x24000004
 8001534:	24000010 	.word	0x24000010

08001538 <HAL_Init>:
{
 8001538:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153a:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800153c:	4c12      	ldr	r4, [pc, #72]	; (8001588 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153e:	f001 f859 	bl	80025f4 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001542:	f002 fe93 	bl	800426c <HAL_RCC_GetSysClockFreq>
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_Init+0x54>)
 8001548:	4911      	ldr	r1, [pc, #68]	; (8001590 <HAL_Init+0x58>)
 800154a:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800154c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800154e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001552:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001556:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001558:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800155a:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800155e:	490d      	ldr	r1, [pc, #52]	; (8001594 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001560:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001564:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001566:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800156a:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800156c:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800156e:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001570:	f7ff ffbc 	bl	80014ec <HAL_InitTick>
 8001574:	b110      	cbz	r0, 800157c <HAL_Init+0x44>
    return HAL_ERROR;
 8001576:	2401      	movs	r4, #1
}
 8001578:	4620      	mov	r0, r4
 800157a:	bd10      	pop	{r4, pc}
 800157c:	4604      	mov	r4, r0
  HAL_MspInit();
 800157e:	f7ff fc9d 	bl	8000ebc <HAL_MspInit>
}
 8001582:	4620      	mov	r0, r4
 8001584:	bd10      	pop	{r4, pc}
 8001586:	bf00      	nop
 8001588:	24000008 	.word	0x24000008
 800158c:	58024400 	.word	0x58024400
 8001590:	08008310 	.word	0x08008310
 8001594:	24000004 	.word	0x24000004

08001598 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001598:	4a03      	ldr	r2, [pc, #12]	; (80015a8 <HAL_IncTick+0x10>)
 800159a:	4b04      	ldr	r3, [pc, #16]	; (80015ac <HAL_IncTick+0x14>)
 800159c:	6811      	ldr	r1, [r2, #0]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	440b      	add	r3, r1
 80015a2:	6013      	str	r3, [r2, #0]
}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	24000804 	.word	0x24000804
 80015ac:	2400000c 	.word	0x2400000c

080015b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015b0:	4b01      	ldr	r3, [pc, #4]	; (80015b8 <HAL_GetTick+0x8>)
 80015b2:	6818      	ldr	r0, [r3, #0]
}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	24000804 	.word	0x24000804

080015bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015bc:	b538      	push	{r3, r4, r5, lr}
 80015be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff fff6 	bl	80015b0 <HAL_GetTick>
 80015c4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c6:	1c63      	adds	r3, r4, #1
 80015c8:	d002      	beq.n	80015d0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ca:	4b04      	ldr	r3, [pc, #16]	; (80015dc <HAL_Delay+0x20>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015d0:	f7ff ffee 	bl	80015b0 <HAL_GetTick>
 80015d4:	1b43      	subs	r3, r0, r5
 80015d6:	42a3      	cmp	r3, r4
 80015d8:	d3fa      	bcc.n	80015d0 <HAL_Delay+0x14>
  {
  }
}
 80015da:	bd38      	pop	{r3, r4, r5, pc}
 80015dc:	2400000c 	.word	0x2400000c

080015e0 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015e0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80015e2:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015e4:	f7ff fc28 	bl	8000e38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015e8:	bd08      	pop	{r3, pc}
 80015ea:	bf00      	nop

080015ec <HAL_ADC_LevelOutOfWindowCallback>:
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop

080015f0 <HAL_ADC_ErrorCallback>:
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop

080015f4 <HAL_ADC_IRQHandler>:
{
 80015f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015f6:	4a90      	ldr	r2, [pc, #576]	; (8001838 <HAL_ADC_IRQHandler+0x244>)
{
 80015f8:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80015fa:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015fc:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 80015fe:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001600:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001602:	f000 8095 	beq.w	8001730 <HAL_ADC_IRQHandler+0x13c>
 8001606:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800160a:	4293      	cmp	r3, r2
 800160c:	f000 8090 	beq.w	8001730 <HAL_ADC_IRQHandler+0x13c>
 8001610:	4a8a      	ldr	r2, [pc, #552]	; (800183c <HAL_ADC_IRQHandler+0x248>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001612:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001614:	07a9      	lsls	r1, r5, #30
 8001616:	f007 071f 	and.w	r7, r7, #31
 800161a:	d502      	bpl.n	8001622 <HAL_ADC_IRQHandler+0x2e>
 800161c:	07b2      	lsls	r2, r6, #30
 800161e:	f100 80aa 	bmi.w	8001776 <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001622:	0769      	lsls	r1, r5, #29
 8001624:	d579      	bpl.n	800171a <HAL_ADC_IRQHandler+0x126>
 8001626:	0772      	lsls	r2, r6, #29
 8001628:	d577      	bpl.n	800171a <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800162a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800162c:	06d2      	lsls	r2, r2, #27
 800162e:	d403      	bmi.n	8001638 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001630:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001636:	6622      	str	r2, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800163e:	d11c      	bne.n	800167a <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001640:	4a7f      	ldr	r2, [pc, #508]	; (8001840 <HAL_ADC_IRQHandler+0x24c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	f000 80e8 	beq.w	8001818 <HAL_ADC_IRQHandler+0x224>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001648:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800164a:	0490      	lsls	r0, r2, #18
 800164c:	d415      	bmi.n	800167a <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	0711      	lsls	r1, r2, #28
 8001652:	d512      	bpl.n	800167a <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	0752      	lsls	r2, r2, #29
 8001658:	f100 80f6 	bmi.w	8001848 <HAL_ADC_IRQHandler+0x254>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	f022 020c 	bic.w	r2, r2, #12
 8001662:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001664:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001666:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800166a:	6623      	str	r3, [r4, #96]	; 0x60
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800166c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800166e:	04db      	lsls	r3, r3, #19
 8001670:	d403      	bmi.n	800167a <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001672:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 800167a:	4620      	mov	r0, r4
 800167c:	f7ff fbd8 	bl	8000e30 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001680:	6823      	ldr	r3, [r4, #0]
 8001682:	220c      	movs	r2, #12
 8001684:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001686:	06a8      	lsls	r0, r5, #26
 8001688:	d54d      	bpl.n	8001726 <HAL_ADC_IRQHandler+0x132>
 800168a:	06b1      	lsls	r1, r6, #26
 800168c:	d54b      	bpl.n	8001726 <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800168e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001690:	06d1      	lsls	r1, r2, #27
 8001692:	d403      	bmi.n	800169c <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001694:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001696:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800169a:	6622      	str	r2, [r4, #96]	; 0x60
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800169c:	4968      	ldr	r1, [pc, #416]	; (8001840 <HAL_ADC_IRQHandler+0x24c>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800169e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016a0:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80016a2:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80016a4:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 80016a8:	d073      	beq.n	8001792 <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80016aa:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80016ac:	b9d2      	cbnz	r2, 80016e4 <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80016ae:	018a      	lsls	r2, r1, #6
 80016b0:	f100 80aa 	bmi.w	8001808 <HAL_ADC_IRQHandler+0x214>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	0650      	lsls	r0, r2, #25
 80016b8:	d514      	bpl.n	80016e4 <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80016ba:	0289      	lsls	r1, r1, #10
 80016bc:	d412      	bmi.n	80016e4 <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	0712      	lsls	r2, r2, #28
 80016c2:	f100 80cc 	bmi.w	800185e <HAL_ADC_IRQHandler+0x26a>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80016cc:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80016ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016d4:	6623      	str	r3, [r4, #96]	; 0x60
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80016d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016d8:	05d8      	lsls	r0, r3, #23
 80016da:	d403      	bmi.n	80016e4 <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016dc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016e4:	4620      	mov	r0, r4
 80016e6:	f000 ff13 	bl	8002510 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	2260      	movs	r2, #96	; 0x60
 80016ee:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80016f0:	0629      	lsls	r1, r5, #24
 80016f2:	d501      	bpl.n	80016f8 <HAL_ADC_IRQHandler+0x104>
 80016f4:	0632      	lsls	r2, r6, #24
 80016f6:	d460      	bmi.n	80017ba <HAL_ADC_IRQHandler+0x1c6>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80016f8:	05e8      	lsls	r0, r5, #23
 80016fa:	d501      	bpl.n	8001700 <HAL_ADC_IRQHandler+0x10c>
 80016fc:	05f1      	lsls	r1, r6, #23
 80016fe:	d467      	bmi.n	80017d0 <HAL_ADC_IRQHandler+0x1dc>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001700:	05aa      	lsls	r2, r5, #22
 8001702:	d501      	bpl.n	8001708 <HAL_ADC_IRQHandler+0x114>
 8001704:	05b0      	lsls	r0, r6, #22
 8001706:	d44c      	bmi.n	80017a2 <HAL_ADC_IRQHandler+0x1ae>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001708:	06e9      	lsls	r1, r5, #27
 800170a:	d501      	bpl.n	8001710 <HAL_ADC_IRQHandler+0x11c>
 800170c:	06f2      	lsls	r2, r6, #27
 800170e:	d411      	bmi.n	8001734 <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001710:	0568      	lsls	r0, r5, #21
 8001712:	d501      	bpl.n	8001718 <HAL_ADC_IRQHandler+0x124>
 8001714:	0571      	lsls	r1, r6, #21
 8001716:	d467      	bmi.n	80017e8 <HAL_ADC_IRQHandler+0x1f4>
}
 8001718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800171a:	0728      	lsls	r0, r5, #28
 800171c:	d5b3      	bpl.n	8001686 <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800171e:	0731      	lsls	r1, r6, #28
 8001720:	d483      	bmi.n	800162a <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001722:	06a8      	lsls	r0, r5, #26
 8001724:	d4b1      	bmi.n	800168a <HAL_ADC_IRQHandler+0x96>
 8001726:	066a      	lsls	r2, r5, #25
 8001728:	d5e2      	bpl.n	80016f0 <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800172a:	0670      	lsls	r0, r6, #25
 800172c:	d5e0      	bpl.n	80016f0 <HAL_ADC_IRQHandler+0xfc>
 800172e:	e7ae      	b.n	800168e <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001730:	4a44      	ldr	r2, [pc, #272]	; (8001844 <HAL_ADC_IRQHandler+0x250>)
 8001732:	e76e      	b.n	8001612 <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001734:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001736:	b17a      	cbz	r2, 8001758 <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001738:	2f00      	cmp	r7, #0
 800173a:	d072      	beq.n	8001822 <HAL_ADC_IRQHandler+0x22e>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800173c:	4a3e      	ldr	r2, [pc, #248]	; (8001838 <HAL_ADC_IRQHandler+0x244>)
 800173e:	4293      	cmp	r3, r2
 8001740:	f000 808b 	beq.w	800185a <HAL_ADC_IRQHandler+0x266>
 8001744:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001748:	4293      	cmp	r3, r2
 800174a:	f000 8086 	beq.w	800185a <HAL_ADC_IRQHandler+0x266>
 800174e:	4a3b      	ldr	r2, [pc, #236]	; (800183c <HAL_ADC_IRQHandler+0x248>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001750:	6892      	ldr	r2, [r2, #8]
 8001752:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8001756:	d00b      	beq.n	8001770 <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001758:	6e23      	ldr	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 800175a:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800175c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001760:	6623      	str	r3, [r4, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001762:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	6663      	str	r3, [r4, #100]	; 0x64
      HAL_ADC_ErrorCallback(hadc);
 800176a:	f7ff ff41 	bl	80015f0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800176e:	6823      	ldr	r3, [r4, #0]
 8001770:	2210      	movs	r2, #16
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	e7cc      	b.n	8001710 <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001776:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001778:	06d8      	lsls	r0, r3, #27
 800177a:	d403      	bmi.n	8001784 <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800177c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800177e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001782:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001784:	4620      	mov	r0, r4
 8001786:	f000 fecb 	bl	8002520 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800178a:	6823      	ldr	r3, [r4, #0]
 800178c:	2202      	movs	r2, #2
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	e747      	b.n	8001622 <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001792:	1fb9      	subs	r1, r7, #6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001794:	2901      	cmp	r1, #1
 8001796:	d988      	bls.n	80016aa <HAL_ADC_IRQHandler+0xb6>
 8001798:	2f00      	cmp	r7, #0
 800179a:	d086      	beq.n	80016aa <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800179c:	4926      	ldr	r1, [pc, #152]	; (8001838 <HAL_ADC_IRQHandler+0x244>)
 800179e:	68c9      	ldr	r1, [r1, #12]
 80017a0:	e784      	b.n	80016ac <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80017a2:	6e23      	ldr	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80017a4:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80017a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017aa:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80017ac:	f000 feb6 	bl	800251c <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80017b0:	6823      	ldr	r3, [r4, #0]
 80017b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	e7a6      	b.n	8001708 <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017ba:	6e23      	ldr	r3, [r4, #96]	; 0x60
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017bc:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c2:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017c4:	f7ff ff12 	bl	80015ec <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	2280      	movs	r2, #128	; 0x80
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	e793      	b.n	80016f8 <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80017d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80017d2:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d8:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80017da:	f000 fe9d 	bl	8002518 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80017de:	6823      	ldr	r3, [r4, #0]
 80017e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	e78b      	b.n	8001700 <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80017e8:	6e22      	ldr	r2, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80017ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80017ee:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80017f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017f4:	6622      	str	r2, [r4, #96]	; 0x60
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80017f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80017f8:	f042 0208 	orr.w	r2, r2, #8
 80017fc:	6662      	str	r2, [r4, #100]	; 0x64
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80017fe:	6019      	str	r1, [r3, #0]
}
 8001800:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001804:	f000 be86 	b.w	8002514 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001808:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800180c:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001810:	4302      	orrs	r2, r0
 8001812:	f47f af67 	bne.w	80016e4 <HAL_ADC_IRQHandler+0xf0>
 8001816:	e74d      	b.n	80016b4 <HAL_ADC_IRQHandler+0xc0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001818:	2f09      	cmp	r7, #9
 800181a:	d906      	bls.n	800182a <HAL_ADC_IRQHandler+0x236>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800181c:	4a06      	ldr	r2, [pc, #24]	; (8001838 <HAL_ADC_IRQHandler+0x244>)
 800181e:	68d2      	ldr	r2, [r2, #12]
 8001820:	e713      	b.n	800164a <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	0797      	lsls	r7, r2, #30
 8001826:	d0a3      	beq.n	8001770 <HAL_ADC_IRQHandler+0x17c>
 8001828:	e796      	b.n	8001758 <HAL_ADC_IRQHandler+0x164>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800182a:	f240 2221 	movw	r2, #545	; 0x221
 800182e:	40fa      	lsrs	r2, r7
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001830:	07d2      	lsls	r2, r2, #31
 8001832:	f53f af09 	bmi.w	8001648 <HAL_ADC_IRQHandler+0x54>
 8001836:	e7f1      	b.n	800181c <HAL_ADC_IRQHandler+0x228>
 8001838:	40022000 	.word	0x40022000
 800183c:	58026300 	.word	0x58026300
 8001840:	40022100 	.word	0x40022100
 8001844:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001848:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800184a:	f043 0310 	orr.w	r3, r3, #16
 800184e:	6623      	str	r3, [r4, #96]	; 0x60
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001850:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6663      	str	r3, [r4, #100]	; 0x64
 8001858:	e70f      	b.n	800167a <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <HAL_ADC_IRQHandler+0x27c>)
 800185c:	e778      	b.n	8001750 <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800185e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001860:	f043 0310 	orr.w	r3, r3, #16
 8001864:	6623      	str	r3, [r4, #96]	; 0x60
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001866:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6663      	str	r3, [r4, #100]	; 0x64
 800186e:	e739      	b.n	80016e4 <HAL_ADC_IRQHandler+0xf0>
 8001870:	40022300 	.word	0x40022300

08001874 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001874:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001876:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001878:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800187c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800187e:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001880:	d11d      	bne.n	80018be <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001882:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001888:	661a      	str	r2, [r3, #96]	; 0x60
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800188a:	680a      	ldr	r2, [r1, #0]
 800188c:	f012 0f08 	tst.w	r2, #8
 8001890:	68ca      	ldr	r2, [r1, #12]
 8001892:	d01b      	beq.n	80018cc <ADC_DMAConvCplt+0x58>
 8001894:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001898:	d10d      	bne.n	80018b6 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800189a:	68ca      	ldr	r2, [r1, #12]
 800189c:	0494      	lsls	r4, r2, #18
 800189e:	d40a      	bmi.n	80018b6 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018a6:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80018a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018aa:	04d1      	lsls	r1, r2, #19
 80018ac:	d403      	bmi.n	80018b6 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018b0:	f042 0201 	orr.w	r2, r2, #1
 80018b4:	661a      	str	r2, [r3, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff faba 	bl	8000e30 <HAL_ADC_ConvCpltCallback>
}
 80018bc:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80018be:	06d2      	lsls	r2, r2, #27
 80018c0:	d40a      	bmi.n	80018d8 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80018cc:	0790      	lsls	r0, r2, #30
 80018ce:	d0e7      	beq.n	80018a0 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff faad 	bl	8000e30 <HAL_ADC_ConvCpltCallback>
 80018d6:	e7f1      	b.n	80018bc <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fe89 	bl	80015f0 <HAL_ADC_ErrorCallback>
}
 80018de:	bd10      	pop	{r4, pc}

080018e0 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018e0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80018e2:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018e4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80018e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018ea:	6603      	str	r3, [r0, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018ec:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80018ee:	f043 0304 	orr.w	r3, r3, #4
 80018f2:	6643      	str	r3, [r0, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018f4:	f7ff fe7c 	bl	80015f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018f8:	bd08      	pop	{r3, pc}
 80018fa:	bf00      	nop

080018fc <HAL_ADC_ConfigChannel>:
{
 80018fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 80018fe:	2200      	movs	r2, #0
{
 8001900:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8001902:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001904:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8001908:	2a01      	cmp	r2, #1
 800190a:	f000 80f8 	beq.w	8001afe <HAL_ADC_ConfigChannel+0x202>
 800190e:	4603      	mov	r3, r0
 8001910:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001912:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8001914:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001918:	6894      	ldr	r4, [r2, #8]
 800191a:	0766      	lsls	r6, r4, #29
 800191c:	d508      	bpl.n	8001930 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800191e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001920:	f042 0220 	orr.w	r2, r2, #32
 8001924:	661a      	str	r2, [r3, #96]	; 0x60
  __HAL_UNLOCK(hadc);
 8001926:	2200      	movs	r2, #0
 8001928:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 800192c:	b003      	add	sp, #12
 800192e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (hadc->Instance != ADC3)
 8001930:	4cae      	ldr	r4, [pc, #696]	; (8001bec <HAL_ADC_ConfigChannel+0x2f0>)
 8001932:	42a2      	cmp	r2, r4
 8001934:	f000 80df 	beq.w	8001af6 <HAL_ADC_ConfigChannel+0x1fa>
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001938:	680c      	ldr	r4, [r1, #0]
 800193a:	f3c4 0513 	ubfx	r5, r4, #0, #20
 800193e:	2d00      	cmp	r5, #0
 8001940:	f000 8088 	beq.w	8001a54 <HAL_ADC_ConfigChannel+0x158>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001948:	b115      	cbz	r5, 8001950 <HAL_ADC_ConfigChannel+0x54>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800194a:	fab5 f585 	clz	r5, r5
 800194e:	40a8      	lsls	r0, r5
 8001950:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8001954:	69d4      	ldr	r4, [r2, #28]
 8001956:	4320      	orrs	r0, r4
 8001958:	61d0      	str	r0, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800195a:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 800195c:	201f      	movs	r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800195e:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8001962:	09a6      	lsrs	r6, r4, #6
  MODIFY_REG(*preg,
 8001964:	ea04 0e00 	and.w	lr, r4, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001968:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 800196c:	fa00 f70e 	lsl.w	r7, r0, lr
 8001970:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001974:	5970      	ldr	r0, [r6, r5]
 8001976:	ea20 0007 	bic.w	r0, r0, r7
 800197a:	ea40 000c 	orr.w	r0, r0, ip
 800197e:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001980:	6890      	ldr	r0, [r2, #8]
 8001982:	0745      	lsls	r5, r0, #29
 8001984:	d46b      	bmi.n	8001a5e <HAL_ADC_ConfigChannel+0x162>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001986:	6895      	ldr	r5, [r2, #8]
 8001988:	f015 0508 	ands.w	r5, r5, #8
 800198c:	d168      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x164>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800198e:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001990:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8001994:	2007      	movs	r0, #7
 8001996:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001998:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 800199c:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019a0:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 80019a4:	fa00 fe04 	lsl.w	lr, r0, r4
 80019a8:	fa07 f404 	lsl.w	r4, r7, r4
      if (hadc->Instance == ADC3)
 80019ac:	4f8f      	ldr	r7, [pc, #572]	; (8001bec <HAL_ADC_ConfigChannel+0x2f0>)
 80019ae:	f85c 0006 	ldr.w	r0, [ip, r6]
 80019b2:	42ba      	cmp	r2, r7
 80019b4:	ea20 000e 	bic.w	r0, r0, lr
 80019b8:	ea40 0004 	orr.w	r0, r0, r4
 80019bc:	f84c 0006 	str.w	r0, [ip, r6]
 80019c0:	f000 80a0 	beq.w	8001b04 <HAL_ADC_ConfigChannel+0x208>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80019c4:	488a      	ldr	r0, [pc, #552]	; (8001bf0 <HAL_ADC_ConfigChannel+0x2f4>)
 80019c6:	6800      	ldr	r0, [r0, #0]
 80019c8:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80019cc:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80019d0:	f000 80dc 	beq.w	8001b8c <HAL_ADC_ConfigChannel+0x290>
 80019d4:	68d0      	ldr	r0, [r2, #12]
 80019d6:	68d6      	ldr	r6, [r2, #12]
 80019d8:	06c4      	lsls	r4, r0, #27
 80019da:	f100 80ff 	bmi.w	8001bdc <HAL_ADC_ConfigChannel+0x2e0>
 80019de:	f3c6 0682 	ubfx	r6, r6, #2, #3
 80019e2:	6948      	ldr	r0, [r1, #20]
 80019e4:	0076      	lsls	r6, r6, #1
 80019e6:	fa00 f606 	lsl.w	r6, r0, r6
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019ea:	690f      	ldr	r7, [r1, #16]
 80019ec:	2f04      	cmp	r7, #4
 80019ee:	f000 80d5 	beq.w	8001b9c <HAL_ADC_ConfigChannel+0x2a0>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019f2:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 80019f6:	6808      	ldr	r0, [r1, #0]
 80019f8:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 80019fc:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001a00:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001a04:	ea40 000c 	orr.w	r0, r0, ip
 8001a08:	4330      	orrs	r0, r6
 8001a0a:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001a0e:	f891 0021 	ldrb.w	r0, [r1, #33]	; 0x21
 8001a12:	690e      	ldr	r6, [r1, #16]
 8001a14:	2801      	cmp	r0, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a16:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8001a1a:	bf0c      	ite	eq
 8001a1c:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 8001a20:	2700      	movne	r7, #0
 8001a22:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001a26:	4338      	orrs	r0, r7
 8001a28:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001a2c:	7e0c      	ldrb	r4, [r1, #24]
 8001a2e:	6908      	ldr	r0, [r1, #16]
 8001a30:	2c01      	cmp	r4, #1
 8001a32:	d104      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x142>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a34:	f000 001f 	and.w	r0, r0, #31
 8001a38:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8001a3c:	4085      	lsls	r5, r0
 8001a3e:	6910      	ldr	r0, [r2, #16]
 8001a40:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8001a44:	4305      	orrs	r5, r0
 8001a46:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a48:	6890      	ldr	r0, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a4a:	07c4      	lsls	r4, r0, #31
 8001a4c:	f140 80c3 	bpl.w	8001bd6 <HAL_ADC_ConfigChannel+0x2da>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a50:	2000      	movs	r0, #0
 8001a52:	e768      	b.n	8001926 <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001a54:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8001a58:	fa00 f00c 	lsl.w	r0, r0, ip
 8001a5c:	e77a      	b.n	8001954 <HAL_ADC_ConfigChannel+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a5e:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a60:	6890      	ldr	r0, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a62:	07c0      	lsls	r0, r0, #31
 8001a64:	d4f4      	bmi.n	8001a50 <HAL_ADC_ConfigChannel+0x154>
  if (ADCx == ADC3)
 8001a66:	4861      	ldr	r0, [pc, #388]	; (8001bec <HAL_ADC_ConfigChannel+0x2f0>)
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a68:	680c      	ldr	r4, [r1, #0]
 8001a6a:	4282      	cmp	r2, r0
 8001a6c:	68cd      	ldr	r5, [r1, #12]
 8001a6e:	d07c      	beq.n	8001b6a <HAL_ADC_ConfigChannel+0x26e>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001a70:	f005 0618 	and.w	r6, r5, #24
 8001a74:	485f      	ldr	r0, [pc, #380]	; (8001bf4 <HAL_ADC_ConfigChannel+0x2f8>)
 8001a76:	f3c4 0713 	ubfx	r7, r4, #0, #20
 8001a7a:	40f0      	lsrs	r0, r6
 8001a7c:	f8d2 60c0 	ldr.w	r6, [r2, #192]	; 0xc0
 8001a80:	4020      	ands	r0, r4
 8001a82:	ea26 0607 	bic.w	r6, r6, r7
 8001a86:	4330      	orrs	r0, r6
 8001a88:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a8c:	485a      	ldr	r0, [pc, #360]	; (8001bf8 <HAL_ADC_ConfigChannel+0x2fc>)
 8001a8e:	4285      	cmp	r5, r0
 8001a90:	f000 810d 	beq.w	8001cae <HAL_ADC_ConfigChannel+0x3b2>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a94:	680c      	ldr	r4, [r1, #0]
 8001a96:	2c00      	cmp	r4, #0
 8001a98:	dada      	bge.n	8001a50 <HAL_ADC_ConfigChannel+0x154>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a9a:	4958      	ldr	r1, [pc, #352]	; (8001bfc <HAL_ADC_ConfigChannel+0x300>)
 8001a9c:	428a      	cmp	r2, r1
 8001a9e:	f000 80f7 	beq.w	8001c90 <HAL_ADC_ConfigChannel+0x394>
 8001aa2:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8001aa6:	428a      	cmp	r2, r1
 8001aa8:	f000 80f2 	beq.w	8001c90 <HAL_ADC_ConfigChannel+0x394>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001aac:	4d54      	ldr	r5, [pc, #336]	; (8001c00 <HAL_ADC_ConfigChannel+0x304>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aae:	484f      	ldr	r0, [pc, #316]	; (8001bec <HAL_ADC_ConfigChannel+0x2f0>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ab0:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ab2:	6880      	ldr	r0, [r0, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ab4:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ab8:	43c0      	mvns	r0, r0
 8001aba:	f000 0001 	and.w	r0, r0, #1
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	f000 8119 	beq.w	8001cf6 <HAL_ADC_ConfigChannel+0x3fa>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ac4:	484f      	ldr	r0, [pc, #316]	; (8001c04 <HAL_ADC_ConfigChannel+0x308>)
 8001ac6:	4284      	cmp	r4, r0
 8001ac8:	f000 81b6 	beq.w	8001e38 <HAL_ADC_ConfigChannel+0x53c>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001acc:	484e      	ldr	r0, [pc, #312]	; (8001c08 <HAL_ADC_ConfigChannel+0x30c>)
 8001ace:	4284      	cmp	r4, r0
 8001ad0:	f000 81d5 	beq.w	8001e7e <HAL_ADC_ConfigChannel+0x582>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ad4:	484d      	ldr	r0, [pc, #308]	; (8001c0c <HAL_ADC_ConfigChannel+0x310>)
 8001ad6:	4284      	cmp	r4, r0
 8001ad8:	d1ba      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x154>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001ada:	024f      	lsls	r7, r1, #9
 8001adc:	d4b8      	bmi.n	8001a50 <HAL_ADC_ConfigChannel+0x154>
 8001ade:	4943      	ldr	r1, [pc, #268]	; (8001bec <HAL_ADC_ConfigChannel+0x2f0>)
 8001ae0:	428a      	cmp	r2, r1
 8001ae2:	d1b5      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x154>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ae4:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001aec:	4332      	orrs	r2, r6
 8001aee:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001af2:	60aa      	str	r2, [r5, #8]
}
 8001af4:	e717      	b.n	8001926 <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001af6:	6808      	ldr	r0, [r1, #0]
 8001af8:	f3c0 6c84 	ubfx	ip, r0, #26, #5
 8001afc:	e72d      	b.n	800195a <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 8001afe:	2002      	movs	r0, #2
}
 8001b00:	b003      	add	sp, #12
 8001b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b04:	690e      	ldr	r6, [r1, #16]
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b06:	68d0      	ldr	r0, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b08:	2e04      	cmp	r6, #4
 8001b0a:	f000 8083 	beq.w	8001c14 <HAL_ADC_ConfigChannel+0x318>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b0e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8001b12:	0044      	lsls	r4, r0, #1
 8001b14:	6948      	ldr	r0, [r1, #20]
 8001b16:	40a0      	lsls	r0, r4
    MODIFY_REG(*preg,
 8001b18:	680c      	ldr	r4, [r1, #0]
 8001b1a:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001b1e:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b20:	4c3b      	ldr	r4, [pc, #236]	; (8001c10 <HAL_ADC_ConfigChannel+0x314>)
    MODIFY_REG(*preg,
 8001b22:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001b26:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
 8001b2a:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b2e:	690f      	ldr	r7, [r1, #16]
    MODIFY_REG(*preg,
 8001b30:	69ce      	ldr	r6, [r1, #28]
 8001b32:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 8001b36:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 8001b3a:	4330      	orrs	r0, r6
 8001b3c:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001b40:	f891 0020 	ldrb.w	r0, [r1, #32]
 8001b44:	690e      	ldr	r6, [r1, #16]
 8001b46:	2801      	cmp	r0, #1
    MODIFY_REG(*preg,
 8001b48:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8001b4c:	bf08      	it	eq
 8001b4e:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8001b52:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 8001b56:	4305      	orrs	r5, r0
 8001b58:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b5c:	4823      	ldr	r0, [pc, #140]	; (8001bec <HAL_ADC_ConfigChannel+0x2f0>)
 8001b5e:	6880      	ldr	r0, [r0, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b60:	07c0      	lsls	r0, r0, #31
 8001b62:	f53f af75 	bmi.w	8001a50 <HAL_ADC_ConfigChannel+0x154>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b66:	680c      	ldr	r4, [r1, #0]
 8001b68:	68cd      	ldr	r5, [r1, #12]
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001b6a:	f8df c080 	ldr.w	ip, [pc, #128]	; 8001bec <HAL_ADC_ConfigChannel+0x2f0>
 8001b6e:	f005 0618 	and.w	r6, r5, #24
 8001b72:	4820      	ldr	r0, [pc, #128]	; (8001bf4 <HAL_ADC_ConfigChannel+0x2f8>)
 8001b74:	f3c4 0713 	ubfx	r7, r4, #0, #20
 8001b78:	40f0      	lsrs	r0, r6
 8001b7a:	f8dc 60b0 	ldr.w	r6, [ip, #176]	; 0xb0
 8001b7e:	4020      	ands	r0, r4
 8001b80:	ea26 0607 	bic.w	r6, r6, r7
 8001b84:	4330      	orrs	r0, r6
 8001b86:	f8cc 00b0 	str.w	r0, [ip, #176]	; 0xb0
 8001b8a:	e77f      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x190>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b8c:	68d6      	ldr	r6, [r2, #12]
 8001b8e:	6948      	ldr	r0, [r1, #20]
 8001b90:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8001b94:	0076      	lsls	r6, r6, #1
 8001b96:	fa00 f606 	lsl.w	r6, r0, r6
 8001b9a:	e726      	b.n	80019ea <HAL_ADC_ConfigChannel+0xee>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b9c:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8001b9e:	680c      	ldr	r4, [r1, #0]
 8001ba0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001ba4:	06a5      	lsls	r5, r4, #26
 8001ba6:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 8001baa:	d067      	beq.n	8001c7c <HAL_ADC_ConfigChannel+0x380>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bac:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8001bae:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001bb2:	4285      	cmp	r5, r0
 8001bb4:	d05d      	beq.n	8001c72 <HAL_ADC_ConfigChannel+0x376>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bb6:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8001bb8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001bbc:	4285      	cmp	r5, r0
 8001bbe:	d062      	beq.n	8001c86 <HAL_ADC_ConfigChannel+0x38a>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bc0:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8001bc2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001bc6:	4285      	cmp	r5, r0
 8001bc8:	f47f af3e 	bne.w	8001a48 <HAL_ADC_ConfigChannel+0x14c>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001bcc:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8001bce:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001bd2:	66d0      	str	r0, [r2, #108]	; 0x6c
 8001bd4:	e738      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x14c>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001bd6:	680c      	ldr	r4, [r1, #0]
 8001bd8:	68cd      	ldr	r5, [r1, #12]
  if (ADCx == ADC3)
 8001bda:	e749      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x174>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001bdc:	0876      	lsrs	r6, r6, #1
 8001bde:	6948      	ldr	r0, [r1, #20]
 8001be0:	f006 0608 	and.w	r6, r6, #8
 8001be4:	fa00 f606 	lsl.w	r6, r0, r6
 8001be8:	e6ff      	b.n	80019ea <HAL_ADC_ConfigChannel+0xee>
 8001bea:	bf00      	nop
 8001bec:	58026000 	.word	0x58026000
 8001bf0:	5c001000 	.word	0x5c001000
 8001bf4:	000fffff 	.word	0x000fffff
 8001bf8:	47ff0000 	.word	0x47ff0000
 8001bfc:	40022000 	.word	0x40022000
 8001c00:	58026300 	.word	0x58026300
 8001c04:	c7520000 	.word	0xc7520000
 8001c08:	c3210000 	.word	0xc3210000
 8001c0c:	cb840000 	.word	0xcb840000
 8001c10:	58026060 	.word	0x58026060
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c14:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c16:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8001c18:	f3c0 0513 	ubfx	r5, r0, #0, #20
 8001c1c:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8001c1e:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001c22:	2d00      	cmp	r5, #0
 8001c24:	f040 80d9 	bne.w	8001dda <HAL_ADC_ConfigChannel+0x4de>
 8001c28:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001c2c:	4284      	cmp	r4, r0
 8001c2e:	f000 815a 	beq.w	8001ee6 <HAL_ADC_ConfigChannel+0x5ea>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c32:	4cbc      	ldr	r4, [pc, #752]	; (8001f24 <HAL_ADC_ConfigChannel+0x628>)
 8001c34:	4fbc      	ldr	r7, [pc, #752]	; (8001f28 <HAL_ADC_ConfigChannel+0x62c>)
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c36:	6865      	ldr	r5, [r4, #4]
 8001c38:	6865      	ldr	r5, [r4, #4]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c3a:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8001c3e:	4285      	cmp	r5, r0
 8001c40:	f000 813f 	beq.w	8001ec2 <HAL_ADC_ConfigChannel+0x5c6>
 8001c44:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c46:	f104 0708 	add.w	r7, r4, #8
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c4a:	68a5      	ldr	r5, [r4, #8]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c4c:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8001c50:	4285      	cmp	r5, r0
 8001c52:	f000 8124 	beq.w	8001e9e <HAL_ADC_ConfigChannel+0x5a2>
 8001c56:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c58:	f104 060c 	add.w	r6, r4, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c5c:	68e5      	ldr	r5, [r4, #12]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c5e:	f3c5 6484 	ubfx	r4, r5, #26, #5
 8001c62:	42a0      	cmp	r0, r4
 8001c64:	f47f af7a 	bne.w	8001b5c <HAL_ADC_ConfigChannel+0x260>
    MODIFY_REG(*preg,
 8001c68:	6830      	ldr	r0, [r6, #0]
 8001c6a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001c6e:	6030      	str	r0, [r6, #0]
}
 8001c70:	e774      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x260>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001c72:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8001c74:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001c78:	6650      	str	r0, [r2, #100]	; 0x64
 8001c7a:	e79c      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x2ba>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001c7c:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8001c7e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001c82:	6610      	str	r0, [r2, #96]	; 0x60
 8001c84:	e792      	b.n	8001bac <HAL_ADC_ConfigChannel+0x2b0>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001c86:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8001c88:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001c8c:	6690      	str	r0, [r2, #104]	; 0x68
 8001c8e:	e797      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x2c4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c90:	48a6      	ldr	r0, [pc, #664]	; (8001f2c <HAL_ADC_ConfigChannel+0x630>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c92:	4da7      	ldr	r5, [pc, #668]	; (8001f30 <HAL_ADC_ConfigChannel+0x634>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c94:	f500 7080 	add.w	r0, r0, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c98:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c9a:	f850 6cf8 	ldr.w	r6, [r0, #-248]
 8001c9e:	6880      	ldr	r0, [r0, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ca0:	4330      	orrs	r0, r6
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ca2:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
 8001ca6:	43c0      	mvns	r0, r0
 8001ca8:	f000 0001 	and.w	r0, r0, #1
 8001cac:	e707      	b.n	8001abe <HAL_ADC_ConfigChannel+0x1c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cae:	bb47      	cbnz	r7, 8001d02 <HAL_ADC_ConfigChannel+0x406>
 8001cb0:	0ea4      	lsrs	r4, r4, #26
 8001cb2:	3401      	adds	r4, #1
 8001cb4:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cb8:	2e09      	cmp	r6, #9
 8001cba:	d859      	bhi.n	8001d70 <HAL_ADC_ConfigChannel+0x474>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cbc:	06a5      	lsls	r5, r4, #26
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8001cc4:	40b0      	lsls	r0, r6
 8001cc6:	4305      	orrs	r5, r0
 8001cc8:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8001ccc:	0500      	lsls	r0, r0, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cce:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 8001cd0:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001cd2:	f102 0514 	add.w	r5, r2, #20
 8001cd6:	0dc6      	lsrs	r6, r0, #23
  MODIFY_REG(*preg,
 8001cd8:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001cdc:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8001ce0:	fa04 f700 	lsl.w	r7, r4, r0
 8001ce4:	5974      	ldr	r4, [r6, r5]
 8001ce6:	ea24 0407 	bic.w	r4, r4, r7
 8001cea:	688f      	ldr	r7, [r1, #8]
 8001cec:	fa07 f000 	lsl.w	r0, r7, r0
 8001cf0:	4320      	orrs	r0, r4
 8001cf2:	5170      	str	r0, [r6, r5]
}
 8001cf4:	e6ce      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x198>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cf6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
          tmp_hal_status = HAL_ERROR;
 8001cf8:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cfa:	f042 0220 	orr.w	r2, r2, #32
 8001cfe:	661a      	str	r2, [r3, #96]	; 0x60
          tmp_hal_status = HAL_ERROR;
 8001d00:	e611      	b.n	8001926 <HAL_ADC_ConfigChannel+0x2a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8001d06:	2800      	cmp	r0, #0
 8001d08:	d040      	beq.n	8001d8c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001d0a:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d0e:	3001      	adds	r0, #1
 8001d10:	f000 001f 	and.w	r0, r0, #31
 8001d14:	2809      	cmp	r0, #9
 8001d16:	d939      	bls.n	8001d8c <HAL_ADC_ConfigChannel+0x490>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8001d1c:	2800      	cmp	r0, #0
 8001d1e:	f000 80fa 	beq.w	8001f16 <HAL_ADC_ConfigChannel+0x61a>
  return __builtin_clz(value);
 8001d22:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d26:	3001      	adds	r0, #1
 8001d28:	0680      	lsls	r0, r0, #26
 8001d2a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8001d32:	2d00      	cmp	r5, #0
 8001d34:	f000 80ed 	beq.w	8001f12 <HAL_ADC_ConfigChannel+0x616>
  return __builtin_clz(value);
 8001d38:	fab5 f585 	clz	r5, r5
 8001d3c:	2601      	movs	r6, #1
 8001d3e:	3501      	adds	r5, #1
 8001d40:	f005 051f 	and.w	r5, r5, #31
 8001d44:	fa06 f505 	lsl.w	r5, r6, r5
 8001d48:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8001d4e:	2c00      	cmp	r4, #0
 8001d50:	f000 80dd 	beq.w	8001f0e <HAL_ADC_ConfigChannel+0x612>
  return __builtin_clz(value);
 8001d54:	fab4 f484 	clz	r4, r4
 8001d58:	f06f 061d 	mvn.w	r6, #29
 8001d5c:	1c60      	adds	r0, r4, #1
 8001d5e:	f000 041f 	and.w	r4, r0, #31
 8001d62:	2003      	movs	r0, #3
 8001d64:	fb10 6004 	smlabb	r0, r0, r4, r6
 8001d68:	0500      	lsls	r0, r0, #20
 8001d6a:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8001d6e:	e7ae      	b.n	8001cce <HAL_ADC_ConfigChannel+0x3d2>
 8001d70:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8001d74:	06a5      	lsls	r5, r4, #26
 8001d76:	2401      	movs	r4, #1
 8001d78:	381e      	subs	r0, #30
 8001d7a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8001d7e:	fa04 f606 	lsl.w	r6, r4, r6
 8001d82:	0500      	lsls	r0, r0, #20
 8001d84:	4335      	orrs	r5, r6
 8001d86:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8001d8a:	e7a0      	b.n	8001cce <HAL_ADC_ConfigChannel+0x3d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8c:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8001d90:	2800      	cmp	r0, #0
 8001d92:	f000 80d9 	beq.w	8001f48 <HAL_ADC_ConfigChannel+0x64c>
  return __builtin_clz(value);
 8001d96:	fab0 f080 	clz	r0, r0
 8001d9a:	3001      	adds	r0, #1
 8001d9c:	0680      	lsls	r0, r0, #26
 8001d9e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8001da6:	2d00      	cmp	r5, #0
 8001da8:	f000 80cc 	beq.w	8001f44 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 8001dac:	fab5 f585 	clz	r5, r5
 8001db0:	2601      	movs	r6, #1
 8001db2:	3501      	adds	r5, #1
 8001db4:	f005 051f 	and.w	r5, r5, #31
 8001db8:	fa06 f505 	lsl.w	r5, r6, r5
 8001dbc:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8001dc2:	2c00      	cmp	r4, #0
 8001dc4:	f000 80aa 	beq.w	8001f1c <HAL_ADC_ConfigChannel+0x620>
  return __builtin_clz(value);
 8001dc8:	fab4 f084 	clz	r0, r4
 8001dcc:	3001      	adds	r0, #1
 8001dce:	f000 001f 	and.w	r0, r0, #31
 8001dd2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001dd6:	0500      	lsls	r0, r0, #20
 8001dd8:	e779      	b.n	8001cce <HAL_ADC_ConfigChannel+0x3d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001dde:	b11d      	cbz	r5, 8001de8 <HAL_ADC_ConfigChannel+0x4ec>
  return __builtin_clz(value);
 8001de0:	fab5 f585 	clz	r5, r5
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001de4:	42ac      	cmp	r4, r5
 8001de6:	d07e      	beq.n	8001ee6 <HAL_ADC_ConfigChannel+0x5ea>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001de8:	4c4e      	ldr	r4, [pc, #312]	; (8001f24 <HAL_ADC_ConfigChannel+0x628>)
 8001dea:	4f4f      	ldr	r7, [pc, #316]	; (8001f28 <HAL_ADC_ConfigChannel+0x62c>)
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001dec:	6865      	ldr	r5, [r4, #4]
 8001dee:	6865      	ldr	r5, [r4, #4]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001df0:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 8001df8:	b11e      	cbz	r6, 8001e02 <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 8001dfa:	fab6 f686 	clz	r6, r6
 8001dfe:	42b5      	cmp	r5, r6
 8001e00:	d05f      	beq.n	8001ec2 <HAL_ADC_ConfigChannel+0x5c6>
 8001e02:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e04:	f104 0708 	add.w	r7, r4, #8
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e08:	68a5      	ldr	r5, [r4, #8]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e0a:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 8001e12:	b11e      	cbz	r6, 8001e1c <HAL_ADC_ConfigChannel+0x520>
  return __builtin_clz(value);
 8001e14:	fab6 f686 	clz	r6, r6
 8001e18:	42b5      	cmp	r5, r6
 8001e1a:	d040      	beq.n	8001e9e <HAL_ADC_ConfigChannel+0x5a2>
 8001e1c:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e1e:	f104 060c 	add.w	r6, r4, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e22:	68e5      	ldr	r5, [r4, #12]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e24:	f3c5 6484 	ubfx	r4, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8001e2c:	2800      	cmp	r0, #0
 8001e2e:	f43f ae95 	beq.w	8001b5c <HAL_ADC_ConfigChannel+0x260>
  return __builtin_clz(value);
 8001e32:	fab0 f080 	clz	r0, r0
 8001e36:	e714      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x366>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e38:	0209      	lsls	r1, r1, #8
 8001e3a:	f53f ae09 	bmi.w	8001a50 <HAL_ADC_ConfigChannel+0x154>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e3e:	493d      	ldr	r1, [pc, #244]	; (8001f34 <HAL_ADC_ConfigChannel+0x638>)
 8001e40:	428a      	cmp	r2, r1
 8001e42:	f47f ae05 	bne.w	8001a50 <HAL_ADC_ConfigChannel+0x154>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e46:	4a3c      	ldr	r2, [pc, #240]	; (8001f38 <HAL_ADC_ConfigChannel+0x63c>)
 8001e48:	483c      	ldr	r0, [pc, #240]	; (8001f3c <HAL_ADC_ConfigChannel+0x640>)
 8001e4a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e4c:	68a9      	ldr	r1, [r5, #8]
 8001e4e:	0992      	lsrs	r2, r2, #6
 8001e50:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001e54:	fba0 0202 	umull	r0, r2, r0, r2
 8001e58:	4331      	orrs	r1, r6
 8001e5a:	0992      	lsrs	r2, r2, #6
 8001e5c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001e60:	3201      	adds	r2, #1
 8001e62:	60a9      	str	r1, [r5, #8]
 8001e64:	0052      	lsls	r2, r2, #1
 8001e66:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001e68:	9a01      	ldr	r2, [sp, #4]
 8001e6a:	2a00      	cmp	r2, #0
 8001e6c:	f43f adf0 	beq.w	8001a50 <HAL_ADC_ConfigChannel+0x154>
                wait_loop_index--;
 8001e70:	9a01      	ldr	r2, [sp, #4]
 8001e72:	3a01      	subs	r2, #1
 8001e74:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001e76:	9a01      	ldr	r2, [sp, #4]
 8001e78:	2a00      	cmp	r2, #0
 8001e7a:	d1f9      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x574>
 8001e7c:	e5e8      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x154>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e7e:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 8001e82:	f47f ade5 	bne.w	8001a50 <HAL_ADC_ConfigChannel+0x154>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e86:	492b      	ldr	r1, [pc, #172]	; (8001f34 <HAL_ADC_ConfigChannel+0x638>)
 8001e88:	428a      	cmp	r2, r1
 8001e8a:	f47f ade1 	bne.w	8001a50 <HAL_ADC_ConfigChannel+0x154>
 8001e8e:	68aa      	ldr	r2, [r5, #8]
 8001e90:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001e94:	4332      	orrs	r2, r6
 8001e96:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001e9a:	60aa      	str	r2, [r5, #8]
}
 8001e9c:	e543      	b.n	8001926 <HAL_ADC_ConfigChannel+0x2a>
    MODIFY_REG(*preg,
 8001e9e:	6838      	ldr	r0, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ea0:	f104 060c 	add.w	r6, r4, #12
    MODIFY_REG(*preg,
 8001ea4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001ea8:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001eaa:	68e0      	ldr	r0, [r4, #12]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001eac:	6808      	ldr	r0, [r1, #0]
 8001eae:	68e4      	ldr	r4, [r4, #12]
 8001eb0:	f3c0 0513 	ubfx	r5, r0, #0, #20
 8001eb4:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001eb8:	2d00      	cmp	r5, #0
 8001eba:	d1b5      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x52c>
 8001ebc:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001ec0:	e6cf      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x366>
    MODIFY_REG(*preg,
 8001ec2:	6838      	ldr	r0, [r7, #0]
 8001ec4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001ec8:	6038      	str	r0, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eca:	f104 0708 	add.w	r7, r4, #8
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ece:	68a0      	ldr	r0, [r4, #8]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ed0:	6808      	ldr	r0, [r1, #0]
 8001ed2:	68a5      	ldr	r5, [r4, #8]
 8001ed4:	f3c0 0613 	ubfx	r6, r0, #0, #20
 8001ed8:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8001edc:	2e00      	cmp	r6, #0
 8001ede:	d196      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x512>
 8001ee0:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001ee4:	e6b4      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x354>
    MODIFY_REG(*preg,
 8001ee6:	4c13      	ldr	r4, [pc, #76]	; (8001f34 <HAL_ADC_ConfigChannel+0x638>)
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ee8:	4f0f      	ldr	r7, [pc, #60]	; (8001f28 <HAL_ADC_ConfigChannel+0x62c>)
    MODIFY_REG(*preg,
 8001eea:	6e20      	ldr	r0, [r4, #96]	; 0x60
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eec:	3460      	adds	r4, #96	; 0x60
    MODIFY_REG(*preg,
 8001eee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001ef2:	6020      	str	r0, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ef4:	6860      	ldr	r0, [r4, #4]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ef6:	6808      	ldr	r0, [r1, #0]
 8001ef8:	6865      	ldr	r5, [r4, #4]
 8001efa:	f3c0 0613 	ubfx	r6, r0, #0, #20
 8001efe:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8001f02:	2e00      	cmp	r6, #0
 8001f04:	f47f af76 	bne.w	8001df4 <HAL_ADC_ConfigChannel+0x4f8>
 8001f08:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001f0c:	e697      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x342>
 8001f0e:	480c      	ldr	r0, [pc, #48]	; (8001f40 <HAL_ADC_ConfigChannel+0x644>)
 8001f10:	e6dd      	b.n	8001cce <HAL_ADC_ConfigChannel+0x3d2>
 8001f12:	2502      	movs	r5, #2
 8001f14:	e718      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x44c>
 8001f16:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001f1a:	e708      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x432>
 8001f1c:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8001f20:	e6d5      	b.n	8001cce <HAL_ADC_ConfigChannel+0x3d2>
 8001f22:	bf00      	nop
 8001f24:	58026060 	.word	0x58026060
 8001f28:	58026064 	.word	0x58026064
 8001f2c:	40022000 	.word	0x40022000
 8001f30:	40022300 	.word	0x40022300
 8001f34:	58026000 	.word	0x58026000
 8001f38:	24000004 	.word	0x24000004
 8001f3c:	053e2d63 	.word	0x053e2d63
 8001f40:	fe500000 	.word	0xfe500000
 8001f44:	2502      	movs	r5, #2
 8001f46:	e739      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x4c0>
 8001f48:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001f4c:	e729      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x4a6>
 8001f4e:	bf00      	nop

08001f50 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f50:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	07d1      	lsls	r1, r2, #31
 8001f56:	d501      	bpl.n	8001f5c <ADC_Enable+0xc>
  return HAL_OK;
 8001f58:	2000      	movs	r0, #0
}
 8001f5a:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f5c:	6899      	ldr	r1, [r3, #8]
 8001f5e:	4a21      	ldr	r2, [pc, #132]	; (8001fe4 <ADC_Enable+0x94>)
 8001f60:	4211      	tst	r1, r2
{
 8001f62:	b570      	push	{r4, r5, r6, lr}
 8001f64:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f66:	d12c      	bne.n	8001fc2 <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
 8001f68:	6899      	ldr	r1, [r3, #8]
 8001f6a:	4a1f      	ldr	r2, [pc, #124]	; (8001fe8 <ADC_Enable+0x98>)
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001f74:	f7ff fb1c 	bl	80015b0 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8001f7c:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d028      	beq.n	8001fd4 <ADC_Enable+0x84>
 8001f82:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d024      	beq.n	8001fd4 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f8a:	4a19      	ldr	r2, [pc, #100]	; (8001ff0 <ADC_Enable+0xa0>)
 8001f8c:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	07d6      	lsls	r6, r2, #31
 8001f92:	d414      	bmi.n	8001fbe <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
 8001f94:	4e14      	ldr	r6, [pc, #80]	; (8001fe8 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f96:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f98:	07d0      	lsls	r0, r2, #31
 8001f9a:	d404      	bmi.n	8001fa6 <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	4032      	ands	r2, r6
 8001fa0:	f042 0201 	orr.w	r2, r2, #1
 8001fa4:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fa6:	f7ff fb03 	bl	80015b0 <HAL_GetTick>
 8001faa:	1b43      	subs	r3, r0, r5
 8001fac:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fae:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fb0:	d902      	bls.n	8001fb8 <ADC_Enable+0x68>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	07d1      	lsls	r1, r2, #31
 8001fb6:	d504      	bpl.n	8001fc2 <ADC_Enable+0x72>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	07d2      	lsls	r2, r2, #31
 8001fbc:	d5eb      	bpl.n	8001f96 <ADC_Enable+0x46>
  return HAL_OK;
 8001fbe:	2000      	movs	r0, #0
}
 8001fc0:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc2:	6e23      	ldr	r3, [r4, #96]	; 0x60
            return HAL_ERROR;
 8001fc4:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc6:	f043 0310 	orr.w	r3, r3, #16
 8001fca:	6623      	str	r3, [r4, #96]	; 0x60
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001fce:	4303      	orrs	r3, r0
 8001fd0:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001fd2:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fd4:	4a07      	ldr	r2, [pc, #28]	; (8001ff4 <ADC_Enable+0xa4>)
 8001fd6:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fd8:	06d2      	lsls	r2, r2, #27
 8001fda:	d0d8      	beq.n	8001f8e <ADC_Enable+0x3e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fdc:	4a06      	ldr	r2, [pc, #24]	; (8001ff8 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d1d5      	bne.n	8001f8e <ADC_Enable+0x3e>
 8001fe2:	e7ec      	b.n	8001fbe <ADC_Enable+0x6e>
 8001fe4:	8000003f 	.word	0x8000003f
 8001fe8:	7fffffc0 	.word	0x7fffffc0
 8001fec:	40022000 	.word	0x40022000
 8001ff0:	58026300 	.word	0x58026300
 8001ff4:	40022300 	.word	0x40022300
 8001ff8:	40022100 	.word	0x40022100

08001ffc <HAL_ADC_Start_DMA>:
{
 8001ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002000:	4d42      	ldr	r5, [pc, #264]	; (800210c <HAL_ADC_Start_DMA+0x110>)
{
 8002002:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002004:	6800      	ldr	r0, [r0, #0]
{
 8002006:	460f      	mov	r7, r1
 8002008:	4616      	mov	r6, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800200a:	42a8      	cmp	r0, r5
 800200c:	d019      	beq.n	8002042 <HAL_ADC_Start_DMA+0x46>
 800200e:	4b40      	ldr	r3, [pc, #256]	; (8002110 <HAL_ADC_Start_DMA+0x114>)
 8002010:	4298      	cmp	r0, r3
 8002012:	d016      	beq.n	8002042 <HAL_ADC_Start_DMA+0x46>
 8002014:	4d3f      	ldr	r5, [pc, #252]	; (8002114 <HAL_ADC_Start_DMA+0x118>)
 8002016:	68ab      	ldr	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002018:	6880      	ldr	r0, [r0, #8]
 800201a:	0742      	lsls	r2, r0, #29
 800201c:	d416      	bmi.n	800204c <HAL_ADC_Start_DMA+0x50>
    __HAL_LOCK(hadc);
 800201e:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
 8002022:	2a01      	cmp	r2, #1
 8002024:	d012      	beq.n	800204c <HAL_ADC_Start_DMA+0x50>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002026:	f003 081f 	and.w	r8, r3, #31
 800202a:	2201      	movs	r2, #1
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800202c:	f1b8 0f09 	cmp.w	r8, #9
    __HAL_LOCK(hadc);
 8002030:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002034:	d90d      	bls.n	8002052 <HAL_ADC_Start_DMA+0x56>
      __HAL_UNLOCK(hadc);
 8002036:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
 8002038:	2001      	movs	r0, #1
      __HAL_UNLOCK(hadc);
 800203a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800203e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002042:	4d35      	ldr	r5, [pc, #212]	; (8002118 <HAL_ADC_Start_DMA+0x11c>)
 8002044:	68ab      	ldr	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002046:	6880      	ldr	r0, [r0, #8]
 8002048:	0742      	lsls	r2, r0, #29
 800204a:	d5e8      	bpl.n	800201e <HAL_ADC_Start_DMA+0x22>
    tmp_hal_status = HAL_BUSY;
 800204c:	2002      	movs	r0, #2
}
 800204e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002052:	f240 2321 	movw	r3, #545	; 0x221
 8002056:	fa23 f308 	lsr.w	r3, r3, r8
 800205a:	43db      	mvns	r3, r3
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800205c:	ea13 0502 	ands.w	r5, r3, r2
 8002060:	d1e9      	bne.n	8002036 <HAL_ADC_Start_DMA+0x3a>
      tmp_hal_status = ADC_Enable(hadc);
 8002062:	4620      	mov	r0, r4
 8002064:	f7ff ff74 	bl	8001f50 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8002068:	2800      	cmp	r0, #0
 800206a:	d13f      	bne.n	80020ec <HAL_ADC_Start_DMA+0xf0>
        ADC_STATE_CLR_SET(hadc->State,
 800206c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800206e:	4b2b      	ldr	r3, [pc, #172]	; (800211c <HAL_ADC_Start_DMA+0x120>)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002070:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8002072:	4013      	ands	r3, r2
 8002074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002078:	6623      	str	r3, [r4, #96]	; 0x60
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800207a:	f1b8 0f00 	cmp.w	r8, #0
 800207e:	d002      	beq.n	8002086 <HAL_ADC_Start_DMA+0x8a>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002080:	4b23      	ldr	r3, [pc, #140]	; (8002110 <HAL_ADC_Start_DMA+0x114>)
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002082:	4299      	cmp	r1, r3
 8002084:	d003      	beq.n	800208e <HAL_ADC_Start_DMA+0x92>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002086:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002088:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800208c:	6623      	str	r3, [r4, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800208e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002090:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8002094:	d02e      	beq.n	80020f4 <HAL_ADC_Start_DMA+0xf8>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002096:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002098:	f023 0306 	bic.w	r3, r3, #6
 800209c:	6663      	str	r3, [r4, #100]	; 0x64
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800209e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020a0:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <HAL_ADC_Start_DMA+0x124>)
 80020a2:	63c3      	str	r3, [r0, #60]	; 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020a4:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <HAL_ADC_Start_DMA+0x128>)
 80020a6:	6403      	str	r3, [r0, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020a8:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <HAL_ADC_Start_DMA+0x12c>)
 80020aa:	64c3      	str	r3, [r0, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020ac:	231c      	movs	r3, #28
 80020ae:	600b      	str	r3, [r1, #0]
        __HAL_UNLOCK(hadc);
 80020b0:	2300      	movs	r3, #0
 80020b2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020b6:	684b      	ldr	r3, [r1, #4]
 80020b8:	f043 0310 	orr.w	r3, r3, #16
 80020bc:	604b      	str	r3, [r1, #4]
        if (hadc->Instance == ADC3)
 80020be:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_ADC_Start_DMA+0x130>)
 80020c0:	4299      	cmp	r1, r3
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80020c2:	68cb      	ldr	r3, [r1, #12]
 80020c4:	f023 0303 	bic.w	r3, r3, #3
 80020c8:	d016      	beq.n	80020f8 <HAL_ADC_Start_DMA+0xfc>
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80020ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020d0:	4633      	mov	r3, r6
 80020d2:	463a      	mov	r2, r7
 80020d4:	3140      	adds	r1, #64	; 0x40
 80020d6:	f000 fe8f 	bl	8002df8 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020da:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80020dc:	4b14      	ldr	r3, [pc, #80]	; (8002130 <HAL_ADC_Start_DMA+0x134>)
 80020de:	6891      	ldr	r1, [r2, #8]
 80020e0:	400b      	ands	r3, r1
 80020e2:	f043 0304 	orr.w	r3, r3, #4
 80020e6:	6093      	str	r3, [r2, #8]
}
 80020e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 80020ec:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
}
 80020f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          ADC_CLEAR_ERRORCODE(hadc);
 80020f4:	6663      	str	r3, [r4, #100]	; 0x64
 80020f6:	e7d2      	b.n	800209e <HAL_ADC_Start_DMA+0xa2>
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020f8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80020fc:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8002100:	60cb      	str	r3, [r1, #12]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002102:	68cb      	ldr	r3, [r1, #12]
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	60cb      	str	r3, [r1, #12]
}
 800210a:	e7e1      	b.n	80020d0 <HAL_ADC_Start_DMA+0xd4>
 800210c:	40022000 	.word	0x40022000
 8002110:	40022100 	.word	0x40022100
 8002114:	58026300 	.word	0x58026300
 8002118:	40022300 	.word	0x40022300
 800211c:	fffff0fe 	.word	0xfffff0fe
 8002120:	08001875 	.word	0x08001875
 8002124:	080015e1 	.word	0x080015e1
 8002128:	080018e1 	.word	0x080018e1
 800212c:	58026000 	.word	0x58026000
 8002130:	7fffffc0 	.word	0x7fffffc0

08002134 <ADC_ConfigureBoostMode>:
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002134:	4a44      	ldr	r2, [pc, #272]	; (8002248 <ADC_ConfigureBoostMode+0x114>)
 8002136:	6803      	ldr	r3, [r0, #0]
 8002138:	4293      	cmp	r3, r2
{
 800213a:	b510      	push	{r4, lr}
 800213c:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800213e:	d025      	beq.n	800218c <ADC_ConfigureBoostMode+0x58>
 8002140:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002144:	4293      	cmp	r3, r2
 8002146:	d021      	beq.n	800218c <ADC_ConfigureBoostMode+0x58>
 8002148:	4b40      	ldr	r3, [pc, #256]	; (800224c <ADC_ConfigureBoostMode+0x118>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002150:	d021      	beq.n	8002196 <ADC_ConfigureBoostMode+0x62>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002152:	f002 fa53 	bl	80045fc <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8002156:	6863      	ldr	r3, [r4, #4]
 8002158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800215c:	d06b      	beq.n	8002236 <ADC_ConfigureBoostMode+0x102>
 800215e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002162:	d05b      	beq.n	800221c <ADC_ConfigureBoostMode+0xe8>
 8002164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002168:	d065      	beq.n	8002236 <ADC_ConfigureBoostMode+0x102>
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
  if (freq <= 6250000UL)
 800216a:	4b39      	ldr	r3, [pc, #228]	; (8002250 <ADC_ConfigureBoostMode+0x11c>)
 800216c:	4298      	cmp	r0, r3
 800216e:	d92f      	bls.n	80021d0 <ADC_ConfigureBoostMode+0x9c>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
  }
  else if (freq <= 12500000UL)
 8002170:	4b38      	ldr	r3, [pc, #224]	; (8002254 <ADC_ConfigureBoostMode+0x120>)
 8002172:	4298      	cmp	r0, r3
 8002174:	d94a      	bls.n	800220c <ADC_ConfigureBoostMode+0xd8>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
  }
  else if (freq <= 25000000UL)
 8002176:	4b38      	ldr	r3, [pc, #224]	; (8002258 <ADC_ConfigureBoostMode+0x124>)
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002178:	6822      	ldr	r2, [r4, #0]
  else if (freq <= 25000000UL)
 800217a:	4298      	cmp	r0, r3
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800217c:	6893      	ldr	r3, [r2, #8]
  else if (freq <= 25000000UL)
 800217e:	d856      	bhi.n	800222e <ADC_ConfigureBoostMode+0xfa>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002184:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002188:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800218a:	bd10      	pop	{r4, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800218c:	4b33      	ldr	r3, [pc, #204]	; (800225c <ADC_ConfigureBoostMode+0x128>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002194:	d1dd      	bne.n	8002152 <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002196:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800219a:	2100      	movs	r1, #0
 800219c:	f003 fb60 	bl	8005860 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80021a0:	6863      	ldr	r3, [r4, #4]
 80021a2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80021a6:	d04d      	beq.n	8002244 <ADC_ConfigureBoostMode+0x110>
 80021a8:	d808      	bhi.n	80021bc <ADC_ConfigureBoostMode+0x88>
 80021aa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80021ae:	d03c      	beq.n	800222a <ADC_ConfigureBoostMode+0xf6>
 80021b0:	d914      	bls.n	80021dc <ADC_ConfigureBoostMode+0xa8>
 80021b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021b6:	d1d8      	bne.n	800216a <ADC_ConfigureBoostMode+0x36>
        freq /= 32UL;
 80021b8:	0940      	lsrs	r0, r0, #5
        break;
 80021ba:	e7d6      	b.n	800216a <ADC_ConfigureBoostMode+0x36>
    switch (hadc->Init.ClockPrescaler)
 80021bc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80021c0:	d031      	beq.n	8002226 <ADC_ConfigureBoostMode+0xf2>
 80021c2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80021c6:	d1d0      	bne.n	800216a <ADC_ConfigureBoostMode+0x36>
  if (freq <= 6250000UL)
 80021c8:	4b21      	ldr	r3, [pc, #132]	; (8002250 <ADC_ConfigureBoostMode+0x11c>)
 80021ca:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
 80021ce:	d31d      	bcc.n	800220c <ADC_ConfigureBoostMode+0xd8>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80021d0:	6822      	ldr	r2, [r4, #0]
 80021d2:	6893      	ldr	r3, [r2, #8]
 80021d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021d8:	6093      	str	r3, [r2, #8]
}
 80021da:	bd10      	pop	{r4, pc}
    switch (hadc->Init.ClockPrescaler)
 80021dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021e0:	d006      	beq.n	80021f0 <ADC_ConfigureBoostMode+0xbc>
 80021e2:	d90a      	bls.n	80021fa <ADC_ConfigureBoostMode+0xc6>
 80021e4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80021e8:	d002      	beq.n	80021f0 <ADC_ConfigureBoostMode+0xbc>
 80021ea:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80021ee:	d1bc      	bne.n	800216a <ADC_ConfigureBoostMode+0x36>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80021f0:	0c9b      	lsrs	r3, r3, #18
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80021f8:	e7b7      	b.n	800216a <ADC_ConfigureBoostMode+0x36>
    switch (hadc->Init.ClockPrescaler)
 80021fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021fe:	d0f7      	beq.n	80021f0 <ADC_ConfigureBoostMode+0xbc>
 8002200:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002204:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002208:	d0f2      	beq.n	80021f0 <ADC_ConfigureBoostMode+0xbc>
 800220a:	e7ae      	b.n	800216a <ADC_ConfigureBoostMode+0x36>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800220c:	6822      	ldr	r2, [r4, #0]
 800220e:	6893      	ldr	r3, [r2, #8]
 8002210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002218:	6093      	str	r3, [r2, #8]
}
 800221a:	bd10      	pop	{r4, pc}
        freq /= 4UL;
 800221c:	0880      	lsrs	r0, r0, #2
  if (freq <= 6250000UL)
 800221e:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <ADC_ConfigureBoostMode+0x11c>)
 8002220:	4298      	cmp	r0, r3
 8002222:	d9d5      	bls.n	80021d0 <ADC_ConfigureBoostMode+0x9c>
 8002224:	e7a4      	b.n	8002170 <ADC_ConfigureBoostMode+0x3c>
        freq /= 128UL;
 8002226:	09c0      	lsrs	r0, r0, #7
        break;
 8002228:	e79f      	b.n	800216a <ADC_ConfigureBoostMode+0x36>
        freq /= 16UL;
 800222a:	0900      	lsrs	r0, r0, #4
        break;
 800222c:	e79d      	b.n	800216a <ADC_ConfigureBoostMode+0x36>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800222e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002232:	6093      	str	r3, [r2, #8]
}
 8002234:	bd10      	pop	{r4, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002236:	0c1b      	lsrs	r3, r3, #16
 8002238:	fbb0 f0f3 	udiv	r0, r0, r3
  if (freq <= 6250000UL)
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <ADC_ConfigureBoostMode+0x11c>)
 800223e:	4298      	cmp	r0, r3
 8002240:	d9c6      	bls.n	80021d0 <ADC_ConfigureBoostMode+0x9c>
 8002242:	e795      	b.n	8002170 <ADC_ConfigureBoostMode+0x3c>
        freq /= 64UL;
 8002244:	0980      	lsrs	r0, r0, #6
        break;
 8002246:	e790      	b.n	800216a <ADC_ConfigureBoostMode+0x36>
 8002248:	40022000 	.word	0x40022000
 800224c:	58026300 	.word	0x58026300
 8002250:	00bebc21 	.word	0x00bebc21
 8002254:	017d7841 	.word	0x017d7841
 8002258:	02faf081 	.word	0x02faf081
 800225c:	40022300 	.word	0x40022300

08002260 <HAL_ADC_Init>:
{
 8002260:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8002262:	2300      	movs	r3, #0
{
 8002264:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8002266:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8002268:	2800      	cmp	r0, #0
 800226a:	f000 80da 	beq.w	8002422 <HAL_ADC_Init+0x1c2>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800226e:	6e05      	ldr	r5, [r0, #96]	; 0x60
 8002270:	4604      	mov	r4, r0
 8002272:	2d00      	cmp	r5, #0
 8002274:	f000 80b9 	beq.w	80023ea <HAL_ADC_Init+0x18a>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002278:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800227a:	6893      	ldr	r3, [r2, #8]
 800227c:	0098      	lsls	r0, r3, #2
 800227e:	d503      	bpl.n	8002288 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002280:	6891      	ldr	r1, [r2, #8]
 8002282:	4b96      	ldr	r3, [pc, #600]	; (80024dc <HAL_ADC_Init+0x27c>)
 8002284:	400b      	ands	r3, r1
 8002286:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002288:	6893      	ldr	r3, [r2, #8]
 800228a:	00d9      	lsls	r1, r3, #3
 800228c:	d416      	bmi.n	80022bc <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800228e:	4b94      	ldr	r3, [pc, #592]	; (80024e0 <HAL_ADC_Init+0x280>)
 8002290:	4994      	ldr	r1, [pc, #592]	; (80024e4 <HAL_ADC_Init+0x284>)
 8002292:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8002294:	6890      	ldr	r0, [r2, #8]
 8002296:	099b      	lsrs	r3, r3, #6
 8002298:	fba1 1303 	umull	r1, r3, r1, r3
 800229c:	4992      	ldr	r1, [pc, #584]	; (80024e8 <HAL_ADC_Init+0x288>)
 800229e:	099b      	lsrs	r3, r3, #6
 80022a0:	4001      	ands	r1, r0
 80022a2:	3301      	adds	r3, #1
 80022a4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80022a8:	6091      	str	r1, [r2, #8]
 80022aa:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80022ac:	9b01      	ldr	r3, [sp, #4]
 80022ae:	b12b      	cbz	r3, 80022bc <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 80022b0:	9b01      	ldr	r3, [sp, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80022b6:	9b01      	ldr	r3, [sp, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f9      	bne.n	80022b0 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022bc:	6893      	ldr	r3, [r2, #8]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	f100 8085 	bmi.w	80023ce <HAL_ADC_Init+0x16e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c4:	6e23      	ldr	r3, [r4, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 80022c6:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c8:	f043 0310 	orr.w	r3, r3, #16
 80022cc:	6623      	str	r3, [r4, #96]	; 0x60
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022d0:	432b      	orrs	r3, r5
 80022d2:	6663      	str	r3, [r4, #100]	; 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022d4:	6893      	ldr	r3, [r2, #8]
 80022d6:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022da:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80022dc:	d17d      	bne.n	80023da <HAL_ADC_Init+0x17a>
 80022de:	f013 0310 	ands.w	r3, r3, #16
 80022e2:	d17a      	bne.n	80023da <HAL_ADC_Init+0x17a>
    ADC_STATE_CLR_SET(hadc->State,
 80022e4:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80022e6:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80022ea:	f041 0102 	orr.w	r1, r1, #2
 80022ee:	6621      	str	r1, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022f0:	6891      	ldr	r1, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022f2:	07ce      	lsls	r6, r1, #31
 80022f4:	d413      	bmi.n	800231e <HAL_ADC_Init+0xbe>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022f6:	497d      	ldr	r1, [pc, #500]	; (80024ec <HAL_ADC_Init+0x28c>)
 80022f8:	428a      	cmp	r2, r1
 80022fa:	f000 80a9 	beq.w	8002450 <HAL_ADC_Init+0x1f0>
 80022fe:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8002302:	428a      	cmp	r2, r1
 8002304:	f000 80a4 	beq.w	8002450 <HAL_ADC_Init+0x1f0>
 8002308:	4979      	ldr	r1, [pc, #484]	; (80024f0 <HAL_ADC_Init+0x290>)
 800230a:	6889      	ldr	r1, [r1, #8]
 800230c:	07c9      	lsls	r1, r1, #31
 800230e:	d406      	bmi.n	800231e <HAL_ADC_Init+0xbe>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002310:	4878      	ldr	r0, [pc, #480]	; (80024f4 <HAL_ADC_Init+0x294>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002312:	6881      	ldr	r1, [r0, #8]
 8002314:	6866      	ldr	r6, [r4, #4]
 8002316:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 800231a:	4331      	orrs	r1, r6
 800231c:	6081      	str	r1, [r0, #8]
    if (hadc->Instance == ADC3)
 800231e:	4974      	ldr	r1, [pc, #464]	; (80024f0 <HAL_ADC_Init+0x290>)
 8002320:	428a      	cmp	r2, r1
 8002322:	d068      	beq.n	80023f6 <HAL_ADC_Init+0x196>
                  hadc->Init.Overrun                                                    |
 8002324:	68a0      	ldr	r0, [r4, #8]
 8002326:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002328:	f894 1020 	ldrb.w	r1, [r4, #32]
                  hadc->Init.Overrun                                                    |
 800232c:	4303      	orrs	r3, r0
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800232e:	7e60      	ldrb	r0, [r4, #25]
                  hadc->Init.Overrun                                                    |
 8002330:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002338:	2901      	cmp	r1, #1
 800233a:	d103      	bne.n	8002344 <HAL_ADC_Init+0xe4>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800233c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800233e:	3901      	subs	r1, #1
 8002340:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002344:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002346:	b121      	cbz	r1, 8002352 <HAL_ADC_Init+0xf2>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002348:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800234c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800234e:	4301      	orrs	r1, r0
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002350:	430b      	orrs	r3, r1
    if (hadc->Instance == ADC3)
 8002352:	4967      	ldr	r1, [pc, #412]	; (80024f0 <HAL_ADC_Init+0x290>)
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002354:	68d0      	ldr	r0, [r2, #12]
    if (hadc->Instance == ADC3)
 8002356:	428a      	cmp	r2, r1
 8002358:	d06f      	beq.n	800243a <HAL_ADC_Init+0x1da>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800235a:	4967      	ldr	r1, [pc, #412]	; (80024f8 <HAL_ADC_Init+0x298>)
 800235c:	4001      	ands	r1, r0
 800235e:	430b      	orrs	r3, r1
 8002360:	60d3      	str	r3, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002362:	6893      	ldr	r3, [r2, #8]
 8002364:	f013 0f04 	tst.w	r3, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002368:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800236a:	d120      	bne.n	80023ae <HAL_ADC_Init+0x14e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800236c:	071b      	lsls	r3, r3, #28
 800236e:	d41e      	bmi.n	80023ae <HAL_ADC_Init+0x14e>
      if (hadc->Instance == ADC3)
 8002370:	4b5f      	ldr	r3, [pc, #380]	; (80024f0 <HAL_ADC_Init+0x290>)
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002372:	68d0      	ldr	r0, [r2, #12]
      if (hadc->Instance == ADC3)
 8002374:	429a      	cmp	r2, r3
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002376:	7e21      	ldrb	r1, [r4, #24]
      if (hadc->Instance == ADC3)
 8002378:	f000 8086 	beq.w	8002488 <HAL_ADC_Init+0x228>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800237c:	4b5f      	ldr	r3, [pc, #380]	; (80024fc <HAL_ADC_Init+0x29c>)
 800237e:	4003      	ands	r3, r0
 8002380:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 8002384:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002386:	430b      	orrs	r3, r1
 8002388:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 800238a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800238e:	2b01      	cmp	r3, #1
 8002390:	d069      	beq.n	8002466 <HAL_ADC_Init+0x206>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002392:	6913      	ldr	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002394:	6c21      	ldr	r1, [r4, #64]	; 0x40
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002396:	f023 0301 	bic.w	r3, r3, #1
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800239a:	6113      	str	r3, [r2, #16]
        ADC_ConfigureBoostMode(hadc);
 800239c:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800239e:	6913      	ldr	r3, [r2, #16]
 80023a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80023a4:	430b      	orrs	r3, r1
 80023a6:	6113      	str	r3, [r2, #16]
        ADC_ConfigureBoostMode(hadc);
 80023a8:	f7ff fec4 	bl	8002134 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023ac:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023ae:	6923      	ldr	r3, [r4, #16]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d03a      	beq.n	800242a <HAL_ADC_Init+0x1ca>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023b6:	f023 030f 	bic.w	r3, r3, #15
 80023ba:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023bc:	6e23      	ldr	r3, [r4, #96]	; 0x60
}
 80023be:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023c0:	f023 0303 	bic.w	r3, r3, #3
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6623      	str	r3, [r4, #96]	; 0x60
}
 80023ca:	b002      	add	sp, #8
 80023cc:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023ce:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d0:	2500      	movs	r5, #0
 80023d2:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80023d8:	d081      	beq.n	80022de <HAL_ADC_Init+0x7e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023da:	6e23      	ldr	r3, [r4, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 80023dc:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023de:	f043 0310 	orr.w	r3, r3, #16
}
 80023e2:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e4:	6623      	str	r3, [r4, #96]	; 0x60
}
 80023e6:	b002      	add	sp, #8
 80023e8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 80023ea:	f7fe fd79 	bl	8000ee0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80023ee:	6665      	str	r5, [r4, #100]	; 0x64
    hadc->Lock = HAL_UNLOCKED;
 80023f0:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
 80023f4:	e740      	b.n	8002278 <HAL_ADC_Init+0x18>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80023f6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80023f8:	68e0      	ldr	r0, [r4, #12]
 80023fa:	4308      	orrs	r0, r1
 80023fc:	7e61      	ldrb	r1, [r4, #25]
 80023fe:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002402:	68a1      	ldr	r1, [r4, #8]
 8002404:	2908      	cmp	r1, #8
 8002406:	d006      	beq.n	8002416 <HAL_ADC_Init+0x1b6>
 8002408:	290c      	cmp	r1, #12
 800240a:	d055      	beq.n	80024b8 <HAL_ADC_Init+0x258>
 800240c:	291c      	cmp	r1, #28
 800240e:	d063      	beq.n	80024d8 <HAL_ADC_Init+0x278>
 8002410:	2918      	cmp	r1, #24
 8002412:	bf08      	it	eq
 8002414:	2318      	moveq	r3, #24
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002416:	f894 1020 	ldrb.w	r1, [r4, #32]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800241a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800241e:	4303      	orrs	r3, r0
 8002420:	e78a      	b.n	8002338 <HAL_ADC_Init+0xd8>
    return HAL_ERROR;
 8002422:	2501      	movs	r5, #1
}
 8002424:	4628      	mov	r0, r5
 8002426:	b002      	add	sp, #8
 8002428:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800242a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800242c:	69e3      	ldr	r3, [r4, #28]
 800242e:	f021 010f 	bic.w	r1, r1, #15
 8002432:	3b01      	subs	r3, #1
 8002434:	430b      	orrs	r3, r1
 8002436:	6313      	str	r3, [r2, #48]	; 0x30
 8002438:	e7c0      	b.n	80023bc <HAL_ADC_Init+0x15c>
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800243a:	4931      	ldr	r1, [pc, #196]	; (8002500 <HAL_ADC_Init+0x2a0>)
 800243c:	4001      	ands	r1, r0
 800243e:	430b      	orrs	r3, r1
 8002440:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002442:	6913      	ldr	r3, [r2, #16]
 8002444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002446:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800244a:	430b      	orrs	r3, r1
 800244c:	6113      	str	r3, [r2, #16]
 800244e:	e788      	b.n	8002362 <HAL_ADC_Init+0x102>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002450:	4926      	ldr	r1, [pc, #152]	; (80024ec <HAL_ADC_Init+0x28c>)
 8002452:	6888      	ldr	r0, [r1, #8]
 8002454:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8002458:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800245a:	4301      	orrs	r1, r0
 800245c:	07c8      	lsls	r0, r1, #31
 800245e:	f53f af5e 	bmi.w	800231e <HAL_ADC_Init+0xbe>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002462:	4828      	ldr	r0, [pc, #160]	; (8002504 <HAL_ADC_Init+0x2a4>)
 8002464:	e755      	b.n	8002312 <HAL_ADC_Init+0xb2>
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002466:	e9d4 1312 	ldrd	r1, r3, [r4, #72]	; 0x48
 800246a:	6d26      	ldr	r6, [r4, #80]	; 0x50
 800246c:	3901      	subs	r1, #1
 800246e:	6910      	ldr	r0, [r2, #16]
 8002470:	4333      	orrs	r3, r6
 8002472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002476:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002478:	430b      	orrs	r3, r1
 800247a:	4923      	ldr	r1, [pc, #140]	; (8002508 <HAL_ADC_Init+0x2a8>)
 800247c:	4001      	ands	r1, r0
 800247e:	430b      	orrs	r3, r1
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002480:	6c21      	ldr	r1, [r4, #64]	; 0x40
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	e788      	b.n	800239a <HAL_ADC_Init+0x13a>
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002488:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800248c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800248e:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002492:	491a      	ldr	r1, [pc, #104]	; (80024fc <HAL_ADC_Init+0x29c>)
 8002494:	4001      	ands	r1, r0
 8002496:	430b      	orrs	r3, r1
 8002498:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 800249a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d00c      	beq.n	80024bc <HAL_ADC_Init+0x25c>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024a2:	6913      	ldr	r3, [r2, #16]
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80024aa:	6913      	ldr	r3, [r2, #16]
 80024ac:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80024ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80024b2:	430b      	orrs	r3, r1
 80024b4:	6113      	str	r3, [r2, #16]
      if (hadc->Instance != ADC3)
 80024b6:	e77a      	b.n	80023ae <HAL_ADC_Init+0x14e>
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80024b8:	2308      	movs	r3, #8
 80024ba:	e7ac      	b.n	8002416 <HAL_ADC_Init+0x1b6>
          MODIFY_REG(hadc->Instance->CFGR2,
 80024bc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80024be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80024c0:	6910      	ldr	r0, [r2, #16]
 80024c2:	430b      	orrs	r3, r1
 80024c4:	4911      	ldr	r1, [pc, #68]	; (800250c <HAL_ADC_Init+0x2ac>)
 80024c6:	4001      	ands	r1, r0
 80024c8:	430b      	orrs	r3, r1
 80024ca:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80024cc:	430b      	orrs	r3, r1
 80024ce:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80024d0:	430b      	orrs	r3, r1
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	e7e7      	b.n	80024a8 <HAL_ADC_Init+0x248>
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80024d8:	2310      	movs	r3, #16
 80024da:	e79c      	b.n	8002416 <HAL_ADC_Init+0x1b6>
 80024dc:	5fffffc0 	.word	0x5fffffc0
 80024e0:	24000004 	.word	0x24000004
 80024e4:	053e2d63 	.word	0x053e2d63
 80024e8:	6fffffc0 	.word	0x6fffffc0
 80024ec:	40022000 	.word	0x40022000
 80024f0:	58026000 	.word	0x58026000
 80024f4:	58026300 	.word	0x58026300
 80024f8:	fff0c003 	.word	0xfff0c003
 80024fc:	ffffbffc 	.word	0xffffbffc
 8002500:	fff04007 	.word	0xfff04007
 8002504:	40022300 	.word	0x40022300
 8002508:	fc00f81e 	.word	0xfc00f81e
 800250c:	fc00f81f 	.word	0xfc00f81f

08002510 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop

08002514 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop

08002518 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop

0800251c <HAL_ADCEx_LevelOutOfWindow3Callback>:
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop

08002520 <HAL_ADCEx_EndOfSamplingCallback>:
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop

08002524 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002524:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002526:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
{
 800252a:	b09c      	sub	sp, #112	; 0x70
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800252c:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 800252e:	2a01      	cmp	r2, #1
 8002530:	d04d      	beq.n	80025ce <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002532:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002534:	4c2b      	ldr	r4, [pc, #172]	; (80025e4 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002536:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002538:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800253a:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800253c:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800253e:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 8002540:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002544:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002546:	d008      	beq.n	800255a <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002548:	6e19      	ldr	r1, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800254a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800254e:	f041 0120 	orr.w	r1, r1, #32
 8002552:	6619      	str	r1, [r3, #96]	; 0x60
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002554:	b01c      	add	sp, #112	; 0x70
 8002556:	bcf0      	pop	{r4, r5, r6, r7}
 8002558:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800255a:	4c23      	ldr	r4, [pc, #140]	; (80025e8 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 800255c:	68a2      	ldr	r2, [r4, #8]
 800255e:	0752      	lsls	r2, r2, #29
 8002560:	d50b      	bpl.n	800257a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002562:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002564:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 8002566:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002568:	f042 0220 	orr.w	r2, r2, #32
 800256c:	661a      	str	r2, [r3, #96]	; 0x60
  __HAL_UNLOCK(hadc);
 800256e:	2200      	movs	r2, #0
 8002570:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 8002574:	b01c      	add	sp, #112	; 0x70
 8002576:	bcf0      	pop	{r4, r5, r6, r7}
 8002578:	4770      	bx	lr
 800257a:	68a8      	ldr	r0, [r5, #8]
 800257c:	f010 0004 	ands.w	r0, r0, #4
 8002580:	d1f0      	bne.n	8002564 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002582:	b1c6      	cbz	r6, 80025b6 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002584:	f8df c068 	ldr.w	ip, [pc, #104]	; 80025f0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002588:	684f      	ldr	r7, [r1, #4]
 800258a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800258e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002592:	433a      	orrs	r2, r7
 8002594:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002598:	68ad      	ldr	r5, [r5, #8]
 800259a:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800259c:	432a      	orrs	r2, r5
 800259e:	07d4      	lsls	r4, r2, #31
 80025a0:	d413      	bmi.n	80025ca <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 80025a2:	688a      	ldr	r2, [r1, #8]
 80025a4:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80025a8:	4316      	orrs	r6, r2
 80025aa:	4a10      	ldr	r2, [pc, #64]	; (80025ec <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80025ac:	400a      	ands	r2, r1
 80025ae:	4316      	orrs	r6, r2
 80025b0:	f8cc 6008 	str.w	r6, [ip, #8]
 80025b4:	e7db      	b.n	800256e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80025b6:	490e      	ldr	r1, [pc, #56]	; (80025f0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 80025b8:	688a      	ldr	r2, [r1, #8]
 80025ba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80025be:	608a      	str	r2, [r1, #8]
 80025c0:	68a8      	ldr	r0, [r5, #8]
 80025c2:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025c4:	4302      	orrs	r2, r0
 80025c6:	07d0      	lsls	r0, r2, #31
 80025c8:	d505      	bpl.n	80025d6 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ca:	2000      	movs	r0, #0
 80025cc:	e7cf      	b.n	800256e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 80025ce:	2002      	movs	r0, #2
}
 80025d0:	b01c      	add	sp, #112	; 0x70
 80025d2:	bcf0      	pop	{r4, r5, r6, r7}
 80025d4:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025d6:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d8:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025da:	4a04      	ldr	r2, [pc, #16]	; (80025ec <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80025dc:	4022      	ands	r2, r4
 80025de:	608a      	str	r2, [r1, #8]
 80025e0:	e7c5      	b.n	800256e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80025e2:	bf00      	nop
 80025e4:	40022000 	.word	0x40022000
 80025e8:	40022100 	.word	0x40022100
 80025ec:	fffff0e0 	.word	0xfffff0e0
 80025f0:	40022300 	.word	0x40022300

080025f4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f4:	4906      	ldr	r1, [pc, #24]	; (8002610 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f6:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025fa:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025fe:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002600:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002604:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002608:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800260a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800260c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800260e:	4770      	bx	lr
 8002610:	e000ed00 	.word	0xe000ed00
 8002614:	05fa0000 	.word	0x05fa0000

08002618 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_NVIC_SetPriority+0x70>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002620:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002622:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002626:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800262a:	f1be 0f04 	cmp.w	lr, #4
 800262e:	bf28      	it	cs
 8002630:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002634:	f1bc 0f06 	cmp.w	ip, #6
 8002638:	d91a      	bls.n	8002670 <HAL_NVIC_SetPriority+0x58>
 800263a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800263c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8002640:	fa0c fc03 	lsl.w	ip, ip, r3
 8002644:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 800264c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002652:	ea21 010c 	bic.w	r1, r1, ip
 8002656:	fa01 f103 	lsl.w	r1, r1, r3
 800265a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800265e:	db0a      	blt.n	8002676 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002660:	0109      	lsls	r1, r1, #4
 8002662:	4b0a      	ldr	r3, [pc, #40]	; (800268c <HAL_NVIC_SetPriority+0x74>)
 8002664:	b2c9      	uxtb	r1, r1
 8002666:	4403      	add	r3, r0
 8002668:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800266c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002670:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002672:	4613      	mov	r3, r2
 8002674:	e7e8      	b.n	8002648 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002676:	f000 000f 	and.w	r0, r0, #15
 800267a:	0109      	lsls	r1, r1, #4
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <HAL_NVIC_SetPriority+0x78>)
 800267e:	b2c9      	uxtb	r1, r1
 8002680:	4403      	add	r3, r0
 8002682:	7619      	strb	r1, [r3, #24]
 8002684:	f85d fb04 	ldr.w	pc, [sp], #4
 8002688:	e000ed00 	.word	0xe000ed00
 800268c:	e000e100 	.word	0xe000e100
 8002690:	e000ecfc 	.word	0xe000ecfc

08002694 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002694:	2800      	cmp	r0, #0
 8002696:	db07      	blt.n	80026a8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002698:	2301      	movs	r3, #1
 800269a:	f000 011f 	and.w	r1, r0, #31
 800269e:	4a03      	ldr	r2, [pc, #12]	; (80026ac <HAL_NVIC_EnableIRQ+0x18>)
 80026a0:	0940      	lsrs	r0, r0, #5
 80026a2:	408b      	lsls	r3, r1
 80026a4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000e100 	.word	0xe000e100

080026b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b0:	1e43      	subs	r3, r0, #1
 80026b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b6:	d20c      	bcs.n	80026d2 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026bc:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026be:	4906      	ldr	r1, [pc, #24]	; (80026d8 <HAL_SYSTICK_Config+0x28>)
 80026c0:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c4:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c6:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c8:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026cc:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ce:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80026d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80026dc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80026e2:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80026e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 80026ec:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_MPU_Enable+0x1c>)
 80026fa:	f040 0001 	orr.w	r0, r0, #1
 80026fe:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002704:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002708:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800270a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800270e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002712:	4770      	bx	lr
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002718:	4a17      	ldr	r2, [pc, #92]	; (8002778 <HAL_MPU_ConfigRegion+0x60>)
 800271a:	7843      	ldrb	r3, [r0, #1]
 800271c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8002720:	7801      	ldrb	r1, [r0, #0]
 8002722:	b321      	cbz	r1, 800276e <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002724:	6843      	ldr	r3, [r0, #4]
{
 8002726:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 8002728:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800272c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800272e:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002732:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002734:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002738:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800273c:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002740:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002742:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002744:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002748:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800274c:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002750:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002754:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8002758:	7a01      	ldrb	r1, [r0, #8]
 800275a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800275e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8002762:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002766:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800276a:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 800276e:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8002772:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8002776:	4770      	bx	lr
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800277c:	6802      	ldr	r2, [r0, #0]
 800277e:	4b34      	ldr	r3, [pc, #208]	; (8002850 <DMA_CalcBaseAndBitshift+0xd4>)
 8002780:	4934      	ldr	r1, [pc, #208]	; (8002854 <DMA_CalcBaseAndBitshift+0xd8>)
{
 8002782:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002784:	4d34      	ldr	r5, [pc, #208]	; (8002858 <DMA_CalcBaseAndBitshift+0xdc>)
 8002786:	4c35      	ldr	r4, [pc, #212]	; (800285c <DMA_CalcBaseAndBitshift+0xe0>)
 8002788:	42aa      	cmp	r2, r5
 800278a:	bf18      	it	ne
 800278c:	429a      	cmpne	r2, r3
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	428a      	cmp	r2, r1
 8002796:	bf08      	it	eq
 8002798:	f043 0301 	orreq.w	r3, r3, #1
 800279c:	3130      	adds	r1, #48	; 0x30
 800279e:	42a2      	cmp	r2, r4
 80027a0:	bf08      	it	eq
 80027a2:	f043 0301 	orreq.w	r3, r3, #1
 80027a6:	3430      	adds	r4, #48	; 0x30
 80027a8:	428a      	cmp	r2, r1
 80027aa:	bf08      	it	eq
 80027ac:	f043 0301 	orreq.w	r3, r3, #1
 80027b0:	3130      	adds	r1, #48	; 0x30
 80027b2:	42a2      	cmp	r2, r4
 80027b4:	bf08      	it	eq
 80027b6:	f043 0301 	orreq.w	r3, r3, #1
 80027ba:	3430      	adds	r4, #48	; 0x30
 80027bc:	428a      	cmp	r2, r1
 80027be:	bf08      	it	eq
 80027c0:	f043 0301 	orreq.w	r3, r3, #1
 80027c4:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80027c8:	42a2      	cmp	r2, r4
 80027ca:	bf08      	it	eq
 80027cc:	f043 0301 	orreq.w	r3, r3, #1
 80027d0:	f504 745c 	add.w	r4, r4, #880	; 0x370
 80027d4:	428a      	cmp	r2, r1
 80027d6:	bf08      	it	eq
 80027d8:	f043 0301 	orreq.w	r3, r3, #1
 80027dc:	3130      	adds	r1, #48	; 0x30
 80027de:	42a2      	cmp	r2, r4
 80027e0:	bf08      	it	eq
 80027e2:	f043 0301 	orreq.w	r3, r3, #1
 80027e6:	3430      	adds	r4, #48	; 0x30
 80027e8:	428a      	cmp	r2, r1
 80027ea:	bf08      	it	eq
 80027ec:	f043 0301 	orreq.w	r3, r3, #1
 80027f0:	3130      	adds	r1, #48	; 0x30
 80027f2:	42a2      	cmp	r2, r4
 80027f4:	bf08      	it	eq
 80027f6:	f043 0301 	orreq.w	r3, r3, #1
 80027fa:	3430      	adds	r4, #48	; 0x30
 80027fc:	428a      	cmp	r2, r1
 80027fe:	bf08      	it	eq
 8002800:	f043 0301 	orreq.w	r3, r3, #1
 8002804:	3130      	adds	r1, #48	; 0x30
 8002806:	42a2      	cmp	r2, r4
 8002808:	bf08      	it	eq
 800280a:	f043 0301 	orreq.w	r3, r3, #1
 800280e:	428a      	cmp	r2, r1
 8002810:	bf08      	it	eq
 8002812:	f043 0301 	orreq.w	r3, r3, #1
 8002816:	b913      	cbnz	r3, 800281e <DMA_CalcBaseAndBitshift+0xa2>
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <DMA_CalcBaseAndBitshift+0xe4>)
 800281a:	429a      	cmp	r2, r3
 800281c:	d113      	bne.n	8002846 <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800281e:	b2d3      	uxtb	r3, r2
 8002820:	4910      	ldr	r1, [pc, #64]	; (8002864 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002822:	4c11      	ldr	r4, [pc, #68]	; (8002868 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002824:	3b10      	subs	r3, #16
 8002826:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 800282a:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800282c:	4b0f      	ldr	r3, [pc, #60]	; (800286c <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800282e:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002832:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002836:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002838:	bf88      	it	hi
 800283a:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800283c:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800283e:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8002840:	4618      	mov	r0, r3
 8002842:	bc30      	pop	{r4, r5}
 8002844:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002846:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 800284a:	6583      	str	r3, [r0, #88]	; 0x58
 800284c:	e7f8      	b.n	8002840 <DMA_CalcBaseAndBitshift+0xc4>
 800284e:	bf00      	nop
 8002850:	40020010 	.word	0x40020010
 8002854:	40020040 	.word	0x40020040
 8002858:	40020028 	.word	0x40020028
 800285c:	40020058 	.word	0x40020058
 8002860:	400204b8 	.word	0x400204b8
 8002864:	aaaaaaab 	.word	0xaaaaaaab
 8002868:	08008320 	.word	0x08008320
 800286c:	fffffc00 	.word	0xfffffc00

08002870 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002870:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002872:	4a29      	ldr	r2, [pc, #164]	; (8002918 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8002874:	4929      	ldr	r1, [pc, #164]	; (800291c <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 8002876:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002878:	4d29      	ldr	r5, [pc, #164]	; (8002920 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800287a:	4c2a      	ldr	r4, [pc, #168]	; (8002924 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 800287c:	42ab      	cmp	r3, r5
 800287e:	bf18      	it	ne
 8002880:	4293      	cmpne	r3, r2
 8002882:	bf0c      	ite	eq
 8002884:	2201      	moveq	r2, #1
 8002886:	2200      	movne	r2, #0
 8002888:	428b      	cmp	r3, r1
 800288a:	bf08      	it	eq
 800288c:	f042 0201 	orreq.w	r2, r2, #1
 8002890:	3128      	adds	r1, #40	; 0x28
 8002892:	42a3      	cmp	r3, r4
 8002894:	bf08      	it	eq
 8002896:	f042 0201 	orreq.w	r2, r2, #1
 800289a:	3428      	adds	r4, #40	; 0x28
 800289c:	428b      	cmp	r3, r1
 800289e:	bf08      	it	eq
 80028a0:	f042 0201 	orreq.w	r2, r2, #1
 80028a4:	3128      	adds	r1, #40	; 0x28
 80028a6:	42a3      	cmp	r3, r4
 80028a8:	bf08      	it	eq
 80028aa:	f042 0201 	orreq.w	r2, r2, #1
 80028ae:	428b      	cmp	r3, r1
 80028b0:	bf08      	it	eq
 80028b2:	f042 0201 	orreq.w	r2, r2, #1
 80028b6:	b912      	cbnz	r2, 80028be <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 80028b8:	4a1b      	ldr	r2, [pc, #108]	; (8002928 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d113      	bne.n	80028e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	4c1a      	ldr	r4, [pc, #104]	; (800292c <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80028c2:	4a1b      	ldr	r2, [pc, #108]	; (8002930 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80028c4:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80028c6:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80028c8:	4d1a      	ldr	r5, [pc, #104]	; (8002934 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80028ca:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80028ce:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80028d0:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80028d4:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80028d8:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80028da:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80028de:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80028e0:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80028e2:	bc30      	pop	{r4, r5}
 80028e4:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80028e6:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80028e8:	4913      	ldr	r1, [pc, #76]	; (8002938 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80028ea:	4c14      	ldr	r4, [pc, #80]	; (800293c <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80028ec:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80028ee:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80028f0:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80028f2:	fba4 2302 	umull	r2, r3, r4, r2
 80028f6:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80028fa:	d800      	bhi.n	80028fe <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 80028fc:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80028fe:	4a10      	ldr	r2, [pc, #64]	; (8002940 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002900:	f003 051f 	and.w	r5, r3, #31
 8002904:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002906:	4c0f      	ldr	r4, [pc, #60]	; (8002944 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002908:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800290a:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800290c:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800290e:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002910:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002912:	6602      	str	r2, [r0, #96]	; 0x60
}
 8002914:	e7e5      	b.n	80028e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 8002916:	bf00      	nop
 8002918:	58025408 	.word	0x58025408
 800291c:	58025430 	.word	0x58025430
 8002920:	5802541c 	.word	0x5802541c
 8002924:	58025444 	.word	0x58025444
 8002928:	58025494 	.word	0x58025494
 800292c:	cccccccd 	.word	0xcccccccd
 8002930:	16009600 	.word	0x16009600
 8002934:	58025880 	.word	0x58025880
 8002938:	bffdfbf0 	.word	0xbffdfbf0
 800293c:	aaaaaaab 	.word	0xaaaaaaab
 8002940:	10008200 	.word	0x10008200
 8002944:	40020880 	.word	0x40020880

08002948 <HAL_DMA_Init>:
{
 8002948:	b570      	push	{r4, r5, r6, lr}
 800294a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800294c:	f7fe fe30 	bl	80015b0 <HAL_GetTick>
  if(hdma == NULL)
 8002950:	2c00      	cmp	r4, #0
 8002952:	f000 8175 	beq.w	8002c40 <HAL_DMA_Init+0x2f8>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002956:	6823      	ldr	r3, [r4, #0]
 8002958:	4605      	mov	r5, r0
 800295a:	4a9f      	ldr	r2, [pc, #636]	; (8002bd8 <HAL_DMA_Init+0x290>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d048      	beq.n	80029f2 <HAL_DMA_Init+0xaa>
 8002960:	3218      	adds	r2, #24
 8002962:	4293      	cmp	r3, r2
 8002964:	d045      	beq.n	80029f2 <HAL_DMA_Init+0xaa>
 8002966:	3230      	adds	r2, #48	; 0x30
 8002968:	499c      	ldr	r1, [pc, #624]	; (8002bdc <HAL_DMA_Init+0x294>)
 800296a:	428b      	cmp	r3, r1
 800296c:	bf18      	it	ne
 800296e:	4293      	cmpne	r3, r2
 8002970:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002974:	bf0c      	ite	eq
 8002976:	2201      	moveq	r2, #1
 8002978:	2200      	movne	r2, #0
 800297a:	428b      	cmp	r3, r1
 800297c:	bf08      	it	eq
 800297e:	f042 0201 	orreq.w	r2, r2, #1
 8002982:	3118      	adds	r1, #24
 8002984:	428b      	cmp	r3, r1
 8002986:	bf08      	it	eq
 8002988:	f042 0201 	orreq.w	r2, r2, #1
 800298c:	3118      	adds	r1, #24
 800298e:	428b      	cmp	r3, r1
 8002990:	bf08      	it	eq
 8002992:	f042 0201 	orreq.w	r2, r2, #1
 8002996:	3118      	adds	r1, #24
 8002998:	428b      	cmp	r3, r1
 800299a:	bf08      	it	eq
 800299c:	f042 0201 	orreq.w	r2, r2, #1
 80029a0:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80029a4:	428b      	cmp	r3, r1
 80029a6:	bf08      	it	eq
 80029a8:	f042 0201 	orreq.w	r2, r2, #1
 80029ac:	3118      	adds	r1, #24
 80029ae:	428b      	cmp	r3, r1
 80029b0:	bf08      	it	eq
 80029b2:	f042 0201 	orreq.w	r2, r2, #1
 80029b6:	3118      	adds	r1, #24
 80029b8:	428b      	cmp	r3, r1
 80029ba:	bf08      	it	eq
 80029bc:	f042 0201 	orreq.w	r2, r2, #1
 80029c0:	3118      	adds	r1, #24
 80029c2:	428b      	cmp	r3, r1
 80029c4:	bf08      	it	eq
 80029c6:	f042 0201 	orreq.w	r2, r2, #1
 80029ca:	3118      	adds	r1, #24
 80029cc:	428b      	cmp	r3, r1
 80029ce:	bf08      	it	eq
 80029d0:	f042 0201 	orreq.w	r2, r2, #1
 80029d4:	3118      	adds	r1, #24
 80029d6:	428b      	cmp	r3, r1
 80029d8:	bf08      	it	eq
 80029da:	f042 0201 	orreq.w	r2, r2, #1
 80029de:	3118      	adds	r1, #24
 80029e0:	428b      	cmp	r3, r1
 80029e2:	bf08      	it	eq
 80029e4:	f042 0201 	orreq.w	r2, r2, #1
 80029e8:	b91a      	cbnz	r2, 80029f2 <HAL_DMA_Init+0xaa>
 80029ea:	4a7d      	ldr	r2, [pc, #500]	; (8002be0 <HAL_DMA_Init+0x298>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	f040 8184 	bne.w	8002cfa <HAL_DMA_Init+0x3b2>
    __HAL_UNLOCK(hdma);
 80029f2:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80029f4:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
 80029f6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 80029fa:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	e006      	b.n	8002a16 <HAL_DMA_Init+0xce>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a08:	f7fe fdd2 	bl	80015b0 <HAL_GetTick>
 8002a0c:	1b43      	subs	r3, r0, r5
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	f200 8103 	bhi.w	8002c1a <HAL_DMA_Init+0x2d2>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	07d0      	lsls	r0, r2, #31
 8002a1a:	d4f5      	bmi.n	8002a08 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8002a1c:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a20:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8002a22:	432a      	orrs	r2, r5
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a24:	69a1      	ldr	r1, [r4, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002a26:	681d      	ldr	r5, [r3, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a28:	4302      	orrs	r2, r0
 8002a2a:	6960      	ldr	r0, [r4, #20]
 8002a2c:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a2e:	69e0      	ldr	r0, [r4, #28]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a34:	486b      	ldr	r0, [pc, #428]	; (8002be4 <HAL_DMA_Init+0x29c>)
 8002a36:	4028      	ands	r0, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 8002a38:	6a25      	ldr	r5, [r4, #32]
 8002a3a:	432a      	orrs	r2, r5
    registerValue |=  hdma->Init.Direction           |
 8002a3c:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002a40:	2804      	cmp	r0, #4
 8002a42:	d103      	bne.n	8002a4c <HAL_DMA_Init+0x104>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a44:	e9d4 560b 	ldrd	r5, r6, [r4, #44]	; 0x2c
 8002a48:	4335      	orrs	r5, r6
 8002a4a:	432a      	orrs	r2, r5
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002a4c:	6865      	ldr	r5, [r4, #4]
 8002a4e:	f1a5 0c29 	sub.w	ip, r5, #41	; 0x29
 8002a52:	f1bc 0f1f 	cmp.w	ip, #31
 8002a56:	f240 80e7 	bls.w	8002c28 <HAL_DMA_Init+0x2e0>
 8002a5a:	f1a5 064f 	sub.w	r6, r5, #79	; 0x4f
 8002a5e:	2e03      	cmp	r6, #3
 8002a60:	f200 80e9 	bhi.w	8002c36 <HAL_DMA_Init+0x2ee>
        registerValue |= DMA_SxCR_TRBUFF;
 8002a64:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002a68:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a6a:	2804      	cmp	r0, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002a6c:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a6e:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8002a72:	ea42 0200 	orr.w	r2, r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a76:	d10d      	bne.n	8002a94 <HAL_DMA_Init+0x14c>
      registerValue |= hdma->Init.FIFOThreshold;
 8002a78:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a7a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8002a7c:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a7e:	b14d      	cbz	r5, 8002a94 <HAL_DMA_Init+0x14c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a80:	2900      	cmp	r1, #0
 8002a82:	f040 8115 	bne.w	8002cb0 <HAL_DMA_Init+0x368>
    switch (hdma->Init.FIFOThreshold)
 8002a86:	2801      	cmp	r0, #1
 8002a88:	f000 8132 	beq.w	8002cf0 <HAL_DMA_Init+0x3a8>
 8002a8c:	f030 0102 	bics.w	r1, r0, #2
 8002a90:	f000 8116 	beq.w	8002cc0 <HAL_DMA_Init+0x378>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a94:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a96:	4620      	mov	r0, r4
 8002a98:	f7ff fe70 	bl	800277c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a9c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002a9e:	233f      	movs	r3, #63	; 0x3f
 8002aa0:	f002 021f 	and.w	r2, r2, #31
 8002aa4:	4093      	lsls	r3, r2
 8002aa6:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002aa8:	6822      	ldr	r2, [r4, #0]
 8002aaa:	4b4b      	ldr	r3, [pc, #300]	; (8002bd8 <HAL_DMA_Init+0x290>)
 8002aac:	484e      	ldr	r0, [pc, #312]	; (8002be8 <HAL_DMA_Init+0x2a0>)
 8002aae:	494b      	ldr	r1, [pc, #300]	; (8002bdc <HAL_DMA_Init+0x294>)
 8002ab0:	4282      	cmp	r2, r0
 8002ab2:	bf18      	it	ne
 8002ab4:	429a      	cmpne	r2, r3
 8002ab6:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	428a      	cmp	r2, r1
 8002ac2:	bf08      	it	eq
 8002ac4:	f043 0301 	orreq.w	r3, r3, #1
 8002ac8:	3130      	adds	r1, #48	; 0x30
 8002aca:	4282      	cmp	r2, r0
 8002acc:	bf08      	it	eq
 8002ace:	f043 0301 	orreq.w	r3, r3, #1
 8002ad2:	3030      	adds	r0, #48	; 0x30
 8002ad4:	428a      	cmp	r2, r1
 8002ad6:	bf08      	it	eq
 8002ad8:	f043 0301 	orreq.w	r3, r3, #1
 8002adc:	3130      	adds	r1, #48	; 0x30
 8002ade:	4282      	cmp	r2, r0
 8002ae0:	bf08      	it	eq
 8002ae2:	f043 0301 	orreq.w	r3, r3, #1
 8002ae6:	3030      	adds	r0, #48	; 0x30
 8002ae8:	428a      	cmp	r2, r1
 8002aea:	bf08      	it	eq
 8002aec:	f043 0301 	orreq.w	r3, r3, #1
 8002af0:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8002af4:	4282      	cmp	r2, r0
 8002af6:	bf08      	it	eq
 8002af8:	f043 0301 	orreq.w	r3, r3, #1
 8002afc:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8002b00:	428a      	cmp	r2, r1
 8002b02:	bf08      	it	eq
 8002b04:	f043 0301 	orreq.w	r3, r3, #1
 8002b08:	3130      	adds	r1, #48	; 0x30
 8002b0a:	4282      	cmp	r2, r0
 8002b0c:	bf08      	it	eq
 8002b0e:	f043 0301 	orreq.w	r3, r3, #1
 8002b12:	3030      	adds	r0, #48	; 0x30
 8002b14:	428a      	cmp	r2, r1
 8002b16:	bf08      	it	eq
 8002b18:	f043 0301 	orreq.w	r3, r3, #1
 8002b1c:	3130      	adds	r1, #48	; 0x30
 8002b1e:	4282      	cmp	r2, r0
 8002b20:	bf08      	it	eq
 8002b22:	f043 0301 	orreq.w	r3, r3, #1
 8002b26:	3030      	adds	r0, #48	; 0x30
 8002b28:	428a      	cmp	r2, r1
 8002b2a:	bf08      	it	eq
 8002b2c:	f043 0301 	orreq.w	r3, r3, #1
 8002b30:	3130      	adds	r1, #48	; 0x30
 8002b32:	4282      	cmp	r2, r0
 8002b34:	bf08      	it	eq
 8002b36:	f043 0301 	orreq.w	r3, r3, #1
 8002b3a:	3030      	adds	r0, #48	; 0x30
 8002b3c:	428a      	cmp	r2, r1
 8002b3e:	bf08      	it	eq
 8002b40:	f043 0301 	orreq.w	r3, r3, #1
 8002b44:	4929      	ldr	r1, [pc, #164]	; (8002bec <HAL_DMA_Init+0x2a4>)
 8002b46:	4282      	cmp	r2, r0
 8002b48:	bf08      	it	eq
 8002b4a:	f043 0301 	orreq.w	r3, r3, #1
 8002b4e:	4828      	ldr	r0, [pc, #160]	; (8002bf0 <HAL_DMA_Init+0x2a8>)
 8002b50:	428a      	cmp	r2, r1
 8002b52:	bf08      	it	eq
 8002b54:	f043 0301 	orreq.w	r3, r3, #1
 8002b58:	3128      	adds	r1, #40	; 0x28
 8002b5a:	4282      	cmp	r2, r0
 8002b5c:	bf08      	it	eq
 8002b5e:	f043 0301 	orreq.w	r3, r3, #1
 8002b62:	3028      	adds	r0, #40	; 0x28
 8002b64:	428a      	cmp	r2, r1
 8002b66:	bf08      	it	eq
 8002b68:	f043 0301 	orreq.w	r3, r3, #1
 8002b6c:	3128      	adds	r1, #40	; 0x28
 8002b6e:	4282      	cmp	r2, r0
 8002b70:	bf08      	it	eq
 8002b72:	f043 0301 	orreq.w	r3, r3, #1
 8002b76:	3028      	adds	r0, #40	; 0x28
 8002b78:	428a      	cmp	r2, r1
 8002b7a:	bf08      	it	eq
 8002b7c:	f043 0301 	orreq.w	r3, r3, #1
 8002b80:	3128      	adds	r1, #40	; 0x28
 8002b82:	4282      	cmp	r2, r0
 8002b84:	bf08      	it	eq
 8002b86:	f043 0301 	orreq.w	r3, r3, #1
 8002b8a:	428a      	cmp	r2, r1
 8002b8c:	bf08      	it	eq
 8002b8e:	f043 0301 	orreq.w	r3, r3, #1
 8002b92:	b913      	cbnz	r3, 8002b9a <HAL_DMA_Init+0x252>
 8002b94:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <HAL_DMA_Init+0x2ac>)
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d139      	bne.n	8002c0e <HAL_DMA_Init+0x2c6>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f7ff fe68 	bl	8002870 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ba0:	68a3      	ldr	r3, [r4, #8]
 8002ba2:	2b80      	cmp	r3, #128	; 0x80
 8002ba4:	d028      	beq.n	8002bf8 <HAL_DMA_Init+0x2b0>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ba6:	6863      	ldr	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ba8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002baa:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002bac:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bae:	e9d4 5118 	ldrd	r5, r1, [r4, #96]	; 0x60
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002bb2:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002bb4:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bb6:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002bb8:	d825      	bhi.n	8002c06 <HAL_DMA_Init+0x2be>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002bba:	1e50      	subs	r0, r2, #1
 8002bbc:	2807      	cmp	r0, #7
 8002bbe:	d941      	bls.n	8002c44 <HAL_DMA_Init+0x2fc>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bc0:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002bc2:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	6018      	str	r0, [r3, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bca:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002bcc:	2301      	movs	r3, #1
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bce:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002bd2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002bd6:	bd70      	pop	{r4, r5, r6, pc}
 8002bd8:	40020010 	.word	0x40020010
 8002bdc:	40020040 	.word	0x40020040
 8002be0:	400204b8 	.word	0x400204b8
 8002be4:	fe10803f 	.word	0xfe10803f
 8002be8:	40020028 	.word	0x40020028
 8002bec:	58025408 	.word	0x58025408
 8002bf0:	5802541c 	.word	0x5802541c
 8002bf4:	58025494 	.word	0x58025494
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002bf8:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bfa:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002bfc:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c00:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c02:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c04:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8002c06:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8002c08:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c0c:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c0e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002c10:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c12:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002c14:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002c18:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c1a:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c1c:	2303      	movs	r3, #3
        return HAL_ERROR;
 8002c1e:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c20:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c22:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002c26:	bd70      	pop	{r4, r5, r6, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002c28:	4e67      	ldr	r6, [pc, #412]	; (8002dc8 <HAL_DMA_Init+0x480>)
 8002c2a:	fa26 fc0c 	lsr.w	ip, r6, ip
 8002c2e:	f01c 0f01 	tst.w	ip, #1
 8002c32:	f47f af17 	bne.w	8002a64 <HAL_DMA_Init+0x11c>
 8002c36:	3d74      	subs	r5, #116	; 0x74
 8002c38:	2d03      	cmp	r5, #3
 8002c3a:	f63f af15 	bhi.w	8002a68 <HAL_DMA_Init+0x120>
 8002c3e:	e711      	b.n	8002a64 <HAL_DMA_Init+0x11c>
    return HAL_ERROR;
 8002c40:	2001      	movs	r0, #1
}
 8002c42:	bd70      	pop	{r4, r5, r6, pc}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c44:	6821      	ldr	r1, [r4, #0]
 8002c46:	4b61      	ldr	r3, [pc, #388]	; (8002dcc <HAL_DMA_Init+0x484>)
 8002c48:	4d61      	ldr	r5, [pc, #388]	; (8002dd0 <HAL_DMA_Init+0x488>)
 8002c4a:	42a9      	cmp	r1, r5
 8002c4c:	bf18      	it	ne
 8002c4e:	4299      	cmpne	r1, r3
 8002c50:	f105 0514 	add.w	r5, r5, #20
 8002c54:	bf0c      	ite	eq
 8002c56:	2301      	moveq	r3, #1
 8002c58:	2300      	movne	r3, #0
 8002c5a:	42a9      	cmp	r1, r5
 8002c5c:	bf08      	it	eq
 8002c5e:	f043 0301 	orreq.w	r3, r3, #1
 8002c62:	3514      	adds	r5, #20
 8002c64:	42a9      	cmp	r1, r5
 8002c66:	bf08      	it	eq
 8002c68:	f043 0301 	orreq.w	r3, r3, #1
 8002c6c:	3514      	adds	r5, #20
 8002c6e:	42a9      	cmp	r1, r5
 8002c70:	bf08      	it	eq
 8002c72:	f043 0301 	orreq.w	r3, r3, #1
 8002c76:	3514      	adds	r5, #20
 8002c78:	42a9      	cmp	r1, r5
 8002c7a:	bf08      	it	eq
 8002c7c:	f043 0301 	orreq.w	r3, r3, #1
 8002c80:	3514      	adds	r5, #20
 8002c82:	42a9      	cmp	r1, r5
 8002c84:	bf08      	it	eq
 8002c86:	f043 0301 	orreq.w	r3, r3, #1
 8002c8a:	b93b      	cbnz	r3, 8002c9c <HAL_DMA_Init+0x354>
 8002c8c:	4b51      	ldr	r3, [pc, #324]	; (8002dd4 <HAL_DMA_Init+0x48c>)
 8002c8e:	4299      	cmp	r1, r3
 8002c90:	d004      	beq.n	8002c9c <HAL_DMA_Init+0x354>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c92:	4b51      	ldr	r3, [pc, #324]	; (8002dd8 <HAL_DMA_Init+0x490>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c94:	4951      	ldr	r1, [pc, #324]	; (8002ddc <HAL_DMA_Init+0x494>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c96:	4413      	add	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c9a:	e003      	b.n	8002ca4 <HAL_DMA_Init+0x35c>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c9c:	4b50      	ldr	r3, [pc, #320]	; (8002de0 <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002c9e:	4951      	ldr	r1, [pc, #324]	; (8002de4 <HAL_DMA_Init+0x49c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	4082      	lsls	r2, r0
 8002ca8:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 8002cac:	6762      	str	r2, [r4, #116]	; 0x74
 8002cae:	e78a      	b.n	8002bc6 <HAL_DMA_Init+0x27e>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cb0:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8002cb4:	d00e      	beq.n	8002cd4 <HAL_DMA_Init+0x38c>
    switch (hdma->Init.FIFOThreshold)
 8002cb6:	2802      	cmp	r0, #2
 8002cb8:	d905      	bls.n	8002cc6 <HAL_DMA_Init+0x37e>
 8002cba:	2803      	cmp	r0, #3
 8002cbc:	f47f aeea 	bne.w	8002a94 <HAL_DMA_Init+0x14c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cc0:	01e9      	lsls	r1, r5, #7
 8002cc2:	f57f aee7 	bpl.w	8002a94 <HAL_DMA_Init+0x14c>
          hdma->State = HAL_DMA_STATE_READY;
 8002cc6:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cc8:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8002cca:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ccc:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8002cce:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002cd2:	bd70      	pop	{r4, r5, r6, pc}
    switch (hdma->Init.FIFOThreshold)
 8002cd4:	2803      	cmp	r0, #3
 8002cd6:	f63f aedd 	bhi.w	8002a94 <HAL_DMA_Init+0x14c>
 8002cda:	a101      	add	r1, pc, #4	; (adr r1, 8002ce0 <HAL_DMA_Init+0x398>)
 8002cdc:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8002ce0:	08002cc7 	.word	0x08002cc7
 8002ce4:	08002cc1 	.word	0x08002cc1
 8002ce8:	08002cc7 	.word	0x08002cc7
 8002cec:	08002cf1 	.word	0x08002cf1
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cf0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002cf4:	f47f aece 	bne.w	8002a94 <HAL_DMA_Init+0x14c>
 8002cf8:	e7e5      	b.n	8002cc6 <HAL_DMA_Init+0x37e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002cfa:	4a34      	ldr	r2, [pc, #208]	; (8002dcc <HAL_DMA_Init+0x484>)
 8002cfc:	4834      	ldr	r0, [pc, #208]	; (8002dd0 <HAL_DMA_Init+0x488>)
 8002cfe:	493a      	ldr	r1, [pc, #232]	; (8002de8 <HAL_DMA_Init+0x4a0>)
 8002d00:	4283      	cmp	r3, r0
 8002d02:	bf18      	it	ne
 8002d04:	4293      	cmpne	r3, r2
 8002d06:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8002d0a:	bf0c      	ite	eq
 8002d0c:	2201      	moveq	r2, #1
 8002d0e:	2200      	movne	r2, #0
 8002d10:	428b      	cmp	r3, r1
 8002d12:	bf08      	it	eq
 8002d14:	f042 0201 	orreq.w	r2, r2, #1
 8002d18:	3128      	adds	r1, #40	; 0x28
 8002d1a:	4283      	cmp	r3, r0
 8002d1c:	bf08      	it	eq
 8002d1e:	f042 0201 	orreq.w	r2, r2, #1
 8002d22:	3028      	adds	r0, #40	; 0x28
 8002d24:	428b      	cmp	r3, r1
 8002d26:	bf08      	it	eq
 8002d28:	f042 0201 	orreq.w	r2, r2, #1
 8002d2c:	3128      	adds	r1, #40	; 0x28
 8002d2e:	4283      	cmp	r3, r0
 8002d30:	bf08      	it	eq
 8002d32:	f042 0201 	orreq.w	r2, r2, #1
 8002d36:	428b      	cmp	r3, r1
 8002d38:	bf08      	it	eq
 8002d3a:	f042 0201 	orreq.w	r2, r2, #1
 8002d3e:	b912      	cbnz	r2, 8002d46 <HAL_DMA_Init+0x3fe>
 8002d40:	4a24      	ldr	r2, [pc, #144]	; (8002dd4 <HAL_DMA_Init+0x48c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d138      	bne.n	8002db8 <HAL_DMA_Init+0x470>
    __HAL_UNLOCK(hdma);
 8002d46:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d48:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d4a:	4d28      	ldr	r5, [pc, #160]	; (8002dec <HAL_DMA_Init+0x4a4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d4c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002d50:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002d54:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d56:	4015      	ands	r5, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d58:	68a2      	ldr	r2, [r4, #8]
 8002d5a:	2a40      	cmp	r2, #64	; 0x40
 8002d5c:	d02a      	beq.n	8002db4 <HAL_DMA_Init+0x46c>
 8002d5e:	2a80      	cmp	r2, #128	; 0x80
 8002d60:	bf0c      	ite	eq
 8002d62:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 8002d66:	2000      	movne	r0, #0
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002d68:	6a26      	ldr	r6, [r4, #32]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d6a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8002d6e:	08d2      	lsrs	r2, r2, #3
 8002d70:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d74:	6961      	ldr	r1, [r4, #20]
 8002d76:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d7a:	69a1      	ldr	r1, [r4, #24]
 8002d7c:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d80:	69e1      	ldr	r1, [r4, #28]
 8002d82:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002d86:	491a      	ldr	r1, [pc, #104]	; (8002df0 <HAL_DMA_Init+0x4a8>)
 8002d88:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 8002d8c:	4419      	add	r1, r3
 8002d8e:	432a      	orrs	r2, r5
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d90:	4302      	orrs	r2, r0
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002d92:	4818      	ldr	r0, [pc, #96]	; (8002df4 <HAL_DMA_Init+0x4ac>)
 8002d94:	fba0 0101 	umull	r0, r1, r0, r1
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d98:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002d9a:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002d9c:	090b      	lsrs	r3, r1, #4
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002da2:	f7ff fceb 	bl	800277c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002da6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002da8:	2301      	movs	r3, #1
 8002daa:	f002 021f 	and.w	r2, r2, #31
 8002dae:	4093      	lsls	r3, r2
 8002db0:	6043      	str	r3, [r0, #4]
 8002db2:	e679      	b.n	8002aa8 <HAL_DMA_Init+0x160>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002db4:	2010      	movs	r0, #16
 8002db6:	e7d7      	b.n	8002d68 <HAL_DMA_Init+0x420>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002db8:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002dba:	2303      	movs	r3, #3
    return HAL_ERROR;
 8002dbc:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dbe:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002dc0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002dc4:	bd70      	pop	{r4, r5, r6, pc}
 8002dc6:	bf00      	nop
 8002dc8:	c3c0003f 	.word	0xc3c0003f
 8002dcc:	58025408 	.word	0x58025408
 8002dd0:	5802541c 	.word	0x5802541c
 8002dd4:	58025494 	.word	0x58025494
 8002dd8:	1000823f 	.word	0x1000823f
 8002ddc:	40020940 	.word	0x40020940
 8002de0:	1600963f 	.word	0x1600963f
 8002de4:	58025940 	.word	0x58025940
 8002de8:	58025430 	.word	0x58025430
 8002dec:	fffe000f 	.word	0xfffe000f
 8002df0:	a7fdabf8 	.word	0xa7fdabf8
 8002df4:	cccccccd 	.word	0xcccccccd

08002df8 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	f000 8177 	beq.w	80030ec <HAL_DMA_Start_IT+0x2f4>
 8002dfe:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8002e00:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8002e04:	2801      	cmp	r0, #1
 8002e06:	f000 8173 	beq.w	80030f0 <HAL_DMA_Start_IT+0x2f8>
 8002e0a:	2001      	movs	r0, #1
{
 8002e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e10:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8002e14:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e18:	4284      	cmp	r4, r0
 8002e1a:	d008      	beq.n	8002e2e <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8002e20:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e22:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002e26:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8002e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e2e:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8002e30:	f8dc 4000 	ldr.w	r4, [ip]
 8002e34:	4d53      	ldr	r5, [pc, #332]	; (8002f84 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e36:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e3a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8002e3c:	4e52      	ldr	r6, [pc, #328]	; (8002f88 <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e3e:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8002e42:	4852      	ldr	r0, [pc, #328]	; (8002f8c <HAL_DMA_Start_IT+0x194>)
 8002e44:	42ac      	cmp	r4, r5
 8002e46:	bf18      	it	ne
 8002e48:	4284      	cmpne	r4, r0
 8002e4a:	f105 0518 	add.w	r5, r5, #24
 8002e4e:	bf0c      	ite	eq
 8002e50:	2001      	moveq	r0, #1
 8002e52:	2000      	movne	r0, #0
 8002e54:	42ac      	cmp	r4, r5
 8002e56:	bf08      	it	eq
 8002e58:	f040 0001 	orreq.w	r0, r0, #1
 8002e5c:	3518      	adds	r5, #24
 8002e5e:	42ac      	cmp	r4, r5
 8002e60:	bf08      	it	eq
 8002e62:	f040 0001 	orreq.w	r0, r0, #1
 8002e66:	3518      	adds	r5, #24
 8002e68:	42ac      	cmp	r4, r5
 8002e6a:	bf08      	it	eq
 8002e6c:	f040 0001 	orreq.w	r0, r0, #1
 8002e70:	3518      	adds	r5, #24
 8002e72:	42ac      	cmp	r4, r5
 8002e74:	bf08      	it	eq
 8002e76:	f040 0001 	orreq.w	r0, r0, #1
 8002e7a:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8002e7e:	42ac      	cmp	r4, r5
 8002e80:	bf08      	it	eq
 8002e82:	f040 0001 	orreq.w	r0, r0, #1
 8002e86:	3518      	adds	r5, #24
 8002e88:	42ac      	cmp	r4, r5
 8002e8a:	bf08      	it	eq
 8002e8c:	f040 0001 	orreq.w	r0, r0, #1
 8002e90:	3518      	adds	r5, #24
 8002e92:	42ac      	cmp	r4, r5
 8002e94:	bf08      	it	eq
 8002e96:	f040 0001 	orreq.w	r0, r0, #1
 8002e9a:	3518      	adds	r5, #24
 8002e9c:	42ac      	cmp	r4, r5
 8002e9e:	bf08      	it	eq
 8002ea0:	f040 0001 	orreq.w	r0, r0, #1
 8002ea4:	3518      	adds	r5, #24
 8002ea6:	42ac      	cmp	r4, r5
 8002ea8:	bf08      	it	eq
 8002eaa:	f040 0001 	orreq.w	r0, r0, #1
 8002eae:	3518      	adds	r5, #24
 8002eb0:	42ac      	cmp	r4, r5
 8002eb2:	bf08      	it	eq
 8002eb4:	f040 0001 	orreq.w	r0, r0, #1
 8002eb8:	3518      	adds	r5, #24
 8002eba:	42ac      	cmp	r4, r5
 8002ebc:	bf08      	it	eq
 8002ebe:	f040 0001 	orreq.w	r0, r0, #1
 8002ec2:	3518      	adds	r5, #24
 8002ec4:	42ac      	cmp	r4, r5
 8002ec6:	bf14      	ite	ne
 8002ec8:	4681      	movne	r9, r0
 8002eca:	f040 0901 	orreq.w	r9, r0, #1
 8002ece:	f5a5 6592 	sub.w	r5, r5, #1168	; 0x490
 8002ed2:	42ac      	cmp	r4, r5
 8002ed4:	bf18      	it	ne
 8002ed6:	42b4      	cmpne	r4, r6
 8002ed8:	bf0c      	ite	eq
 8002eda:	2501      	moveq	r5, #1
 8002edc:	2500      	movne	r5, #0
 8002ede:	d002      	beq.n	8002ee6 <HAL_DMA_Start_IT+0xee>
 8002ee0:	f1b9 0f00 	cmp.w	r9, #0
 8002ee4:	d054      	beq.n	8002f90 <HAL_DMA_Start_IT+0x198>
 8002ee6:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ee8:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 8002eec:	f026 0601 	bic.w	r6, r6, #1
 8002ef0:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ef2:	2d00      	cmp	r5, #0
 8002ef4:	d078      	beq.n	8002fe8 <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ef6:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8002efa:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002efc:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8002f00:	b117      	cbz	r7, 8002f08 <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f02:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 8002f06:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f08:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 8002f0c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8002f10:	f006 081f 	and.w	r8, r6, #31
 8002f14:	fa0e fe08 	lsl.w	lr, lr, r8
 8002f18:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f1c:	6826      	ldr	r6, [r4, #0]
 8002f1e:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8002f22:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002f24:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f26:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8002f2a:	2b40      	cmp	r3, #64	; 0x40
 8002f2c:	f000 80e2 	beq.w	80030f4 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002f30:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002f32:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f34:	b91d      	cbnz	r5, 8002f3e <HAL_DMA_Start_IT+0x146>
 8002f36:	f1b9 0f00 	cmp.w	r9, #0
 8002f3a:	f000 80e1 	beq.w	8003100 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002f3e:	6823      	ldr	r3, [r4, #0]
 8002f40:	f023 031e 	bic.w	r3, r3, #30
 8002f44:	f043 0316 	orr.w	r3, r3, #22
 8002f48:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8002f4a:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8002f4e:	b11b      	cbz	r3, 8002f58 <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	f043 0308 	orr.w	r3, r3, #8
 8002f56:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f58:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	03d2      	lsls	r2, r2, #15
 8002f60:	d503      	bpl.n	8002f6a <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f68:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8002f6a:	b11f      	cbz	r7, 8002f74 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f72:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 8002f74:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f76:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6023      	str	r3, [r4, #0]
}
 8002f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f82:	bf00      	nop
 8002f84:	40020058 	.word	0x40020058
 8002f88:	40020010 	.word	0x40020010
 8002f8c:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f90:	4f61      	ldr	r7, [pc, #388]	; (8003118 <HAL_DMA_Start_IT+0x320>)
 8002f92:	4e62      	ldr	r6, [pc, #392]	; (800311c <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f94:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f98:	42b4      	cmp	r4, r6
 8002f9a:	bf18      	it	ne
 8002f9c:	42bc      	cmpne	r4, r7
 8002f9e:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2701      	moveq	r7, #1
 8002fa6:	2700      	movne	r7, #0
 8002fa8:	42b4      	cmp	r4, r6
 8002faa:	bf08      	it	eq
 8002fac:	f047 0701 	orreq.w	r7, r7, #1
 8002fb0:	3614      	adds	r6, #20
 8002fb2:	42b4      	cmp	r4, r6
 8002fb4:	bf08      	it	eq
 8002fb6:	f047 0701 	orreq.w	r7, r7, #1
 8002fba:	3614      	adds	r6, #20
 8002fbc:	42b4      	cmp	r4, r6
 8002fbe:	bf08      	it	eq
 8002fc0:	f047 0701 	orreq.w	r7, r7, #1
 8002fc4:	3614      	adds	r6, #20
 8002fc6:	42b4      	cmp	r4, r6
 8002fc8:	bf08      	it	eq
 8002fca:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 8002fce:	6826      	ldr	r6, [r4, #0]
 8002fd0:	f026 0601 	bic.w	r6, r6, #1
 8002fd4:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fd6:	4e52      	ldr	r6, [pc, #328]	; (8003120 <HAL_DMA_Start_IT+0x328>)
 8002fd8:	42b4      	cmp	r4, r6
 8002fda:	bf08      	it	eq
 8002fdc:	f047 0701 	orreq.w	r7, r7, #1
 8002fe0:	b917      	cbnz	r7, 8002fe8 <HAL_DMA_Start_IT+0x1f0>
 8002fe2:	4f50      	ldr	r7, [pc, #320]	; (8003124 <HAL_DMA_Start_IT+0x32c>)
 8002fe4:	42bc      	cmp	r4, r7
 8002fe6:	d10b      	bne.n	8003000 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fe8:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8002fec:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002fee:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8002ff2:	b117      	cbz	r7, 8002ffa <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ff4:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 8002ff8:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ffa:	f1b9 0f00 	cmp.w	r9, #0
 8002ffe:	d183      	bne.n	8002f08 <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003000:	4f46      	ldr	r7, [pc, #280]	; (800311c <HAL_DMA_Start_IT+0x324>)
 8003002:	f8df e114 	ldr.w	lr, [pc, #276]	; 8003118 <HAL_DMA_Start_IT+0x320>
 8003006:	4574      	cmp	r4, lr
 8003008:	bf18      	it	ne
 800300a:	42bc      	cmpne	r4, r7
 800300c:	f10e 0e14 	add.w	lr, lr, #20
 8003010:	bf0c      	ite	eq
 8003012:	2701      	moveq	r7, #1
 8003014:	2700      	movne	r7, #0
 8003016:	4574      	cmp	r4, lr
 8003018:	bf08      	it	eq
 800301a:	f047 0701 	orreq.w	r7, r7, #1
 800301e:	f10e 0e14 	add.w	lr, lr, #20
 8003022:	4574      	cmp	r4, lr
 8003024:	bf08      	it	eq
 8003026:	f047 0701 	orreq.w	r7, r7, #1
 800302a:	f10e 0e14 	add.w	lr, lr, #20
 800302e:	4574      	cmp	r4, lr
 8003030:	bf08      	it	eq
 8003032:	f047 0701 	orreq.w	r7, r7, #1
 8003036:	f10e 0e14 	add.w	lr, lr, #20
 800303a:	4574      	cmp	r4, lr
 800303c:	bf08      	it	eq
 800303e:	f047 0701 	orreq.w	r7, r7, #1
 8003042:	f10e 0e14 	add.w	lr, lr, #20
 8003046:	4574      	cmp	r4, lr
 8003048:	bf08      	it	eq
 800304a:	f047 0701 	orreq.w	r7, r7, #1
 800304e:	b917      	cbnz	r7, 8003056 <HAL_DMA_Start_IT+0x25e>
 8003050:	4f34      	ldr	r7, [pc, #208]	; (8003124 <HAL_DMA_Start_IT+0x32c>)
 8003052:	42bc      	cmp	r4, r7
 8003054:	d154      	bne.n	8003100 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003056:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800305a:	2701      	movs	r7, #1
 800305c:	f000 0e1f 	and.w	lr, r0, #31
 8003060:	fa07 f70e 	lsl.w	r7, r7, lr
 8003064:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003068:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800306a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800306e:	2b40      	cmp	r3, #64	; 0x40
 8003070:	d043      	beq.n	80030fa <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003072:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003074:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	f023 030e 	bic.w	r3, r3, #14
 800307c:	f043 030a 	orr.w	r3, r3, #10
 8003080:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003082:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d02d      	beq.n	80030e6 <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	f043 0304 	orr.w	r3, r3, #4
 8003090:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003092:	4b21      	ldr	r3, [pc, #132]	; (8003118 <HAL_DMA_Start_IT+0x320>)
 8003094:	4a21      	ldr	r2, [pc, #132]	; (800311c <HAL_DMA_Start_IT+0x324>)
 8003096:	4294      	cmp	r4, r2
 8003098:	bf18      	it	ne
 800309a:	429c      	cmpne	r4, r3
 800309c:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80030a0:	bf0c      	ite	eq
 80030a2:	2301      	moveq	r3, #1
 80030a4:	2300      	movne	r3, #0
 80030a6:	4294      	cmp	r4, r2
 80030a8:	bf08      	it	eq
 80030aa:	f043 0301 	orreq.w	r3, r3, #1
 80030ae:	3214      	adds	r2, #20
 80030b0:	4294      	cmp	r4, r2
 80030b2:	bf08      	it	eq
 80030b4:	f043 0301 	orreq.w	r3, r3, #1
 80030b8:	3214      	adds	r2, #20
 80030ba:	4294      	cmp	r4, r2
 80030bc:	bf08      	it	eq
 80030be:	f043 0301 	orreq.w	r3, r3, #1
 80030c2:	3214      	adds	r2, #20
 80030c4:	4294      	cmp	r4, r2
 80030c6:	bf08      	it	eq
 80030c8:	f043 0301 	orreq.w	r3, r3, #1
 80030cc:	3214      	adds	r2, #20
 80030ce:	4294      	cmp	r4, r2
 80030d0:	bf08      	it	eq
 80030d2:	f043 0301 	orreq.w	r3, r3, #1
 80030d6:	3214      	adds	r2, #20
 80030d8:	4294      	cmp	r4, r2
 80030da:	bf08      	it	eq
 80030dc:	f043 0301 	orreq.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f43f af47 	beq.w	8002f74 <HAL_DMA_Start_IT+0x17c>
 80030e6:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 80030ea:	e735      	b.n	8002f58 <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 80030ec:	2001      	movs	r0, #1
 80030ee:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80030f0:	2002      	movs	r0, #2
}
 80030f2:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80030f4:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80030f6:	60e1      	str	r1, [r4, #12]
 80030f8:	e71c      	b.n	8002f34 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80030fa:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80030fc:	60e1      	str	r1, [r4, #12]
 80030fe:	e7ba      	b.n	8003076 <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	f023 030e 	bic.w	r3, r3, #14
 8003106:	f043 030a 	orr.w	r3, r3, #10
 800310a:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800310c:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1ba      	bne.n	800308a <HAL_DMA_Start_IT+0x292>
 8003114:	e7bd      	b.n	8003092 <HAL_DMA_Start_IT+0x29a>
 8003116:	bf00      	nop
 8003118:	5802541c 	.word	0x5802541c
 800311c:	58025408 	.word	0x58025408
 8003120:	58025480 	.word	0x58025480
 8003124:	58025494 	.word	0x58025494

08003128 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8003128:	2800      	cmp	r0, #0
 800312a:	d05f      	beq.n	80031ec <HAL_DMA_Abort_IT+0xc4>
{
 800312c:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800312e:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8003132:	4603      	mov	r3, r0
 8003134:	2a02      	cmp	r2, #2
 8003136:	d155      	bne.n	80031e4 <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003138:	6801      	ldr	r1, [r0, #0]
 800313a:	4a57      	ldr	r2, [pc, #348]	; (8003298 <HAL_DMA_Abort_IT+0x170>)
 800313c:	4291      	cmp	r1, r2
 800313e:	d048      	beq.n	80031d2 <HAL_DMA_Abort_IT+0xaa>
 8003140:	3218      	adds	r2, #24
 8003142:	4291      	cmp	r1, r2
 8003144:	d045      	beq.n	80031d2 <HAL_DMA_Abort_IT+0xaa>
 8003146:	3230      	adds	r2, #48	; 0x30
 8003148:	4c54      	ldr	r4, [pc, #336]	; (800329c <HAL_DMA_Abort_IT+0x174>)
 800314a:	4855      	ldr	r0, [pc, #340]	; (80032a0 <HAL_DMA_Abort_IT+0x178>)
 800314c:	42a1      	cmp	r1, r4
 800314e:	bf18      	it	ne
 8003150:	4291      	cmpne	r1, r2
 8003152:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8003156:	bf0c      	ite	eq
 8003158:	2201      	moveq	r2, #1
 800315a:	2200      	movne	r2, #0
 800315c:	4281      	cmp	r1, r0
 800315e:	bf08      	it	eq
 8003160:	f042 0201 	orreq.w	r2, r2, #1
 8003164:	3030      	adds	r0, #48	; 0x30
 8003166:	42a1      	cmp	r1, r4
 8003168:	bf08      	it	eq
 800316a:	f042 0201 	orreq.w	r2, r2, #1
 800316e:	3430      	adds	r4, #48	; 0x30
 8003170:	4281      	cmp	r1, r0
 8003172:	bf08      	it	eq
 8003174:	f042 0201 	orreq.w	r2, r2, #1
 8003178:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800317c:	42a1      	cmp	r1, r4
 800317e:	bf08      	it	eq
 8003180:	f042 0201 	orreq.w	r2, r2, #1
 8003184:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8003188:	4281      	cmp	r1, r0
 800318a:	bf08      	it	eq
 800318c:	f042 0201 	orreq.w	r2, r2, #1
 8003190:	3030      	adds	r0, #48	; 0x30
 8003192:	42a1      	cmp	r1, r4
 8003194:	bf08      	it	eq
 8003196:	f042 0201 	orreq.w	r2, r2, #1
 800319a:	3430      	adds	r4, #48	; 0x30
 800319c:	4281      	cmp	r1, r0
 800319e:	bf08      	it	eq
 80031a0:	f042 0201 	orreq.w	r2, r2, #1
 80031a4:	3030      	adds	r0, #48	; 0x30
 80031a6:	42a1      	cmp	r1, r4
 80031a8:	bf08      	it	eq
 80031aa:	f042 0201 	orreq.w	r2, r2, #1
 80031ae:	3430      	adds	r4, #48	; 0x30
 80031b0:	4281      	cmp	r1, r0
 80031b2:	bf08      	it	eq
 80031b4:	f042 0201 	orreq.w	r2, r2, #1
 80031b8:	3030      	adds	r0, #48	; 0x30
 80031ba:	42a1      	cmp	r1, r4
 80031bc:	bf08      	it	eq
 80031be:	f042 0201 	orreq.w	r2, r2, #1
 80031c2:	4281      	cmp	r1, r0
 80031c4:	bf08      	it	eq
 80031c6:	f042 0201 	orreq.w	r2, r2, #1
 80031ca:	b912      	cbnz	r2, 80031d2 <HAL_DMA_Abort_IT+0xaa>
 80031cc:	4a35      	ldr	r2, [pc, #212]	; (80032a4 <HAL_DMA_Abort_IT+0x17c>)
 80031ce:	4291      	cmp	r1, r2
 80031d0:	d10e      	bne.n	80031f0 <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80031d2:	2204      	movs	r2, #4
  return HAL_OK;
 80031d4:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 80031d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80031da:	680b      	ldr	r3, [r1, #0]
 80031dc:	f023 0301 	bic.w	r3, r3, #1
 80031e0:	600b      	str	r3, [r1, #0]
}
 80031e2:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e4:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 80031e6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e8:	655a      	str	r2, [r3, #84]	; 0x54
}
 80031ea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80031ec:	2001      	movs	r0, #1
}
 80031ee:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031f0:	4a2d      	ldr	r2, [pc, #180]	; (80032a8 <HAL_DMA_Abort_IT+0x180>)
 80031f2:	4d2e      	ldr	r5, [pc, #184]	; (80032ac <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80031f4:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031f6:	42a9      	cmp	r1, r5
 80031f8:	bf18      	it	ne
 80031fa:	4291      	cmpne	r1, r2
 80031fc:	4c2c      	ldr	r4, [pc, #176]	; (80032b0 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80031fe:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003202:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 8003206:	bf0c      	ite	eq
 8003208:	2201      	moveq	r2, #1
 800320a:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800320c:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800320e:	42a1      	cmp	r1, r4
 8003210:	bf08      	it	eq
 8003212:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8003216:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003218:	3428      	adds	r4, #40	; 0x28
 800321a:	42a9      	cmp	r1, r5
 800321c:	bf08      	it	eq
 800321e:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8003222:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003226:	42a1      	cmp	r1, r4
 8003228:	bf08      	it	eq
 800322a:	f042 0201 	orreq.w	r2, r2, #1
 800322e:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8003230:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003232:	42a1      	cmp	r1, r4
 8003234:	bf08      	it	eq
 8003236:	f042 0201 	orreq.w	r2, r2, #1
 800323a:	481e      	ldr	r0, [pc, #120]	; (80032b4 <HAL_DMA_Abort_IT+0x18c>)
 800323c:	4281      	cmp	r1, r0
 800323e:	bf08      	it	eq
 8003240:	f042 0201 	orreq.w	r2, r2, #1
 8003244:	b912      	cbnz	r2, 800324c <HAL_DMA_Abort_IT+0x124>
 8003246:	4a1c      	ldr	r2, [pc, #112]	; (80032b8 <HAL_DMA_Abort_IT+0x190>)
 8003248:	4291      	cmp	r1, r2
 800324a:	d117      	bne.n	800327c <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800324c:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800324e:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003250:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003254:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003256:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800325a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800325e:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003260:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003262:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8003264:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003266:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 800326a:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800326c:	b132      	cbz	r2, 800327c <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800326e:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003270:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003274:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003278:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800327a:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 800327c:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 800327e:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8003280:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8003282:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8003286:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 800328a:	b11a      	cbz	r2, 8003294 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 800328c:	4618      	mov	r0, r3
 800328e:	4790      	blx	r2
  return HAL_OK;
 8003290:	4620      	mov	r0, r4
}
 8003292:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003294:	4610      	mov	r0, r2
}
 8003296:	bd38      	pop	{r3, r4, r5, pc}
 8003298:	40020010 	.word	0x40020010
 800329c:	40020040 	.word	0x40020040
 80032a0:	40020070 	.word	0x40020070
 80032a4:	400204b8 	.word	0x400204b8
 80032a8:	5802541c 	.word	0x5802541c
 80032ac:	58025408 	.word	0x58025408
 80032b0:	58025430 	.word	0x58025430
 80032b4:	58025480 	.word	0x58025480
 80032b8:	58025494 	.word	0x58025494

080032bc <HAL_DMA_IRQHandler>:
{
 80032bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t count = 0U;
 80032c0:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 80032c2:	4b9c      	ldr	r3, [pc, #624]	; (8003534 <HAL_DMA_IRQHandler+0x278>)
{
 80032c4:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80032c6:	4e9c      	ldr	r6, [pc, #624]	; (8003538 <HAL_DMA_IRQHandler+0x27c>)
  uint32_t timeout = SystemCoreClock / 9600U;
 80032c8:	681d      	ldr	r5, [r3, #0]
{
 80032ca:	4681      	mov	r9, r0
  __IO uint32_t count = 0U;
 80032cc:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80032ce:	6803      	ldr	r3, [r0, #0]
 80032d0:	4a9a      	ldr	r2, [pc, #616]	; (800353c <HAL_DMA_IRQHandler+0x280>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032d2:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80032d4:	4293      	cmp	r3, r2
 80032d6:	bf18      	it	ne
 80032d8:	42b3      	cmpne	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 80032da:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80032dc:	bf08      	it	eq
 80032de:	2601      	moveq	r6, #1
  tmpisr_bdma = regs_bdma->ISR;
 80032e0:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80032e2:	bf18      	it	ne
 80032e4:	2600      	movne	r6, #0
 80032e6:	d045      	beq.n	8003374 <HAL_DMA_IRQHandler+0xb8>
 80032e8:	3218      	adds	r2, #24
 80032ea:	4895      	ldr	r0, [pc, #596]	; (8003540 <HAL_DMA_IRQHandler+0x284>)
 80032ec:	4283      	cmp	r3, r0
 80032ee:	bf18      	it	ne
 80032f0:	4293      	cmpne	r3, r2
 80032f2:	f100 0018 	add.w	r0, r0, #24
 80032f6:	bf0c      	ite	eq
 80032f8:	2201      	moveq	r2, #1
 80032fa:	2200      	movne	r2, #0
 80032fc:	4283      	cmp	r3, r0
 80032fe:	bf08      	it	eq
 8003300:	f042 0201 	orreq.w	r2, r2, #1
 8003304:	3018      	adds	r0, #24
 8003306:	4283      	cmp	r3, r0
 8003308:	bf08      	it	eq
 800330a:	f042 0201 	orreq.w	r2, r2, #1
 800330e:	3018      	adds	r0, #24
 8003310:	4283      	cmp	r3, r0
 8003312:	bf08      	it	eq
 8003314:	f042 0201 	orreq.w	r2, r2, #1
 8003318:	3018      	adds	r0, #24
 800331a:	4283      	cmp	r3, r0
 800331c:	bf08      	it	eq
 800331e:	f042 0201 	orreq.w	r2, r2, #1
 8003322:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8003326:	4283      	cmp	r3, r0
 8003328:	bf08      	it	eq
 800332a:	f042 0201 	orreq.w	r2, r2, #1
 800332e:	3018      	adds	r0, #24
 8003330:	4283      	cmp	r3, r0
 8003332:	bf08      	it	eq
 8003334:	f042 0201 	orreq.w	r2, r2, #1
 8003338:	3018      	adds	r0, #24
 800333a:	4283      	cmp	r3, r0
 800333c:	bf08      	it	eq
 800333e:	f042 0201 	orreq.w	r2, r2, #1
 8003342:	3018      	adds	r0, #24
 8003344:	4283      	cmp	r3, r0
 8003346:	bf08      	it	eq
 8003348:	f042 0201 	orreq.w	r2, r2, #1
 800334c:	3018      	adds	r0, #24
 800334e:	4283      	cmp	r3, r0
 8003350:	bf08      	it	eq
 8003352:	f042 0201 	orreq.w	r2, r2, #1
 8003356:	3018      	adds	r0, #24
 8003358:	4283      	cmp	r3, r0
 800335a:	bf08      	it	eq
 800335c:	f042 0201 	orreq.w	r2, r2, #1
 8003360:	3018      	adds	r0, #24
 8003362:	4283      	cmp	r3, r0
 8003364:	bf08      	it	eq
 8003366:	f042 0201 	orreq.w	r2, r2, #1
 800336a:	b91a      	cbnz	r2, 8003374 <HAL_DMA_IRQHandler+0xb8>
 800336c:	4a75      	ldr	r2, [pc, #468]	; (8003544 <HAL_DMA_IRQHandler+0x288>)
 800336e:	4293      	cmp	r3, r2
 8003370:	f040 8250 	bne.w	8003814 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003374:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 8003378:	2208      	movs	r2, #8
 800337a:	f001 0c1f 	and.w	ip, r1, #31
 800337e:	fa02 f20c 	lsl.w	r2, r2, ip
 8003382:	4217      	tst	r7, r2
 8003384:	f040 8188 	bne.w	8003698 <HAL_DMA_IRQHandler+0x3dc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003388:	fa27 f20c 	lsr.w	r2, r7, ip
 800338c:	07d2      	lsls	r2, r2, #31
 800338e:	d50c      	bpl.n	80033aa <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	0610      	lsls	r0, r2, #24
 8003394:	d509      	bpl.n	80033aa <HAL_DMA_IRQHandler+0xee>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003396:	2201      	movs	r2, #1
 8003398:	fa02 f20c 	lsl.w	r2, r2, ip
 800339c:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800339e:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 80033a2:	f042 0202 	orr.w	r2, r2, #2
 80033a6:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033aa:	f04f 0e04 	mov.w	lr, #4
 80033ae:	fa0e f00c 	lsl.w	r0, lr, ip
 80033b2:	4238      	tst	r0, r7
 80033b4:	d05b      	beq.n	800346e <HAL_DMA_IRQHandler+0x1b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80033b6:	2e00      	cmp	r6, #0
 80033b8:	d14f      	bne.n	800345a <HAL_DMA_IRQHandler+0x19e>
 80033ba:	4a61      	ldr	r2, [pc, #388]	; (8003540 <HAL_DMA_IRQHandler+0x284>)
 80033bc:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8003548 <HAL_DMA_IRQHandler+0x28c>
 80033c0:	4543      	cmp	r3, r8
 80033c2:	bf18      	it	ne
 80033c4:	4293      	cmpne	r3, r2
 80033c6:	f108 0830 	add.w	r8, r8, #48	; 0x30
 80033ca:	bf0c      	ite	eq
 80033cc:	2201      	moveq	r2, #1
 80033ce:	2200      	movne	r2, #0
 80033d0:	4543      	cmp	r3, r8
 80033d2:	bf08      	it	eq
 80033d4:	f042 0201 	orreq.w	r2, r2, #1
 80033d8:	f108 0818 	add.w	r8, r8, #24
 80033dc:	4543      	cmp	r3, r8
 80033de:	bf08      	it	eq
 80033e0:	f042 0201 	orreq.w	r2, r2, #1
 80033e4:	f108 0818 	add.w	r8, r8, #24
 80033e8:	4543      	cmp	r3, r8
 80033ea:	bf08      	it	eq
 80033ec:	f042 0201 	orreq.w	r2, r2, #1
 80033f0:	f108 0818 	add.w	r8, r8, #24
 80033f4:	4543      	cmp	r3, r8
 80033f6:	bf08      	it	eq
 80033f8:	f042 0201 	orreq.w	r2, r2, #1
 80033fc:	f508 7856 	add.w	r8, r8, #856	; 0x358
 8003400:	4543      	cmp	r3, r8
 8003402:	bf08      	it	eq
 8003404:	f042 0201 	orreq.w	r2, r2, #1
 8003408:	f108 0818 	add.w	r8, r8, #24
 800340c:	4543      	cmp	r3, r8
 800340e:	bf08      	it	eq
 8003410:	f042 0201 	orreq.w	r2, r2, #1
 8003414:	f108 0818 	add.w	r8, r8, #24
 8003418:	4543      	cmp	r3, r8
 800341a:	bf08      	it	eq
 800341c:	f042 0201 	orreq.w	r2, r2, #1
 8003420:	f108 0818 	add.w	r8, r8, #24
 8003424:	4543      	cmp	r3, r8
 8003426:	bf08      	it	eq
 8003428:	f042 0201 	orreq.w	r2, r2, #1
 800342c:	f108 0818 	add.w	r8, r8, #24
 8003430:	4543      	cmp	r3, r8
 8003432:	bf08      	it	eq
 8003434:	f042 0201 	orreq.w	r2, r2, #1
 8003438:	f108 0818 	add.w	r8, r8, #24
 800343c:	4543      	cmp	r3, r8
 800343e:	bf08      	it	eq
 8003440:	f042 0201 	orreq.w	r2, r2, #1
 8003444:	f108 0818 	add.w	r8, r8, #24
 8003448:	4543      	cmp	r3, r8
 800344a:	bf08      	it	eq
 800344c:	f042 0201 	orreq.w	r2, r2, #1
 8003450:	b91a      	cbnz	r2, 800345a <HAL_DMA_IRQHandler+0x19e>
 8003452:	4a3c      	ldr	r2, [pc, #240]	; (8003544 <HAL_DMA_IRQHandler+0x288>)
 8003454:	4293      	cmp	r3, r2
 8003456:	f040 8219 	bne.w	800388c <HAL_DMA_IRQHandler+0x5d0>
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	0792      	lsls	r2, r2, #30
 800345e:	d506      	bpl.n	800346e <HAL_DMA_IRQHandler+0x1b2>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003460:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003462:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8003466:	f042 0204 	orr.w	r2, r2, #4
 800346a:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800346e:	2210      	movs	r2, #16
 8003470:	fa02 fc0c 	lsl.w	ip, r2, ip
 8003474:	ea1c 0f07 	tst.w	ip, r7
 8003478:	d06c      	beq.n	8003554 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800347a:	2e00      	cmp	r6, #0
 800347c:	d145      	bne.n	800350a <HAL_DMA_IRQHandler+0x24e>
 800347e:	4a30      	ldr	r2, [pc, #192]	; (8003540 <HAL_DMA_IRQHandler+0x284>)
 8003480:	4e31      	ldr	r6, [pc, #196]	; (8003548 <HAL_DMA_IRQHandler+0x28c>)
 8003482:	42b3      	cmp	r3, r6
 8003484:	bf18      	it	ne
 8003486:	4293      	cmpne	r3, r2
 8003488:	f106 0630 	add.w	r6, r6, #48	; 0x30
 800348c:	bf0c      	ite	eq
 800348e:	2201      	moveq	r2, #1
 8003490:	2200      	movne	r2, #0
 8003492:	42b3      	cmp	r3, r6
 8003494:	bf08      	it	eq
 8003496:	f042 0201 	orreq.w	r2, r2, #1
 800349a:	3618      	adds	r6, #24
 800349c:	42b3      	cmp	r3, r6
 800349e:	bf08      	it	eq
 80034a0:	f042 0201 	orreq.w	r2, r2, #1
 80034a4:	3618      	adds	r6, #24
 80034a6:	42b3      	cmp	r3, r6
 80034a8:	bf08      	it	eq
 80034aa:	f042 0201 	orreq.w	r2, r2, #1
 80034ae:	3618      	adds	r6, #24
 80034b0:	42b3      	cmp	r3, r6
 80034b2:	bf08      	it	eq
 80034b4:	f042 0201 	orreq.w	r2, r2, #1
 80034b8:	f506 7656 	add.w	r6, r6, #856	; 0x358
 80034bc:	42b3      	cmp	r3, r6
 80034be:	bf08      	it	eq
 80034c0:	f042 0201 	orreq.w	r2, r2, #1
 80034c4:	3618      	adds	r6, #24
 80034c6:	42b3      	cmp	r3, r6
 80034c8:	bf08      	it	eq
 80034ca:	f042 0201 	orreq.w	r2, r2, #1
 80034ce:	3618      	adds	r6, #24
 80034d0:	42b3      	cmp	r3, r6
 80034d2:	bf08      	it	eq
 80034d4:	f042 0201 	orreq.w	r2, r2, #1
 80034d8:	3618      	adds	r6, #24
 80034da:	42b3      	cmp	r3, r6
 80034dc:	bf08      	it	eq
 80034de:	f042 0201 	orreq.w	r2, r2, #1
 80034e2:	3618      	adds	r6, #24
 80034e4:	42b3      	cmp	r3, r6
 80034e6:	bf08      	it	eq
 80034e8:	f042 0201 	orreq.w	r2, r2, #1
 80034ec:	3618      	adds	r6, #24
 80034ee:	42b3      	cmp	r3, r6
 80034f0:	bf08      	it	eq
 80034f2:	f042 0201 	orreq.w	r2, r2, #1
 80034f6:	3618      	adds	r6, #24
 80034f8:	42b3      	cmp	r3, r6
 80034fa:	bf08      	it	eq
 80034fc:	f042 0201 	orreq.w	r2, r2, #1
 8003500:	b91a      	cbnz	r2, 800350a <HAL_DMA_IRQHandler+0x24e>
 8003502:	4a10      	ldr	r2, [pc, #64]	; (8003544 <HAL_DMA_IRQHandler+0x288>)
 8003504:	4293      	cmp	r3, r2
 8003506:	f040 81c9 	bne.w	800389c <HAL_DMA_IRQHandler+0x5e0>
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	0710      	lsls	r0, r2, #28
 800350e:	d521      	bpl.n	8003554 <HAL_DMA_IRQHandler+0x298>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003510:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	0356      	lsls	r6, r2, #13
 8003518:	f100 814c 	bmi.w	80037b4 <HAL_DMA_IRQHandler+0x4f8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	05d2      	lsls	r2, r2, #23
 8003520:	d403      	bmi.n	800352a <HAL_DMA_IRQHandler+0x26e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	f022 0208 	bic.w	r2, r2, #8
 8003528:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800352a:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800352e:	b18b      	cbz	r3, 8003554 <HAL_DMA_IRQHandler+0x298>
 8003530:	e00c      	b.n	800354c <HAL_DMA_IRQHandler+0x290>
 8003532:	bf00      	nop
 8003534:	24000004 	.word	0x24000004
 8003538:	40020010 	.word	0x40020010
 800353c:	40020028 	.word	0x40020028
 8003540:	40020058 	.word	0x40020058
 8003544:	400204b8 	.word	0x400204b8
 8003548:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 800354c:	4648      	mov	r0, r9
 800354e:	4798      	blx	r3
 8003550:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003554:	f001 011f 	and.w	r1, r1, #31
 8003558:	2620      	movs	r6, #32
 800355a:	408e      	lsls	r6, r1
 800355c:	423e      	tst	r6, r7
 800355e:	d068      	beq.n	8003632 <HAL_DMA_IRQHandler+0x376>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003560:	f8d9 2000 	ldr.w	r2, [r9]
 8003564:	4ba5      	ldr	r3, [pc, #660]	; (80037fc <HAL_DMA_IRQHandler+0x540>)
 8003566:	4fa6      	ldr	r7, [pc, #664]	; (8003800 <HAL_DMA_IRQHandler+0x544>)
 8003568:	42ba      	cmp	r2, r7
 800356a:	bf18      	it	ne
 800356c:	429a      	cmpne	r2, r3
 800356e:	f107 0718 	add.w	r7, r7, #24
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	42ba      	cmp	r2, r7
 800357a:	bf08      	it	eq
 800357c:	f043 0301 	orreq.w	r3, r3, #1
 8003580:	3718      	adds	r7, #24
 8003582:	42ba      	cmp	r2, r7
 8003584:	bf08      	it	eq
 8003586:	f043 0301 	orreq.w	r3, r3, #1
 800358a:	3718      	adds	r7, #24
 800358c:	42ba      	cmp	r2, r7
 800358e:	bf08      	it	eq
 8003590:	f043 0301 	orreq.w	r3, r3, #1
 8003594:	3718      	adds	r7, #24
 8003596:	42ba      	cmp	r2, r7
 8003598:	bf08      	it	eq
 800359a:	f043 0301 	orreq.w	r3, r3, #1
 800359e:	3718      	adds	r7, #24
 80035a0:	42ba      	cmp	r2, r7
 80035a2:	bf08      	it	eq
 80035a4:	f043 0301 	orreq.w	r3, r3, #1
 80035a8:	3718      	adds	r7, #24
 80035aa:	42ba      	cmp	r2, r7
 80035ac:	bf08      	it	eq
 80035ae:	f043 0301 	orreq.w	r3, r3, #1
 80035b2:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80035b6:	42ba      	cmp	r2, r7
 80035b8:	bf08      	it	eq
 80035ba:	f043 0301 	orreq.w	r3, r3, #1
 80035be:	3718      	adds	r7, #24
 80035c0:	42ba      	cmp	r2, r7
 80035c2:	bf08      	it	eq
 80035c4:	f043 0301 	orreq.w	r3, r3, #1
 80035c8:	3718      	adds	r7, #24
 80035ca:	42ba      	cmp	r2, r7
 80035cc:	bf08      	it	eq
 80035ce:	f043 0301 	orreq.w	r3, r3, #1
 80035d2:	3718      	adds	r7, #24
 80035d4:	42ba      	cmp	r2, r7
 80035d6:	bf08      	it	eq
 80035d8:	f043 0301 	orreq.w	r3, r3, #1
 80035dc:	3718      	adds	r7, #24
 80035de:	42ba      	cmp	r2, r7
 80035e0:	bf08      	it	eq
 80035e2:	f043 0301 	orreq.w	r3, r3, #1
 80035e6:	3718      	adds	r7, #24
 80035e8:	42ba      	cmp	r2, r7
 80035ea:	bf08      	it	eq
 80035ec:	f043 0301 	orreq.w	r3, r3, #1
 80035f0:	3718      	adds	r7, #24
 80035f2:	42ba      	cmp	r2, r7
 80035f4:	bf08      	it	eq
 80035f6:	f043 0301 	orreq.w	r3, r3, #1
 80035fa:	b91b      	cbnz	r3, 8003604 <HAL_DMA_IRQHandler+0x348>
 80035fc:	4b81      	ldr	r3, [pc, #516]	; (8003804 <HAL_DMA_IRQHandler+0x548>)
 80035fe:	429a      	cmp	r2, r3
 8003600:	f040 8162 	bne.w	80038c8 <HAL_DMA_IRQHandler+0x60c>
 8003604:	6813      	ldr	r3, [r2, #0]
 8003606:	06db      	lsls	r3, r3, #27
 8003608:	d513      	bpl.n	8003632 <HAL_DMA_IRQHandler+0x376>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800360a:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800360c:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
 8003610:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003612:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003614:	f000 80ae 	beq.w	8003774 <HAL_DMA_IRQHandler+0x4b8>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003618:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800361c:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800361e:	f000 80d3 	beq.w	80037c8 <HAL_DMA_IRQHandler+0x50c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003622:	031c      	lsls	r4, r3, #12
 8003624:	f140 80de 	bpl.w	80037e4 <HAL_DMA_IRQHandler+0x528>
          if(hdma->XferCpltCallback != NULL)
 8003628:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 800362c:	b10b      	cbz	r3, 8003632 <HAL_DMA_IRQHandler+0x376>
            hdma->XferCpltCallback(hdma);
 800362e:	4648      	mov	r0, r9
 8003630:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003632:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 80b9 	beq.w	80037ae <HAL_DMA_IRQHandler+0x4f2>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800363c:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8003640:	07d8      	lsls	r0, r3, #31
 8003642:	d51f      	bpl.n	8003684 <HAL_DMA_IRQHandler+0x3c8>
        __HAL_DMA_DISABLE(hdma);
 8003644:	f8d9 2000 	ldr.w	r2, [r9]
        hdma->State = HAL_DMA_STATE_ABORT;
 8003648:	2104      	movs	r1, #4
 800364a:	f889 1035 	strb.w	r1, [r9, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 800364e:	6813      	ldr	r3, [r2, #0]
 8003650:	f023 0301 	bic.w	r3, r3, #1
 8003654:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003656:	4b6c      	ldr	r3, [pc, #432]	; (8003808 <HAL_DMA_IRQHandler+0x54c>)
 8003658:	fba3 3505 	umull	r3, r5, r3, r5
 800365c:	0aad      	lsrs	r5, r5, #10
 800365e:	e002      	b.n	8003666 <HAL_DMA_IRQHandler+0x3aa>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003660:	6813      	ldr	r3, [r2, #0]
 8003662:	07d9      	lsls	r1, r3, #31
 8003664:	d504      	bpl.n	8003670 <HAL_DMA_IRQHandler+0x3b4>
          if (++count > timeout)
 8003666:	9b01      	ldr	r3, [sp, #4]
 8003668:	3301      	adds	r3, #1
 800366a:	42ab      	cmp	r3, r5
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	d9f7      	bls.n	8003660 <HAL_DMA_IRQHandler+0x3a4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003670:	6813      	ldr	r3, [r2, #0]
 8003672:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8003674:	bf4c      	ite	mi
 8003676:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8003678:	2301      	movpl	r3, #1
 800367a:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800367e:	2300      	movs	r3, #0
 8003680:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8003684:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 8090 	beq.w	80037ae <HAL_DMA_IRQHandler+0x4f2>
          hdma->XferCpltCallback(hdma);
 800368e:	4648      	mov	r0, r9
}
 8003690:	b003      	add	sp, #12
 8003692:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
          hdma->XferCpltCallback(hdma);
 8003696:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	0740      	lsls	r0, r0, #29
 800369c:	d50a      	bpl.n	80036b4 <HAL_DMA_IRQHandler+0x3f8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	f020 0004 	bic.w	r0, r0, #4
 80036a4:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036a6:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036a8:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 80036ac:	f042 0201 	orr.w	r2, r2, #1
 80036b0:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036b4:	fa27 f20c 	lsr.w	r2, r7, ip
 80036b8:	07d2      	lsls	r2, r2, #31
 80036ba:	f57f ae76 	bpl.w	80033aa <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80036be:	4a53      	ldr	r2, [pc, #332]	; (800380c <HAL_DMA_IRQHandler+0x550>)
 80036c0:	4853      	ldr	r0, [pc, #332]	; (8003810 <HAL_DMA_IRQHandler+0x554>)
 80036c2:	4283      	cmp	r3, r0
 80036c4:	bf18      	it	ne
 80036c6:	4293      	cmpne	r3, r2
 80036c8:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80036cc:	bf0c      	ite	eq
 80036ce:	2201      	moveq	r2, #1
 80036d0:	2200      	movne	r2, #0
 80036d2:	4283      	cmp	r3, r0
 80036d4:	bf08      	it	eq
 80036d6:	f042 0201 	orreq.w	r2, r2, #1
 80036da:	3018      	adds	r0, #24
 80036dc:	4283      	cmp	r3, r0
 80036de:	bf08      	it	eq
 80036e0:	f042 0201 	orreq.w	r2, r2, #1
 80036e4:	3018      	adds	r0, #24
 80036e6:	4283      	cmp	r3, r0
 80036e8:	bf08      	it	eq
 80036ea:	f042 0201 	orreq.w	r2, r2, #1
 80036ee:	3018      	adds	r0, #24
 80036f0:	4283      	cmp	r3, r0
 80036f2:	bf08      	it	eq
 80036f4:	f042 0201 	orreq.w	r2, r2, #1
 80036f8:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80036fc:	4283      	cmp	r3, r0
 80036fe:	bf08      	it	eq
 8003700:	f042 0201 	orreq.w	r2, r2, #1
 8003704:	3018      	adds	r0, #24
 8003706:	4283      	cmp	r3, r0
 8003708:	bf08      	it	eq
 800370a:	f042 0201 	orreq.w	r2, r2, #1
 800370e:	3018      	adds	r0, #24
 8003710:	4283      	cmp	r3, r0
 8003712:	bf08      	it	eq
 8003714:	f042 0201 	orreq.w	r2, r2, #1
 8003718:	3018      	adds	r0, #24
 800371a:	4283      	cmp	r3, r0
 800371c:	bf08      	it	eq
 800371e:	f042 0201 	orreq.w	r2, r2, #1
 8003722:	3018      	adds	r0, #24
 8003724:	4283      	cmp	r3, r0
 8003726:	bf08      	it	eq
 8003728:	f042 0201 	orreq.w	r2, r2, #1
 800372c:	3018      	adds	r0, #24
 800372e:	4283      	cmp	r3, r0
 8003730:	bf08      	it	eq
 8003732:	f042 0201 	orreq.w	r2, r2, #1
 8003736:	3018      	adds	r0, #24
 8003738:	4283      	cmp	r3, r0
 800373a:	bf08      	it	eq
 800373c:	f042 0201 	orreq.w	r2, r2, #1
 8003740:	3018      	adds	r0, #24
 8003742:	4283      	cmp	r3, r0
 8003744:	bf08      	it	eq
 8003746:	f042 0201 	orreq.w	r2, r2, #1
 800374a:	2a00      	cmp	r2, #0
 800374c:	f47f ae20 	bne.w	8003390 <HAL_DMA_IRQHandler+0xd4>
 8003750:	2e00      	cmp	r6, #0
 8003752:	f47f ae1d 	bne.w	8003390 <HAL_DMA_IRQHandler+0xd4>
 8003756:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003758:	2204      	movs	r2, #4
 800375a:	fa02 f20c 	lsl.w	r2, r2, ip
 800375e:	423a      	tst	r2, r7
 8003760:	f040 8094 	bne.w	800388c <HAL_DMA_IRQHandler+0x5d0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003764:	2210      	movs	r2, #16
 8003766:	fa02 fc0c 	lsl.w	ip, r2, ip
 800376a:	ea17 0f0c 	tst.w	r7, ip
 800376e:	f43f aef1 	beq.w	8003554 <HAL_DMA_IRQHandler+0x298>
 8003772:	e684      	b.n	800347e <HAL_DMA_IRQHandler+0x1c2>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003774:	f023 0316 	bic.w	r3, r3, #22
 8003778:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800377a:	6953      	ldr	r3, [r2, #20]
 800377c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003780:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003782:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8003786:	b39b      	cbz	r3, 80037f0 <HAL_DMA_IRQHandler+0x534>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003788:	6813      	ldr	r3, [r2, #0]
 800378a:	f023 0308 	bic.w	r3, r3, #8
 800378e:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003790:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8003792:	2501      	movs	r5, #1
          __HAL_UNLOCK(hdma);
 8003794:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003796:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 800379a:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800379e:	60a1      	str	r1, [r4, #8]
          hdma->State = HAL_DMA_STATE_READY;
 80037a0:	f889 5035 	strb.w	r5, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80037a4:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f47f af70 	bne.w	800368e <HAL_DMA_IRQHandler+0x3d2>
}
 80037ae:	b003      	add	sp, #12
 80037b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	0318      	lsls	r0, r3, #12
 80037b8:	f57f aeb7 	bpl.w	800352a <HAL_DMA_IRQHandler+0x26e>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80037bc:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f47f aec3 	bne.w	800354c <HAL_DMA_IRQHandler+0x290>
 80037c6:	e6c5      	b.n	8003554 <HAL_DMA_IRQHandler+0x298>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037c8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80037cc:	f47f af2c 	bne.w	8003628 <HAL_DMA_IRQHandler+0x36c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80037d0:	6811      	ldr	r1, [r2, #0]
 80037d2:	f021 0110 	bic.w	r1, r1, #16
 80037d6:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80037d8:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 80037da:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80037de:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 80037e2:	e721      	b.n	8003628 <HAL_DMA_IRQHandler+0x36c>
            if(hdma->XferM1CpltCallback != NULL)
 80037e4:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f47f af20 	bne.w	800362e <HAL_DMA_IRQHandler+0x372>
 80037ee:	e720      	b.n	8003632 <HAL_DMA_IRQHandler+0x376>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037f0:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1c7      	bne.n	8003788 <HAL_DMA_IRQHandler+0x4cc>
 80037f8:	e7ca      	b.n	8003790 <HAL_DMA_IRQHandler+0x4d4>
 80037fa:	bf00      	nop
 80037fc:	40020010 	.word	0x40020010
 8003800:	40020028 	.word	0x40020028
 8003804:	400204b8 	.word	0x400204b8
 8003808:	1b4e81b5 	.word	0x1b4e81b5
 800380c:	40020058 	.word	0x40020058
 8003810:	40020040 	.word	0x40020040
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003814:	4a4e      	ldr	r2, [pc, #312]	; (8003950 <HAL_DMA_IRQHandler+0x694>)
 8003816:	4d4f      	ldr	r5, [pc, #316]	; (8003954 <HAL_DMA_IRQHandler+0x698>)
 8003818:	42ab      	cmp	r3, r5
 800381a:	bf18      	it	ne
 800381c:	4293      	cmpne	r3, r2
 800381e:	f105 0514 	add.w	r5, r5, #20
 8003822:	bf0c      	ite	eq
 8003824:	2201      	moveq	r2, #1
 8003826:	2200      	movne	r2, #0
 8003828:	42ab      	cmp	r3, r5
 800382a:	bf08      	it	eq
 800382c:	f042 0201 	orreq.w	r2, r2, #1
 8003830:	3514      	adds	r5, #20
 8003832:	42ab      	cmp	r3, r5
 8003834:	bf08      	it	eq
 8003836:	f042 0201 	orreq.w	r2, r2, #1
 800383a:	3514      	adds	r5, #20
 800383c:	42ab      	cmp	r3, r5
 800383e:	bf08      	it	eq
 8003840:	f042 0201 	orreq.w	r2, r2, #1
 8003844:	3514      	adds	r5, #20
 8003846:	42ab      	cmp	r3, r5
 8003848:	bf08      	it	eq
 800384a:	f042 0201 	orreq.w	r2, r2, #1
 800384e:	3514      	adds	r5, #20
 8003850:	42ab      	cmp	r3, r5
 8003852:	bf08      	it	eq
 8003854:	f042 0201 	orreq.w	r2, r2, #1
 8003858:	b912      	cbnz	r2, 8003860 <HAL_DMA_IRQHandler+0x5a4>
 800385a:	4a3f      	ldr	r2, [pc, #252]	; (8003958 <HAL_DMA_IRQHandler+0x69c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d1a6      	bne.n	80037ae <HAL_DMA_IRQHandler+0x4f2>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003860:	f8d9 505c 	ldr.w	r5, [r9, #92]	; 0x5c
 8003864:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003866:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003868:	f005 051f 	and.w	r5, r5, #31
 800386c:	40ae      	lsls	r6, r5
 800386e:	420e      	tst	r6, r1
 8003870:	d019      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x5ea>
 8003872:	0757      	lsls	r7, r2, #29
 8003874:	d517      	bpl.n	80038a6 <HAL_DMA_IRQHandler+0x5ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003876:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003878:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800387a:	d54b      	bpl.n	8003914 <HAL_DMA_IRQHandler+0x658>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800387c:	03d1      	lsls	r1, r2, #15
 800387e:	d44f      	bmi.n	8003920 <HAL_DMA_IRQHandler+0x664>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003880:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8003884:	2b00      	cmp	r3, #0
 8003886:	f47f af02 	bne.w	800368e <HAL_DMA_IRQHandler+0x3d2>
 800388a:	e790      	b.n	80037ae <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800388c:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800388e:	2210      	movs	r2, #16
 8003890:	fa02 fc0c 	lsl.w	ip, r2, ip
 8003894:	ea17 0f0c 	tst.w	r7, ip
 8003898:	f43f ae5c 	beq.w	8003554 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	0752      	lsls	r2, r2, #29
 80038a0:	f57f ae58 	bpl.w	8003554 <HAL_DMA_IRQHandler+0x298>
 80038a4:	e634      	b.n	8003510 <HAL_DMA_IRQHandler+0x254>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80038a6:	2602      	movs	r6, #2
 80038a8:	40ae      	lsls	r6, r5
 80038aa:	420e      	tst	r6, r1
 80038ac:	d011      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x616>
 80038ae:	0797      	lsls	r7, r2, #30
 80038b0:	d50f      	bpl.n	80038d2 <HAL_DMA_IRQHandler+0x616>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80038b2:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038b4:	0414      	lsls	r4, r2, #16
 80038b6:	d539      	bpl.n	800392c <HAL_DMA_IRQHandler+0x670>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80038b8:	03d0      	lsls	r0, r2, #15
 80038ba:	d443      	bmi.n	8003944 <HAL_DMA_IRQHandler+0x688>
          if(hdma->XferM1CpltCallback != NULL)
 80038bc:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f47f aee4 	bne.w	800368e <HAL_DMA_IRQHandler+0x3d2>
 80038c6:	e772      	b.n	80037ae <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80038c8:	6813      	ldr	r3, [r2, #0]
 80038ca:	079f      	lsls	r7, r3, #30
 80038cc:	f57f aeb1 	bpl.w	8003632 <HAL_DMA_IRQHandler+0x376>
 80038d0:	e69b      	b.n	800360a <HAL_DMA_IRQHandler+0x34e>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80038d2:	2608      	movs	r6, #8
 80038d4:	40ae      	lsls	r6, r5
 80038d6:	420e      	tst	r6, r1
 80038d8:	f43f af69 	beq.w	80037ae <HAL_DMA_IRQHandler+0x4f2>
 80038dc:	0711      	lsls	r1, r2, #28
 80038de:	f57f af66 	bpl.w	80037ae <HAL_DMA_IRQHandler+0x4f2>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e2:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 80038e4:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e6:	f022 020e 	bic.w	r2, r2, #14
 80038ea:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80038ec:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 80038ee:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80038f2:	fa03 f505 	lsl.w	r5, r3, r5
 80038f6:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038f8:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 80038fc:	f889 1034 	strb.w	r1, [r9, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003900:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8003904:	2a00      	cmp	r2, #0
 8003906:	f43f af52 	beq.w	80037ae <HAL_DMA_IRQHandler+0x4f2>
        hdma->XferErrorCallback(hdma);
 800390a:	4648      	mov	r0, r9
}
 800390c:	b003      	add	sp, #12
 800390e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        hdma->XferErrorCallback(hdma);
 8003912:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003914:	0692      	lsls	r2, r2, #26
 8003916:	d403      	bmi.n	8003920 <HAL_DMA_IRQHandler+0x664>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	f022 0204 	bic.w	r2, r2, #4
 800391e:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8003920:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8003924:	2b00      	cmp	r3, #0
 8003926:	f47f aeb2 	bne.w	800368e <HAL_DMA_IRQHandler+0x3d2>
 800392a:	e740      	b.n	80037ae <HAL_DMA_IRQHandler+0x4f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800392c:	f012 0220 	ands.w	r2, r2, #32
 8003930:	d108      	bne.n	8003944 <HAL_DMA_IRQHandler+0x688>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003932:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003934:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003936:	f021 010a 	bic.w	r1, r1, #10
 800393a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800393c:	f889 4035 	strb.w	r4, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8003940:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8003944:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8003948:	2b00      	cmp	r3, #0
 800394a:	f47f aea0 	bne.w	800368e <HAL_DMA_IRQHandler+0x3d2>
 800394e:	e72e      	b.n	80037ae <HAL_DMA_IRQHandler+0x4f2>
 8003950:	58025408 	.word	0x58025408
 8003954:	5802541c 	.word	0x5802541c
 8003958:	58025494 	.word	0x58025494

0800395c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800395c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800395e:	4770      	bx	lr

08003960 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003964:	680c      	ldr	r4, [r1, #0]
{
 8003966:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003968:	2c00      	cmp	r4, #0
 800396a:	f000 80a2 	beq.w	8003ab2 <HAL_GPIO_Init+0x152>
 800396e:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003972:	4f89      	ldr	r7, [pc, #548]	; (8003b98 <HAL_GPIO_Init+0x238>)
  uint32_t position = 0x00U;
 8003974:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003976:	2201      	movs	r2, #1
 8003978:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800397a:	ea12 0e04 	ands.w	lr, r2, r4
 800397e:	f000 8091 	beq.w	8003aa4 <HAL_GPIO_Init+0x144>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003982:	684d      	ldr	r5, [r1, #4]
 8003984:	f005 0903 	and.w	r9, r5, #3
 8003988:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 800398c:	2e01      	cmp	r6, #1
 800398e:	f240 8093 	bls.w	8003ab8 <HAL_GPIO_Init+0x158>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003992:	f1b9 0f03 	cmp.w	r9, #3
 8003996:	f040 80cd 	bne.w	8003b34 <HAL_GPIO_Init+0x1d4>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800399a:	fa09 f20c 	lsl.w	r2, r9, ip
 800399e:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 80039a2:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039a4:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039a8:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039ac:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
 80039b0:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039b2:	d077      	beq.n	8003aa4 <HAL_GPIO_Init+0x144>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80039b8:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039bc:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c0:	f042 0202 	orr.w	r2, r2, #2
 80039c4:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039c8:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039cc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80039d0:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 80039d4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80039d8:	f002 0202 	and.w	r2, r2, #2
 80039dc:	9201      	str	r2, [sp, #4]
 80039de:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039e0:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 80039e2:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039e6:	fa02 f209 	lsl.w	r2, r2, r9
 80039ea:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039ee:	4e6b      	ldr	r6, [pc, #428]	; (8003b9c <HAL_GPIO_Init+0x23c>)
 80039f0:	42b0      	cmp	r0, r6
 80039f2:	d025      	beq.n	8003a40 <HAL_GPIO_Init+0xe0>
 80039f4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80039f8:	42b0      	cmp	r0, r6
 80039fa:	f000 80a8 	beq.w	8003b4e <HAL_GPIO_Init+0x1ee>
 80039fe:	4e68      	ldr	r6, [pc, #416]	; (8003ba0 <HAL_GPIO_Init+0x240>)
 8003a00:	42b0      	cmp	r0, r6
 8003a02:	f000 80aa 	beq.w	8003b5a <HAL_GPIO_Init+0x1fa>
 8003a06:	4e67      	ldr	r6, [pc, #412]	; (8003ba4 <HAL_GPIO_Init+0x244>)
 8003a08:	42b0      	cmp	r0, r6
 8003a0a:	f000 809a 	beq.w	8003b42 <HAL_GPIO_Init+0x1e2>
 8003a0e:	4e66      	ldr	r6, [pc, #408]	; (8003ba8 <HAL_GPIO_Init+0x248>)
 8003a10:	42b0      	cmp	r0, r6
 8003a12:	f000 80ae 	beq.w	8003b72 <HAL_GPIO_Init+0x212>
 8003a16:	4e65      	ldr	r6, [pc, #404]	; (8003bac <HAL_GPIO_Init+0x24c>)
 8003a18:	42b0      	cmp	r0, r6
 8003a1a:	f000 80b0 	beq.w	8003b7e <HAL_GPIO_Init+0x21e>
 8003a1e:	4e64      	ldr	r6, [pc, #400]	; (8003bb0 <HAL_GPIO_Init+0x250>)
 8003a20:	42b0      	cmp	r0, r6
 8003a22:	f000 80a0 	beq.w	8003b66 <HAL_GPIO_Init+0x206>
 8003a26:	4e63      	ldr	r6, [pc, #396]	; (8003bb4 <HAL_GPIO_Init+0x254>)
 8003a28:	42b0      	cmp	r0, r6
 8003a2a:	f000 80ae 	beq.w	8003b8a <HAL_GPIO_Init+0x22a>
 8003a2e:	4e62      	ldr	r6, [pc, #392]	; (8003bb8 <HAL_GPIO_Init+0x258>)
 8003a30:	42b0      	cmp	r0, r6
 8003a32:	bf0c      	ite	eq
 8003a34:	2609      	moveq	r6, #9
 8003a36:	260a      	movne	r6, #10
 8003a38:	fa06 f909 	lsl.w	r9, r6, r9
 8003a3c:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a40:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a48:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8003a4a:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
 8003a4e:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003a50:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8003a54:	bf54      	ite	pl
 8003a56:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 8003a5a:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
 8003a5e:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a60:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
 8003a62:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8003a64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8003a68:	bf54      	ite	pl
 8003a6a:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 8003a6e:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
 8003a72:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003a74:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a78:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8003a7e:	bf54      	ite	pl
 8003a80:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 8003a84:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a88:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003a8a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8003a8e:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8003a92:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 8003a96:	bf54      	ite	pl
 8003a98:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 8003a9c:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8003aa0:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 8003aa4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003aa6:	f10c 0c02 	add.w	ip, ip, #2
 8003aaa:	fa34 f203 	lsrs.w	r2, r4, r3
 8003aae:	f47f af62 	bne.w	8003976 <HAL_GPIO_Init+0x16>
  }
}
 8003ab2:	b003      	add	sp, #12
 8003ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ab8:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 8003abc:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003abe:	fa08 f80c 	lsl.w	r8, r8, ip
 8003ac2:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ac6:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ac8:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003acc:	fa06 f60c 	lsl.w	r6, r6, ip
 8003ad0:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8003ad4:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ad6:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 8003ada:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ade:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ae0:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ae4:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8003ae6:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8003ae8:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aea:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aee:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003af0:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003af4:	fa06 f60c 	lsl.w	r6, r6, ip
 8003af8:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8003afc:	fa09 f20c 	lsl.w	r2, r9, ip
 8003b00:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b02:	f47f af4e 	bne.w	80039a2 <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b06:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003b0a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b0e:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 8003b12:	260f      	movs	r6, #15
 8003b14:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8003b18:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
 8003b1c:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b20:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b24:	690e      	ldr	r6, [r1, #16]
 8003b26:	fa06 f60b 	lsl.w	r6, r6, fp
 8003b2a:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 8003b2e:	f8c9 6020 	str.w	r6, [r9, #32]
 8003b32:	e736      	b.n	80039a2 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b34:	f04f 0803 	mov.w	r8, #3
 8003b38:	fa08 f80c 	lsl.w	r8, r8, ip
 8003b3c:	ea6f 0808 	mvn.w	r8, r8
 8003b40:	e7d2      	b.n	8003ae8 <HAL_GPIO_Init+0x188>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b42:	2603      	movs	r6, #3
 8003b44:	fa06 f909 	lsl.w	r9, r6, r9
 8003b48:	ea42 0209 	orr.w	r2, r2, r9
 8003b4c:	e778      	b.n	8003a40 <HAL_GPIO_Init+0xe0>
 8003b4e:	2601      	movs	r6, #1
 8003b50:	fa06 f909 	lsl.w	r9, r6, r9
 8003b54:	ea42 0209 	orr.w	r2, r2, r9
 8003b58:	e772      	b.n	8003a40 <HAL_GPIO_Init+0xe0>
 8003b5a:	2602      	movs	r6, #2
 8003b5c:	fa06 f909 	lsl.w	r9, r6, r9
 8003b60:	ea42 0209 	orr.w	r2, r2, r9
 8003b64:	e76c      	b.n	8003a40 <HAL_GPIO_Init+0xe0>
 8003b66:	2606      	movs	r6, #6
 8003b68:	fa06 f909 	lsl.w	r9, r6, r9
 8003b6c:	ea42 0209 	orr.w	r2, r2, r9
 8003b70:	e766      	b.n	8003a40 <HAL_GPIO_Init+0xe0>
 8003b72:	2604      	movs	r6, #4
 8003b74:	fa06 f909 	lsl.w	r9, r6, r9
 8003b78:	ea42 0209 	orr.w	r2, r2, r9
 8003b7c:	e760      	b.n	8003a40 <HAL_GPIO_Init+0xe0>
 8003b7e:	2605      	movs	r6, #5
 8003b80:	fa06 f909 	lsl.w	r9, r6, r9
 8003b84:	ea42 0209 	orr.w	r2, r2, r9
 8003b88:	e75a      	b.n	8003a40 <HAL_GPIO_Init+0xe0>
 8003b8a:	2607      	movs	r6, #7
 8003b8c:	fa06 f909 	lsl.w	r9, r6, r9
 8003b90:	ea42 0209 	orr.w	r2, r2, r9
 8003b94:	e754      	b.n	8003a40 <HAL_GPIO_Init+0xe0>
 8003b96:	bf00      	nop
 8003b98:	58024400 	.word	0x58024400
 8003b9c:	58020000 	.word	0x58020000
 8003ba0:	58020800 	.word	0x58020800
 8003ba4:	58020c00 	.word	0x58020c00
 8003ba8:	58021000 	.word	0x58021000
 8003bac:	58021400 	.word	0x58021400
 8003bb0:	58021800 	.word	0x58021800
 8003bb4:	58021c00 	.word	0x58021c00
 8003bb8:	58022400 	.word	0x58022400

08003bbc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bbc:	b902      	cbnz	r2, 8003bc0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003bbe:	0409      	lsls	r1, r1, #16
 8003bc0:	6181      	str	r1, [r0, #24]
  }
}
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003bc4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003bc6:	4c10      	ldr	r4, [pc, #64]	; (8003c08 <HAL_PWREx_ConfigSupply+0x44>)
 8003bc8:	68e3      	ldr	r3, [r4, #12]
 8003bca:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003bce:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003bd0:	d105      	bne.n	8003bde <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003bd2:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003bd6:	1a18      	subs	r0, r3, r0
 8003bd8:	bf18      	it	ne
 8003bda:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8003bdc:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003bde:	f023 0307 	bic.w	r3, r3, #7
 8003be2:	4318      	orrs	r0, r3
 8003be4:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8003be6:	f7fd fce3 	bl	80015b0 <HAL_GetTick>
 8003bea:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bec:	e005      	b.n	8003bfa <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003bee:	f7fd fcdf 	bl	80015b0 <HAL_GetTick>
 8003bf2:	1b40      	subs	r0, r0, r5
 8003bf4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003bf8:	d804      	bhi.n	8003c04 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bfa:	6863      	ldr	r3, [r4, #4]
 8003bfc:	049b      	lsls	r3, r3, #18
 8003bfe:	d5f6      	bpl.n	8003bee <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8003c00:	2000      	movs	r0, #0
}
 8003c02:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003c04:	2001      	movs	r0, #1
}
 8003c06:	bd38      	pop	{r3, r4, r5, pc}
 8003c08:	58024800 	.word	0x58024800

08003c0c <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c0c:	4b3b      	ldr	r3, [pc, #236]	; (8003cfc <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8003c0e:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003c12:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c14:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8003c16:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003c1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003c1c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8003c20:	d038      	beq.n	8003c94 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003c22:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c26:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c2a:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003c2e:	fb05 f101 	mul.w	r1, r5, r1
 8003c32:	2a01      	cmp	r2, #1
 8003c34:	ee07 1a90 	vmov	s15, r1
 8003c38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 8003c3c:	d002      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8003c3e:	2a02      	cmp	r2, #2
 8003c40:	d04e      	beq.n	8003ce0 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8003c42:	b34a      	cbz	r2, 8003c98 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c44:	ee07 0a90 	vmov	s15, r0
 8003c48:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8003d00 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 8003c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8003c56:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8003d04 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8003c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5e:	ee06 3a90 	vmov	s13, r3
 8003c62:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8003c66:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003c6a:	ee76 6a85 	vadd.f32	s13, s13, s10
 8003c6e:	eee7 6a25 	vfma.f32	s13, s14, s11
 8003c72:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003c76:	4b21      	ldr	r3, [pc, #132]	; (8003cfc <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003c7e:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003c80:	ee07 3a90 	vmov	s15, r3
 8003c84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c90:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8003c94:	bc30      	pop	{r4, r5}
 8003c96:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	0692      	lsls	r2, r2, #26
 8003c9c:	d527      	bpl.n	8003cee <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c9e:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ca0:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ca4:	4a18      	ldr	r2, [pc, #96]	; (8003d08 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ca6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cac:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cb4:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8003d04 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8003cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cbc:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cbe:	ee06 3a90 	vmov	s13, r3
 8003cc2:	ee05 2a90 	vmov	s11, r2
 8003cc6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003cca:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8003cce:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003cd2:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8003cd6:	eee7 6a05 	vfma.f32	s13, s14, s10
 8003cda:	ee66 6a26 	vmul.f32	s13, s12, s13
 8003cde:	e7ca      	b.n	8003c76 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ce0:	ee07 0a90 	vmov	s15, r0
 8003ce4:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003d0c <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8003ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cec:	e7b0      	b.n	8003c50 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cee:	ee07 0a90 	vmov	s15, r0
 8003cf2:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003d10 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8003cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cfa:	e7a9      	b.n	8003c50 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8003cfc:	58024400 	.word	0x58024400
 8003d00:	4a742400 	.word	0x4a742400
 8003d04:	39000000 	.word	0x39000000
 8003d08:	03d09000 	.word	0x03d09000
 8003d0c:	4bbebc20 	.word	0x4bbebc20
 8003d10:	4c742400 	.word	0x4c742400

08003d14 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003d14:	2800      	cmp	r0, #0
 8003d16:	f000 81bd 	beq.w	8004094 <HAL_RCC_OscConfig+0x380>
{
 8003d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1c:	6803      	ldr	r3, [r0, #0]
 8003d1e:	4604      	mov	r4, r0
 8003d20:	07d9      	lsls	r1, r3, #31
 8003d22:	d52e      	bpl.n	8003d82 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d24:	4993      	ldr	r1, [pc, #588]	; (8003f74 <HAL_RCC_OscConfig+0x260>)
 8003d26:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d28:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d2a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003d2e:	2a10      	cmp	r2, #16
 8003d30:	f000 80f0 	beq.w	8003f14 <HAL_RCC_OscConfig+0x200>
 8003d34:	2a18      	cmp	r2, #24
 8003d36:	f000 80e8 	beq.w	8003f0a <HAL_RCC_OscConfig+0x1f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d3a:	6863      	ldr	r3, [r4, #4]
 8003d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d40:	f000 8108 	beq.w	8003f54 <HAL_RCC_OscConfig+0x240>
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 8146 	beq.w	8003fd6 <HAL_RCC_OscConfig+0x2c2>
 8003d4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d4e:	4b89      	ldr	r3, [pc, #548]	; (8003f74 <HAL_RCC_OscConfig+0x260>)
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	f000 8254 	beq.w	80041fe <HAL_RCC_OscConfig+0x4ea>
 8003d56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d62:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003d64:	f7fd fc24 	bl	80015b0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d68:	4e82      	ldr	r6, [pc, #520]	; (8003f74 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8003d6a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d6c:	e005      	b.n	8003d7a <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d6e:	f7fd fc1f 	bl	80015b0 <HAL_GetTick>
 8003d72:	1b40      	subs	r0, r0, r5
 8003d74:	2864      	cmp	r0, #100	; 0x64
 8003d76:	f200 812c 	bhi.w	8003fd2 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d7a:	6833      	ldr	r3, [r6, #0]
 8003d7c:	039b      	lsls	r3, r3, #14
 8003d7e:	d5f6      	bpl.n	8003d6e <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d80:	6823      	ldr	r3, [r4, #0]
 8003d82:	079d      	lsls	r5, r3, #30
 8003d84:	d47e      	bmi.n	8003e84 <HAL_RCC_OscConfig+0x170>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d86:	06d9      	lsls	r1, r3, #27
 8003d88:	d528      	bpl.n	8003ddc <HAL_RCC_OscConfig+0xc8>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d8a:	497a      	ldr	r1, [pc, #488]	; (8003f74 <HAL_RCC_OscConfig+0x260>)
 8003d8c:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d8e:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d90:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d94:	2a08      	cmp	r2, #8
 8003d96:	f000 80cd 	beq.w	8003f34 <HAL_RCC_OscConfig+0x220>
 8003d9a:	2a18      	cmp	r2, #24
 8003d9c:	f000 80c5 	beq.w	8003f2a <HAL_RCC_OscConfig+0x216>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003da0:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8003da2:	4d74      	ldr	r5, [pc, #464]	; (8003f74 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 814e 	beq.w	8004046 <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_CSI_ENABLE();
 8003daa:	682b      	ldr	r3, [r5, #0]
 8003dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003db0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003db2:	f7fd fbfd 	bl	80015b0 <HAL_GetTick>
 8003db6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003db8:	e005      	b.n	8003dc6 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003dba:	f7fd fbf9 	bl	80015b0 <HAL_GetTick>
 8003dbe:	1b80      	subs	r0, r0, r6
 8003dc0:	2802      	cmp	r0, #2
 8003dc2:	f200 8106 	bhi.w	8003fd2 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dc6:	682b      	ldr	r3, [r5, #0]
 8003dc8:	05db      	lsls	r3, r3, #23
 8003dca:	d5f6      	bpl.n	8003dba <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dcc:	68eb      	ldr	r3, [r5, #12]
 8003dce:	6a22      	ldr	r2, [r4, #32]
 8003dd0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003dd4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003dd8:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	071d      	lsls	r5, r3, #28
 8003dde:	d516      	bpl.n	8003e0e <HAL_RCC_OscConfig+0xfa>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003de0:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8003de2:	4d64      	ldr	r5, [pc, #400]	; (8003f74 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 810c 	beq.w	8004002 <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_LSI_ENABLE();
 8003dea:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003df2:	f7fd fbdd 	bl	80015b0 <HAL_GetTick>
 8003df6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003df8:	e005      	b.n	8003e06 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dfa:	f7fd fbd9 	bl	80015b0 <HAL_GetTick>
 8003dfe:	1b80      	subs	r0, r0, r6
 8003e00:	2802      	cmp	r0, #2
 8003e02:	f200 80e6 	bhi.w	8003fd2 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e06:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003e08:	0798      	lsls	r0, r3, #30
 8003e0a:	d5f6      	bpl.n	8003dfa <HAL_RCC_OscConfig+0xe6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	069a      	lsls	r2, r3, #26
 8003e10:	d516      	bpl.n	8003e40 <HAL_RCC_OscConfig+0x12c>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003e12:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8003e14:	4d57      	ldr	r5, [pc, #348]	; (8003f74 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 8104 	beq.w	8004024 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_HSI48_ENABLE();
 8003e1c:	682b      	ldr	r3, [r5, #0]
 8003e1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e22:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003e24:	f7fd fbc4 	bl	80015b0 <HAL_GetTick>
 8003e28:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e2a:	e005      	b.n	8003e38 <HAL_RCC_OscConfig+0x124>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e2c:	f7fd fbc0 	bl	80015b0 <HAL_GetTick>
 8003e30:	1b80      	subs	r0, r0, r6
 8003e32:	2802      	cmp	r0, #2
 8003e34:	f200 80cd 	bhi.w	8003fd2 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e38:	682b      	ldr	r3, [r5, #0]
 8003e3a:	049f      	lsls	r7, r3, #18
 8003e3c:	d5f6      	bpl.n	8003e2c <HAL_RCC_OscConfig+0x118>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	0759      	lsls	r1, r3, #29
 8003e42:	f100 808d 	bmi.w	8003f60 <HAL_RCC_OscConfig+0x24c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e46:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003e48:	b1d0      	cbz	r0, 8003e80 <HAL_RCC_OscConfig+0x16c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e4a:	4d4a      	ldr	r5, [pc, #296]	; (8003f74 <HAL_RCC_OscConfig+0x260>)
 8003e4c:	692b      	ldr	r3, [r5, #16]
 8003e4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e52:	2b18      	cmp	r3, #24
 8003e54:	f000 8185 	beq.w	8004162 <HAL_RCC_OscConfig+0x44e>
        __HAL_RCC_PLL_DISABLE();
 8003e58:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e5a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003e5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e60:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e62:	f000 8119 	beq.w	8004098 <HAL_RCC_OscConfig+0x384>
        tickstart = HAL_GetTick();
 8003e66:	f7fd fba3 	bl	80015b0 <HAL_GetTick>
 8003e6a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e6c:	e005      	b.n	8003e7a <HAL_RCC_OscConfig+0x166>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6e:	f7fd fb9f 	bl	80015b0 <HAL_GetTick>
 8003e72:	1b00      	subs	r0, r0, r4
 8003e74:	2802      	cmp	r0, #2
 8003e76:	f200 80ac 	bhi.w	8003fd2 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e7a:	682b      	ldr	r3, [r5, #0]
 8003e7c:	019b      	lsls	r3, r3, #6
 8003e7e:	d4f6      	bmi.n	8003e6e <HAL_RCC_OscConfig+0x15a>
  return HAL_OK;
 8003e80:	2000      	movs	r0, #0
}
 8003e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e84:	4a3b      	ldr	r2, [pc, #236]	; (8003f74 <HAL_RCC_OscConfig+0x260>)
 8003e86:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e88:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e8a:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8003e8e:	d122      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x1c2>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e90:	4b38      	ldr	r3, [pc, #224]	; (8003f74 <HAL_RCC_OscConfig+0x260>)
 8003e92:	68e2      	ldr	r2, [r4, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	0759      	lsls	r1, r3, #29
 8003e98:	d501      	bpl.n	8003e9e <HAL_RCC_OscConfig+0x18a>
 8003e9a:	2a00      	cmp	r2, #0
 8003e9c:	d043      	beq.n	8003f26 <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003e9e:	4d35      	ldr	r5, [pc, #212]	; (8003f74 <HAL_RCC_OscConfig+0x260>)
 8003ea0:	682b      	ldr	r3, [r5, #0]
 8003ea2:	f023 0319 	bic.w	r3, r3, #25
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003eaa:	f7fd fb81 	bl	80015b0 <HAL_GetTick>
 8003eae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003eb0:	e005      	b.n	8003ebe <HAL_RCC_OscConfig+0x1aa>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb2:	f7fd fb7d 	bl	80015b0 <HAL_GetTick>
 8003eb6:	1b80      	subs	r0, r0, r6
 8003eb8:	2802      	cmp	r0, #2
 8003eba:	f200 808a 	bhi.w	8003fd2 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ebe:	682b      	ldr	r3, [r5, #0]
 8003ec0:	075b      	lsls	r3, r3, #29
 8003ec2:	d5f6      	bpl.n	8003eb2 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec4:	686b      	ldr	r3, [r5, #4]
 8003ec6:	6922      	ldr	r2, [r4, #16]
 8003ec8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003ecc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003ed0:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	e757      	b.n	8003d86 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ed6:	2b18      	cmp	r3, #24
 8003ed8:	f000 80d8 	beq.w	800408c <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003edc:	4d25      	ldr	r5, [pc, #148]	; (8003f74 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ede:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ee0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ee2:	2a00      	cmp	r2, #0
 8003ee4:	f000 80c1 	beq.w	800406a <HAL_RCC_OscConfig+0x356>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ee8:	f023 0319 	bic.w	r3, r3, #25
 8003eec:	4313      	orrs	r3, r2
 8003eee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003ef0:	f7fd fb5e 	bl	80015b0 <HAL_GetTick>
 8003ef4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ef6:	e004      	b.n	8003f02 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ef8:	f7fd fb5a 	bl	80015b0 <HAL_GetTick>
 8003efc:	1b80      	subs	r0, r0, r6
 8003efe:	2802      	cmp	r0, #2
 8003f00:	d867      	bhi.n	8003fd2 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f02:	682b      	ldr	r3, [r5, #0]
 8003f04:	075f      	lsls	r7, r3, #29
 8003f06:	d5f7      	bpl.n	8003ef8 <HAL_RCC_OscConfig+0x1e4>
 8003f08:	e7dc      	b.n	8003ec4 <HAL_RCC_OscConfig+0x1b0>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003f0a:	f001 0103 	and.w	r1, r1, #3
 8003f0e:	2902      	cmp	r1, #2
 8003f10:	f47f af13 	bne.w	8003d3a <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f14:	4a17      	ldr	r2, [pc, #92]	; (8003f74 <HAL_RCC_OscConfig+0x260>)
 8003f16:	6812      	ldr	r2, [r2, #0]
 8003f18:	0392      	lsls	r2, r2, #14
 8003f1a:	f57f af32 	bpl.w	8003d82 <HAL_RCC_OscConfig+0x6e>
 8003f1e:	6862      	ldr	r2, [r4, #4]
 8003f20:	2a00      	cmp	r2, #0
 8003f22:	f47f af2e 	bne.w	8003d82 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8003f26:	2001      	movs	r0, #1
}
 8003f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003f2a:	f001 0103 	and.w	r1, r1, #3
 8003f2e:	2901      	cmp	r1, #1
 8003f30:	f47f af36 	bne.w	8003da0 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f34:	4a0f      	ldr	r2, [pc, #60]	; (8003f74 <HAL_RCC_OscConfig+0x260>)
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	05d2      	lsls	r2, r2, #23
 8003f3a:	d502      	bpl.n	8003f42 <HAL_RCC_OscConfig+0x22e>
 8003f3c:	69e2      	ldr	r2, [r4, #28]
 8003f3e:	2a80      	cmp	r2, #128	; 0x80
 8003f40:	d1f1      	bne.n	8003f26 <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f42:	490c      	ldr	r1, [pc, #48]	; (8003f74 <HAL_RCC_OscConfig+0x260>)
 8003f44:	6a20      	ldr	r0, [r4, #32]
 8003f46:	68ca      	ldr	r2, [r1, #12]
 8003f48:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8003f4c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8003f50:	60ca      	str	r2, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f52:	e743      	b.n	8003ddc <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f54:	4a07      	ldr	r2, [pc, #28]	; (8003f74 <HAL_RCC_OscConfig+0x260>)
 8003f56:	6813      	ldr	r3, [r2, #0]
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f5e:	e701      	b.n	8003d64 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8003f60:	4d05      	ldr	r5, [pc, #20]	; (8003f78 <HAL_RCC_OscConfig+0x264>)
 8003f62:	682b      	ldr	r3, [r5, #0]
 8003f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f68:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003f6a:	f7fd fb21 	bl	80015b0 <HAL_GetTick>
 8003f6e:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f70:	e009      	b.n	8003f86 <HAL_RCC_OscConfig+0x272>
 8003f72:	bf00      	nop
 8003f74:	58024400 	.word	0x58024400
 8003f78:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7c:	f7fd fb18 	bl	80015b0 <HAL_GetTick>
 8003f80:	1b80      	subs	r0, r0, r6
 8003f82:	2864      	cmp	r0, #100	; 0x64
 8003f84:	d825      	bhi.n	8003fd2 <HAL_RCC_OscConfig+0x2be>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f86:	682b      	ldr	r3, [r5, #0]
 8003f88:	05da      	lsls	r2, r3, #23
 8003f8a:	d5f7      	bpl.n	8003f7c <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f8c:	68a3      	ldr	r3, [r4, #8]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	f000 815c 	beq.w	800424c <HAL_RCC_OscConfig+0x538>
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 813a 	beq.w	800420e <HAL_RCC_OscConfig+0x4fa>
 8003f9a:	2b05      	cmp	r3, #5
 8003f9c:	4ba8      	ldr	r3, [pc, #672]	; (8004240 <HAL_RCC_OscConfig+0x52c>)
 8003f9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fa0:	f000 815a 	beq.w	8004258 <HAL_RCC_OscConfig+0x544>
 8003fa4:	f022 0201 	bic.w	r2, r2, #1
 8003fa8:	671a      	str	r2, [r3, #112]	; 0x70
 8003faa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fac:	f022 0204 	bic.w	r2, r2, #4
 8003fb0:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003fb2:	f7fd fafd 	bl	80015b0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fb6:	4ea2      	ldr	r6, [pc, #648]	; (8004240 <HAL_RCC_OscConfig+0x52c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb8:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003fbc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fbe:	e004      	b.n	8003fca <HAL_RCC_OscConfig+0x2b6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc0:	f7fd faf6 	bl	80015b0 <HAL_GetTick>
 8003fc4:	1b40      	subs	r0, r0, r5
 8003fc6:	42b8      	cmp	r0, r7
 8003fc8:	d803      	bhi.n	8003fd2 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fca:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003fcc:	079b      	lsls	r3, r3, #30
 8003fce:	d5f7      	bpl.n	8003fc0 <HAL_RCC_OscConfig+0x2ac>
 8003fd0:	e739      	b.n	8003e46 <HAL_RCC_OscConfig+0x132>
            return HAL_TIMEOUT;
 8003fd2:	2003      	movs	r0, #3
}
 8003fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fd6:	4d9a      	ldr	r5, [pc, #616]	; (8004240 <HAL_RCC_OscConfig+0x52c>)
 8003fd8:	682b      	ldr	r3, [r5, #0]
 8003fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fde:	602b      	str	r3, [r5, #0]
 8003fe0:	682b      	ldr	r3, [r5, #0]
 8003fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fe6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003fe8:	f7fd fae2 	bl	80015b0 <HAL_GetTick>
 8003fec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fee:	e004      	b.n	8003ffa <HAL_RCC_OscConfig+0x2e6>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7fd fade 	bl	80015b0 <HAL_GetTick>
 8003ff4:	1b80      	subs	r0, r0, r6
 8003ff6:	2864      	cmp	r0, #100	; 0x64
 8003ff8:	d8eb      	bhi.n	8003fd2 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ffa:	682b      	ldr	r3, [r5, #0]
 8003ffc:	039f      	lsls	r7, r3, #14
 8003ffe:	d4f7      	bmi.n	8003ff0 <HAL_RCC_OscConfig+0x2dc>
 8004000:	e6be      	b.n	8003d80 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8004002:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004004:	f023 0301 	bic.w	r3, r3, #1
 8004008:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800400a:	f7fd fad1 	bl	80015b0 <HAL_GetTick>
 800400e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004010:	e004      	b.n	800401c <HAL_RCC_OscConfig+0x308>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004012:	f7fd facd 	bl	80015b0 <HAL_GetTick>
 8004016:	1b80      	subs	r0, r0, r6
 8004018:	2802      	cmp	r0, #2
 800401a:	d8da      	bhi.n	8003fd2 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800401c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800401e:	0799      	lsls	r1, r3, #30
 8004020:	d4f7      	bmi.n	8004012 <HAL_RCC_OscConfig+0x2fe>
 8004022:	e6f3      	b.n	8003e0c <HAL_RCC_OscConfig+0xf8>
      __HAL_RCC_HSI48_DISABLE();
 8004024:	682b      	ldr	r3, [r5, #0]
 8004026:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800402a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800402c:	f7fd fac0 	bl	80015b0 <HAL_GetTick>
 8004030:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004032:	e004      	b.n	800403e <HAL_RCC_OscConfig+0x32a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004034:	f7fd fabc 	bl	80015b0 <HAL_GetTick>
 8004038:	1b80      	subs	r0, r0, r6
 800403a:	2802      	cmp	r0, #2
 800403c:	d8c9      	bhi.n	8003fd2 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800403e:	682b      	ldr	r3, [r5, #0]
 8004040:	0498      	lsls	r0, r3, #18
 8004042:	d4f7      	bmi.n	8004034 <HAL_RCC_OscConfig+0x320>
 8004044:	e6fb      	b.n	8003e3e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_CSI_DISABLE();
 8004046:	682b      	ldr	r3, [r5, #0]
 8004048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800404c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800404e:	f7fd faaf 	bl	80015b0 <HAL_GetTick>
 8004052:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004054:	e004      	b.n	8004060 <HAL_RCC_OscConfig+0x34c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004056:	f7fd faab 	bl	80015b0 <HAL_GetTick>
 800405a:	1b80      	subs	r0, r0, r6
 800405c:	2802      	cmp	r0, #2
 800405e:	d8b8      	bhi.n	8003fd2 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004060:	682b      	ldr	r3, [r5, #0]
 8004062:	05df      	lsls	r7, r3, #23
 8004064:	d4f7      	bmi.n	8004056 <HAL_RCC_OscConfig+0x342>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	e6b8      	b.n	8003ddc <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_HSI_DISABLE();
 800406a:	f023 0301 	bic.w	r3, r3, #1
 800406e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004070:	f7fd fa9e 	bl	80015b0 <HAL_GetTick>
 8004074:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004076:	e004      	b.n	8004082 <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004078:	f7fd fa9a 	bl	80015b0 <HAL_GetTick>
 800407c:	1b80      	subs	r0, r0, r6
 800407e:	2802      	cmp	r0, #2
 8004080:	d8a7      	bhi.n	8003fd2 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004082:	682b      	ldr	r3, [r5, #0]
 8004084:	0758      	lsls	r0, r3, #29
 8004086:	d4f7      	bmi.n	8004078 <HAL_RCC_OscConfig+0x364>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	e67c      	b.n	8003d86 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800408c:	0790      	lsls	r0, r2, #30
 800408e:	f47f af25 	bne.w	8003edc <HAL_RCC_OscConfig+0x1c8>
 8004092:	e6fd      	b.n	8003e90 <HAL_RCC_OscConfig+0x17c>
    return HAL_ERROR;
 8004094:	2001      	movs	r0, #1
}
 8004096:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8004098:	f7fd fa8a 	bl	80015b0 <HAL_GetTick>
 800409c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800409e:	e004      	b.n	80040aa <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a0:	f7fd fa86 	bl	80015b0 <HAL_GetTick>
 80040a4:	1b80      	subs	r0, r0, r6
 80040a6:	2802      	cmp	r0, #2
 80040a8:	d893      	bhi.n	8003fd2 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040aa:	682b      	ldr	r3, [r5, #0]
 80040ac:	0199      	lsls	r1, r3, #6
 80040ae:	d4f7      	bmi.n	80040a0 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040b0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80040b2:	4b64      	ldr	r3, [pc, #400]	; (8004244 <HAL_RCC_OscConfig+0x530>)
 80040b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80040b6:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040b8:	4963      	ldr	r1, [pc, #396]	; (8004248 <HAL_RCC_OscConfig+0x534>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040ba:	4e61      	ldr	r6, [pc, #388]	; (8004240 <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040bc:	4313      	orrs	r3, r2
 80040be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80040c0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80040c4:	62ab      	str	r3, [r5, #40]	; 0x28
 80040c6:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80040ca:	3b01      	subs	r3, #1
 80040cc:	3a01      	subs	r2, #1
 80040ce:	025b      	lsls	r3, r3, #9
 80040d0:	0412      	lsls	r2, r2, #16
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80040d8:	4313      	orrs	r3, r2
 80040da:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80040dc:	3a01      	subs	r2, #1
 80040de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e2:	4313      	orrs	r3, r2
 80040e4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80040e6:	3a01      	subs	r2, #1
 80040e8:	0612      	lsls	r2, r2, #24
 80040ea:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80040ee:	4313      	orrs	r3, r2
 80040f0:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80040f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80040f4:	f023 0301 	bic.w	r3, r3, #1
 80040f8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040fa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80040fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80040fe:	4011      	ands	r1, r2
 8004100:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8004104:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004106:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004108:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800410a:	f023 030c 	bic.w	r3, r3, #12
 800410e:	4313      	orrs	r3, r2
 8004110:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004112:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004114:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004116:	f023 0302 	bic.w	r3, r3, #2
 800411a:	4313      	orrs	r3, r2
 800411c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800411e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004124:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004126:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800412c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800412e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004134:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8004136:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800413e:	682b      	ldr	r3, [r5, #0]
 8004140:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004144:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004146:	f7fd fa33 	bl	80015b0 <HAL_GetTick>
 800414a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800414c:	e005      	b.n	800415a <HAL_RCC_OscConfig+0x446>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414e:	f7fd fa2f 	bl	80015b0 <HAL_GetTick>
 8004152:	1b00      	subs	r0, r0, r4
 8004154:	2802      	cmp	r0, #2
 8004156:	f63f af3c 	bhi.w	8003fd2 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800415a:	6833      	ldr	r3, [r6, #0]
 800415c:	019a      	lsls	r2, r3, #6
 800415e:	d5f6      	bpl.n	800414e <HAL_RCC_OscConfig+0x43a>
 8004160:	e68e      	b.n	8003e80 <HAL_RCC_OscConfig+0x16c>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004162:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004164:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004166:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004168:	f43f ae8b 	beq.w	8003e82 <HAL_RCC_OscConfig+0x16e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800416c:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004170:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004172:	428b      	cmp	r3, r1
 8004174:	f47f aed7 	bne.w	8003f26 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004178:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800417c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800417e:	429a      	cmp	r2, r3
 8004180:	f47f aed1 	bne.w	8003f26 <HAL_RCC_OscConfig+0x212>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004184:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004186:	f3c6 0208 	ubfx	r2, r6, #0, #9
 800418a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800418c:	429a      	cmp	r2, r3
 800418e:	f47f aeca 	bne.w	8003f26 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004192:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004194:	f3c6 2246 	ubfx	r2, r6, #9, #7
 8004198:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800419a:	429a      	cmp	r2, r3
 800419c:	f47f aec3 	bne.w	8003f26 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041a2:	f3c6 4206 	ubfx	r2, r6, #16, #7
 80041a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041a8:	429a      	cmp	r2, r3
 80041aa:	f47f aebc 	bne.w	8003f26 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80041ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041b0:	f3c6 6606 	ubfx	r6, r6, #24, #7
 80041b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041b6:	429e      	cmp	r6, r3
 80041b8:	f47f aeb5 	bne.w	8003f26 <HAL_RCC_OscConfig+0x212>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80041bc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80041be:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80041c0:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80041c4:	429a      	cmp	r2, r3
 80041c6:	f43f ae5b 	beq.w	8003e80 <HAL_RCC_OscConfig+0x16c>
          __HAL_RCC_PLLFRACN_DISABLE();
 80041ca:	4a1d      	ldr	r2, [pc, #116]	; (8004240 <HAL_RCC_OscConfig+0x52c>)
 80041cc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80041ce:	f023 0301 	bic.w	r3, r3, #1
 80041d2:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 80041d4:	f7fd f9ec 	bl	80015b0 <HAL_GetTick>
 80041d8:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80041da:	f7fd f9e9 	bl	80015b0 <HAL_GetTick>
 80041de:	42a8      	cmp	r0, r5
 80041e0:	d0fb      	beq.n	80041da <HAL_RCC_OscConfig+0x4c6>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80041e2:	4a17      	ldr	r2, [pc, #92]	; (8004240 <HAL_RCC_OscConfig+0x52c>)
  return HAL_OK;
 80041e4:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80041e6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80041e8:	4b17      	ldr	r3, [pc, #92]	; (8004248 <HAL_RCC_OscConfig+0x534>)
 80041ea:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80041ec:	4023      	ands	r3, r4
 80041ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80041f2:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 80041f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80041fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041fe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	e5aa      	b.n	8003d64 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800420e:	4d0c      	ldr	r5, [pc, #48]	; (8004240 <HAL_RCC_OscConfig+0x52c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004210:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004214:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	672b      	str	r3, [r5, #112]	; 0x70
 800421c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800421e:	f023 0304 	bic.w	r3, r3, #4
 8004222:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004224:	f7fd f9c4 	bl	80015b0 <HAL_GetTick>
 8004228:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800422a:	e005      	b.n	8004238 <HAL_RCC_OscConfig+0x524>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422c:	f7fd f9c0 	bl	80015b0 <HAL_GetTick>
 8004230:	1b80      	subs	r0, r0, r6
 8004232:	42b8      	cmp	r0, r7
 8004234:	f63f aecd 	bhi.w	8003fd2 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004238:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800423a:	0798      	lsls	r0, r3, #30
 800423c:	d4f6      	bmi.n	800422c <HAL_RCC_OscConfig+0x518>
 800423e:	e602      	b.n	8003e46 <HAL_RCC_OscConfig+0x132>
 8004240:	58024400 	.word	0x58024400
 8004244:	fffffc0c 	.word	0xfffffc0c
 8004248:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800424c:	4a06      	ldr	r2, [pc, #24]	; (8004268 <HAL_RCC_OscConfig+0x554>)
 800424e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004256:	e6ac      	b.n	8003fb2 <HAL_RCC_OscConfig+0x29e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004258:	f042 0204 	orr.w	r2, r2, #4
 800425c:	671a      	str	r2, [r3, #112]	; 0x70
 800425e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004260:	f042 0201 	orr.w	r2, r2, #1
 8004264:	671a      	str	r2, [r3, #112]	; 0x70
 8004266:	e6a4      	b.n	8003fb2 <HAL_RCC_OscConfig+0x29e>
 8004268:	58024400 	.word	0x58024400

0800426c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800426c:	4a47      	ldr	r2, [pc, #284]	; (800438c <HAL_RCC_GetSysClockFreq+0x120>)
 800426e:	6913      	ldr	r3, [r2, #16]
 8004270:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004274:	2b10      	cmp	r3, #16
 8004276:	d004      	beq.n	8004282 <HAL_RCC_GetSysClockFreq+0x16>
 8004278:	2b18      	cmp	r3, #24
 800427a:	d00d      	beq.n	8004298 <HAL_RCC_GetSysClockFreq+0x2c>
 800427c:	b11b      	cbz	r3, 8004286 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800427e:	4844      	ldr	r0, [pc, #272]	; (8004390 <HAL_RCC_GetSysClockFreq+0x124>)
 8004280:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004282:	4844      	ldr	r0, [pc, #272]	; (8004394 <HAL_RCC_GetSysClockFreq+0x128>)
 8004284:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004286:	6813      	ldr	r3, [r2, #0]
 8004288:	0699      	lsls	r1, r3, #26
 800428a:	d54a      	bpl.n	8004322 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800428c:	6813      	ldr	r3, [r2, #0]
 800428e:	4842      	ldr	r0, [pc, #264]	; (8004398 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004290:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004294:	40d8      	lsrs	r0, r3
 8004296:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004298:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 800429a:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800429c:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800429e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 80042a0:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80042a4:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80042a6:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80042aa:	d038      	beq.n	800431e <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80042ac:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80042b0:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042b4:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80042b8:	fb05 f101 	mul.w	r1, r5, r1
 80042bc:	2b01      	cmp	r3, #1
 80042be:	ee07 1a90 	vmov	s15, r1
 80042c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 80042c6:	d002      	beq.n	80042ce <HAL_RCC_GetSysClockFreq+0x62>
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d02c      	beq.n	8004326 <HAL_RCC_GetSysClockFreq+0xba>
 80042cc:	b393      	cbz	r3, 8004334 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042ce:	ee07 0a90 	vmov	s15, r0
 80042d2:	eddf 6a32 	vldr	s13, [pc, #200]	; 800439c <HAL_RCC_GetSysClockFreq+0x130>
 80042d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042da:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80042dc:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80042e0:	eddf 5a2f 	vldr	s11, [pc, #188]	; 80043a0 <HAL_RCC_GetSysClockFreq+0x134>
 80042e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e8:	ee06 3a90 	vmov	s13, r3
 80042ec:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80042f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80042f4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80042f8:	eee7 6a25 	vfma.f32	s13, s14, s11
 80042fc:	ee66 6a26 	vmul.f32	s13, s12, s13
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004300:	4b22      	ldr	r3, [pc, #136]	; (800438c <HAL_RCC_GetSysClockFreq+0x120>)
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004308:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800431a:	ee17 0a90 	vmov	r0, s15
}
 800431e:	bc30      	pop	{r4, r5}
 8004320:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004322:	481d      	ldr	r0, [pc, #116]	; (8004398 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8004324:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004326:	ee07 0a90 	vmov	s15, r0
 800432a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80043a4 <HAL_RCC_GetSysClockFreq+0x138>
 800432e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004332:	e7d2      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004334:	6813      	ldr	r3, [r2, #0]
 8004336:	069b      	lsls	r3, r3, #26
 8004338:	d520      	bpl.n	800437c <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800433a:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800433c:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004340:	4915      	ldr	r1, [pc, #84]	; (8004398 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004342:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004346:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004348:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800434c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004350:	ed9f 5a13 	vldr	s10, [pc, #76]	; 80043a0 <HAL_RCC_GetSysClockFreq+0x134>
 8004354:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004358:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800435a:	ee06 3a90 	vmov	s13, r3
 800435e:	ee05 1a90 	vmov	s11, r1
 8004362:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004366:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800436a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800436e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8004372:	eee7 6a05 	vfma.f32	s13, s14, s10
 8004376:	ee66 6a26 	vmul.f32	s13, s12, s13
 800437a:	e7c1      	b.n	8004300 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800437c:	ee07 0a90 	vmov	s15, r0
 8004380:	eddf 6a09 	vldr	s13, [pc, #36]	; 80043a8 <HAL_RCC_GetSysClockFreq+0x13c>
 8004384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004388:	e7a7      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x6e>
 800438a:	bf00      	nop
 800438c:	58024400 	.word	0x58024400
 8004390:	003d0900 	.word	0x003d0900
 8004394:	017d7840 	.word	0x017d7840
 8004398:	03d09000 	.word	0x03d09000
 800439c:	4a742400 	.word	0x4a742400
 80043a0:	39000000 	.word	0x39000000
 80043a4:	4bbebc20 	.word	0x4bbebc20
 80043a8:	4c742400 	.word	0x4c742400

080043ac <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80043ac:	2800      	cmp	r0, #0
 80043ae:	f000 810c 	beq.w	80045ca <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043b2:	4a8c      	ldr	r2, [pc, #560]	; (80045e4 <HAL_RCC_ClockConfig+0x238>)
 80043b4:	6813      	ldr	r3, [r2, #0]
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	428b      	cmp	r3, r1
{
 80043bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c0:	4604      	mov	r4, r0
 80043c2:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043c4:	d20c      	bcs.n	80043e0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c6:	6813      	ldr	r3, [r2, #0]
 80043c8:	f023 030f 	bic.w	r3, r3, #15
 80043cc:	430b      	orrs	r3, r1
 80043ce:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d0:	6813      	ldr	r3, [r2, #0]
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	428b      	cmp	r3, r1
 80043d8:	d002      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80043da:	2001      	movs	r0, #1
}
 80043dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	075f      	lsls	r7, r3, #29
 80043e4:	d50b      	bpl.n	80043fe <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80043e6:	4980      	ldr	r1, [pc, #512]	; (80045e8 <HAL_RCC_ClockConfig+0x23c>)
 80043e8:	6920      	ldr	r0, [r4, #16]
 80043ea:	698a      	ldr	r2, [r1, #24]
 80043ec:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80043f0:	4290      	cmp	r0, r2
 80043f2:	d904      	bls.n	80043fe <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043f4:	698a      	ldr	r2, [r1, #24]
 80043f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80043fa:	4302      	orrs	r2, r0
 80043fc:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043fe:	071e      	lsls	r6, r3, #28
 8004400:	d50b      	bpl.n	800441a <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004402:	4979      	ldr	r1, [pc, #484]	; (80045e8 <HAL_RCC_ClockConfig+0x23c>)
 8004404:	6960      	ldr	r0, [r4, #20]
 8004406:	69ca      	ldr	r2, [r1, #28]
 8004408:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800440c:	4290      	cmp	r0, r2
 800440e:	d904      	bls.n	800441a <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004410:	69ca      	ldr	r2, [r1, #28]
 8004412:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004416:	4302      	orrs	r2, r0
 8004418:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800441a:	06d8      	lsls	r0, r3, #27
 800441c:	d50b      	bpl.n	8004436 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800441e:	4972      	ldr	r1, [pc, #456]	; (80045e8 <HAL_RCC_ClockConfig+0x23c>)
 8004420:	69a0      	ldr	r0, [r4, #24]
 8004422:	69ca      	ldr	r2, [r1, #28]
 8004424:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004428:	4290      	cmp	r0, r2
 800442a:	d904      	bls.n	8004436 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800442c:	69ca      	ldr	r2, [r1, #28]
 800442e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004432:	4302      	orrs	r2, r0
 8004434:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004436:	0699      	lsls	r1, r3, #26
 8004438:	d50b      	bpl.n	8004452 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800443a:	496b      	ldr	r1, [pc, #428]	; (80045e8 <HAL_RCC_ClockConfig+0x23c>)
 800443c:	69e0      	ldr	r0, [r4, #28]
 800443e:	6a0a      	ldr	r2, [r1, #32]
 8004440:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004444:	4290      	cmp	r0, r2
 8004446:	d904      	bls.n	8004452 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004448:	6a0a      	ldr	r2, [r1, #32]
 800444a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800444e:	4302      	orrs	r2, r0
 8004450:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004452:	079a      	lsls	r2, r3, #30
 8004454:	f140 80ab 	bpl.w	80045ae <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004458:	4863      	ldr	r0, [pc, #396]	; (80045e8 <HAL_RCC_ClockConfig+0x23c>)
 800445a:	68e1      	ldr	r1, [r4, #12]
 800445c:	6982      	ldr	r2, [r0, #24]
 800445e:	f002 020f 	and.w	r2, r2, #15
 8004462:	4291      	cmp	r1, r2
 8004464:	d904      	bls.n	8004470 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004466:	6982      	ldr	r2, [r0, #24]
 8004468:	f022 020f 	bic.w	r2, r2, #15
 800446c:	430a      	orrs	r2, r1
 800446e:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004470:	07d8      	lsls	r0, r3, #31
 8004472:	d530      	bpl.n	80044d6 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004474:	4a5c      	ldr	r2, [pc, #368]	; (80045e8 <HAL_RCC_ClockConfig+0x23c>)
 8004476:	68a1      	ldr	r1, [r4, #8]
 8004478:	6993      	ldr	r3, [r2, #24]
 800447a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800447e:	430b      	orrs	r3, r1
 8004480:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004482:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004484:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004486:	2902      	cmp	r1, #2
 8004488:	f000 80a1 	beq.w	80045ce <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800448c:	2903      	cmp	r1, #3
 800448e:	f000 8098 	beq.w	80045c2 <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004492:	2901      	cmp	r1, #1
 8004494:	f000 80a1 	beq.w	80045da <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004498:	0758      	lsls	r0, r3, #29
 800449a:	d59e      	bpl.n	80043da <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800449c:	4e52      	ldr	r6, [pc, #328]	; (80045e8 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800449e:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044a2:	6933      	ldr	r3, [r6, #16]
 80044a4:	f023 0307 	bic.w	r3, r3, #7
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 80044ac:	f7fd f880 	bl	80015b0 <HAL_GetTick>
 80044b0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b2:	e005      	b.n	80044c0 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b4:	f7fd f87c 	bl	80015b0 <HAL_GetTick>
 80044b8:	1bc0      	subs	r0, r0, r7
 80044ba:	4540      	cmp	r0, r8
 80044bc:	f200 808b 	bhi.w	80045d6 <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c0:	6933      	ldr	r3, [r6, #16]
 80044c2:	6862      	ldr	r2, [r4, #4]
 80044c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044c8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80044cc:	d1f2      	bne.n	80044b4 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ce:	6823      	ldr	r3, [r4, #0]
 80044d0:	0799      	lsls	r1, r3, #30
 80044d2:	d506      	bpl.n	80044e2 <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044d4:	68e1      	ldr	r1, [r4, #12]
 80044d6:	4844      	ldr	r0, [pc, #272]	; (80045e8 <HAL_RCC_ClockConfig+0x23c>)
 80044d8:	6982      	ldr	r2, [r0, #24]
 80044da:	f002 020f 	and.w	r2, r2, #15
 80044de:	428a      	cmp	r2, r1
 80044e0:	d869      	bhi.n	80045b6 <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044e2:	4940      	ldr	r1, [pc, #256]	; (80045e4 <HAL_RCC_ClockConfig+0x238>)
 80044e4:	680a      	ldr	r2, [r1, #0]
 80044e6:	f002 020f 	and.w	r2, r2, #15
 80044ea:	42aa      	cmp	r2, r5
 80044ec:	d90a      	bls.n	8004504 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ee:	680a      	ldr	r2, [r1, #0]
 80044f0:	f022 020f 	bic.w	r2, r2, #15
 80044f4:	432a      	orrs	r2, r5
 80044f6:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f8:	680a      	ldr	r2, [r1, #0]
 80044fa:	f002 020f 	and.w	r2, r2, #15
 80044fe:	42aa      	cmp	r2, r5
 8004500:	f47f af6b 	bne.w	80043da <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004504:	075a      	lsls	r2, r3, #29
 8004506:	d50b      	bpl.n	8004520 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004508:	4937      	ldr	r1, [pc, #220]	; (80045e8 <HAL_RCC_ClockConfig+0x23c>)
 800450a:	6920      	ldr	r0, [r4, #16]
 800450c:	698a      	ldr	r2, [r1, #24]
 800450e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004512:	4290      	cmp	r0, r2
 8004514:	d204      	bcs.n	8004520 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004516:	698a      	ldr	r2, [r1, #24]
 8004518:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800451c:	4302      	orrs	r2, r0
 800451e:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004520:	071f      	lsls	r7, r3, #28
 8004522:	d50b      	bpl.n	800453c <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004524:	4930      	ldr	r1, [pc, #192]	; (80045e8 <HAL_RCC_ClockConfig+0x23c>)
 8004526:	6960      	ldr	r0, [r4, #20]
 8004528:	69ca      	ldr	r2, [r1, #28]
 800452a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800452e:	4290      	cmp	r0, r2
 8004530:	d204      	bcs.n	800453c <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004532:	69ca      	ldr	r2, [r1, #28]
 8004534:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004538:	4302      	orrs	r2, r0
 800453a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453c:	06de      	lsls	r6, r3, #27
 800453e:	d50b      	bpl.n	8004558 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004540:	4929      	ldr	r1, [pc, #164]	; (80045e8 <HAL_RCC_ClockConfig+0x23c>)
 8004542:	69a0      	ldr	r0, [r4, #24]
 8004544:	69ca      	ldr	r2, [r1, #28]
 8004546:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800454a:	4290      	cmp	r0, r2
 800454c:	d204      	bcs.n	8004558 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800454e:	69ca      	ldr	r2, [r1, #28]
 8004550:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004554:	4302      	orrs	r2, r0
 8004556:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004558:	069d      	lsls	r5, r3, #26
 800455a:	d50b      	bpl.n	8004574 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800455c:	4a22      	ldr	r2, [pc, #136]	; (80045e8 <HAL_RCC_ClockConfig+0x23c>)
 800455e:	69e1      	ldr	r1, [r4, #28]
 8004560:	6a13      	ldr	r3, [r2, #32]
 8004562:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004566:	4299      	cmp	r1, r3
 8004568:	d204      	bcs.n	8004574 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800456a:	6a13      	ldr	r3, [r2, #32]
 800456c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004570:	430b      	orrs	r3, r1
 8004572:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004574:	f7ff fe7a 	bl	800426c <HAL_RCC_GetSysClockFreq>
 8004578:	4a1b      	ldr	r2, [pc, #108]	; (80045e8 <HAL_RCC_ClockConfig+0x23c>)
 800457a:	4603      	mov	r3, r0
 800457c:	481b      	ldr	r0, [pc, #108]	; (80045ec <HAL_RCC_ClockConfig+0x240>)
 800457e:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004580:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004582:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8004586:	4d1a      	ldr	r5, [pc, #104]	; (80045f0 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004588:	f002 020f 	and.w	r2, r2, #15
 800458c:	4c19      	ldr	r4, [pc, #100]	; (80045f4 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800458e:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004590:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004592:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8004596:	4818      	ldr	r0, [pc, #96]	; (80045f8 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004598:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800459c:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800459e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80045a0:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045a2:	40d3      	lsrs	r3, r2
 80045a4:	6023      	str	r3, [r4, #0]
}
 80045a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80045aa:	f7fc bf9f 	b.w	80014ec <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ae:	07da      	lsls	r2, r3, #31
 80045b0:	f53f af60 	bmi.w	8004474 <HAL_RCC_ClockConfig+0xc8>
 80045b4:	e795      	b.n	80044e2 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b6:	6982      	ldr	r2, [r0, #24]
 80045b8:	f022 020f 	bic.w	r2, r2, #15
 80045bc:	4311      	orrs	r1, r2
 80045be:	6181      	str	r1, [r0, #24]
 80045c0:	e78f      	b.n	80044e2 <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045c2:	019f      	lsls	r7, r3, #6
 80045c4:	f53f af6a 	bmi.w	800449c <HAL_RCC_ClockConfig+0xf0>
 80045c8:	e707      	b.n	80043da <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80045ca:	2001      	movs	r0, #1
}
 80045cc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045ce:	039b      	lsls	r3, r3, #14
 80045d0:	f53f af64 	bmi.w	800449c <HAL_RCC_ClockConfig+0xf0>
 80045d4:	e701      	b.n	80043da <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80045d6:	2003      	movs	r0, #3
 80045d8:	e700      	b.n	80043dc <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045da:	05de      	lsls	r6, r3, #23
 80045dc:	f53f af5e 	bmi.w	800449c <HAL_RCC_ClockConfig+0xf0>
 80045e0:	e6fb      	b.n	80043da <HAL_RCC_ClockConfig+0x2e>
 80045e2:	bf00      	nop
 80045e4:	52002000 	.word	0x52002000
 80045e8:	58024400 	.word	0x58024400
 80045ec:	08008310 	.word	0x08008310
 80045f0:	24000004 	.word	0x24000004
 80045f4:	24000008 	.word	0x24000008
 80045f8:	24000010 	.word	0x24000010

080045fc <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045fc:	4a18      	ldr	r2, [pc, #96]	; (8004660 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045fe:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004600:	6913      	ldr	r3, [r2, #16]
 8004602:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004606:	2b10      	cmp	r3, #16
 8004608:	d01a      	beq.n	8004640 <HAL_RCC_GetHCLKFreq+0x44>
 800460a:	2b18      	cmp	r3, #24
 800460c:	d023      	beq.n	8004656 <HAL_RCC_GetHCLKFreq+0x5a>
 800460e:	b1cb      	cbz	r3, 8004644 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 8004610:	4814      	ldr	r0, [pc, #80]	; (8004664 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004612:	4b13      	ldr	r3, [pc, #76]	; (8004660 <HAL_RCC_GetHCLKFreq+0x64>)
 8004614:	4914      	ldr	r1, [pc, #80]	; (8004668 <HAL_RCC_GetHCLKFreq+0x6c>)
 8004616:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004618:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800461a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800461e:	4c13      	ldr	r4, [pc, #76]	; (800466c <HAL_RCC_GetHCLKFreq+0x70>)
 8004620:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004624:	4d12      	ldr	r5, [pc, #72]	; (8004670 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004626:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004628:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800462a:	f002 021f 	and.w	r2, r2, #31
 800462e:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004632:	f003 001f 	and.w	r0, r3, #31
 8004636:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800463a:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800463c:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800463e:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004640:	480c      	ldr	r0, [pc, #48]	; (8004674 <HAL_RCC_GetHCLKFreq+0x78>)
 8004642:	e7e6      	b.n	8004612 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004644:	6813      	ldr	r3, [r2, #0]
 8004646:	069b      	lsls	r3, r3, #26
 8004648:	d508      	bpl.n	800465c <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	480a      	ldr	r0, [pc, #40]	; (8004678 <HAL_RCC_GetHCLKFreq+0x7c>)
 800464e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004652:	40d0      	lsrs	r0, r2
 8004654:	e7dd      	b.n	8004612 <HAL_RCC_GetHCLKFreq+0x16>
 8004656:	f7ff fad9 	bl	8003c0c <HAL_RCC_GetSysClockFreq.part.0>
 800465a:	e7da      	b.n	8004612 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800465c:	4806      	ldr	r0, [pc, #24]	; (8004678 <HAL_RCC_GetHCLKFreq+0x7c>)
 800465e:	e7d8      	b.n	8004612 <HAL_RCC_GetHCLKFreq+0x16>
 8004660:	58024400 	.word	0x58024400
 8004664:	003d0900 	.word	0x003d0900
 8004668:	08008310 	.word	0x08008310
 800466c:	24000008 	.word	0x24000008
 8004670:	24000004 	.word	0x24000004
 8004674:	017d7840 	.word	0x017d7840
 8004678:	03d09000 	.word	0x03d09000

0800467c <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800467c:	4a1c      	ldr	r2, [pc, #112]	; (80046f0 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800467e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004680:	6913      	ldr	r3, [r2, #16]
 8004682:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004686:	2b10      	cmp	r3, #16
 8004688:	d021      	beq.n	80046ce <HAL_RCC_GetPCLK1Freq+0x52>
 800468a:	2b18      	cmp	r3, #24
 800468c:	d02b      	beq.n	80046e6 <HAL_RCC_GetPCLK1Freq+0x6a>
 800468e:	b303      	cbz	r3, 80046d2 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 8004690:	4818      	ldr	r0, [pc, #96]	; (80046f4 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004692:	4a17      	ldr	r2, [pc, #92]	; (80046f0 <HAL_RCC_GetPCLK1Freq+0x74>)
 8004694:	4918      	ldr	r1, [pc, #96]	; (80046f8 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8004696:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 8004698:	4d18      	ldr	r5, [pc, #96]	; (80046fc <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800469a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800469e:	4c18      	ldr	r4, [pc, #96]	; (8004700 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80046a0:	5ccb      	ldrb	r3, [r1, r3]
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046aa:	6990      	ldr	r0, [r2, #24]
 80046ac:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 80046b0:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046b2:	5c08      	ldrb	r0, [r1, r0]
 80046b4:	f000 001f 	and.w	r0, r0, #31
 80046b8:	40c3      	lsrs	r3, r0
 80046ba:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80046bc:	69d2      	ldr	r2, [r2, #28]
 80046be:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80046c2:	5c88      	ldrb	r0, [r1, r2]
 80046c4:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80046c8:	fa23 f000 	lsr.w	r0, r3, r0
 80046cc:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046ce:	480d      	ldr	r0, [pc, #52]	; (8004704 <HAL_RCC_GetPCLK1Freq+0x88>)
 80046d0:	e7df      	b.n	8004692 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046d2:	6813      	ldr	r3, [r2, #0]
 80046d4:	069b      	lsls	r3, r3, #26
 80046d6:	d509      	bpl.n	80046ec <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046d8:	6810      	ldr	r0, [r2, #0]
 80046da:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_RCC_GetPCLK1Freq+0x8c>)
 80046dc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80046e0:	fa23 f000 	lsr.w	r0, r3, r0
 80046e4:	e7d5      	b.n	8004692 <HAL_RCC_GetPCLK1Freq+0x16>
 80046e6:	f7ff fa91 	bl	8003c0c <HAL_RCC_GetSysClockFreq.part.0>
 80046ea:	e7d2      	b.n	8004692 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80046ec:	4806      	ldr	r0, [pc, #24]	; (8004708 <HAL_RCC_GetPCLK1Freq+0x8c>)
 80046ee:	e7d0      	b.n	8004692 <HAL_RCC_GetPCLK1Freq+0x16>
 80046f0:	58024400 	.word	0x58024400
 80046f4:	003d0900 	.word	0x003d0900
 80046f8:	08008310 	.word	0x08008310
 80046fc:	24000004 	.word	0x24000004
 8004700:	24000008 	.word	0x24000008
 8004704:	017d7840 	.word	0x017d7840
 8004708:	03d09000 	.word	0x03d09000

0800470c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800470e:	4c3a      	ldr	r4, [pc, #232]	; (80047f8 <RCCEx_PLL2_Config+0xec>)
 8004710:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	2b03      	cmp	r3, #3
 8004718:	d067      	beq.n	80047ea <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	4606      	mov	r6, r0
 800471e:	460f      	mov	r7, r1
 8004720:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004724:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004726:	f7fc ff43 	bl	80015b0 <HAL_GetTick>
 800472a:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800472c:	e004      	b.n	8004738 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800472e:	f7fc ff3f 	bl	80015b0 <HAL_GetTick>
 8004732:	1b43      	subs	r3, r0, r5
 8004734:	2b02      	cmp	r3, #2
 8004736:	d856      	bhi.n	80047e6 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	011a      	lsls	r2, r3, #4
 800473c:	d4f7      	bmi.n	800472e <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800473e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004740:	6832      	ldr	r2, [r6, #0]
 8004742:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004746:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800474a:	62a3      	str	r3, [r4, #40]	; 0x28
 800474c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004750:	3b01      	subs	r3, #1
 8004752:	3a01      	subs	r2, #1
 8004754:	025b      	lsls	r3, r3, #9
 8004756:	0412      	lsls	r2, r2, #16
 8004758:	b29b      	uxth	r3, r3
 800475a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800475e:	4313      	orrs	r3, r2
 8004760:	6872      	ldr	r2, [r6, #4]
 8004762:	3a01      	subs	r2, #1
 8004764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004768:	4313      	orrs	r3, r2
 800476a:	6932      	ldr	r2, [r6, #16]
 800476c:	3a01      	subs	r2, #1
 800476e:	0612      	lsls	r2, r2, #24
 8004770:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004774:	4313      	orrs	r3, r2
 8004776:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004778:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800477a:	6972      	ldr	r2, [r6, #20]
 800477c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004780:	4313      	orrs	r3, r2
 8004782:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004784:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004786:	69b3      	ldr	r3, [r6, #24]
 8004788:	f022 0220 	bic.w	r2, r2, #32
 800478c:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800478e:	4b1b      	ldr	r3, [pc, #108]	; (80047fc <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004790:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004792:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004794:	f022 0210 	bic.w	r2, r2, #16
 8004798:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800479a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800479c:	69f2      	ldr	r2, [r6, #28]
 800479e:	400b      	ands	r3, r1
 80047a0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80047a4:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80047a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80047a8:	f043 0310 	orr.w	r3, r3, #16
 80047ac:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80047ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80047b0:	b1ef      	cbz	r7, 80047ee <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80047b2:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80047b4:	bf0c      	ite	eq
 80047b6:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80047ba:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80047be:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80047c0:	4c0d      	ldr	r4, [pc, #52]	; (80047f8 <RCCEx_PLL2_Config+0xec>)
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047c8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ca:	f7fc fef1 	bl	80015b0 <HAL_GetTick>
 80047ce:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80047d0:	e004      	b.n	80047dc <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80047d2:	f7fc feed 	bl	80015b0 <HAL_GetTick>
 80047d6:	1b40      	subs	r0, r0, r5
 80047d8:	2802      	cmp	r0, #2
 80047da:	d804      	bhi.n	80047e6 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	d5f7      	bpl.n	80047d2 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 80047e2:	2000      	movs	r0, #0
}
 80047e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80047e6:	2003      	movs	r0, #3
}
 80047e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80047ea:	2001      	movs	r0, #1
}
 80047ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80047ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047f4:	e7e4      	b.n	80047c0 <RCCEx_PLL2_Config+0xb4>
 80047f6:	bf00      	nop
 80047f8:	58024400 	.word	0x58024400
 80047fc:	ffff0007 	.word	0xffff0007

08004800 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004802:	4c3a      	ldr	r4, [pc, #232]	; (80048ec <RCCEx_PLL3_Config+0xec>)
 8004804:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	2b03      	cmp	r3, #3
 800480c:	d067      	beq.n	80048de <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	4606      	mov	r6, r0
 8004812:	460f      	mov	r7, r1
 8004814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004818:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800481a:	f7fc fec9 	bl	80015b0 <HAL_GetTick>
 800481e:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004820:	e004      	b.n	800482c <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004822:	f7fc fec5 	bl	80015b0 <HAL_GetTick>
 8004826:	1b43      	subs	r3, r0, r5
 8004828:	2b02      	cmp	r3, #2
 800482a:	d856      	bhi.n	80048da <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	009a      	lsls	r2, r3, #2
 8004830:	d4f7      	bmi.n	8004822 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004832:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004834:	6832      	ldr	r2, [r6, #0]
 8004836:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800483a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800483e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004840:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004844:	3b01      	subs	r3, #1
 8004846:	3a01      	subs	r2, #1
 8004848:	025b      	lsls	r3, r3, #9
 800484a:	0412      	lsls	r2, r2, #16
 800484c:	b29b      	uxth	r3, r3
 800484e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004852:	4313      	orrs	r3, r2
 8004854:	6872      	ldr	r2, [r6, #4]
 8004856:	3a01      	subs	r2, #1
 8004858:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800485c:	4313      	orrs	r3, r2
 800485e:	6932      	ldr	r2, [r6, #16]
 8004860:	3a01      	subs	r2, #1
 8004862:	0612      	lsls	r2, r2, #24
 8004864:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004868:	4313      	orrs	r3, r2
 800486a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800486c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800486e:	6972      	ldr	r2, [r6, #20]
 8004870:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004874:	4313      	orrs	r3, r2
 8004876:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004878:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800487a:	69b3      	ldr	r3, [r6, #24]
 800487c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004880:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004882:	4b1b      	ldr	r3, [pc, #108]	; (80048f0 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004884:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004886:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800488c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800488e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004890:	69f2      	ldr	r2, [r6, #28]
 8004892:	400b      	ands	r3, r1
 8004894:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004898:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800489a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800489c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80048a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80048a4:	b1ef      	cbz	r7, 80048e2 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80048a6:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80048a8:	bf0c      	ite	eq
 80048aa:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80048ae:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80048b2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80048b4:	4c0d      	ldr	r4, [pc, #52]	; (80048ec <RCCEx_PLL3_Config+0xec>)
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048bc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048be:	f7fc fe77 	bl	80015b0 <HAL_GetTick>
 80048c2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048c4:	e004      	b.n	80048d0 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80048c6:	f7fc fe73 	bl	80015b0 <HAL_GetTick>
 80048ca:	1b40      	subs	r0, r0, r5
 80048cc:	2802      	cmp	r0, #2
 80048ce:	d804      	bhi.n	80048da <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	d5f7      	bpl.n	80048c6 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 80048d6:	2000      	movs	r0, #0
}
 80048d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80048da:	2003      	movs	r0, #3
}
 80048dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80048de:	2001      	movs	r0, #1
}
 80048e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80048e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048e8:	e7e4      	b.n	80048b4 <RCCEx_PLL3_Config+0xb4>
 80048ea:	bf00      	nop
 80048ec:	58024400 	.word	0x58024400
 80048f0:	ffff0007 	.word	0xffff0007

080048f4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80048f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048f8:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 80048fc:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048fe:	0118      	lsls	r0, r3, #4
 8004900:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8004904:	d51e      	bpl.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004906:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004908:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800490c:	f000 84f4 	beq.w	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004910:	d825      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004912:	2900      	cmp	r1, #0
 8004914:	f000 840f 	beq.w	8005136 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004918:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800491c:	d122      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x70>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800491e:	2102      	movs	r1, #2
 8004920:	f104 0008 	add.w	r0, r4, #8
 8004924:	f7ff fef2 	bl	800470c <RCCEx_PLL2_Config>
 8004928:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800492a:	2e00      	cmp	r6, #0
 800492c:	f040 8525 	bne.w	800537a <HAL_RCCEx_PeriphCLKConfig+0xa86>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004930:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004932:	e9d4 3200 	ldrd	r3, r2, [r4]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004936:	4d9e      	ldr	r5, [pc, #632]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004938:	2600      	movs	r6, #0
 800493a:	6d28      	ldr	r0, [r5, #80]	; 0x50
 800493c:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8004940:	4301      	orrs	r1, r0
 8004942:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004944:	05d9      	lsls	r1, r3, #23
 8004946:	d511      	bpl.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004948:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800494a:	2904      	cmp	r1, #4
 800494c:	f200 8578 	bhi.w	8005440 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8004950:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004954:	04e304dc 	.word	0x04e304dc
 8004958:	02e304ec 	.word	0x02e304ec
 800495c:	02e3      	.short	0x02e3
    switch (PeriphClkInit->SpdifrxClockSelection)
 800495e:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8004962:	d0e8      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x42>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004964:	05d9      	lsls	r1, r3, #23
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004966:	f04f 0601 	mov.w	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800496a:	d4ed      	bmi.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch (PeriphClkInit->Sai1ClockSelection)
 800496c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800496e:	055f      	lsls	r7, r3, #21
 8004970:	d521      	bpl.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004972:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8004976:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800497a:	f000 84f4 	beq.w	8005366 <HAL_RCCEx_PeriphCLKConfig+0xa72>
 800497e:	f200 80d6 	bhi.w	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8004982:	2900      	cmp	r1, #0
 8004984:	f000 83ea 	beq.w	800515c <HAL_RCCEx_PeriphCLKConfig+0x868>
 8004988:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800498c:	f040 80d9 	bne.w	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x24e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004990:	2100      	movs	r1, #0
 8004992:	f104 0008 	add.w	r0, r4, #8
 8004996:	f7ff feb9 	bl	800470c <RCCEx_PLL2_Config>
 800499a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800499c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80049a0:	2d00      	cmp	r5, #0
 80049a2:	f040 83b0 	bne.w	8005106 <HAL_RCCEx_PeriphCLKConfig+0x812>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80049a6:	4f82      	ldr	r7, [pc, #520]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049a8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 80049ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049ae:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 80049b2:	4301      	orrs	r1, r0
 80049b4:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80049b6:	0518      	lsls	r0, r3, #20
 80049b8:	d521      	bpl.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch (PeriphClkInit->Sai4BClockSelection)
 80049ba:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80049be:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80049c2:	f000 84bc 	beq.w	800533e <HAL_RCCEx_PeriphCLKConfig+0xa4a>
 80049c6:	f200 80bf 	bhi.w	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80049ca:	2900      	cmp	r1, #0
 80049cc:	f000 83ba 	beq.w	8005144 <HAL_RCCEx_PeriphCLKConfig+0x850>
 80049d0:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80049d4:	f040 80c2 	bne.w	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049d8:	2100      	movs	r1, #0
 80049da:	f104 0008 	add.w	r0, r4, #8
 80049de:	f7ff fe95 	bl	800470c <RCCEx_PLL2_Config>
 80049e2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80049e4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80049e8:	2d00      	cmp	r5, #0
 80049ea:	f040 8390 	bne.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80049ee:	4f70      	ldr	r7, [pc, #448]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049f0:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 80049f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049f6:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 80049fa:	4301      	orrs	r1, r0
 80049fc:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80049fe:	0199      	lsls	r1, r3, #6
 8004a00:	d518      	bpl.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x140>
    switch (PeriphClkInit->OspiClockSelection)
 8004a02:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004a04:	2920      	cmp	r1, #32
 8004a06:	f000 8445 	beq.w	8005294 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004a0a:	f200 80aa 	bhi.w	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004a0e:	b139      	cbz	r1, 8004a20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8004a10:	2910      	cmp	r1, #16
 8004a12:	f040 80a9 	bne.w	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x274>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a16:	4866      	ldr	r0, [pc, #408]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a18:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004a1a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004a1e:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8004a20:	2d00      	cmp	r5, #0
 8004a22:	f040 83a3 	bne.w	800516c <HAL_RCCEx_PeriphCLKConfig+0x878>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004a26:	4f62      	ldr	r7, [pc, #392]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a28:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004a2a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004a2c:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8004a30:	4301      	orrs	r1, r0
 8004a32:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a34:	04df      	lsls	r7, r3, #19
 8004a36:	d51f      	bpl.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004a38:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004a3a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004a3e:	f000 8488 	beq.w	8005352 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004a42:	f200 8094 	bhi.w	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8004a46:	2900      	cmp	r1, #0
 8004a48:	f000 8382 	beq.w	8005150 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 8004a4c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004a50:	f040 8095 	bne.w	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x28a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a54:	2100      	movs	r1, #0
 8004a56:	f104 0008 	add.w	r0, r4, #8
 8004a5a:	f7ff fe57 	bl	800470c <RCCEx_PLL2_Config>
 8004a5e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004a60:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004a64:	2d00      	cmp	r5, #0
 8004a66:	f040 8350 	bne.w	800510a <HAL_RCCEx_PeriphCLKConfig+0x816>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004a6a:	4f51      	ldr	r7, [pc, #324]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a6c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004a6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a70:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004a74:	4301      	orrs	r1, r0
 8004a76:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004a78:	0498      	lsls	r0, r3, #18
 8004a7a:	d51c      	bpl.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004a7c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004a7e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8004a82:	f000 83f1 	beq.w	8005268 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8004a86:	d87d      	bhi.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x290>
 8004a88:	b159      	cbz	r1, 8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004a8a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004a8e:	f040 8081 	bne.w	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a92:	2101      	movs	r1, #1
 8004a94:	f104 0008 	add.w	r0, r4, #8
 8004a98:	f7ff fe38 	bl	800470c <RCCEx_PLL2_Config>
 8004a9c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a9e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004aa2:	2d00      	cmp	r5, #0
 8004aa4:	f040 837f 	bne.w	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004aa8:	4f41      	ldr	r7, [pc, #260]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004aaa:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004aac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004aae:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8004ab2:	4301      	orrs	r1, r0
 8004ab4:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ab6:	0459      	lsls	r1, r3, #17
 8004ab8:	d51d      	bpl.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x202>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004aba:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004abe:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004ac2:	f000 83dc 	beq.w	800527e <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8004ac6:	d868      	bhi.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004ac8:	b151      	cbz	r1, 8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8004aca:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8004ace:	d16c      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	f104 0008 	add.w	r0, r4, #8
 8004ad6:	f7ff fe19 	bl	800470c <RCCEx_PLL2_Config>
 8004ada:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004adc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004ae0:	2d00      	cmp	r5, #0
 8004ae2:	f040 835e 	bne.w	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ae6:	4f32      	ldr	r7, [pc, #200]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ae8:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8004aec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004aee:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8004af2:	4301      	orrs	r1, r0
 8004af4:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004af6:	041f      	lsls	r7, r3, #16
 8004af8:	d50d      	bpl.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x222>
    switch (PeriphClkInit->FdcanClockSelection)
 8004afa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004afc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8004b00:	f000 8386 	beq.w	8005210 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 8004b04:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004b08:	f000 8227 	beq.w	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x666>
 8004b0c:	2900      	cmp	r1, #0
 8004b0e:	f000 822c 	beq.w	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004b12:	2601      	movs	r6, #1
 8004b14:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004b16:	01d8      	lsls	r0, r3, #7
 8004b18:	d558      	bpl.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    switch (PeriphClkInit->FmcClockSelection)
 8004b1a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004b1c:	2903      	cmp	r1, #3
 8004b1e:	f200 8492 	bhi.w	8005446 <HAL_RCCEx_PeriphCLKConfig+0xb52>
 8004b22:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004b26:	004f      	.short	0x004f
 8004b28:	0047037d 	.word	0x0047037d
 8004b2c:	004f      	.short	0x004f
    switch (PeriphClkInit->Sai4AClockSelection)
 8004b2e:	f421 1000 	bic.w	r0, r1, #2097152	; 0x200000
 8004b32:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004b36:	f43f af33 	beq.w	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004b3a:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 8004b3e:	f43f af2f 	beq.w	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004b42:	2601      	movs	r6, #1
 8004b44:	4635      	mov	r5, r6
 8004b46:	e736      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004b48:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 8004b4c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8004b50:	f43f af4a 	beq.w	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b54:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8004b58:	f43f af46 	beq.w	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b5c:	2601      	movs	r6, #1
 8004b5e:	4635      	mov	r5, r6
 8004b60:	e74d      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch (PeriphClkInit->OspiClockSelection)
 8004b62:	2930      	cmp	r1, #48	; 0x30
 8004b64:	f43f af5c 	beq.w	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8004b68:	2601      	movs	r6, #1
 8004b6a:	4635      	mov	r5, r6
 8004b6c:	e762      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x140>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004b6e:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8004b72:	f43f af77 	beq.w	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8004b76:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004b7a:	f43f af73 	beq.w	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8004b7e:	2601      	movs	r6, #1
 8004b80:	4635      	mov	r5, r6
 8004b82:	e779      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004b84:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 8004b88:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8004b8c:	d089      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004b8e:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8004b92:	d086      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004b94:	2601      	movs	r6, #1
 8004b96:	4635      	mov	r5, r6
 8004b98:	e78d      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004b9a:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8004b9e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004ba2:	d09d      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8004ba4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8004ba8:	d09a      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8004baa:	2601      	movs	r6, #1
 8004bac:	4635      	mov	r5, r6
 8004bae:	e7a2      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004bb0:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bb4:	2102      	movs	r1, #2
 8004bb6:	f104 0008 	add.w	r0, r4, #8
 8004bba:	f7ff fda7 	bl	800470c <RCCEx_PLL2_Config>
 8004bbe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bc0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004bc4:	2d00      	cmp	r5, #0
 8004bc6:	f000 82f0 	beq.w	80051aa <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 8004bca:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bcc:	0259      	lsls	r1, r3, #9
 8004bce:	f100 8200 	bmi.w	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004bd2:	07d9      	lsls	r1, r3, #31
 8004bd4:	d52f      	bpl.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x342>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004bd6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004bd8:	2928      	cmp	r1, #40	; 0x28
 8004bda:	d82a      	bhi.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004bdc:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004be0:	002901ee 	.word	0x002901ee
 8004be4:	00290029 	.word	0x00290029
 8004be8:	00290029 	.word	0x00290029
 8004bec:	00290029 	.word	0x00290029
 8004bf0:	002903e9 	.word	0x002903e9
 8004bf4:	00290029 	.word	0x00290029
 8004bf8:	00290029 	.word	0x00290029
 8004bfc:	00290029 	.word	0x00290029
 8004c00:	002901e6 	.word	0x002901e6
 8004c04:	00290029 	.word	0x00290029
 8004c08:	00290029 	.word	0x00290029
 8004c0c:	00290029 	.word	0x00290029
 8004c10:	002901ee 	.word	0x002901ee
 8004c14:	00290029 	.word	0x00290029
 8004c18:	00290029 	.word	0x00290029
 8004c1c:	00290029 	.word	0x00290029
 8004c20:	002901ee 	.word	0x002901ee
 8004c24:	00290029 	.word	0x00290029
 8004c28:	00290029 	.word	0x00290029
 8004c2c:	00290029 	.word	0x00290029
 8004c30:	01ee      	.short	0x01ee
 8004c32:	2601      	movs	r6, #1
 8004c34:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004c36:	079f      	lsls	r7, r3, #30
 8004c38:	d517      	bpl.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x376>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004c3a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004c3c:	2905      	cmp	r1, #5
 8004c3e:	f200 83fc 	bhi.w	800543a <HAL_RCCEx_PeriphCLKConfig+0xb46>
 8004c42:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004c46:	000e      	.short	0x000e
 8004c48:	000603aa 	.word	0x000603aa
 8004c4c:	000e000e 	.word	0x000e000e
 8004c50:	000e      	.short	0x000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c52:	2101      	movs	r1, #1
 8004c54:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004c58:	f7ff fdd2 	bl	8004800 <RCCEx_PLL3_Config>
 8004c5c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c5e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004c62:	2d00      	cmp	r5, #0
 8004c64:	f000 8293 	beq.w	800518e <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8004c68:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c6a:	0758      	lsls	r0, r3, #29
 8004c6c:	d518      	bpl.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004c6e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8004c72:	2905      	cmp	r1, #5
 8004c74:	f200 83de 	bhi.w	8005434 <HAL_RCCEx_PeriphCLKConfig+0xb40>
 8004c78:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004c7c:	0383000e 	.word	0x0383000e
 8004c80:	000e0006 	.word	0x000e0006
 8004c84:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c88:	2101      	movs	r1, #1
 8004c8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004c8e:	f7ff fdb7 	bl	8004800 <RCCEx_PLL3_Config>
 8004c92:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c94:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004c98:	2d00      	cmp	r5, #0
 8004c9a:	f000 826f 	beq.w	800517c <HAL_RCCEx_PeriphCLKConfig+0x888>
 8004c9e:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ca0:	0699      	lsls	r1, r3, #26
 8004ca2:	d51f      	bpl.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004ca4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004ca8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004cac:	f000 82ff 	beq.w	80052ae <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004cb0:	f200 8100 	bhi.w	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004cb4:	b159      	cbz	r1, 8004cce <HAL_RCCEx_PeriphCLKConfig+0x3da>
 8004cb6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8004cba:	f040 8105 	bne.w	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	f104 0008 	add.w	r0, r4, #8
 8004cc4:	f7ff fd22 	bl	800470c <RCCEx_PLL2_Config>
 8004cc8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004cca:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004cce:	2d00      	cmp	r5, #0
 8004cd0:	f040 8250 	bne.w	8005174 <HAL_RCCEx_PeriphCLKConfig+0x880>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cd4:	4faa      	ldr	r7, [pc, #680]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004cd6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8004cda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cdc:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8004ce0:	4301      	orrs	r1, r0
 8004ce2:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004ce4:	065f      	lsls	r7, r3, #25
 8004ce6:	d51f      	bpl.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x434>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004ce8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8004cec:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004cf0:	f000 82aa 	beq.w	8005248 <HAL_RCCEx_PeriphCLKConfig+0x954>
 8004cf4:	f200 80eb 	bhi.w	8004ece <HAL_RCCEx_PeriphCLKConfig+0x5da>
 8004cf8:	b159      	cbz	r1, 8004d12 <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8004cfa:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004cfe:	f040 80f0 	bne.w	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d02:	2100      	movs	r1, #0
 8004d04:	f104 0008 	add.w	r0, r4, #8
 8004d08:	f7ff fd00 	bl	800470c <RCCEx_PLL2_Config>
 8004d0c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004d0e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004d12:	2d00      	cmp	r5, #0
 8004d14:	f040 8243 	bne.w	800519e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d18:	4f99      	ldr	r7, [pc, #612]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004d1a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8004d1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d20:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 8004d24:	4301      	orrs	r1, r0
 8004d26:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004d28:	0618      	lsls	r0, r3, #24
 8004d2a:	d51f      	bpl.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004d2c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8004d30:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004d34:	f000 827d 	beq.w	8005232 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004d38:	f200 80d6 	bhi.w	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8004d3c:	b159      	cbz	r1, 8004d56 <HAL_RCCEx_PeriphCLKConfig+0x462>
 8004d3e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004d42:	f040 80db 	bne.w	8004efc <HAL_RCCEx_PeriphCLKConfig+0x608>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d46:	2100      	movs	r1, #0
 8004d48:	f104 0008 	add.w	r0, r4, #8
 8004d4c:	f7ff fcde 	bl	800470c <RCCEx_PLL2_Config>
 8004d50:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004d52:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004d56:	2d00      	cmp	r5, #0
 8004d58:	f040 820a 	bne.w	8005170 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004d5c:	4f88      	ldr	r7, [pc, #544]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004d5e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8004d62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d64:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8004d68:	4301      	orrs	r1, r0
 8004d6a:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004d6c:	0719      	lsls	r1, r3, #28
 8004d6e:	d50b      	bpl.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x494>
    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004d70:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004d74:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004d78:	f000 82b2 	beq.w	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004d7c:	4f80      	ldr	r7, [pc, #512]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004d7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d80:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004d84:	4301      	orrs	r1, r0
 8004d86:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d88:	06df      	lsls	r7, r3, #27
 8004d8a:	d50b      	bpl.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004d8c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8004d90:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8004d94:	f000 8297 	beq.w	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d98:	4f79      	ldr	r7, [pc, #484]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004d9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d9c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8004da0:	4301      	orrs	r1, r0
 8004da2:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004da4:	0318      	lsls	r0, r3, #12
 8004da6:	d50e      	bpl.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    switch (PeriphClkInit->AdcClockSelection)
 8004da8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8004dac:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004db0:	f000 80bf 	beq.w	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x63e>
 8004db4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8004db8:	f000 80c3 	beq.w	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004dbc:	2900      	cmp	r1, #0
 8004dbe:	f000 8213 	beq.w	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004dc2:	2601      	movs	r6, #1
 8004dc4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004dc6:	0359      	lsls	r1, r3, #13
 8004dc8:	d50f      	bpl.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
    switch (PeriphClkInit->UsbClockSelection)
 8004dca:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8004dce:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004dd2:	f000 80d7 	beq.w	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x690>
 8004dd6:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8004dda:	f000 80db 	beq.w	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8004dde:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004de2:	f000 820b 	beq.w	80051fc <HAL_RCCEx_PeriphCLKConfig+0x908>
 8004de6:	2601      	movs	r6, #1
 8004de8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004dea:	03df      	lsls	r7, r3, #15
 8004dec:	d509      	bpl.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    switch (PeriphClkInit->SdmmcClockSelection)
 8004dee:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004df0:	2900      	cmp	r1, #0
 8004df2:	f000 81f0 	beq.w	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004df6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004dfa:	f000 818a 	beq.w	8005112 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8004dfe:	2601      	movs	r6, #1
 8004e00:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e02:	0098      	lsls	r0, r3, #2
 8004e04:	f100 8165 	bmi.w	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x7de>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e08:	0399      	lsls	r1, r3, #14
 8004e0a:	d50b      	bpl.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x530>
    switch (PeriphClkInit->RngClockSelection)
 8004e0c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004e0e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004e12:	f000 81d8 	beq.w	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8004e16:	d974      	bls.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x60e>
 8004e18:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8004e1c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004e20:	d071      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004e22:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e24:	02df      	lsls	r7, r3, #11
 8004e26:	d506      	bpl.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x542>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e28:	4855      	ldr	r0, [pc, #340]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004e2a:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8004e2c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004e2e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004e32:	4329      	orrs	r1, r5
 8004e34:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e36:	029d      	lsls	r5, r3, #10
 8004e38:	d506      	bpl.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x554>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e3a:	4851      	ldr	r0, [pc, #324]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004e3c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8004e3e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004e40:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004e44:	4329      	orrs	r1, r5
 8004e46:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004e48:	0058      	lsls	r0, r3, #1
 8004e4a:	d509      	bpl.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e4c:	494c      	ldr	r1, [pc, #304]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004e4e:	6908      	ldr	r0, [r1, #16]
 8004e50:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8004e54:	6108      	str	r0, [r1, #16]
 8004e56:	6908      	ldr	r0, [r1, #16]
 8004e58:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8004e5c:	4328      	orrs	r0, r5
 8004e5e:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	da06      	bge.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004e64:	4846      	ldr	r0, [pc, #280]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004e66:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8004e68:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004e6a:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8004e6e:	4329      	orrs	r1, r5
 8004e70:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e72:	0219      	lsls	r1, r3, #8
 8004e74:	d507      	bpl.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x592>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e76:	4942      	ldr	r1, [pc, #264]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004e78:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004e7c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8004e7e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004e82:	4303      	orrs	r3, r0
 8004e84:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004e86:	07d3      	lsls	r3, r2, #31
 8004e88:	f100 80fe 	bmi.w	8005088 <HAL_RCCEx_PeriphCLKConfig+0x794>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e8c:	0797      	lsls	r7, r2, #30
 8004e8e:	f100 8108 	bmi.w	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004e92:	0755      	lsls	r5, r2, #29
 8004e94:	f100 8112 	bmi.w	80050bc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004e98:	0710      	lsls	r0, r2, #28
 8004e9a:	f100 80ea 	bmi.w	8005072 <HAL_RCCEx_PeriphCLKConfig+0x77e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004e9e:	06d1      	lsls	r1, r2, #27
 8004ea0:	f100 80d9 	bmi.w	8005056 <HAL_RCCEx_PeriphCLKConfig+0x762>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004ea4:	0692      	lsls	r2, r2, #26
 8004ea6:	f100 8120 	bmi.w	80050ea <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    return HAL_OK;
 8004eaa:	1e30      	subs	r0, r6, #0
 8004eac:	bf18      	it	ne
 8004eae:	2001      	movne	r0, #1
}
 8004eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004eb4:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8004eb8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004ebc:	f43f af07 	beq.w	8004cce <HAL_RCCEx_PeriphCLKConfig+0x3da>
 8004ec0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8004ec4:	f43f af03 	beq.w	8004cce <HAL_RCCEx_PeriphCLKConfig+0x3da>
 8004ec8:	2601      	movs	r6, #1
 8004eca:	4635      	mov	r5, r6
 8004ecc:	e70a      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004ece:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 8004ed2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004ed6:	f43f af1c 	beq.w	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8004eda:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8004ede:	f43f af18 	beq.w	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8004ee2:	2601      	movs	r6, #1
 8004ee4:	4635      	mov	r5, r6
 8004ee6:	e71f      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x434>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004ee8:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 8004eec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004ef0:	f43f af31 	beq.w	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x462>
 8004ef4:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 8004ef8:	f43f af2d 	beq.w	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x462>
 8004efc:	2601      	movs	r6, #1
 8004efe:	4635      	mov	r5, r6
 8004f00:	e734      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch (PeriphClkInit->RngClockSelection)
 8004f02:	2900      	cmp	r1, #0
 8004f04:	d18d      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if (ret == HAL_OK)
 8004f06:	2d00      	cmp	r5, #0
 8004f08:	f040 815b 	bne.w	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f0c:	4d1c      	ldr	r5, [pc, #112]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004f0e:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8004f10:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8004f14:	4301      	orrs	r1, r0
 8004f16:	6569      	str	r1, [r5, #84]	; 0x54
 8004f18:	e784      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x530>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004f1a:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8004f1c:	2d00      	cmp	r5, #0
 8004f1e:	f040 80f0 	bne.w	8005102 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f22:	4f17      	ldr	r7, [pc, #92]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f28:	f021 0107 	bic.w	r1, r1, #7
 8004f2c:	4301      	orrs	r1, r0
 8004f2e:	6539      	str	r1, [r7, #80]	; 0x50
 8004f30:	e51d      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f32:	2102      	movs	r1, #2
 8004f34:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004f38:	f7ff fc62 	bl	8004800 <RCCEx_PLL3_Config>
 8004f3c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f3e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004f42:	2d00      	cmp	r5, #0
 8004f44:	f040 8110 	bne.w	8005168 <HAL_RCCEx_PeriphCLKConfig+0x874>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f48:	4f0d      	ldr	r7, [pc, #52]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004f4a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8004f4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f50:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8004f54:	4301      	orrs	r1, r0
 8004f56:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f58:	e735      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	f104 0008 	add.w	r0, r4, #8
 8004f60:	f7ff fbd4 	bl	800470c <RCCEx_PLL2_Config>
 8004f64:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f66:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004f6a:	2d00      	cmp	r5, #0
 8004f6c:	f040 8127 	bne.w	80051be <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f70:	4f03      	ldr	r7, [pc, #12]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004f72:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004f74:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f76:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8004f7a:	4301      	orrs	r1, r0
 8004f7c:	6539      	str	r1, [r7, #80]	; 0x50
 8004f7e:	e5ca      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004f80:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f84:	2101      	movs	r1, #1
 8004f86:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004f8a:	f7ff fc39 	bl	8004800 <RCCEx_PLL3_Config>
 8004f8e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004f90:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004f94:	2d00      	cmp	r5, #0
 8004f96:	f040 8110 	bne.w	80051ba <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f9a:	4fb1      	ldr	r7, [pc, #708]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x96c>)
 8004f9c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004fa0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fa2:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8004fa6:	4301      	orrs	r1, r0
 8004fa8:	6579      	str	r1, [r7, #84]	; 0x54
 8004faa:	e71e      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fac:	2101      	movs	r1, #1
 8004fae:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004fb2:	f7ff fc25 	bl	8004800 <RCCEx_PLL3_Config>
 8004fb6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004fb8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004fbc:	2d00      	cmp	r5, #0
 8004fbe:	f040 80db 	bne.w	8005178 <HAL_RCCEx_PeriphCLKConfig+0x884>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004fc2:	4fa7      	ldr	r7, [pc, #668]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x96c>)
 8004fc4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004fc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fc8:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 8004fcc:	4301      	orrs	r1, r0
 8004fce:	6579      	str	r1, [r7, #84]	; 0x54
 8004fd0:	e631      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x342>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fd2:	4fa4      	ldr	r7, [pc, #656]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fda:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004fdc:	f7fc fae8 	bl	80015b0 <HAL_GetTick>
 8004fe0:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fe2:	e006      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe4:	f7fc fae4 	bl	80015b0 <HAL_GetTick>
 8004fe8:	eba0 0008 	sub.w	r0, r0, r8
 8004fec:	2864      	cmp	r0, #100	; 0x64
 8004fee:	f200 81ec 	bhi.w	80053ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	05db      	lsls	r3, r3, #23
 8004ff6:	d5f5      	bpl.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
    if (ret == HAL_OK)
 8004ff8:	2d00      	cmp	r5, #0
 8004ffa:	f040 8216 	bne.w	800542a <HAL_RCCEx_PeriphCLKConfig+0xb36>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ffe:	4a98      	ldr	r2, [pc, #608]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x96c>)
 8005000:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8005004:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005006:	4059      	eors	r1, r3
 8005008:	f411 7f40 	tst.w	r1, #768	; 0x300
 800500c:	d00b      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x732>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800500e:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8005010:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005012:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8005016:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800501a:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800501c:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800501e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8005022:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8005024:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800502a:	f000 81e0 	beq.w	80053ee <HAL_RCCEx_PeriphCLKConfig+0xafa>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800502e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005032:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005036:	f000 81ee 	beq.w	8005416 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800503a:	4989      	ldr	r1, [pc, #548]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x96c>)
 800503c:	690a      	ldr	r2, [r1, #16]
 800503e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8005042:	610a      	str	r2, [r1, #16]
 8005044:	4886      	ldr	r0, [pc, #536]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x96c>)
 8005046:	f3c3 010b 	ubfx	r1, r3, #0, #12
 800504a:	6f07      	ldr	r7, [r0, #112]	; 0x70
 800504c:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800504e:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005052:	6701      	str	r1, [r0, #112]	; 0x70
 8005054:	e5bd      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005056:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800505a:	2101      	movs	r1, #1
 800505c:	4628      	mov	r0, r5
 800505e:	f7ff fbcf 	bl	8004800 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8005062:	2800      	cmp	r0, #0
 8005064:	f000 80d2 	beq.w	800520c <HAL_RCCEx_PeriphCLKConfig+0x918>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005068:	6863      	ldr	r3, [r4, #4]
 800506a:	069b      	lsls	r3, r3, #26
 800506c:	d546      	bpl.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x808>
 800506e:	4606      	mov	r6, r0
 8005070:	e03d      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005072:	2100      	movs	r1, #0
 8005074:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005078:	f7ff fbc2 	bl	8004800 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800507c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800507e:	2800      	cmp	r0, #0
 8005080:	f43f af0d 	beq.w	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005084:	4606      	mov	r6, r0
 8005086:	e70a      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005088:	2100      	movs	r1, #0
 800508a:	f104 0008 	add.w	r0, r4, #8
 800508e:	f7ff fb3d 	bl	800470c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005092:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005094:	2800      	cmp	r0, #0
 8005096:	f43f aef9 	beq.w	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x598>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800509a:	0797      	lsls	r7, r2, #30
 800509c:	4606      	mov	r6, r0
 800509e:	f57f aef8 	bpl.w	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050a2:	2101      	movs	r1, #1
 80050a4:	f104 0008 	add.w	r0, r4, #8
 80050a8:	f7ff fb30 	bl	800470c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80050ac:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80050ae:	2800      	cmp	r0, #0
 80050b0:	f43f aeef 	beq.w	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80050b4:	0755      	lsls	r5, r2, #29
 80050b6:	4606      	mov	r6, r0
 80050b8:	f57f aeee 	bpl.w	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050bc:	2102      	movs	r1, #2
 80050be:	f104 0008 	add.w	r0, r4, #8
 80050c2:	f7ff fb23 	bl	800470c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80050c6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80050c8:	2800      	cmp	r0, #0
 80050ca:	f43f aee5 	beq.w	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80050ce:	4606      	mov	r6, r0
 80050d0:	e6e2      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80050d2:	2102      	movs	r1, #2
 80050d4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80050d8:	f7ff fb92 	bl	8004800 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80050dc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80050e0:	2800      	cmp	r0, #0
 80050e2:	f43f ae91 	beq.w	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x514>
      status = HAL_ERROR;
 80050e6:	2601      	movs	r6, #1
 80050e8:	e68e      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x514>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050ea:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050ee:	2102      	movs	r1, #2
 80050f0:	4628      	mov	r0, r5
 80050f2:	f7ff fb85 	bl	8004800 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80050f6:	2800      	cmp	r0, #0
 80050f8:	f43f aed7 	beq.w	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  return HAL_ERROR;
 80050fc:	2001      	movs	r0, #1
}
 80050fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005102:	462e      	mov	r6, r5
 8005104:	e433      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005106:	462e      	mov	r6, r5
 8005108:	e455      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 800510a:	462e      	mov	r6, r5
 800510c:	e4b4      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x184>
 800510e:	462e      	mov	r6, r5
 8005110:	e475      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x10a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005112:	2102      	movs	r1, #2
 8005114:	f104 0008 	add.w	r0, r4, #8
 8005118:	f7ff faf8 	bl	800470c <RCCEx_PLL2_Config>
 800511c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800511e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005122:	2d00      	cmp	r5, #0
 8005124:	d15e      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005126:	4f4e      	ldr	r7, [pc, #312]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x96c>)
 8005128:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800512a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800512c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005130:	4301      	orrs	r1, r0
 8005132:	64f9      	str	r1, [r7, #76]	; 0x4c
 8005134:	e665      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x50e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005136:	4d4a      	ldr	r5, [pc, #296]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x96c>)
 8005138:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800513a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800513e:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
 8005140:	f7ff bbf9 	b.w	8004936 <HAL_RCCEx_PeriphCLKConfig+0x42>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005144:	4846      	ldr	r0, [pc, #280]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x96c>)
 8005146:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005148:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800514c:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800514e:	e44b      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005150:	4843      	ldr	r0, [pc, #268]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x96c>)
 8005152:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005154:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005158:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800515a:	e483      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x170>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800515c:	4840      	ldr	r0, [pc, #256]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x96c>)
 800515e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005160:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005164:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8005166:	e41b      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005168:	462e      	mov	r6, r5
 800516a:	e62c      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800516c:	462e      	mov	r6, r5
 800516e:	e461      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8005170:	462e      	mov	r6, r5
 8005172:	e5fb      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005174:	462e      	mov	r6, r5
 8005176:	e5b5      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8005178:	462e      	mov	r6, r5
 800517a:	e55c      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x342>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800517c:	4f38      	ldr	r7, [pc, #224]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x96c>)
 800517e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8005182:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005184:	f021 0107 	bic.w	r1, r1, #7
 8005188:	4301      	orrs	r1, r0
 800518a:	65b9      	str	r1, [r7, #88]	; 0x58
 800518c:	e588      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800518e:	4f34      	ldr	r7, [pc, #208]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x96c>)
 8005190:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005192:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005194:	f021 0107 	bic.w	r1, r1, #7
 8005198:	4301      	orrs	r1, r0
 800519a:	6579      	str	r1, [r7, #84]	; 0x54
 800519c:	e565      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800519e:	462e      	mov	r6, r5
 80051a0:	e5c2      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80051a2:	462e      	mov	r6, r5
 80051a4:	e4a7      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80051a6:	462e      	mov	r6, r5
 80051a8:	e485      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80051aa:	4f2d      	ldr	r7, [pc, #180]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x96c>)
 80051ac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80051ae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80051b0:	f021 0103 	bic.w	r1, r1, #3
 80051b4:	4301      	orrs	r1, r0
 80051b6:	64f9      	str	r1, [r7, #76]	; 0x4c
 80051b8:	e508      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80051ba:	462e      	mov	r6, r5
 80051bc:	e615      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80051be:	462e      	mov	r6, r5
 80051c0:	e4a9      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80051c2:	462e      	mov	r6, r5
 80051c4:	e62e      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x530>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051c6:	4f26      	ldr	r7, [pc, #152]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x96c>)
 80051c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051ca:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80051ce:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
 80051d0:	2d00      	cmp	r5, #0
 80051d2:	d1f6      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 80051d4:	e69a      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x618>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051d6:	4822      	ldr	r0, [pc, #136]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x96c>)
 80051d8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80051da:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80051de:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 80051e0:	2d00      	cmp	r5, #0
 80051e2:	d0a0      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x832>
 80051e4:	462e      	mov	r6, r5
 80051e6:	e60c      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x50e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051e8:	f104 0008 	add.w	r0, r4, #8
 80051ec:	f7ff fa8e 	bl	800470c <RCCEx_PLL2_Config>
 80051f0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051f2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80051f6:	2d00      	cmp	r5, #0
 80051f8:	d1b6      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x874>
 80051fa:	e6a5      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x654>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051fc:	4818      	ldr	r0, [pc, #96]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x96c>)
 80051fe:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005200:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005204:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8005206:	2d00      	cmp	r5, #0
 8005208:	d1d7      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 800520a:	e6c6      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800520c:	6862      	ldr	r2, [r4, #4]
 800520e:	e649      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005210:	4813      	ldr	r0, [pc, #76]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x96c>)
 8005212:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005214:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005218:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800521a:	2d00      	cmp	r5, #0
 800521c:	d1cf      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 800521e:	e6a7      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x67c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005220:	480f      	ldr	r0, [pc, #60]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x96c>)
 8005222:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005224:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005228:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800522a:	2d00      	cmp	r5, #0
 800522c:	f47f accd 	bne.w	8004bca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8005230:	e7bb      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x8b6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005232:	2102      	movs	r1, #2
 8005234:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005238:	f7ff fae2 	bl	8004800 <RCCEx_PLL3_Config>
 800523c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800523e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005242:	2d00      	cmp	r5, #0
 8005244:	d194      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 8005246:	e589      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x468>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005248:	2102      	movs	r1, #2
 800524a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800524e:	f7ff fad7 	bl	8004800 <RCCEx_PLL3_Config>
 8005252:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005254:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005258:	2d00      	cmp	r5, #0
 800525a:	d1a0      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 800525c:	e55c      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800525e:	bf00      	nop
 8005260:	58024400 	.word	0x58024400
 8005264:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005268:	2101      	movs	r1, #1
 800526a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800526e:	f7ff fac7 	bl	8004800 <RCCEx_PLL3_Config>
 8005272:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005274:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005278:	2d00      	cmp	r5, #0
 800527a:	d194      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 800527c:	e414      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800527e:	2101      	movs	r1, #1
 8005280:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005284:	f7ff fabc 	bl	8004800 <RCCEx_PLL3_Config>
 8005288:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800528a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800528e:	2d00      	cmp	r5, #0
 8005290:	d187      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 8005292:	e428      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005294:	2102      	movs	r1, #2
 8005296:	f104 0008 	add.w	r0, r4, #8
 800529a:	f7ff fa37 	bl	800470c <RCCEx_PLL2_Config>
 800529e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80052a0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80052a4:	2d00      	cmp	r5, #0
 80052a6:	f47f af61 	bne.w	800516c <HAL_RCCEx_PeriphCLKConfig+0x878>
 80052aa:	f7ff bbbc 	b.w	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x132>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052ae:	2102      	movs	r1, #2
 80052b0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80052b4:	f7ff faa4 	bl	8004800 <RCCEx_PLL3_Config>
 80052b8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80052ba:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80052be:	2d00      	cmp	r5, #0
 80052c0:	f47f af58 	bne.w	8005174 <HAL_RCCEx_PeriphCLKConfig+0x880>
 80052c4:	e506      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80052c6:	2102      	movs	r1, #2
 80052c8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80052cc:	f7ff fa98 	bl	8004800 <RCCEx_PLL3_Config>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	f040 8086 	bne.w	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xaee>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052d6:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052da:	e9d4 3200 	ldrd	r3, r2, [r4]
 80052de:	e55b      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80052e0:	2102      	movs	r1, #2
 80052e2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80052e6:	f7ff fa8b 	bl	8004800 <RCCEx_PLL3_Config>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d173      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80052ee:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052f2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80052f6:	e541      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x488>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052f8:	2102      	movs	r1, #2
 80052fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80052fe:	f7ff fa7f 	bl	8004800 <RCCEx_PLL3_Config>
 8005302:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8005304:	2e00      	cmp	r6, #0
 8005306:	f43f ab13 	beq.w	8004930 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800530a:	e036      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xa86>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800530c:	4850      	ldr	r0, [pc, #320]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0xb5c>)
        break;
 800530e:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005310:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005312:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005316:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8005318:	e600      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x628>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800531a:	2100      	movs	r1, #0
 800531c:	f104 0008 	add.w	r0, r4, #8
 8005320:	f7ff f9f4 	bl	800470c <RCCEx_PLL2_Config>
 8005324:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005326:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800532a:	e5f7      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x628>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800532c:	2100      	movs	r1, #0
 800532e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005332:	f7ff fa65 	bl	8004800 <RCCEx_PLL3_Config>
 8005336:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005338:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800533c:	e5ee      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x628>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800533e:	2100      	movs	r1, #0
 8005340:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005344:	f7ff fa5c 	bl	8004800 <RCCEx_PLL3_Config>
 8005348:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800534a:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800534e:	f7ff bb4b 	b.w	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005352:	2100      	movs	r1, #0
 8005354:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005358:	f7ff fa52 	bl	8004800 <RCCEx_PLL3_Config>
 800535c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800535e:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8005362:	f7ff bb7f 	b.w	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x170>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005366:	2100      	movs	r1, #0
 8005368:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800536c:	f7ff fa48 	bl	8004800 <RCCEx_PLL3_Config>
 8005370:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005372:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8005376:	f7ff bb13 	b.w	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800537a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800537e:	f7ff bae1 	b.w	8004944 <HAL_RCCEx_PeriphCLKConfig+0x50>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005382:	2101      	movs	r1, #1
 8005384:	f104 0008 	add.w	r0, r4, #8
 8005388:	f7ff f9c0 	bl	800470c <RCCEx_PLL2_Config>
 800538c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800538e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005392:	2d00      	cmp	r5, #0
 8005394:	f47f ac83 	bne.w	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
 8005398:	e6f0      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x888>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800539a:	2101      	movs	r1, #1
 800539c:	f104 0008 	add.w	r0, r4, #8
 80053a0:	f7ff f9b4 	bl	800470c <RCCEx_PLL2_Config>
 80053a4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053a6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80053aa:	2d00      	cmp	r5, #0
 80053ac:	f47f ac5c 	bne.w	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80053b0:	e6ed      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x89a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053b2:	2101      	movs	r1, #1
 80053b4:	f104 0008 	add.w	r0, r4, #8
 80053b8:	f7ff f9a8 	bl	800470c <RCCEx_PLL2_Config>
 80053bc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80053be:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80053c2:	2d00      	cmp	r5, #0
 80053c4:	f47f aed8 	bne.w	8005178 <HAL_RCCEx_PeriphCLKConfig+0x884>
 80053c8:	e5fb      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
            ret = HAL_TIMEOUT;
 80053ca:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80053cc:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
 80053d0:	4635      	mov	r5, r6
 80053d2:	f7ff bbfe 	b.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80053d6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
        status = HAL_ERROR;
 80053da:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053dc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80053e0:	e4cc      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x488>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053e2:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
        status = HAL_ERROR;
 80053e6:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053e8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80053ec:	e4d4      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        tickstart = HAL_GetTick();
 80053ee:	f7fc f8df 	bl	80015b0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053f2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8005450 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        tickstart = HAL_GetTick();
 80053f6:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f8:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053fc:	e004      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xb14>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fe:	f7fc f8d7 	bl	80015b0 <HAL_GetTick>
 8005402:	1bc0      	subs	r0, r0, r7
 8005404:	4548      	cmp	r0, r9
 8005406:	d8e0      	bhi.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005408:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800540c:	0798      	lsls	r0, r3, #30
 800540e:	d5f6      	bpl.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005410:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8005414:	e60b      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005416:	480e      	ldr	r0, [pc, #56]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0xb5c>)
 8005418:	4a0e      	ldr	r2, [pc, #56]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xb60>)
 800541a:	6901      	ldr	r1, [r0, #16]
 800541c:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8005420:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8005424:	430a      	orrs	r2, r1
 8005426:	6102      	str	r2, [r0, #16]
 8005428:	e60c      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x750>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800542a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800542e:	462e      	mov	r6, r5
 8005430:	f7ff bbcf 	b.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005434:	2601      	movs	r6, #1
 8005436:	4635      	mov	r5, r6
 8005438:	e432      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800543a:	2601      	movs	r6, #1
 800543c:	4635      	mov	r5, r6
 800543e:	e414      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x376>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005440:	2601      	movs	r6, #1
 8005442:	f7ff ba93 	b.w	800496c <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch (PeriphClkInit->FmcClockSelection)
 8005446:	2601      	movs	r6, #1
 8005448:	4635      	mov	r5, r6
 800544a:	f7ff bbbf 	b.w	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800544e:	bf00      	nop
 8005450:	58024400 	.word	0x58024400
 8005454:	00ffffcf 	.word	0x00ffffcf

08005458 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005458:	4b4f      	ldr	r3, [pc, #316]	; (8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800545a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800545c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800545e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005460:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 8005462:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005466:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800546a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800546c:	d05c      	beq.n	8005528 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800546e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005472:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005476:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800547a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800547e:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005480:	ee07 4a90 	vmov	s15, r4
 8005484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8005488:	d003      	beq.n	8005492 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800548a:	2902      	cmp	r1, #2
 800548c:	d075      	beq.n	800557a <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800548e:	2900      	cmp	r1, #0
 8005490:	d04f      	beq.n	8005532 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005492:	ee07 2a90 	vmov	s15, r2
 8005496:	eddf 6a41 	vldr	s13, [pc, #260]	; 800559c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800549a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80054a4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80055a0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 80054a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ac:	ee06 3a90 	vmov	s13, r3
 80054b0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80054b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80054b8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80054bc:	eee7 6a25 	vfma.f32	s13, s14, s11
 80054c0:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80054c4:	4a34      	ldr	r2, [pc, #208]	; (8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 80054c6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80054ca:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80054cc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80054d0:	ee07 3a10 	vmov	s14, r3
 80054d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80054d8:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80054da:	ee37 7a06 	vadd.f32	s14, s14, s12
 80054de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054e6:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80054ea:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80054ec:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80054f0:	ee07 3a10 	vmov	s14, r3
 80054f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80054f8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80054fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005504:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005508:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800550a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800550e:	ee07 3a90 	vmov	s15, r3
 8005512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005516:	ee77 7a86 	vadd.f32	s15, s15, s12
 800551a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800551e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005522:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8005526:	4770      	bx	lr
 8005528:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800552a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800552e:	6082      	str	r2, [r0, #8]
}
 8005530:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005532:	6819      	ldr	r1, [r3, #0]
 8005534:	0689      	lsls	r1, r1, #26
 8005536:	d527      	bpl.n	8005588 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005538:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800553a:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800553e:	4919      	ldr	r1, [pc, #100]	; (80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005540:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005546:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800554a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800554e:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80055a0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8005552:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005556:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005558:	ee06 3a90 	vmov	s13, r3
 800555c:	ee05 1a90 	vmov	s11, r1
 8005560:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005564:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005568:	ee76 6a86 	vadd.f32	s13, s13, s12
 800556c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8005570:	eee7 6a05 	vfma.f32	s13, s14, s10
 8005574:	ee66 6a26 	vmul.f32	s13, s12, s13
 8005578:	e7a4      	b.n	80054c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800557a:	ee07 2a90 	vmov	s15, r2
 800557e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80055a8 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8005582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005586:	e78a      	b.n	800549e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005588:	ee07 2a90 	vmov	s15, r2
 800558c:	eddf 6a07 	vldr	s13, [pc, #28]	; 80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8005590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005594:	e783      	b.n	800549e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8005596:	bf00      	nop
 8005598:	58024400 	.word	0x58024400
 800559c:	4a742400 	.word	0x4a742400
 80055a0:	39000000 	.word	0x39000000
 80055a4:	03d09000 	.word	0x03d09000
 80055a8:	4bbebc20 	.word	0x4bbebc20
 80055ac:	4c742400 	.word	0x4c742400

080055b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055b0:	4b4f      	ldr	r3, [pc, #316]	; (80056f0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 80055b2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055b4:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80055b6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80055b8:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 80055ba:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80055be:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80055c2:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 80055c4:	d05c      	beq.n	8005680 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80055c6:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80055ca:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055ce:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80055d2:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 80055d6:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80055d8:	ee07 4a90 	vmov	s15, r4
 80055dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80055e0:	d003      	beq.n	80055ea <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 80055e2:	2902      	cmp	r1, #2
 80055e4:	d075      	beq.n	80056d2 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 80055e6:	2900      	cmp	r1, #0
 80055e8:	d04f      	beq.n	800568a <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055ea:	ee07 2a90 	vmov	s15, r2
 80055ee:	eddf 6a41 	vldr	s13, [pc, #260]	; 80056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80055f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80055fc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80056f8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8005600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005604:	ee06 3a90 	vmov	s13, r3
 8005608:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800560c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005610:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005614:	eee7 6a25 	vfma.f32	s13, s14, s11
 8005618:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800561c:	4a34      	ldr	r2, [pc, #208]	; (80056f0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800561e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005622:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005624:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005628:	ee07 3a10 	vmov	s14, r3
 800562c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005630:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005632:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800563a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800563e:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005642:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005644:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005648:	ee07 3a10 	vmov	s14, r3
 800564c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005650:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800565c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005660:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005662:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005666:	ee07 3a90 	vmov	s15, r3
 800566a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800566e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005676:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800567a:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800567e:	4770      	bx	lr
 8005680:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005682:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005686:	6082      	str	r2, [r0, #8]
}
 8005688:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800568a:	6819      	ldr	r1, [r3, #0]
 800568c:	0689      	lsls	r1, r1, #26
 800568e:	d527      	bpl.n	80056e0 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005690:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005692:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005696:	4919      	ldr	r1, [pc, #100]	; (80056fc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005698:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800569e:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056a6:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80056f8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80056aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056ae:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056b0:	ee06 3a90 	vmov	s13, r3
 80056b4:	ee05 1a90 	vmov	s11, r1
 80056b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80056bc:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80056c0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80056c4:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 80056c8:	eee7 6a05 	vfma.f32	s13, s14, s10
 80056cc:	ee66 6a26 	vmul.f32	s13, s12, s13
 80056d0:	e7a4      	b.n	800561c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056d2:	ee07 2a90 	vmov	s15, r2
 80056d6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8005700 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 80056da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056de:	e78a      	b.n	80055f6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056e0:	ee07 2a90 	vmov	s15, r2
 80056e4:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005704 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 80056e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056ec:	e783      	b.n	80055f6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 80056ee:	bf00      	nop
 80056f0:	58024400 	.word	0x58024400
 80056f4:	4a742400 	.word	0x4a742400
 80056f8:	39000000 	.word	0x39000000
 80056fc:	03d09000 	.word	0x03d09000
 8005700:	4bbebc20 	.word	0x4bbebc20
 8005704:	4c742400 	.word	0x4c742400

08005708 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005708:	4b4f      	ldr	r3, [pc, #316]	; (8005848 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 800570a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800570c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800570e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005710:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 8005712:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005716:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800571a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 800571c:	d05c      	beq.n	80057d8 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800571e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005722:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005726:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800572a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800572e:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005730:	ee07 4a90 	vmov	s15, r4
 8005734:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8005738:	d07e      	beq.n	8005838 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800573a:	2902      	cmp	r1, #2
 800573c:	d075      	beq.n	800582a <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 800573e:	2900      	cmp	r1, #0
 8005740:	d04f      	beq.n	80057e2 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005742:	ee07 2a90 	vmov	s15, r2
 8005746:	eddf 6a41 	vldr	s13, [pc, #260]	; 800584c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800574a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005750:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8005754:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005850 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8005758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800575c:	ee06 3a90 	vmov	s13, r3
 8005760:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8005764:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005768:	ee76 6a85 	vadd.f32	s13, s13, s10
 800576c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8005770:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005774:	4a34      	ldr	r2, [pc, #208]	; (8005848 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8005776:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800577a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800577c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005780:	ee07 3a10 	vmov	s14, r3
 8005784:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005788:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800578a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800578e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005796:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800579a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800579c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80057a0:	ee07 3a10 	vmov	s14, r3
 80057a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80057a8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80057ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057b4:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80057b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80057ba:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057c6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80057ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ce:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80057d2:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80057d6:	4770      	bx	lr
 80057d8:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80057da:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80057de:	6082      	str	r2, [r0, #8]
}
 80057e0:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057e2:	6819      	ldr	r1, [r3, #0]
 80057e4:	0689      	lsls	r1, r1, #26
 80057e6:	d5ac      	bpl.n	8005742 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057e8:	681c      	ldr	r4, [r3, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057ea:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057ee:	4919      	ldr	r1, [pc, #100]	; (8005854 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057f0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80057f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057f6:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057fe:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8005850 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8005802:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005806:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005808:	ee06 3a90 	vmov	s13, r3
 800580c:	ee05 1a90 	vmov	s11, r1
 8005810:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005814:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005818:	ee76 6a86 	vadd.f32	s13, s13, s12
 800581c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8005820:	eee7 6a05 	vfma.f32	s13, s14, s10
 8005824:	ee66 6a26 	vmul.f32	s13, s12, s13
 8005828:	e7a4      	b.n	8005774 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800582a:	ee07 2a90 	vmov	s15, r2
 800582e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8005858 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8005832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005836:	e78a      	b.n	800574e <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005838:	ee07 2a90 	vmov	s15, r2
 800583c:	eddf 6a07 	vldr	s13, [pc, #28]	; 800585c <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 8005840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005844:	e783      	b.n	800574e <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8005846:	bf00      	nop
 8005848:	58024400 	.word	0x58024400
 800584c:	4c742400 	.word	0x4c742400
 8005850:	39000000 	.word	0x39000000
 8005854:	03d09000 	.word	0x03d09000
 8005858:	4bbebc20 	.word	0x4bbebc20
 800585c:	4a742400 	.word	0x4a742400

08005860 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005860:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8005864:	430b      	orrs	r3, r1
{
 8005866:	b500      	push	{lr}
 8005868:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800586a:	d076      	beq.n	800595a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800586c:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8005870:	430b      	orrs	r3, r1
 8005872:	d035      	beq.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005874:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8005878:	430b      	orrs	r3, r1
 800587a:	f000 80ca 	beq.w	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800587e:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 8005882:	430b      	orrs	r3, r1
 8005884:	d07c      	beq.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005886:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 800588a:	430b      	orrs	r3, r1
 800588c:	f000 80d7 	beq.w	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005890:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8005894:	430b      	orrs	r3, r1
 8005896:	f000 8130 	beq.w	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800589a:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 800589e:	430b      	orrs	r3, r1
 80058a0:	f000 8144 	beq.w	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80058a4:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 80058a8:	430b      	orrs	r3, r1
 80058aa:	f000 8107 	beq.w	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80058ae:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 80058b2:	ea50 0301 	orrs.w	r3, r0, r1
 80058b6:	d13a      	bne.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80058b8:	4b97      	ldr	r3, [pc, #604]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80058ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 80058c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058c4:	f000 8082 	beq.w	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 80058c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058cc:	f000 815e 	beq.w	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 80058d0:	bb6b      	cbnz	r3, 800592e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80058d2:	4b91      	ldr	r3, [pc, #580]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80058d4:	6818      	ldr	r0, [r3, #0]
 80058d6:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80058da:	d03b      	beq.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          frequency = HSE_VALUE;
 80058dc:	488f      	ldr	r0, [pc, #572]	; (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80058de:	e039      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80058e0:	4a8d      	ldr	r2, [pc, #564]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80058e2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80058e4:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 80058e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058ec:	f000 808c 	beq.w	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80058f0:	d921      	bls.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80058f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80058f6:	d02c      	beq.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80058f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058fc:	d117      	bne.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80058fe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005900:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005902:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005906:	0749      	lsls	r1, r1, #29
 8005908:	d502      	bpl.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 80c9 	beq.w	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005910:	4a81      	ldr	r2, [pc, #516]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005912:	6812      	ldr	r2, [r2, #0]
 8005914:	05d0      	lsls	r0, r2, #23
 8005916:	d503      	bpl.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8005918:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800591c:	f000 80cc 	beq.w	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005920:	4a7d      	ldr	r2, [pc, #500]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005922:	6812      	ldr	r2, [r2, #0]
 8005924:	0391      	lsls	r1, r2, #14
 8005926:	d502      	bpl.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 8005928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800592c:	d0d6      	beq.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    switch (srcclk)
 800592e:	2000      	movs	r0, #0
}
 8005930:	b005      	add	sp, #20
 8005932:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8005936:	2b00      	cmp	r3, #0
 8005938:	d03f      	beq.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 800593a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800593e:	d1f6      	bne.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005940:	6810      	ldr	r0, [r2, #0]
 8005942:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005946:	d005      	beq.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005948:	a801      	add	r0, sp, #4
 800594a:	f7ff fd85 	bl	8005458 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800594e:	9801      	ldr	r0, [sp, #4]
 8005950:	e000      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005952:	4873      	ldr	r0, [pc, #460]	; (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 8005954:	b005      	add	sp, #20
 8005956:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800595a:	4b6f      	ldr	r3, [pc, #444]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800595c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595e:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8005962:	2b04      	cmp	r3, #4
 8005964:	d8e3      	bhi.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 8005966:	a201      	add	r2, pc, #4	; (adr r2, 800596c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	080059cd 	.word	0x080059cd
 8005970:	080059d9 	.word	0x080059d9
 8005974:	080059e9 	.word	0x080059e9
 8005978:	08005953 	.word	0x08005953
 800597c:	080059e5 	.word	0x080059e5
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005980:	4a65      	ldr	r2, [pc, #404]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005982:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005984:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 8005988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800598c:	d03c      	beq.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800598e:	d935      	bls.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8005990:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005994:	d0dd      	beq.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8005996:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800599a:	d1c8      	bne.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800599c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800599e:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80059a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059a4:	0752      	lsls	r2, r2, #29
 80059a6:	d5b3      	bpl.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1b1      	bne.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059ac:	4b5a      	ldr	r3, [pc, #360]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80059ae:	485d      	ldr	r0, [pc, #372]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80059b6:	40d8      	lsrs	r0, r3
 80059b8:	e7cc      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80059ba:	6810      	ldr	r0, [r2, #0]
 80059bc:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80059c0:	d0c8      	beq.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059c2:	a801      	add	r0, sp, #4
 80059c4:	f7ff fea0 	bl	8005708 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059c8:	9802      	ldr	r0, [sp, #8]
 80059ca:	e7c3      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80059cc:	4b52      	ldr	r3, [pc, #328]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80059ce:	6818      	ldr	r0, [r3, #0]
 80059d0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80059d4:	d0be      	beq.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80059d6:	e7f4      	b.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059d8:	4b4f      	ldr	r3, [pc, #316]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80059da:	6818      	ldr	r0, [r3, #0]
 80059dc:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80059e0:	d0b8      	beq.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80059e2:	e7b1      	b.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80059e4:	4a4c      	ldr	r2, [pc, #304]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80059e6:	e78a      	b.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059e8:	4b4b      	ldr	r3, [pc, #300]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80059f0:	d0b0      	beq.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059f2:	a801      	add	r0, sp, #4
 80059f4:	f7ff fddc 	bl	80055b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80059f8:	9801      	ldr	r0, [sp, #4]
 80059fa:	e7ab      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
    switch (srcclk)
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d0dc      	beq.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8005a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a04:	d09c      	beq.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005a06:	e792      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a08:	6810      	ldr	r0, [r2, #0]
 8005a0a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005a0e:	d0a1      	beq.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005a10:	e7ef      	b.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0x192>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005a12:	4a41      	ldr	r2, [pc, #260]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005a14:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005a16:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 8005a1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a1e:	d0f3      	beq.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8005a20:	d805      	bhi.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0c9      	beq.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8005a26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a2a:	d089      	beq.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005a2c:	e77f      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 8005a2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a32:	d08e      	beq.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8005a34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a38:	f43f af61 	beq.w	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8005a3c:	e777      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005a3e:	4a36      	ldr	r2, [pc, #216]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005a40:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005a42:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 8005a46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a4a:	d025      	beq.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8005a4c:	d80f      	bhi.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a52:	d048      	beq.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8005a54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a58:	d116      	bne.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a5a:	6810      	ldr	r0, [r2, #0]
 8005a5c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005a60:	f43f af78 	beq.w	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a64:	a801      	add	r0, sp, #4
 8005a66:	f7ff fda3 	bl	80055b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005a6a:	9802      	ldr	r0, [sp, #8]
 8005a6c:	e772      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
    switch (srcclk)
 8005a6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a72:	d01c      	beq.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
 8005a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a78:	f47f af59 	bne.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a7c:	6810      	ldr	r0, [r2, #0]
 8005a7e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8005a82:	f43f af67 	beq.w	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005a86:	e729      	b.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    switch (srcclk)
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f47f af50 	bne.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
}
 8005a8e:	b005      	add	sp, #20
 8005a90:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8005a94:	f7fe bdf2 	b.w	800467c <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a98:	6810      	ldr	r0, [r2, #0]
 8005a9a:	f010 0004 	ands.w	r0, r0, #4
 8005a9e:	f43f af59 	beq.w	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005aa2:	6813      	ldr	r3, [r2, #0]
 8005aa4:	481f      	ldr	r0, [pc, #124]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005aa6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005aaa:	40d8      	lsrs	r0, r3
 8005aac:	e752      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005aae:	6810      	ldr	r0, [r2, #0]
 8005ab0:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8005ab4:	f43f af4e 	beq.w	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          frequency = CSI_VALUE;
 8005ab8:	481b      	ldr	r0, [pc, #108]	; (8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005aba:	e74b      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005abc:	4a16      	ldr	r2, [pc, #88]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005abe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005ac0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 8005ac4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ac8:	d067      	beq.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8005aca:	d83e      	bhi.n	8005b4a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8005acc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ad0:	d05c      	beq.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8005ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ad6:	d140      	bne.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ad8:	4b0f      	ldr	r3, [pc, #60]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005ada:	6818      	ldr	r0, [r3, #0]
 8005adc:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005ae0:	f43f af38 	beq.w	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005ae4:	e7be      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ae6:	6810      	ldr	r0, [r2, #0]
 8005ae8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005aec:	f43f af32 	beq.w	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005af0:	a801      	add	r0, sp, #4
 8005af2:	f7ff fcb1 	bl	8005458 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005af6:	9802      	ldr	r0, [sp, #8]
 8005af8:	e72c      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005afa:	4a07      	ldr	r2, [pc, #28]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005afc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005afe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 8005b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b06:	d037      	beq.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8005b08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b0c:	f43f af46 	beq.w	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f47f af0c 	bne.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 8005b16:	e713      	b.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005b18:	58024400 	.word	0x58024400
 8005b1c:	017d7840 	.word	0x017d7840
 8005b20:	00bb8000 	.word	0x00bb8000
 8005b24:	03d09000 	.word	0x03d09000
 8005b28:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005b2c:	4b21      	ldr	r3, [pc, #132]	; (8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005b2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 8005b30:	03d2      	lsls	r2, r2, #15
 8005b32:	f57f af4c 	bpl.w	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b36:	6818      	ldr	r0, [r3, #0]
 8005b38:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005b3c:	f43f af0a 	beq.w	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b40:	a801      	add	r0, sp, #4
 8005b42:	f7ff fc89 	bl	8005458 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005b46:	9803      	ldr	r0, [sp, #12]
 8005b48:	e704      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
    switch (srcclk)
 8005b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4e:	d02a      	beq.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8005b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b54:	f43f aebd 	beq.w	80058d2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8005b58:	e6e9      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f47f aee7 	bne.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005b60:	f7fe fd4c 	bl	80045fc <HAL_RCC_GetHCLKFreq>
 8005b64:	4b13      	ldr	r3, [pc, #76]	; (8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005b66:	4a14      	ldr	r2, [pc, #80]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005b6e:	5cd3      	ldrb	r3, [r2, r3]
 8005b70:	f003 031f 	and.w	r3, r3, #31
 8005b74:	40d8      	lsrs	r0, r3
        break;
 8005b76:	e6ed      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b78:	6810      	ldr	r0, [r2, #0]
 8005b7a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005b7e:	f43f aee9 	beq.w	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b82:	a801      	add	r0, sp, #4
 8005b84:	f7ff fd14 	bl	80055b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005b88:	9803      	ldr	r0, [sp, #12]
 8005b8a:	e6e3      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b8c:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005b94:	f43f aede 	beq.w	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005b98:	e7aa      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b9a:	6810      	ldr	r0, [r2, #0]
 8005b9c:	f010 0004 	ands.w	r0, r0, #4
 8005ba0:	f43f aed8 	beq.w	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005ba4:	e702      	b.n	80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005ba6:	4b03      	ldr	r3, [pc, #12]	; (8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005ba8:	6818      	ldr	r0, [r3, #0]
 8005baa:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8005bae:	f43f aed1 	beq.w	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005bb2:	e781      	b.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8005bb4:	58024400 	.word	0x58024400
 8005bb8:	08008310 	.word	0x08008310

08005bbc <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	d05e      	beq.n	8005c7e <HAL_RNG_Init+0xc2>
{
 8005bc0:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005bc2:	7a43      	ldrb	r3, [r0, #9]
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d04d      	beq.n	8005c6a <HAL_RNG_Init+0xae>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 8005bce:	6823      	ldr	r3, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8005bd0:	2102      	movs	r1, #2

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8005bd2:	6860      	ldr	r0, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
 8005bd4:	7261      	strb	r1, [r4, #9]
  __HAL_RNG_DISABLE(hrng);
 8005bd6:	6819      	ldr	r1, [r3, #0]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8005bd8:	4a2a      	ldr	r2, [pc, #168]	; (8005c84 <HAL_RNG_Init+0xc8>)
  __HAL_RNG_DISABLE(hrng);
 8005bda:	f021 0104 	bic.w	r1, r1, #4
 8005bde:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8005be0:	6819      	ldr	r1, [r3, #0]
 8005be2:	400a      	ands	r2, r1

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8005be4:	4928      	ldr	r1, [pc, #160]	; (8005c88 <HAL_RNG_Init+0xcc>)
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8005be6:	4302      	orrs	r2, r0
 8005be8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005bec:	601a      	str	r2, [r3, #0]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8005bee:	f247 2274 	movw	r2, #29300	; 0x7274
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8005bf2:	6119      	str	r1, [r3, #16]
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8005bf4:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8005bfc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bfe:	f7fb fcd7 	bl	80015b0 <HAL_GetTick>

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8005c02:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005c04:	4605      	mov	r5, r0
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	0051      	lsls	r1, r2, #1
 8005c0a:	d50d      	bpl.n	8005c28 <HAL_RNG_Init+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005c0c:	f7fb fcd0 	bl	80015b0 <HAL_GetTick>
 8005c10:	1b40      	subs	r0, r0, r5
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8005c12:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005c14:	2802      	cmp	r0, #2
 8005c16:	d9f6      	bls.n	8005c06 <HAL_RNG_Init+0x4a>
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	0052      	lsls	r2, r2, #1
 8005c1c:	d5f3      	bpl.n	8005c06 <HAL_RNG_Init+0x4a>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8005c1e:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005c20:	2302      	movs	r3, #2
        hrng->State = HAL_RNG_STATE_READY;
 8005c22:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005c24:	60e3      	str	r3, [r4, #12]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8005c26:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_RNG_ENABLE(hrng);
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	f042 0204 	orr.w	r2, r2, #4
 8005c2e:	601a      	str	r2, [r3, #0]
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	0658      	lsls	r0, r3, #25
 8005c34:	d503      	bpl.n	8005c3e <HAL_RNG_Init+0x82>
    hrng->State = HAL_RNG_STATE_ERROR;
 8005c36:	2304      	movs	r3, #4
    return HAL_ERROR;
 8005c38:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 8005c3a:	7263      	strb	r3, [r4, #9]
}
 8005c3c:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 8005c3e:	f7fb fcb7 	bl	80015b0 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005c42:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005c44:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	0759      	lsls	r1, r3, #29
 8005c4a:	d512      	bpl.n	8005c72 <HAL_RNG_Init+0xb6>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005c4c:	f7fb fcb0 	bl	80015b0 <HAL_GetTick>
 8005c50:	1b40      	subs	r0, r0, r5
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005c52:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005c54:	2802      	cmp	r0, #2
 8005c56:	d9f6      	bls.n	8005c46 <HAL_RNG_Init+0x8a>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	0752      	lsls	r2, r2, #29
 8005c5c:	d5f3      	bpl.n	8005c46 <HAL_RNG_Init+0x8a>
        hrng->State = HAL_RNG_STATE_ERROR;
 8005c5e:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005c60:	2302      	movs	r3, #2
        return HAL_ERROR;
 8005c62:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
 8005c64:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005c66:	60e3      	str	r3, [r4, #12]
}
 8005c68:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 8005c6a:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8005c6c:	f7fb f9f2 	bl	8001054 <HAL_RNG_MspInit>
 8005c70:	e7ad      	b.n	8005bce <HAL_RNG_Init+0x12>
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005c72:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
 8005c74:	2201      	movs	r2, #1
  return HAL_OK;
 8005c76:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 8005c78:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005c7a:	60e3      	str	r3, [r4, #12]
}
 8005c7c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005c7e:	2001      	movs	r0, #1
}
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	bfffffdf 	.word	0xbfffffdf
 8005c88:	17590abc 	.word	0x17590abc

08005c8c <HAL_RNG_ErrorCallback>:
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop

08005c90 <RNG_RecoverSeedError>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
  __IO uint32_t count = 0U;
 8005c90:	2300      	movs	r3, #0

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 8005c92:	6802      	ldr	r2, [r0, #0]
{
 8005c94:	4601      	mov	r1, r0
 8005c96:	b510      	push	{r4, lr}
 8005c98:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8005c9a:	9301      	str	r3, [sp, #4]
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 8005c9c:	6853      	ldr	r3, [r2, #4]
 8005c9e:	075b      	lsls	r3, r3, #29
 8005ca0:	d40a      	bmi.n	8005cb8 <RNG_RecoverSeedError+0x28>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8005ca2:	6853      	ldr	r3, [r2, #4]
 8005ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ca8:	6053      	str	r3, [r2, #4]
        return HAL_ERROR;
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 8005caa:	68cb      	ldr	r3, [r1, #12]
  return HAL_OK;
 8005cac:	2000      	movs	r0, #0
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 8005cae:	f023 0308 	bic.w	r3, r3, #8
 8005cb2:	60cb      	str	r3, [r1, #12]
}
 8005cb4:	b002      	add	sp, #8
 8005cb6:	bd10      	pop	{r4, pc}
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8005cb8:	6813      	ldr	r3, [r2, #0]
    count = RNG_TIMEOUT_VALUE;
 8005cba:	2002      	movs	r0, #2
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8005cbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cc0:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8005cc2:	6813      	ldr	r3, [r2, #0]
 8005cc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cc8:	6013      	str	r3, [r2, #0]
    count = RNG_TIMEOUT_VALUE;
 8005cca:	9001      	str	r0, [sp, #4]
 8005ccc:	e002      	b.n	8005cd4 <RNG_RecoverSeedError+0x44>
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 8005cce:	6813      	ldr	r3, [r2, #0]
 8005cd0:	005c      	lsls	r4, r3, #1
 8005cd2:	d512      	bpl.n	8005cfa <RNG_RecoverSeedError+0x6a>
      count-- ;
 8005cd4:	9b01      	ldr	r3, [sp, #4]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 8005cda:	9b01      	ldr	r3, [sp, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1f6      	bne.n	8005cce <RNG_RecoverSeedError+0x3e>
        hrng->State = HAL_RNG_STATE_READY;
 8005ce0:	2401      	movs	r4, #1
        __HAL_UNLOCK(hrng);
 8005ce2:	720b      	strb	r3, [r1, #8]
        HAL_RNG_ErrorCallback(hrng);
 8005ce4:	4608      	mov	r0, r1
        hrng->State = HAL_RNG_STATE_READY;
 8005ce6:	724c      	strb	r4, [r1, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 8005ce8:	68cb      	ldr	r3, [r1, #12]
 8005cea:	f043 0302 	orr.w	r3, r3, #2
 8005cee:	60cb      	str	r3, [r1, #12]
        HAL_RNG_ErrorCallback(hrng);
 8005cf0:	f7ff ffcc 	bl	8005c8c <HAL_RNG_ErrorCallback>
        return HAL_ERROR;
 8005cf4:	4620      	mov	r0, r4
}
 8005cf6:	b002      	add	sp, #8
 8005cf8:	bd10      	pop	{r4, pc}
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005cfa:	6853      	ldr	r3, [r2, #4]
 8005cfc:	0658      	lsls	r0, r3, #25
 8005cfe:	d40c      	bmi.n	8005d1a <RNG_RecoverSeedError+0x8a>
    count = RNG_TIMEOUT_VALUE;
 8005d00:	2302      	movs	r3, #2
 8005d02:	9301      	str	r3, [sp, #4]
 8005d04:	e002      	b.n	8005d0c <RNG_RecoverSeedError+0x7c>
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 8005d06:	6853      	ldr	r3, [r2, #4]
 8005d08:	075b      	lsls	r3, r3, #29
 8005d0a:	d5ce      	bpl.n	8005caa <RNG_RecoverSeedError+0x1a>
      count-- ;
 8005d0c:	9b01      	ldr	r3, [sp, #4]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 8005d12:	9b01      	ldr	r3, [sp, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1f6      	bne.n	8005d06 <RNG_RecoverSeedError+0x76>
 8005d18:	e7e2      	b.n	8005ce0 <RNG_RecoverSeedError+0x50>
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8005d1a:	6853      	ldr	r3, [r2, #4]
 8005d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d20:	6053      	str	r3, [r2, #4]
 8005d22:	e7ed      	b.n	8005d00 <RNG_RecoverSeedError+0x70>

08005d24 <HAL_RNG_GenerateRandomNumber>:
{
 8005d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrng);
 8005d26:	7a03      	ldrb	r3, [r0, #8]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d041      	beq.n	8005db0 <HAL_RNG_GenerateRandomNumber+0x8c>
 8005d2c:	2501      	movs	r5, #1
  if (hrng->State == HAL_RNG_STATE_READY)
 8005d2e:	7a43      	ldrb	r3, [r0, #9]
 8005d30:	4604      	mov	r4, r0
 8005d32:	42ab      	cmp	r3, r5
  __HAL_LOCK(hrng);
 8005d34:	7205      	strb	r5, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 8005d36:	d005      	beq.n	8005d44 <HAL_RNG_GenerateRandomNumber+0x20>
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005d38:	2304      	movs	r3, #4
 8005d3a:	60c3      	str	r3, [r0, #12]
  __HAL_UNLOCK(hrng);
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	7223      	strb	r3, [r4, #8]
}
 8005d40:	4628      	mov	r0, r5
 8005d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8005d44:	2202      	movs	r2, #2
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005d46:	6803      	ldr	r3, [r0, #0]
 8005d48:	460f      	mov	r7, r1
    hrng->State = HAL_RNG_STATE_BUSY;
 8005d4a:	7242      	strb	r2, [r0, #9]
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005d4c:	685d      	ldr	r5, [r3, #4]
 8005d4e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8005d52:	d116      	bne.n	8005d82 <HAL_RNG_GenerateRandomNumber+0x5e>
    tickstart = HAL_GetTick();
 8005d54:	f7fb fc2c 	bl	80015b0 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005d58:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8005d5a:	4606      	mov	r6, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	07d0      	lsls	r0, r2, #31
 8005d60:	d417      	bmi.n	8005d92 <HAL_RNG_GenerateRandomNumber+0x6e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005d62:	f7fb fc25 	bl	80015b0 <HAL_GetTick>
 8005d66:	1b83      	subs	r3, r0, r6
 8005d68:	2b02      	cmp	r3, #2
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005d6a:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005d6c:	d9f6      	bls.n	8005d5c <HAL_RNG_GenerateRandomNumber+0x38>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	f012 0201 	ands.w	r2, r2, #1
 8005d74:	d1f2      	bne.n	8005d5c <HAL_RNG_GenerateRandomNumber+0x38>
          hrng->State = HAL_RNG_STATE_READY;
 8005d76:	2501      	movs	r5, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005d78:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
 8005d7a:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
 8005d7c:	7265      	strb	r5, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005d7e:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
 8005d80:	e7de      	b.n	8005d40 <HAL_RNG_GenerateRandomNumber+0x1c>
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8005d82:	2308      	movs	r3, #8
 8005d84:	60c3      	str	r3, [r0, #12]
      status = RNG_RecoverSeedError(hrng);
 8005d86:	f7ff ff83 	bl	8005c90 <RNG_RecoverSeedError>
      if (status == HAL_ERROR)
 8005d8a:	2801      	cmp	r0, #1
      status = RNG_RecoverSeedError(hrng);
 8005d8c:	4605      	mov	r5, r0
      if (status == HAL_ERROR)
 8005d8e:	d1e1      	bne.n	8005d54 <HAL_RNG_GenerateRandomNumber+0x30>
 8005d90:	e7d6      	b.n	8005d40 <HAL_RNG_GenerateRandomNumber+0x1c>
    hrng->RandomNumber = hrng->Instance->DR;
 8005d92:	689a      	ldr	r2, [r3, #8]
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005d94:	6859      	ldr	r1, [r3, #4]
    hrng->RandomNumber = hrng->Instance->DR;
 8005d96:	6122      	str	r2, [r4, #16]
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005d98:	0649      	lsls	r1, r1, #25
 8005d9a:	d50c      	bpl.n	8005db6 <HAL_RNG_GenerateRandomNumber+0x92>
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8005d9c:	2208      	movs	r2, #8
      status = HAL_ERROR;
 8005d9e:	2501      	movs	r5, #1
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8005da0:	60e2      	str	r2, [r4, #12]
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	f022 0201 	bic.w	r2, r2, #1
 8005da8:	605a      	str	r2, [r3, #4]
    hrng->State = HAL_RNG_STATE_READY;
 8005daa:	2301      	movs	r3, #1
 8005dac:	7263      	strb	r3, [r4, #9]
 8005dae:	e7c5      	b.n	8005d3c <HAL_RNG_GenerateRandomNumber+0x18>
  __HAL_LOCK(hrng);
 8005db0:	2502      	movs	r5, #2
}
 8005db2:	4628      	mov	r0, r5
 8005db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *random32bit = hrng->RandomNumber;
 8005db6:	603a      	str	r2, [r7, #0]
 8005db8:	e7f7      	b.n	8005daa <HAL_RNG_GenerateRandomNumber+0x86>
 8005dba:	bf00      	nop

08005dbc <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8005dbc:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005dbe:	492c      	ldr	r1, [pc, #176]	; (8005e70 <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 8005dc0:	695a      	ldr	r2, [r3, #20]
{
 8005dc2:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005dc4:	699c      	ldr	r4, [r3, #24]
 8005dc6:	f044 0408 	orr.w	r4, r4, #8
 8005dca:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005dcc:	699c      	ldr	r4, [r3, #24]
 8005dce:	f044 0410 	orr.w	r4, r4, #16
 8005dd2:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 8005dd4:	681c      	ldr	r4, [r3, #0]
 8005dd6:	f024 0401 	bic.w	r4, r4, #1
 8005dda:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005ddc:	691c      	ldr	r4, [r3, #16]
 8005dde:	4021      	ands	r1, r4
 8005de0:	6119      	str	r1, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005de2:	6899      	ldr	r1, [r3, #8]
 8005de4:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8005de8:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005dea:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 8005dee:	2904      	cmp	r1, #4
 8005df0:	d001      	beq.n	8005df6 <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005df2:	0691      	lsls	r1, r2, #26
 8005df4:	d430      	bmi.n	8005e58 <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005df6:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 8005dfa:	2903      	cmp	r1, #3
 8005dfc:	d001      	beq.n	8005e02 <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005dfe:	0654      	lsls	r4, r2, #25
 8005e00:	d41f      	bmi.n	8005e42 <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005e02:	0591      	lsls	r1, r2, #22
 8005e04:	d509      	bpl.n	8005e1a <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e06:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8005e0a:	f041 0101 	orr.w	r1, r1, #1
 8005e0e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e12:	6999      	ldr	r1, [r3, #24]
 8005e14:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005e18:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005e1a:	05d2      	lsls	r2, r2, #23
 8005e1c:	d509      	bpl.n	8005e32 <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e1e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8005e22:	f042 0208 	orr.w	r2, r2, #8
 8005e26:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e2a:	699a      	ldr	r2, [r3, #24]
 8005e2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e30:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005e32:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 8005e34:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 8005e38:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005e3c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8005e40:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e42:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8005e46:	f041 0104 	orr.w	r1, r1, #4
 8005e4a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e4e:	6999      	ldr	r1, [r3, #24]
 8005e50:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005e54:	6199      	str	r1, [r3, #24]
 8005e56:	e7d4      	b.n	8005e02 <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005e58:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8005e5c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005e60:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005e64:	6999      	ldr	r1, [r3, #24]
 8005e66:	f041 0120 	orr.w	r1, r1, #32
 8005e6a:	6199      	str	r1, [r3, #24]
 8005e6c:	e7c3      	b.n	8005df6 <SPI_CloseTransfer+0x3a>
 8005e6e:	bf00      	nop
 8005e70:	fffffc90 	.word	0xfffffc90

08005e74 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005e74:	2800      	cmp	r0, #0
 8005e76:	f000 80c9 	beq.w	800600c <HAL_SPI_Init+0x198>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005e7a:	4a66      	ldr	r2, [pc, #408]	; (8006014 <HAL_SPI_Init+0x1a0>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e7c:	2100      	movs	r1, #0
{
 8005e7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005e82:	6803      	ldr	r3, [r0, #0]
 8005e84:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e86:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d017      	beq.n	8005ebc <HAL_SPI_Init+0x48>
 8005e8c:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d013      	beq.n	8005ebc <HAL_SPI_Init+0x48>
 8005e94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	68c2      	ldr	r2, [r0, #12]
 8005e9c:	f000 80ae 	beq.w	8005ffc <HAL_SPI_Init+0x188>
 8005ea0:	2a0f      	cmp	r2, #15
 8005ea2:	d808      	bhi.n	8005eb6 <HAL_SPI_Init+0x42>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005ea4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005ea6:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005eaa:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8005eac:	08c9      	lsrs	r1, r1, #3

  return data_size * fifo_threashold;
 8005eae:	fb05 1101 	mla	r1, r5, r1, r1
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005eb2:	2908      	cmp	r1, #8
 8005eb4:	d916      	bls.n	8005ee4 <HAL_SPI_Init+0x70>
    return HAL_ERROR;
 8005eb6:	2001      	movs	r0, #1
}
 8005eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005ebc:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005ebe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8005ec0:	f102 0108 	add.w	r1, r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005ec4:	4e53      	ldr	r6, [pc, #332]	; (8006014 <HAL_SPI_Init+0x1a0>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005ec6:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8005ec8:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
 8005eca:	fb05 1101 	mla	r1, r5, r1, r1
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005ece:	4d52      	ldr	r5, [pc, #328]	; (8006018 <HAL_SPI_Init+0x1a4>)
 8005ed0:	42ab      	cmp	r3, r5
 8005ed2:	bf18      	it	ne
 8005ed4:	42b3      	cmpne	r3, r6
 8005ed6:	d003      	beq.n	8005ee0 <HAL_SPI_Init+0x6c>
 8005ed8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005edc:	42ab      	cmp	r3, r5
 8005ede:	d101      	bne.n	8005ee4 <HAL_SPI_Init+0x70>
 8005ee0:	2910      	cmp	r1, #16
 8005ee2:	d8e8      	bhi.n	8005eb6 <HAL_SPI_Init+0x42>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ee4:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
 8005ee8:	f001 05ff 	and.w	r5, r1, #255	; 0xff
 8005eec:	2900      	cmp	r1, #0
 8005eee:	d07a      	beq.n	8005fe6 <HAL_SPI_Init+0x172>
 8005ef0:	f04f 0800 	mov.w	r8, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 8005ef4:	2102      	movs	r1, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005ef6:	69a7      	ldr	r7, [r4, #24]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005ef8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
 8005efa:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005efe:	f1b7 6f80 	cmp.w	r7, #67108864	; 0x4000000
  __HAL_SPI_DISABLE(hspi);
 8005f02:	6819      	ldr	r1, [r3, #0]
 8005f04:	f021 0101 	bic.w	r1, r1, #1
 8005f08:	6019      	str	r1, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005f0a:	6899      	ldr	r1, [r3, #8]
 8005f0c:	f401 1cf8 	and.w	ip, r1, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005f10:	6861      	ldr	r1, [r4, #4]
 8005f12:	d058      	beq.n	8005fc6 <HAL_SPI_Init+0x152>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005f14:	f411 0980 	ands.w	r9, r1, #4194304	; 0x400000
 8005f18:	d001      	beq.n	8005f1e <HAL_SPI_Init+0xaa>
 8005f1a:	2a06      	cmp	r2, #6
 8005f1c:	d849      	bhi.n	8005fb2 <HAL_SPI_Init+0x13e>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005f1e:	f8d3 e000 	ldr.w	lr, [r3]
 8005f22:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
 8005f26:	f8c3 e000 	str.w	lr, [r3]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005f2a:	6b66      	ldr	r6, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005f2c:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005f30:	4337      	orrs	r7, r6
 8005f32:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005f34:	4337      	orrs	r7, r6
 8005f36:	6926      	ldr	r6, [r4, #16]
 8005f38:	4337      	orrs	r7, r6
 8005f3a:	6966      	ldr	r6, [r4, #20]
 8005f3c:	4337      	orrs	r7, r6
 8005f3e:	6a26      	ldr	r6, [r4, #32]
 8005f40:	4337      	orrs	r7, r6
 8005f42:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8005f44:	4337      	orrs	r7, r6
 8005f46:	68a6      	ldr	r6, [r4, #8]
 8005f48:	4337      	orrs	r7, r6
 8005f4a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8005f4c:	4337      	orrs	r7, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005f4e:	69e6      	ldr	r6, [r4, #28]
 8005f50:	4332      	orrs	r2, r6
 8005f52:	4310      	orrs	r0, r2
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005f54:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005f56:	433a      	orrs	r2, r7
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005f58:	ea40 000c 	orr.w	r0, r0, ip
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005f5c:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005f5e:	6098      	str	r0, [r3, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005f60:	4315      	orrs	r5, r2
 8005f62:	60dd      	str	r5, [r3, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005f64:	b9b9      	cbnz	r1, 8005f96 <HAL_SPI_Init+0x122>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8005f6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f70:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8005f78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f7c:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f80:	f022 0201 	bic.w	r2, r2, #1
 8005f84:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f86:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8005f88:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f8a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005f8e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8005f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f98:	f022 0201 	bic.w	r2, r2, #1
 8005f9c:	651a      	str	r2, [r3, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005f9e:	f1b9 0f00 	cmp.w	r9, #0
 8005fa2:	d0f0      	beq.n	8005f86 <HAL_SPI_Init+0x112>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005fa8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005fac:	430a      	orrs	r2, r1
 8005fae:	60da      	str	r2, [r3, #12]
 8005fb0:	e7e9      	b.n	8005f86 <HAL_SPI_Init+0x112>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005fb2:	f8d3 e000 	ldr.w	lr, [r3]
 8005fb6:	6d26      	ldr	r6, [r4, #80]	; 0x50
 8005fb8:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
 8005fbc:	ea4e 0e06 	orr.w	lr, lr, r6
 8005fc0:	f8c3 e000 	str.w	lr, [r3]
 8005fc4:	e7b1      	b.n	8005f2a <HAL_SPI_Init+0xb6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005fc6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8005fca:	d006      	beq.n	8005fda <HAL_SPI_Init+0x166>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005fcc:	2900      	cmp	r1, #0
 8005fce:	d1a1      	bne.n	8005f14 <HAL_SPI_Init+0xa0>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005fd0:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 8005fd4:	d002      	beq.n	8005fdc <HAL_SPI_Init+0x168>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005fd6:	4689      	mov	r9, r1
 8005fd8:	e7a1      	b.n	8005f1e <HAL_SPI_Init+0xaa>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005fda:	b9cd      	cbnz	r5, 8006010 <HAL_SPI_Init+0x19c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005fdc:	681e      	ldr	r6, [r3, #0]
 8005fde:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
 8005fe2:	601e      	str	r6, [r3, #0]
 8005fe4:	e796      	b.n	8005f14 <HAL_SPI_Init+0xa0>
    HAL_SPI_MspInit(hspi);
 8005fe6:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005fe8:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8005fec:	f7fb f860 	bl	80010b0 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8005ff0:	6823      	ldr	r3, [r4, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005ff2:	68e2      	ldr	r2, [r4, #12]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005ff4:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 8005ff8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005ffa:	e77b      	b.n	8005ef4 <HAL_SPI_Init+0x80>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005ffc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8005ffe:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006002:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8006004:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
 8006006:	fb05 1101 	mla	r1, r5, r1, r1
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800600a:	e769      	b.n	8005ee0 <HAL_SPI_Init+0x6c>
    return HAL_ERROR;
 800600c:	2001      	movs	r0, #1
}
 800600e:	4770      	bx	lr
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006010:	4689      	mov	r9, r1
 8006012:	e782      	b.n	8005f1a <HAL_SPI_Init+0xa6>
 8006014:	40013000 	.word	0x40013000
 8006018:	40003800 	.word	0x40003800

0800601c <HAL_SPI_Transmit_DMA>:
{
 800601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800601e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006022:	2b01      	cmp	r3, #1
 8006024:	f000 8092 	beq.w	800614c <HAL_SPI_Transmit_DMA+0x130>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006028:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800602c:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 800602e:	2201      	movs	r2, #1
 8006030:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006032:	b2de      	uxtb	r6, r3
 8006034:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
 8006036:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800603a:	d16b      	bne.n	8006114 <HAL_SPI_Transmit_DMA+0xf8>
  if ((pData == NULL) || (Size == 0UL))
 800603c:	2900      	cmp	r1, #0
 800603e:	d064      	beq.n	800610a <HAL_SPI_Transmit_DMA+0xee>
 8006040:	fab5 f385 	clz	r3, r5
 8006044:	095b      	lsrs	r3, r3, #5
 8006046:	2d00      	cmp	r5, #0
 8006048:	d05f      	beq.n	800610a <HAL_SPI_Transmit_DMA+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800604a:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = NULL;
 800604c:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t)0UL;
 800604e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006052:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006056:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->TxXferCount = Size;
 800605a:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800605e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    SPI_1LINE_TX(hspi);
 8006062:	6802      	ldr	r2, [r0, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006064:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8006066:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->RxISR       = NULL;
 800606a:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800606e:	6883      	ldr	r3, [r0, #8]
 8006070:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006074:	d065      	beq.n	8006142 <HAL_SPI_Transmit_DMA+0x126>
    SPI_2LINES_TX(hspi);
 8006076:	68d3      	ldr	r3, [r2, #12]
 8006078:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800607c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006080:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006082:	68e3      	ldr	r3, [r4, #12]
 8006084:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006086:	2b0f      	cmp	r3, #15
 8006088:	d94a      	bls.n	8006120 <HAL_SPI_Transmit_DMA+0x104>
 800608a:	6983      	ldr	r3, [r0, #24]
 800608c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006090:	d13b      	bne.n	800610a <HAL_SPI_Transmit_DMA+0xee>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006092:	4f3e      	ldr	r7, [pc, #248]	; (800618c <HAL_SPI_Transmit_DMA+0x170>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8006094:	3220      	adds	r2, #32
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006096:	f852 3c18 	ldr.w	r3, [r2, #-24]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800609a:	6407      	str	r7, [r0, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800609c:	4f3c      	ldr	r7, [pc, #240]	; (8006190 <HAL_SPI_Transmit_DMA+0x174>)
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800609e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80060a2:	63c7      	str	r7, [r0, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80060a4:	4f3b      	ldr	r7, [pc, #236]	; (8006194 <HAL_SPI_Transmit_DMA+0x178>)
 80060a6:	64c7      	str	r7, [r0, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 80060a8:	2700      	movs	r7, #0
 80060aa:	6507      	str	r7, [r0, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80060ac:	f842 3c18 	str.w	r3, [r2, #-24]
                                 hspi->TxXferCount))
 80060b0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	f7fc fe9f 	bl	8002df8 <HAL_DMA_Start_IT>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d149      	bne.n	8006152 <HAL_SPI_Transmit_DMA+0x136>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80060be:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80060c0:	4a35      	ldr	r2, [pc, #212]	; (8006198 <HAL_SPI_Transmit_DMA+0x17c>)
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	6859      	ldr	r1, [r3, #4]
 80060cc:	ea02 0201 	and.w	r2, r2, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80060d0:	bf18      	it	ne
 80060d2:	432a      	orrne	r2, r5
 80060d4:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80060d6:	689a      	ldr	r2, [r3, #8]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060d8:	6861      	ldr	r1, [r4, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80060da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060de:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80060e2:	609a      	str	r2, [r3, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80060e4:	691a      	ldr	r2, [r3, #16]
 80060e6:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 80060ea:	611a      	str	r2, [r3, #16]
  __HAL_SPI_ENABLE(hspi);
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	f042 0201 	orr.w	r2, r2, #1
 80060f2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060f4:	d103      	bne.n	80060fe <HAL_SPI_Transmit_DMA+0xe2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060fc:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80060fe:	2300      	movs	r3, #0
  return errorcode;
 8006100:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 8006102:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006106:	4630      	mov	r0, r6
 8006108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 800610a:	2300      	movs	r3, #0
 800610c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006110:	4630      	mov	r0, r6
 8006112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 8006114:	2300      	movs	r3, #0
    return errorcode;
 8006116:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 8006118:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800611c:	4630      	mov	r0, r6
 800611e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006120:	2b07      	cmp	r3, #7
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006122:	6983      	ldr	r3, [r0, #24]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006124:	d821      	bhi.n	800616a <HAL_SPI_Transmit_DMA+0x14e>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800612a:	d027      	beq.n	800617c <HAL_SPI_Transmit_DMA+0x160>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800612c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006130:	d1af      	bne.n	8006092 <HAL_SPI_Transmit_DMA+0x76>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8006132:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006136:	b29b      	uxth	r3, r3
 8006138:	3303      	adds	r3, #3
 800613a:	089b      	lsrs	r3, r3, #2
 800613c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8006140:	e7a7      	b.n	8006092 <HAL_SPI_Transmit_DMA+0x76>
    SPI_1LINE_TX(hspi);
 8006142:	6813      	ldr	r3, [r2, #0]
 8006144:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	e79a      	b.n	8006082 <HAL_SPI_Transmit_DMA+0x66>
  __HAL_LOCK(hspi);
 800614c:	2602      	movs	r6, #2
}
 800614e:	4630      	mov	r0, r6
 8006150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006152:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006156:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 8006158:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800615c:	f043 0310 	orr.w	r3, r3, #16
 8006160:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006164:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 8006168:	e7d2      	b.n	8006110 <HAL_SPI_Transmit_DMA+0xf4>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800616a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800616e:	d005      	beq.n	800617c <HAL_SPI_Transmit_DMA+0x160>
 8006170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006174:	d1c9      	bne.n	800610a <HAL_SPI_Transmit_DMA+0xee>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800617a:	d18a      	bne.n	8006092 <HAL_SPI_Transmit_DMA+0x76>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800617c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006180:	b29b      	uxth	r3, r3
 8006182:	3301      	adds	r3, #1
 8006184:	085b      	lsrs	r3, r3, #1
 8006186:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800618a:	e782      	b.n	8006092 <HAL_SPI_Transmit_DMA+0x76>
 800618c:	0800638d 	.word	0x0800638d
 8006190:	08006335 	.word	0x08006335
 8006194:	080063a9 	.word	0x080063a9
 8006198:	ffff0000 	.word	0xffff0000

0800619c <HAL_SPI_Receive_DMA>:
{
 800619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800619e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	f000 8096 	beq.w	80062d4 <HAL_SPI_Receive_DMA+0x138>
  if (hspi->State != HAL_SPI_STATE_READY)
 80061a8:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80061ac:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 80061ae:	2201      	movs	r2, #1
 80061b0:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80061b2:	b2de      	uxtb	r6, r3
 80061b4:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
 80061b6:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 80061ba:	d16a      	bne.n	8006292 <HAL_SPI_Receive_DMA+0xf6>
  if ((pData == NULL) || (Size == 0UL))
 80061bc:	2900      	cmp	r1, #0
 80061be:	d063      	beq.n	8006288 <HAL_SPI_Receive_DMA+0xec>
 80061c0:	fab5 f385 	clz	r3, r5
 80061c4:	095b      	lsrs	r3, r3, #5
 80061c6:	2d00      	cmp	r5, #0
 80061c8:	d05e      	beq.n	8006288 <HAL_SPI_Receive_DMA+0xec>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061ca:	2204      	movs	r2, #4
  hspi->TxXferSize  = (uint16_t) 0UL;
 80061cc:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80061d0:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061d2:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061d6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferCount = Size;
 80061da:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80061de:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferSize  = Size;
 80061e2:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxISR       = NULL;
 80061e6:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061ea:	6883      	ldr	r3, [r0, #8]
 80061ec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    SPI_1LINE_RX(hspi);
 80061f0:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061f2:	d06a      	beq.n	80062ca <HAL_SPI_Receive_DMA+0x12e>
    SPI_2LINES_RX(hspi);
 80061f4:	68da      	ldr	r2, [r3, #12]
 80061f6:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 80061fa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80061fe:	60da      	str	r2, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006200:	68e2      	ldr	r2, [r4, #12]
 8006202:	2a0f      	cmp	r2, #15
 8006204:	d94b      	bls.n	800629e <HAL_SPI_Receive_DMA+0x102>
 8006206:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006208:	6982      	ldr	r2, [r0, #24]
 800620a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800620e:	d13b      	bne.n	8006288 <HAL_SPI_Receive_DMA+0xec>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006210:	689a      	ldr	r2, [r3, #8]
 8006212:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006216:	609a      	str	r2, [r3, #8]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006218:	4f41      	ldr	r7, [pc, #260]	; (8006320 <HAL_SPI_Receive_DMA+0x184>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800621a:	460a      	mov	r2, r1
 800621c:	f103 0130 	add.w	r1, r3, #48	; 0x30
                                 hspi->RxXferCount))
 8006220:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006224:	6407      	str	r7, [r0, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006226:	4f3f      	ldr	r7, [pc, #252]	; (8006324 <HAL_SPI_Receive_DMA+0x188>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8006228:	b29b      	uxth	r3, r3
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800622a:	63c7      	str	r7, [r0, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800622c:	4f3e      	ldr	r7, [pc, #248]	; (8006328 <HAL_SPI_Receive_DMA+0x18c>)
 800622e:	64c7      	str	r7, [r0, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8006230:	2700      	movs	r7, #0
 8006232:	6507      	str	r7, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8006234:	f7fc fde0 	bl	8002df8 <HAL_DMA_Start_IT>
 8006238:	2800      	cmp	r0, #0
 800623a:	d14e      	bne.n	80062da <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800623c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800623e:	4a3b      	ldr	r2, [pc, #236]	; (800632c <HAL_SPI_Receive_DMA+0x190>)
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8006246:	6823      	ldr	r3, [r4, #0]
 8006248:	6859      	ldr	r1, [r3, #4]
 800624a:	ea02 0201 	and.w	r2, r2, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800624e:	bf18      	it	ne
 8006250:	432a      	orrne	r2, r5
 8006252:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006254:	689a      	ldr	r2, [r3, #8]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006256:	6861      	ldr	r1, [r4, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006258:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800625c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006260:	609a      	str	r2, [r3, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8006268:	611a      	str	r2, [r3, #16]
  __HAL_SPI_ENABLE(hspi);
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	f042 0201 	orr.w	r2, r2, #1
 8006270:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006272:	d103      	bne.n	800627c <HAL_SPI_Receive_DMA+0xe0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800627a:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800627c:	2300      	movs	r3, #0
  return errorcode;
 800627e:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 8006280:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006284:	4630      	mov	r0, r6
 8006286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 8006288:	2300      	movs	r3, #0
 800628a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800628e:	4630      	mov	r0, r6
 8006290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 8006292:	2300      	movs	r3, #0
    return errorcode;
 8006294:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 8006296:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800629a:	4630      	mov	r0, r6
 800629c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800629e:	2a07      	cmp	r2, #7
 80062a0:	d827      	bhi.n	80062f2 <HAL_SPI_Receive_DMA+0x156>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80062a2:	689a      	ldr	r2, [r3, #8]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062a4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80062a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062aa:	609a      	str	r2, [r3, #8]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062ac:	6982      	ldr	r2, [r0, #24]
 80062ae:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80062b2:	d02d      	beq.n	8006310 <HAL_SPI_Receive_DMA+0x174>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80062b4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80062b8:	d1ae      	bne.n	8006218 <HAL_SPI_Receive_DMA+0x7c>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80062ba:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80062be:	b292      	uxth	r2, r2
 80062c0:	3203      	adds	r2, #3
 80062c2:	0892      	lsrs	r2, r2, #2
 80062c4:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 80062c8:	e7a6      	b.n	8006218 <HAL_SPI_Receive_DMA+0x7c>
    SPI_1LINE_RX(hspi);
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	e795      	b.n	8006200 <HAL_SPI_Receive_DMA+0x64>
  __HAL_LOCK(hspi);
 80062d4:	2602      	movs	r6, #2
}
 80062d6:	4630      	mov	r0, r6
 80062d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80062da:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80062de:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 80062e0:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80062e4:	f043 0310 	orr.w	r3, r3, #16
 80062e8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80062ec:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 80062f0:	e7cd      	b.n	800628e <HAL_SPI_Receive_DMA+0xf2>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80062f2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80062f4:	6987      	ldr	r7, [r0, #24]
 80062f6:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 80062fa:	d002      	beq.n	8006302 <HAL_SPI_Receive_DMA+0x166>
 80062fc:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
 8006300:	d1c2      	bne.n	8006288 <HAL_SPI_Receive_DMA+0xec>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006302:	689a      	ldr	r2, [r3, #8]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006304:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006308:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800630c:	609a      	str	r2, [r3, #8]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800630e:	d183      	bne.n	8006218 <HAL_SPI_Receive_DMA+0x7c>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8006310:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006314:	b292      	uxth	r2, r2
 8006316:	3201      	adds	r2, #1
 8006318:	0852      	lsrs	r2, r2, #1
 800631a:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800631e:	e77b      	b.n	8006218 <HAL_SPI_Receive_DMA+0x7c>
 8006320:	08006399 	.word	0x08006399
 8006324:	0800635d 	.word	0x0800635d
 8006328:	080063a9 	.word	0x080063a9
 800632c:	ffff0000 	.word	0xffff0000

08006330 <HAL_SPI_TxCpltCallback>:
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop

08006334 <SPI_DMATransmitCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006334:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8006336:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8006338:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800633c:	2b07      	cmp	r3, #7
 800633e:	d009      	beq.n	8006354 <SPI_DMATransmitCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006340:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006348:	d005      	beq.n	8006356 <SPI_DMATransmitCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800634a:	6802      	ldr	r2, [r0, #0]
 800634c:	6913      	ldr	r3, [r2, #16]
 800634e:	f043 0308 	orr.w	r3, r3, #8
 8006352:	6113      	str	r3, [r2, #16]
}
 8006354:	bd08      	pop	{r3, pc}
      HAL_SPI_TxCpltCallback(hspi);
 8006356:	f7ff ffeb 	bl	8006330 <HAL_SPI_TxCpltCallback>
}
 800635a:	bd08      	pop	{r3, pc}

0800635c <SPI_DMAReceiveCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800635c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800635e:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8006360:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006364:	2b07      	cmp	r3, #7
 8006366:	d009      	beq.n	800637c <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006368:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006370:	d005      	beq.n	800637e <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8006372:	6802      	ldr	r2, [r0, #0]
 8006374:	6913      	ldr	r3, [r2, #16]
 8006376:	f043 0308 	orr.w	r3, r3, #8
 800637a:	6113      	str	r3, [r2, #16]
}
 800637c:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800637e:	f7fa fd5f 	bl	8000e40 <HAL_SPI_RxCpltCallback>
}
 8006382:	bd08      	pop	{r3, pc}

08006384 <HAL_SPI_TxRxCpltCallback>:
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop

08006388 <HAL_SPI_TxHalfCpltCallback>:
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop

0800638c <SPI_DMAHalfTransmitCplt>:
  HAL_SPI_TxHalfCpltCallback(hspi);
 800638c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800638e:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006390:	f7ff fffa 	bl	8006388 <HAL_SPI_TxHalfCpltCallback>
}
 8006394:	bd08      	pop	{r3, pc}
 8006396:	bf00      	nop

08006398 <SPI_DMAHalfReceiveCplt>:
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006398:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800639a:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800639c:	f7fa fd6e 	bl	8000e7c <HAL_SPI_RxHalfCpltCallback>
}
 80063a0:	bd08      	pop	{r3, pc}
 80063a2:	bf00      	nop

080063a4 <HAL_SPI_ErrorCallback>:
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop

080063a8 <SPI_DMAError>:
{
 80063a8:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063aa:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80063ac:	f7fd fad6 	bl	800395c <HAL_DMA_GetError>
 80063b0:	2802      	cmp	r0, #2
 80063b2:	d100      	bne.n	80063b6 <SPI_DMAError+0xe>
}
 80063b4:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 80063b6:	6823      	ldr	r3, [r4, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80063b8:	4930      	ldr	r1, [pc, #192]	; (800647c <SPI_DMAError+0xd4>)
  uint32_t itflag = hspi->Instance->SR;
 80063ba:	695a      	ldr	r2, [r3, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80063bc:	6998      	ldr	r0, [r3, #24]
 80063be:	f040 0008 	orr.w	r0, r0, #8
 80063c2:	6198      	str	r0, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80063c4:	6998      	ldr	r0, [r3, #24]
 80063c6:	f040 0010 	orr.w	r0, r0, #16
 80063ca:	6198      	str	r0, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	f020 0001 	bic.w	r0, r0, #1
 80063d2:	6018      	str	r0, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80063d4:	6918      	ldr	r0, [r3, #16]
 80063d6:	4001      	ands	r1, r0
 80063d8:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80063da:	6899      	ldr	r1, [r3, #8]
 80063dc:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 80063e0:	6099      	str	r1, [r3, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063e2:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
 80063e6:	2904      	cmp	r1, #4
 80063e8:	d001      	beq.n	80063ee <SPI_DMAError+0x46>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80063ea:	0691      	lsls	r1, r2, #26
 80063ec:	d43a      	bmi.n	8006464 <SPI_DMAError+0xbc>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80063ee:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
 80063f2:	2903      	cmp	r1, #3
 80063f4:	d001      	beq.n	80063fa <SPI_DMAError+0x52>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80063f6:	0650      	lsls	r0, r2, #25
 80063f8:	d429      	bmi.n	800644e <SPI_DMAError+0xa6>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80063fa:	0591      	lsls	r1, r2, #22
 80063fc:	d509      	bpl.n	8006412 <SPI_DMAError+0x6a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80063fe:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8006402:	f041 0101 	orr.w	r1, r1, #1
 8006406:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800640a:	6999      	ldr	r1, [r3, #24]
 800640c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006410:	6199      	str	r1, [r3, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006412:	05d2      	lsls	r2, r2, #23
 8006414:	d509      	bpl.n	800642a <SPI_DMAError+0x82>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006416:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800641a:	f042 0208 	orr.w	r2, r2, #8
 800641e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006422:	699a      	ldr	r2, [r3, #24]
 8006424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006428:	619a      	str	r2, [r3, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 800642a:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 800642c:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 800642e:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 8006430:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006434:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006438:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800643c:	f043 0310 	orr.w	r3, r3, #16
 8006440:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006444:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 8006448:	f7ff ffac 	bl	80063a4 <HAL_SPI_ErrorCallback>
}
 800644c:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800644e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8006452:	f041 0104 	orr.w	r1, r1, #4
 8006456:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800645a:	6999      	ldr	r1, [r3, #24]
 800645c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006460:	6199      	str	r1, [r3, #24]
 8006462:	e7ca      	b.n	80063fa <SPI_DMAError+0x52>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006464:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8006468:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800646c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006470:	6999      	ldr	r1, [r3, #24]
 8006472:	f041 0120 	orr.w	r1, r1, #32
 8006476:	6199      	str	r1, [r3, #24]
 8006478:	e7b9      	b.n	80063ee <SPI_DMAError+0x46>
 800647a:	bf00      	nop
 800647c:	fffffc90 	.word	0xfffffc90

08006480 <SPI_DMAAbortOnError>:
{
 8006480:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006482:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 8006484:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8006486:	2201      	movs	r2, #1
  hspi->RxXferCount = (uint16_t) 0UL;
 8006488:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800648c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8006490:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8006494:	f7ff ff86 	bl	80063a4 <HAL_SPI_ErrorCallback>
}
 8006498:	bd08      	pop	{r3, pc}
 800649a:	bf00      	nop

0800649c <HAL_SPI_SuspendCallback>:
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop

080064a0 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->IER;
 80064a0:	6803      	ldr	r3, [r0, #0]
 80064a2:	6919      	ldr	r1, [r3, #16]
  uint32_t itflag   = hspi->Instance->SR;
 80064a4:	695a      	ldr	r2, [r3, #20]
{
 80064a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t cfg1     = hspi->Instance->CFG1;
 80064aa:	689f      	ldr	r7, [r3, #8]
  uint32_t trigger  = itsource & itflag;
 80064ac:	ea01 0502 	and.w	r5, r1, r2
  HAL_SPI_StateTypeDef State = hspi->State;
 80064b0:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80064b4:	0512      	lsls	r2, r2, #20
{
 80064b6:	4604      	mov	r4, r0
  HAL_SPI_StateTypeDef State = hspi->State;
 80064b8:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80064ba:	d502      	bpl.n	80064c2 <HAL_SPI_IRQHandler+0x22>
 80064bc:	0709      	lsls	r1, r1, #28
 80064be:	f100 80d2 	bmi.w	8006666 <HAL_SPI_IRQHandler+0x1c6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80064c2:	f005 0264 	and.w	r2, r5, #100	; 0x64
 80064c6:	2a04      	cmp	r2, #4
 80064c8:	d03e      	beq.n	8006548 <HAL_SPI_IRQHandler+0xa8>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80064ca:	f005 0245 	and.w	r2, r5, #69	; 0x45
 80064ce:	2a01      	cmp	r2, #1
 80064d0:	d044      	beq.n	800655c <HAL_SPI_IRQHandler+0xbc>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80064d2:	f005 0226 	and.w	r2, r5, #38	; 0x26
 80064d6:	2a02      	cmp	r2, #2
 80064d8:	f000 80dc 	beq.w	8006694 <HAL_SPI_IRQHandler+0x1f4>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80064dc:	072a      	lsls	r2, r5, #28
 80064de:	d55c      	bpl.n	800659a <HAL_SPI_IRQHandler+0xfa>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80064e0:	699a      	ldr	r2, [r3, #24]
 80064e2:	f042 0208 	orr.w	r2, r2, #8
 80064e6:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80064e8:	699a      	ldr	r2, [r3, #24]
 80064ea:	f042 0210 	orr.w	r2, r2, #16
 80064ee:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80064f0:	699a      	ldr	r2, [r3, #24]
 80064f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064f6:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80064f8:	691a      	ldr	r2, [r3, #16]
 80064fa:	f022 0208 	bic.w	r2, r2, #8
 80064fe:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006500:	689a      	ldr	r2, [r3, #8]
 8006502:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8006506:	d133      	bne.n	8006570 <HAL_SPI_IRQHandler+0xd0>
      while (hspi->RxXferCount != 0UL)
 8006508:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800650c:	b292      	uxth	r2, r2
 800650e:	b37a      	cbz	r2, 8006570 <HAL_SPI_IRQHandler+0xd0>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006510:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006512:	e00e      	b.n	8006532 <HAL_SPI_IRQHandler+0x92>
 8006514:	6822      	ldr	r2, [r4, #0]
 8006516:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006518:	f841 2b04 	str.w	r2, [r1], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800651c:	6661      	str	r1, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800651e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006522:	3a01      	subs	r2, #1
 8006524:	b292      	uxth	r2, r2
 8006526:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800652a:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800652e:	b292      	uxth	r2, r2
 8006530:	b1f2      	cbz	r2, 8006570 <HAL_SPI_IRQHandler+0xd0>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006532:	68e2      	ldr	r2, [r4, #12]
 8006534:	2a0f      	cmp	r2, #15
 8006536:	d8ed      	bhi.n	8006514 <HAL_SPI_IRQHandler+0x74>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006538:	2a07      	cmp	r2, #7
 800653a:	f240 80a3 	bls.w	8006684 <HAL_SPI_IRQHandler+0x1e4>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800653e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8006540:	f821 2b02 	strh.w	r2, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006544:	6661      	str	r1, [r4, #100]	; 0x64
 8006546:	e7ea      	b.n	800651e <HAL_SPI_IRQHandler+0x7e>
    hspi->TxISR(hspi);
 8006548:	4620      	mov	r0, r4
 800654a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800654c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800654e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006550:	4620      	mov	r0, r4
 8006552:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006554:	f005 0345 	and.w	r3, r5, #69	; 0x45
 8006558:	2b01      	cmp	r3, #1
 800655a:	d102      	bne.n	8006562 <HAL_SPI_IRQHandler+0xc2>
    hspi->RxISR(hspi);
 800655c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800655e:	4620      	mov	r0, r4
 8006560:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006562:	f005 0526 	and.w	r5, r5, #38	; 0x26
 8006566:	2d02      	cmp	r5, #2
 8006568:	f000 8094 	beq.w	8006694 <HAL_SPI_IRQHandler+0x1f4>
}
 800656c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 8006570:	4620      	mov	r0, r4
 8006572:	f7ff fc23 	bl	8005dbc <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 8006576:	2301      	movs	r3, #1
 8006578:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800657c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006580:	2b00      	cmp	r3, #0
 8006582:	d17c      	bne.n	800667e <HAL_SPI_IRQHandler+0x1de>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006584:	2e05      	cmp	r6, #5
 8006586:	f000 808a 	beq.w	800669e <HAL_SPI_IRQHandler+0x1fe>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800658a:	2e04      	cmp	r6, #4
 800658c:	f000 808a 	beq.w	80066a4 <HAL_SPI_IRQHandler+0x204>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006590:	2e03      	cmp	r6, #3
 8006592:	d1eb      	bne.n	800656c <HAL_SPI_IRQHandler+0xcc>
      HAL_SPI_TxCpltCallback(hspi);
 8006594:	f7ff fecc 	bl	8006330 <HAL_SPI_TxCpltCallback>
 8006598:	e7e8      	b.n	800656c <HAL_SPI_IRQHandler+0xcc>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800659a:	f415 7f58 	tst.w	r5, #864	; 0x360
 800659e:	d0e5      	beq.n	800656c <HAL_SPI_IRQHandler+0xcc>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80065a0:	066e      	lsls	r6, r5, #25
 80065a2:	d509      	bpl.n	80065b8 <HAL_SPI_IRQHandler+0x118>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80065a4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80065a8:	f042 0204 	orr.w	r2, r2, #4
 80065ac:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065b0:	699a      	ldr	r2, [r3, #24]
 80065b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065b6:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80065b8:	05a8      	lsls	r0, r5, #22
 80065ba:	d509      	bpl.n	80065d0 <HAL_SPI_IRQHandler+0x130>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80065bc:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80065c0:	f042 0201 	orr.w	r2, r2, #1
 80065c4:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80065c8:	699a      	ldr	r2, [r3, #24]
 80065ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ce:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80065d0:	05e9      	lsls	r1, r5, #23
 80065d2:	d509      	bpl.n	80065e8 <HAL_SPI_IRQHandler+0x148>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80065d4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80065d8:	f042 0208 	orr.w	r2, r2, #8
 80065dc:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80065e0:	699a      	ldr	r2, [r3, #24]
 80065e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065e6:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80065e8:	06aa      	lsls	r2, r5, #26
 80065ea:	d509      	bpl.n	8006600 <HAL_SPI_IRQHandler+0x160>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80065ec:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80065f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065f4:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80065f8:	699a      	ldr	r2, [r3, #24]
 80065fa:	f042 0220 	orr.w	r2, r2, #32
 80065fe:	619a      	str	r2, [r3, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006600:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006604:	2a00      	cmp	r2, #0
 8006606:	d0b1      	beq.n	800656c <HAL_SPI_IRQHandler+0xcc>
      __HAL_SPI_DISABLE(hspi);
 8006608:	6819      	ldr	r1, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800660a:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800660e:	4a27      	ldr	r2, [pc, #156]	; (80066ac <HAL_SPI_IRQHandler+0x20c>)
      __HAL_SPI_DISABLE(hspi);
 8006610:	f021 0101 	bic.w	r1, r1, #1
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006614:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 8006618:	6019      	str	r1, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800661a:	6919      	ldr	r1, [r3, #16]
 800661c:	ea02 0201 	and.w	r2, r2, r1
 8006620:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006622:	d128      	bne.n	8006676 <HAL_SPI_IRQHandler+0x1d6>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006624:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 8006626:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006628:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800662c:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 800662e:	b150      	cbz	r0, 8006646 <HAL_SPI_IRQHandler+0x1a6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006630:	4b1f      	ldr	r3, [pc, #124]	; (80066b0 <HAL_SPI_IRQHandler+0x210>)
 8006632:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006634:	f7fc fd78 	bl	8003128 <HAL_DMA_Abort_IT>
 8006638:	b128      	cbz	r0, 8006646 <HAL_SPI_IRQHandler+0x1a6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800663a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800663e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006642:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 8006646:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006648:	2800      	cmp	r0, #0
 800664a:	d08f      	beq.n	800656c <HAL_SPI_IRQHandler+0xcc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800664c:	4b18      	ldr	r3, [pc, #96]	; (80066b0 <HAL_SPI_IRQHandler+0x210>)
 800664e:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006650:	f7fc fd6a 	bl	8003128 <HAL_DMA_Abort_IT>
 8006654:	2800      	cmp	r0, #0
 8006656:	d089      	beq.n	800656c <HAL_SPI_IRQHandler+0xcc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006658:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800665c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006660:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8006664:	e782      	b.n	800656c <HAL_SPI_IRQHandler+0xcc>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006666:	699a      	ldr	r2, [r3, #24]
 8006668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800666c:	619a      	str	r2, [r3, #24]
    HAL_SPI_SuspendCallback(hspi);
 800666e:	f7ff ff15 	bl	800649c <HAL_SPI_SuspendCallback>
}
 8006672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 8006676:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 8006678:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 800667a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800667e:	f7ff fe91 	bl	80063a4 <HAL_SPI_ErrorCallback>
 8006682:	e773      	b.n	800656c <HAL_SPI_IRQHandler+0xcc>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006684:	6822      	ldr	r2, [r4, #0]
 8006686:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800668a:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800668c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800668e:	3101      	adds	r1, #1
 8006690:	6661      	str	r1, [r4, #100]	; 0x64
 8006692:	e744      	b.n	800651e <HAL_SPI_IRQHandler+0x7e>
    hspi->TxISR(hspi);
 8006694:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006696:	4620      	mov	r0, r4
}
 8006698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 800669c:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 800669e:	f7ff fe71 	bl	8006384 <HAL_SPI_TxRxCpltCallback>
 80066a2:	e763      	b.n	800656c <HAL_SPI_IRQHandler+0xcc>
      HAL_SPI_RxCpltCallback(hspi);
 80066a4:	f7fa fbcc 	bl	8000e40 <HAL_SPI_RxCpltCallback>
 80066a8:	e760      	b.n	800656c <HAL_SPI_IRQHandler+0xcc>
 80066aa:	bf00      	nop
 80066ac:	fffffc94 	.word	0xfffffc94
 80066b0:	08006481 	.word	0x08006481

080066b4 <tThreshold_init>:
}



void tThreshold_init (tThreshold* const th, float low, float high, LEAF* const leaf)
{
 80066b4:	b538      	push	{r3, r4, r5, lr}
	tThreshold_initToPool(th, low, high, &leaf->mempool);
}

void tThreshold_initToPool (tThreshold* const th, float low, float high, tMempool* const mp)
{
    _tMempool* m = *mp;
 80066b6:	698d      	ldr	r5, [r1, #24]
{
 80066b8:	4604      	mov	r4, r0
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 80066ba:	2010      	movs	r0, #16
 80066bc:	4629      	mov	r1, r5
{
 80066be:	ed2d 8b02 	vpush	{d8}
 80066c2:	eeb0 8a40 	vmov.f32	s16, s0
 80066c6:	eef0 8a60 	vmov.f32	s17, s1
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 80066ca:	f000 fb3b 	bl	8006d44 <mpool_alloc>
    t->mempool = m;
    
    t->highThresh = high;
    t->lowThresh = low;

    t->currentValue = 0;
 80066ce:	2300      	movs	r3, #0
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 80066d0:	6020      	str	r0, [r4, #0]
    t->lowThresh = low;
 80066d2:	ed80 8a02 	vstr	s16, [r0, #8]
    t->highThresh = high;
 80066d6:	edc0 8a01 	vstr	s17, [r0, #4]
    t->mempool = m;
 80066da:	6005      	str	r5, [r0, #0]
    t->currentValue = 0;
 80066dc:	60c3      	str	r3, [r0, #12]
}
 80066de:	ecbd 8b02 	vpop	{d8}
 80066e2:	bd38      	pop	{r3, r4, r5, pc}

080066e4 <tThreshold_tick>:
    mpool_free((char*)t, t->mempool);
}

int tThreshold_tick(tThreshold* const th, float in)
{
    _tThreshold* t = *th;
 80066e4:	6803      	ldr	r3, [r0, #0]

    if (in >= t->highThresh)
 80066e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80066ea:	eef4 7ac0 	vcmpe.f32	s15, s0
 80066ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066f2:	d803      	bhi.n	80066fc <tThreshold_tick+0x18>
    {
    	t->currentValue = 1;
 80066f4:	2201      	movs	r2, #1
 80066f6:	4610      	mov	r0, r2
 80066f8:	60da      	str	r2, [r3, #12]
 80066fa:	4770      	bx	lr
    }
    else if (in <= t->lowThresh)
 80066fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8006700:	eef4 7ac0 	vcmpe.f32	s15, s0
 8006704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006708:	db03      	blt.n	8006712 <tThreshold_tick+0x2e>
	{
    	t->currentValue = 0;
 800670a:	2200      	movs	r2, #0
 800670c:	4610      	mov	r0, r2
 800670e:	60da      	str	r2, [r3, #12]
	}

    return t->currentValue;
}
 8006710:	4770      	bx	lr
    return t->currentValue;
 8006712:	68d8      	ldr	r0, [r3, #12]
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop

08006718 <tSlide_init>:

//tSlide is based on the max/msp slide~ object
////

void    tSlide_init          (tSlide* const sl, float upSlide, float downSlide, LEAF* const leaf)
{
 8006718:	b538      	push	{r3, r4, r5, lr}
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
    _tMempool* m = *mp;
 800671a:	698d      	ldr	r5, [r1, #24]
{
 800671c:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800671e:	201c      	movs	r0, #28
 8006720:	4629      	mov	r1, r5
{
 8006722:	ed2d 8b02 	vpush	{d8}
 8006726:	eef0 8a40 	vmov.f32	s17, s0
 800672a:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800672e:	f000 fb09 	bl	8006d44 <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 8006732:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 8006736:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8006738:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 800673a:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 800673c:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 8006740:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 8006744:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
 8006748:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 800674a:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 800674c:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 800674e:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 8006750:	ee87 7aa0 	vdiv.f32	s14, s15, s1
}
 8006754:	ecbd 8b02 	vpop	{d8}
    s->invUpSlide = 1.0f / upSlide;
 8006758:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 800675c:	ed80 7a05 	vstr	s14, [r0, #20]
}
 8006760:	bd38      	pop	{r3, r4, r5, pc}
 8006762:	bf00      	nop

08006764 <tSlide_tick>:
    return s->currentOut;
}

float tSlide_tick(tSlide* const sl, float in)
{
    _tSlide* s = *sl;
 8006764:	6803      	ldr	r3, [r0, #0]
{
 8006766:	eeb0 7a40 	vmov.f32	s14, s0


    if (in >= s->prevOut)
 800676a:	edd3 7a01 	vldr	s15, [r3, #4]
 800676e:	eef4 7ac0 	vcmpe.f32	s15, s0
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8006772:	ee30 6a67 	vsub.f32	s12, s0, s15
    if (in >= s->prevOut)
 8006776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 800677a:	bf94      	ite	ls
 800677c:	edd3 6a04 	vldrls	s13, [r3, #16]
    }
    else
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 8006780:	edd3 6a05 	vldrhi	s13, [r3, #20]
 8006784:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006788:	eeb0 0a67 	vmov.f32	s0, s15
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 800678c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80067c0 <tSlide_tick+0x5c>
 8006790:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006798:	d406      	bmi.n	80067a8 <tSlide_tick+0x44>
 800679a:	ed83 0a02 	vstr	s0, [r3, #8]
#endif
    s->prevIn = in;
 800679e:	ed83 7a03 	vstr	s14, [r3, #12]
    s->prevOut = s->currentOut;
 80067a2:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
 80067a6:	4770      	bx	lr
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 80067a8:	eddf 7a06 	vldr	s15, [pc, #24]	; 80067c4 <tSlide_tick+0x60>
    s->prevIn = in;
 80067ac:	ed83 7a03 	vstr	s14, [r3, #12]
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 80067b0:	eeb0 0a67 	vmov.f32	s0, s15
 80067b4:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
 80067b8:	ed83 0a01 	vstr	s0, [r3, #4]
}
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	006ce3ee 	.word	0x006ce3ee
 80067c4:	00000000 	.word	0x00000000

080067c8 <tHighpass_init>:
}
#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, float freq, LEAF* const leaf)
{
 80067c8:	b538      	push	{r3, r4, r5, lr}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 80067ca:	698c      	ldr	r4, [r1, #24]
{
 80067cc:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 80067ce:	2018      	movs	r0, #24
 80067d0:	4621      	mov	r1, r4
{
 80067d2:	ed2d 8b02 	vpush	{d8}
 80067d6:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 80067da:	f000 fb27 	bl	8006e2c <mpool_calloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 80067de:	6862      	ldr	r2, [r4, #4]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 80067e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->ys = 0.0f;
 80067e4:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 80067e6:	ed92 7a03 	vldr	s14, [r2, #12]
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 80067ea:	6028      	str	r0, [r5, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 80067ec:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
    
    f->frequency = freq;
 80067f0:	ed80 8a04 	vstr	s16, [r0, #16]
    f->mempool = m;
 80067f4:	6004      	str	r4, [r0, #0]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 80067f6:	ed80 7a05 	vstr	s14, [r0, #20]
    f->ys = 0.0f;
 80067fa:	6083      	str	r3, [r0, #8]
    f->xs = 0.0f;
 80067fc:	6043      	str	r3, [r0, #4]
}
 80067fe:	ecbd 8b02 	vpop	{d8}
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8006802:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8006806:	bd38      	pop	{r3, r4, r5, pc}

08006808 <tHighpass_tick>:
}

// From JOS DC Blocker
float tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
 8006808:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 800680a:	edd3 7a01 	vldr	s15, [r3, #4]
 800680e:	ed93 7a02 	vldr	s14, [r3, #8]
 8006812:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 8006816:	ed83 0a01 	vstr	s0, [r3, #4]
 800681a:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
 800681e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006822:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 8006826:	4770      	bx	lr

08006828 <tVZFilter_tick>:
    _tVZFilter* f = *vf;
    mpool_free((char*)f, f->mempool);
}

float   tVZFilter_tick              (tVZFilter* const vf, float in)
{
 8006828:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
 800682a:	6804      	ldr	r4, [r0, #0]
{
 800682c:	ed2d 8b06 	vpush	{d8-d10}
    
    float yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8006830:	ed94 aa03 	vldr	s20, [r4, #12]
 8006834:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 8006838:	ee30 9a4a 	vsub.f32	s18, s0, s20
 800683c:	ed94 8a02 	vldr	s16, [r4, #8]
 8006840:	edd4 7a06 	vldr	s15, [r4, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 8006844:	edd4 9a04 	vldr	s19, [r4, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8006848:	eea7 9a48 	vfms.f32	s18, s14, s16
 800684c:	ee29 9a27 	vmul.f32	s18, s18, s15
    v1 = f->g*yH;
 8006850:	ee69 aa89 	vmul.f32	s21, s19, s18
    yB = tanhf(v1) + f->s1;
 8006854:	eeb0 0a6a 	vmov.f32	s0, s21
 8006858:	f000 fe12 	bl	8007480 <tanhf>
 800685c:	ee38 8a00 	vadd.f32	s16, s16, s0
    f->s1 = v1 + yB; // state update in 1st integrator
    
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
 8006860:	ee69 8a88 	vmul.f32	s17, s19, s16
    f->s1 = v1 + yB; // state update in 1st integrator
 8006864:	ee7a aa88 	vadd.f32	s21, s21, s16
    yL = tanhf(v2) + f->s2;
 8006868:	eeb0 0a68 	vmov.f32	s0, s17
    f->s1 = v1 + yB; // state update in 1st integrator
 800686c:	edc4 aa02 	vstr	s21, [r4, #8]
    yL = tanhf(v2) + f->s2;
 8006870:	f000 fe06 	bl	8007480 <tanhf>
    // y = g*x + s; // output computation
    // s = g*x + y; // state update
    
    // if we wanted to go into self-oscillation with stabiity we would need to use an anti-saturator on the feedback loop, haven't figured that out yet. -JS
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8006874:	edd4 6a08 	vldr	s13, [r4, #32]
    yL = tanhf(v2) + f->s2;
 8006878:	ee3a aa00 	vadd.f32	s20, s20, s0
    return f->cL*yL + f->cB*yB + f->cH*yH;
 800687c:	ed94 7a07 	vldr	s14, [r4, #28]
 8006880:	ee28 0a26 	vmul.f32	s0, s16, s13
 8006884:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->s2 = v2 + yL; // state update in 2nd integrator
 8006888:	ee78 8a8a 	vadd.f32	s17, s17, s20
    return f->cL*yL + f->cB*yB + f->cH*yH;
 800688c:	eea7 0a0a 	vfma.f32	s0, s14, s20
    f->s2 = v2 + yL; // state update in 2nd integrator
 8006890:	edc4 8a03 	vstr	s17, [r4, #12]
}
 8006894:	eea7 0a89 	vfma.f32	s0, s15, s18
 8006898:	ecbd 8b06 	vpop	{d8-d10}
 800689c:	bd10      	pop	{r4, pc}
 800689e:	bf00      	nop

080068a0 <tVZFilter_calcCoeffs>:
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 80068a0:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
 80068a2:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80068a4:	eddf 7a98 	vldr	s15, [pc, #608]	; 8006b08 <tVZFilter_calcCoeffs+0x268>
 80068a8:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
{
 80068ac:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80068b0:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 80068b4:	ee68 8a87 	vmul.f32	s17, s17, s14
 80068b8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80068bc:	eeb0 0a68 	vmov.f32	s0, s17
 80068c0:	f000 fdb2 	bl	8007428 <tanf>
    
    switch( f->type )
 80068c4:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80068c6:	eeb0 8a40 	vmov.f32	s16, s0
 80068ca:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 80068ce:	2b0a      	cmp	r3, #10
 80068d0:	f200 8117 	bhi.w	8006b02 <tVZFilter_calcCoeffs+0x262>
 80068d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80068d8:	002f0026 	.word	0x002f0026
 80068dc:	00410038 	.word	0x00410038
 80068e0:	0056004d 	.word	0x0056004d
 80068e4:	00a1008b 	.word	0x00a1008b
 80068e8:	010a00b7 	.word	0x010a00b7
 80068ec:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 80068ee:	edd4 7a05 	vldr	s15, [r4, #20]
 80068f2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80068f6:	eeb1 7a67 	vneg.f32	s14, s15
 80068fa:	61e3      	str	r3, [r4, #28]
 80068fc:	6263      	str	r3, [r4, #36]	; 0x24
 80068fe:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8006902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8006906:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800690a:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 800690e:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8006912:	eee7 6a88 	vfma.f32	s13, s15, s16
}
 8006916:	ecbd 8b02 	vpop	{d8}
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800691a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800691e:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8006922:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8006924:	2300      	movs	r3, #0
 8006926:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 800692a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800692e:	61e3      	str	r3, [r4, #28]
 8006930:	6223      	str	r3, [r4, #32]
 8006932:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 8006934:	e7e5      	b.n	8006902 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8006936:	2300      	movs	r3, #0
 8006938:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 800693c:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8006940:	6223      	str	r3, [r4, #32]
 8006942:	6263      	str	r3, [r4, #36]	; 0x24
 8006944:	61e2      	str	r2, [r4, #28]
            break;
 8006946:	e7dc      	b.n	8006902 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8006948:	2300      	movs	r3, #0
 800694a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 800694e:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8006952:	61e3      	str	r3, [r4, #28]
 8006954:	6263      	str	r3, [r4, #36]	; 0x24
 8006956:	6222      	str	r2, [r4, #32]
            break;
 8006958:	e7d3      	b.n	8006902 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 800695a:	edd4 7a05 	vldr	s15, [r4, #20]
 800695e:	2300      	movs	r3, #0
 8006960:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8006964:	61e3      	str	r3, [r4, #28]
 8006966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800696a:	6263      	str	r3, [r4, #36]	; 0x24
 800696c:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 8006970:	e7c7      	b.n	8006902 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8006972:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006976:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 8006978:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800697c:	6222      	str	r2, [r4, #32]
 800697e:	61e3      	str	r3, [r4, #28]
 8006980:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8006982:	e7be      	b.n	8006902 <tVZFilter_calcCoeffs+0x62>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8006984:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8006988:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 800698c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006990:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8006994:	f000 fbe8 	bl	8007168 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8006998:	ee28 0a80 	vmul.f32	s0, s17, s0
 800699c:	f000 fd44 	bl	8007428 <tanf>
            float r  = f->g/wl;
 80069a0:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80069a4:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 80069a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069ac:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80069b0:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80069b4:	ed84 7a07 	vstr	s14, [r4, #28]
 80069b8:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 80069bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80069c0:	eea7 7aa7 	vfma.f32	s14, s15, s15
 80069c4:	eef0 6a47 	vmov.f32	s13, s14
 80069c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069cc:	ee77 7a45 	vsub.f32	s15, s14, s10
 80069d0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80069d4:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80069d8:	eef1 7ac7 	vsqrt.f32	s15, s14
 80069dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80069e0:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80069e4:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80069e8:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 80069ec:	e789      	b.n	8006902 <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 80069ee:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80069f2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 80069f6:	edd4 7a05 	vldr	s15, [r4, #20]
 80069fa:	eef1 6ac7 	vsqrt.f32	s13, s14
 80069fe:	ed84 7a07 	vstr	s14, [r4, #28]
 8006a02:	6263      	str	r3, [r4, #36]	; 0x24
 8006a04:	ee27 6a27 	vmul.f32	s12, s14, s15
 8006a08:	ed84 6a08 	vstr	s12, [r4, #32]
 8006a0c:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8006a10:	ee80 8a07 	vdiv.f32	s16, s0, s14
 8006a14:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8006a18:	e773      	b.n	8006902 <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 8006a1a:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8006a1e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006a22:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8006a26:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8006a2a:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 8006a2e:	61e3      	str	r3, [r4, #28]
 8006a30:	ee27 6a27 	vmul.f32	s12, s14, s15
 8006a34:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8006a38:	eeb1 7ae6 	vsqrt.f32	s14, s13
 8006a3c:	ee20 8a07 	vmul.f32	s16, s0, s14
 8006a40:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8006a44:	e75d      	b.n	8006902 <tVZFilter_calcCoeffs+0x62>
            float x  = (2.0f*f->m-1.0f);
 8006a46:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8006a4a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8006a4e:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8006a52:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8006b0c <tVZFilter_calcCoeffs+0x26c>
 8006a56:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 8006a5a:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8006a5e:	eeb0 0a48 	vmov.f32	s0, s16
 8006a62:	eea7 0a67 	vfms.f32	s0, s14, s15
 8006a66:	f000 f951 	bl	8006d0c <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8006a6a:	eddf 0a28 	vldr	s1, [pc, #160]	; 8006b0c <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8006a6e:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8006a72:	eeb0 0a68 	vmov.f32	s0, s17
 8006a76:	f000 f94d 	bl	8006d14 <minimum>
            f->cB = 1.0f-x*x;
 8006a7a:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8006a7e:	edd4 7a05 	vldr	s15, [r4, #20]
 8006a82:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 8006a86:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8006a8a:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 8006a8e:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8006a92:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8006a96:	ee76 5a06 	vadd.f32	s11, s12, s12
 8006a9a:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 8006a9e:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8006aa2:	eee6 7a06 	vfma.f32	s15, s12, s12
 8006aa6:	eee0 7a00 	vfma.f32	s15, s0, s0
 8006aaa:	eee0 7a65 	vfms.f32	s15, s0, s11
 8006aae:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8006ab2:	f000 f8cf 	bl	8006c54 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 8006ab6:	edd4 5a07 	vldr	s11, [r4, #28]
 8006aba:	ed94 6a08 	vldr	s12, [r4, #32]
 8006abe:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 8006ac2:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8006ac6:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 8006aca:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8006ace:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 8006ad2:	ee65 5a80 	vmul.f32	s11, s11, s0
 8006ad6:	ee26 6a00 	vmul.f32	s12, s12, s0
 8006ada:	ee26 0a80 	vmul.f32	s0, s13, s0
 8006ade:	edc4 5a07 	vstr	s11, [r4, #28]
 8006ae2:	ed84 6a08 	vstr	s12, [r4, #32]
 8006ae6:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 8006aea:	e70a      	b.n	8006902 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
 8006aec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8006af0:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8006af4:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 8006af6:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 8006afa:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 8006afe:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8006b00:	e6ff      	b.n	8006902 <tVZFilter_calcCoeffs+0x62>
    f->R2Plusg = f->R2+f->g;
 8006b02:	edd4 7a05 	vldr	s15, [r4, #20]
 8006b06:	e6fc      	b.n	8006902 <tVZFilter_calcCoeffs+0x62>
 8006b08:	40490fdb 	.word	0x40490fdb
 8006b0c:	00000000 	.word	0x00000000

08006b10 <tVZFilter_initToPool>:
{
 8006b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 8006b12:	6817      	ldr	r7, [r2, #0]
{
 8006b14:	4605      	mov	r5, r0
 8006b16:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8006b18:	204c      	movs	r0, #76	; 0x4c
 8006b1a:	4639      	mov	r1, r7
{
 8006b1c:	ed2d 8b04 	vpush	{d8-d9}
 8006b20:	b083      	sub	sp, #12
 8006b22:	eef0 8a60 	vmov.f32	s17, s1
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8006b26:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8006b2a:	ed9f 8a43 	vldr	s16, [pc, #268]	; 8006c38 <tVZFilter_initToPool+0x128>
{
 8006b2e:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8006b32:	f000 f907 	bl	8006d44 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
 8006b36:	687b      	ldr	r3, [r7, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8006b38:	4604      	mov	r4, r0
 8006b3a:	6028      	str	r0, [r5, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8006b3c:	eeb0 0a48 	vmov.f32	s0, s16
    f->sampleRate = leaf->sampleRate;
 8006b40:	edd3 7a00 	vldr	s15, [r3]
    f->invSampleRate = leaf->invSampleRate;
 8006b44:	685b      	ldr	r3, [r3, #4]
    f->mempool = m;
 8006b46:	6007      	str	r7, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8006b48:	ee27 1aa9 	vmul.f32	s2, s15, s19
    f->sampleRate = leaf->sampleRate;
 8006b4c:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    f->invSampleRate = leaf->invSampleRate;
 8006b50:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8006b52:	eddd 0a01 	vldr	s1, [sp, #4]
 8006b56:	f000 f89f 	bl	8006c98 <LEAF_clip>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8006b5a:	ed9f 9a38 	vldr	s18, [pc, #224]	; 8006c3c <tVZFilter_initToPool+0x12c>
    f->invG = 1.0f/ONE_OVER_SQRT2;
 8006b5e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8006c40 <tVZFilter_initToPool+0x130>
    f->R2Plusg = f->R2 + f->g;
 8006b62:	edd4 7a04 	vldr	s15, [r4, #16]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8006b66:	ee20 6a09 	vmul.f32	s12, s0, s18
 8006b6a:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
 8006b6e:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = ONE_OVER_SQRT2;
 8006b72:	4b34      	ldr	r3, [pc, #208]	; (8006c44 <tVZFilter_initToPool+0x134>)
    f->invG = 1.0f/ONE_OVER_SQRT2;
 8006b74:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = ONE_OVER_SQRT2;
 8006b78:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->R2   = f->invG;
 8006b7a:	ed84 7a05 	vstr	s14, [r4, #20]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8006b7e:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8006b82:	ee26 0a26 	vmul.f32	s0, s12, s13
    f->type = type;
 8006b86:	7126      	strb	r6, [r4, #4]
    f->B    = bandWidth;
 8006b88:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
 8006b8c:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 8006b90:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 8006b94:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
 8006b98:	ed84 8a03 	vstr	s16, [r4, #12]
    f->R2Plusg = f->R2 + f->g;
 8006b9c:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8006ba0:	f000 fc42 	bl	8007428 <tanf>
 8006ba4:	eef0 7a40 	vmov.f32	s15, s0
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8006ba8:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8006c48 <tVZFilter_initToPool+0x138>
 8006bac:	eef0 0a68 	vmov.f32	s1, s17
 8006bb0:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
 8006bb4:	682e      	ldr	r6, [r5, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8006bb6:	edc4 7a04 	vstr	s15, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8006bba:	f000 f86d 	bl	8006c98 <LEAF_clip>
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8006bbe:	eefe 0a00 	vmov.f32	s1, #224	; 0xbf000000 -0.5
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8006bc2:	eef0 7a40 	vmov.f32	s15, s0
    _tVZFilter* f = *vf;
 8006bc6:	682c      	ldr	r4, [r5, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8006bc8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006bcc:	ee67 0aa0 	vmul.f32	s1, s15, s1
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8006bd0:	edc6 7a0e 	vstr	s15, [r6, #56]	; 0x38
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8006bd4:	f000 fac8 	bl	8007168 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8006bd8:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8006bdc:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8006be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006be4:	ee67 7a89 	vmul.f32	s15, s15, s18
 8006be8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006bec:	f000 fc1c 	bl	8007428 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8006bf0:	ed94 6a04 	vldr	s12, [r4, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8006bf4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8006bf8:	4628      	mov	r0, r5
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8006bfa:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8006bfe:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8006c02:	ee27 7a07 	vmul.f32	s14, s14, s14
 8006c06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c0a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006c0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006c12:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006c16:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8006c1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006c1e:	edc6 7a05 	vstr	s15, [r6, #20]
    tVZFilter_calcCoeffs(vf);
 8006c22:	f7ff fe3d 	bl	80068a0 <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
 8006c26:	4628      	mov	r0, r5
}
 8006c28:	b003      	add	sp, #12
 8006c2a:	ecbd 8b04 	vpop	{d8-d9}
 8006c2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tVZFilter_calcCoeffs(vf);
 8006c32:	f7ff be35 	b.w	80068a0 <tVZFilter_calcCoeffs>
 8006c36:	bf00      	nop
 8006c38:	00000000 	.word	0x00000000
 8006c3c:	40490fdb 	.word	0x40490fdb
 8006c40:	3fb504f3 	.word	0x3fb504f3
 8006c44:	3f3504f3 	.word	0x3f3504f3
 8006c48:	42c80000 	.word	0x42c80000

08006c4c <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 8006c4c:	3218      	adds	r2, #24
 8006c4e:	f7ff bf5f 	b.w	8006b10 <tVZFilter_initToPool>
 8006c52:	bf00      	nop

08006c54 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
float fastsqrtf(float x)
{
	union { float f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8006c54:	ee10 2a10 	vmov	r2, s0
 8006c58:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
 8006c5c:	4b0d      	ldr	r3, [pc, #52]	; (8006c94 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8006c5e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8006c62:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 8006c66:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006c6a:	ee00 3a10 	vmov	s0, r3
 8006c6e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006c72:	eea0 7a67 	vfms.f32	s14, s0, s15
 8006c76:	ee20 0a07 	vmul.f32	s0, s0, s14
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
 8006c7a:	ee10 3a10 	vmov	r3, s0
 8006c7e:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 8006c82:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 8006c86:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 8006c8a:	336e      	adds	r3, #110	; 0x6e
}
 8006c8c:	ee00 3a10 	vmov	s0, r3
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	5f3759df 	.word	0x5f3759df

08006c98 <LEAF_clip>:
float LEAF_clip(float min, float val, float max)
#endif
{
    float tempmin = min;
    float tempmax = max;
    if (min > max)
 8006c98:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8006c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca0:	dd05      	ble.n	8006cae <LEAF_clip+0x16>
 8006ca2:	eef0 7a40 	vmov.f32	s15, s0
    {
        tempmin = max;
 8006ca6:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 8006caa:	eeb0 1a67 	vmov.f32	s2, s15
    }
    if (val < tempmin)
 8006cae:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8006cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cb6:	dc01      	bgt.n	8006cbc <LEAF_clip+0x24>
    {
        return tempmin;
    }
    else if (val > tempmax)
 8006cb8:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
    else
    {
        return val;
    }
}
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop

08006cc0 <LEAF_generate_atodb>:
    }
}


void LEAF_generate_atodb(float* buffer, int size)
{
 8006cc0:	b538      	push	{r3, r4, r5, lr}
    float increment = 1.0f / (float)(size-1);
 8006cc2:	1e4b      	subs	r3, r1, #1
 8006cc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float x = 0.0f;
    for (int i = 0; i < size; i++)
 8006cc8:	2900      	cmp	r1, #0
    float increment = 1.0f / (float)(size-1);
 8006cca:	ee07 3a90 	vmov	s15, r3
 8006cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8006cd2:	ed2d 8b04 	vpush	{d8-d9}
    float increment = 1.0f / (float)(size-1);
 8006cd6:	eec7 8a27 	vdiv.f32	s17, s14, s15
    for (int i = 0; i < size; i++)
 8006cda:	dd12      	ble.n	8006d02 <LEAF_generate_atodb+0x42>
 8006cdc:	4604      	mov	r4, r0
    float x = 0.0f;
 8006cde:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8006d08 <LEAF_generate_atodb+0x48>
 8006ce2:	eb00 0581 	add.w	r5, r0, r1, lsl #2
}


float atodb(float a)
{
    return 20.0f*log10f(a);
 8006ce6:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
 8006cea:	eeb0 0a48 	vmov.f32	s0, s16
 8006cee:	f000 fc19 	bl	8007524 <log10f>
 8006cf2:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
 8006cf6:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
 8006cfa:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 8006cfe:	42a5      	cmp	r5, r4
 8006d00:	d1f3      	bne.n	8006cea <LEAF_generate_atodb+0x2a>
}
 8006d02:	ecbd 8b04 	vpop	{d8-d9}
 8006d06:	bd38      	pop	{r3, r4, r5, pc}
 8006d08:	00000000 	.word	0x00000000

08006d0c <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 8006d0c:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop

08006d14 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 8006d14:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop

08006d1c <leaf_pool_init>:
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 8006d1c:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8006d1e:	6a04      	ldr	r4, [r0, #32]
 8006d20:	2510      	movs	r5, #16
    pool->usize  = 0;
 8006d22:	2300      	movs	r3, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8006d24:	6365      	str	r5, [r4, #52]	; 0x34
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 8006d26:	194c      	adds	r4, r1, r5
    pool->msize  = size;
 8006d28:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8006d2a:	3a10      	subs	r2, #16
    pool->usize  = 0;
 8006d2c:	e9c0 1309 	strd	r1, r3, [r0, #36]	; 0x24
    node->pool = block_location + header_size;
 8006d30:	600c      	str	r4, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
 8006d32:	f100 041c 	add.w	r4, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
 8006d36:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
 8006d38:	e9c1 3301 	strd	r3, r3, [r1, #4]
    leaf->mempool = &leaf->_internal_mempool;
 8006d3c:	6184      	str	r4, [r0, #24]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8006d3e:	6301      	str	r1, [r0, #48]	; 0x30
}
 8006d40:	bc30      	pop	{r4, r5}
 8006d42:	4770      	bx	lr

08006d44 <mpool_alloc>:
{
 8006d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    pool->leaf->allocCount++;
 8006d48:	684d      	ldr	r5, [r1, #4]
    if (pool->head == NULL)
 8006d4a:	694e      	ldr	r6, [r1, #20]
    pool->leaf->allocCount++;
 8006d4c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8006d4e:	3301      	adds	r3, #1
 8006d50:	64ab      	str	r3, [r5, #72]	; 0x48
    if (pool->head == NULL)
 8006d52:	2e00      	cmp	r6, #0
 8006d54:	d056      	beq.n	8006e04 <mpool_alloc+0xc0>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8006d56:	1dc2      	adds	r2, r0, #7
    while (node_to_alloc->size < size_to_alloc)
 8006d58:	4634      	mov	r4, r6
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8006d5a:	f022 0207 	bic.w	r2, r2, #7
    while (node_to_alloc->size < size_to_alloc)
 8006d5e:	e002      	b.n	8006d66 <mpool_alloc+0x22>
        node_to_alloc = node_to_alloc->next;
 8006d60:	6864      	ldr	r4, [r4, #4]
        if (node_to_alloc == NULL)
 8006d62:	2c00      	cmp	r4, #0
 8006d64:	d03d      	beq.n	8006de2 <mpool_alloc+0x9e>
    while (node_to_alloc->size < size_to_alloc)
 8006d66:	68e3      	ldr	r3, [r4, #12]
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d3f9      	bcc.n	8006d60 <mpool_alloc+0x1c>
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8006d6c:	1a9f      	subs	r7, r3, r2
    if (leftover > pool->leaf->header_size)
 8006d6e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    node_to_alloc->size = size_to_alloc;
 8006d70:	60e2      	str	r2, [r4, #12]
    if (leftover > pool->leaf->header_size)
 8006d72:	42b8      	cmp	r0, r7
 8006d74:	d242      	bcs.n	8006dfc <mpool_alloc+0xb8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8006d76:	f8d1 c008 	ldr.w	ip, [r1, #8]
        new_node = create_node(&pool->mpool[offset],
 8006d7a:	1a3b      	subs	r3, r7, r0
        offset += pool->leaf->header_size + node_to_alloc->size;
 8006d7c:	4402      	add	r2, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8006d7e:	eba4 070c 	sub.w	r7, r4, ip
        offset += pool->leaf->header_size + node_to_alloc->size;
 8006d82:	443a      	add	r2, r7
        new_node = create_node(&pool->mpool[offset],
 8006d84:	eb0c 0702 	add.w	r7, ip, r2
                               node_to_alloc->next,
 8006d88:	e9d4 8e01 	ldrd	r8, lr, [r4, #4]
    node->pool = block_location + header_size;
 8006d8c:	eb07 0900 	add.w	r9, r7, r0
 8006d90:	f84c 9002 	str.w	r9, [ip, r2]
    node->size = size;
 8006d94:	60fb      	str	r3, [r7, #12]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8006d96:	68e3      	ldr	r3, [r4, #12]
    node->next = next;
 8006d98:	e9c7 8e01 	strd	r8, lr, [r7, #4]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 8006d9c:	6862      	ldr	r2, [r4, #4]
    if (pool->head == node_to_alloc)
 8006d9e:	42a6      	cmp	r6, r4
        pool->head = new_node;
 8006da0:	bf08      	it	eq
 8006da2:	614f      	streq	r7, [r1, #20]
    if (node->next != NULL)
 8006da4:	b10a      	cbz	r2, 8006daa <mpool_alloc+0x66>
    {
        // Close the link
        node->next->prev = node->prev;
 8006da6:	68a6      	ldr	r6, [r4, #8]
 8006da8:	6096      	str	r6, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8006daa:	68a6      	ldr	r6, [r4, #8]
 8006dac:	b106      	cbz	r6, 8006db0 <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
 8006dae:	6072      	str	r2, [r6, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8006db0:	68ca      	ldr	r2, [r1, #12]
    if (pool->leaf->clearOnAllocation > 0)
 8006db2:	696d      	ldr	r5, [r5, #20]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8006db4:	4402      	add	r2, r0
    }
    
    node->next = NULL;
 8006db6:	2000      	movs	r0, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8006db8:	441a      	add	r2, r3
    if (pool->leaf->clearOnAllocation > 0)
 8006dba:	4285      	cmp	r5, r0
    node->prev = NULL;
 8006dbc:	e9c4 0001 	strd	r0, r0, [r4, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8006dc0:	60ca      	str	r2, [r1, #12]
    if (pool->leaf->clearOnAllocation > 0)
 8006dc2:	dd0a      	ble.n	8006dda <mpool_alloc+0x96>
        char* new_pool = (char*)node_to_alloc->pool;
 8006dc4:	6825      	ldr	r5, [r4, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8006dc6:	b373      	cbz	r3, 8006e26 <mpool_alloc+0xe2>
 8006dc8:	1e6a      	subs	r2, r5, #1
 8006dca:	4613      	mov	r3, r2
 8006dcc:	f802 0f01 	strb.w	r0, [r2, #1]!
 8006dd0:	68e1      	ldr	r1, [r4, #12]
 8006dd2:	3302      	adds	r3, #2
 8006dd4:	1b5b      	subs	r3, r3, r5
 8006dd6:	4299      	cmp	r1, r3
 8006dd8:	d8f7      	bhi.n	8006dca <mpool_alloc+0x86>
    return node_to_alloc->pool;
 8006dda:	6824      	ldr	r4, [r4, #0]
}
 8006ddc:	4620      	mov	r0, r4
 8006dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if ((pool->msize - pool->usize) > asize)
 8006de2:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
 8006de6:	1a9b      	subs	r3, r3, r2
 8006de8:	4283      	cmp	r3, r0
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8006dea:	4628      	mov	r0, r5
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8006dec:	bf8c      	ite	hi
 8006dee:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8006df0:	4621      	movls	r1, r4
 8006df2:	f000 f8b1 	bl	8006f58 <LEAF_internalErrorCallback>
}
 8006df6:	4620      	mov	r0, r4
 8006df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        new_node = node_to_alloc->next;
 8006dfc:	6867      	ldr	r7, [r4, #4]
        node_to_alloc->size += leftover;
 8006dfe:	60e3      	str	r3, [r4, #12]
        new_node = node_to_alloc->next;
 8006e00:	463a      	mov	r2, r7
 8006e02:	e7cc      	b.n	8006d9e <mpool_alloc+0x5a>
        if ((pool->msize - pool->usize) > asize)
 8006e04:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
 8006e08:	1a9b      	subs	r3, r3, r2
 8006e0a:	4283      	cmp	r3, r0
 8006e0c:	d905      	bls.n	8006e1a <mpool_alloc+0xd6>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8006e0e:	2101      	movs	r1, #1
 8006e10:	4628      	mov	r0, r5
        return NULL;
 8006e12:	4634      	mov	r4, r6
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8006e14:	f000 f8a0 	bl	8006f58 <LEAF_internalErrorCallback>
 8006e18:	e7e0      	b.n	8006ddc <mpool_alloc+0x98>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	4628      	mov	r0, r5
        return NULL;
 8006e1e:	4634      	mov	r4, r6
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8006e20:	f000 f89a 	bl	8006f58 <LEAF_internalErrorCallback>
 8006e24:	e7da      	b.n	8006ddc <mpool_alloc+0x98>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8006e26:	462c      	mov	r4, r5
    return node_to_alloc->pool;
 8006e28:	e7d8      	b.n	8006ddc <mpool_alloc+0x98>
 8006e2a:	bf00      	nop

08006e2c <mpool_calloc>:
{
 8006e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pool->leaf->allocCount++;
 8006e30:	684e      	ldr	r6, [r1, #4]
    if (pool->head == NULL)
 8006e32:	694d      	ldr	r5, [r1, #20]
    pool->leaf->allocCount++;
 8006e34:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8006e36:	3301      	adds	r3, #1
 8006e38:	64b3      	str	r3, [r6, #72]	; 0x48
    if (pool->head == NULL)
 8006e3a:	2d00      	cmp	r5, #0
 8006e3c:	d04e      	beq.n	8006edc <mpool_calloc+0xb0>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8006e3e:	1dc2      	adds	r2, r0, #7
    while (node_to_alloc->size < size_to_alloc)
 8006e40:	462c      	mov	r4, r5
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8006e42:	f022 0207 	bic.w	r2, r2, #7
    while (node_to_alloc->size < size_to_alloc)
 8006e46:	e002      	b.n	8006e4e <mpool_calloc+0x22>
        node_to_alloc = node_to_alloc->next;
 8006e48:	6864      	ldr	r4, [r4, #4]
        if (node_to_alloc == NULL)
 8006e4a:	2c00      	cmp	r4, #0
 8006e4c:	d035      	beq.n	8006eba <mpool_calloc+0x8e>
    while (node_to_alloc->size < size_to_alloc)
 8006e4e:	68e3      	ldr	r3, [r4, #12]
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d3f9      	bcc.n	8006e48 <mpool_calloc+0x1c>
    if (leftover > pool->leaf->header_size)
 8006e54:	6b70      	ldr	r0, [r6, #52]	; 0x34
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8006e56:	1a9e      	subs	r6, r3, r2
    node_to_alloc->size = size_to_alloc;
 8006e58:	60e2      	str	r2, [r4, #12]
    if (leftover > pool->leaf->header_size)
 8006e5a:	42b0      	cmp	r0, r6
 8006e5c:	d23a      	bcs.n	8006ed4 <mpool_calloc+0xa8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8006e5e:	688f      	ldr	r7, [r1, #8]
        new_node = create_node(&pool->mpool[offset],
 8006e60:	1a33      	subs	r3, r6, r0
        offset += pool->leaf->header_size + node_to_alloc->size;
 8006e62:	4402      	add	r2, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8006e64:	1be6      	subs	r6, r4, r7
        offset += pool->leaf->header_size + node_to_alloc->size;
 8006e66:	4432      	add	r2, r6
        new_node = create_node(&pool->mpool[offset],
 8006e68:	18be      	adds	r6, r7, r2
                               node_to_alloc->next,
 8006e6a:	e9d4 ec01 	ldrd	lr, ip, [r4, #4]
    node->pool = block_location + header_size;
 8006e6e:	eb06 0800 	add.w	r8, r6, r0
 8006e72:	f847 8002 	str.w	r8, [r7, r2]
    node->size = size;
 8006e76:	60f3      	str	r3, [r6, #12]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8006e78:	68e3      	ldr	r3, [r4, #12]
    node->next = next;
 8006e7a:	e9c6 ec01 	strd	lr, ip, [r6, #4]
    if (node->next != NULL)
 8006e7e:	6862      	ldr	r2, [r4, #4]
    if (pool->head == node_to_alloc)
 8006e80:	42a5      	cmp	r5, r4
        pool->head = new_node;
 8006e82:	bf08      	it	eq
 8006e84:	614e      	streq	r6, [r1, #20]
    if (node->next != NULL)
 8006e86:	b10a      	cbz	r2, 8006e8c <mpool_calloc+0x60>
        node->next->prev = node->prev;
 8006e88:	68a5      	ldr	r5, [r4, #8]
 8006e8a:	6095      	str	r5, [r2, #8]
    if (node->prev != NULL)
 8006e8c:	68a5      	ldr	r5, [r4, #8]
 8006e8e:	b105      	cbz	r5, 8006e92 <mpool_calloc+0x66>
        node->prev->next = node->next;
 8006e90:	606a      	str	r2, [r5, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8006e92:	68cd      	ldr	r5, [r1, #12]
    node->next = NULL;
 8006e94:	2200      	movs	r2, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8006e96:	4428      	add	r0, r5
 8006e98:	4418      	add	r0, r3
    node->prev = NULL;
 8006e9a:	e9c4 2201 	strd	r2, r2, [r4, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8006e9e:	60c8      	str	r0, [r1, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 8006ea0:	b13b      	cbz	r3, 8006eb2 <mpool_calloc+0x86>
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	4611      	mov	r1, r2
 8006ea6:	6822      	ldr	r2, [r4, #0]
 8006ea8:	54d1      	strb	r1, [r2, r3]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	68e2      	ldr	r2, [r4, #12]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d8f9      	bhi.n	8006ea6 <mpool_calloc+0x7a>
    return node_to_alloc->pool;
 8006eb2:	6824      	ldr	r4, [r4, #0]
}
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if ((pool->msize - pool->usize) > asize)
 8006eba:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
 8006ebe:	1a9b      	subs	r3, r3, r2
 8006ec0:	4283      	cmp	r3, r0
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8006ec2:	4630      	mov	r0, r6
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8006ec4:	bf8c      	ite	hi
 8006ec6:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8006ec8:	4621      	movls	r1, r4
 8006eca:	f000 f845 	bl	8006f58 <LEAF_internalErrorCallback>
}
 8006ece:	4620      	mov	r0, r4
 8006ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        new_node = node_to_alloc->next;
 8006ed4:	6866      	ldr	r6, [r4, #4]
        node_to_alloc->size += leftover;
 8006ed6:	60e3      	str	r3, [r4, #12]
        new_node = node_to_alloc->next;
 8006ed8:	4632      	mov	r2, r6
 8006eda:	e7d1      	b.n	8006e80 <mpool_calloc+0x54>
        if ((pool->msize - pool->usize) > asize)
 8006edc:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
 8006ee0:	1a9b      	subs	r3, r3, r2
 8006ee2:	4283      	cmp	r3, r0
 8006ee4:	d905      	bls.n	8006ef2 <mpool_calloc+0xc6>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	4630      	mov	r0, r6
        return NULL;
 8006eea:	462c      	mov	r4, r5
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8006eec:	f000 f834 	bl	8006f58 <LEAF_internalErrorCallback>
 8006ef0:	e7e0      	b.n	8006eb4 <mpool_calloc+0x88>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	4630      	mov	r0, r6
        return NULL;
 8006ef6:	462c      	mov	r4, r5
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8006ef8:	f000 f82e 	bl	8006f58 <LEAF_internalErrorCallback>
 8006efc:	e7da      	b.n	8006eb4 <mpool_calloc+0x88>
 8006efe:	bf00      	nop

08006f00 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop

08006f04 <LEAF_init>:
{
 8006f04:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
 8006f06:	6200      	str	r0, [r0, #32]
{
 8006f08:	4604      	mov	r4, r0
 8006f0a:	461d      	mov	r5, r3
 8006f0c:	ed2d 8b02 	vpush	{d8}
 8006f10:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 8006f14:	f7ff ff02 	bl	8006d1c <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 8006f18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8006f1c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8006f50 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 8006f20:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 8006f22:	4b0c      	ldr	r3, [pc, #48]	; (8006f54 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
 8006f24:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 8006f28:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
 8006f2c:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 8006f2e:	6162      	str	r2, [r4, #20]
}
 8006f30:	ecbd 8b02 	vpop	{d8}
        leaf->errorState[i] = 0;
 8006f34:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 8006f38:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
 8006f3c:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8006f40:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 8006f44:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8006f48:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8006f4c:	bd38      	pop	{r3, r4, r5, pc}
 8006f4e:	bf00      	nop
 8006f50:	40c90fdb 	.word	0x40c90fdb
 8006f54:	08006f01 	.word	0x08006f01

08006f58 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8006f58:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 8006f5a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8006f5e:	2401      	movs	r4, #1
    leaf->errorCallback(leaf, whichone);
 8006f60:	6b83      	ldr	r3, [r0, #56]	; 0x38
    leaf->errorState[whichone] = 1;
 8006f62:	63d4      	str	r4, [r2, #60]	; 0x3c
}
 8006f64:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 8006f68:	4718      	bx	r3
 8006f6a:	bf00      	nop

08006f6c <__errno>:
 8006f6c:	4b01      	ldr	r3, [pc, #4]	; (8006f74 <__errno+0x8>)
 8006f6e:	6818      	ldr	r0, [r3, #0]
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	24000014 	.word	0x24000014

08006f78 <__libc_init_array>:
 8006f78:	b570      	push	{r4, r5, r6, lr}
 8006f7a:	4d0d      	ldr	r5, [pc, #52]	; (8006fb0 <__libc_init_array+0x38>)
 8006f7c:	4c0d      	ldr	r4, [pc, #52]	; (8006fb4 <__libc_init_array+0x3c>)
 8006f7e:	1b64      	subs	r4, r4, r5
 8006f80:	10a4      	asrs	r4, r4, #2
 8006f82:	2600      	movs	r6, #0
 8006f84:	42a6      	cmp	r6, r4
 8006f86:	d109      	bne.n	8006f9c <__libc_init_array+0x24>
 8006f88:	4d0b      	ldr	r5, [pc, #44]	; (8006fb8 <__libc_init_array+0x40>)
 8006f8a:	4c0c      	ldr	r4, [pc, #48]	; (8006fbc <__libc_init_array+0x44>)
 8006f8c:	f001 f9b4 	bl	80082f8 <_init>
 8006f90:	1b64      	subs	r4, r4, r5
 8006f92:	10a4      	asrs	r4, r4, #2
 8006f94:	2600      	movs	r6, #0
 8006f96:	42a6      	cmp	r6, r4
 8006f98:	d105      	bne.n	8006fa6 <__libc_init_array+0x2e>
 8006f9a:	bd70      	pop	{r4, r5, r6, pc}
 8006f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa0:	4798      	blx	r3
 8006fa2:	3601      	adds	r6, #1
 8006fa4:	e7ee      	b.n	8006f84 <__libc_init_array+0xc>
 8006fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006faa:	4798      	blx	r3
 8006fac:	3601      	adds	r6, #1
 8006fae:	e7f2      	b.n	8006f96 <__libc_init_array+0x1e>
 8006fb0:	08008a8c 	.word	0x08008a8c
 8006fb4:	08008a8c 	.word	0x08008a8c
 8006fb8:	08008a8c 	.word	0x08008a8c
 8006fbc:	08008a90 	.word	0x08008a90

08006fc0 <memset>:
 8006fc0:	4402      	add	r2, r0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d100      	bne.n	8006fca <memset+0xa>
 8006fc8:	4770      	bx	lr
 8006fca:	f803 1b01 	strb.w	r1, [r3], #1
 8006fce:	e7f9      	b.n	8006fc4 <memset+0x4>

08006fd0 <with_errnof>:
 8006fd0:	b513      	push	{r0, r1, r4, lr}
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006fd8:	f7ff ffc8 	bl	8006f6c <__errno>
 8006fdc:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006fe0:	6004      	str	r4, [r0, #0]
 8006fe2:	b002      	add	sp, #8
 8006fe4:	bd10      	pop	{r4, pc}

08006fe6 <xflowf>:
 8006fe6:	b130      	cbz	r0, 8006ff6 <xflowf+0x10>
 8006fe8:	eef1 7a40 	vneg.f32	s15, s0
 8006fec:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006ff0:	2022      	movs	r0, #34	; 0x22
 8006ff2:	f7ff bfed 	b.w	8006fd0 <with_errnof>
 8006ff6:	eef0 7a40 	vmov.f32	s15, s0
 8006ffa:	e7f7      	b.n	8006fec <xflowf+0x6>

08006ffc <__math_uflowf>:
 8006ffc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007004 <__math_uflowf+0x8>
 8007000:	f7ff bff1 	b.w	8006fe6 <xflowf>
 8007004:	10000000 	.word	0x10000000

08007008 <__math_may_uflowf>:
 8007008:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007010 <__math_may_uflowf+0x8>
 800700c:	f7ff bfeb 	b.w	8006fe6 <xflowf>
 8007010:	1a200000 	.word	0x1a200000

08007014 <__math_oflowf>:
 8007014:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800701c <__math_oflowf+0x8>
 8007018:	f7ff bfe5 	b.w	8006fe6 <xflowf>
 800701c:	70000000 	.word	0x70000000

08007020 <__math_divzerof>:
 8007020:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007024:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8007028:	2800      	cmp	r0, #0
 800702a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800702e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800703c <__math_divzerof+0x1c>
 8007032:	2022      	movs	r0, #34	; 0x22
 8007034:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8007038:	f7ff bfca 	b.w	8006fd0 <with_errnof>
 800703c:	00000000 	.word	0x00000000

08007040 <__math_invalidf>:
 8007040:	eef0 7a40 	vmov.f32	s15, s0
 8007044:	ee30 7a40 	vsub.f32	s14, s0, s0
 8007048:	eef4 7a67 	vcmp.f32	s15, s15
 800704c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007050:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8007054:	d602      	bvs.n	800705c <__math_invalidf+0x1c>
 8007056:	2021      	movs	r0, #33	; 0x21
 8007058:	f7ff bfba 	b.w	8006fd0 <with_errnof>
 800705c:	4770      	bx	lr

0800705e <fabsf>:
 800705e:	ee10 3a10 	vmov	r3, s0
 8007062:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007066:	ee00 3a10 	vmov	s0, r3
 800706a:	4770      	bx	lr

0800706c <logf>:
 800706c:	ee10 3a10 	vmov	r3, s0
 8007070:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007074:	b410      	push	{r4}
 8007076:	d055      	beq.n	8007124 <logf+0xb8>
 8007078:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800707c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8007080:	d31a      	bcc.n	80070b8 <logf+0x4c>
 8007082:	005a      	lsls	r2, r3, #1
 8007084:	d104      	bne.n	8007090 <logf+0x24>
 8007086:	f85d 4b04 	ldr.w	r4, [sp], #4
 800708a:	2001      	movs	r0, #1
 800708c:	f7ff bfc8 	b.w	8007020 <__math_divzerof>
 8007090:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007094:	d043      	beq.n	800711e <logf+0xb2>
 8007096:	2b00      	cmp	r3, #0
 8007098:	db02      	blt.n	80070a0 <logf+0x34>
 800709a:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800709e:	d303      	bcc.n	80070a8 <logf+0x3c>
 80070a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070a4:	f7ff bfcc 	b.w	8007040 <__math_invalidf>
 80070a8:	eddf 7a20 	vldr	s15, [pc, #128]	; 800712c <logf+0xc0>
 80070ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 80070b0:	ee10 3a10 	vmov	r3, s0
 80070b4:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 80070b8:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 80070bc:	491c      	ldr	r1, [pc, #112]	; (8007130 <logf+0xc4>)
 80070be:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 80070c2:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80070c6:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 80070ca:	0dd4      	lsrs	r4, r2, #23
 80070cc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80070d0:	05e4      	lsls	r4, r4, #23
 80070d2:	ed90 6b00 	vldr	d6, [r0]
 80070d6:	1b1b      	subs	r3, r3, r4
 80070d8:	ee07 3a90 	vmov	s15, r3
 80070dc:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 80070e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80070e4:	15d2      	asrs	r2, r2, #23
 80070e6:	eea6 0b07 	vfma.f64	d0, d6, d7
 80070ea:	ed90 6b02 	vldr	d6, [r0, #8]
 80070ee:	ee20 4b00 	vmul.f64	d4, d0, d0
 80070f2:	ee07 2a90 	vmov	s15, r2
 80070f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80070fe:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8007102:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8007106:	eea5 7b00 	vfma.f64	d7, d5, d0
 800710a:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800710e:	ee30 0b06 	vadd.f64	d0, d0, d6
 8007112:	eea5 7b04 	vfma.f64	d7, d5, d4
 8007116:	eea4 0b07 	vfma.f64	d0, d4, d7
 800711a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800711e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8007134 <logf+0xc8>
 8007128:	e7f9      	b.n	800711e <logf+0xb2>
 800712a:	bf00      	nop
 800712c:	4b000000 	.word	0x4b000000
 8007130:	08008470 	.word	0x08008470
 8007134:	00000000 	.word	0x00000000

08007138 <checkint>:
 8007138:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800713c:	2b7e      	cmp	r3, #126	; 0x7e
 800713e:	dd10      	ble.n	8007162 <checkint+0x2a>
 8007140:	2b96      	cmp	r3, #150	; 0x96
 8007142:	dc0c      	bgt.n	800715e <checkint+0x26>
 8007144:	2201      	movs	r2, #1
 8007146:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800714a:	fa02 f303 	lsl.w	r3, r2, r3
 800714e:	1e5a      	subs	r2, r3, #1
 8007150:	4202      	tst	r2, r0
 8007152:	d106      	bne.n	8007162 <checkint+0x2a>
 8007154:	4203      	tst	r3, r0
 8007156:	bf0c      	ite	eq
 8007158:	2002      	moveq	r0, #2
 800715a:	2001      	movne	r0, #1
 800715c:	4770      	bx	lr
 800715e:	2002      	movs	r0, #2
 8007160:	4770      	bx	lr
 8007162:	2000      	movs	r0, #0
 8007164:	4770      	bx	lr
	...

08007168 <powf>:
 8007168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800716a:	ee10 1a10 	vmov	r1, s0
 800716e:	ee10 4a90 	vmov	r4, s1
 8007172:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8007176:	0062      	lsls	r2, r4, #1
 8007178:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800717c:	eef0 7a40 	vmov.f32	s15, s0
 8007180:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8007184:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8007188:	d252      	bcs.n	8007230 <powf+0xc8>
 800718a:	4298      	cmp	r0, r3
 800718c:	d252      	bcs.n	8007234 <powf+0xcc>
 800718e:	2000      	movs	r0, #0
 8007190:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8007194:	4ca0      	ldr	r4, [pc, #640]	; (8007418 <powf+0x2b0>)
 8007196:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 800719a:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800719e:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 80071a2:	0dd2      	lsrs	r2, r2, #23
 80071a4:	05d2      	lsls	r2, r2, #23
 80071a6:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 80071aa:	1a8b      	subs	r3, r1, r2
 80071ac:	ed95 6b00 	vldr	d6, [r5]
 80071b0:	ee07 3a90 	vmov	s15, r3
 80071b4:	15d2      	asrs	r2, r2, #23
 80071b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80071ba:	eea6 5b07 	vfma.f64	d5, d6, d7
 80071be:	ed95 6b02 	vldr	d6, [r5, #8]
 80071c2:	ee25 2b05 	vmul.f64	d2, d5, d5
 80071c6:	ee22 1b02 	vmul.f64	d1, d2, d2
 80071ca:	ee07 2a90 	vmov	s15, r2
 80071ce:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 80071d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80071d6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80071da:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 80071de:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 80071e2:	eea5 3b06 	vfma.f64	d3, d5, d6
 80071e6:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 80071ea:	eea5 6b04 	vfma.f64	d6, d5, d4
 80071ee:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 80071f2:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 80071f6:	eea5 7b04 	vfma.f64	d7, d5, d4
 80071fa:	eea2 7b06 	vfma.f64	d7, d2, d6
 80071fe:	eea3 7b01 	vfma.f64	d7, d3, d1
 8007202:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007206:	ee10 3a90 	vmov	r3, s1
 800720a:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 800720e:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8007212:	429a      	cmp	r2, r3
 8007214:	f0c0 80b1 	bcc.w	800737a <powf+0x212>
 8007218:	ed9f 7b77 	vldr	d7, [pc, #476]	; 80073f8 <powf+0x290>
 800721c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007224:	dd79      	ble.n	800731a <powf+0x1b2>
 8007226:	b003      	add	sp, #12
 8007228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800722c:	f7ff bef2 	b.w	8007014 <__math_oflowf>
 8007230:	4298      	cmp	r0, r3
 8007232:	d32d      	bcc.n	8007290 <powf+0x128>
 8007234:	b952      	cbnz	r2, 800724c <powf+0xe4>
 8007236:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800723a:	005b      	lsls	r3, r3, #1
 800723c:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8007240:	f240 80c9 	bls.w	80073d6 <powf+0x26e>
 8007244:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8007248:	b003      	add	sp, #12
 800724a:	bd30      	pop	{r4, r5, pc}
 800724c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8007250:	d105      	bne.n	800725e <powf+0xf6>
 8007252:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8007256:	0064      	lsls	r4, r4, #1
 8007258:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800725c:	e7f0      	b.n	8007240 <powf+0xd8>
 800725e:	004b      	lsls	r3, r1, #1
 8007260:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8007264:	d8ee      	bhi.n	8007244 <powf+0xdc>
 8007266:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800726a:	d1eb      	bne.n	8007244 <powf+0xdc>
 800726c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8007270:	f000 80b1 	beq.w	80073d6 <powf+0x26e>
 8007274:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8007278:	ea6f 0404 	mvn.w	r4, r4
 800727c:	bf34      	ite	cc
 800727e:	2300      	movcc	r3, #0
 8007280:	2301      	movcs	r3, #1
 8007282:	0fe4      	lsrs	r4, r4, #31
 8007284:	42a3      	cmp	r3, r4
 8007286:	f040 80a9 	bne.w	80073dc <powf+0x274>
 800728a:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800728e:	e7db      	b.n	8007248 <powf+0xe0>
 8007290:	004d      	lsls	r5, r1, #1
 8007292:	1e6a      	subs	r2, r5, #1
 8007294:	429a      	cmp	r2, r3
 8007296:	d31c      	bcc.n	80072d2 <powf+0x16a>
 8007298:	2900      	cmp	r1, #0
 800729a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800729e:	da0f      	bge.n	80072c0 <powf+0x158>
 80072a0:	ee10 0a90 	vmov	r0, s1
 80072a4:	f7ff ff48 	bl	8007138 <checkint>
 80072a8:	2801      	cmp	r0, #1
 80072aa:	d109      	bne.n	80072c0 <powf+0x158>
 80072ac:	eeb1 0a40 	vneg.f32	s0, s0
 80072b0:	b945      	cbnz	r5, 80072c4 <powf+0x15c>
 80072b2:	2c00      	cmp	r4, #0
 80072b4:	dac8      	bge.n	8007248 <powf+0xe0>
 80072b6:	b003      	add	sp, #12
 80072b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072bc:	f7ff beb0 	b.w	8007020 <__math_divzerof>
 80072c0:	2000      	movs	r0, #0
 80072c2:	e7f5      	b.n	80072b0 <powf+0x148>
 80072c4:	2c00      	cmp	r4, #0
 80072c6:	dabf      	bge.n	8007248 <powf+0xe0>
 80072c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80072cc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80072d0:	e7ba      	b.n	8007248 <powf+0xe0>
 80072d2:	2900      	cmp	r1, #0
 80072d4:	da1f      	bge.n	8007316 <powf+0x1ae>
 80072d6:	ee10 0a90 	vmov	r0, s1
 80072da:	f7ff ff2d 	bl	8007138 <checkint>
 80072de:	b920      	cbnz	r0, 80072ea <powf+0x182>
 80072e0:	b003      	add	sp, #12
 80072e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072e6:	f7ff beab 	b.w	8007040 <__math_invalidf>
 80072ea:	2801      	cmp	r0, #1
 80072ec:	bf14      	ite	ne
 80072ee:	2000      	movne	r0, #0
 80072f0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80072f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80072f8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80072fc:	f4bf af48 	bcs.w	8007190 <powf+0x28>
 8007300:	ed9f 0a46 	vldr	s0, [pc, #280]	; 800741c <powf+0x2b4>
 8007304:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007308:	ee10 3a10 	vmov	r3, s0
 800730c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007310:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8007314:	e73c      	b.n	8007190 <powf+0x28>
 8007316:	2000      	movs	r0, #0
 8007318:	e7ee      	b.n	80072f8 <powf+0x190>
 800731a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8007400 <powf+0x298>
 800731e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007326:	dd10      	ble.n	800734a <powf+0x1e2>
 8007328:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800732c:	2800      	cmp	r0, #0
 800732e:	d158      	bne.n	80073e2 <powf+0x27a>
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	eddd 7a00 	vldr	s15, [sp]
 8007336:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800733a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800733e:	eef4 7a47 	vcmp.f32	s15, s14
 8007342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007346:	f47f af6e 	bne.w	8007226 <powf+0xbe>
 800734a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007408 <powf+0x2a0>
 800734e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007356:	d804      	bhi.n	8007362 <powf+0x1fa>
 8007358:	b003      	add	sp, #12
 800735a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800735e:	f7ff be4d 	b.w	8006ffc <__math_uflowf>
 8007362:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8007410 <powf+0x2a8>
 8007366:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800736a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800736e:	d504      	bpl.n	800737a <powf+0x212>
 8007370:	b003      	add	sp, #12
 8007372:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007376:	f7ff be47 	b.w	8007008 <__math_may_uflowf>
 800737a:	4b29      	ldr	r3, [pc, #164]	; (8007420 <powf+0x2b8>)
 800737c:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8007380:	ee30 6b07 	vadd.f64	d6, d0, d7
 8007384:	ee16 2a10 	vmov	r2, s12
 8007388:	ee36 7b47 	vsub.f64	d7, d6, d7
 800738c:	f002 011f 	and.w	r1, r2, #31
 8007390:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8007394:	ee30 7b47 	vsub.f64	d7, d0, d7
 8007398:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800739c:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 80073a0:	ee27 4b07 	vmul.f64	d4, d7, d7
 80073a4:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 80073a8:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 80073ac:	eea7 6b05 	vfma.f64	d6, d7, d5
 80073b0:	686d      	ldr	r5, [r5, #4]
 80073b2:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 80073b6:	1882      	adds	r2, r0, r2
 80073b8:	2300      	movs	r3, #0
 80073ba:	1918      	adds	r0, r3, r4
 80073bc:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 80073c0:	eea7 0b05 	vfma.f64	d0, d7, d5
 80073c4:	ec41 0b17 	vmov	d7, r0, r1
 80073c8:	eea6 0b04 	vfma.f64	d0, d6, d4
 80073cc:	ee20 0b07 	vmul.f64	d0, d0, d7
 80073d0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80073d4:	e738      	b.n	8007248 <powf+0xe0>
 80073d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80073da:	e735      	b.n	8007248 <powf+0xe0>
 80073dc:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8007424 <powf+0x2bc>
 80073e0:	e732      	b.n	8007248 <powf+0xe0>
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	eddd 7a01 	vldr	s15, [sp, #4]
 80073e8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80073ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80073f0:	e7a5      	b.n	800733e <powf+0x1d6>
 80073f2:	bf00      	nop
 80073f4:	f3af 8000 	nop.w
 80073f8:	ffd1d571 	.word	0xffd1d571
 80073fc:	405fffff 	.word	0x405fffff
 8007400:	ffa3aae2 	.word	0xffa3aae2
 8007404:	405fffff 	.word	0x405fffff
 8007408:	00000000 	.word	0x00000000
 800740c:	c062c000 	.word	0xc062c000
 8007410:	00000000 	.word	0x00000000
 8007414:	c062a000 	.word	0xc062a000
 8007418:	08008590 	.word	0x08008590
 800741c:	4b000000 	.word	0x4b000000
 8007420:	08008328 	.word	0x08008328
 8007424:	00000000 	.word	0x00000000

08007428 <tanf>:
 8007428:	ee10 3a10 	vmov	r3, s0
 800742c:	b507      	push	{r0, r1, r2, lr}
 800742e:	4a12      	ldr	r2, [pc, #72]	; (8007478 <tanf+0x50>)
 8007430:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007434:	4293      	cmp	r3, r2
 8007436:	dc07      	bgt.n	8007448 <tanf+0x20>
 8007438:	eddf 0a10 	vldr	s1, [pc, #64]	; 800747c <tanf+0x54>
 800743c:	2001      	movs	r0, #1
 800743e:	b003      	add	sp, #12
 8007440:	f85d eb04 	ldr.w	lr, [sp], #4
 8007444:	f000 bca6 	b.w	8007d94 <__kernel_tanf>
 8007448:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800744c:	db04      	blt.n	8007458 <tanf+0x30>
 800744e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007452:	b003      	add	sp, #12
 8007454:	f85d fb04 	ldr.w	pc, [sp], #4
 8007458:	4668      	mov	r0, sp
 800745a:	f000 f8e9 	bl	8007630 <__ieee754_rem_pio2f>
 800745e:	0040      	lsls	r0, r0, #1
 8007460:	f000 0002 	and.w	r0, r0, #2
 8007464:	eddd 0a01 	vldr	s1, [sp, #4]
 8007468:	ed9d 0a00 	vldr	s0, [sp]
 800746c:	f1c0 0001 	rsb	r0, r0, #1
 8007470:	f000 fc90 	bl	8007d94 <__kernel_tanf>
 8007474:	e7ed      	b.n	8007452 <tanf+0x2a>
 8007476:	bf00      	nop
 8007478:	3f490fda 	.word	0x3f490fda
 800747c:	00000000 	.word	0x00000000

08007480 <tanhf>:
 8007480:	b510      	push	{r4, lr}
 8007482:	ee10 4a10 	vmov	r4, s0
 8007486:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800748a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800748e:	ed2d 8b02 	vpush	{d8}
 8007492:	eeb0 7a40 	vmov.f32	s14, s0
 8007496:	db0c      	blt.n	80074b2 <tanhf+0x32>
 8007498:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800749c:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80074a0:	2c00      	cmp	r4, #0
 80074a2:	bfac      	ite	ge
 80074a4:	ee37 0a80 	vaddge.f32	s0, s15, s0
 80074a8:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 80074ac:	ecbd 8b02 	vpop	{d8}
 80074b0:	bd10      	pop	{r4, pc}
 80074b2:	4a1b      	ldr	r2, [pc, #108]	; (8007520 <tanhf+0xa0>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	dc30      	bgt.n	800751a <tanhf+0x9a>
 80074b8:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 80074bc:	da06      	bge.n	80074cc <tanhf+0x4c>
 80074be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80074c2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80074c6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80074ca:	e7ef      	b.n	80074ac <tanhf+0x2c>
 80074cc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80074d0:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 80074d4:	db12      	blt.n	80074fc <tanhf+0x7c>
 80074d6:	f7ff fdc2 	bl	800705e <fabsf>
 80074da:	ee30 0a00 	vadd.f32	s0, s0, s0
 80074de:	f000 fd39 	bl	8007f54 <expm1f>
 80074e2:	ee30 0a08 	vadd.f32	s0, s0, s16
 80074e6:	eec8 7a00 	vdiv.f32	s15, s16, s0
 80074ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80074ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80074f2:	2c00      	cmp	r4, #0
 80074f4:	bfb8      	it	lt
 80074f6:	eeb1 0a40 	vneglt.f32	s0, s0
 80074fa:	e7d7      	b.n	80074ac <tanhf+0x2c>
 80074fc:	f7ff fdaf 	bl	800705e <fabsf>
 8007500:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8007504:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007508:	f000 fd24 	bl	8007f54 <expm1f>
 800750c:	ee70 7a08 	vadd.f32	s15, s0, s16
 8007510:	eeb1 7a40 	vneg.f32	s14, s0
 8007514:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8007518:	e7eb      	b.n	80074f2 <tanhf+0x72>
 800751a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800751e:	e7e8      	b.n	80074f2 <tanhf+0x72>
 8007520:	41afffff 	.word	0x41afffff

08007524 <log10f>:
 8007524:	b508      	push	{r3, lr}
 8007526:	ed2d 8b02 	vpush	{d8}
 800752a:	eeb0 8a40 	vmov.f32	s16, s0
 800752e:	f000 f827 	bl	8007580 <__ieee754_log10f>
 8007532:	eeb4 8a48 	vcmp.f32	s16, s16
 8007536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800753a:	d60f      	bvs.n	800755c <log10f+0x38>
 800753c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007544:	d80a      	bhi.n	800755c <log10f+0x38>
 8007546:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800754a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800754e:	d108      	bne.n	8007562 <log10f+0x3e>
 8007550:	f7ff fd0c 	bl	8006f6c <__errno>
 8007554:	2322      	movs	r3, #34	; 0x22
 8007556:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8007578 <log10f+0x54>
 800755a:	6003      	str	r3, [r0, #0]
 800755c:	ecbd 8b02 	vpop	{d8}
 8007560:	bd08      	pop	{r3, pc}
 8007562:	f7ff fd03 	bl	8006f6c <__errno>
 8007566:	ecbd 8b02 	vpop	{d8}
 800756a:	2321      	movs	r3, #33	; 0x21
 800756c:	6003      	str	r3, [r0, #0]
 800756e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007572:	4802      	ldr	r0, [pc, #8]	; (800757c <log10f+0x58>)
 8007574:	f000 be4a 	b.w	800820c <nanf>
 8007578:	ff800000 	.word	0xff800000
 800757c:	080086b8 	.word	0x080086b8

08007580 <__ieee754_log10f>:
 8007580:	b508      	push	{r3, lr}
 8007582:	ee10 2a10 	vmov	r2, s0
 8007586:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800758a:	ed2d 8b02 	vpush	{d8}
 800758e:	d108      	bne.n	80075a2 <__ieee754_log10f+0x22>
 8007590:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007618 <__ieee754_log10f+0x98>
 8007594:	eddf 7a21 	vldr	s15, [pc, #132]	; 800761c <__ieee754_log10f+0x9c>
 8007598:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800759c:	ecbd 8b02 	vpop	{d8}
 80075a0:	bd08      	pop	{r3, pc}
 80075a2:	2a00      	cmp	r2, #0
 80075a4:	da02      	bge.n	80075ac <__ieee754_log10f+0x2c>
 80075a6:	ee30 7a40 	vsub.f32	s14, s0, s0
 80075aa:	e7f3      	b.n	8007594 <__ieee754_log10f+0x14>
 80075ac:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80075b0:	db02      	blt.n	80075b8 <__ieee754_log10f+0x38>
 80075b2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80075b6:	e7f1      	b.n	800759c <__ieee754_log10f+0x1c>
 80075b8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80075bc:	bfbf      	itttt	lt
 80075be:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8007620 <__ieee754_log10f+0xa0>
 80075c2:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80075c6:	f06f 0118 	mvnlt.w	r1, #24
 80075ca:	ee17 2a90 	vmovlt	r2, s15
 80075ce:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80075d2:	bfa8      	it	ge
 80075d4:	2100      	movge	r1, #0
 80075d6:	3b7f      	subs	r3, #127	; 0x7f
 80075d8:	440b      	add	r3, r1
 80075da:	0fd9      	lsrs	r1, r3, #31
 80075dc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80075e0:	ee07 3a90 	vmov	s15, r3
 80075e4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80075e8:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 80075ec:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80075f0:	ee00 3a10 	vmov	s0, r3
 80075f4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80075f8:	f7ff fd38 	bl	800706c <logf>
 80075fc:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007624 <__ieee754_log10f+0xa4>
 8007600:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007604:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007628 <__ieee754_log10f+0xa8>
 8007608:	eea8 0a27 	vfma.f32	s0, s16, s15
 800760c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800762c <__ieee754_log10f+0xac>
 8007610:	eea8 0a27 	vfma.f32	s0, s16, s15
 8007614:	e7c2      	b.n	800759c <__ieee754_log10f+0x1c>
 8007616:	bf00      	nop
 8007618:	cc000000 	.word	0xcc000000
 800761c:	00000000 	.word	0x00000000
 8007620:	4c000000 	.word	0x4c000000
 8007624:	3ede5bd9 	.word	0x3ede5bd9
 8007628:	355427db 	.word	0x355427db
 800762c:	3e9a2080 	.word	0x3e9a2080

08007630 <__ieee754_rem_pio2f>:
 8007630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007632:	ee10 6a10 	vmov	r6, s0
 8007636:	4b8e      	ldr	r3, [pc, #568]	; (8007870 <__ieee754_rem_pio2f+0x240>)
 8007638:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800763c:	429d      	cmp	r5, r3
 800763e:	b087      	sub	sp, #28
 8007640:	eef0 7a40 	vmov.f32	s15, s0
 8007644:	4604      	mov	r4, r0
 8007646:	dc05      	bgt.n	8007654 <__ieee754_rem_pio2f+0x24>
 8007648:	2300      	movs	r3, #0
 800764a:	ed80 0a00 	vstr	s0, [r0]
 800764e:	6043      	str	r3, [r0, #4]
 8007650:	2000      	movs	r0, #0
 8007652:	e01a      	b.n	800768a <__ieee754_rem_pio2f+0x5a>
 8007654:	4b87      	ldr	r3, [pc, #540]	; (8007874 <__ieee754_rem_pio2f+0x244>)
 8007656:	429d      	cmp	r5, r3
 8007658:	dc46      	bgt.n	80076e8 <__ieee754_rem_pio2f+0xb8>
 800765a:	2e00      	cmp	r6, #0
 800765c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8007878 <__ieee754_rem_pio2f+0x248>
 8007660:	4b86      	ldr	r3, [pc, #536]	; (800787c <__ieee754_rem_pio2f+0x24c>)
 8007662:	f025 050f 	bic.w	r5, r5, #15
 8007666:	dd1f      	ble.n	80076a8 <__ieee754_rem_pio2f+0x78>
 8007668:	429d      	cmp	r5, r3
 800766a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800766e:	d00e      	beq.n	800768e <__ieee754_rem_pio2f+0x5e>
 8007670:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8007880 <__ieee754_rem_pio2f+0x250>
 8007674:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007678:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800767c:	ed80 0a00 	vstr	s0, [r0]
 8007680:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007684:	2001      	movs	r0, #1
 8007686:	edc4 7a01 	vstr	s15, [r4, #4]
 800768a:	b007      	add	sp, #28
 800768c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800768e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8007884 <__ieee754_rem_pio2f+0x254>
 8007692:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8007888 <__ieee754_rem_pio2f+0x258>
 8007696:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800769a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800769e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80076a2:	edc0 6a00 	vstr	s13, [r0]
 80076a6:	e7eb      	b.n	8007680 <__ieee754_rem_pio2f+0x50>
 80076a8:	429d      	cmp	r5, r3
 80076aa:	ee77 7a80 	vadd.f32	s15, s15, s0
 80076ae:	d00e      	beq.n	80076ce <__ieee754_rem_pio2f+0x9e>
 80076b0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007880 <__ieee754_rem_pio2f+0x250>
 80076b4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80076b8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80076bc:	ed80 0a00 	vstr	s0, [r0]
 80076c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076c8:	edc4 7a01 	vstr	s15, [r4, #4]
 80076cc:	e7dd      	b.n	800768a <__ieee754_rem_pio2f+0x5a>
 80076ce:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8007884 <__ieee754_rem_pio2f+0x254>
 80076d2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8007888 <__ieee754_rem_pio2f+0x258>
 80076d6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80076da:	ee77 6a87 	vadd.f32	s13, s15, s14
 80076de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80076e2:	edc0 6a00 	vstr	s13, [r0]
 80076e6:	e7eb      	b.n	80076c0 <__ieee754_rem_pio2f+0x90>
 80076e8:	4b68      	ldr	r3, [pc, #416]	; (800788c <__ieee754_rem_pio2f+0x25c>)
 80076ea:	429d      	cmp	r5, r3
 80076ec:	dc72      	bgt.n	80077d4 <__ieee754_rem_pio2f+0x1a4>
 80076ee:	f7ff fcb6 	bl	800705e <fabsf>
 80076f2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007890 <__ieee754_rem_pio2f+0x260>
 80076f6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80076fa:	eee0 7a07 	vfma.f32	s15, s0, s14
 80076fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007702:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007706:	ee17 0a90 	vmov	r0, s15
 800770a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007878 <__ieee754_rem_pio2f+0x248>
 800770e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007712:	281f      	cmp	r0, #31
 8007714:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007880 <__ieee754_rem_pio2f+0x250>
 8007718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800771c:	eeb1 6a47 	vneg.f32	s12, s14
 8007720:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007724:	ee16 2a90 	vmov	r2, s13
 8007728:	dc1c      	bgt.n	8007764 <__ieee754_rem_pio2f+0x134>
 800772a:	495a      	ldr	r1, [pc, #360]	; (8007894 <__ieee754_rem_pio2f+0x264>)
 800772c:	1e47      	subs	r7, r0, #1
 800772e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8007732:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007736:	428b      	cmp	r3, r1
 8007738:	d014      	beq.n	8007764 <__ieee754_rem_pio2f+0x134>
 800773a:	6022      	str	r2, [r4, #0]
 800773c:	ed94 7a00 	vldr	s14, [r4]
 8007740:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007744:	2e00      	cmp	r6, #0
 8007746:	ee30 0a67 	vsub.f32	s0, s0, s15
 800774a:	ed84 0a01 	vstr	s0, [r4, #4]
 800774e:	da9c      	bge.n	800768a <__ieee754_rem_pio2f+0x5a>
 8007750:	eeb1 7a47 	vneg.f32	s14, s14
 8007754:	eeb1 0a40 	vneg.f32	s0, s0
 8007758:	ed84 7a00 	vstr	s14, [r4]
 800775c:	ed84 0a01 	vstr	s0, [r4, #4]
 8007760:	4240      	negs	r0, r0
 8007762:	e792      	b.n	800768a <__ieee754_rem_pio2f+0x5a>
 8007764:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007768:	15eb      	asrs	r3, r5, #23
 800776a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800776e:	2d08      	cmp	r5, #8
 8007770:	dde3      	ble.n	800773a <__ieee754_rem_pio2f+0x10a>
 8007772:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007884 <__ieee754_rem_pio2f+0x254>
 8007776:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007888 <__ieee754_rem_pio2f+0x258>
 800777a:	eef0 6a40 	vmov.f32	s13, s0
 800777e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007782:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007786:	eea6 0a27 	vfma.f32	s0, s12, s15
 800778a:	eef0 7a40 	vmov.f32	s15, s0
 800778e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8007792:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8007796:	ee15 2a90 	vmov	r2, s11
 800779a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800779e:	1a5b      	subs	r3, r3, r1
 80077a0:	2b19      	cmp	r3, #25
 80077a2:	dc04      	bgt.n	80077ae <__ieee754_rem_pio2f+0x17e>
 80077a4:	edc4 5a00 	vstr	s11, [r4]
 80077a8:	eeb0 0a66 	vmov.f32	s0, s13
 80077ac:	e7c6      	b.n	800773c <__ieee754_rem_pio2f+0x10c>
 80077ae:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007898 <__ieee754_rem_pio2f+0x268>
 80077b2:	eeb0 0a66 	vmov.f32	s0, s13
 80077b6:	eea6 0a25 	vfma.f32	s0, s12, s11
 80077ba:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80077be:	eddf 6a37 	vldr	s13, [pc, #220]	; 800789c <__ieee754_rem_pio2f+0x26c>
 80077c2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80077c6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80077ca:	ee30 7a67 	vsub.f32	s14, s0, s15
 80077ce:	ed84 7a00 	vstr	s14, [r4]
 80077d2:	e7b3      	b.n	800773c <__ieee754_rem_pio2f+0x10c>
 80077d4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80077d8:	db06      	blt.n	80077e8 <__ieee754_rem_pio2f+0x1b8>
 80077da:	ee70 7a40 	vsub.f32	s15, s0, s0
 80077de:	edc0 7a01 	vstr	s15, [r0, #4]
 80077e2:	edc0 7a00 	vstr	s15, [r0]
 80077e6:	e733      	b.n	8007650 <__ieee754_rem_pio2f+0x20>
 80077e8:	15ea      	asrs	r2, r5, #23
 80077ea:	3a86      	subs	r2, #134	; 0x86
 80077ec:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80077f0:	ee07 3a90 	vmov	s15, r3
 80077f4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80077f8:	eddf 6a29 	vldr	s13, [pc, #164]	; 80078a0 <__ieee754_rem_pio2f+0x270>
 80077fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007800:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007804:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007808:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800780c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007810:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007814:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007818:	ed8d 7a04 	vstr	s14, [sp, #16]
 800781c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007820:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007828:	edcd 7a05 	vstr	s15, [sp, #20]
 800782c:	d11e      	bne.n	800786c <__ieee754_rem_pio2f+0x23c>
 800782e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007836:	bf14      	ite	ne
 8007838:	2302      	movne	r3, #2
 800783a:	2301      	moveq	r3, #1
 800783c:	4919      	ldr	r1, [pc, #100]	; (80078a4 <__ieee754_rem_pio2f+0x274>)
 800783e:	9101      	str	r1, [sp, #4]
 8007840:	2102      	movs	r1, #2
 8007842:	9100      	str	r1, [sp, #0]
 8007844:	a803      	add	r0, sp, #12
 8007846:	4621      	mov	r1, r4
 8007848:	f000 f82e 	bl	80078a8 <__kernel_rem_pio2f>
 800784c:	2e00      	cmp	r6, #0
 800784e:	f6bf af1c 	bge.w	800768a <__ieee754_rem_pio2f+0x5a>
 8007852:	edd4 7a00 	vldr	s15, [r4]
 8007856:	eef1 7a67 	vneg.f32	s15, s15
 800785a:	edc4 7a00 	vstr	s15, [r4]
 800785e:	edd4 7a01 	vldr	s15, [r4, #4]
 8007862:	eef1 7a67 	vneg.f32	s15, s15
 8007866:	edc4 7a01 	vstr	s15, [r4, #4]
 800786a:	e779      	b.n	8007760 <__ieee754_rem_pio2f+0x130>
 800786c:	2303      	movs	r3, #3
 800786e:	e7e5      	b.n	800783c <__ieee754_rem_pio2f+0x20c>
 8007870:	3f490fd8 	.word	0x3f490fd8
 8007874:	4016cbe3 	.word	0x4016cbe3
 8007878:	3fc90f80 	.word	0x3fc90f80
 800787c:	3fc90fd0 	.word	0x3fc90fd0
 8007880:	37354443 	.word	0x37354443
 8007884:	37354400 	.word	0x37354400
 8007888:	2e85a308 	.word	0x2e85a308
 800788c:	43490f80 	.word	0x43490f80
 8007890:	3f22f984 	.word	0x3f22f984
 8007894:	080086bc 	.word	0x080086bc
 8007898:	2e85a300 	.word	0x2e85a300
 800789c:	248d3132 	.word	0x248d3132
 80078a0:	43800000 	.word	0x43800000
 80078a4:	0800873c 	.word	0x0800873c

080078a8 <__kernel_rem_pio2f>:
 80078a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ac:	ed2d 8b04 	vpush	{d8-d9}
 80078b0:	b0d9      	sub	sp, #356	; 0x164
 80078b2:	4688      	mov	r8, r1
 80078b4:	9002      	str	r0, [sp, #8]
 80078b6:	49bb      	ldr	r1, [pc, #748]	; (8007ba4 <__kernel_rem_pio2f+0x2fc>)
 80078b8:	9866      	ldr	r0, [sp, #408]	; 0x198
 80078ba:	9301      	str	r3, [sp, #4]
 80078bc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80078c0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80078c4:	1e59      	subs	r1, r3, #1
 80078c6:	1d13      	adds	r3, r2, #4
 80078c8:	db27      	blt.n	800791a <__kernel_rem_pio2f+0x72>
 80078ca:	f1b2 0b03 	subs.w	fp, r2, #3
 80078ce:	bf48      	it	mi
 80078d0:	f102 0b04 	addmi.w	fp, r2, #4
 80078d4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80078d8:	1c45      	adds	r5, r0, #1
 80078da:	00ec      	lsls	r4, r5, #3
 80078dc:	1a47      	subs	r7, r0, r1
 80078de:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8007bb4 <__kernel_rem_pio2f+0x30c>
 80078e2:	9403      	str	r4, [sp, #12]
 80078e4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80078e8:	eb0a 0c01 	add.w	ip, sl, r1
 80078ec:	ae1c      	add	r6, sp, #112	; 0x70
 80078ee:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80078f2:	2400      	movs	r4, #0
 80078f4:	4564      	cmp	r4, ip
 80078f6:	dd12      	ble.n	800791e <__kernel_rem_pio2f+0x76>
 80078f8:	9b01      	ldr	r3, [sp, #4]
 80078fa:	ac1c      	add	r4, sp, #112	; 0x70
 80078fc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007900:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8007904:	f04f 0c00 	mov.w	ip, #0
 8007908:	45d4      	cmp	ip, sl
 800790a:	dc27      	bgt.n	800795c <__kernel_rem_pio2f+0xb4>
 800790c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007910:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8007bb4 <__kernel_rem_pio2f+0x30c>
 8007914:	4627      	mov	r7, r4
 8007916:	2600      	movs	r6, #0
 8007918:	e016      	b.n	8007948 <__kernel_rem_pio2f+0xa0>
 800791a:	2000      	movs	r0, #0
 800791c:	e7dc      	b.n	80078d8 <__kernel_rem_pio2f+0x30>
 800791e:	42e7      	cmn	r7, r4
 8007920:	bf5d      	ittte	pl
 8007922:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8007926:	ee07 3a90 	vmovpl	s15, r3
 800792a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800792e:	eef0 7a47 	vmovmi.f32	s15, s14
 8007932:	ece6 7a01 	vstmia	r6!, {s15}
 8007936:	3401      	adds	r4, #1
 8007938:	e7dc      	b.n	80078f4 <__kernel_rem_pio2f+0x4c>
 800793a:	ecf9 6a01 	vldmia	r9!, {s13}
 800793e:	ed97 7a00 	vldr	s14, [r7]
 8007942:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007946:	3601      	adds	r6, #1
 8007948:	428e      	cmp	r6, r1
 800794a:	f1a7 0704 	sub.w	r7, r7, #4
 800794e:	ddf4      	ble.n	800793a <__kernel_rem_pio2f+0x92>
 8007950:	eceb 7a01 	vstmia	fp!, {s15}
 8007954:	f10c 0c01 	add.w	ip, ip, #1
 8007958:	3404      	adds	r4, #4
 800795a:	e7d5      	b.n	8007908 <__kernel_rem_pio2f+0x60>
 800795c:	ab08      	add	r3, sp, #32
 800795e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007962:	eddf 8a93 	vldr	s17, [pc, #588]	; 8007bb0 <__kernel_rem_pio2f+0x308>
 8007966:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8007bac <__kernel_rem_pio2f+0x304>
 800796a:	9304      	str	r3, [sp, #16]
 800796c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8007970:	4656      	mov	r6, sl
 8007972:	00b3      	lsls	r3, r6, #2
 8007974:	9305      	str	r3, [sp, #20]
 8007976:	ab58      	add	r3, sp, #352	; 0x160
 8007978:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800797c:	ac08      	add	r4, sp, #32
 800797e:	ab44      	add	r3, sp, #272	; 0x110
 8007980:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8007984:	46a4      	mov	ip, r4
 8007986:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800798a:	4637      	mov	r7, r6
 800798c:	2f00      	cmp	r7, #0
 800798e:	f1a0 0004 	sub.w	r0, r0, #4
 8007992:	dc4f      	bgt.n	8007a34 <__kernel_rem_pio2f+0x18c>
 8007994:	4628      	mov	r0, r5
 8007996:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800799a:	f000 fc3d 	bl	8008218 <scalbnf>
 800799e:	eeb0 8a40 	vmov.f32	s16, s0
 80079a2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80079a6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80079aa:	f000 fbed 	bl	8008188 <floorf>
 80079ae:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80079b2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80079b6:	2d00      	cmp	r5, #0
 80079b8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80079bc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80079c0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80079c4:	ee17 9a90 	vmov	r9, s15
 80079c8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80079cc:	dd44      	ble.n	8007a58 <__kernel_rem_pio2f+0x1b0>
 80079ce:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80079d2:	ab08      	add	r3, sp, #32
 80079d4:	f1c5 0e08 	rsb	lr, r5, #8
 80079d8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80079dc:	fa47 f00e 	asr.w	r0, r7, lr
 80079e0:	4481      	add	r9, r0
 80079e2:	fa00 f00e 	lsl.w	r0, r0, lr
 80079e6:	1a3f      	subs	r7, r7, r0
 80079e8:	f1c5 0007 	rsb	r0, r5, #7
 80079ec:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80079f0:	4107      	asrs	r7, r0
 80079f2:	2f00      	cmp	r7, #0
 80079f4:	dd3f      	ble.n	8007a76 <__kernel_rem_pio2f+0x1ce>
 80079f6:	f04f 0e00 	mov.w	lr, #0
 80079fa:	f109 0901 	add.w	r9, r9, #1
 80079fe:	4673      	mov	r3, lr
 8007a00:	4576      	cmp	r6, lr
 8007a02:	dc6b      	bgt.n	8007adc <__kernel_rem_pio2f+0x234>
 8007a04:	2d00      	cmp	r5, #0
 8007a06:	dd04      	ble.n	8007a12 <__kernel_rem_pio2f+0x16a>
 8007a08:	2d01      	cmp	r5, #1
 8007a0a:	d078      	beq.n	8007afe <__kernel_rem_pio2f+0x256>
 8007a0c:	2d02      	cmp	r5, #2
 8007a0e:	f000 8081 	beq.w	8007b14 <__kernel_rem_pio2f+0x26c>
 8007a12:	2f02      	cmp	r7, #2
 8007a14:	d12f      	bne.n	8007a76 <__kernel_rem_pio2f+0x1ce>
 8007a16:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007a1a:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007a1e:	b353      	cbz	r3, 8007a76 <__kernel_rem_pio2f+0x1ce>
 8007a20:	4628      	mov	r0, r5
 8007a22:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8007a26:	f000 fbf7 	bl	8008218 <scalbnf>
 8007a2a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8007a2e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007a32:	e020      	b.n	8007a76 <__kernel_rem_pio2f+0x1ce>
 8007a34:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007a38:	3f01      	subs	r7, #1
 8007a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a42:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007a46:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007a4a:	ecac 0a01 	vstmia	ip!, {s0}
 8007a4e:	ed90 0a00 	vldr	s0, [r0]
 8007a52:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007a56:	e799      	b.n	800798c <__kernel_rem_pio2f+0xe4>
 8007a58:	d105      	bne.n	8007a66 <__kernel_rem_pio2f+0x1be>
 8007a5a:	1e70      	subs	r0, r6, #1
 8007a5c:	ab08      	add	r3, sp, #32
 8007a5e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8007a62:	11ff      	asrs	r7, r7, #7
 8007a64:	e7c5      	b.n	80079f2 <__kernel_rem_pio2f+0x14a>
 8007a66:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007a6a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a72:	da31      	bge.n	8007ad8 <__kernel_rem_pio2f+0x230>
 8007a74:	2700      	movs	r7, #0
 8007a76:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a7e:	f040 809b 	bne.w	8007bb8 <__kernel_rem_pio2f+0x310>
 8007a82:	1e74      	subs	r4, r6, #1
 8007a84:	46a4      	mov	ip, r4
 8007a86:	2000      	movs	r0, #0
 8007a88:	45d4      	cmp	ip, sl
 8007a8a:	da4a      	bge.n	8007b22 <__kernel_rem_pio2f+0x27a>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	d07a      	beq.n	8007b86 <__kernel_rem_pio2f+0x2de>
 8007a90:	ab08      	add	r3, sp, #32
 8007a92:	3d08      	subs	r5, #8
 8007a94:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 8081 	beq.w	8007ba0 <__kernel_rem_pio2f+0x2f8>
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007aa4:	00a5      	lsls	r5, r4, #2
 8007aa6:	f000 fbb7 	bl	8008218 <scalbnf>
 8007aaa:	aa44      	add	r2, sp, #272	; 0x110
 8007aac:	1d2b      	adds	r3, r5, #4
 8007aae:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8007bb0 <__kernel_rem_pio2f+0x308>
 8007ab2:	18d1      	adds	r1, r2, r3
 8007ab4:	4622      	mov	r2, r4
 8007ab6:	2a00      	cmp	r2, #0
 8007ab8:	f280 80ae 	bge.w	8007c18 <__kernel_rem_pio2f+0x370>
 8007abc:	4622      	mov	r2, r4
 8007abe:	2a00      	cmp	r2, #0
 8007ac0:	f2c0 80cc 	blt.w	8007c5c <__kernel_rem_pio2f+0x3b4>
 8007ac4:	a944      	add	r1, sp, #272	; 0x110
 8007ac6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8007aca:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8007ba8 <__kernel_rem_pio2f+0x300>
 8007ace:	eddf 7a39 	vldr	s15, [pc, #228]	; 8007bb4 <__kernel_rem_pio2f+0x30c>
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	1aa1      	subs	r1, r4, r2
 8007ad6:	e0b6      	b.n	8007c46 <__kernel_rem_pio2f+0x39e>
 8007ad8:	2702      	movs	r7, #2
 8007ada:	e78c      	b.n	80079f6 <__kernel_rem_pio2f+0x14e>
 8007adc:	6820      	ldr	r0, [r4, #0]
 8007ade:	b94b      	cbnz	r3, 8007af4 <__kernel_rem_pio2f+0x24c>
 8007ae0:	b118      	cbz	r0, 8007aea <__kernel_rem_pio2f+0x242>
 8007ae2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8007ae6:	6020      	str	r0, [r4, #0]
 8007ae8:	2001      	movs	r0, #1
 8007aea:	f10e 0e01 	add.w	lr, lr, #1
 8007aee:	3404      	adds	r4, #4
 8007af0:	4603      	mov	r3, r0
 8007af2:	e785      	b.n	8007a00 <__kernel_rem_pio2f+0x158>
 8007af4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8007af8:	6020      	str	r0, [r4, #0]
 8007afa:	4618      	mov	r0, r3
 8007afc:	e7f5      	b.n	8007aea <__kernel_rem_pio2f+0x242>
 8007afe:	1e74      	subs	r4, r6, #1
 8007b00:	a808      	add	r0, sp, #32
 8007b02:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8007b06:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007b0a:	f10d 0c20 	add.w	ip, sp, #32
 8007b0e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8007b12:	e77e      	b.n	8007a12 <__kernel_rem_pio2f+0x16a>
 8007b14:	1e74      	subs	r4, r6, #1
 8007b16:	a808      	add	r0, sp, #32
 8007b18:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8007b1c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8007b20:	e7f3      	b.n	8007b0a <__kernel_rem_pio2f+0x262>
 8007b22:	ab08      	add	r3, sp, #32
 8007b24:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007b28:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8007b2c:	4318      	orrs	r0, r3
 8007b2e:	e7ab      	b.n	8007a88 <__kernel_rem_pio2f+0x1e0>
 8007b30:	f10c 0c01 	add.w	ip, ip, #1
 8007b34:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8007b38:	2c00      	cmp	r4, #0
 8007b3a:	d0f9      	beq.n	8007b30 <__kernel_rem_pio2f+0x288>
 8007b3c:	9b05      	ldr	r3, [sp, #20]
 8007b3e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8007b42:	eb0d 0003 	add.w	r0, sp, r3
 8007b46:	9b01      	ldr	r3, [sp, #4]
 8007b48:	18f4      	adds	r4, r6, r3
 8007b4a:	ab1c      	add	r3, sp, #112	; 0x70
 8007b4c:	1c77      	adds	r7, r6, #1
 8007b4e:	384c      	subs	r0, #76	; 0x4c
 8007b50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b54:	4466      	add	r6, ip
 8007b56:	42be      	cmp	r6, r7
 8007b58:	f6ff af0b 	blt.w	8007972 <__kernel_rem_pio2f+0xca>
 8007b5c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8007b60:	f8dd e008 	ldr.w	lr, [sp, #8]
 8007b64:	ee07 3a90 	vmov	s15, r3
 8007b68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b6c:	f04f 0c00 	mov.w	ip, #0
 8007b70:	ece4 7a01 	vstmia	r4!, {s15}
 8007b74:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8007bb4 <__kernel_rem_pio2f+0x30c>
 8007b78:	46a1      	mov	r9, r4
 8007b7a:	458c      	cmp	ip, r1
 8007b7c:	dd07      	ble.n	8007b8e <__kernel_rem_pio2f+0x2e6>
 8007b7e:	ece0 7a01 	vstmia	r0!, {s15}
 8007b82:	3701      	adds	r7, #1
 8007b84:	e7e7      	b.n	8007b56 <__kernel_rem_pio2f+0x2ae>
 8007b86:	9804      	ldr	r0, [sp, #16]
 8007b88:	f04f 0c01 	mov.w	ip, #1
 8007b8c:	e7d2      	b.n	8007b34 <__kernel_rem_pio2f+0x28c>
 8007b8e:	ecfe 6a01 	vldmia	lr!, {s13}
 8007b92:	ed39 7a01 	vldmdb	r9!, {s14}
 8007b96:	f10c 0c01 	add.w	ip, ip, #1
 8007b9a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007b9e:	e7ec      	b.n	8007b7a <__kernel_rem_pio2f+0x2d2>
 8007ba0:	3c01      	subs	r4, #1
 8007ba2:	e775      	b.n	8007a90 <__kernel_rem_pio2f+0x1e8>
 8007ba4:	08008a80 	.word	0x08008a80
 8007ba8:	08008a54 	.word	0x08008a54
 8007bac:	43800000 	.word	0x43800000
 8007bb0:	3b800000 	.word	0x3b800000
 8007bb4:	00000000 	.word	0x00000000
 8007bb8:	9b03      	ldr	r3, [sp, #12]
 8007bba:	eeb0 0a48 	vmov.f32	s0, s16
 8007bbe:	1a98      	subs	r0, r3, r2
 8007bc0:	f000 fb2a 	bl	8008218 <scalbnf>
 8007bc4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8007bac <__kernel_rem_pio2f+0x304>
 8007bc8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd0:	db19      	blt.n	8007c06 <__kernel_rem_pio2f+0x35e>
 8007bd2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007bb0 <__kernel_rem_pio2f+0x308>
 8007bd6:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007bda:	aa08      	add	r2, sp, #32
 8007bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007be0:	1c74      	adds	r4, r6, #1
 8007be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007be6:	3508      	adds	r5, #8
 8007be8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007bec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bf0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007bf4:	ee10 3a10 	vmov	r3, s0
 8007bf8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8007bfc:	ee17 3a90 	vmov	r3, s15
 8007c00:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007c04:	e74b      	b.n	8007a9e <__kernel_rem_pio2f+0x1f6>
 8007c06:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007c0a:	aa08      	add	r2, sp, #32
 8007c0c:	ee10 3a10 	vmov	r3, s0
 8007c10:	4634      	mov	r4, r6
 8007c12:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8007c16:	e742      	b.n	8007a9e <__kernel_rem_pio2f+0x1f6>
 8007c18:	a808      	add	r0, sp, #32
 8007c1a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8007c1e:	9001      	str	r0, [sp, #4]
 8007c20:	ee07 0a90 	vmov	s15, r0
 8007c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c28:	3a01      	subs	r2, #1
 8007c2a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007c2e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007c32:	ed61 7a01 	vstmdb	r1!, {s15}
 8007c36:	e73e      	b.n	8007ab6 <__kernel_rem_pio2f+0x20e>
 8007c38:	ecfc 6a01 	vldmia	ip!, {s13}
 8007c3c:	ecb6 7a01 	vldmia	r6!, {s14}
 8007c40:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007c44:	3001      	adds	r0, #1
 8007c46:	4550      	cmp	r0, sl
 8007c48:	dc01      	bgt.n	8007c4e <__kernel_rem_pio2f+0x3a6>
 8007c4a:	4288      	cmp	r0, r1
 8007c4c:	ddf4      	ble.n	8007c38 <__kernel_rem_pio2f+0x390>
 8007c4e:	a858      	add	r0, sp, #352	; 0x160
 8007c50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007c54:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8007c58:	3a01      	subs	r2, #1
 8007c5a:	e730      	b.n	8007abe <__kernel_rem_pio2f+0x216>
 8007c5c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8007c5e:	2a02      	cmp	r2, #2
 8007c60:	dc09      	bgt.n	8007c76 <__kernel_rem_pio2f+0x3ce>
 8007c62:	2a00      	cmp	r2, #0
 8007c64:	dc2a      	bgt.n	8007cbc <__kernel_rem_pio2f+0x414>
 8007c66:	d043      	beq.n	8007cf0 <__kernel_rem_pio2f+0x448>
 8007c68:	f009 0007 	and.w	r0, r9, #7
 8007c6c:	b059      	add	sp, #356	; 0x164
 8007c6e:	ecbd 8b04 	vpop	{d8-d9}
 8007c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c76:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8007c78:	2b03      	cmp	r3, #3
 8007c7a:	d1f5      	bne.n	8007c68 <__kernel_rem_pio2f+0x3c0>
 8007c7c:	ab30      	add	r3, sp, #192	; 0xc0
 8007c7e:	442b      	add	r3, r5
 8007c80:	461a      	mov	r2, r3
 8007c82:	4619      	mov	r1, r3
 8007c84:	4620      	mov	r0, r4
 8007c86:	2800      	cmp	r0, #0
 8007c88:	f1a1 0104 	sub.w	r1, r1, #4
 8007c8c:	dc51      	bgt.n	8007d32 <__kernel_rem_pio2f+0x48a>
 8007c8e:	4621      	mov	r1, r4
 8007c90:	2901      	cmp	r1, #1
 8007c92:	f1a2 0204 	sub.w	r2, r2, #4
 8007c96:	dc5c      	bgt.n	8007d52 <__kernel_rem_pio2f+0x4aa>
 8007c98:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8007bb4 <__kernel_rem_pio2f+0x30c>
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	2c01      	cmp	r4, #1
 8007ca0:	dc67      	bgt.n	8007d72 <__kernel_rem_pio2f+0x4ca>
 8007ca2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8007ca6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8007caa:	2f00      	cmp	r7, #0
 8007cac:	d167      	bne.n	8007d7e <__kernel_rem_pio2f+0x4d6>
 8007cae:	edc8 6a00 	vstr	s13, [r8]
 8007cb2:	ed88 7a01 	vstr	s14, [r8, #4]
 8007cb6:	edc8 7a02 	vstr	s15, [r8, #8]
 8007cba:	e7d5      	b.n	8007c68 <__kernel_rem_pio2f+0x3c0>
 8007cbc:	aa30      	add	r2, sp, #192	; 0xc0
 8007cbe:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8007bb4 <__kernel_rem_pio2f+0x30c>
 8007cc2:	4413      	add	r3, r2
 8007cc4:	4622      	mov	r2, r4
 8007cc6:	2a00      	cmp	r2, #0
 8007cc8:	da24      	bge.n	8007d14 <__kernel_rem_pio2f+0x46c>
 8007cca:	b34f      	cbz	r7, 8007d20 <__kernel_rem_pio2f+0x478>
 8007ccc:	eef1 7a47 	vneg.f32	s15, s14
 8007cd0:	edc8 7a00 	vstr	s15, [r8]
 8007cd4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8007cd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007cdc:	aa31      	add	r2, sp, #196	; 0xc4
 8007cde:	2301      	movs	r3, #1
 8007ce0:	429c      	cmp	r4, r3
 8007ce2:	da20      	bge.n	8007d26 <__kernel_rem_pio2f+0x47e>
 8007ce4:	b10f      	cbz	r7, 8007cea <__kernel_rem_pio2f+0x442>
 8007ce6:	eef1 7a67 	vneg.f32	s15, s15
 8007cea:	edc8 7a01 	vstr	s15, [r8, #4]
 8007cee:	e7bb      	b.n	8007c68 <__kernel_rem_pio2f+0x3c0>
 8007cf0:	aa30      	add	r2, sp, #192	; 0xc0
 8007cf2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8007bb4 <__kernel_rem_pio2f+0x30c>
 8007cf6:	4413      	add	r3, r2
 8007cf8:	2c00      	cmp	r4, #0
 8007cfa:	da05      	bge.n	8007d08 <__kernel_rem_pio2f+0x460>
 8007cfc:	b10f      	cbz	r7, 8007d02 <__kernel_rem_pio2f+0x45a>
 8007cfe:	eef1 7a67 	vneg.f32	s15, s15
 8007d02:	edc8 7a00 	vstr	s15, [r8]
 8007d06:	e7af      	b.n	8007c68 <__kernel_rem_pio2f+0x3c0>
 8007d08:	ed33 7a01 	vldmdb	r3!, {s14}
 8007d0c:	3c01      	subs	r4, #1
 8007d0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d12:	e7f1      	b.n	8007cf8 <__kernel_rem_pio2f+0x450>
 8007d14:	ed73 7a01 	vldmdb	r3!, {s15}
 8007d18:	3a01      	subs	r2, #1
 8007d1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d1e:	e7d2      	b.n	8007cc6 <__kernel_rem_pio2f+0x41e>
 8007d20:	eef0 7a47 	vmov.f32	s15, s14
 8007d24:	e7d4      	b.n	8007cd0 <__kernel_rem_pio2f+0x428>
 8007d26:	ecb2 7a01 	vldmia	r2!, {s14}
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d30:	e7d6      	b.n	8007ce0 <__kernel_rem_pio2f+0x438>
 8007d32:	edd1 7a00 	vldr	s15, [r1]
 8007d36:	edd1 6a01 	vldr	s13, [r1, #4]
 8007d3a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007d3e:	3801      	subs	r0, #1
 8007d40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d44:	ed81 7a00 	vstr	s14, [r1]
 8007d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d4c:	edc1 7a01 	vstr	s15, [r1, #4]
 8007d50:	e799      	b.n	8007c86 <__kernel_rem_pio2f+0x3de>
 8007d52:	edd2 7a00 	vldr	s15, [r2]
 8007d56:	edd2 6a01 	vldr	s13, [r2, #4]
 8007d5a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007d5e:	3901      	subs	r1, #1
 8007d60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d64:	ed82 7a00 	vstr	s14, [r2]
 8007d68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d6c:	edc2 7a01 	vstr	s15, [r2, #4]
 8007d70:	e78e      	b.n	8007c90 <__kernel_rem_pio2f+0x3e8>
 8007d72:	ed33 7a01 	vldmdb	r3!, {s14}
 8007d76:	3c01      	subs	r4, #1
 8007d78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d7c:	e78f      	b.n	8007c9e <__kernel_rem_pio2f+0x3f6>
 8007d7e:	eef1 6a66 	vneg.f32	s13, s13
 8007d82:	eeb1 7a47 	vneg.f32	s14, s14
 8007d86:	edc8 6a00 	vstr	s13, [r8]
 8007d8a:	ed88 7a01 	vstr	s14, [r8, #4]
 8007d8e:	eef1 7a67 	vneg.f32	s15, s15
 8007d92:	e790      	b.n	8007cb6 <__kernel_rem_pio2f+0x40e>

08007d94 <__kernel_tanf>:
 8007d94:	b508      	push	{r3, lr}
 8007d96:	ee10 3a10 	vmov	r3, s0
 8007d9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d9e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8007da2:	eef0 7a40 	vmov.f32	s15, s0
 8007da6:	da17      	bge.n	8007dd8 <__kernel_tanf+0x44>
 8007da8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8007dac:	ee17 1a10 	vmov	r1, s14
 8007db0:	bb41      	cbnz	r1, 8007e04 <__kernel_tanf+0x70>
 8007db2:	1c43      	adds	r3, r0, #1
 8007db4:	4313      	orrs	r3, r2
 8007db6:	d108      	bne.n	8007dca <__kernel_tanf+0x36>
 8007db8:	f7ff f951 	bl	800705e <fabsf>
 8007dbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dc0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8007dc8:	bd08      	pop	{r3, pc}
 8007dca:	2801      	cmp	r0, #1
 8007dcc:	d0fa      	beq.n	8007dc4 <__kernel_tanf+0x30>
 8007dce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007dd2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007dd6:	e7f5      	b.n	8007dc4 <__kernel_tanf+0x30>
 8007dd8:	494c      	ldr	r1, [pc, #304]	; (8007f0c <__kernel_tanf+0x178>)
 8007dda:	428a      	cmp	r2, r1
 8007ddc:	db12      	blt.n	8007e04 <__kernel_tanf+0x70>
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	bfb8      	it	lt
 8007de2:	eef1 7a40 	vneglt.f32	s15, s0
 8007de6:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8007f10 <__kernel_tanf+0x17c>
 8007dea:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007dee:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8007f14 <__kernel_tanf+0x180>
 8007df2:	bfb8      	it	lt
 8007df4:	eef1 0a60 	vneglt.f32	s1, s1
 8007df8:	ee70 0a60 	vsub.f32	s1, s0, s1
 8007dfc:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8007e00:	eddf 0a45 	vldr	s1, [pc, #276]	; 8007f18 <__kernel_tanf+0x184>
 8007e04:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007f1c <__kernel_tanf+0x188>
 8007e08:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8007f20 <__kernel_tanf+0x18c>
 8007e0c:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8007f24 <__kernel_tanf+0x190>
 8007e10:	493e      	ldr	r1, [pc, #248]	; (8007f0c <__kernel_tanf+0x178>)
 8007e12:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8007e16:	428a      	cmp	r2, r1
 8007e18:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8007e1c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8007e20:	eddf 5a41 	vldr	s11, [pc, #260]	; 8007f28 <__kernel_tanf+0x194>
 8007e24:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007e28:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8007f2c <__kernel_tanf+0x198>
 8007e2c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007e30:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007f30 <__kernel_tanf+0x19c>
 8007e34:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007e38:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8007f34 <__kernel_tanf+0x1a0>
 8007e3c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007e40:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8007f38 <__kernel_tanf+0x1a4>
 8007e44:	eee7 5a05 	vfma.f32	s11, s14, s10
 8007e48:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8007f3c <__kernel_tanf+0x1a8>
 8007e4c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8007e50:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8007f40 <__kernel_tanf+0x1ac>
 8007e54:	eee5 5a07 	vfma.f32	s11, s10, s14
 8007e58:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8007f44 <__kernel_tanf+0x1b0>
 8007e5c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8007e60:	eddf 5a39 	vldr	s11, [pc, #228]	; 8007f48 <__kernel_tanf+0x1b4>
 8007e64:	eee5 5a07 	vfma.f32	s11, s10, s14
 8007e68:	eeb0 7a46 	vmov.f32	s14, s12
 8007e6c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007e70:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8007e74:	eeb0 6a60 	vmov.f32	s12, s1
 8007e78:	eea7 6a05 	vfma.f32	s12, s14, s10
 8007e7c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8007f4c <__kernel_tanf+0x1b8>
 8007e80:	eee6 0a26 	vfma.f32	s1, s12, s13
 8007e84:	eee5 0a07 	vfma.f32	s1, s10, s14
 8007e88:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8007e8c:	db1d      	blt.n	8007eca <__kernel_tanf+0x136>
 8007e8e:	ee06 0a90 	vmov	s13, r0
 8007e92:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8007e96:	ee27 6a07 	vmul.f32	s12, s14, s14
 8007e9a:	ee37 7a00 	vadd.f32	s14, s14, s0
 8007e9e:	179b      	asrs	r3, r3, #30
 8007ea0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8007ea4:	f003 0302 	and.w	r3, r3, #2
 8007ea8:	f1c3 0301 	rsb	r3, r3, #1
 8007eac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007eb0:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8007eb4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007eb8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007ebc:	ee07 3a90 	vmov	s15, r3
 8007ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ec4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007ec8:	e77c      	b.n	8007dc4 <__kernel_tanf+0x30>
 8007eca:	2801      	cmp	r0, #1
 8007ecc:	d01b      	beq.n	8007f06 <__kernel_tanf+0x172>
 8007ece:	4b20      	ldr	r3, [pc, #128]	; (8007f50 <__kernel_tanf+0x1bc>)
 8007ed0:	ee17 2a10 	vmov	r2, s14
 8007ed4:	401a      	ands	r2, r3
 8007ed6:	ee06 2a10 	vmov	s12, r2
 8007eda:	ee76 7a67 	vsub.f32	s15, s12, s15
 8007ede:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007ee2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8007ee6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007eea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007eee:	ee16 2a90 	vmov	r2, s13
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	ee07 3a90 	vmov	s15, r3
 8007ef8:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007efc:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8007f00:	eee7 7a26 	vfma.f32	s15, s14, s13
 8007f04:	e75e      	b.n	8007dc4 <__kernel_tanf+0x30>
 8007f06:	eef0 7a47 	vmov.f32	s15, s14
 8007f0a:	e75b      	b.n	8007dc4 <__kernel_tanf+0x30>
 8007f0c:	3f2ca140 	.word	0x3f2ca140
 8007f10:	3f490fda 	.word	0x3f490fda
 8007f14:	33222168 	.word	0x33222168
 8007f18:	00000000 	.word	0x00000000
 8007f1c:	b79bae5f 	.word	0xb79bae5f
 8007f20:	38a3f445 	.word	0x38a3f445
 8007f24:	37d95384 	.word	0x37d95384
 8007f28:	3a1a26c8 	.word	0x3a1a26c8
 8007f2c:	3b6b6916 	.word	0x3b6b6916
 8007f30:	3cb327a4 	.word	0x3cb327a4
 8007f34:	3e088889 	.word	0x3e088889
 8007f38:	3895c07a 	.word	0x3895c07a
 8007f3c:	398137b9 	.word	0x398137b9
 8007f40:	3abede48 	.word	0x3abede48
 8007f44:	3c11371f 	.word	0x3c11371f
 8007f48:	3d5d0dd1 	.word	0x3d5d0dd1
 8007f4c:	3eaaaaab 	.word	0x3eaaaaab
 8007f50:	fffff000 	.word	0xfffff000

08007f54 <expm1f>:
 8007f54:	ee10 2a10 	vmov	r2, s0
 8007f58:	497c      	ldr	r1, [pc, #496]	; (800814c <expm1f+0x1f8>)
 8007f5a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8007f5e:	428b      	cmp	r3, r1
 8007f60:	d920      	bls.n	8007fa4 <expm1f+0x50>
 8007f62:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007f66:	d902      	bls.n	8007f6e <expm1f+0x1a>
 8007f68:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007f6c:	4770      	bx	lr
 8007f6e:	d105      	bne.n	8007f7c <expm1f+0x28>
 8007f70:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8007f74:	2a00      	cmp	r2, #0
 8007f76:	fe20 0a27 	vselge.f32	s0, s0, s15
 8007f7a:	4770      	bx	lr
 8007f7c:	2a00      	cmp	r2, #0
 8007f7e:	db05      	blt.n	8007f8c <expm1f+0x38>
 8007f80:	4973      	ldr	r1, [pc, #460]	; (8008150 <expm1f+0x1fc>)
 8007f82:	428b      	cmp	r3, r1
 8007f84:	d95c      	bls.n	8008040 <expm1f+0xec>
 8007f86:	2000      	movs	r0, #0
 8007f88:	f7ff b844 	b.w	8007014 <__math_oflowf>
 8007f8c:	eddf 7a71 	vldr	s15, [pc, #452]	; 8008154 <expm1f+0x200>
 8007f90:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007f94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f9c:	d550      	bpl.n	8008040 <expm1f+0xec>
 8007f9e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007fa2:	4770      	bx	lr
 8007fa4:	496c      	ldr	r1, [pc, #432]	; (8008158 <expm1f+0x204>)
 8007fa6:	428b      	cmp	r3, r1
 8007fa8:	d966      	bls.n	8008078 <expm1f+0x124>
 8007faa:	496c      	ldr	r1, [pc, #432]	; (800815c <expm1f+0x208>)
 8007fac:	428b      	cmp	r3, r1
 8007fae:	d847      	bhi.n	8008040 <expm1f+0xec>
 8007fb0:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8008160 <expm1f+0x20c>
 8007fb4:	2a00      	cmp	r2, #0
 8007fb6:	bfa7      	ittee	ge
 8007fb8:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8007fbc:	eddf 7a69 	vldrge	s15, [pc, #420]	; 8008164 <expm1f+0x210>
 8007fc0:	eddf 7a69 	vldrlt	s15, [pc, #420]	; 8008168 <expm1f+0x214>
 8007fc4:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8007fc8:	bfac      	ite	ge
 8007fca:	2301      	movge	r3, #1
 8007fcc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007fd0:	ee37 0a67 	vsub.f32	s0, s14, s15
 8007fd4:	ee37 7a40 	vsub.f32	s14, s14, s0
 8007fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fdc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8007fe0:	ee20 4a25 	vmul.f32	s8, s0, s11
 8007fe4:	ed9f 6a61 	vldr	s12, [pc, #388]	; 800816c <expm1f+0x218>
 8007fe8:	eddf 6a61 	vldr	s13, [pc, #388]	; 8008170 <expm1f+0x21c>
 8007fec:	ed9f 5a61 	vldr	s10, [pc, #388]	; 8008174 <expm1f+0x220>
 8007ff0:	ee20 7a04 	vmul.f32	s14, s0, s8
 8007ff4:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8007ff8:	eee7 6a06 	vfma.f32	s13, s14, s12
 8007ffc:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 8008178 <expm1f+0x224>
 8008000:	eea6 6a87 	vfma.f32	s12, s13, s14
 8008004:	eddf 6a5d 	vldr	s13, [pc, #372]	; 800817c <expm1f+0x228>
 8008008:	eee6 6a07 	vfma.f32	s13, s12, s14
 800800c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008010:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008014:	eef0 6a46 	vmov.f32	s13, s12
 8008018:	eee5 6a07 	vfma.f32	s13, s10, s14
 800801c:	eee4 4a66 	vfms.f32	s9, s8, s13
 8008020:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8008024:	eea0 4a64 	vfms.f32	s8, s0, s9
 8008028:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800802c:	eec5 6a04 	vdiv.f32	s13, s10, s8
 8008030:	ee66 6a87 	vmul.f32	s13, s13, s14
 8008034:	bb73      	cbnz	r3, 8008094 <expm1f+0x140>
 8008036:	eef0 7a47 	vmov.f32	s15, s14
 800803a:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800803e:	e024      	b.n	800808a <expm1f+0x136>
 8008040:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8008044:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008048:	2a00      	cmp	r2, #0
 800804a:	fe67 7a87 	vselge.f32	s15, s15, s14
 800804e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8008180 <expm1f+0x22c>
 8008052:	eddf 6a43 	vldr	s13, [pc, #268]	; 8008160 <expm1f+0x20c>
 8008056:	ee40 7a07 	vmla.f32	s15, s0, s14
 800805a:	eeb0 7a40 	vmov.f32	s14, s0
 800805e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008062:	ee17 3a90 	vmov	r3, s15
 8008066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800806a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800806e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008164 <expm1f+0x210>
 8008072:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008076:	e7ab      	b.n	8007fd0 <expm1f+0x7c>
 8008078:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800807c:	d208      	bcs.n	8008090 <expm1f+0x13c>
 800807e:	eddf 7a41 	vldr	s15, [pc, #260]	; 8008184 <expm1f+0x230>
 8008082:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008086:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800808a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800808e:	4770      	bx	lr
 8008090:	2300      	movs	r3, #0
 8008092:	e7a3      	b.n	8007fdc <expm1f+0x88>
 8008094:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008098:	1c5a      	adds	r2, r3, #1
 800809a:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800809e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080a2:	d106      	bne.n	80080b2 <expm1f+0x15e>
 80080a4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80080a8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80080ac:	eea7 0aa5 	vfma.f32	s0, s15, s11
 80080b0:	4770      	bx	lr
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d118      	bne.n	80080e8 <expm1f+0x194>
 80080b6:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 80080ba:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80080be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c2:	bf5b      	ittet	pl
 80080c4:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 80080c8:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 80080cc:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 80080d0:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 80080d4:	bf43      	ittte	mi
 80080d6:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 80080da:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 80080de:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 80080e2:	eeb0 0a46 	vmovpl.f32	s0, s12
 80080e6:	4770      	bx	lr
 80080e8:	1c5a      	adds	r2, r3, #1
 80080ea:	2a39      	cmp	r2, #57	; 0x39
 80080ec:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 80080f0:	d90b      	bls.n	800810a <expm1f+0x1b6>
 80080f2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80080f6:	ee36 0a40 	vsub.f32	s0, s12, s0
 80080fa:	ee10 3a10 	vmov	r3, s0
 80080fe:	440b      	add	r3, r1
 8008100:	ee00 3a10 	vmov	s0, r3
 8008104:	ee30 0a46 	vsub.f32	s0, s0, s12
 8008108:	4770      	bx	lr
 800810a:	2b16      	cmp	r3, #22
 800810c:	dc11      	bgt.n	8008132 <expm1f+0x1de>
 800810e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008112:	fa42 f303 	asr.w	r3, r2, r3
 8008116:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800811a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800811e:	ee07 3a90 	vmov	s15, r3
 8008122:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008126:	ee10 3a10 	vmov	r3, s0
 800812a:	440b      	add	r3, r1
 800812c:	ee00 3a10 	vmov	s0, r3
 8008130:	4770      	bx	lr
 8008132:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8008136:	05db      	lsls	r3, r3, #23
 8008138:	ee07 3a10 	vmov	s14, r3
 800813c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008140:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008144:	ee37 0a86 	vadd.f32	s0, s15, s12
 8008148:	e7ed      	b.n	8008126 <expm1f+0x1d2>
 800814a:	bf00      	nop
 800814c:	4195b843 	.word	0x4195b843
 8008150:	42b17217 	.word	0x42b17217
 8008154:	0da24260 	.word	0x0da24260
 8008158:	3eb17218 	.word	0x3eb17218
 800815c:	3f851591 	.word	0x3f851591
 8008160:	3f317180 	.word	0x3f317180
 8008164:	3717f7d1 	.word	0x3717f7d1
 8008168:	b717f7d1 	.word	0xb717f7d1
 800816c:	b457edbb 	.word	0xb457edbb
 8008170:	36867e54 	.word	0x36867e54
 8008174:	bd088889 	.word	0xbd088889
 8008178:	b8a670cd 	.word	0xb8a670cd
 800817c:	3ad00d01 	.word	0x3ad00d01
 8008180:	3fb8aa3b 	.word	0x3fb8aa3b
 8008184:	7149f2ca 	.word	0x7149f2ca

08008188 <floorf>:
 8008188:	ee10 3a10 	vmov	r3, s0
 800818c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008190:	3a7f      	subs	r2, #127	; 0x7f
 8008192:	2a16      	cmp	r2, #22
 8008194:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008198:	dc2a      	bgt.n	80081f0 <floorf+0x68>
 800819a:	2a00      	cmp	r2, #0
 800819c:	da11      	bge.n	80081c2 <floorf+0x3a>
 800819e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008200 <floorf+0x78>
 80081a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80081a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80081aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ae:	dd05      	ble.n	80081bc <floorf+0x34>
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	da23      	bge.n	80081fc <floorf+0x74>
 80081b4:	4a13      	ldr	r2, [pc, #76]	; (8008204 <floorf+0x7c>)
 80081b6:	2900      	cmp	r1, #0
 80081b8:	bf18      	it	ne
 80081ba:	4613      	movne	r3, r2
 80081bc:	ee00 3a10 	vmov	s0, r3
 80081c0:	4770      	bx	lr
 80081c2:	4911      	ldr	r1, [pc, #68]	; (8008208 <floorf+0x80>)
 80081c4:	4111      	asrs	r1, r2
 80081c6:	420b      	tst	r3, r1
 80081c8:	d0fa      	beq.n	80081c0 <floorf+0x38>
 80081ca:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008200 <floorf+0x78>
 80081ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 80081d2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80081d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081da:	ddef      	ble.n	80081bc <floorf+0x34>
 80081dc:	2b00      	cmp	r3, #0
 80081de:	bfbe      	ittt	lt
 80081e0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80081e4:	fa40 f202 	asrlt.w	r2, r0, r2
 80081e8:	189b      	addlt	r3, r3, r2
 80081ea:	ea23 0301 	bic.w	r3, r3, r1
 80081ee:	e7e5      	b.n	80081bc <floorf+0x34>
 80081f0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80081f4:	d3e4      	bcc.n	80081c0 <floorf+0x38>
 80081f6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80081fa:	4770      	bx	lr
 80081fc:	2300      	movs	r3, #0
 80081fe:	e7dd      	b.n	80081bc <floorf+0x34>
 8008200:	7149f2ca 	.word	0x7149f2ca
 8008204:	bf800000 	.word	0xbf800000
 8008208:	007fffff 	.word	0x007fffff

0800820c <nanf>:
 800820c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008214 <nanf+0x8>
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	7fc00000 	.word	0x7fc00000

08008218 <scalbnf>:
 8008218:	ee10 3a10 	vmov	r3, s0
 800821c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008220:	d024      	beq.n	800826c <scalbnf+0x54>
 8008222:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008226:	d302      	bcc.n	800822e <scalbnf+0x16>
 8008228:	ee30 0a00 	vadd.f32	s0, s0, s0
 800822c:	4770      	bx	lr
 800822e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008232:	d121      	bne.n	8008278 <scalbnf+0x60>
 8008234:	4b29      	ldr	r3, [pc, #164]	; (80082dc <scalbnf+0xc4>)
 8008236:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80082e0 <scalbnf+0xc8>
 800823a:	4298      	cmp	r0, r3
 800823c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008240:	db15      	blt.n	800826e <scalbnf+0x56>
 8008242:	ee10 3a10 	vmov	r3, s0
 8008246:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800824a:	3a19      	subs	r2, #25
 800824c:	4402      	add	r2, r0
 800824e:	2afe      	cmp	r2, #254	; 0xfe
 8008250:	dd14      	ble.n	800827c <scalbnf+0x64>
 8008252:	eddf 7a24 	vldr	s15, [pc, #144]	; 80082e4 <scalbnf+0xcc>
 8008256:	eddf 6a24 	vldr	s13, [pc, #144]	; 80082e8 <scalbnf+0xd0>
 800825a:	ee10 3a10 	vmov	r3, s0
 800825e:	eeb0 7a67 	vmov.f32	s14, s15
 8008262:	2b00      	cmp	r3, #0
 8008264:	fe67 7aa6 	vselge.f32	s15, s15, s13
 8008268:	ee27 0a27 	vmul.f32	s0, s14, s15
 800826c:	4770      	bx	lr
 800826e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80082ec <scalbnf+0xd4>
 8008272:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008276:	4770      	bx	lr
 8008278:	0dd2      	lsrs	r2, r2, #23
 800827a:	e7e7      	b.n	800824c <scalbnf+0x34>
 800827c:	2a00      	cmp	r2, #0
 800827e:	dd06      	ble.n	800828e <scalbnf+0x76>
 8008280:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008284:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008288:	ee00 3a10 	vmov	s0, r3
 800828c:	4770      	bx	lr
 800828e:	f112 0f16 	cmn.w	r2, #22
 8008292:	da19      	bge.n	80082c8 <scalbnf+0xb0>
 8008294:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008298:	4298      	cmp	r0, r3
 800829a:	ee10 3a10 	vmov	r3, s0
 800829e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082a2:	dd09      	ble.n	80082b8 <scalbnf+0xa0>
 80082a4:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80082e4 <scalbnf+0xcc>
 80082a8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80082e8 <scalbnf+0xd0>
 80082ac:	eef0 7a40 	vmov.f32	s15, s0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	fe00 0a07 	vseleq.f32	s0, s0, s14
 80082b6:	e7dc      	b.n	8008272 <scalbnf+0x5a>
 80082b8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80082ec <scalbnf+0xd4>
 80082bc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80082f0 <scalbnf+0xd8>
 80082c0:	eef0 7a40 	vmov.f32	s15, s0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	e7f4      	b.n	80082b2 <scalbnf+0x9a>
 80082c8:	3219      	adds	r2, #25
 80082ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80082ce:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80082d2:	eddf 7a08 	vldr	s15, [pc, #32]	; 80082f4 <scalbnf+0xdc>
 80082d6:	ee07 3a10 	vmov	s14, r3
 80082da:	e7c5      	b.n	8008268 <scalbnf+0x50>
 80082dc:	ffff3cb0 	.word	0xffff3cb0
 80082e0:	4c000000 	.word	0x4c000000
 80082e4:	7149f2ca 	.word	0x7149f2ca
 80082e8:	f149f2ca 	.word	0xf149f2ca
 80082ec:	0da24260 	.word	0x0da24260
 80082f0:	8da24260 	.word	0x8da24260
 80082f4:	33000000 	.word	0x33000000

080082f8 <_init>:
 80082f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fa:	bf00      	nop
 80082fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082fe:	bc08      	pop	{r3}
 8008300:	469e      	mov	lr, r3
 8008302:	4770      	bx	lr

08008304 <_fini>:
 8008304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008306:	bf00      	nop
 8008308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800830a:	bc08      	pop	{r3}
 800830c:	469e      	mov	lr, r3
 800830e:	4770      	bx	lr
