ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"CapSense_CSHL.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	CapSense_rawFilterData1,24,4
  20              		.comm	CapSense_sensorBaseline,24,4
  21              		.comm	CapSense_sensorBaselineLow,12,4
  22              		.comm	CapSense_sensorSignal,24,4
  23              		.comm	CapSense_sensorOnMask,2,4
  24              		.comm	CapSense_lowBaselineResetCnt,12,4
  25              		.global	CapSense_fingerThreshold
  26              		.data
  27              		.align	2
  28              		.type	CapSense_fingerThreshold, %object
  29              		.size	CapSense_fingerThreshold, 24
  30              	CapSense_fingerThreshold:
  31 0000 1400     		.short	20
  32 0002 1400     		.short	20
  33 0004 1400     		.short	20
  34 0006 1400     		.short	20
  35 0008 1400     		.short	20
  36 000a 1400     		.short	20
  37 000c 1400     		.short	20
  38 000e 1400     		.short	20
  39 0010 1400     		.short	20
  40 0012 1400     		.short	20
  41 0014 1400     		.short	20
  42 0016 1400     		.short	20
  43              		.global	CapSense_noiseThreshold
  44              		.align	2
  45              		.type	CapSense_noiseThreshold, %object
  46              		.size	CapSense_noiseThreshold, 24
  47              	CapSense_noiseThreshold:
  48 0018 0A00     		.short	10
  49 001a 0A00     		.short	10
  50 001c 0A00     		.short	10
  51 001e 0A00     		.short	10
  52 0020 0A00     		.short	10
  53 0022 0A00     		.short	10
  54 0024 0A00     		.short	10
  55 0026 0A00     		.short	10
  56 0028 0A00     		.short	10
  57 002a 0A00     		.short	10
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 2


  58 002c 0A00     		.short	10
  59 002e 0A00     		.short	10
  60              		.global	CapSense_hysteresis
  61              		.align	2
  62              		.type	CapSense_hysteresis, %object
  63              		.size	CapSense_hysteresis, 24
  64              	CapSense_hysteresis:
  65 0030 0C00     		.short	12
  66 0032 0C00     		.short	12
  67 0034 0C00     		.short	12
  68 0036 0C00     		.short	12
  69 0038 0C00     		.short	12
  70 003a 0C00     		.short	12
  71 003c 0C00     		.short	12
  72 003e 0C00     		.short	12
  73 0040 0C00     		.short	12
  74 0042 0C00     		.short	12
  75 0044 0C00     		.short	12
  76 0046 0C00     		.short	12
  77              		.global	CapSense_debounce
  78              		.align	2
  79              		.type	CapSense_debounce, %object
  80              		.size	CapSense_debounce, 12
  81              	CapSense_debounce:
  82 0048 01       		.byte	1
  83 0049 01       		.byte	1
  84 004a 01       		.byte	1
  85 004b 01       		.byte	1
  86 004c 01       		.byte	1
  87 004d 01       		.byte	1
  88 004e 01       		.byte	1
  89 004f 01       		.byte	1
  90 0050 01       		.byte	1
  91 0051 01       		.byte	1
  92 0052 01       		.byte	1
  93 0053 01       		.byte	1
  94              		.global	CapSense_debounceCounter
  95              		.bss
  96              		.align	2
  97              		.type	CapSense_debounceCounter, %object
  98              		.size	CapSense_debounceCounter, 13
  99              	CapSense_debounceCounter:
 100 0000 00000000 		.space	13
 100      00000000 
 100      00000000 
 100      00
 101              		.global	CapSense_rawDataIndex
 102              		.section	.rodata
 103              		.align	2
 104              		.type	CapSense_rawDataIndex, %object
 105              		.size	CapSense_rawDataIndex, 12
 106              	CapSense_rawDataIndex:
 107 0000 00       		.byte	0
 108 0001 01       		.byte	1
 109 0002 02       		.byte	2
 110 0003 03       		.byte	3
 111 0004 04       		.byte	4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 3


 112 0005 05       		.byte	5
 113 0006 06       		.byte	6
 114 0007 07       		.byte	7
 115 0008 08       		.byte	8
 116 0009 09       		.byte	9
 117 000a 0A       		.byte	10
 118 000b 0B       		.byte	11
 119              		.global	CapSense_numberOfSensors
 120              		.align	2
 121              		.type	CapSense_numberOfSensors, %object
 122              		.size	CapSense_numberOfSensors, 12
 123              	CapSense_numberOfSensors:
 124 000c 01       		.byte	1
 125 000d 01       		.byte	1
 126 000e 01       		.byte	1
 127 000f 01       		.byte	1
 128 0010 01       		.byte	1
 129 0011 01       		.byte	1
 130 0012 01       		.byte	1
 131 0013 01       		.byte	1
 132 0014 01       		.byte	1
 133 0015 01       		.byte	1
 134 0016 01       		.byte	1
 135 0017 01       		.byte	1
 136              		.section	.text.CapSense_BaseInit,"ax",%progbits
 137              		.align	2
 138              		.global	CapSense_BaseInit
 139              		.thumb
 140              		.thumb_func
 141              		.type	CapSense_BaseInit, %function
 142              	CapSense_BaseInit:
 143              	.LFB0:
 144              		.file 1 "Generated_Source\\PSoC5\\CapSense_CSHL.c"
   1:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/CapSense_CSHL.c **** * File Name: CapSense_CSHL.c
   3:Generated_Source\PSoC5/CapSense_CSHL.c **** * Version 3.50
   4:Generated_Source\PSoC5/CapSense_CSHL.c **** *
   5:Generated_Source\PSoC5/CapSense_CSHL.c **** * Description:
   6:Generated_Source\PSoC5/CapSense_CSHL.c **** *  This file provides the source code to the High Level APIs for the CapSesne
   7:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CSD component.
   8:Generated_Source\PSoC5/CapSense_CSHL.c **** *
   9:Generated_Source\PSoC5/CapSense_CSHL.c **** * Note:
  10:Generated_Source\PSoC5/CapSense_CSHL.c **** *
  11:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
  12:Generated_Source\PSoC5/CapSense_CSHL.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC5/CapSense_CSHL.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC5/CapSense_CSHL.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC5/CapSense_CSHL.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
  17:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  18:Generated_Source\PSoC5/CapSense_CSHL.c **** #include "CapSense_CSHL.h"
  19:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  20:Generated_Source\PSoC5/CapSense_CSHL.c **** /* Storage of filters data */
  21:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
  22:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) )
  23:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  24:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_rawFilterData1[CapSense_TOTAL_SENSOR_COUNT];
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 4


  25:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_rawFilterData2[CapSense_TOTAL_SENSOR_COUNT];
  26:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  27:Generated_Source\PSoC5/CapSense_CSHL.c **** #elif ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)   | \
  28:Generated_Source\PSoC5/CapSense_CSHL.c ****         (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)   | \
  29:Generated_Source\PSoC5/CapSense_CSHL.c ****         (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) | \
  30:Generated_Source\PSoC5/CapSense_CSHL.c ****         (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)   | \
  31:Generated_Source\PSoC5/CapSense_CSHL.c ****         (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER) )
  32:Generated_Source\PSoC5/CapSense_CSHL.c ****         
  33:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_rawFilterData1[CapSense_TOTAL_SENSOR_COUNT];
  34:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  35:Generated_Source\PSoC5/CapSense_CSHL.c **** #else
  36:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* No Raw filters */
  37:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif  /* ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) || \
  38:Generated_Source\PSoC5/CapSense_CSHL.c ****         *    (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) )
  39:Generated_Source\PSoC5/CapSense_CSHL.c ****         */
  40:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  41:Generated_Source\PSoC5/CapSense_CSHL.c **** uint16 CapSense_sensorBaseline[CapSense_TOTAL_SENSOR_COUNT];
  42:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_sensorBaselineLow[CapSense_TOTAL_SENSOR_COUNT];
  43:Generated_Source\PSoC5/CapSense_CSHL.c **** uint16 CapSense_sensorSignal[CapSense_TOTAL_SENSOR_COUNT];
  44:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_sensorOnMask[(((CapSense_TOTAL_SENSOR_COUNT - 1u) / 8u) + 1u)];
  45:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  46:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_lowBaselineResetCnt[CapSense_TOTAL_SENSOR_COUNT];
  47:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  48:Generated_Source\PSoC5/CapSense_CSHL.c **** uint16 CapSense_fingerThreshold[] = {
  49:Generated_Source\PSoC5/CapSense_CSHL.c ****     20u, 20u, 20u, 20u, 20u, 20u, 20u, 20u, 20u, 20u, 20u, 20u, 
  50:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  51:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  52:Generated_Source\PSoC5/CapSense_CSHL.c **** uint16 CapSense_noiseThreshold[] = {
  53:Generated_Source\PSoC5/CapSense_CSHL.c ****     10u, 10u, 10u, 10u, 10u, 10u, 10u, 10u, 10u, 10u, 10u, 10u, 
  54:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  55:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  56:Generated_Source\PSoC5/CapSense_CSHL.c **** uint16 CapSense_hysteresis[] = {
  57:Generated_Source\PSoC5/CapSense_CSHL.c ****     12u, 12u, 12u, 12u, 12u, 12u, 12u, 12u, 12u, 12u, 12u, 12u, 
  58:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  59:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  60:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_debounce[] = {
  61:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 
  62:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  63:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  64:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_debounceCounter[] = {
  65:Generated_Source\PSoC5/CapSense_CSHL.c ****     0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 
  66:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  67:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  68:Generated_Source\PSoC5/CapSense_CSHL.c **** const uint8 CYCODE CapSense_rawDataIndex[] = {
  69:Generated_Source\PSoC5/CapSense_CSHL.c ****     0u, /* Button0__BTN */
  70:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button1__BTN */
  71:Generated_Source\PSoC5/CapSense_CSHL.c ****     2u, /* Button2__BTN */
  72:Generated_Source\PSoC5/CapSense_CSHL.c ****     3u, /* Button3__BTN */
  73:Generated_Source\PSoC5/CapSense_CSHL.c ****     4u, /* Button4__BTN */
  74:Generated_Source\PSoC5/CapSense_CSHL.c ****     5u, /* Button5__BTN */
  75:Generated_Source\PSoC5/CapSense_CSHL.c ****     6u, /* Button6__BTN */
  76:Generated_Source\PSoC5/CapSense_CSHL.c ****     7u, /* Button7__BTN */
  77:Generated_Source\PSoC5/CapSense_CSHL.c ****     8u, /* Button8__BTN */
  78:Generated_Source\PSoC5/CapSense_CSHL.c ****     9u, /* Button9__BTN */
  79:Generated_Source\PSoC5/CapSense_CSHL.c ****     10u, /* Button10__BTN */
  80:Generated_Source\PSoC5/CapSense_CSHL.c ****     11u, /* Button11__BTN */
  81:Generated_Source\PSoC5/CapSense_CSHL.c **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 5


  82:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  83:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  84:Generated_Source\PSoC5/CapSense_CSHL.c **** const uint8 CYCODE CapSense_numberOfSensors[] = {
  85:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button0__BTN */
  86:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button1__BTN */
  87:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button2__BTN */
  88:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button3__BTN */
  89:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button4__BTN */
  90:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button5__BTN */
  91:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button6__BTN */
  92:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button7__BTN */
  93:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button8__BTN */
  94:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button9__BTN */
  95:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button10__BTN */
  96:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button11__BTN */
  97:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  98:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  99:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 100:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 101:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 102:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 103:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 104:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_BaseInit
 105:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 106:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 107:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 108:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Loads the CapSense_sensorBaseline[sensor] array element with an 
 109:Generated_Source\PSoC5/CapSense_CSHL.c **** *  initial value which is equal to raw count value. 
 110:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Resets to zero CapSense_sensorBaselineLow[sensor] and 
 111:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorSignal[sensor] array element.
 112:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Loads CapSense_debounceCounter[sensor] array element with initial 
 113:Generated_Source\PSoC5/CapSense_CSHL.c **** *  value equal CapSense_debounce[].
 114:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Loads the CapSense_rawFilterData2[sensor] and 
 115:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData2[sensor] array element with an 
 116:Generated_Source\PSoC5/CapSense_CSHL.c **** *  initial value which is equal raw count value if raw data filter is enabled.
 117:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 118:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 119:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensor:  Sensor number.
 120:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 121:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 122:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 123:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 124:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 125:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaseline[]    - used to store baseline value.
 126:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaselineLow[] - used to store fraction byte of 
 127:Generated_Source\PSoC5/CapSense_CSHL.c **** *  baseline value.
 128:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorSignal[]      - used to store diffence between 
 129:Generated_Source\PSoC5/CapSense_CSHL.c **** *  current value of raw data and previous value of baseline.
 130:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_debounceCounter[]   - used to store current debounce 
 131:Generated_Source\PSoC5/CapSense_CSHL.c **** *  counter of sensor. Widget which has this parameter are buttons, matrix 
 132:Generated_Source\PSoC5/CapSense_CSHL.c **** *  buttons, proximity, guard. All other widgets haven't debounce parameter
 133:Generated_Source\PSoC5/CapSense_CSHL.c **** *  and use the last element of this array with value 0 (it means no debounce).
 134:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData1[]    - used to store previous sample of 
 135:Generated_Source\PSoC5/CapSense_CSHL.c **** *  any enabled raw data filter.
 136:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData2[]    - used to store before previous sample
 137:Generated_Source\PSoC5/CapSense_CSHL.c **** *  of enabled raw data filter. Only required for median or average filters.
 138:Generated_Source\PSoC5/CapSense_CSHL.c **** *
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 6


 139:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 140:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 141:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 142:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 143:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_BaseInit(uint8 sensor) 
 144:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 145              		.loc 1 144 0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 16
 148              		@ frame_needed = 1, uses_anonymous_args = 0
 149              		@ link register save eliminated.
 150 0000 80B4     		push	{r7}
 151              		.cfi_def_cfa_offset 4
 152              		.cfi_offset 7, -4
 153 0002 85B0     		sub	sp, sp, #20
 154              		.cfi_def_cfa_offset 24
 155 0004 00AF     		add	r7, sp, #0
 156              		.cfi_def_cfa_register 7
 157 0006 0346     		mov	r3, r0
 158 0008 FB71     		strb	r3, [r7, #7]
 145:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if ((CapSense_TOTAL_BUTTONS_COUNT) || (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) || \
 146:Generated_Source\PSoC5/CapSense_CSHL.c ****          (CapSense_TOTAL_GENERICS_COUNT))
 147:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 widget = CapSense_widgetNumber[sensor];
 159              		.loc 1 147 0
 160 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 161 000c 134A     		ldr	r2, .L2
 162 000e D35C     		ldrb	r3, [r2, r3]
 163 0010 FB73     		strb	r3, [r7, #15]
 148:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif /* ((CapSense_TOTAL_MATRIX_BUTTONS_COUNT) || (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)) */
 149:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 150:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)
 151:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 debounceIndex;
 152:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) */
 153:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 154:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 155:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Exclude generic widget */
 156:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(widget < CapSense_END_OF_WIDGETS_INDEX)
 157:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 158:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 159:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 160:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Initialize Baseline */
 161:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_sensorBaseline[sensor] = CapSense_sensorRaw[sensor];
 164              		.loc 1 161 0
 165 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 166 0014 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 167 0016 1249     		ldr	r1, .L2+4
 168 0018 31F81210 		ldrh	r1, [r1, r2, lsl #1]
 169 001c 114A     		ldr	r2, .L2+8
 170 001e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 162:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_sensorBaselineLow[sensor] = 0u;
 171              		.loc 1 162 0
 172 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 173 0024 104A     		ldr	r2, .L2+12
 174 0026 0021     		movs	r1, #0
 175 0028 D154     		strb	r1, [r2, r3]
 163:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_sensorSignal[sensor] = 0u;
 176              		.loc 1 163 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 7


 177 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 178 002c 0F4A     		ldr	r2, .L2+16
 179 002e 0021     		movs	r1, #0
 180 0030 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 164:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 165:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_debounceCounter[widget] =  CapSense_debounce[widget];
 181              		.loc 1 165 0
 182 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 183 0036 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 184 0038 0D49     		ldr	r1, .L2+20
 185 003a 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 186 003c 0D4A     		ldr	r2, .L2+24
 187 003e D154     		strb	r1, [r2, r3]
 166:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 167:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 168:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if ((CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) |\
 169:Generated_Source\PSoC5/CapSense_CSHL.c ****          (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER))
 170:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 171:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = CapSense_sensorRaw[sensor];
 172:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData2[sensor] = CapSense_sensorRaw[sensor];
 173:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 174:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif ((CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) |\
 175:Generated_Source\PSoC5/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER) |\
 176:Generated_Source\PSoC5/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) |\
 177:Generated_Source\PSoC5/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER) |\
 178:Generated_Source\PSoC5/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER))
 179:Generated_Source\PSoC5/CapSense_CSHL.c ****             
 180:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = CapSense_sensorRaw[sensor];
 188              		.loc 1 180 0
 189 0040 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 190 0042 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 191 0044 0649     		ldr	r1, .L2+4
 192 0046 31F81210 		ldrh	r1, [r1, r2, lsl #1]
 193 004a 0B4A     		ldr	r2, .L2+28
 194 004c 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 181:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 182:Generated_Source\PSoC5/CapSense_CSHL.c ****     #else
 183:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* No Raw filters */
 184:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* ((CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
 185:Generated_Source\PSoC5/CapSense_CSHL.c ****             *   (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER))
 186:Generated_Source\PSoC5/CapSense_CSHL.c ****             */
 187:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 188:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 189:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Exclude generic widget */
 190:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 191:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 192:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 195              		.loc 1 192 0
 196 0050 00BF     		nop
 197 0052 1437     		adds	r7, r7, #20
 198              		.cfi_def_cfa_offset 4
 199 0054 BD46     		mov	sp, r7
 200              		.cfi_def_cfa_register 13
 201              		@ sp needed
 202 0056 80BC     		pop	{r7}
 203              		.cfi_restore 7
 204              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 8


 205 0058 7047     		bx	lr
 206              	.L3:
 207 005a 00BF     		.align	2
 208              	.L2:
 209 005c 00000000 		.word	CapSense_widgetNumber
 210 0060 00000000 		.word	CapSense_sensorRaw
 211 0064 00000000 		.word	CapSense_sensorBaseline
 212 0068 00000000 		.word	CapSense_sensorBaselineLow
 213 006c 00000000 		.word	CapSense_sensorSignal
 214 0070 00000000 		.word	CapSense_debounce
 215 0074 00000000 		.word	CapSense_debounceCounter
 216 0078 00000000 		.word	CapSense_rawFilterData1
 217              		.cfi_endproc
 218              	.LFE0:
 219              		.size	CapSense_BaseInit, .-CapSense_BaseInit
 220              		.section	.text.CapSense_InitializeSensorBaseline,"ax",%progbits
 221              		.align	2
 222              		.global	CapSense_InitializeSensorBaseline
 223              		.thumb
 224              		.thumb_func
 225              		.type	CapSense_InitializeSensorBaseline, %function
 226              	CapSense_InitializeSensorBaseline:
 227              	.LFB1:
 193:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 194:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 195:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 196:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_InitializeSensorBaseline
 197:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 198:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 199:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 200:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Loads the CapSense_sensorBaseline[sensor] array element with an 
 201:Generated_Source\PSoC5/CapSense_CSHL.c **** *  initial value by scanning the selected sensor (one channel design) or pair 
 202:Generated_Source\PSoC5/CapSense_CSHL.c **** *  of sensors (two channels designs). The raw count value is copied into the 
 203:Generated_Source\PSoC5/CapSense_CSHL.c **** *  baseline array for each sensor. The raw data filters are initialized if 
 204:Generated_Source\PSoC5/CapSense_CSHL.c **** *  enabled.
 205:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 206:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 207:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensor:  Sensor number.
 208:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 209:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 210:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 211:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 212:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 213:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 214:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 215:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 216:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_InitializeSensorBaseline(uint8 sensor)
 217:Generated_Source\PSoC5/CapSense_CSHL.c ****                           
 218:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 228              		.loc 1 218 0
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 8
 231              		@ frame_needed = 1, uses_anonymous_args = 0
 232 0000 80B5     		push	{r7, lr}
 233              		.cfi_def_cfa_offset 8
 234              		.cfi_offset 7, -8
 235              		.cfi_offset 14, -4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 9


 236 0002 82B0     		sub	sp, sp, #8
 237              		.cfi_def_cfa_offset 16
 238 0004 00AF     		add	r7, sp, #0
 239              		.cfi_def_cfa_register 7
 240 0006 0346     		mov	r3, r0
 241 0008 FB71     		strb	r3, [r7, #7]
 219:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Scan sensor */
 220:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_ScanSensor(sensor);
 242              		.loc 1 220 0
 243 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 244 000c 1846     		mov	r0, r3
 245 000e FFF7FEFF 		bl	CapSense_ScanSensor
 221:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(CapSense_IsBusy() != 0u)
 246              		.loc 1 221 0
 247 0012 00BF     		nop
 248              	.L5:
 249              		.loc 1 221 0 is_stmt 0 discriminator 1
 250 0014 FFF7FEFF 		bl	CapSense_IsBusy
 251 0018 0346     		mov	r3, r0
 252 001a 002B     		cmp	r3, #0
 253 001c FAD1     		bne	.L5
 222:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 223:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Wait while busy */
 224:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 225:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 226:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
 227:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Initialize Baseline, Signal and debounce counters */       
 228:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_BaseInit(sensor);
 254              		.loc 1 228 0 is_stmt 1
 255 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 256 0020 1846     		mov	r0, r3
 257 0022 FFF7FEFF 		bl	CapSense_BaseInit
 229:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 230:Generated_Source\PSoC5/CapSense_CSHL.c ****     #else
 231:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 232:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(sensor < CapSense_TOTAL_SENSOR_COUNT__CH0)
 233:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 234:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Initialize Baseline, Signal and debounce counters */ 
 235:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_BaseInit(sensor);
 236:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 237:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 238:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(sensor < CapSense_TOTAL_SENSOR_COUNT__CH1)
 239:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 240:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Initialize Baseline, Signal and debounce counters */
 241:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_BaseInit(sensor + CapSense_TOTAL_SENSOR_COUNT__CH0);
 242:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 243:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 244:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN) */
 245:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 258              		.loc 1 245 0
 259 0026 00BF     		nop
 260 0028 0837     		adds	r7, r7, #8
 261              		.cfi_def_cfa_offset 8
 262 002a BD46     		mov	sp, r7
 263              		.cfi_def_cfa_register 13
 264              		@ sp needed
 265 002c 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 10


 266              		.cfi_endproc
 267              	.LFE1:
 268              		.size	CapSense_InitializeSensorBaseline, .-CapSense_InitializeSensorBaseline
 269 002e 00BF     		.section	.text.CapSense_InitializeAllBaselines,"ax",%progbits
 270              		.align	2
 271              		.global	CapSense_InitializeAllBaselines
 272              		.thumb
 273              		.thumb_func
 274              		.type	CapSense_InitializeAllBaselines, %function
 275              	CapSense_InitializeAllBaselines:
 276              	.LFB2:
 246:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 247:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 248:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 249:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_InitializeAllBaselines
 250:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 251:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 252:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 253:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Uses the CapSense_InitializeSensorBaseline function to loads the 
 254:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaseline[] array with an initial values by scanning 
 255:Generated_Source\PSoC5/CapSense_CSHL.c **** *  all sensors. The raw count values are copied into the baseline array for 
 256:Generated_Source\PSoC5/CapSense_CSHL.c **** *  all sensors. The raw data filters are initialized if enabled.
 257:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 258:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 259:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 260:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 261:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 262:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 263:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 264:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 265:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 266:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 267:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 268:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_InitializeAllBaselines(void)
 269:Generated_Source\PSoC5/CapSense_CSHL.c ****                           
 270:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 277              		.loc 1 270 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 8
 280              		@ frame_needed = 1, uses_anonymous_args = 0
 281 0000 80B5     		push	{r7, lr}
 282              		.cfi_def_cfa_offset 8
 283              		.cfi_offset 7, -8
 284              		.cfi_offset 14, -4
 285 0002 82B0     		sub	sp, sp, #8
 286              		.cfi_def_cfa_offset 16
 287 0004 00AF     		add	r7, sp, #0
 288              		.cfi_def_cfa_register 7
 271:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 272:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 273:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* The baseline initialize by sensor of sensor pair */
 274:Generated_Source\PSoC5/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SCANSLOT_COUNT; i++)
 289              		.loc 1 274 0
 290 0006 0023     		movs	r3, #0
 291 0008 FB71     		strb	r3, [r7, #7]
 292 000a 06E0     		b	.L7
 293              	.L8:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 11


 275:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 276:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_InitializeSensorBaseline(i);
 294              		.loc 1 276 0 discriminator 3
 295 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 296 000e 1846     		mov	r0, r3
 297 0010 FFF7FEFF 		bl	CapSense_InitializeSensorBaseline
 274:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 298              		.loc 1 274 0 discriminator 3
 299 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 300 0016 0133     		adds	r3, r3, #1
 301 0018 FB71     		strb	r3, [r7, #7]
 302              	.L7:
 274:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 303              		.loc 1 274 0 is_stmt 0 discriminator 1
 304 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 305 001c 0B2B     		cmp	r3, #11
 306 001e F5D9     		bls	.L8
 277:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 278:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 307              		.loc 1 278 0 is_stmt 1
 308 0020 00BF     		nop
 309 0022 0837     		adds	r7, r7, #8
 310              		.cfi_def_cfa_offset 8
 311 0024 BD46     		mov	sp, r7
 312              		.cfi_def_cfa_register 13
 313              		@ sp needed
 314 0026 80BD     		pop	{r7, pc}
 315              		.cfi_endproc
 316              	.LFE2:
 317              		.size	CapSense_InitializeAllBaselines, .-CapSense_InitializeAllBaselines
 318              		.section	.text.CapSense_InitializeEnabledBaselines,"ax",%progbits
 319              		.align	2
 320              		.global	CapSense_InitializeEnabledBaselines
 321              		.thumb
 322              		.thumb_func
 323              		.type	CapSense_InitializeEnabledBaselines, %function
 324              	CapSense_InitializeEnabledBaselines:
 325              	.LFB3:
 279:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 280:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 281:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 282:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_InitializeEnabledBaselines
 283:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 284:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 285:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 286:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Scans all enabled widgets and the raw count values are copied into the 
 287:Generated_Source\PSoC5/CapSense_CSHL.c **** *  baseline array for all sensors enabled in scanning process. Baselines 
 288:Generated_Source\PSoC5/CapSense_CSHL.c **** *  initialize with zero values for sensors disabled from scanning process. 
 289:Generated_Source\PSoC5/CapSense_CSHL.c **** *  The raw data filters are initialized if enabled.
 290:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 291:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 292:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 293:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 294:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 295:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 296:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 297:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 12


 298:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 299:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 300:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 301:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_InitializeEnabledBaselines(void)
 302:Generated_Source\PSoC5/CapSense_CSHL.c ****                              
 303:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 326              		.loc 1 303 0
 327              		.cfi_startproc
 328              		@ args = 0, pretend = 0, frame = 8
 329              		@ frame_needed = 1, uses_anonymous_args = 0
 330 0000 80B5     		push	{r7, lr}
 331              		.cfi_def_cfa_offset 8
 332              		.cfi_offset 7, -8
 333              		.cfi_offset 14, -4
 334 0002 82B0     		sub	sp, sp, #8
 335              		.cfi_def_cfa_offset 16
 336 0004 00AF     		add	r7, sp, #0
 337              		.cfi_def_cfa_register 7
 304:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 305:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos;
 306:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 enMask;
 307:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 308:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_ScanEnabledWidgets();
 338              		.loc 1 308 0
 339 0006 FFF7FEFF 		bl	CapSense_ScanEnabledWidgets
 309:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(CapSense_IsBusy() != 0u)
 340              		.loc 1 309 0
 341 000a 00BF     		nop
 342              	.L10:
 343              		.loc 1 309 0 is_stmt 0 discriminator 1
 344 000c FFF7FEFF 		bl	CapSense_IsBusy
 345 0010 0346     		mov	r3, r0
 346 0012 002B     		cmp	r3, #0
 347 0014 FAD1     		bne	.L10
 310:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 311:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Wait while busy */
 312:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 313:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 314:Generated_Source\PSoC5/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 348              		.loc 1 314 0 is_stmt 1
 349 0016 0023     		movs	r3, #0
 350 0018 FB71     		strb	r3, [r7, #7]
 351 001a 1DE0     		b	.L11
 352              	.L13:
 315:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 316:Generated_Source\PSoC5/CapSense_CSHL.c ****         pos = (i >> 3u);
 353              		.loc 1 316 0
 354 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 355 001e DB08     		lsrs	r3, r3, #3
 356 0020 BB71     		strb	r3, [r7, #6]
 317:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = 0x01u << (i & 0x07u);
 357              		.loc 1 317 0
 358 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 359 0024 03F00703 		and	r3, r3, #7
 360 0028 0122     		movs	r2, #1
 361 002a 02FA03F3 		lsl	r3, r2, r3
 362 002e 7B71     		strb	r3, [r7, #5]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 13


 318:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 319:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Clear raw data if sensor is disabled from scanning process */
 320:Generated_Source\PSoC5/CapSense_CSHL.c ****         if((CapSense_sensorEnableMask[pos] & enMask) == 0u)
 363              		.loc 1 320 0
 364 0030 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 365 0032 0D4A     		ldr	r2, .L14
 366 0034 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 367 0036 7B79     		ldrb	r3, [r7, #5]
 368 0038 1340     		ands	r3, r3, r2
 369 003a DBB2     		uxtb	r3, r3
 370 003c 002B     		cmp	r3, #0
 371 003e 04D1     		bne	.L12
 321:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 322:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_sensorRaw[i] = 0u;
 372              		.loc 1 322 0
 373 0040 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 374 0042 0A4A     		ldr	r2, .L14+4
 375 0044 0021     		movs	r1, #0
 376 0046 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 377              	.L12:
 323:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 324:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 325:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Initialize baselines */
 326:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_BaseInit(i);
 378              		.loc 1 326 0 discriminator 2
 379 004a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 380 004c 1846     		mov	r0, r3
 381 004e FFF7FEFF 		bl	CapSense_BaseInit
 314:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 382              		.loc 1 314 0 discriminator 2
 383 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 384 0054 0133     		adds	r3, r3, #1
 385 0056 FB71     		strb	r3, [r7, #7]
 386              	.L11:
 314:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 387              		.loc 1 314 0 is_stmt 0 discriminator 1
 388 0058 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 389 005a 0B2B     		cmp	r3, #11
 390 005c DED9     		bls	.L13
 327:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 328:Generated_Source\PSoC5/CapSense_CSHL.c **** }  
 391              		.loc 1 328 0 is_stmt 1
 392 005e 00BF     		nop
 393 0060 0837     		adds	r7, r7, #8
 394              		.cfi_def_cfa_offset 8
 395 0062 BD46     		mov	sp, r7
 396              		.cfi_def_cfa_register 13
 397              		@ sp needed
 398 0064 80BD     		pop	{r7, pc}
 399              	.L15:
 400 0066 00BF     		.align	2
 401              	.L14:
 402 0068 00000000 		.word	CapSense_sensorEnableMask
 403 006c 00000000 		.word	CapSense_sensorRaw
 404              		.cfi_endproc
 405              	.LFE3:
 406              		.size	CapSense_InitializeEnabledBaselines, .-CapSense_InitializeEnabledBaselines
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 14


 407              		.section	.text.CapSense_UpdateSensorBaseline,"ax",%progbits
 408              		.align	2
 409              		.global	CapSense_UpdateSensorBaseline
 410              		.thumb
 411              		.thumb_func
 412              		.type	CapSense_UpdateSensorBaseline, %function
 413              	CapSense_UpdateSensorBaseline:
 414              	.LFB4:
 329:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 330:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 331:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 332:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_UpdateSensorBaseline
 333:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 334:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 335:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 336:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Updates the CapSense_sensorBaseline[sensor] array element using the 
 337:Generated_Source\PSoC5/CapSense_CSHL.c **** *  LP filter with k = 256. The signal calculates the difference of count by 
 338:Generated_Source\PSoC5/CapSense_CSHL.c **** *  subtracting the previous baseline from the current raw count value and stores
 339:Generated_Source\PSoC5/CapSense_CSHL.c **** *  it in CapSense_SensorSignal[sensor]. 
 340:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If auto reset option is enabled the baseline updated regards noise threshold. 
 341:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If auto reset option is disabled the baseline stops updating if signal is 
 342:Generated_Source\PSoC5/CapSense_CSHL.c **** *  greater that zero and baseline loads with raw count value if signal is less 
 343:Generated_Source\PSoC5/CapSense_CSHL.c **** *  that noise threshold.
 344:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Raw data filters are applied to the values if enabled before baseline 
 345:Generated_Source\PSoC5/CapSense_CSHL.c **** *  calculation.
 346:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 347:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 348:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensor:  Sensor number.
 349:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 350:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 351:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 352:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 353:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 354:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaseline[]    - used to store baseline value.
 355:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaselineLow[] - used to store fraction byte of 
 356:Generated_Source\PSoC5/CapSense_CSHL.c **** *  baseline value.
 357:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorSignal[]      - used to store diffence between 
 358:Generated_Source\PSoC5/CapSense_CSHL.c **** *  current value of raw data and previous value of baseline.
 359:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData1[]    - used to store previous sample of 
 360:Generated_Source\PSoC5/CapSense_CSHL.c **** *  any enabled raw data filter.
 361:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData2[]    - used to store before previous sample
 362:Generated_Source\PSoC5/CapSense_CSHL.c **** *  of enabled raw data filter. Only required for median or average filters.
 363:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 364:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 365:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 366:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 367:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 368:Generated_Source\PSoC5/CapSense_CSHL.c ****  void CapSense_UpdateSensorBaseline(uint8 sensor)
 369:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  
 370:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 415              		.loc 1 370 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 24
 418              		@ frame_needed = 1, uses_anonymous_args = 0
 419 0000 80B5     		push	{r7, lr}
 420              		.cfi_def_cfa_offset 8
 421              		.cfi_offset 7, -8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 15


 422              		.cfi_offset 14, -4
 423 0002 86B0     		sub	sp, sp, #24
 424              		.cfi_def_cfa_offset 32
 425 0004 00AF     		add	r7, sp, #0
 426              		.cfi_def_cfa_register 7
 427 0006 0346     		mov	r3, r0
 428 0008 FB71     		strb	r3, [r7, #7]
 371:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint32 calc;
 372:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 tempRaw;
 373:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 filteredRawData;
 374:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 widget = CapSense_widgetNumber[sensor];
 429              		.loc 1 374 0
 430 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 431 000c 4D4A     		ldr	r2, .L26
 432 000e D35C     		ldrb	r3, [r2, r3]
 433 0010 7B75     		strb	r3, [r7, #21]
 375:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 noiseThreshold = CapSense_noiseThreshold[widget];
 434              		.loc 1 375 0
 435 0012 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 436 0014 4C4A     		ldr	r2, .L26+4
 437 0016 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 438 001a 7B82     		strh	r3, [r7, #18]	@ movhi
 376:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 377:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 378:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Exclude generic widget */
 379:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(widget < CapSense_END_OF_WIDGETS_INDEX)
 380:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 381:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 382:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 383:Generated_Source\PSoC5/CapSense_CSHL.c ****     filteredRawData = CapSense_sensorRaw[sensor];
 439              		.loc 1 383 0
 440 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 441 001e 4B4A     		ldr	r2, .L26+8
 442 0020 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 443 0024 3B82     		strh	r3, [r7, #16]	@ movhi
 384:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 385:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER)
 386:Generated_Source\PSoC5/CapSense_CSHL.c ****         tempRaw = filteredRawData;
 387:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_MedianFilter(filteredRawData, CapSense_rawFilterData1[sensor], 
 388:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                         CapSense_rawFilterData2[sensor]);
 389:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData2[sensor] = CapSense_rawFilterData1[sensor];
 390:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = tempRaw;
 391:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 392:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER)
 393:Generated_Source\PSoC5/CapSense_CSHL.c ****         tempRaw = filteredRawData;
 394:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_AveragingFilter(filteredRawData, CapSense_rawFilterData1[sensor]
 395:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                            CapSense_rawFilterData2[sensor]);
 396:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData2[sensor] = CapSense_rawFilterData1[sensor];
 397:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = tempRaw;
 398:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 399:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)
 400:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_IIR2Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 401:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 402:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 403:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)
 404:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_IIR4Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 444              		.loc 1 404 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 16


 445 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 446 0028 494A     		ldr	r2, .L26+12
 447 002a 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 448 002e 3B8A     		ldrh	r3, [r7, #16]
 449 0030 1146     		mov	r1, r2
 450 0032 1846     		mov	r0, r3
 451 0034 FFF7FEFF 		bl	CapSense_IIR4Filter
 452 0038 0346     		mov	r3, r0
 453 003a 3B82     		strh	r3, [r7, #16]	@ movhi
 405:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 454              		.loc 1 405 0
 455 003c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 456 003e 4449     		ldr	r1, .L26+12
 457 0040 3A8A     		ldrh	r2, [r7, #16]	@ movhi
 458 0042 21F81320 		strh	r2, [r1, r3, lsl #1]	@ movhi
 406:Generated_Source\PSoC5/CapSense_CSHL.c ****             
 407:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER)
 408:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_JitterFilter(filteredRawData, CapSense_rawFilterData1[sensor]);
 409:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 410:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 411:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)
 412:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_IIR8Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 413:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 414:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 415:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER)
 416:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_IIR16Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 417:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 418:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 419:Generated_Source\PSoC5/CapSense_CSHL.c ****     #else
 420:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* No Raw filters */
 421:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) */
 422:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 423:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING)
 424:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_CalculateThresholds(sensor);
 425:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif /* (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING) */
 426:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 427:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 428:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Baseline calculation */
 429:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Calculate difference RawData[cur] - Baseline[prev] */
 430:Generated_Source\PSoC5/CapSense_CSHL.c ****     if(filteredRawData >= CapSense_sensorBaseline[sensor])
 459              		.loc 1 430 0
 460 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 461 0048 424A     		ldr	r2, .L26+16
 462 004a 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 463 004e 3A8A     		ldrh	r2, [r7, #16]
 464 0050 9A42     		cmp	r2, r3
 465 0052 09D3     		bcc	.L17
 431:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 432:Generated_Source\PSoC5/CapSense_CSHL.c ****         tempRaw = filteredRawData - CapSense_sensorBaseline[sensor];
 466              		.loc 1 432 0
 467 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 468 0056 3F4A     		ldr	r2, .L26+16
 469 0058 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 470 005c 3A8A     		ldrh	r2, [r7, #16]	@ movhi
 471 005e D31A     		subs	r3, r2, r3
 472 0060 FB82     		strh	r3, [r7, #22]	@ movhi
 433:Generated_Source\PSoC5/CapSense_CSHL.c ****         widget = 1u;    /* Positive difference - Calculate the Signal */
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 17


 473              		.loc 1 433 0
 474 0062 0123     		movs	r3, #1
 475 0064 7B75     		strb	r3, [r7, #21]
 476 0066 08E0     		b	.L18
 477              	.L17:
 434:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 435:Generated_Source\PSoC5/CapSense_CSHL.c ****     else
 436:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 437:Generated_Source\PSoC5/CapSense_CSHL.c ****         tempRaw = CapSense_sensorBaseline[sensor] - filteredRawData;
 478              		.loc 1 437 0
 479 0068 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 480 006a 3A4A     		ldr	r2, .L26+16
 481 006c 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 482 0070 3B8A     		ldrh	r3, [r7, #16]	@ movhi
 483 0072 D31A     		subs	r3, r2, r3
 484 0074 FB82     		strh	r3, [r7, #22]	@ movhi
 438:Generated_Source\PSoC5/CapSense_CSHL.c ****         widget = 0u;    /* Negative difference - Do NOT calculate the Signal */
 485              		.loc 1 438 0
 486 0076 0023     		movs	r3, #0
 487 0078 7B75     		strb	r3, [r7, #21]
 488              	.L18:
 439:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 440:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 441:Generated_Source\PSoC5/CapSense_CSHL.c ****     if((widget == 0u) && (tempRaw > (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD))
 489              		.loc 1 441 0
 490 007a 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 491 007c 002B     		cmp	r3, #0
 492 007e 18D1     		bne	.L19
 493              		.loc 1 441 0 is_stmt 0 discriminator 1
 494 0080 FB8A     		ldrh	r3, [r7, #22]
 495 0082 142B     		cmp	r3, #20
 496 0084 15D9     		bls	.L19
 442:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 443:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(CapSense_lowBaselineResetCnt[sensor] >= CapSense_LOW_BASELINE_RESET)
 497              		.loc 1 443 0 is_stmt 1
 498 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 499 0088 334A     		ldr	r2, .L26+20
 500 008a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 501 008c 1D2B     		cmp	r3, #29
 502 008e 08D9     		bls	.L20
 444:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 445:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_BaseInit(sensor);
 503              		.loc 1 445 0
 504 0090 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 505 0092 1846     		mov	r0, r3
 506 0094 FFF7FEFF 		bl	CapSense_BaseInit
 446:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_lowBaselineResetCnt[sensor] = 0u;
 507              		.loc 1 446 0
 508 0098 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 509 009a 2F4A     		ldr	r2, .L26+20
 510 009c 0021     		movs	r1, #0
 511 009e D154     		strb	r1, [r2, r3]
 443:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 512              		.loc 1 443 0
 513 00a0 3AE0     		b	.L22
 514              	.L20:
 447:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 18


 448:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
 449:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 450:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_lowBaselineResetCnt[sensor]++;
 515              		.loc 1 450 0
 516 00a2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 517 00a4 2C4A     		ldr	r2, .L26+20
 518 00a6 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 519 00a8 0132     		adds	r2, r2, #1
 520 00aa D1B2     		uxtb	r1, r2
 521 00ac 2A4A     		ldr	r2, .L26+20
 522 00ae D154     		strb	r1, [r2, r3]
 443:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 523              		.loc 1 443 0
 524 00b0 32E0     		b	.L22
 525              	.L19:
 451:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 452:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 453:Generated_Source\PSoC5/CapSense_CSHL.c ****     else
 454:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 455:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 456:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Update Baseline if lower that noiseThreshold */
 457:Generated_Source\PSoC5/CapSense_CSHL.c ****             if ( (tempRaw <= (uint16) noiseThreshold) || 
 526              		.loc 1 457 0
 527 00b2 FA8A     		ldrh	r2, [r7, #22]
 528 00b4 7B8A     		ldrh	r3, [r7, #18]
 529 00b6 9A42     		cmp	r2, r3
 530 00b8 05D9     		bls	.L23
 531              		.loc 1 457 0 is_stmt 0 discriminator 1
 532 00ba FB8A     		ldrh	r3, [r7, #22]
 533 00bc 132B     		cmp	r3, #19
 534 00be 2BD8     		bhi	.L22
 458:Generated_Source\PSoC5/CapSense_CSHL.c ****                  ((tempRaw < (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD)
 459:Generated_Source\PSoC5/CapSense_CSHL.c ****                    && (widget == 0u)))
 535              		.loc 1 459 0 is_stmt 1
 536 00c0 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 537 00c2 002B     		cmp	r3, #0
 538 00c4 28D1     		bne	.L22
 539              	.L23:
 460:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 461:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE) */
 462:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Make full Baseline 23 bits */
 463:Generated_Source\PSoC5/CapSense_CSHL.c ****                 calc = (uint32) CapSense_sensorBaseline[sensor] << 8u;
 540              		.loc 1 463 0
 541 00c6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 542 00c8 224A     		ldr	r2, .L26+16
 543 00ca 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 544 00ce 1B02     		lsls	r3, r3, #8
 545 00d0 FB60     		str	r3, [r7, #12]
 464:Generated_Source\PSoC5/CapSense_CSHL.c ****                 calc |= (uint32) CapSense_sensorBaselineLow[sensor];
 546              		.loc 1 464 0
 547 00d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 548 00d4 214A     		ldr	r2, .L26+24
 549 00d6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 550 00d8 1A46     		mov	r2, r3
 551 00da FB68     		ldr	r3, [r7, #12]
 552 00dc 1343     		orrs	r3, r3, r2
 553 00de FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 19


 465:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 466:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Add Raw Data to Baseline */
 467:Generated_Source\PSoC5/CapSense_CSHL.c ****                 calc += filteredRawData;
 554              		.loc 1 467 0
 555 00e0 3B8A     		ldrh	r3, [r7, #16]
 556 00e2 FA68     		ldr	r2, [r7, #12]
 557 00e4 1344     		add	r3, r3, r2
 558 00e6 FB60     		str	r3, [r7, #12]
 468:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 469:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Sub the high Baseline */
 470:Generated_Source\PSoC5/CapSense_CSHL.c ****                 calc -= CapSense_sensorBaseline[sensor];
 559              		.loc 1 470 0
 560 00e8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 561 00ea 1A4A     		ldr	r2, .L26+16
 562 00ec 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 563 00f0 1A46     		mov	r2, r3
 564 00f2 FB68     		ldr	r3, [r7, #12]
 565 00f4 9B1A     		subs	r3, r3, r2
 566 00f6 FB60     		str	r3, [r7, #12]
 471:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 472:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Put Baseline and BaselineLow */
 473:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorBaseline[sensor] = ((uint16) (calc >> 8u));
 567              		.loc 1 473 0
 568 00f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 569 00fa FA68     		ldr	r2, [r7, #12]
 570 00fc 120A     		lsrs	r2, r2, #8
 571 00fe 91B2     		uxth	r1, r2
 572 0100 144A     		ldr	r2, .L26+16
 573 0102 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 474:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorBaselineLow[sensor] = ((uint8) calc);
 574              		.loc 1 474 0
 575 0106 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 576 0108 FA68     		ldr	r2, [r7, #12]
 577 010a D1B2     		uxtb	r1, r2
 578 010c 134A     		ldr	r2, .L26+24
 579 010e D154     		strb	r1, [r2, r3]
 475:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 476:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_lowBaselineResetCnt[sensor] = 0u;
 580              		.loc 1 476 0
 581 0110 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 582 0112 114A     		ldr	r2, .L26+20
 583 0114 0021     		movs	r1, #0
 584 0116 D154     		strb	r1, [r2, r3]
 585              	.L22:
 477:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 478:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 479:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE) */
 480:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 481:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 482:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Calculate Signal if possitive difference > noiseThreshold */
 483:Generated_Source\PSoC5/CapSense_CSHL.c ****     if((tempRaw > (uint16) noiseThreshold) && (widget != 0u))
 586              		.loc 1 483 0
 587 0118 FA8A     		ldrh	r2, [r7, #22]
 588 011a 7B8A     		ldrh	r3, [r7, #18]
 589 011c 9A42     		cmp	r2, r3
 590 011e 08D9     		bls	.L24
 591              		.loc 1 483 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 20


 592 0120 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 593 0122 002B     		cmp	r3, #0
 594 0124 05D0     		beq	.L24
 484:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 485:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_SIGNAL_SIZE == CapSense_SIGNAL_SIZE_UINT8)
 486:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Over flow defence for uint8 */
 487:Generated_Source\PSoC5/CapSense_CSHL.c ****             if (tempRaw > 0xFFu)
 488:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 489:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorSignal[sensor] = 0xFFu;
 490:Generated_Source\PSoC5/CapSense_CSHL.c ****             }    
 491:Generated_Source\PSoC5/CapSense_CSHL.c ****             else 
 492:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 493:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorSignal[sensor] = ((uint8) tempRaw);
 494:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 495:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
 496:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_sensorSignal[sensor] = ((uint16) tempRaw);
 595              		.loc 1 496 0 is_stmt 1
 596 0126 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 597 0128 0D49     		ldr	r1, .L26+28
 598 012a FA8A     		ldrh	r2, [r7, #22]	@ movhi
 599 012c 21F81320 		strh	r2, [r1, r3, lsl #1]	@ movhi
 600 0130 04E0     		b	.L25
 601              	.L24:
 497:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif  /* (CapSense_SIGNAL_SIZE == CapSense_SIGNAL_SIZE_UINT8) */
 498:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 499:Generated_Source\PSoC5/CapSense_CSHL.c ****     else
 500:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 501:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Signal is zero */
 502:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_sensorSignal[sensor] = 0u;
 602              		.loc 1 502 0
 603 0132 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 604 0134 0A4A     		ldr	r2, .L26+28
 605 0136 0021     		movs	r1, #0
 606 0138 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 607              	.L25:
 503:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 504:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 505:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 506:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Exclude generic widget */
 507:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 508:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 509:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 608              		.loc 1 509 0
 609 013c 00BF     		nop
 610 013e 1837     		adds	r7, r7, #24
 611              		.cfi_def_cfa_offset 8
 612 0140 BD46     		mov	sp, r7
 613              		.cfi_def_cfa_register 13
 614              		@ sp needed
 615 0142 80BD     		pop	{r7, pc}
 616              	.L27:
 617              		.align	2
 618              	.L26:
 619 0144 00000000 		.word	CapSense_widgetNumber
 620 0148 00000000 		.word	CapSense_noiseThreshold
 621 014c 00000000 		.word	CapSense_sensorRaw
 622 0150 00000000 		.word	CapSense_rawFilterData1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 21


 623 0154 00000000 		.word	CapSense_sensorBaseline
 624 0158 00000000 		.word	CapSense_lowBaselineResetCnt
 625 015c 00000000 		.word	CapSense_sensorBaselineLow
 626 0160 00000000 		.word	CapSense_sensorSignal
 627              		.cfi_endproc
 628              	.LFE4:
 629              		.size	CapSense_UpdateSensorBaseline, .-CapSense_UpdateSensorBaseline
 630              		.section	.text.CapSense_UpdateEnabledBaselines,"ax",%progbits
 631              		.align	2
 632              		.global	CapSense_UpdateEnabledBaselines
 633              		.thumb
 634              		.thumb_func
 635              		.type	CapSense_UpdateEnabledBaselines, %function
 636              	CapSense_UpdateEnabledBaselines:
 637              	.LFB5:
 510:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 511:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 512:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 513:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_UpdateEnabledBaselines
 514:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 515:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 516:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 517:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Checks CapSense_sensorEnableMask[] array and calls the 
 518:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_UpdateSensorBaseline function to update the baselines 
 519:Generated_Source\PSoC5/CapSense_CSHL.c **** *  for enabled sensors.
 520:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 521:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 522:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 523:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 524:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 525:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 526:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 527:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 528:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
 529:Generated_Source\PSoC5/CapSense_CSHL.c **** *  state.
 530:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 531:Generated_Source\PSoC5/CapSense_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 532:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
 533:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 534:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 535:Generated_Source\PSoC5/CapSense_CSHL.c **** *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 536:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 537:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 538:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 539:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 540:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 541:Generated_Source\PSoC5/CapSense_CSHL.c ****  void CapSense_UpdateEnabledBaselines(void)
 542:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  
 543:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 638              		.loc 1 543 0
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 8
 641              		@ frame_needed = 1, uses_anonymous_args = 0
 642 0000 80B5     		push	{r7, lr}
 643              		.cfi_def_cfa_offset 8
 644              		.cfi_offset 7, -8
 645              		.cfi_offset 14, -4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 22


 646 0002 82B0     		sub	sp, sp, #8
 647              		.cfi_def_cfa_offset 16
 648 0004 00AF     		add	r7, sp, #0
 649              		.cfi_def_cfa_register 7
 544:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 545:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos;
 546:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 enMask;
 547:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 548:Generated_Source\PSoC5/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 650              		.loc 1 548 0
 651 0006 0023     		movs	r3, #0
 652 0008 FB71     		strb	r3, [r7, #7]
 653 000a 18E0     		b	.L29
 654              	.L31:
 549:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 550:Generated_Source\PSoC5/CapSense_CSHL.c ****         pos = (i >> 3u);
 655              		.loc 1 550 0
 656 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 657 000e DB08     		lsrs	r3, r3, #3
 658 0010 BB71     		strb	r3, [r7, #6]
 551:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = (uint8)(0x01u << (i & 0x07u));
 659              		.loc 1 551 0
 660 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 661 0014 03F00703 		and	r3, r3, #7
 662 0018 0122     		movs	r2, #1
 663 001a 02FA03F3 		lsl	r3, r2, r3
 664 001e 7B71     		strb	r3, [r7, #5]
 552:Generated_Source\PSoC5/CapSense_CSHL.c ****         if((CapSense_sensorEnableMask[pos] & enMask) != 0u)
 665              		.loc 1 552 0
 666 0020 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 667 0022 0A4A     		ldr	r2, .L32
 668 0024 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 669 0026 7B79     		ldrb	r3, [r7, #5]
 670 0028 1340     		ands	r3, r3, r2
 671 002a DBB2     		uxtb	r3, r3
 672 002c 002B     		cmp	r3, #0
 673 002e 03D0     		beq	.L30
 553:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 554:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_UpdateSensorBaseline(i);
 674              		.loc 1 554 0
 675 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 676 0032 1846     		mov	r0, r3
 677 0034 FFF7FEFF 		bl	CapSense_UpdateSensorBaseline
 678              	.L30:
 548:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 679              		.loc 1 548 0 discriminator 2
 680 0038 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 681 003a 0133     		adds	r3, r3, #1
 682 003c FB71     		strb	r3, [r7, #7]
 683              	.L29:
 548:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 684              		.loc 1 548 0 is_stmt 0 discriminator 1
 685 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 686 0040 0B2B     		cmp	r3, #11
 687 0042 E3D9     		bls	.L31
 555:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 556:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 23


 557:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 688              		.loc 1 557 0 is_stmt 1
 689 0044 00BF     		nop
 690 0046 0837     		adds	r7, r7, #8
 691              		.cfi_def_cfa_offset 8
 692 0048 BD46     		mov	sp, r7
 693              		.cfi_def_cfa_register 13
 694              		@ sp needed
 695 004a 80BD     		pop	{r7, pc}
 696              	.L33:
 697              		.align	2
 698              	.L32:
 699 004c 00000000 		.word	CapSense_sensorEnableMask
 700              		.cfi_endproc
 701              	.LFE5:
 702              		.size	CapSense_UpdateEnabledBaselines, .-CapSense_UpdateEnabledBaselines
 703              		.section	.text.CapSense_CheckIsSensorActive,"ax",%progbits
 704              		.align	2
 705              		.global	CapSense_CheckIsSensorActive
 706              		.thumb
 707              		.thumb_func
 708              		.type	CapSense_CheckIsSensorActive, %function
 709              	CapSense_CheckIsSensorActive:
 710              	.LFB6:
 558:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 559:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 560:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 561:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_CheckIsSensorActive
 562:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 563:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 564:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 565:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Compares the CapSense_SensorSignal[sensor] array element to finger
 566:Generated_Source\PSoC5/CapSense_CSHL.c **** *  threshold of widget it belongs to. The hysteresis and debounce are taken into 
 567:Generated_Source\PSoC5/CapSense_CSHL.c **** *  account. The hysteresis is added or subtracted from the finger threshold 
 568:Generated_Source\PSoC5/CapSense_CSHL.c **** *  based on whether the sensor is currently active. 
 569:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If the sensor is active, the threshold is lowered by the hysteresis amount.
 570:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If the sensor is inactive, the threshold is raised by the hysteresis amount.
 571:Generated_Source\PSoC5/CapSense_CSHL.c **** *  The debounce counter added to the sensor active transition.
 572:Generated_Source\PSoC5/CapSense_CSHL.c **** *  This function updates CapSense_SensorOnMask[] array element.
 573:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 574:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 575:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensor:  Sensor number.
 576:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 577:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 578:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Returns sensor state 1 if active, 0 if not active.
 579:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 580:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 581:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorSignal[]      - used to store diffence between 
 582:Generated_Source\PSoC5/CapSense_CSHL.c **** *  current value of raw data and previous value of baseline.
 583:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_debounceCounter[]   - used to store current debounce 
 584:Generated_Source\PSoC5/CapSense_CSHL.c **** *  counter of sensor. Widget which has this parameter are buttons, matrix 
 585:Generated_Source\PSoC5/CapSense_CSHL.c **** *  buttons, proximity, guard. All other widgets haven't debounce parameter
 586:Generated_Source\PSoC5/CapSense_CSHL.c **** *  and use the last element of this array with value 0 (it means no debounce).
 587:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorOnMask[] - used to store sensors on/off state.
 588:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorOnMask[0] contains the masked bits for sensors 
 589:Generated_Source\PSoC5/CapSense_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 590:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 24


 591:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 592:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 - sensor is inactive.
 593:Generated_Source\PSoC5/CapSense_CSHL.c **** *  1 - sensor is active.
 594:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 595:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 596:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 597:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 598:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 599:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_CheckIsSensorActive(uint8 sensor)
 600:Generated_Source\PSoC5/CapSense_CSHL.c ****                                   
 601:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 711              		.loc 1 601 0
 712              		.cfi_startproc
 713              		@ args = 0, pretend = 0, frame = 24
 714              		@ frame_needed = 1, uses_anonymous_args = 0
 715              		@ link register save eliminated.
 716 0000 80B4     		push	{r7}
 717              		.cfi_def_cfa_offset 4
 718              		.cfi_offset 7, -4
 719 0002 87B0     		sub	sp, sp, #28
 720              		.cfi_def_cfa_offset 32
 721 0004 00AF     		add	r7, sp, #0
 722              		.cfi_def_cfa_register 7
 723 0006 0346     		mov	r3, r0
 724 0008 FB71     		strb	r3, [r7, #7]
 602:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 debounceIndex;
 603:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Get On/Off mask */
 604:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos = (sensor >> 3u);
 725              		.loc 1 604 0
 726 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 727 000c DB08     		lsrs	r3, r3, #3
 728 000e FB75     		strb	r3, [r7, #23]
 605:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 onMask = 0x01u << (sensor & 0x07u);
 729              		.loc 1 605 0
 730 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 731 0012 03F00703 		and	r3, r3, #7
 732 0016 0122     		movs	r2, #1
 733 0018 02FA03F3 		lsl	r3, r2, r3
 734 001c BB75     		strb	r3, [r7, #22]
 606:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Prepare to find debounce counter index */
 607:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 widget = CapSense_widgetNumber[sensor];
 735              		.loc 1 607 0
 736 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 737 0020 344A     		ldr	r2, .L43
 738 0022 D35C     		ldrb	r3, [r2, r3]
 739 0024 7B75     		strb	r3, [r7, #21]
 608:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 fingerThreshold = CapSense_fingerThreshold[widget];
 740              		.loc 1 608 0
 741 0026 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 742 0028 334A     		ldr	r2, .L43+4
 743 002a 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 744 002e 7B82     		strh	r3, [r7, #18]	@ movhi
 609:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 hysteresis = CapSense_hysteresis[widget];
 745              		.loc 1 609 0
 746 0030 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 747 0032 324A     		ldr	r2, .L43+8
 748 0034 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 25


 749 0038 3B82     		strh	r3, [r7, #16]	@ movhi
 610:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 debounce = CapSense_debounce[widget];
 750              		.loc 1 610 0
 751 003a 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 752 003c 304A     		ldr	r2, .L43+12
 753 003e D35C     		ldrb	r3, [r2, r3]
 754 0040 FB73     		strb	r3, [r7, #15]
 611:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 612:Generated_Source\PSoC5/CapSense_CSHL.c ****     debounceIndex = widget;
 755              		.loc 1 612 0
 756 0042 7B7D     		ldrb	r3, [r7, #21]
 757 0044 BB73     		strb	r3, [r7, #14]
 613:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 614:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 615:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Was on */
 616:Generated_Source\PSoC5/CapSense_CSHL.c ****     if (0u != (CapSense_sensorOnMask[pos] & onMask))
 758              		.loc 1 616 0
 759 0046 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 760 0048 2E4A     		ldr	r2, .L43+16
 761 004a D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 762 004c BB7D     		ldrb	r3, [r7, #22]
 763 004e 1340     		ands	r3, r3, r2
 764 0050 DBB2     		uxtb	r3, r3
 765 0052 002B     		cmp	r3, #0
 766 0054 19D0     		beq	.L35
 617:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 618:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Hysteresis minus */
 619:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (CapSense_sensorSignal[sensor] < (fingerThreshold - hysteresis))
 767              		.loc 1 619 0
 768 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 769 0058 2B4A     		ldr	r2, .L43+20
 770 005a 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 771 005e 1946     		mov	r1, r3
 772 0060 7A8A     		ldrh	r2, [r7, #18]
 773 0062 3B8A     		ldrh	r3, [r7, #16]
 774 0064 D31A     		subs	r3, r2, r3
 775 0066 9942     		cmp	r1, r3
 776 0068 33DA     		bge	.L37
 620:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 621:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_sensorOnMask[pos] &= (uint8)~onMask;
 777              		.loc 1 621 0
 778 006a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 779 006c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 780 006e 2549     		ldr	r1, .L43+16
 781 0070 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 782 0072 BA7D     		ldrb	r2, [r7, #22]
 783 0074 D243     		mvns	r2, r2
 784 0076 D2B2     		uxtb	r2, r2
 785 0078 0A40     		ands	r2, r2, r1
 786 007a D1B2     		uxtb	r1, r2
 787 007c 214A     		ldr	r2, .L43+16
 788 007e D154     		strb	r1, [r2, r3]
 622:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_debounceCounter[debounceIndex] = debounce; 
 789              		.loc 1 622 0
 790 0080 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 791 0082 2249     		ldr	r1, .L43+24
 792 0084 FA7B     		ldrb	r2, [r7, #15]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 26


 793 0086 CA54     		strb	r2, [r1, r3]
 794 0088 23E0     		b	.L37
 795              	.L35:
 623:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 624:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 625:Generated_Source\PSoC5/CapSense_CSHL.c ****     else    /* Was off */
 626:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 627:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Hysteresis plus */
 628:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (CapSense_sensorSignal[sensor] > (fingerThreshold + hysteresis))
 796              		.loc 1 628 0
 797 008a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 798 008c 1E4A     		ldr	r2, .L43+20
 799 008e 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 800 0092 1946     		mov	r1, r3
 801 0094 7A8A     		ldrh	r2, [r7, #18]
 802 0096 3B8A     		ldrh	r3, [r7, #16]
 803 0098 1344     		add	r3, r3, r2
 804 009a 9942     		cmp	r1, r3
 805 009c 15DD     		ble	.L38
 629:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 630:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Sensor active, decrement debounce counter */
 631:Generated_Source\PSoC5/CapSense_CSHL.c ****             if (CapSense_debounceCounter[debounceIndex] <= 1u)
 806              		.loc 1 631 0
 807 009e BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 808 00a0 1A4A     		ldr	r2, .L43+24
 809 00a2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 810 00a4 012B     		cmp	r3, #1
 811 00a6 08D8     		bhi	.L39
 632:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 633:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorOnMask[pos] |= onMask; 
 812              		.loc 1 633 0
 813 00a8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 814 00aa FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 815 00ac 1549     		ldr	r1, .L43+16
 816 00ae 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 817 00b0 BA7D     		ldrb	r2, [r7, #22]
 818 00b2 0A43     		orrs	r2, r2, r1
 819 00b4 D1B2     		uxtb	r1, r2
 820 00b6 134A     		ldr	r2, .L43+16
 821 00b8 D154     		strb	r1, [r2, r3]
 822              	.L39:
 634:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 635:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_debounceCounter[debounceIndex]--;
 823              		.loc 1 635 0
 824 00ba BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 825 00bc 134A     		ldr	r2, .L43+24
 826 00be D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 827 00c0 013A     		subs	r2, r2, #1
 828 00c2 D1B2     		uxtb	r1, r2
 829 00c4 114A     		ldr	r2, .L43+24
 830 00c6 D154     		strb	r1, [r2, r3]
 831 00c8 03E0     		b	.L37
 832              	.L38:
 636:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 637:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
 638:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 639:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Sensor inactive - reset Debounce counter */
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 27


 640:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_debounceCounter[debounceIndex] = debounce;
 833              		.loc 1 640 0
 834 00ca BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 835 00cc 0F49     		ldr	r1, .L43+24
 836 00ce FA7B     		ldrb	r2, [r7, #15]
 837 00d0 CA54     		strb	r2, [r1, r3]
 838              	.L37:
 641:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 642:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 643:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 644:Generated_Source\PSoC5/CapSense_CSHL.c ****     return (((CapSense_sensorOnMask[pos] & onMask) != 0u) ? 1u : 0u);
 839              		.loc 1 644 0
 840 00d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 841 00d4 0B4A     		ldr	r2, .L43+16
 842 00d6 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 843 00d8 BB7D     		ldrb	r3, [r7, #22]
 844 00da 1340     		ands	r3, r3, r2
 845 00dc DBB2     		uxtb	r3, r3
 846 00de 002B     		cmp	r3, #0
 847 00e0 01D0     		beq	.L40
 848              		.loc 1 644 0 is_stmt 0 discriminator 1
 849 00e2 0123     		movs	r3, #1
 850 00e4 00E0     		b	.L41
 851              	.L40:
 852              		.loc 1 644 0 discriminator 2
 853 00e6 0023     		movs	r3, #0
 854              	.L41:
 645:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 855              		.loc 1 645 0 is_stmt 1 discriminator 4
 856 00e8 1846     		mov	r0, r3
 857 00ea 1C37     		adds	r7, r7, #28
 858              		.cfi_def_cfa_offset 4
 859 00ec BD46     		mov	sp, r7
 860              		.cfi_def_cfa_register 13
 861              		@ sp needed
 862 00ee 80BC     		pop	{r7}
 863              		.cfi_restore 7
 864              		.cfi_def_cfa_offset 0
 865 00f0 7047     		bx	lr
 866              	.L44:
 867 00f2 00BF     		.align	2
 868              	.L43:
 869 00f4 00000000 		.word	CapSense_widgetNumber
 870 00f8 00000000 		.word	CapSense_fingerThreshold
 871 00fc 00000000 		.word	CapSense_hysteresis
 872 0100 00000000 		.word	CapSense_debounce
 873 0104 00000000 		.word	CapSense_sensorOnMask
 874 0108 00000000 		.word	CapSense_sensorSignal
 875 010c 00000000 		.word	CapSense_debounceCounter
 876              		.cfi_endproc
 877              	.LFE6:
 878              		.size	CapSense_CheckIsSensorActive, .-CapSense_CheckIsSensorActive
 879              		.section	.text.CapSense_CheckIsWidgetActive,"ax",%progbits
 880              		.align	2
 881              		.global	CapSense_CheckIsWidgetActive
 882              		.thumb
 883              		.thumb_func
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 28


 884              		.type	CapSense_CheckIsWidgetActive, %function
 885              	CapSense_CheckIsWidgetActive:
 886              	.LFB7:
 646:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 647:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 648:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 649:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_CheckIsWidgetActive
 650:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 651:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 652:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 653:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Use function CapSense_CheckIsSensorActive() to update 
 654:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorOnMask[] for all sensors within the widget.
 655:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If one of sensors within widget is active the function return that widget is 
 656:Generated_Source\PSoC5/CapSense_CSHL.c **** *  active.
 657:Generated_Source\PSoC5/CapSense_CSHL.c **** *  The touch pad and matrix buttons widgets need to have active sensor within 
 658:Generated_Source\PSoC5/CapSense_CSHL.c **** *  col and row to return widget active status.
 659:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 660:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 661:Generated_Source\PSoC5/CapSense_CSHL.c **** *  widget:  widget number.
 662:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 663:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 664:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Returns widget sensor state 1 if one or more sensors within widget is/are 
 665:Generated_Source\PSoC5/CapSense_CSHL.c **** *  active, 0 if all sensors within widget are inactive.
 666:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 667:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 668:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 669:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 670:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 671:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_CheckIsWidgetActive(uint8 widget)
 672:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  
 673:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 887              		.loc 1 673 0
 888              		.cfi_startproc
 889              		@ args = 0, pretend = 0, frame = 16
 890              		@ frame_needed = 1, uses_anonymous_args = 0
 891 0000 80B5     		push	{r7, lr}
 892              		.cfi_def_cfa_offset 8
 893              		.cfi_offset 7, -8
 894              		.cfi_offset 14, -4
 895 0002 84B0     		sub	sp, sp, #16
 896              		.cfi_def_cfa_offset 24
 897 0004 00AF     		add	r7, sp, #0
 898              		.cfi_def_cfa_register 7
 899 0006 0346     		mov	r3, r0
 900 0008 FB71     		strb	r3, [r7, #7]
 674:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 rawIndex = CapSense_rawDataIndex[widget];
 901              		.loc 1 674 0
 902 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 903 000c 0F4A     		ldr	r2, .L49
 904 000e D35C     		ldrb	r3, [r2, r3]
 905 0010 FB73     		strb	r3, [r7, #15]
 675:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 906              		.loc 1 675 0
 907 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 908 0014 0E4A     		ldr	r2, .L49+4
 909 0016 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 910 0018 FB7B     		ldrb	r3, [r7, #15]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 29


 911 001a 1344     		add	r3, r3, r2
 912 001c 7B73     		strb	r3, [r7, #13]
 676:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 state = 0u;
 913              		.loc 1 676 0
 914 001e 0023     		movs	r3, #0
 915 0020 BB73     		strb	r3, [r7, #14]
 916              	.L47:
 677:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 678:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Check all sensors of the widget */
 679:Generated_Source\PSoC5/CapSense_CSHL.c ****     do
 680:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 681:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(CapSense_CheckIsSensorActive(rawIndex) != 0u)
 917              		.loc 1 681 0
 918 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 919 0024 1846     		mov	r0, r3
 920 0026 FFF7FEFF 		bl	CapSense_CheckIsSensorActive
 921 002a 0346     		mov	r3, r0
 922 002c 002B     		cmp	r3, #0
 923 002e 01D0     		beq	.L46
 682:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 683:Generated_Source\PSoC5/CapSense_CSHL.c ****             state = CapSense_SENSOR_1_IS_ACTIVE;
 924              		.loc 1 683 0
 925 0030 0123     		movs	r3, #1
 926 0032 BB73     		strb	r3, [r7, #14]
 927              	.L46:
 684:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 685:Generated_Source\PSoC5/CapSense_CSHL.c ****         rawIndex++;
 928              		.loc 1 685 0
 929 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 930 0036 0133     		adds	r3, r3, #1
 931 0038 FB73     		strb	r3, [r7, #15]
 686:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 687:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(rawIndex < numberOfSensors);
 932              		.loc 1 687 0
 933 003a FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 934 003c 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 935 003e 9A42     		cmp	r2, r3
 936 0040 EFD3     		bcc	.L47
 688:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 689:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 690:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 691:Generated_Source\PSoC5/CapSense_CSHL.c ****     return (state);
 937              		.loc 1 691 0
 938 0042 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 692:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 939              		.loc 1 692 0
 940 0044 1846     		mov	r0, r3
 941 0046 1037     		adds	r7, r7, #16
 942              		.cfi_def_cfa_offset 8
 943 0048 BD46     		mov	sp, r7
 944              		.cfi_def_cfa_register 13
 945              		@ sp needed
 946 004a 80BD     		pop	{r7, pc}
 947              	.L50:
 948              		.align	2
 949              	.L49:
 950 004c 00000000 		.word	CapSense_rawDataIndex
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 30


 951 0050 00000000 		.word	CapSense_numberOfSensors
 952              		.cfi_endproc
 953              	.LFE7:
 954              		.size	CapSense_CheckIsWidgetActive, .-CapSense_CheckIsWidgetActive
 955              		.section	.text.CapSense_CheckIsAnyWidgetActive,"ax",%progbits
 956              		.align	2
 957              		.global	CapSense_CheckIsAnyWidgetActive
 958              		.thumb
 959              		.thumb_func
 960              		.type	CapSense_CheckIsAnyWidgetActive, %function
 961              	CapSense_CheckIsAnyWidgetActive:
 962              	.LFB8:
 693:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 694:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 695:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 696:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_CheckIsAnyWidgetActive
 697:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 698:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 699:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 700:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Compares all sensors of the CapSense_signal[] array to their finger 
 701:Generated_Source\PSoC5/CapSense_CSHL.c **** *  threshold. Calls CapSense_CheckIsWidgetActive() for each widget so 
 702:Generated_Source\PSoC5/CapSense_CSHL.c **** *  the CapSense_SensorOnMask[] array is up to date after calling this 
 703:Generated_Source\PSoC5/CapSense_CSHL.c **** *  function.
 704:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 705:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 706:Generated_Source\PSoC5/CapSense_CSHL.c **** *  widget:  widget number.
 707:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 708:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 709:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Returns 1 if any widget is active, 0 none of widgets are active.
 710:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 711:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 712:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 713:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 714:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 715:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_CheckIsAnyWidgetActive(void)
 716:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  
 717:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 963              		.loc 1 717 0
 964              		.cfi_startproc
 965              		@ args = 0, pretend = 0, frame = 8
 966              		@ frame_needed = 1, uses_anonymous_args = 0
 967 0000 80B5     		push	{r7, lr}
 968              		.cfi_def_cfa_offset 8
 969              		.cfi_offset 7, -8
 970              		.cfi_offset 14, -4
 971 0002 82B0     		sub	sp, sp, #8
 972              		.cfi_def_cfa_offset 16
 973 0004 00AF     		add	r7, sp, #0
 974              		.cfi_def_cfa_register 7
 718:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 719:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 state = 0u;
 975              		.loc 1 719 0
 976 0006 0023     		movs	r3, #0
 977 0008 BB71     		strb	r3, [r7, #6]
 720:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 721:Generated_Source\PSoC5/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_WIDGET_COUNT; i++)
 978              		.loc 1 721 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 31


 979 000a 0023     		movs	r3, #0
 980 000c FB71     		strb	r3, [r7, #7]
 981 000e 0BE0     		b	.L52
 982              	.L54:
 722:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 723:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (CapSense_CheckIsWidgetActive(i) != 0u)
 983              		.loc 1 723 0
 984 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 985 0012 1846     		mov	r0, r3
 986 0014 FFF7FEFF 		bl	CapSense_CheckIsWidgetActive
 987 0018 0346     		mov	r3, r0
 988 001a 002B     		cmp	r3, #0
 989 001c 01D0     		beq	.L53
 724:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 725:Generated_Source\PSoC5/CapSense_CSHL.c ****             state = CapSense_WIDGET_IS_ACTIVE;
 990              		.loc 1 725 0
 991 001e 0123     		movs	r3, #1
 992 0020 BB71     		strb	r3, [r7, #6]
 993              	.L53:
 721:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 994              		.loc 1 721 0 discriminator 2
 995 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 996 0024 0133     		adds	r3, r3, #1
 997 0026 FB71     		strb	r3, [r7, #7]
 998              	.L52:
 721:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 999              		.loc 1 721 0 is_stmt 0 discriminator 1
 1000 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1001 002a 0B2B     		cmp	r3, #11
 1002 002c F0D9     		bls	.L54
 726:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 727:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 728:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 729:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 730:Generated_Source\PSoC5/CapSense_CSHL.c ****     return (state);
 1003              		.loc 1 730 0 is_stmt 1
 1004 002e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 731:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 1005              		.loc 1 731 0
 1006 0030 1846     		mov	r0, r3
 1007 0032 0837     		adds	r7, r7, #8
 1008              		.cfi_def_cfa_offset 8
 1009 0034 BD46     		mov	sp, r7
 1010              		.cfi_def_cfa_register 13
 1011              		@ sp needed
 1012 0036 80BD     		pop	{r7, pc}
 1013              		.cfi_endproc
 1014              	.LFE8:
 1015              		.size	CapSense_CheckIsAnyWidgetActive, .-CapSense_CheckIsAnyWidgetActive
 1016              		.section	.text.CapSense_EnableWidget,"ax",%progbits
 1017              		.align	2
 1018              		.global	CapSense_EnableWidget
 1019              		.thumb
 1020              		.thumb_func
 1021              		.type	CapSense_EnableWidget, %function
 1022              	CapSense_EnableWidget:
 1023              	.LFB9:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 32


 732:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 733:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 734:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 735:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_EnableWidget
 736:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 737:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 738:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 739:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Enable all widget elements (sensors) to scanning process.
 740:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 741:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 742:Generated_Source\PSoC5/CapSense_CSHL.c **** *  widget:  widget number.
 743:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 744:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 745:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 746:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 747:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 748:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
 749:Generated_Source\PSoC5/CapSense_CSHL.c **** *  state.
 750:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 751:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 752:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
 753:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 754:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 755:Generated_Source\PSoC5/CapSense_CSHL.c **** *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 756:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 757:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 758:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 759:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 760:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 761:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_EnableWidget(uint8 widget)
 762:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    
 763:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 1024              		.loc 1 763 0
 1025              		.cfi_startproc
 1026              		@ args = 0, pretend = 0, frame = 16
 1027              		@ frame_needed = 1, uses_anonymous_args = 0
 1028              		@ link register save eliminated.
 1029 0000 80B4     		push	{r7}
 1030              		.cfi_def_cfa_offset 4
 1031              		.cfi_offset 7, -4
 1032 0002 85B0     		sub	sp, sp, #20
 1033              		.cfi_def_cfa_offset 24
 1034 0004 00AF     		add	r7, sp, #0
 1035              		.cfi_def_cfa_register 7
 1036 0006 0346     		mov	r3, r0
 1037 0008 FB71     		strb	r3, [r7, #7]
 764:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos;
 765:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 enMask;
 766:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 rawIndex = CapSense_rawDataIndex[widget];
 1038              		.loc 1 766 0
 1039 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1040 000c 134A     		ldr	r2, .L58
 1041 000e D35C     		ldrb	r3, [r2, r3]
 1042 0010 FB73     		strb	r3, [r7, #15]
 767:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 1043              		.loc 1 767 0
 1044 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 33


 1045 0014 124A     		ldr	r2, .L58+4
 1046 0016 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1047 0018 FB7B     		ldrb	r3, [r7, #15]
 1048 001a 1344     		add	r3, r3, r2
 1049 001c BB73     		strb	r3, [r7, #14]
 1050              	.L57:
 768:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 769:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Enable all sensors of the widget */
 770:Generated_Source\PSoC5/CapSense_CSHL.c ****     do
 771:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 772:Generated_Source\PSoC5/CapSense_CSHL.c ****         pos = (rawIndex >> 3u);
 1051              		.loc 1 772 0 discriminator 1
 1052 001e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1053 0020 DB08     		lsrs	r3, r3, #3
 1054 0022 7B73     		strb	r3, [r7, #13]
 773:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = 0x01u << (rawIndex & 0x07u);
 1055              		.loc 1 773 0 discriminator 1
 1056 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1057 0026 03F00703 		and	r3, r3, #7
 1058 002a 0122     		movs	r2, #1
 1059 002c 02FA03F3 		lsl	r3, r2, r3
 1060 0030 3B73     		strb	r3, [r7, #12]
 774:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 775:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_sensorEnableMask[pos] |= enMask;
 1061              		.loc 1 775 0 discriminator 1
 1062 0032 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1063 0034 7A7B     		ldrb	r2, [r7, #13]	@ zero_extendqisi2
 1064 0036 0B49     		ldr	r1, .L58+8
 1065 0038 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 1066 003a 3A7B     		ldrb	r2, [r7, #12]
 1067 003c 0A43     		orrs	r2, r2, r1
 1068 003e D1B2     		uxtb	r1, r2
 1069 0040 084A     		ldr	r2, .L58+8
 1070 0042 D154     		strb	r1, [r2, r3]
 776:Generated_Source\PSoC5/CapSense_CSHL.c ****         rawIndex++;
 1071              		.loc 1 776 0 discriminator 1
 1072 0044 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1073 0046 0133     		adds	r3, r3, #1
 1074 0048 FB73     		strb	r3, [r7, #15]
 777:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 778:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(rawIndex < numberOfSensors);
 1075              		.loc 1 778 0 discriminator 1
 1076 004a FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1077 004c BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1078 004e 9A42     		cmp	r2, r3
 1079 0050 E5D3     		bcc	.L57
 779:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 780:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 781:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 1080              		.loc 1 781 0
 1081 0052 00BF     		nop
 1082 0054 1437     		adds	r7, r7, #20
 1083              		.cfi_def_cfa_offset 4
 1084 0056 BD46     		mov	sp, r7
 1085              		.cfi_def_cfa_register 13
 1086              		@ sp needed
 1087 0058 80BC     		pop	{r7}
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 34


 1088              		.cfi_restore 7
 1089              		.cfi_def_cfa_offset 0
 1090 005a 7047     		bx	lr
 1091              	.L59:
 1092              		.align	2
 1093              	.L58:
 1094 005c 00000000 		.word	CapSense_rawDataIndex
 1095 0060 00000000 		.word	CapSense_numberOfSensors
 1096 0064 00000000 		.word	CapSense_sensorEnableMask
 1097              		.cfi_endproc
 1098              	.LFE9:
 1099              		.size	CapSense_EnableWidget, .-CapSense_EnableWidget
 1100              		.section	.text.CapSense_DisableWidget,"ax",%progbits
 1101              		.align	2
 1102              		.global	CapSense_DisableWidget
 1103              		.thumb
 1104              		.thumb_func
 1105              		.type	CapSense_DisableWidget, %function
 1106              	CapSense_DisableWidget:
 1107              	.LFB10:
 782:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 783:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 784:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 785:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_DisableWidget
 786:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 787:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 788:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 789:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Disable all widget elements (sensors) from scanning process.
 790:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 791:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 792:Generated_Source\PSoC5/CapSense_CSHL.c **** *  widget:  widget number.
 793:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 794:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 795:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 796:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 797:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 798:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
 799:Generated_Source\PSoC5/CapSense_CSHL.c **** *  state.
 800:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 801:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 802:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
 803:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 804:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 805:Generated_Source\PSoC5/CapSense_CSHL.c **** *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 806:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 807:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 808:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 809:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 810:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 811:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_DisableWidget(uint8 widget)
 812:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     
 813:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 1108              		.loc 1 813 0
 1109              		.cfi_startproc
 1110              		@ args = 0, pretend = 0, frame = 16
 1111              		@ frame_needed = 1, uses_anonymous_args = 0
 1112              		@ link register save eliminated.
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 35


 1113 0000 80B4     		push	{r7}
 1114              		.cfi_def_cfa_offset 4
 1115              		.cfi_offset 7, -4
 1116 0002 85B0     		sub	sp, sp, #20
 1117              		.cfi_def_cfa_offset 24
 1118 0004 00AF     		add	r7, sp, #0
 1119              		.cfi_def_cfa_register 7
 1120 0006 0346     		mov	r3, r0
 1121 0008 FB71     		strb	r3, [r7, #7]
 814:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos;
 815:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 enMask;
 816:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 rawIndex = CapSense_rawDataIndex[widget];
 1122              		.loc 1 816 0
 1123 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1124 000c 144A     		ldr	r2, .L62
 1125 000e D35C     		ldrb	r3, [r2, r3]
 1126 0010 FB73     		strb	r3, [r7, #15]
 817:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 1127              		.loc 1 817 0
 1128 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1129 0014 134A     		ldr	r2, .L62+4
 1130 0016 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1131 0018 FB7B     		ldrb	r3, [r7, #15]
 1132 001a 1344     		add	r3, r3, r2
 1133 001c BB73     		strb	r3, [r7, #14]
 1134              	.L61:
 818:Generated_Source\PSoC5/CapSense_CSHL.c ****    
 819:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Disable all sensors of the widget */
 820:Generated_Source\PSoC5/CapSense_CSHL.c ****     do
 821:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 822:Generated_Source\PSoC5/CapSense_CSHL.c ****         pos = (rawIndex >> 3u);
 1135              		.loc 1 822 0 discriminator 1
 1136 001e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1137 0020 DB08     		lsrs	r3, r3, #3
 1138 0022 7B73     		strb	r3, [r7, #13]
 823:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = 0x01u << (rawIndex & 0x07u);
 1139              		.loc 1 823 0 discriminator 1
 1140 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1141 0026 03F00703 		and	r3, r3, #7
 1142 002a 0122     		movs	r2, #1
 1143 002c 02FA03F3 		lsl	r3, r2, r3
 1144 0030 3B73     		strb	r3, [r7, #12]
 824:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 825:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_sensorEnableMask[pos] &= (uint8)~enMask;
 1145              		.loc 1 825 0 discriminator 1
 1146 0032 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1147 0034 7A7B     		ldrb	r2, [r7, #13]	@ zero_extendqisi2
 1148 0036 0C49     		ldr	r1, .L62+8
 1149 0038 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 1150 003a 3A7B     		ldrb	r2, [r7, #12]
 1151 003c D243     		mvns	r2, r2
 1152 003e D2B2     		uxtb	r2, r2
 1153 0040 0A40     		ands	r2, r2, r1
 1154 0042 D1B2     		uxtb	r1, r2
 1155 0044 084A     		ldr	r2, .L62+8
 1156 0046 D154     		strb	r1, [r2, r3]
 826:Generated_Source\PSoC5/CapSense_CSHL.c ****         rawIndex++;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 36


 1157              		.loc 1 826 0 discriminator 1
 1158 0048 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1159 004a 0133     		adds	r3, r3, #1
 1160 004c FB73     		strb	r3, [r7, #15]
 827:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 828:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(rawIndex < numberOfSensors);
 1161              		.loc 1 828 0 discriminator 1
 1162 004e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1163 0050 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1164 0052 9A42     		cmp	r2, r3
 1165 0054 E3D3     		bcc	.L61
 829:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 830:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 831:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 1166              		.loc 1 831 0
 1167 0056 00BF     		nop
 1168 0058 1437     		adds	r7, r7, #20
 1169              		.cfi_def_cfa_offset 4
 1170 005a BD46     		mov	sp, r7
 1171              		.cfi_def_cfa_register 13
 1172              		@ sp needed
 1173 005c 80BC     		pop	{r7}
 1174              		.cfi_restore 7
 1175              		.cfi_def_cfa_offset 0
 1176 005e 7047     		bx	lr
 1177              	.L63:
 1178              		.align	2
 1179              	.L62:
 1180 0060 00000000 		.word	CapSense_rawDataIndex
 1181 0064 00000000 		.word	CapSense_numberOfSensors
 1182 0068 00000000 		.word	CapSense_sensorEnableMask
 1183              		.cfi_endproc
 1184              	.LFE10:
 1185              		.size	CapSense_DisableWidget, .-CapSense_DisableWidget
 1186              		.section	.text.CapSense_IIR4Filter,"ax",%progbits
 1187              		.align	2
 1188              		.global	CapSense_IIR4Filter
 1189              		.thumb
 1190              		.thumb_func
 1191              		.type	CapSense_IIR4Filter, %function
 1192              	CapSense_IIR4Filter:
 1193              	.LFB11:
 832:Generated_Source\PSoC5/CapSense_CSHL.c **** #if(CapSense_TOTAL_CENTROIDS_COUNT)
 833:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
 834:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_FindMaximum
 835:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
 836:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
 837:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
 838:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Finds index of maximum element within defined centroid. Checks 
 839:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  CapSense_SensorSignal[] within defined cenrtoid and 
 840:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  returns index of maximum element. The values below finger threshold are 
 841:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  ignored.
 842:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The centrod defines by offset of first element and number of elements - count.
 843:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The diplexed centroid requires at least consecutive two elements above
 844:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  FingerThreshold to find index of maximum element.
 845:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
 846:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 37


 847:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  offset:  Start index of cetroid in CapSense_sensorSignal[] array.
 848:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  count:   number of elements within centroid.
 849:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  fingerThreshold:  Finger threshould.
 850:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  diplex:   pointer to diplex table.
 851:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
 852:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
 853:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns index of maximum element within defined centroid.
 854:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If index of maximum element doesn't find the 0xFF returns.
 855:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
 856:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
 857:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_IS_DIPLEX_SLIDER)
 858:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 CapSense_FindMaximum(uint8 offset, uint8 count, uint16 fingerThreshold, const uint8 C
 859:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                       
 860:Generated_Source\PSoC5/CapSense_CSHL.c ****     #else 
 861:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 CapSense_FindMaximum(uint8 offset, uint8 count, uint16 fingerThreshold)
 862:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                       
 863:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif /* (CapSense_IS_DIPLEX_SLIDER) */
 864:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 865:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 i;
 866:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)        
 867:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 curPos = 0u;
 868:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* No centroid at the Start */
 869:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 curCntrdSize = 0u;
 870:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 curCtrdStartPos = 0xFFu;
 871:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* The biggset centroid is zero */
 872:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 biggestCtrdSize = 0u;
 873:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 biggestCtrdStartPos = 0u;
 874:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
 875:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maximum = 0xFFu;
 876:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 temp = 0u;
 877:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 *startOfSlider = &CapSense_sensorSignal[offset]; 
 878:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 879:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)        
 880:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(diplex != 0u)
 881:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 882:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Initialize */
 883:Generated_Source\PSoC5/CapSense_CSHL.c ****                 i = 0u;
 884:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
 885:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Make slider x2 as Diplexed */
 886:Generated_Source\PSoC5/CapSense_CSHL.c ****                 count <<= 1u;
 887:Generated_Source\PSoC5/CapSense_CSHL.c ****                 while(1u)
 888:Generated_Source\PSoC5/CapSense_CSHL.c ****                 { 
 889:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (startOfSlider[curPos] > 0u)    /* Looking for centroids */
 890:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
 891:Generated_Source\PSoC5/CapSense_CSHL.c ****                         if (curCtrdStartPos == 0xFFu)
 892:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
 893:Generated_Source\PSoC5/CapSense_CSHL.c ****                             /* Start of centroid */
 894:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCtrdStartPos = i;
 895:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCntrdSize++;
 896:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
 897:Generated_Source\PSoC5/CapSense_CSHL.c ****                         else
 898:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
 899:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCntrdSize++;
 900:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
 901:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
 902:Generated_Source\PSoC5/CapSense_CSHL.c ****                     else   /* Select the bigest and indicate zero start */
 903:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {          
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 38


 904:Generated_Source\PSoC5/CapSense_CSHL.c ****                         if(curCntrdSize > 0u)
 905:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
 906:Generated_Source\PSoC5/CapSense_CSHL.c ****                             /* We are in the end of current */
 907:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if(curCntrdSize > biggestCtrdSize)
 908:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
 909:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 biggestCtrdSize = curCntrdSize;
 910:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 biggestCtrdStartPos = curCtrdStartPos;
 911:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
 912:Generated_Source\PSoC5/CapSense_CSHL.c ****                             
 913:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCntrdSize = 0u;
 914:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCtrdStartPos = 0xFFu;
 915:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
 916:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
 917:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
 918:Generated_Source\PSoC5/CapSense_CSHL.c ****                     i++; 
 919:Generated_Source\PSoC5/CapSense_CSHL.c ****                     curPos = diplex[i];
 920:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if(i == count)
 921:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
 922:Generated_Source\PSoC5/CapSense_CSHL.c ****                         break;
 923:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }            
 924:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
 925:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
 926:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Find the biggest centroid if two are the same size, last one wins
 927:Generated_Source\PSoC5/CapSense_CSHL.c ****                        We are in the end of current */
 928:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (curCntrdSize >= biggestCtrdSize) 
 929:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
 930:Generated_Source\PSoC5/CapSense_CSHL.c ****                     biggestCtrdSize = curCntrdSize;
 931:Generated_Source\PSoC5/CapSense_CSHL.c ****                     biggestCtrdStartPos = curCtrdStartPos;
 932:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
 933:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 934:Generated_Source\PSoC5/CapSense_CSHL.c ****             else
 935:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 936:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Without diplexing */ 
 937:Generated_Source\PSoC5/CapSense_CSHL.c ****                 biggestCtrdSize = count;
 938:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 939:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
 940:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 941:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Check centroid size */
 942:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (CapSense_IS_NON_DIPLEX_SLIDER)
 943:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if((biggestCtrdSize >= 2u) || ((biggestCtrdSize == 1u) && (diplex == 0u)))
 944:Generated_Source\PSoC5/CapSense_CSHL.c ****             #else                    
 945:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if(biggestCtrdSize >= 2u)
 946:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (CapSense_IS_NON_DIPLEX_SLIDER) */
 947:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
 948:Generated_Source\PSoC5/CapSense_CSHL.c ****                     for (i = biggestCtrdStartPos; i < (biggestCtrdStartPos + biggestCtrdSize); i++)
 949:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
 950:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER)
 951:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (diplex == 0u)
 952:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
 953:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 curPos = i;
 954:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
 955:Generated_Source\PSoC5/CapSense_CSHL.c ****                             else
 956:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
 957:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 curPos = diplex[i];
 958:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }                    
 959:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #elif (CapSense_IS_DIPLEX_SLIDER)                    
 960:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curPos = diplex[i];                    
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 39


 961:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER) */
 962:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Looking for the grater element within centroid */
 963:Generated_Source\PSoC5/CapSense_CSHL.c ****                         if(startOfSlider[curPos] > fingerThreshold)
 964:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
 965:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if(startOfSlider[curPos] > temp)
 966:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
 967:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 maximum = i;
 968:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 temp = startOfSlider[curPos];
 969:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
 970:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
 971:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
 972:Generated_Source\PSoC5/CapSense_CSHL.c ****                 } 
 973:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
 974:Generated_Source\PSoC5/CapSense_CSHL.c ****             for (i = 0u; i < count; i++)
 975:Generated_Source\PSoC5/CapSense_CSHL.c ****             {                      
 976:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Looking for the grater element within centroid */
 977:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if(startOfSlider[i] > fingerThreshold)
 978:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
 979:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if(startOfSlider[i] > temp)
 980:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
 981:Generated_Source\PSoC5/CapSense_CSHL.c ****                         maximum = i;
 982:Generated_Source\PSoC5/CapSense_CSHL.c ****                         temp = startOfSlider[i];
 983:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
 984:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
 985:Generated_Source\PSoC5/CapSense_CSHL.c ****             }    
 986:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
 987:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (maximum);
 988:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 989:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 990:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 991:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
 992:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_CalcCentroid
 993:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
 994:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
 995:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
 996:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns position value calculated accoring index of maximum element and API
 997:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  resolution.
 998:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
 999:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1000:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  type:  widget type.
1001:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  diplex:  pointer to diplex table.
1002:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  maximum:  Index of maximum element within centroid.
1003:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  offset:   Start index of cetroid in CapSense_SensorSignal[] array.
1004:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  count:    Number of elements within centroid.
1005:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  resolution:  multiplicator calculated according to centroid type and
1006:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  API resolution.
1007:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  noiseThreshold:  Noise threshould.
1008:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
1009:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1010:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns position value of the slider.
1011:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
1012:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1013:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Reentrant:
1014:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  No.
1015:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1016:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1017:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 CapSense_CalcCentroid(uint8 maximum, uint8 offset, 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 40


1018:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         uint8 count, uint16 resolution, uint16 noiseThreshold)
1019:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                    
1020:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1021:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT > 0u))
1022:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posPrev = 0u;
1023:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posNext = 0u;
1024:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT>0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT>0u)
1025:Generated_Source\PSoC5/CapSense_CSHL.c ****                
1026:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)                
1027:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 pos;
1028:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1029:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1030:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Helps while centroid calulation */
1031:Generated_Source\PSoC5/CapSense_CSHL.c ****         static uint16 CapSense_centroid[3u];
1032:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1033:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 position;
1034:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint32 numerator;
1035:Generated_Source\PSoC5/CapSense_CSHL.c ****         int32 denominator;
1036:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 *startOfSlider = &CapSense_sensorSignal[offset];
1037:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
1038:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_ADD_SLIDER_TYPE)
1039:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(type == CapSense_TYPE_RADIAL_SLIDER)
1040:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1041:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_ADD_SLIDER_TYPE) */
1042:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1043:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)                
1044:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Copy Signal for found centriod */
1045:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_centroid[CapSense_POS] = startOfSlider[maximum];
1046:Generated_Source\PSoC5/CapSense_CSHL.c ****                  
1047:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Check borders for ROTARY Slider */
1048:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1049:Generated_Source\PSoC5/CapSense_CSHL.c ****                 { 
1050:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[count - 1u];
1051:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[1u];
1052:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1053:Generated_Source\PSoC5/CapSense_CSHL.c ****                 else if (maximum == (count - 1u))    /* End of centroid */
1054:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1055:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[maximum - 1u];
1056:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[0u];
1057:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1058:Generated_Source\PSoC5/CapSense_CSHL.c ****                 else                                /* Not first Not last */
1059:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1060:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[maximum - 1u];
1061:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[maximum + 1u];
1062:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1063:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1064:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1065:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_ADD_SLIDER_TYPE)
1066:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1067:Generated_Source\PSoC5/CapSense_CSHL.c ****             else
1068:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1069:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_ADD_SLIDER_TYPE) */
1070:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1071:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT > 0
1072:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #if (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER)                   
1073:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Calculate next and previous near to maximum */
1074:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if(diplex == 0u)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 41


1075:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1076:Generated_Source\PSoC5/CapSense_CSHL.c ****                         pos     = maximum;
1077:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posPrev = maximum - 1u;
1078:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posNext = maximum + 1u; 
1079:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1080:Generated_Source\PSoC5/CapSense_CSHL.c ****                     else
1081:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1082:Generated_Source\PSoC5/CapSense_CSHL.c ****                         pos     = diplex[maximum];
1083:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posPrev = diplex[maximum - 1u];
1084:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posNext = diplex[maximum + 1u];
1085:Generated_Source\PSoC5/CapSense_CSHL.c ****                         count <<= 1u;
1086:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }                    
1087:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #elif (CapSense_IS_DIPLEX_SLIDER)
1088:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Calculate next and previous near to maximum */
1089:Generated_Source\PSoC5/CapSense_CSHL.c ****                     pos     = diplex[maximum];
1090:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posPrev = diplex[maximum - 1u];
1091:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posNext = diplex[maximum + 1u];
1092:Generated_Source\PSoC5/CapSense_CSHL.c ****                     count <<= 1u;                    
1093:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #else                    
1094:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Calculate next and previous near to maximum */
1095:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (maximum >= 1u)
1096:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1097:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posPrev = maximum - 1u;
1098:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1099:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posNext = maximum + 1u; 
1100:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #endif /* (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER) */
1101:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1102:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Copy Signal for found centriod */
1103:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #if (CapSense_IS_DIPLEX_SLIDER)
1104:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS] = startOfSlider[pos];
1105:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #else
1106:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS] = startOfSlider[maximum];
1107:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1108:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
1109:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Check borders for LINEAR Slider */
1110:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1111:Generated_Source\PSoC5/CapSense_CSHL.c ****                 { 
1112:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = 0u;
1113:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[posNext];
1114:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1115:Generated_Source\PSoC5/CapSense_CSHL.c ****                 else if (maximum == ((count) - 1u)) /* End of centroid */
1116:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1117:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[posPrev];
1118:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = 0u;
1119:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1120:Generated_Source\PSoC5/CapSense_CSHL.c ****                 else                                /* Not first Not last */
1121:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1122:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[posPrev];
1123:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[posNext];
1124:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1125:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT>0u)||(CapSense_TOTAL_TOUCH_PADS_COUNT>0
1126:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1127:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_ADD_SLIDER_TYPE)
1128:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1129:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_ADD_SLIDER_TYPE) */
1130:Generated_Source\PSoC5/CapSense_CSHL.c ****     
1131:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Subtract noiseThreshold */
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 42


1132:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(CapSense_centroid[CapSense_POS_PREV] > noiseThreshold)
1133:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1134:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_PREV] -= noiseThreshold;
1135:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1136:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
1137:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1138:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_PREV] = 0u;
1139:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1140:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1141:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Maximum always grater than fingerThreshold, so grate than noiseThreshold */
1142:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_centroid[CapSense_POS] -= noiseThreshold;
1143:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1144:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Subtract noiseThreshold */
1145:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(CapSense_centroid[CapSense_POS_NEXT] > noiseThreshold)
1146:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1147:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_NEXT] -= noiseThreshold;
1148:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1149:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
1150:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1151:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_NEXT] = 0u;
1152:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1153:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1154:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1155:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Si+1 - Si-1 */
1156:Generated_Source\PSoC5/CapSense_CSHL.c ****         numerator = (uint32) CapSense_centroid[CapSense_POS_NEXT] -
1157:Generated_Source\PSoC5/CapSense_CSHL.c ****                     (uint32) CapSense_centroid[CapSense_POS_PREV];
1158:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1159:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Si+1 + Si + Si-1 */
1160:Generated_Source\PSoC5/CapSense_CSHL.c ****         denominator = (int32) CapSense_centroid[CapSense_POS_PREV] + 
1161:Generated_Source\PSoC5/CapSense_CSHL.c ****                       (int32) CapSense_centroid[CapSense_POS] + 
1162:Generated_Source\PSoC5/CapSense_CSHL.c ****                       (int32) CapSense_centroid[CapSense_POS_NEXT];
1163:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1164:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* (numerator/denominator) + maximum */
1165:Generated_Source\PSoC5/CapSense_CSHL.c ****         denominator = (((int32)(uint32)((uint32)numerator << 8u)/denominator) + (int32)(uint32)((ui
1166:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1167:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if(CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
1168:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Only required for RADIAL Slider */
1169:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(denominator < 0)
1170:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1171:Generated_Source\PSoC5/CapSense_CSHL.c ****                 denominator += (int32)((uint16)((uint16) count << 8u));
1172:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1173:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1174:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1175:Generated_Source\PSoC5/CapSense_CSHL.c ****         denominator *= (int16)resolution;
1176:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1177:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Round the relust and put it to uint8 */
1178:Generated_Source\PSoC5/CapSense_CSHL.c ****         position = ((uint8) HI16((uint32)denominator + CapSense_CENTROID_ROUND_VALUE));
1179:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1180:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (position);
1181:Generated_Source\PSoC5/CapSense_CSHL.c ****     }    
1182:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* (CapSense_TOTAL_CENTROIDS_COUNT) */
1183:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1184:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1185:Generated_Source\PSoC5/CapSense_CSHL.c **** #if(CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u)
1186:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1187:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_GetCentroidPos
1188:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 43


1189:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1190:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1191:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Checks the CapSense_Signal[ ] array for a centroid within
1192:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  slider specified range. The centroid position is calculated to the resolution
1193:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1194:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  result if enabled.
1195:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1196:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1197:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  widget:  Widget number.
1198:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  For every linear slider widget there are defines in this format:
1199:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  #define CapSense_LS__"widget_name"            5
1200:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
1201:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1202:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns position value of the linear slider.
1203:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1204:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Side Effects:
1205:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
1206:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1207:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  sensors are active, the function returns 0xFFFF. If an error occurs during
1208:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  execution of the centroid/diplexing algorithm, the function returns 0xFFFF.
1209:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  There are no checks of widget type argument provided to this function.
1210:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
1211:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1212:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Note:
1213:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
1214:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1215:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so
1216:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  that noise will not generate a false centroid.
1217:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1218:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Reentrant:
1219:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  No.
1220:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1221:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1222:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_GetCentroidPos(uint8 widget) 
1223:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1224:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1225:Generated_Source\PSoC5/CapSense_CSHL.c ****             const uint8 CYCODE *diplex;
1226:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1227:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
1228:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1229:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posIndex;
1230:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 firstTimeIndex = CapSense_posFiltersData[widget];
1231:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posFiltersMask = CapSense_posFiltersMask[widget];  
1232:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1233:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1234:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1235:Generated_Source\PSoC5/CapSense_CSHL.c ****              (0u != (CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1236:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 tempPos;
1237:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1238:Generated_Source\PSoC5/CapSense_CSHL.c ****                *   (0u != (CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1239:Generated_Source\PSoC5/CapSense_CSHL.c ****                */
1240:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1241:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maximum;
1242:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 position;
1243:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 offset = CapSense_rawDataIndex[widget];
1244:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 count = CapSense_numberOfSensors[widget];
1245:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 44


1246:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1247:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(widget < CapSense_TOTAL_DIPLEXED_SLIDERS_COUNT)
1248:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1249:Generated_Source\PSoC5/CapSense_CSHL.c ****                 maximum = CapSense_diplexTable[widget];
1250:Generated_Source\PSoC5/CapSense_CSHL.c ****                 diplex = &CapSense_diplexTable[maximum];
1251:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1252:Generated_Source\PSoC5/CapSense_CSHL.c ****             else
1253:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1254:Generated_Source\PSoC5/CapSense_CSHL.c ****                 diplex = 0u;
1255:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1256:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1257:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1258:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Find Maximum within centroid */      
1259:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)        
1260:Generated_Source\PSoC5/CapSense_CSHL.c ****             maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], diplex)
1261:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
1262:Generated_Source\PSoC5/CapSense_CSHL.c ****             maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
1263:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1264:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1265:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (maximum != 0xFFu)
1266:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1267:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Calculate centroid */
1268:Generated_Source\PSoC5/CapSense_CSHL.c ****             position = (uint16) CapSense_CalcCentroid(maximum, 
1269:Generated_Source\PSoC5/CapSense_CSHL.c ****                          offset, count, CapSense_centroidMult[widget], CapSense_noiseThreshold[widg
1270:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1271:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1272:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Check if this linear slider has enabled filters */
1273:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1274:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1275:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Caluclate position to store filters data */
1276:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
1277:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
1278:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (0u == CapSense_posFiltersData[firstTimeIndex])
1279:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1280:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Init filters */
1281:Generated_Source\PSoC5/CapSense_CSHL.c ****                         CapSense_posFiltersData[posIndex] = (uint8) position;
1282:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if ((0u != (CapSense_MEDIAN_FILTER & \
1283:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1284:Generated_Source\PSoC5/CapSense_CSHL.c ****                              (0u != (CapSense_AVERAGING_FILTER & \
1285:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1286:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1287:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER)) || 
1288:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
1289:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1290:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] = (uint8) position;
1291:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1292:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
1293:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1294:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *   (0u != (CapSense_AVERAGING_FILTER & \
1295:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1296:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1297:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1298:Generated_Source\PSoC5/CapSense_CSHL.c ****                         CapSense_posFiltersData[firstTimeIndex] = 1u;
1299:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1300:Generated_Source\PSoC5/CapSense_CSHL.c ****                     else
1301:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1302:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Do filtering */
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 45


1303:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MA
1304:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
1305:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1306:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1307:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_MedianFilter(position,
1308:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1309:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1310:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] =
1311:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
1312:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1313:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1314:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /*(0u != (CapSense_MEDIAN_FILTER &
1315:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *         CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1316:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1317:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1318:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if(0u!=(CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MA
1319:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) 
1320:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1321:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1322:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_AveragingFilter(position,
1323:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1324:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1325:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex+1u]=CapSense_posFiltersData[posInd
1326:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1327:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1328:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_AVERAGING_FILTER & \
1329:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1330:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1331:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1332:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR2_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK
1333:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR2_FILTER)) 
1334:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1335:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_IIR2Filter(position,
1336:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1337:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1338:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1339:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR2_FILTER & \
1340:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1341:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1342:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1343:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR4_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK
1344:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
1345:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1346:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_IIR4Filter(position,
1347:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1348:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1349:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }                                
1350:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR4_FILTER & \
1351:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1352:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1353:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1354:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_JITTER_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MA
1355:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
1356:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1357:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_JitterFilter(position,
1358:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1359:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 46


1360:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1361:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_JITTER_FILTER & \
1362:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1363:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1364:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1365:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1366:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1367:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1368:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1369:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
1370:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1371:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* The maximum wasn't found */
1372:Generated_Source\PSoC5/CapSense_CSHL.c ****             position = 0xFFFFu;
1373:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1374:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if(0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1375:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Reset the filters */
1376:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if(0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1377:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1378:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_posFiltersData[firstTimeIndex] = 0u;
1379:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1380:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1381:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1382:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1383:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1384:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (position);
1385:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1386:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* (CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) */
1387:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1388:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1389:Generated_Source\PSoC5/CapSense_CSHL.c **** #if(CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
1390:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1391:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_GetRadialCentroidPos
1392:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1393:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1394:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1395:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Checks the CapSense_Signal[ ] array for a centroid within
1396:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  slider specified range. The centroid position is calculated to the resolution
1397:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1398:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  result if enabled.
1399:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1400:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1401:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  widget:  Widget number.
1402:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  For every radial slider widget there are defines in this format:
1403:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  #define CapSense_RS_"widget_name"            5
1404:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
1405:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1406:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns position value of the radial slider.
1407:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1408:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Side Effects:
1409:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
1410:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1411:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  sensors are active, the function returns 0xFFFF.
1412:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  There are no checks of widget type argument provided to this function.
1413:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
1414:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1415:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Note:
1416:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 47


1417:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1418:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so 
1419:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  that noise will not generate a false centroid.
1420:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1421:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1422:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Reentrant:
1423:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  No.
1424:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1425:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1426:Generated_Source\PSoC5/CapSense_CSHL.c ****      uint16 CapSense_GetRadialCentroidPos(uint8 widget)
1427:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                       
1428:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1429:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
1430:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posIndex;
1431:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 firstTimeIndex = CapSense_posFiltersData[widget];
1432:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posFiltersMask = CapSense_posFiltersMask[widget]; 
1433:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
1434:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1435:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1436:Generated_Source\PSoC5/CapSense_CSHL.c ****              (0u != (CapSense_AVERAGING_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1437:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 tempPos;
1438:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1439:Generated_Source\PSoC5/CapSense_CSHL.c ****                *   (0u != (CapSense_AVERAGING_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1440:Generated_Source\PSoC5/CapSense_CSHL.c ****                */
1441:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1442:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maximum;
1443:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 position;
1444:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 offset = CapSense_rawDataIndex[widget];
1445:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 count = CapSense_numberOfSensors[widget];
1446:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1447:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Find Maximum within centroid */        
1448:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1449:Generated_Source\PSoC5/CapSense_CSHL.c ****             maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], 0u);
1450:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
1451:Generated_Source\PSoC5/CapSense_CSHL.c ****             maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
1452:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1453:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1454:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (maximum != 0xFFu)
1455:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1456:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Calculate centroid */
1457:Generated_Source\PSoC5/CapSense_CSHL.c ****             position = (uint16) CapSense_CalcCentroid(maximum, 
1458:Generated_Source\PSoC5/CapSense_CSHL.c ****                          offset, count, CapSense_centroidMult[widget], CapSense_noiseThreshold[widg
1459:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1460:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
1461:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Check if this Radial slider has enabled filters */
1462:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1463:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1464:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Caluclate position to store filters data */
1465:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
1466:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
1467:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (0u == CapSense_posFiltersData[firstTimeIndex])
1468:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1469:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Init filters */
1470:Generated_Source\PSoC5/CapSense_CSHL.c ****                         CapSense_posFiltersData[posIndex] = (uint8) position;
1471:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if ((0u != (CapSense_MEDIAN_FILTER & \
1472:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1473:Generated_Source\PSoC5/CapSense_CSHL.c ****                              (0u != (CapSense_AVERAGING_FILTER & \
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 48


1474:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1475:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1476:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))  || 
1477:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
1478:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1479:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] = (uint8) position;
1480:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1481:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
1482:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1483:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *   (0u != (CapSense_AVERAGING_FILTER & \
1484:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1485:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1486:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1487:Generated_Source\PSoC5/CapSense_CSHL.c ****                         CapSense_posFiltersData[firstTimeIndex] = 1u;
1488:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1489:Generated_Source\PSoC5/CapSense_CSHL.c ****                     else
1490:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1491:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Do filtering */
1492:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MA
1493:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
1494:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1495:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1496:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_MedianFilter(position,
1497:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                         CapSense_posFiltersData[pos
1498:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                         CapSense_posFiltersData[pos
1499:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] = 
1500:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                               CapSense_posFiltersDa
1501:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1502:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1503:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_MEDIAN_FILTER & 
1504:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1505:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1506:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1507:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_AVERAGING_FILTER & \
1508:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1509:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER))
1510:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1511:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1512:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_AveragingFilter(position, 
1513:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posI
1514:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posI
1515:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex+1u]= CapSense_posFiltersData[posIn
1516:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1517:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1518:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_AVERAGING_FILTER & \
1519:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1520:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1521:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1522:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR2_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK
1523:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR2_FILTER))
1524:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1525:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_IIR2Filter(position,
1526:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1527:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1528:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1529:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR2_FILTER & 
1530:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 49


1531:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1532:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1533:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR4_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK
1534:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
1535:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1536:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_IIR4Filter(position,
1537:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1538:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1539:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1540:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR4_FILTER & 
1541:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1542:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1543:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1544:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_JITTER_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MA
1545:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
1546:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1547:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_JitterFilter(position, 
1548:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                          CapSense_posFiltersData[po
1549:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1550:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1551:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_JITTER_FILTER &
1552:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1553:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1554:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1555:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1556:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
1557:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1558:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1559:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
1560:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1561:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* The maximum didn't find */
1562:Generated_Source\PSoC5/CapSense_CSHL.c ****             position = 0xFFFFu;
1563:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1564:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
1565:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Reset the filters */
1566:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if((posFiltersMask & CapSense_ANY_POS_FILTER) != 0u)
1567:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1568:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_posFiltersData[firstTimeIndex] = 0u;
1569:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1570:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
1571:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1572:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1573:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (position);
1574:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1575:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif
1576:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1577:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1578:Generated_Source\PSoC5/CapSense_CSHL.c **** #if(CapSense_TOTAL_TOUCH_PADS_COUNT > 0u)
1579:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1580:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_GetTouchCentroidPos
1581:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1582:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1583:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1584:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If a finger is present on touch pad, this function calculates the X and Y
1585:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  position of the finger by calculating the centroids within touch pad specified
1586:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  range. The X and Y positions are calculated to the API resolutions set in the
1587:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  CapSense customizer. Returns a 1 if a finger is on the touchpad.
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 50


1588:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The position filter is applied to the result if enabled.
1589:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  This function is available only if a touch pad is defined by the CapSense
1590:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  customizer.
1591:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1592:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1593:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  widget:  Widget number. 
1594:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  For every touchpad widget there are defines in this format:
1595:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  #define CapSense_TP_"widget_name"            5
1596:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1597:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  pos:     Pointer to the array of two uint16 elements, where result
1598:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  result of calculation of X and Y position are stored.
1599:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  pos[0u]  - position of X
1600:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  pos[1u]  - position of Y
1601:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1602:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1603:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns a 1 if a finger is on the touch pad, 0 - if not.
1604:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1605:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Side Effects:
1606:Generated_Source\PSoC5/CapSense_CSHL.c ****     *   There are no checks of widget type argument provided to this function.
1607:Generated_Source\PSoC5/CapSense_CSHL.c ****     *   The unproper widget type provided will cause unexpected position
1608:Generated_Source\PSoC5/CapSense_CSHL.c ****     *   calculations.
1609:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1610:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Reentrant:
1611:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  No.
1612:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1613:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1614:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 CapSense_GetTouchCentroidPos(uint8 widget, uint16* pos)
1615:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                    
1616:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1617:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
1618:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posXIndex;
1619:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posYIndex;
1620:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 firstTimeIndex = CapSense_posFiltersData[widget];
1621:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posFiltersMask = CapSense_posFiltersMask[widget];
1622:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
1623:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1624:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
1625:Generated_Source\PSoC5/CapSense_CSHL.c ****              (0u != (CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
1626:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint16 tempPos;
1627:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
1628:Generated_Source\PSoC5/CapSense_CSHL.c ****                *   (0u != (CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
1629:Generated_Source\PSoC5/CapSense_CSHL.c ****                */
1630:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1631:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maxX;
1632:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maxY;
1633:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 posX;
1634:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 posY;
1635:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 touch = 0u;
1636:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 offset = CapSense_rawDataIndex[widget];
1637:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 count = CapSense_numberOfSensors[widget];
1638:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1639:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Find Maximum within X centroid */
1640:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1641:Generated_Source\PSoC5/CapSense_CSHL.c ****             maxX = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], 0u);
1642:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
1643:Generated_Source\PSoC5/CapSense_CSHL.c ****             maxX = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
1644:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 51


1645:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1646:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (maxX != 0xFFu)
1647:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1648:Generated_Source\PSoC5/CapSense_CSHL.c ****             offset = CapSense_rawDataIndex[widget + 1u];
1649:Generated_Source\PSoC5/CapSense_CSHL.c ****             count = CapSense_numberOfSensors[widget + 1u];
1650:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1651:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Find Maximum within Y centroid */
1652:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (CapSense_IS_DIPLEX_SLIDER)
1653:Generated_Source\PSoC5/CapSense_CSHL.c ****                 maxY = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget + 1u], 0
1654:Generated_Source\PSoC5/CapSense_CSHL.c ****             #else
1655:Generated_Source\PSoC5/CapSense_CSHL.c ****                 maxY = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget + 1u]);
1656:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1657:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1658:Generated_Source\PSoC5/CapSense_CSHL.c ****             if (maxY != 0xFFu)
1659:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1660:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* X and Y maximums are found = true touch */
1661:Generated_Source\PSoC5/CapSense_CSHL.c ****                 touch = 1u;
1662:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
1663:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Calculate Y centroid */
1664:Generated_Source\PSoC5/CapSense_CSHL.c ****                 posY = CapSense_CalcCentroid(maxY, offset, count, 
1665:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_centroidMult[widget + 1u], CapSense_noiseThreshold[widget + 1u
1666:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
1667:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Calculate X centroid */
1668:Generated_Source\PSoC5/CapSense_CSHL.c ****                 offset = CapSense_rawDataIndex[widget];
1669:Generated_Source\PSoC5/CapSense_CSHL.c ****                 count = CapSense_numberOfSensors[widget];
1670:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
1671:Generated_Source\PSoC5/CapSense_CSHL.c ****                 posX = CapSense_CalcCentroid(maxX, offset, count, 
1672:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_centroidMult[widget],CapSense_noiseThreshold[widget]);
1673:Generated_Source\PSoC5/CapSense_CSHL.c ****     
1674:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
1675:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Check if this TP has enabled filters */
1676:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1677:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1678:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Caluclate position to store filters data */
1679:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posXIndex  = firstTimeIndex + 1u;
1680:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posYIndex  = CapSense_posFiltersData[widget + 1u];
1681:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1682:Generated_Source\PSoC5/CapSense_CSHL.c ****                         if (0u == CapSense_posFiltersData[firstTimeIndex])
1683:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
1684:Generated_Source\PSoC5/CapSense_CSHL.c ****                             /* Init filters */
1685:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_posFiltersData[posXIndex] = posX;
1686:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_posFiltersData[posYIndex] = posY;
1687:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1688:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if((0u != (CapSense_MEDIAN_FILTER & \
1689:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         CapSense_TOUCH_PADS_POS_FILTERS_MASK))|| \
1690:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 (0u != (CapSense_AVERAGING_FILTER & \
1691:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
1692:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1693:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER)) || 
1694:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
1695:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1696:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex + 1u] = posX;
1697:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex + 1u] = posY;
1698:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1699:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
1700:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
1701:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *    (0u != (CapSense_AVERAGING_FILTER & \
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 52


1702:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *            CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
1703:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1704:Generated_Source\PSoC5/CapSense_CSHL.c ****                             
1705:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_posFiltersData[firstTimeIndex] = 1u;
1706:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
1707:Generated_Source\PSoC5/CapSense_CSHL.c ****                         else
1708:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
1709:Generated_Source\PSoC5/CapSense_CSHL.c ****                             /* Do filtering */
1710:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if (0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MA
1711:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
1712:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1713:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     tempPos = posX;
1714:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_MedianFilter(posX,
1715:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posXI
1716:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posXI
1717:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex + 1u] = 
1718:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
1719:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = tempPos;
1720:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     
1721:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     tempPos = posY;
1722:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_MedianFilter(posY,
1723:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posY
1724:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posY
1725:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex + 1u] = 
1726:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
1727:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = tempPos;
1728:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1729:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 
1730:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_MEDIAN_FILTER & \
1731:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *          CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1732:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1733:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1734:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if(0u !=(CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_M
1735:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER))
1736:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1737:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     tempPos = posX;
1738:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_AveragingFilter(posX,
1739:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posX
1740:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posX
1741:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex + 1u] = 
1742:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
1743:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = tempPos;
1744:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     
1745:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     tempPos = posY;
1746:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_AveragingFilter(posY, 
1747:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posYI
1748:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posYI
1749:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex + 1u] = 
1750:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
1751:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = tempPos;
1752:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1753:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1754:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_AVERAGING_FILTER & \
1755:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1756:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1757:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1758:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if (0u != (CapSense_IIR2_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 53


1759:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_IIR2_FILTER))
1760:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1761:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_IIR2Filter(posX, 
1762:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                            CapSense_posFiltersData[
1763:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = posX;
1764:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     
1765:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_IIR2Filter(posY, 
1766:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
1767:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = posY;
1768:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1769:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 
1770:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_IIR2_FILTER & \
1771:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *          CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1772:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1773:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1774:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if (0u != (CapSense_IIR4_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK
1775:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
1776:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1777:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_IIR4Filter((uint16)posX,
1778:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1779:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = posX;
1780:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1781:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_IIR4Filter((uint16)posY,
1782:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1783:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = posY;
1784:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1785:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 
1786:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_IIR4_FILTER & \
1787:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1788:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1789:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1790:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if (0u != (CapSense_JITTER_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MA
1791:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
1792:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     {
1793:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         posX = (uint8) CapSense_JitterFilter(posX, 
1794:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
1795:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         CapSense_posFiltersData[posXIndex] = posX;
1796:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         
1797:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         posY = (uint8) CapSense_JitterFilter(posY, 
1798:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
1799:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         CapSense_posFiltersData[posYIndex] = posY;
1800:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     }
1801:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_JITTER_FILTER & \
1802:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1803:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1804:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
1805:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1806:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
1807:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1808:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Save positions */
1809:Generated_Source\PSoC5/CapSense_CSHL.c ****                 pos[0u] = posX;
1810:Generated_Source\PSoC5/CapSense_CSHL.c ****                 pos[1u] = posY;
1811:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1812:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1813:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1814:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
1815:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(touch == 0u)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 54


1816:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1817:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Reset the filters */
1818:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if ((posFiltersMask & CapSense_ANY_POS_FILTER) != 0u)
1819:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1820:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_posFiltersData[firstTimeIndex] = 0u;
1821:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1822:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1823:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
1824:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1825:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (touch);
1826:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1827:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* (CapSense_TOTAL_TOUCH_PADS_COUNT > 0u) */
1828:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1829:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1830:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
1831:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_POS_FILTERS_MASK & CapSense_MEDIAN_FILTER) )
1832:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1833:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_MedianFilter
1834:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1835:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1836:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1837:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Median filter function. 
1838:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The median filter looks at the three most recent samples and reports the 
1839:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  median value.
1840:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1841:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1842:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x1:  Current value.
1843:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x2:  Previous value.
1844:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x3:  Before previous value.
1845:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1846:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1847:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns filtered value.
1848:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1849:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1850:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_MedianFilter(uint16 x1, uint16 x2, uint16 x3)
1851:Generated_Source\PSoC5/CapSense_CSHL.c ****                                          
1852:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1853:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 tmp;
1854:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1855:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (x1 > x2)
1856:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1857:Generated_Source\PSoC5/CapSense_CSHL.c ****             tmp = x2;
1858:Generated_Source\PSoC5/CapSense_CSHL.c ****             x2 = x1;
1859:Generated_Source\PSoC5/CapSense_CSHL.c ****             x1 = tmp;
1860:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1861:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1862:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (x2 > x3)
1863:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1864:Generated_Source\PSoC5/CapSense_CSHL.c ****             x2 = x3;
1865:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1866:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1867:Generated_Source\PSoC5/CapSense_CSHL.c ****         return ((x1 > x2) ? x1 : x2);
1868:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1869:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
1870:Generated_Source\PSoC5/CapSense_CSHL.c ****        *    (CapSense_POS_FILTERS_MASK & CapSense_MEDIAN_FILTER) )
1871:Generated_Source\PSoC5/CapSense_CSHL.c ****        */
1872:Generated_Source\PSoC5/CapSense_CSHL.c **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 55


1873:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1874:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) | \
1875:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_POS_FILTERS_MASK & CapSense_AVERAGING_FILTER) )
1876:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1877:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_AveragingFilter
1878:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1879:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1880:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1881:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Averaging filter function.
1882:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The averaging filter looks at the three most recent samples of position and
1883:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  reports the averaging value.
1884:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1885:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1886:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x1:  Current value.
1887:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x2:  Previous value.
1888:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x3:  Before previous value.
1889:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1890:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1891:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns filtered value.
1892:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1893:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1894:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_AveragingFilter(uint16 x1, uint16 x2, uint16 x3)
1895:Generated_Source\PSoC5/CapSense_CSHL.c ****                                             
1896:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1897:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint32 tmp = ((uint32)x1 + (uint32)x2 + (uint32)x3) / 3u;
1898:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1899:Generated_Source\PSoC5/CapSense_CSHL.c ****         return ((uint16) tmp);
1900:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1901:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) | \
1902:Generated_Source\PSoC5/CapSense_CSHL.c ****        *    (CapSense_POS_FILTERS_MASK & CapSense_AVERAGING_FILTER) )
1903:Generated_Source\PSoC5/CapSense_CSHL.c ****        */
1904:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1905:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1906:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) | \
1907:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_POS_FILTERS_MASK & CapSense_IIR2_FILTER) )
1908:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1909:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_IIR2Filter
1910:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1911:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1912:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1913:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  IIR1/2 filter function. IIR1/2 = 1/2current + 1/2previous.
1914:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1915:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1916:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x1:  Current value.
1917:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x2:  Previous value.
1918:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1919:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1920:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns filtered value.
1921:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1922:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1923:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_IIR2Filter(uint16 x1, uint16 x2)
1924:Generated_Source\PSoC5/CapSense_CSHL.c ****                                        
1925:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1926:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint32 tmp;
1927:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1928:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* IIR = 1/2 Current Value+ 1/2 Previous Value */
1929:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp = (uint32)x1 + (uint32)x2;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 56


1930:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp >>= 1u;
1931:Generated_Source\PSoC5/CapSense_CSHL.c ****     
1932:Generated_Source\PSoC5/CapSense_CSHL.c ****         return ((uint16) tmp);
1933:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1934:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) | \
1935:Generated_Source\PSoC5/CapSense_CSHL.c ****        *    (CapSense_POS_FILTERS_MASK & CapSense_IIR2_FILTER) )
1936:Generated_Source\PSoC5/CapSense_CSHL.c ****        */
1937:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1938:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1939:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER) | \
1940:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_POS_FILTERS_MASK & CapSense_IIR4_FILTER) )
1941:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1942:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_IIR4Filter
1943:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1944:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1945:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1946:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  IIR1/4 filter function. IIR1/4 = 1/4current + 3/4previous.
1947:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1948:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1949:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x1:  Current value.
1950:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x2:  Previous value.
1951:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1952:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1953:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns filtered value.
1954:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1955:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1956:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_IIR4Filter(uint16 x1, uint16 x2)
1957:Generated_Source\PSoC5/CapSense_CSHL.c ****                                        
1958:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 1194              		.loc 1 1958 0
 1195              		.cfi_startproc
 1196              		@ args = 0, pretend = 0, frame = 16
 1197              		@ frame_needed = 1, uses_anonymous_args = 0
 1198              		@ link register save eliminated.
 1199 0000 80B4     		push	{r7}
 1200              		.cfi_def_cfa_offset 4
 1201              		.cfi_offset 7, -4
 1202 0002 85B0     		sub	sp, sp, #20
 1203              		.cfi_def_cfa_offset 24
 1204 0004 00AF     		add	r7, sp, #0
 1205              		.cfi_def_cfa_register 7
 1206 0006 0346     		mov	r3, r0
 1207 0008 0A46     		mov	r2, r1
 1208 000a FB80     		strh	r3, [r7, #6]	@ movhi
 1209 000c 1346     		mov	r3, r2	@ movhi
 1210 000e BB80     		strh	r3, [r7, #4]	@ movhi
1959:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint32 tmp;
1960:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1961:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* IIR = 1/4 Current Value + 3/4 Previous Value */
1962:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp = (uint32)x1 + (uint32)x2;
 1211              		.loc 1 1962 0
 1212 0010 FA88     		ldrh	r2, [r7, #6]
 1213 0012 BB88     		ldrh	r3, [r7, #4]
 1214 0014 1344     		add	r3, r3, r2
 1215 0016 FB60     		str	r3, [r7, #12]
1963:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp += ((uint32)x2 << 1u);
 1216              		.loc 1 1963 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 57


 1217 0018 BB88     		ldrh	r3, [r7, #4]
 1218 001a 5B00     		lsls	r3, r3, #1
 1219 001c FA68     		ldr	r2, [r7, #12]
 1220 001e 1344     		add	r3, r3, r2
 1221 0020 FB60     		str	r3, [r7, #12]
1964:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp >>= 2u;
 1222              		.loc 1 1964 0
 1223 0022 FB68     		ldr	r3, [r7, #12]
 1224 0024 9B08     		lsrs	r3, r3, #2
 1225 0026 FB60     		str	r3, [r7, #12]
1965:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1966:Generated_Source\PSoC5/CapSense_CSHL.c ****         return ((uint16) tmp);
 1226              		.loc 1 1966 0
 1227 0028 FB68     		ldr	r3, [r7, #12]
 1228 002a 9BB2     		uxth	r3, r3
1967:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 1229              		.loc 1 1967 0
 1230 002c 1846     		mov	r0, r3
 1231 002e 1437     		adds	r7, r7, #20
 1232              		.cfi_def_cfa_offset 4
 1233 0030 BD46     		mov	sp, r7
 1234              		.cfi_def_cfa_register 13
 1235              		@ sp needed
 1236 0032 80BC     		pop	{r7}
 1237              		.cfi_restore 7
 1238              		.cfi_def_cfa_offset 0
 1239 0034 7047     		bx	lr
 1240              		.cfi_endproc
 1241              	.LFE11:
 1242              		.size	CapSense_IIR4Filter, .-CapSense_IIR4Filter
 1243 0036 00BF     		.text
 1244              	.Letext0:
 1245              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 1246              		.file 3 "Generated_Source\\PSoC5\\CapSense.h"
 1247              		.file 4 "Generated_Source\\PSoC5\\CapSense_CSHL.h"
 1248              		.section	.debug_info,"",%progbits
 1249              	.Ldebug_info0:
 1250 0000 AE050000 		.4byte	0x5ae
 1251 0004 0400     		.2byte	0x4
 1252 0006 00000000 		.4byte	.Ldebug_abbrev0
 1253 000a 04       		.byte	0x4
 1254 000b 01       		.uleb128 0x1
 1255 000c 51000000 		.4byte	.LASF60
 1256 0010 0C       		.byte	0xc
 1257 0011 D8040000 		.4byte	.LASF61
 1258 0015 96020000 		.4byte	.LASF62
 1259 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1260 001d 00000000 		.4byte	0
 1261 0021 00000000 		.4byte	.Ldebug_line0
 1262 0025 02       		.uleb128 0x2
 1263 0026 01       		.byte	0x1
 1264 0027 06       		.byte	0x6
 1265 0028 5E010000 		.4byte	.LASF0
 1266 002c 02       		.uleb128 0x2
 1267 002d 01       		.byte	0x1
 1268 002e 08       		.byte	0x8
 1269 002f 17040000 		.4byte	.LASF1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 58


 1270 0033 02       		.uleb128 0x2
 1271 0034 02       		.byte	0x2
 1272 0035 05       		.byte	0x5
 1273 0036 54040000 		.4byte	.LASF2
 1274 003a 02       		.uleb128 0x2
 1275 003b 02       		.byte	0x2
 1276 003c 07       		.byte	0x7
 1277 003d 62020000 		.4byte	.LASF3
 1278 0041 02       		.uleb128 0x2
 1279 0042 04       		.byte	0x4
 1280 0043 05       		.byte	0x5
 1281 0044 A0010000 		.4byte	.LASF4
 1282 0048 02       		.uleb128 0x2
 1283 0049 04       		.byte	0x4
 1284 004a 07       		.byte	0x7
 1285 004b 1F020000 		.4byte	.LASF5
 1286 004f 02       		.uleb128 0x2
 1287 0050 08       		.byte	0x8
 1288 0051 05       		.byte	0x5
 1289 0052 50010000 		.4byte	.LASF6
 1290 0056 02       		.uleb128 0x2
 1291 0057 08       		.byte	0x8
 1292 0058 07       		.byte	0x7
 1293 0059 DF000000 		.4byte	.LASF7
 1294 005d 03       		.uleb128 0x3
 1295 005e 04       		.byte	0x4
 1296 005f 05       		.byte	0x5
 1297 0060 696E7400 		.ascii	"int\000"
 1298 0064 02       		.uleb128 0x2
 1299 0065 04       		.byte	0x4
 1300 0066 07       		.byte	0x7
 1301 0067 12020000 		.4byte	.LASF8
 1302 006b 04       		.uleb128 0x4
 1303 006c C9010000 		.4byte	.LASF9
 1304 0070 02       		.byte	0x2
 1305 0071 E901     		.2byte	0x1e9
 1306 0073 2C000000 		.4byte	0x2c
 1307 0077 04       		.uleb128 0x4
 1308 0078 00000000 		.4byte	.LASF10
 1309 007c 02       		.byte	0x2
 1310 007d EA01     		.2byte	0x1ea
 1311 007f 3A000000 		.4byte	0x3a
 1312 0083 04       		.uleb128 0x4
 1313 0084 EC010000 		.4byte	.LASF11
 1314 0088 02       		.byte	0x2
 1315 0089 EB01     		.2byte	0x1eb
 1316 008b 48000000 		.4byte	0x48
 1317 008f 02       		.uleb128 0x2
 1318 0090 04       		.byte	0x4
 1319 0091 04       		.byte	0x4
 1320 0092 F4030000 		.4byte	.LASF12
 1321 0096 02       		.uleb128 0x2
 1322 0097 08       		.byte	0x8
 1323 0098 04       		.byte	0x4
 1324 0099 CF010000 		.4byte	.LASF13
 1325 009d 02       		.uleb128 0x2
 1326 009e 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 59


 1327 009f 08       		.byte	0x8
 1328 00a0 C5040000 		.4byte	.LASF14
 1329 00a4 02       		.uleb128 0x2
 1330 00a5 08       		.byte	0x8
 1331 00a6 04       		.byte	0x4
 1332 00a7 59030000 		.4byte	.LASF15
 1333 00ab 02       		.uleb128 0x2
 1334 00ac 04       		.byte	0x4
 1335 00ad 07       		.byte	0x7
 1336 00ae 3A030000 		.4byte	.LASF16
 1337 00b2 05       		.uleb128 0x5
 1338 00b3 6C040000 		.4byte	.LASF17
 1339 00b7 01       		.byte	0x1
 1340 00b8 8F       		.byte	0x8f
 1341 00b9 00000000 		.4byte	.LFB0
 1342 00bd 7C000000 		.4byte	.LFE0-.LFB0
 1343 00c1 01       		.uleb128 0x1
 1344 00c2 9C       		.byte	0x9c
 1345 00c3 E4000000 		.4byte	0xe4
 1346 00c7 06       		.uleb128 0x6
 1347 00c8 75020000 		.4byte	.LASF19
 1348 00cc 01       		.byte	0x1
 1349 00cd 8F       		.byte	0x8f
 1350 00ce 6B000000 		.4byte	0x6b
 1351 00d2 02       		.uleb128 0x2
 1352 00d3 91       		.byte	0x91
 1353 00d4 6F       		.sleb128 -17
 1354 00d5 07       		.uleb128 0x7
 1355 00d6 5E040000 		.4byte	.LASF21
 1356 00da 01       		.byte	0x1
 1357 00db 93       		.byte	0x93
 1358 00dc 6B000000 		.4byte	0x6b
 1359 00e0 02       		.uleb128 0x2
 1360 00e1 91       		.byte	0x91
 1361 00e2 77       		.sleb128 -9
 1362 00e3 00       		.byte	0
 1363 00e4 08       		.uleb128 0x8
 1364 00e5 65030000 		.4byte	.LASF18
 1365 00e9 01       		.byte	0x1
 1366 00ea D8       		.byte	0xd8
 1367 00eb 00000000 		.4byte	.LFB1
 1368 00ef 2E000000 		.4byte	.LFE1-.LFB1
 1369 00f3 01       		.uleb128 0x1
 1370 00f4 9C       		.byte	0x9c
 1371 00f5 08010000 		.4byte	0x108
 1372 00f9 06       		.uleb128 0x6
 1373 00fa 75020000 		.4byte	.LASF19
 1374 00fe 01       		.byte	0x1
 1375 00ff D8       		.byte	0xd8
 1376 0100 6B000000 		.4byte	0x6b
 1377 0104 02       		.uleb128 0x2
 1378 0105 91       		.byte	0x91
 1379 0106 77       		.sleb128 -9
 1380 0107 00       		.byte	0
 1381 0108 09       		.uleb128 0x9
 1382 0109 25040000 		.4byte	.LASF20
 1383 010d 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 60


 1384 010e 0C01     		.2byte	0x10c
 1385 0110 00000000 		.4byte	.LFB2
 1386 0114 28000000 		.4byte	.LFE2-.LFB2
 1387 0118 01       		.uleb128 0x1
 1388 0119 9C       		.byte	0x9c
 1389 011a 2C010000 		.4byte	0x12c
 1390 011e 0A       		.uleb128 0xa
 1391 011f 6900     		.ascii	"i\000"
 1392 0121 01       		.byte	0x1
 1393 0122 0F01     		.2byte	0x10f
 1394 0124 6B000000 		.4byte	0x6b
 1395 0128 02       		.uleb128 0x2
 1396 0129 91       		.byte	0x91
 1397 012a 77       		.sleb128 -9
 1398 012b 00       		.byte	0
 1399 012c 09       		.uleb128 0x9
 1400 012d 0C010000 		.4byte	.LASF22
 1401 0131 01       		.byte	0x1
 1402 0132 2D01     		.2byte	0x12d
 1403 0134 00000000 		.4byte	.LFB3
 1404 0138 70000000 		.4byte	.LFE3-.LFB3
 1405 013c 01       		.uleb128 0x1
 1406 013d 9C       		.byte	0x9c
 1407 013e 6E010000 		.4byte	0x16e
 1408 0142 0A       		.uleb128 0xa
 1409 0143 6900     		.ascii	"i\000"
 1410 0145 01       		.byte	0x1
 1411 0146 3001     		.2byte	0x130
 1412 0148 6B000000 		.4byte	0x6b
 1413 014c 02       		.uleb128 0x2
 1414 014d 91       		.byte	0x91
 1415 014e 77       		.sleb128 -9
 1416 014f 0A       		.uleb128 0xa
 1417 0150 706F7300 		.ascii	"pos\000"
 1418 0154 01       		.byte	0x1
 1419 0155 3101     		.2byte	0x131
 1420 0157 6B000000 		.4byte	0x6b
 1421 015b 02       		.uleb128 0x2
 1422 015c 91       		.byte	0x91
 1423 015d 76       		.sleb128 -10
 1424 015e 0B       		.uleb128 0xb
 1425 015f A4030000 		.4byte	.LASF23
 1426 0163 01       		.byte	0x1
 1427 0164 3201     		.2byte	0x132
 1428 0166 6B000000 		.4byte	0x6b
 1429 016a 02       		.uleb128 0x2
 1430 016b 91       		.byte	0x91
 1431 016c 75       		.sleb128 -11
 1432 016d 00       		.byte	0
 1433 016e 09       		.uleb128 0x9
 1434 016f 0E030000 		.4byte	.LASF24
 1435 0173 01       		.byte	0x1
 1436 0174 7001     		.2byte	0x170
 1437 0176 00000000 		.4byte	.LFB4
 1438 017a 64010000 		.4byte	.LFE4-.LFB4
 1439 017e 01       		.uleb128 0x1
 1440 017f 9C       		.byte	0x9c
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 61


 1441 0180 DF010000 		.4byte	0x1df
 1442 0184 0C       		.uleb128 0xc
 1443 0185 75020000 		.4byte	.LASF19
 1444 0189 01       		.byte	0x1
 1445 018a 7001     		.2byte	0x170
 1446 018c 6B000000 		.4byte	0x6b
 1447 0190 02       		.uleb128 0x2
 1448 0191 91       		.byte	0x91
 1449 0192 67       		.sleb128 -25
 1450 0193 0B       		.uleb128 0xb
 1451 0194 2C030000 		.4byte	.LASF25
 1452 0198 01       		.byte	0x1
 1453 0199 7301     		.2byte	0x173
 1454 019b 83000000 		.4byte	0x83
 1455 019f 02       		.uleb128 0x2
 1456 01a0 91       		.byte	0x91
 1457 01a1 6C       		.sleb128 -20
 1458 01a2 0B       		.uleb128 0xb
 1459 01a3 2B050000 		.4byte	.LASF26
 1460 01a7 01       		.byte	0x1
 1461 01a8 7401     		.2byte	0x174
 1462 01aa 77000000 		.4byte	0x77
 1463 01ae 02       		.uleb128 0x2
 1464 01af 91       		.byte	0x91
 1465 01b0 76       		.sleb128 -10
 1466 01b1 0B       		.uleb128 0xb
 1467 01b2 07000000 		.4byte	.LASF27
 1468 01b6 01       		.byte	0x1
 1469 01b7 7501     		.2byte	0x175
 1470 01b9 77000000 		.4byte	0x77
 1471 01bd 02       		.uleb128 0x2
 1472 01be 91       		.byte	0x91
 1473 01bf 70       		.sleb128 -16
 1474 01c0 0B       		.uleb128 0xb
 1475 01c1 5E040000 		.4byte	.LASF21
 1476 01c5 01       		.byte	0x1
 1477 01c6 7601     		.2byte	0x176
 1478 01c8 6B000000 		.4byte	0x6b
 1479 01cc 02       		.uleb128 0x2
 1480 01cd 91       		.byte	0x91
 1481 01ce 75       		.sleb128 -11
 1482 01cf 0B       		.uleb128 0xb
 1483 01d0 45040000 		.4byte	.LASF28
 1484 01d4 01       		.byte	0x1
 1485 01d5 7701     		.2byte	0x177
 1486 01d7 77000000 		.4byte	0x77
 1487 01db 02       		.uleb128 0x2
 1488 01dc 91       		.byte	0x91
 1489 01dd 72       		.sleb128 -14
 1490 01de 00       		.byte	0
 1491 01df 09       		.uleb128 0x9
 1492 01e0 30010000 		.4byte	.LASF29
 1493 01e4 01       		.byte	0x1
 1494 01e5 1D02     		.2byte	0x21d
 1495 01e7 00000000 		.4byte	.LFB5
 1496 01eb 50000000 		.4byte	.LFE5-.LFB5
 1497 01ef 01       		.uleb128 0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 62


 1498 01f0 9C       		.byte	0x9c
 1499 01f1 21020000 		.4byte	0x221
 1500 01f5 0A       		.uleb128 0xa
 1501 01f6 6900     		.ascii	"i\000"
 1502 01f8 01       		.byte	0x1
 1503 01f9 2002     		.2byte	0x220
 1504 01fb 6B000000 		.4byte	0x6b
 1505 01ff 02       		.uleb128 0x2
 1506 0200 91       		.byte	0x91
 1507 0201 77       		.sleb128 -9
 1508 0202 0A       		.uleb128 0xa
 1509 0203 706F7300 		.ascii	"pos\000"
 1510 0207 01       		.byte	0x1
 1511 0208 2102     		.2byte	0x221
 1512 020a 6B000000 		.4byte	0x6b
 1513 020e 02       		.uleb128 0x2
 1514 020f 91       		.byte	0x91
 1515 0210 76       		.sleb128 -10
 1516 0211 0B       		.uleb128 0xb
 1517 0212 A4030000 		.4byte	.LASF23
 1518 0216 01       		.byte	0x1
 1519 0217 2202     		.2byte	0x222
 1520 0219 6B000000 		.4byte	0x6b
 1521 021d 02       		.uleb128 0x2
 1522 021e 91       		.byte	0x91
 1523 021f 75       		.sleb128 -11
 1524 0220 00       		.byte	0
 1525 0221 0D       		.uleb128 0xd
 1526 0222 87030000 		.4byte	.LASF35
 1527 0226 01       		.byte	0x1
 1528 0227 5702     		.2byte	0x257
 1529 0229 6B000000 		.4byte	0x6b
 1530 022d 00000000 		.4byte	.LFB6
 1531 0231 10010000 		.4byte	.LFE6-.LFB6
 1532 0235 01       		.uleb128 0x1
 1533 0236 9C       		.byte	0x9c
 1534 0237 B4020000 		.4byte	0x2b4
 1535 023b 0C       		.uleb128 0xc
 1536 023c 75020000 		.4byte	.LASF19
 1537 0240 01       		.byte	0x1
 1538 0241 5702     		.2byte	0x257
 1539 0243 6B000000 		.4byte	0x6b
 1540 0247 02       		.uleb128 0x2
 1541 0248 91       		.byte	0x91
 1542 0249 67       		.sleb128 -25
 1543 024a 0B       		.uleb128 0xb
 1544 024b CA040000 		.4byte	.LASF30
 1545 024f 01       		.byte	0x1
 1546 0250 5A02     		.2byte	0x25a
 1547 0252 6B000000 		.4byte	0x6b
 1548 0256 02       		.uleb128 0x2
 1549 0257 91       		.byte	0x91
 1550 0258 6E       		.sleb128 -18
 1551 0259 0A       		.uleb128 0xa
 1552 025a 706F7300 		.ascii	"pos\000"
 1553 025e 01       		.byte	0x1
 1554 025f 5C02     		.2byte	0x25c
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 63


 1555 0261 6B000000 		.4byte	0x6b
 1556 0265 02       		.uleb128 0x2
 1557 0266 91       		.byte	0x91
 1558 0267 77       		.sleb128 -9
 1559 0268 0B       		.uleb128 0xb
 1560 0269 65040000 		.4byte	.LASF31
 1561 026d 01       		.byte	0x1
 1562 026e 5D02     		.2byte	0x25d
 1563 0270 6B000000 		.4byte	0x6b
 1564 0274 02       		.uleb128 0x2
 1565 0275 91       		.byte	0x91
 1566 0276 76       		.sleb128 -10
 1567 0277 0B       		.uleb128 0xb
 1568 0278 5E040000 		.4byte	.LASF21
 1569 027c 01       		.byte	0x1
 1570 027d 5F02     		.2byte	0x25f
 1571 027f 6B000000 		.4byte	0x6b
 1572 0283 02       		.uleb128 0x2
 1573 0284 91       		.byte	0x91
 1574 0285 75       		.sleb128 -11
 1575 0286 0B       		.uleb128 0xb
 1576 0287 41000000 		.4byte	.LASF32
 1577 028b 01       		.byte	0x1
 1578 028c 6002     		.2byte	0x260
 1579 028e 77000000 		.4byte	0x77
 1580 0292 02       		.uleb128 0x2
 1581 0293 91       		.byte	0x91
 1582 0294 72       		.sleb128 -14
 1583 0295 0B       		.uleb128 0xb
 1584 0296 F3010000 		.4byte	.LASF33
 1585 029a 01       		.byte	0x1
 1586 029b 6102     		.2byte	0x261
 1587 029d 77000000 		.4byte	0x77
 1588 02a1 02       		.uleb128 0x2
 1589 02a2 91       		.byte	0x91
 1590 02a3 70       		.sleb128 -16
 1591 02a4 0B       		.uleb128 0xb
 1592 02a5 31030000 		.4byte	.LASF34
 1593 02a9 01       		.byte	0x1
 1594 02aa 6202     		.2byte	0x262
 1595 02ac 6B000000 		.4byte	0x6b
 1596 02b0 02       		.uleb128 0x2
 1597 02b1 91       		.byte	0x91
 1598 02b2 6F       		.sleb128 -17
 1599 02b3 00       		.byte	0
 1600 02b4 0E       		.uleb128 0xe
 1601 02b5 FA030000 		.4byte	.LASF36
 1602 02b9 01       		.byte	0x1
 1603 02ba 9F02     		.2byte	0x29f
 1604 02bc 6B000000 		.4byte	0x6b
 1605 02c0 00000000 		.4byte	.LFB7
 1606 02c4 54000000 		.4byte	.LFE7-.LFB7
 1607 02c8 01       		.uleb128 0x1
 1608 02c9 9C       		.byte	0x9c
 1609 02ca 0B030000 		.4byte	0x30b
 1610 02ce 0C       		.uleb128 0xc
 1611 02cf 5E040000 		.4byte	.LASF21
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 64


 1612 02d3 01       		.byte	0x1
 1613 02d4 9F02     		.2byte	0x29f
 1614 02d6 6B000000 		.4byte	0x6b
 1615 02da 02       		.uleb128 0x2
 1616 02db 91       		.byte	0x91
 1617 02dc 6F       		.sleb128 -17
 1618 02dd 0B       		.uleb128 0xb
 1619 02de 81010000 		.4byte	.LASF37
 1620 02e2 01       		.byte	0x1
 1621 02e3 A202     		.2byte	0x2a2
 1622 02e5 6B000000 		.4byte	0x6b
 1623 02e9 02       		.uleb128 0x2
 1624 02ea 91       		.byte	0x91
 1625 02eb 77       		.sleb128 -9
 1626 02ec 0B       		.uleb128 0xb
 1627 02ed 8A010000 		.4byte	.LASF38
 1628 02f1 01       		.byte	0x1
 1629 02f2 A302     		.2byte	0x2a3
 1630 02f4 6B000000 		.4byte	0x6b
 1631 02f8 02       		.uleb128 0x2
 1632 02f9 91       		.byte	0x91
 1633 02fa 75       		.sleb128 -11
 1634 02fb 0B       		.uleb128 0xb
 1635 02fc 9A010000 		.4byte	.LASF39
 1636 0300 01       		.byte	0x1
 1637 0301 A402     		.2byte	0x2a4
 1638 0303 6B000000 		.4byte	0x6b
 1639 0307 02       		.uleb128 0x2
 1640 0308 91       		.byte	0x91
 1641 0309 76       		.sleb128 -10
 1642 030a 00       		.byte	0
 1643 030b 0E       		.uleb128 0xe
 1644 030c A9010000 		.4byte	.LASF40
 1645 0310 01       		.byte	0x1
 1646 0311 CB02     		.2byte	0x2cb
 1647 0313 6B000000 		.4byte	0x6b
 1648 0317 00000000 		.4byte	.LFB8
 1649 031b 38000000 		.4byte	.LFE8-.LFB8
 1650 031f 01       		.uleb128 0x1
 1651 0320 9C       		.byte	0x9c
 1652 0321 42030000 		.4byte	0x342
 1653 0325 0A       		.uleb128 0xa
 1654 0326 6900     		.ascii	"i\000"
 1655 0328 01       		.byte	0x1
 1656 0329 CE02     		.2byte	0x2ce
 1657 032b 6B000000 		.4byte	0x6b
 1658 032f 02       		.uleb128 0x2
 1659 0330 91       		.byte	0x91
 1660 0331 77       		.sleb128 -9
 1661 0332 0B       		.uleb128 0xb
 1662 0333 9A010000 		.4byte	.LASF39
 1663 0337 01       		.byte	0x1
 1664 0338 CF02     		.2byte	0x2cf
 1665 033a 6B000000 		.4byte	0x6b
 1666 033e 02       		.uleb128 0x2
 1667 033f 91       		.byte	0x91
 1668 0340 76       		.sleb128 -10
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 65


 1669 0341 00       		.byte	0
 1670 0342 0F       		.uleb128 0xf
 1671 0343 43030000 		.4byte	.LASF41
 1672 0347 01       		.byte	0x1
 1673 0348 F902     		.2byte	0x2f9
 1674 034a 00000000 		.4byte	.LFB9
 1675 034e 68000000 		.4byte	.LFE9-.LFB9
 1676 0352 01       		.uleb128 0x1
 1677 0353 9C       		.byte	0x9c
 1678 0354 A4030000 		.4byte	0x3a4
 1679 0358 0C       		.uleb128 0xc
 1680 0359 5E040000 		.4byte	.LASF21
 1681 035d 01       		.byte	0x1
 1682 035e F902     		.2byte	0x2f9
 1683 0360 6B000000 		.4byte	0x6b
 1684 0364 02       		.uleb128 0x2
 1685 0365 91       		.byte	0x91
 1686 0366 6F       		.sleb128 -17
 1687 0367 0A       		.uleb128 0xa
 1688 0368 706F7300 		.ascii	"pos\000"
 1689 036c 01       		.byte	0x1
 1690 036d FC02     		.2byte	0x2fc
 1691 036f 6B000000 		.4byte	0x6b
 1692 0373 02       		.uleb128 0x2
 1693 0374 91       		.byte	0x91
 1694 0375 75       		.sleb128 -11
 1695 0376 0B       		.uleb128 0xb
 1696 0377 A4030000 		.4byte	.LASF23
 1697 037b 01       		.byte	0x1
 1698 037c FD02     		.2byte	0x2fd
 1699 037e 6B000000 		.4byte	0x6b
 1700 0382 02       		.uleb128 0x2
 1701 0383 91       		.byte	0x91
 1702 0384 74       		.sleb128 -12
 1703 0385 0B       		.uleb128 0xb
 1704 0386 81010000 		.4byte	.LASF37
 1705 038a 01       		.byte	0x1
 1706 038b FE02     		.2byte	0x2fe
 1707 038d 6B000000 		.4byte	0x6b
 1708 0391 02       		.uleb128 0x2
 1709 0392 91       		.byte	0x91
 1710 0393 77       		.sleb128 -9
 1711 0394 0B       		.uleb128 0xb
 1712 0395 8A010000 		.4byte	.LASF38
 1713 0399 01       		.byte	0x1
 1714 039a FF02     		.2byte	0x2ff
 1715 039c 6B000000 		.4byte	0x6b
 1716 03a0 02       		.uleb128 0x2
 1717 03a1 91       		.byte	0x91
 1718 03a2 76       		.sleb128 -10
 1719 03a3 00       		.byte	0
 1720 03a4 0F       		.uleb128 0xf
 1721 03a5 6A010000 		.4byte	.LASF42
 1722 03a9 01       		.byte	0x1
 1723 03aa 2B03     		.2byte	0x32b
 1724 03ac 00000000 		.4byte	.LFB10
 1725 03b0 6C000000 		.4byte	.LFE10-.LFB10
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 66


 1726 03b4 01       		.uleb128 0x1
 1727 03b5 9C       		.byte	0x9c
 1728 03b6 06040000 		.4byte	0x406
 1729 03ba 0C       		.uleb128 0xc
 1730 03bb 5E040000 		.4byte	.LASF21
 1731 03bf 01       		.byte	0x1
 1732 03c0 2B03     		.2byte	0x32b
 1733 03c2 6B000000 		.4byte	0x6b
 1734 03c6 02       		.uleb128 0x2
 1735 03c7 91       		.byte	0x91
 1736 03c8 6F       		.sleb128 -17
 1737 03c9 0A       		.uleb128 0xa
 1738 03ca 706F7300 		.ascii	"pos\000"
 1739 03ce 01       		.byte	0x1
 1740 03cf 2E03     		.2byte	0x32e
 1741 03d1 6B000000 		.4byte	0x6b
 1742 03d5 02       		.uleb128 0x2
 1743 03d6 91       		.byte	0x91
 1744 03d7 75       		.sleb128 -11
 1745 03d8 0B       		.uleb128 0xb
 1746 03d9 A4030000 		.4byte	.LASF23
 1747 03dd 01       		.byte	0x1
 1748 03de 2F03     		.2byte	0x32f
 1749 03e0 6B000000 		.4byte	0x6b
 1750 03e4 02       		.uleb128 0x2
 1751 03e5 91       		.byte	0x91
 1752 03e6 74       		.sleb128 -12
 1753 03e7 0B       		.uleb128 0xb
 1754 03e8 81010000 		.4byte	.LASF37
 1755 03ec 01       		.byte	0x1
 1756 03ed 3003     		.2byte	0x330
 1757 03ef 6B000000 		.4byte	0x6b
 1758 03f3 02       		.uleb128 0x2
 1759 03f4 91       		.byte	0x91
 1760 03f5 77       		.sleb128 -9
 1761 03f6 0B       		.uleb128 0xb
 1762 03f7 8A010000 		.4byte	.LASF38
 1763 03fb 01       		.byte	0x1
 1764 03fc 3103     		.2byte	0x331
 1765 03fe 6B000000 		.4byte	0x6b
 1766 0402 02       		.uleb128 0x2
 1767 0403 91       		.byte	0x91
 1768 0404 76       		.sleb128 -10
 1769 0405 00       		.byte	0
 1770 0406 0D       		.uleb128 0xd
 1771 0407 FE010000 		.4byte	.LASF43
 1772 040b 01       		.byte	0x1
 1773 040c A407     		.2byte	0x7a4
 1774 040e 77000000 		.4byte	0x77
 1775 0412 00000000 		.4byte	.LFB11
 1776 0416 36000000 		.4byte	.LFE11-.LFB11
 1777 041a 01       		.uleb128 0x1
 1778 041b 9C       		.byte	0x9c
 1779 041c 4C040000 		.4byte	0x44c
 1780 0420 10       		.uleb128 0x10
 1781 0421 783100   		.ascii	"x1\000"
 1782 0424 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 67


 1783 0425 A407     		.2byte	0x7a4
 1784 0427 77000000 		.4byte	0x77
 1785 042b 02       		.uleb128 0x2
 1786 042c 91       		.byte	0x91
 1787 042d 6E       		.sleb128 -18
 1788 042e 10       		.uleb128 0x10
 1789 042f 783200   		.ascii	"x2\000"
 1790 0432 01       		.byte	0x1
 1791 0433 A407     		.2byte	0x7a4
 1792 0435 77000000 		.4byte	0x77
 1793 0439 02       		.uleb128 0x2
 1794 043a 91       		.byte	0x91
 1795 043b 6C       		.sleb128 -20
 1796 043c 0A       		.uleb128 0xa
 1797 043d 746D7000 		.ascii	"tmp\000"
 1798 0441 01       		.byte	0x1
 1799 0442 A707     		.2byte	0x7a7
 1800 0444 83000000 		.4byte	0x83
 1801 0448 02       		.uleb128 0x2
 1802 0449 91       		.byte	0x91
 1803 044a 74       		.sleb128 -12
 1804 044b 00       		.byte	0
 1805 044c 11       		.uleb128 0x11
 1806 044d 77000000 		.4byte	0x77
 1807 0451 5C040000 		.4byte	0x45c
 1808 0455 12       		.uleb128 0x12
 1809 0456 AB000000 		.4byte	0xab
 1810 045a 0B       		.byte	0xb
 1811 045b 00       		.byte	0
 1812 045c 13       		.uleb128 0x13
 1813 045d FF040000 		.4byte	.LASF44
 1814 0461 03       		.byte	0x3
 1815 0462 C402     		.2byte	0x2c4
 1816 0464 4C040000 		.4byte	0x44c
 1817 0468 14       		.uleb128 0x14
 1818 0469 DC030000 		.4byte	.LASF45
 1819 046d 01       		.byte	0x1
 1820 046e 21       		.byte	0x21
 1821 046f 4C040000 		.4byte	0x44c
 1822 0473 05       		.uleb128 0x5
 1823 0474 03       		.byte	0x3
 1824 0475 00000000 		.4byte	CapSense_rawFilterData1
 1825 0479 11       		.uleb128 0x11
 1826 047a 6B000000 		.4byte	0x6b
 1827 047e 89040000 		.4byte	0x489
 1828 0482 12       		.uleb128 0x12
 1829 0483 AB000000 		.4byte	0xab
 1830 0487 01       		.byte	0x1
 1831 0488 00       		.byte	0
 1832 0489 13       		.uleb128 0x13
 1833 048a 7C020000 		.4byte	.LASF46
 1834 048e 04       		.byte	0x4
 1835 048f 0E01     		.2byte	0x10e
 1836 0491 79040000 		.4byte	0x479
 1837 0495 11       		.uleb128 0x11
 1838 0496 A5040000 		.4byte	0x4a5
 1839 049a A5040000 		.4byte	0x4a5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 68


 1840 049e 12       		.uleb128 0x12
 1841 049f AB000000 		.4byte	0xab
 1842 04a3 0B       		.byte	0xb
 1843 04a4 00       		.byte	0
 1844 04a5 15       		.uleb128 0x15
 1845 04a6 6B000000 		.4byte	0x6b
 1846 04aa 13       		.uleb128 0x13
 1847 04ab D6010000 		.4byte	.LASF47
 1848 04af 04       		.byte	0x4
 1849 04b0 0F01     		.2byte	0x10f
 1850 04b2 B6040000 		.4byte	0x4b6
 1851 04b6 15       		.uleb128 0x15
 1852 04b7 95040000 		.4byte	0x495
 1853 04bb 14       		.uleb128 0x14
 1854 04bc AD040000 		.4byte	.LASF48
 1855 04c0 01       		.byte	0x1
 1856 04c1 29       		.byte	0x29
 1857 04c2 4C040000 		.4byte	0x44c
 1858 04c6 05       		.uleb128 0x5
 1859 04c7 03       		.byte	0x3
 1860 04c8 00000000 		.4byte	CapSense_sensorBaseline
 1861 04cc 11       		.uleb128 0x11
 1862 04cd 6B000000 		.4byte	0x6b
 1863 04d1 DC040000 		.4byte	0x4dc
 1864 04d5 12       		.uleb128 0x12
 1865 04d6 AB000000 		.4byte	0xab
 1866 04da 0B       		.byte	0xb
 1867 04db 00       		.byte	0
 1868 04dc 14       		.uleb128 0x14
 1869 04dd 31020000 		.4byte	.LASF49
 1870 04e1 01       		.byte	0x1
 1871 04e2 2A       		.byte	0x2a
 1872 04e3 CC040000 		.4byte	0x4cc
 1873 04e7 05       		.uleb128 0x5
 1874 04e8 03       		.byte	0x3
 1875 04e9 00000000 		.4byte	CapSense_sensorBaselineLow
 1876 04ed 14       		.uleb128 0x14
 1877 04ee F6000000 		.4byte	.LASF50
 1878 04f2 01       		.byte	0x1
 1879 04f3 2B       		.byte	0x2b
 1880 04f4 4C040000 		.4byte	0x44c
 1881 04f8 05       		.uleb128 0x5
 1882 04f9 03       		.byte	0x3
 1883 04fa 00000000 		.4byte	CapSense_sensorSignal
 1884 04fe 14       		.uleb128 0x14
 1885 04ff 2B000000 		.4byte	.LASF51
 1886 0503 01       		.byte	0x1
 1887 0504 2C       		.byte	0x2c
 1888 0505 79040000 		.4byte	0x479
 1889 0509 05       		.uleb128 0x5
 1890 050a 03       		.byte	0x3
 1891 050b 00000000 		.4byte	CapSense_sensorOnMask
 1892 050f 14       		.uleb128 0x14
 1893 0510 7E040000 		.4byte	.LASF52
 1894 0514 01       		.byte	0x1
 1895 0515 2E       		.byte	0x2e
 1896 0516 CC040000 		.4byte	0x4cc
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 69


 1897 051a 05       		.uleb128 0x5
 1898 051b 03       		.byte	0x3
 1899 051c 00000000 		.4byte	CapSense_lowBaselineResetCnt
 1900 0520 14       		.uleb128 0x14
 1901 0521 C3030000 		.4byte	.LASF53
 1902 0525 01       		.byte	0x1
 1903 0526 30       		.byte	0x30
 1904 0527 4C040000 		.4byte	0x44c
 1905 052b 05       		.uleb128 0x5
 1906 052c 03       		.byte	0x3
 1907 052d 00000000 		.4byte	CapSense_fingerThreshold
 1908 0531 14       		.uleb128 0x14
 1909 0532 AB030000 		.4byte	.LASF54
 1910 0536 01       		.byte	0x1
 1911 0537 34       		.byte	0x34
 1912 0538 4C040000 		.4byte	0x44c
 1913 053c 05       		.uleb128 0x5
 1914 053d 03       		.byte	0x3
 1915 053e 00000000 		.4byte	CapSense_noiseThreshold
 1916 0542 14       		.uleb128 0x14
 1917 0543 17000000 		.4byte	.LASF55
 1918 0547 01       		.byte	0x1
 1919 0548 38       		.byte	0x38
 1920 0549 4C040000 		.4byte	0x44c
 1921 054d 05       		.uleb128 0x5
 1922 054e 03       		.byte	0x3
 1923 054f 00000000 		.4byte	CapSense_hysteresis
 1924 0553 14       		.uleb128 0x14
 1925 0554 9B040000 		.4byte	.LASF56
 1926 0558 01       		.byte	0x1
 1927 0559 3C       		.byte	0x3c
 1928 055a CC040000 		.4byte	0x4cc
 1929 055e 05       		.uleb128 0x5
 1930 055f 03       		.byte	0x3
 1931 0560 00000000 		.4byte	CapSense_debounce
 1932 0564 11       		.uleb128 0x11
 1933 0565 6B000000 		.4byte	0x6b
 1934 0569 74050000 		.4byte	0x574
 1935 056d 12       		.uleb128 0x12
 1936 056e AB000000 		.4byte	0xab
 1937 0572 0C       		.byte	0xc
 1938 0573 00       		.byte	0
 1939 0574 14       		.uleb128 0x14
 1940 0575 12050000 		.4byte	.LASF57
 1941 0579 01       		.byte	0x1
 1942 057a 40       		.byte	0x40
 1943 057b 64050000 		.4byte	0x564
 1944 057f 05       		.uleb128 0x5
 1945 0580 03       		.byte	0x3
 1946 0581 00000000 		.4byte	CapSense_debounceCounter
 1947 0585 14       		.uleb128 0x14
 1948 0586 4C020000 		.4byte	.LASF58
 1949 058a 01       		.byte	0x1
 1950 058b 44       		.byte	0x44
 1951 058c 96050000 		.4byte	0x596
 1952 0590 05       		.uleb128 0x5
 1953 0591 03       		.byte	0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 70


 1954 0592 00000000 		.4byte	CapSense_rawDataIndex
 1955 0596 15       		.uleb128 0x15
 1956 0597 95040000 		.4byte	0x495
 1957 059b 14       		.uleb128 0x14
 1958 059c 33050000 		.4byte	.LASF59
 1959 05a0 01       		.byte	0x1
 1960 05a1 54       		.byte	0x54
 1961 05a2 AC050000 		.4byte	0x5ac
 1962 05a6 05       		.uleb128 0x5
 1963 05a7 03       		.byte	0x3
 1964 05a8 00000000 		.4byte	CapSense_numberOfSensors
 1965 05ac 15       		.uleb128 0x15
 1966 05ad 95040000 		.4byte	0x495
 1967 05b1 00       		.byte	0
 1968              		.section	.debug_abbrev,"",%progbits
 1969              	.Ldebug_abbrev0:
 1970 0000 01       		.uleb128 0x1
 1971 0001 11       		.uleb128 0x11
 1972 0002 01       		.byte	0x1
 1973 0003 25       		.uleb128 0x25
 1974 0004 0E       		.uleb128 0xe
 1975 0005 13       		.uleb128 0x13
 1976 0006 0B       		.uleb128 0xb
 1977 0007 03       		.uleb128 0x3
 1978 0008 0E       		.uleb128 0xe
 1979 0009 1B       		.uleb128 0x1b
 1980 000a 0E       		.uleb128 0xe
 1981 000b 55       		.uleb128 0x55
 1982 000c 17       		.uleb128 0x17
 1983 000d 11       		.uleb128 0x11
 1984 000e 01       		.uleb128 0x1
 1985 000f 10       		.uleb128 0x10
 1986 0010 17       		.uleb128 0x17
 1987 0011 00       		.byte	0
 1988 0012 00       		.byte	0
 1989 0013 02       		.uleb128 0x2
 1990 0014 24       		.uleb128 0x24
 1991 0015 00       		.byte	0
 1992 0016 0B       		.uleb128 0xb
 1993 0017 0B       		.uleb128 0xb
 1994 0018 3E       		.uleb128 0x3e
 1995 0019 0B       		.uleb128 0xb
 1996 001a 03       		.uleb128 0x3
 1997 001b 0E       		.uleb128 0xe
 1998 001c 00       		.byte	0
 1999 001d 00       		.byte	0
 2000 001e 03       		.uleb128 0x3
 2001 001f 24       		.uleb128 0x24
 2002 0020 00       		.byte	0
 2003 0021 0B       		.uleb128 0xb
 2004 0022 0B       		.uleb128 0xb
 2005 0023 3E       		.uleb128 0x3e
 2006 0024 0B       		.uleb128 0xb
 2007 0025 03       		.uleb128 0x3
 2008 0026 08       		.uleb128 0x8
 2009 0027 00       		.byte	0
 2010 0028 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 71


 2011 0029 04       		.uleb128 0x4
 2012 002a 16       		.uleb128 0x16
 2013 002b 00       		.byte	0
 2014 002c 03       		.uleb128 0x3
 2015 002d 0E       		.uleb128 0xe
 2016 002e 3A       		.uleb128 0x3a
 2017 002f 0B       		.uleb128 0xb
 2018 0030 3B       		.uleb128 0x3b
 2019 0031 05       		.uleb128 0x5
 2020 0032 49       		.uleb128 0x49
 2021 0033 13       		.uleb128 0x13
 2022 0034 00       		.byte	0
 2023 0035 00       		.byte	0
 2024 0036 05       		.uleb128 0x5
 2025 0037 2E       		.uleb128 0x2e
 2026 0038 01       		.byte	0x1
 2027 0039 3F       		.uleb128 0x3f
 2028 003a 19       		.uleb128 0x19
 2029 003b 03       		.uleb128 0x3
 2030 003c 0E       		.uleb128 0xe
 2031 003d 3A       		.uleb128 0x3a
 2032 003e 0B       		.uleb128 0xb
 2033 003f 3B       		.uleb128 0x3b
 2034 0040 0B       		.uleb128 0xb
 2035 0041 27       		.uleb128 0x27
 2036 0042 19       		.uleb128 0x19
 2037 0043 11       		.uleb128 0x11
 2038 0044 01       		.uleb128 0x1
 2039 0045 12       		.uleb128 0x12
 2040 0046 06       		.uleb128 0x6
 2041 0047 40       		.uleb128 0x40
 2042 0048 18       		.uleb128 0x18
 2043 0049 9742     		.uleb128 0x2117
 2044 004b 19       		.uleb128 0x19
 2045 004c 01       		.uleb128 0x1
 2046 004d 13       		.uleb128 0x13
 2047 004e 00       		.byte	0
 2048 004f 00       		.byte	0
 2049 0050 06       		.uleb128 0x6
 2050 0051 05       		.uleb128 0x5
 2051 0052 00       		.byte	0
 2052 0053 03       		.uleb128 0x3
 2053 0054 0E       		.uleb128 0xe
 2054 0055 3A       		.uleb128 0x3a
 2055 0056 0B       		.uleb128 0xb
 2056 0057 3B       		.uleb128 0x3b
 2057 0058 0B       		.uleb128 0xb
 2058 0059 49       		.uleb128 0x49
 2059 005a 13       		.uleb128 0x13
 2060 005b 02       		.uleb128 0x2
 2061 005c 18       		.uleb128 0x18
 2062 005d 00       		.byte	0
 2063 005e 00       		.byte	0
 2064 005f 07       		.uleb128 0x7
 2065 0060 34       		.uleb128 0x34
 2066 0061 00       		.byte	0
 2067 0062 03       		.uleb128 0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 72


 2068 0063 0E       		.uleb128 0xe
 2069 0064 3A       		.uleb128 0x3a
 2070 0065 0B       		.uleb128 0xb
 2071 0066 3B       		.uleb128 0x3b
 2072 0067 0B       		.uleb128 0xb
 2073 0068 49       		.uleb128 0x49
 2074 0069 13       		.uleb128 0x13
 2075 006a 02       		.uleb128 0x2
 2076 006b 18       		.uleb128 0x18
 2077 006c 00       		.byte	0
 2078 006d 00       		.byte	0
 2079 006e 08       		.uleb128 0x8
 2080 006f 2E       		.uleb128 0x2e
 2081 0070 01       		.byte	0x1
 2082 0071 3F       		.uleb128 0x3f
 2083 0072 19       		.uleb128 0x19
 2084 0073 03       		.uleb128 0x3
 2085 0074 0E       		.uleb128 0xe
 2086 0075 3A       		.uleb128 0x3a
 2087 0076 0B       		.uleb128 0xb
 2088 0077 3B       		.uleb128 0x3b
 2089 0078 0B       		.uleb128 0xb
 2090 0079 27       		.uleb128 0x27
 2091 007a 19       		.uleb128 0x19
 2092 007b 11       		.uleb128 0x11
 2093 007c 01       		.uleb128 0x1
 2094 007d 12       		.uleb128 0x12
 2095 007e 06       		.uleb128 0x6
 2096 007f 40       		.uleb128 0x40
 2097 0080 18       		.uleb128 0x18
 2098 0081 9642     		.uleb128 0x2116
 2099 0083 19       		.uleb128 0x19
 2100 0084 01       		.uleb128 0x1
 2101 0085 13       		.uleb128 0x13
 2102 0086 00       		.byte	0
 2103 0087 00       		.byte	0
 2104 0088 09       		.uleb128 0x9
 2105 0089 2E       		.uleb128 0x2e
 2106 008a 01       		.byte	0x1
 2107 008b 3F       		.uleb128 0x3f
 2108 008c 19       		.uleb128 0x19
 2109 008d 03       		.uleb128 0x3
 2110 008e 0E       		.uleb128 0xe
 2111 008f 3A       		.uleb128 0x3a
 2112 0090 0B       		.uleb128 0xb
 2113 0091 3B       		.uleb128 0x3b
 2114 0092 05       		.uleb128 0x5
 2115 0093 27       		.uleb128 0x27
 2116 0094 19       		.uleb128 0x19
 2117 0095 11       		.uleb128 0x11
 2118 0096 01       		.uleb128 0x1
 2119 0097 12       		.uleb128 0x12
 2120 0098 06       		.uleb128 0x6
 2121 0099 40       		.uleb128 0x40
 2122 009a 18       		.uleb128 0x18
 2123 009b 9642     		.uleb128 0x2116
 2124 009d 19       		.uleb128 0x19
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 73


 2125 009e 01       		.uleb128 0x1
 2126 009f 13       		.uleb128 0x13
 2127 00a0 00       		.byte	0
 2128 00a1 00       		.byte	0
 2129 00a2 0A       		.uleb128 0xa
 2130 00a3 34       		.uleb128 0x34
 2131 00a4 00       		.byte	0
 2132 00a5 03       		.uleb128 0x3
 2133 00a6 08       		.uleb128 0x8
 2134 00a7 3A       		.uleb128 0x3a
 2135 00a8 0B       		.uleb128 0xb
 2136 00a9 3B       		.uleb128 0x3b
 2137 00aa 05       		.uleb128 0x5
 2138 00ab 49       		.uleb128 0x49
 2139 00ac 13       		.uleb128 0x13
 2140 00ad 02       		.uleb128 0x2
 2141 00ae 18       		.uleb128 0x18
 2142 00af 00       		.byte	0
 2143 00b0 00       		.byte	0
 2144 00b1 0B       		.uleb128 0xb
 2145 00b2 34       		.uleb128 0x34
 2146 00b3 00       		.byte	0
 2147 00b4 03       		.uleb128 0x3
 2148 00b5 0E       		.uleb128 0xe
 2149 00b6 3A       		.uleb128 0x3a
 2150 00b7 0B       		.uleb128 0xb
 2151 00b8 3B       		.uleb128 0x3b
 2152 00b9 05       		.uleb128 0x5
 2153 00ba 49       		.uleb128 0x49
 2154 00bb 13       		.uleb128 0x13
 2155 00bc 02       		.uleb128 0x2
 2156 00bd 18       		.uleb128 0x18
 2157 00be 00       		.byte	0
 2158 00bf 00       		.byte	0
 2159 00c0 0C       		.uleb128 0xc
 2160 00c1 05       		.uleb128 0x5
 2161 00c2 00       		.byte	0
 2162 00c3 03       		.uleb128 0x3
 2163 00c4 0E       		.uleb128 0xe
 2164 00c5 3A       		.uleb128 0x3a
 2165 00c6 0B       		.uleb128 0xb
 2166 00c7 3B       		.uleb128 0x3b
 2167 00c8 05       		.uleb128 0x5
 2168 00c9 49       		.uleb128 0x49
 2169 00ca 13       		.uleb128 0x13
 2170 00cb 02       		.uleb128 0x2
 2171 00cc 18       		.uleb128 0x18
 2172 00cd 00       		.byte	0
 2173 00ce 00       		.byte	0
 2174 00cf 0D       		.uleb128 0xd
 2175 00d0 2E       		.uleb128 0x2e
 2176 00d1 01       		.byte	0x1
 2177 00d2 3F       		.uleb128 0x3f
 2178 00d3 19       		.uleb128 0x19
 2179 00d4 03       		.uleb128 0x3
 2180 00d5 0E       		.uleb128 0xe
 2181 00d6 3A       		.uleb128 0x3a
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 74


 2182 00d7 0B       		.uleb128 0xb
 2183 00d8 3B       		.uleb128 0x3b
 2184 00d9 05       		.uleb128 0x5
 2185 00da 27       		.uleb128 0x27
 2186 00db 19       		.uleb128 0x19
 2187 00dc 49       		.uleb128 0x49
 2188 00dd 13       		.uleb128 0x13
 2189 00de 11       		.uleb128 0x11
 2190 00df 01       		.uleb128 0x1
 2191 00e0 12       		.uleb128 0x12
 2192 00e1 06       		.uleb128 0x6
 2193 00e2 40       		.uleb128 0x40
 2194 00e3 18       		.uleb128 0x18
 2195 00e4 9742     		.uleb128 0x2117
 2196 00e6 19       		.uleb128 0x19
 2197 00e7 01       		.uleb128 0x1
 2198 00e8 13       		.uleb128 0x13
 2199 00e9 00       		.byte	0
 2200 00ea 00       		.byte	0
 2201 00eb 0E       		.uleb128 0xe
 2202 00ec 2E       		.uleb128 0x2e
 2203 00ed 01       		.byte	0x1
 2204 00ee 3F       		.uleb128 0x3f
 2205 00ef 19       		.uleb128 0x19
 2206 00f0 03       		.uleb128 0x3
 2207 00f1 0E       		.uleb128 0xe
 2208 00f2 3A       		.uleb128 0x3a
 2209 00f3 0B       		.uleb128 0xb
 2210 00f4 3B       		.uleb128 0x3b
 2211 00f5 05       		.uleb128 0x5
 2212 00f6 27       		.uleb128 0x27
 2213 00f7 19       		.uleb128 0x19
 2214 00f8 49       		.uleb128 0x49
 2215 00f9 13       		.uleb128 0x13
 2216 00fa 11       		.uleb128 0x11
 2217 00fb 01       		.uleb128 0x1
 2218 00fc 12       		.uleb128 0x12
 2219 00fd 06       		.uleb128 0x6
 2220 00fe 40       		.uleb128 0x40
 2221 00ff 18       		.uleb128 0x18
 2222 0100 9642     		.uleb128 0x2116
 2223 0102 19       		.uleb128 0x19
 2224 0103 01       		.uleb128 0x1
 2225 0104 13       		.uleb128 0x13
 2226 0105 00       		.byte	0
 2227 0106 00       		.byte	0
 2228 0107 0F       		.uleb128 0xf
 2229 0108 2E       		.uleb128 0x2e
 2230 0109 01       		.byte	0x1
 2231 010a 3F       		.uleb128 0x3f
 2232 010b 19       		.uleb128 0x19
 2233 010c 03       		.uleb128 0x3
 2234 010d 0E       		.uleb128 0xe
 2235 010e 3A       		.uleb128 0x3a
 2236 010f 0B       		.uleb128 0xb
 2237 0110 3B       		.uleb128 0x3b
 2238 0111 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 75


 2239 0112 27       		.uleb128 0x27
 2240 0113 19       		.uleb128 0x19
 2241 0114 11       		.uleb128 0x11
 2242 0115 01       		.uleb128 0x1
 2243 0116 12       		.uleb128 0x12
 2244 0117 06       		.uleb128 0x6
 2245 0118 40       		.uleb128 0x40
 2246 0119 18       		.uleb128 0x18
 2247 011a 9742     		.uleb128 0x2117
 2248 011c 19       		.uleb128 0x19
 2249 011d 01       		.uleb128 0x1
 2250 011e 13       		.uleb128 0x13
 2251 011f 00       		.byte	0
 2252 0120 00       		.byte	0
 2253 0121 10       		.uleb128 0x10
 2254 0122 05       		.uleb128 0x5
 2255 0123 00       		.byte	0
 2256 0124 03       		.uleb128 0x3
 2257 0125 08       		.uleb128 0x8
 2258 0126 3A       		.uleb128 0x3a
 2259 0127 0B       		.uleb128 0xb
 2260 0128 3B       		.uleb128 0x3b
 2261 0129 05       		.uleb128 0x5
 2262 012a 49       		.uleb128 0x49
 2263 012b 13       		.uleb128 0x13
 2264 012c 02       		.uleb128 0x2
 2265 012d 18       		.uleb128 0x18
 2266 012e 00       		.byte	0
 2267 012f 00       		.byte	0
 2268 0130 11       		.uleb128 0x11
 2269 0131 01       		.uleb128 0x1
 2270 0132 01       		.byte	0x1
 2271 0133 49       		.uleb128 0x49
 2272 0134 13       		.uleb128 0x13
 2273 0135 01       		.uleb128 0x1
 2274 0136 13       		.uleb128 0x13
 2275 0137 00       		.byte	0
 2276 0138 00       		.byte	0
 2277 0139 12       		.uleb128 0x12
 2278 013a 21       		.uleb128 0x21
 2279 013b 00       		.byte	0
 2280 013c 49       		.uleb128 0x49
 2281 013d 13       		.uleb128 0x13
 2282 013e 2F       		.uleb128 0x2f
 2283 013f 0B       		.uleb128 0xb
 2284 0140 00       		.byte	0
 2285 0141 00       		.byte	0
 2286 0142 13       		.uleb128 0x13
 2287 0143 34       		.uleb128 0x34
 2288 0144 00       		.byte	0
 2289 0145 03       		.uleb128 0x3
 2290 0146 0E       		.uleb128 0xe
 2291 0147 3A       		.uleb128 0x3a
 2292 0148 0B       		.uleb128 0xb
 2293 0149 3B       		.uleb128 0x3b
 2294 014a 05       		.uleb128 0x5
 2295 014b 49       		.uleb128 0x49
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 76


 2296 014c 13       		.uleb128 0x13
 2297 014d 3F       		.uleb128 0x3f
 2298 014e 19       		.uleb128 0x19
 2299 014f 3C       		.uleb128 0x3c
 2300 0150 19       		.uleb128 0x19
 2301 0151 00       		.byte	0
 2302 0152 00       		.byte	0
 2303 0153 14       		.uleb128 0x14
 2304 0154 34       		.uleb128 0x34
 2305 0155 00       		.byte	0
 2306 0156 03       		.uleb128 0x3
 2307 0157 0E       		.uleb128 0xe
 2308 0158 3A       		.uleb128 0x3a
 2309 0159 0B       		.uleb128 0xb
 2310 015a 3B       		.uleb128 0x3b
 2311 015b 0B       		.uleb128 0xb
 2312 015c 49       		.uleb128 0x49
 2313 015d 13       		.uleb128 0x13
 2314 015e 3F       		.uleb128 0x3f
 2315 015f 19       		.uleb128 0x19
 2316 0160 02       		.uleb128 0x2
 2317 0161 18       		.uleb128 0x18
 2318 0162 00       		.byte	0
 2319 0163 00       		.byte	0
 2320 0164 15       		.uleb128 0x15
 2321 0165 26       		.uleb128 0x26
 2322 0166 00       		.byte	0
 2323 0167 49       		.uleb128 0x49
 2324 0168 13       		.uleb128 0x13
 2325 0169 00       		.byte	0
 2326 016a 00       		.byte	0
 2327 016b 00       		.byte	0
 2328              		.section	.debug_aranges,"",%progbits
 2329 0000 74000000 		.4byte	0x74
 2330 0004 0200     		.2byte	0x2
 2331 0006 00000000 		.4byte	.Ldebug_info0
 2332 000a 04       		.byte	0x4
 2333 000b 00       		.byte	0
 2334 000c 0000     		.2byte	0
 2335 000e 0000     		.2byte	0
 2336 0010 00000000 		.4byte	.LFB0
 2337 0014 7C000000 		.4byte	.LFE0-.LFB0
 2338 0018 00000000 		.4byte	.LFB1
 2339 001c 2E000000 		.4byte	.LFE1-.LFB1
 2340 0020 00000000 		.4byte	.LFB2
 2341 0024 28000000 		.4byte	.LFE2-.LFB2
 2342 0028 00000000 		.4byte	.LFB3
 2343 002c 70000000 		.4byte	.LFE3-.LFB3
 2344 0030 00000000 		.4byte	.LFB4
 2345 0034 64010000 		.4byte	.LFE4-.LFB4
 2346 0038 00000000 		.4byte	.LFB5
 2347 003c 50000000 		.4byte	.LFE5-.LFB5
 2348 0040 00000000 		.4byte	.LFB6
 2349 0044 10010000 		.4byte	.LFE6-.LFB6
 2350 0048 00000000 		.4byte	.LFB7
 2351 004c 54000000 		.4byte	.LFE7-.LFB7
 2352 0050 00000000 		.4byte	.LFB8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 77


 2353 0054 38000000 		.4byte	.LFE8-.LFB8
 2354 0058 00000000 		.4byte	.LFB9
 2355 005c 68000000 		.4byte	.LFE9-.LFB9
 2356 0060 00000000 		.4byte	.LFB10
 2357 0064 6C000000 		.4byte	.LFE10-.LFB10
 2358 0068 00000000 		.4byte	.LFB11
 2359 006c 36000000 		.4byte	.LFE11-.LFB11
 2360 0070 00000000 		.4byte	0
 2361 0074 00000000 		.4byte	0
 2362              		.section	.debug_ranges,"",%progbits
 2363              	.Ldebug_ranges0:
 2364 0000 00000000 		.4byte	.LFB0
 2365 0004 7C000000 		.4byte	.LFE0
 2366 0008 00000000 		.4byte	.LFB1
 2367 000c 2E000000 		.4byte	.LFE1
 2368 0010 00000000 		.4byte	.LFB2
 2369 0014 28000000 		.4byte	.LFE2
 2370 0018 00000000 		.4byte	.LFB3
 2371 001c 70000000 		.4byte	.LFE3
 2372 0020 00000000 		.4byte	.LFB4
 2373 0024 64010000 		.4byte	.LFE4
 2374 0028 00000000 		.4byte	.LFB5
 2375 002c 50000000 		.4byte	.LFE5
 2376 0030 00000000 		.4byte	.LFB6
 2377 0034 10010000 		.4byte	.LFE6
 2378 0038 00000000 		.4byte	.LFB7
 2379 003c 54000000 		.4byte	.LFE7
 2380 0040 00000000 		.4byte	.LFB8
 2381 0044 38000000 		.4byte	.LFE8
 2382 0048 00000000 		.4byte	.LFB9
 2383 004c 68000000 		.4byte	.LFE9
 2384 0050 00000000 		.4byte	.LFB10
 2385 0054 6C000000 		.4byte	.LFE10
 2386 0058 00000000 		.4byte	.LFB11
 2387 005c 36000000 		.4byte	.LFE11
 2388 0060 00000000 		.4byte	0
 2389 0064 00000000 		.4byte	0
 2390              		.section	.debug_line,"",%progbits
 2391              	.Ldebug_line0:
 2392 0000 51020000 		.section	.debug_str,"MS",%progbits,1
 2392      02006B00 
 2392      00000201 
 2392      FB0E0D00 
 2392      01010101 
 2393              	.LASF10:
 2394 0000 75696E74 		.ascii	"uint16\000"
 2394      313600
 2395              	.LASF27:
 2396 0007 66696C74 		.ascii	"filteredRawData\000"
 2396      65726564 
 2396      52617744 
 2396      61746100 
 2397              	.LASF55:
 2398 0017 43617053 		.ascii	"CapSense_hysteresis\000"
 2398      656E7365 
 2398      5F687973 
 2398      74657265 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 78


 2398      73697300 
 2399              	.LASF51:
 2400 002b 43617053 		.ascii	"CapSense_sensorOnMask\000"
 2400      656E7365 
 2400      5F73656E 
 2400      736F724F 
 2400      6E4D6173 
 2401              	.LASF32:
 2402 0041 66696E67 		.ascii	"fingerThreshold\000"
 2402      65725468 
 2402      72657368 
 2402      6F6C6400 
 2403              	.LASF60:
 2404 0051 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2404      43313120 
 2404      352E342E 
 2404      31203230 
 2404      31363036 
 2405 0084 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2405      20726576 
 2405      6973696F 
 2405      6E203233 
 2405      37373135 
 2406 00b7 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2406      66756E63 
 2406      74696F6E 
 2406      2D736563 
 2406      74696F6E 
 2407              	.LASF7:
 2408 00df 6C6F6E67 		.ascii	"long long unsigned int\000"
 2408      206C6F6E 
 2408      6720756E 
 2408      7369676E 
 2408      65642069 
 2409              	.LASF50:
 2410 00f6 43617053 		.ascii	"CapSense_sensorSignal\000"
 2410      656E7365 
 2410      5F73656E 
 2410      736F7253 
 2410      69676E61 
 2411              	.LASF22:
 2412 010c 43617053 		.ascii	"CapSense_InitializeEnabledBaselines\000"
 2412      656E7365 
 2412      5F496E69 
 2412      7469616C 
 2412      697A6545 
 2413              	.LASF29:
 2414 0130 43617053 		.ascii	"CapSense_UpdateEnabledBaselines\000"
 2414      656E7365 
 2414      5F557064 
 2414      61746545 
 2414      6E61626C 
 2415              	.LASF6:
 2416 0150 6C6F6E67 		.ascii	"long long int\000"
 2416      206C6F6E 
 2416      6720696E 
 2416      7400
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 79


 2417              	.LASF0:
 2418 015e 7369676E 		.ascii	"signed char\000"
 2418      65642063 
 2418      68617200 
 2419              	.LASF42:
 2420 016a 43617053 		.ascii	"CapSense_DisableWidget\000"
 2420      656E7365 
 2420      5F446973 
 2420      61626C65 
 2420      57696467 
 2421              	.LASF37:
 2422 0181 72617749 		.ascii	"rawIndex\000"
 2422      6E646578 
 2422      00
 2423              	.LASF38:
 2424 018a 6E756D62 		.ascii	"numberOfSensors\000"
 2424      65724F66 
 2424      53656E73 
 2424      6F727300 
 2425              	.LASF39:
 2426 019a 73746174 		.ascii	"state\000"
 2426      6500
 2427              	.LASF4:
 2428 01a0 6C6F6E67 		.ascii	"long int\000"
 2428      20696E74 
 2428      00
 2429              	.LASF40:
 2430 01a9 43617053 		.ascii	"CapSense_CheckIsAnyWidgetActive\000"
 2430      656E7365 
 2430      5F436865 
 2430      636B4973 
 2430      416E7957 
 2431              	.LASF9:
 2432 01c9 75696E74 		.ascii	"uint8\000"
 2432      3800
 2433              	.LASF13:
 2434 01cf 646F7562 		.ascii	"double\000"
 2434      6C6500
 2435              	.LASF47:
 2436 01d6 43617053 		.ascii	"CapSense_widgetNumber\000"
 2436      656E7365 
 2436      5F776964 
 2436      6765744E 
 2436      756D6265 
 2437              	.LASF11:
 2438 01ec 75696E74 		.ascii	"uint32\000"
 2438      333200
 2439              	.LASF33:
 2440 01f3 68797374 		.ascii	"hysteresis\000"
 2440      65726573 
 2440      697300
 2441              	.LASF43:
 2442 01fe 43617053 		.ascii	"CapSense_IIR4Filter\000"
 2442      656E7365 
 2442      5F494952 
 2442      3446696C 
 2442      74657200 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 80


 2443              	.LASF8:
 2444 0212 756E7369 		.ascii	"unsigned int\000"
 2444      676E6564 
 2444      20696E74 
 2444      00
 2445              	.LASF5:
 2446 021f 6C6F6E67 		.ascii	"long unsigned int\000"
 2446      20756E73 
 2446      69676E65 
 2446      6420696E 
 2446      7400
 2447              	.LASF49:
 2448 0231 43617053 		.ascii	"CapSense_sensorBaselineLow\000"
 2448      656E7365 
 2448      5F73656E 
 2448      736F7242 
 2448      6173656C 
 2449              	.LASF58:
 2450 024c 43617053 		.ascii	"CapSense_rawDataIndex\000"
 2450      656E7365 
 2450      5F726177 
 2450      44617461 
 2450      496E6465 
 2451              	.LASF3:
 2452 0262 73686F72 		.ascii	"short unsigned int\000"
 2452      7420756E 
 2452      7369676E 
 2452      65642069 
 2452      6E7400
 2453              	.LASF19:
 2454 0275 73656E73 		.ascii	"sensor\000"
 2454      6F7200
 2455              	.LASF46:
 2456 027c 43617053 		.ascii	"CapSense_sensorEnableMask\000"
 2456      656E7365 
 2456      5F73656E 
 2456      736F7245 
 2456      6E61626C 
 2457              	.LASF62:
 2458 0296 433A5C55 		.ascii	"C:\\Users\\JeffSnyder\\dev\\Electrosteel_embedded\\"
 2458      73657273 
 2458      5C4A6566 
 2458      66536E79 
 2458      6465725C 
 2459 02c4 50534F43 		.ascii	"PSOC5_electrosteel_stringsensors_newpcb\\CE210514_P"
 2459      355F656C 
 2459      65637472 
 2459      6F737465 
 2459      656C5F73 
 2460 02f6 534F4333 		.ascii	"SOC3_5_Thermistor.cydsn\000"
 2460      5F355F54 
 2460      6865726D 
 2460      6973746F 
 2460      722E6379 
 2461              	.LASF24:
 2462 030e 43617053 		.ascii	"CapSense_UpdateSensorBaseline\000"
 2462      656E7365 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 81


 2462      5F557064 
 2462      61746553 
 2462      656E736F 
 2463              	.LASF25:
 2464 032c 63616C63 		.ascii	"calc\000"
 2464      00
 2465              	.LASF34:
 2466 0331 6465626F 		.ascii	"debounce\000"
 2466      756E6365 
 2466      00
 2467              	.LASF16:
 2468 033a 73697A65 		.ascii	"sizetype\000"
 2468      74797065 
 2468      00
 2469              	.LASF41:
 2470 0343 43617053 		.ascii	"CapSense_EnableWidget\000"
 2470      656E7365 
 2470      5F456E61 
 2470      626C6557 
 2470      69646765 
 2471              	.LASF15:
 2472 0359 6C6F6E67 		.ascii	"long double\000"
 2472      20646F75 
 2472      626C6500 
 2473              	.LASF18:
 2474 0365 43617053 		.ascii	"CapSense_InitializeSensorBaseline\000"
 2474      656E7365 
 2474      5F496E69 
 2474      7469616C 
 2474      697A6553 
 2475              	.LASF35:
 2476 0387 43617053 		.ascii	"CapSense_CheckIsSensorActive\000"
 2476      656E7365 
 2476      5F436865 
 2476      636B4973 
 2476      53656E73 
 2477              	.LASF23:
 2478 03a4 656E4D61 		.ascii	"enMask\000"
 2478      736B00
 2479              	.LASF54:
 2480 03ab 43617053 		.ascii	"CapSense_noiseThreshold\000"
 2480      656E7365 
 2480      5F6E6F69 
 2480      73655468 
 2480      72657368 
 2481              	.LASF53:
 2482 03c3 43617053 		.ascii	"CapSense_fingerThreshold\000"
 2482      656E7365 
 2482      5F66696E 
 2482      67657254 
 2482      68726573 
 2483              	.LASF45:
 2484 03dc 43617053 		.ascii	"CapSense_rawFilterData1\000"
 2484      656E7365 
 2484      5F726177 
 2484      46696C74 
 2484      65724461 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 82


 2485              	.LASF12:
 2486 03f4 666C6F61 		.ascii	"float\000"
 2486      7400
 2487              	.LASF36:
 2488 03fa 43617053 		.ascii	"CapSense_CheckIsWidgetActive\000"
 2488      656E7365 
 2488      5F436865 
 2488      636B4973 
 2488      57696467 
 2489              	.LASF1:
 2490 0417 756E7369 		.ascii	"unsigned char\000"
 2490      676E6564 
 2490      20636861 
 2490      7200
 2491              	.LASF20:
 2492 0425 43617053 		.ascii	"CapSense_InitializeAllBaselines\000"
 2492      656E7365 
 2492      5F496E69 
 2492      7469616C 
 2492      697A6541 
 2493              	.LASF28:
 2494 0445 6E6F6973 		.ascii	"noiseThreshold\000"
 2494      65546872 
 2494      6573686F 
 2494      6C6400
 2495              	.LASF2:
 2496 0454 73686F72 		.ascii	"short int\000"
 2496      7420696E 
 2496      7400
 2497              	.LASF21:
 2498 045e 77696467 		.ascii	"widget\000"
 2498      657400
 2499              	.LASF31:
 2500 0465 6F6E4D61 		.ascii	"onMask\000"
 2500      736B00
 2501              	.LASF17:
 2502 046c 43617053 		.ascii	"CapSense_BaseInit\000"
 2502      656E7365 
 2502      5F426173 
 2502      65496E69 
 2502      7400
 2503              	.LASF52:
 2504 047e 43617053 		.ascii	"CapSense_lowBaselineResetCnt\000"
 2504      656E7365 
 2504      5F6C6F77 
 2504      42617365 
 2504      6C696E65 
 2505              	.LASF56:
 2506 049b 43617053 		.ascii	"CapSense_debounce\000"
 2506      656E7365 
 2506      5F646562 
 2506      6F756E63 
 2506      6500
 2507              	.LASF48:
 2508 04ad 43617053 		.ascii	"CapSense_sensorBaseline\000"
 2508      656E7365 
 2508      5F73656E 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\cckGk2Ra.s 			page 83


 2508      736F7242 
 2508      6173656C 
 2509              	.LASF14:
 2510 04c5 63686172 		.ascii	"char\000"
 2510      00
 2511              	.LASF30:
 2512 04ca 6465626F 		.ascii	"debounceIndex\000"
 2512      756E6365 
 2512      496E6465 
 2512      7800
 2513              	.LASF61:
 2514 04d8 47656E65 		.ascii	"Generated_Source\\PSoC5\\CapSense_CSHL.c\000"
 2514      72617465 
 2514      645F536F 
 2514      75726365 
 2514      5C50536F 
 2515              	.LASF44:
 2516 04ff 43617053 		.ascii	"CapSense_sensorRaw\000"
 2516      656E7365 
 2516      5F73656E 
 2516      736F7252 
 2516      617700
 2517              	.LASF57:
 2518 0512 43617053 		.ascii	"CapSense_debounceCounter\000"
 2518      656E7365 
 2518      5F646562 
 2518      6F756E63 
 2518      65436F75 
 2519              	.LASF26:
 2520 052b 74656D70 		.ascii	"tempRaw\000"
 2520      52617700 
 2521              	.LASF59:
 2522 0533 43617053 		.ascii	"CapSense_numberOfSensors\000"
 2522      656E7365 
 2522      5F6E756D 
 2522      6265724F 
 2522      6653656E 
 2523              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
