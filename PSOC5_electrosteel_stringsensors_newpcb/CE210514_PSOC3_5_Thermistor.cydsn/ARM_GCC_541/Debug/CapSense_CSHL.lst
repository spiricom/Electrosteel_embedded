ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"CapSense_CSHL.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	CapSense_rawFilterData1,20,4
  20              		.comm	CapSense_sensorBaseline,20,4
  21              		.comm	CapSense_sensorBaselineLow,10,4
  22              		.comm	CapSense_sensorSignal,20,4
  23              		.comm	CapSense_sensorOnMask,2,4
  24              		.comm	CapSense_lowBaselineResetCnt,10,4
  25              		.global	CapSense_fingerThreshold
  26              		.data
  27              		.align	2
  28              		.type	CapSense_fingerThreshold, %object
  29              		.size	CapSense_fingerThreshold, 20
  30              	CapSense_fingerThreshold:
  31 0000 1400     		.short	20
  32 0002 1400     		.short	20
  33 0004 1400     		.short	20
  34 0006 1400     		.short	20
  35 0008 1400     		.short	20
  36 000a 1400     		.short	20
  37 000c 1400     		.short	20
  38 000e 1400     		.short	20
  39 0010 1400     		.short	20
  40 0012 1400     		.short	20
  41              		.global	CapSense_noiseThreshold
  42              		.align	2
  43              		.type	CapSense_noiseThreshold, %object
  44              		.size	CapSense_noiseThreshold, 20
  45              	CapSense_noiseThreshold:
  46 0014 0A00     		.short	10
  47 0016 0A00     		.short	10
  48 0018 0A00     		.short	10
  49 001a 0A00     		.short	10
  50 001c 0A00     		.short	10
  51 001e 0A00     		.short	10
  52 0020 0A00     		.short	10
  53 0022 0A00     		.short	10
  54 0024 0A00     		.short	10
  55 0026 0A00     		.short	10
  56              		.global	CapSense_hysteresis
  57              		.align	2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 2


  58              		.type	CapSense_hysteresis, %object
  59              		.size	CapSense_hysteresis, 20
  60              	CapSense_hysteresis:
  61 0028 0C00     		.short	12
  62 002a 0C00     		.short	12
  63 002c 0C00     		.short	12
  64 002e 0C00     		.short	12
  65 0030 0C00     		.short	12
  66 0032 0C00     		.short	12
  67 0034 0C00     		.short	12
  68 0036 0C00     		.short	12
  69 0038 0C00     		.short	12
  70 003a 0C00     		.short	12
  71              		.global	CapSense_debounce
  72              		.align	2
  73              		.type	CapSense_debounce, %object
  74              		.size	CapSense_debounce, 10
  75              	CapSense_debounce:
  76 003c 01       		.byte	1
  77 003d 01       		.byte	1
  78 003e 01       		.byte	1
  79 003f 01       		.byte	1
  80 0040 01       		.byte	1
  81 0041 01       		.byte	1
  82 0042 01       		.byte	1
  83 0043 01       		.byte	1
  84 0044 01       		.byte	1
  85 0045 01       		.byte	1
  86              		.global	CapSense_debounceCounter
  87              		.bss
  88              		.align	2
  89              		.type	CapSense_debounceCounter, %object
  90              		.size	CapSense_debounceCounter, 11
  91              	CapSense_debounceCounter:
  92 0000 00000000 		.space	11
  92      00000000 
  92      000000
  93              		.global	CapSense_rawDataIndex
  94              		.section	.rodata
  95              		.align	2
  96              		.type	CapSense_rawDataIndex, %object
  97              		.size	CapSense_rawDataIndex, 10
  98              	CapSense_rawDataIndex:
  99 0000 00       		.byte	0
 100 0001 01       		.byte	1
 101 0002 02       		.byte	2
 102 0003 03       		.byte	3
 103 0004 04       		.byte	4
 104 0005 05       		.byte	5
 105 0006 06       		.byte	6
 106 0007 07       		.byte	7
 107 0008 08       		.byte	8
 108 0009 09       		.byte	9
 109              		.global	CapSense_numberOfSensors
 110 000a 0000     		.align	2
 111              		.type	CapSense_numberOfSensors, %object
 112              		.size	CapSense_numberOfSensors, 10
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 3


 113              	CapSense_numberOfSensors:
 114 000c 01       		.byte	1
 115 000d 01       		.byte	1
 116 000e 01       		.byte	1
 117 000f 01       		.byte	1
 118 0010 01       		.byte	1
 119 0011 01       		.byte	1
 120 0012 01       		.byte	1
 121 0013 01       		.byte	1
 122 0014 01       		.byte	1
 123 0015 01       		.byte	1
 124              		.section	.text.CapSense_BaseInit,"ax",%progbits
 125              		.align	2
 126              		.global	CapSense_BaseInit
 127              		.thumb
 128              		.thumb_func
 129              		.type	CapSense_BaseInit, %function
 130              	CapSense_BaseInit:
 131              	.LFB0:
 132              		.file 1 "Generated_Source\\PSoC5\\CapSense_CSHL.c"
   1:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/CapSense_CSHL.c **** * File Name: CapSense_CSHL.c
   3:Generated_Source\PSoC5/CapSense_CSHL.c **** * Version 3.50
   4:Generated_Source\PSoC5/CapSense_CSHL.c **** *
   5:Generated_Source\PSoC5/CapSense_CSHL.c **** * Description:
   6:Generated_Source\PSoC5/CapSense_CSHL.c **** *  This file provides the source code to the High Level APIs for the CapSesne
   7:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CSD component.
   8:Generated_Source\PSoC5/CapSense_CSHL.c **** *
   9:Generated_Source\PSoC5/CapSense_CSHL.c **** * Note:
  10:Generated_Source\PSoC5/CapSense_CSHL.c **** *
  11:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
  12:Generated_Source\PSoC5/CapSense_CSHL.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC5/CapSense_CSHL.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC5/CapSense_CSHL.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC5/CapSense_CSHL.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
  17:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  18:Generated_Source\PSoC5/CapSense_CSHL.c **** #include "CapSense_CSHL.h"
  19:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  20:Generated_Source\PSoC5/CapSense_CSHL.c **** /* Storage of filters data */
  21:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
  22:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) )
  23:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  24:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_rawFilterData1[CapSense_TOTAL_SENSOR_COUNT];
  25:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_rawFilterData2[CapSense_TOTAL_SENSOR_COUNT];
  26:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  27:Generated_Source\PSoC5/CapSense_CSHL.c **** #elif ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)   | \
  28:Generated_Source\PSoC5/CapSense_CSHL.c ****         (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)   | \
  29:Generated_Source\PSoC5/CapSense_CSHL.c ****         (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) | \
  30:Generated_Source\PSoC5/CapSense_CSHL.c ****         (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)   | \
  31:Generated_Source\PSoC5/CapSense_CSHL.c ****         (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER) )
  32:Generated_Source\PSoC5/CapSense_CSHL.c ****         
  33:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_rawFilterData1[CapSense_TOTAL_SENSOR_COUNT];
  34:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  35:Generated_Source\PSoC5/CapSense_CSHL.c **** #else
  36:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* No Raw filters */
  37:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif  /* ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) || \
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 4


  38:Generated_Source\PSoC5/CapSense_CSHL.c ****         *    (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) )
  39:Generated_Source\PSoC5/CapSense_CSHL.c ****         */
  40:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  41:Generated_Source\PSoC5/CapSense_CSHL.c **** uint16 CapSense_sensorBaseline[CapSense_TOTAL_SENSOR_COUNT];
  42:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_sensorBaselineLow[CapSense_TOTAL_SENSOR_COUNT];
  43:Generated_Source\PSoC5/CapSense_CSHL.c **** uint16 CapSense_sensorSignal[CapSense_TOTAL_SENSOR_COUNT];
  44:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_sensorOnMask[(((CapSense_TOTAL_SENSOR_COUNT - 1u) / 8u) + 1u)];
  45:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  46:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_lowBaselineResetCnt[CapSense_TOTAL_SENSOR_COUNT];
  47:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  48:Generated_Source\PSoC5/CapSense_CSHL.c **** uint16 CapSense_fingerThreshold[] = {
  49:Generated_Source\PSoC5/CapSense_CSHL.c ****     20u, 20u, 20u, 20u, 20u, 20u, 20u, 20u, 20u, 20u, 
  50:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  51:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  52:Generated_Source\PSoC5/CapSense_CSHL.c **** uint16 CapSense_noiseThreshold[] = {
  53:Generated_Source\PSoC5/CapSense_CSHL.c ****     10u, 10u, 10u, 10u, 10u, 10u, 10u, 10u, 10u, 10u, 
  54:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  55:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  56:Generated_Source\PSoC5/CapSense_CSHL.c **** uint16 CapSense_hysteresis[] = {
  57:Generated_Source\PSoC5/CapSense_CSHL.c ****     12u, 12u, 12u, 12u, 12u, 12u, 12u, 12u, 12u, 12u, 
  58:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  59:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  60:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_debounce[] = {
  61:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 
  62:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  63:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  64:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_debounceCounter[] = {
  65:Generated_Source\PSoC5/CapSense_CSHL.c ****     0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 
  66:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  67:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  68:Generated_Source\PSoC5/CapSense_CSHL.c **** const uint8 CYCODE CapSense_rawDataIndex[] = {
  69:Generated_Source\PSoC5/CapSense_CSHL.c ****     0u, /* Button0__BTN */
  70:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button1__BTN */
  71:Generated_Source\PSoC5/CapSense_CSHL.c ****     2u, /* Button2__BTN */
  72:Generated_Source\PSoC5/CapSense_CSHL.c ****     3u, /* Button3__BTN */
  73:Generated_Source\PSoC5/CapSense_CSHL.c ****     4u, /* Button4__BTN */
  74:Generated_Source\PSoC5/CapSense_CSHL.c ****     5u, /* Button5__BTN */
  75:Generated_Source\PSoC5/CapSense_CSHL.c ****     6u, /* Button6__BTN */
  76:Generated_Source\PSoC5/CapSense_CSHL.c ****     7u, /* Button7__BTN */
  77:Generated_Source\PSoC5/CapSense_CSHL.c ****     8u, /* Button8__BTN */
  78:Generated_Source\PSoC5/CapSense_CSHL.c ****     9u, /* Button9__BTN */
  79:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  80:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  81:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  82:Generated_Source\PSoC5/CapSense_CSHL.c **** const uint8 CYCODE CapSense_numberOfSensors[] = {
  83:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button0__BTN */
  84:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button1__BTN */
  85:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button2__BTN */
  86:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button3__BTN */
  87:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button4__BTN */
  88:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button5__BTN */
  89:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button6__BTN */
  90:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button7__BTN */
  91:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button8__BTN */
  92:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button9__BTN */
  93:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  94:Generated_Source\PSoC5/CapSense_CSHL.c **** };
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 5


  95:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  96:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  97:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  98:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  99:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 100:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_BaseInit
 101:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 102:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 103:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 104:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Loads the CapSense_sensorBaseline[sensor] array element with an 
 105:Generated_Source\PSoC5/CapSense_CSHL.c **** *  initial value which is equal to raw count value. 
 106:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Resets to zero CapSense_sensorBaselineLow[sensor] and 
 107:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorSignal[sensor] array element.
 108:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Loads CapSense_debounceCounter[sensor] array element with initial 
 109:Generated_Source\PSoC5/CapSense_CSHL.c **** *  value equal CapSense_debounce[].
 110:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Loads the CapSense_rawFilterData2[sensor] and 
 111:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData2[sensor] array element with an 
 112:Generated_Source\PSoC5/CapSense_CSHL.c **** *  initial value which is equal raw count value if raw data filter is enabled.
 113:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 114:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 115:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensor:  Sensor number.
 116:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 117:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 118:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 119:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 120:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 121:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaseline[]    - used to store baseline value.
 122:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaselineLow[] - used to store fraction byte of 
 123:Generated_Source\PSoC5/CapSense_CSHL.c **** *  baseline value.
 124:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorSignal[]      - used to store diffence between 
 125:Generated_Source\PSoC5/CapSense_CSHL.c **** *  current value of raw data and previous value of baseline.
 126:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_debounceCounter[]   - used to store current debounce 
 127:Generated_Source\PSoC5/CapSense_CSHL.c **** *  counter of sensor. Widget which has this parameter are buttons, matrix 
 128:Generated_Source\PSoC5/CapSense_CSHL.c **** *  buttons, proximity, guard. All other widgets haven't debounce parameter
 129:Generated_Source\PSoC5/CapSense_CSHL.c **** *  and use the last element of this array with value 0 (it means no debounce).
 130:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData1[]    - used to store previous sample of 
 131:Generated_Source\PSoC5/CapSense_CSHL.c **** *  any enabled raw data filter.
 132:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData2[]    - used to store before previous sample
 133:Generated_Source\PSoC5/CapSense_CSHL.c **** *  of enabled raw data filter. Only required for median or average filters.
 134:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 135:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 136:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 137:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 138:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 139:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_BaseInit(uint8 sensor) 
 140:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 133              		.loc 1 140 0
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 16
 136              		@ frame_needed = 1, uses_anonymous_args = 0
 137              		@ link register save eliminated.
 138 0000 80B4     		push	{r7}
 139              		.cfi_def_cfa_offset 4
 140              		.cfi_offset 7, -4
 141 0002 85B0     		sub	sp, sp, #20
 142              		.cfi_def_cfa_offset 24
 143 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 6


 144              		.cfi_def_cfa_register 7
 145 0006 0346     		mov	r3, r0
 146 0008 FB71     		strb	r3, [r7, #7]
 141:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if ((CapSense_TOTAL_BUTTONS_COUNT) || (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) || \
 142:Generated_Source\PSoC5/CapSense_CSHL.c ****          (CapSense_TOTAL_GENERICS_COUNT))
 143:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 widget = CapSense_widgetNumber[sensor];
 147              		.loc 1 143 0
 148 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 149 000c 134A     		ldr	r2, .L2
 150 000e D35C     		ldrb	r3, [r2, r3]
 151 0010 FB73     		strb	r3, [r7, #15]
 144:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif /* ((CapSense_TOTAL_MATRIX_BUTTONS_COUNT) || (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)) */
 145:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 146:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)
 147:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 debounceIndex;
 148:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) */
 149:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 150:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 151:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Exclude generic widget */
 152:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(widget < CapSense_END_OF_WIDGETS_INDEX)
 153:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 154:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 155:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 156:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Initialize Baseline */
 157:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_sensorBaseline[sensor] = CapSense_sensorRaw[sensor];
 152              		.loc 1 157 0
 153 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 154 0014 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 155 0016 1249     		ldr	r1, .L2+4
 156 0018 31F81210 		ldrh	r1, [r1, r2, lsl #1]
 157 001c 114A     		ldr	r2, .L2+8
 158 001e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 158:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_sensorBaselineLow[sensor] = 0u;
 159              		.loc 1 158 0
 160 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 161 0024 104A     		ldr	r2, .L2+12
 162 0026 0021     		movs	r1, #0
 163 0028 D154     		strb	r1, [r2, r3]
 159:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_sensorSignal[sensor] = 0u;
 164              		.loc 1 159 0
 165 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 166 002c 0F4A     		ldr	r2, .L2+16
 167 002e 0021     		movs	r1, #0
 168 0030 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 160:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 161:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_debounceCounter[widget] =  CapSense_debounce[widget];
 169              		.loc 1 161 0
 170 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 171 0036 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 172 0038 0D49     		ldr	r1, .L2+20
 173 003a 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 174 003c 0D4A     		ldr	r2, .L2+24
 175 003e D154     		strb	r1, [r2, r3]
 162:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 163:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 164:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if ((CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) |\
 165:Generated_Source\PSoC5/CapSense_CSHL.c ****          (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER))
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 7


 166:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 167:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = CapSense_sensorRaw[sensor];
 168:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData2[sensor] = CapSense_sensorRaw[sensor];
 169:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 170:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif ((CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) |\
 171:Generated_Source\PSoC5/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER) |\
 172:Generated_Source\PSoC5/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) |\
 173:Generated_Source\PSoC5/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER) |\
 174:Generated_Source\PSoC5/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER))
 175:Generated_Source\PSoC5/CapSense_CSHL.c ****             
 176:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = CapSense_sensorRaw[sensor];
 176              		.loc 1 176 0
 177 0040 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 178 0042 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 179 0044 0649     		ldr	r1, .L2+4
 180 0046 31F81210 		ldrh	r1, [r1, r2, lsl #1]
 181 004a 0B4A     		ldr	r2, .L2+28
 182 004c 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 177:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 178:Generated_Source\PSoC5/CapSense_CSHL.c ****     #else
 179:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* No Raw filters */
 180:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* ((CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
 181:Generated_Source\PSoC5/CapSense_CSHL.c ****             *   (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER))
 182:Generated_Source\PSoC5/CapSense_CSHL.c ****             */
 183:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 184:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 185:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Exclude generic widget */
 186:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 187:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 188:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 183              		.loc 1 188 0
 184 0050 00BF     		nop
 185 0052 1437     		adds	r7, r7, #20
 186              		.cfi_def_cfa_offset 4
 187 0054 BD46     		mov	sp, r7
 188              		.cfi_def_cfa_register 13
 189              		@ sp needed
 190 0056 80BC     		pop	{r7}
 191              		.cfi_restore 7
 192              		.cfi_def_cfa_offset 0
 193 0058 7047     		bx	lr
 194              	.L3:
 195 005a 00BF     		.align	2
 196              	.L2:
 197 005c 00000000 		.word	CapSense_widgetNumber
 198 0060 00000000 		.word	CapSense_sensorRaw
 199 0064 00000000 		.word	CapSense_sensorBaseline
 200 0068 00000000 		.word	CapSense_sensorBaselineLow
 201 006c 00000000 		.word	CapSense_sensorSignal
 202 0070 00000000 		.word	CapSense_debounce
 203 0074 00000000 		.word	CapSense_debounceCounter
 204 0078 00000000 		.word	CapSense_rawFilterData1
 205              		.cfi_endproc
 206              	.LFE0:
 207              		.size	CapSense_BaseInit, .-CapSense_BaseInit
 208              		.section	.text.CapSense_InitializeSensorBaseline,"ax",%progbits
 209              		.align	2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 8


 210              		.global	CapSense_InitializeSensorBaseline
 211              		.thumb
 212              		.thumb_func
 213              		.type	CapSense_InitializeSensorBaseline, %function
 214              	CapSense_InitializeSensorBaseline:
 215              	.LFB1:
 189:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 190:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 191:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 192:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_InitializeSensorBaseline
 193:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 194:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 195:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 196:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Loads the CapSense_sensorBaseline[sensor] array element with an 
 197:Generated_Source\PSoC5/CapSense_CSHL.c **** *  initial value by scanning the selected sensor (one channel design) or pair 
 198:Generated_Source\PSoC5/CapSense_CSHL.c **** *  of sensors (two channels designs). The raw count value is copied into the 
 199:Generated_Source\PSoC5/CapSense_CSHL.c **** *  baseline array for each sensor. The raw data filters are initialized if 
 200:Generated_Source\PSoC5/CapSense_CSHL.c **** *  enabled.
 201:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 202:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 203:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensor:  Sensor number.
 204:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 205:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 206:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 207:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 208:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 209:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 210:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 211:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 212:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_InitializeSensorBaseline(uint8 sensor)
 213:Generated_Source\PSoC5/CapSense_CSHL.c ****                           
 214:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 216              		.loc 1 214 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 8
 219              		@ frame_needed = 1, uses_anonymous_args = 0
 220 0000 80B5     		push	{r7, lr}
 221              		.cfi_def_cfa_offset 8
 222              		.cfi_offset 7, -8
 223              		.cfi_offset 14, -4
 224 0002 82B0     		sub	sp, sp, #8
 225              		.cfi_def_cfa_offset 16
 226 0004 00AF     		add	r7, sp, #0
 227              		.cfi_def_cfa_register 7
 228 0006 0346     		mov	r3, r0
 229 0008 FB71     		strb	r3, [r7, #7]
 215:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Scan sensor */
 216:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_ScanSensor(sensor);
 230              		.loc 1 216 0
 231 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 232 000c 1846     		mov	r0, r3
 233 000e FFF7FEFF 		bl	CapSense_ScanSensor
 217:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(CapSense_IsBusy() != 0u)
 234              		.loc 1 217 0
 235 0012 00BF     		nop
 236              	.L5:
 237              		.loc 1 217 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 9


 238 0014 FFF7FEFF 		bl	CapSense_IsBusy
 239 0018 0346     		mov	r3, r0
 240 001a 002B     		cmp	r3, #0
 241 001c FAD1     		bne	.L5
 218:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 219:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Wait while busy */
 220:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 221:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 222:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
 223:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Initialize Baseline, Signal and debounce counters */       
 224:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_BaseInit(sensor);
 242              		.loc 1 224 0 is_stmt 1
 243 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 244 0020 1846     		mov	r0, r3
 245 0022 FFF7FEFF 		bl	CapSense_BaseInit
 225:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 226:Generated_Source\PSoC5/CapSense_CSHL.c ****     #else
 227:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 228:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(sensor < CapSense_TOTAL_SENSOR_COUNT__CH0)
 229:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 230:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Initialize Baseline, Signal and debounce counters */ 
 231:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_BaseInit(sensor);
 232:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 233:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 234:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(sensor < CapSense_TOTAL_SENSOR_COUNT__CH1)
 235:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 236:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Initialize Baseline, Signal and debounce counters */
 237:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_BaseInit(sensor + CapSense_TOTAL_SENSOR_COUNT__CH0);
 238:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 239:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 240:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN) */
 241:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 246              		.loc 1 241 0
 247 0026 00BF     		nop
 248 0028 0837     		adds	r7, r7, #8
 249              		.cfi_def_cfa_offset 8
 250 002a BD46     		mov	sp, r7
 251              		.cfi_def_cfa_register 13
 252              		@ sp needed
 253 002c 80BD     		pop	{r7, pc}
 254              		.cfi_endproc
 255              	.LFE1:
 256              		.size	CapSense_InitializeSensorBaseline, .-CapSense_InitializeSensorBaseline
 257 002e 00BF     		.section	.text.CapSense_InitializeAllBaselines,"ax",%progbits
 258              		.align	2
 259              		.global	CapSense_InitializeAllBaselines
 260              		.thumb
 261              		.thumb_func
 262              		.type	CapSense_InitializeAllBaselines, %function
 263              	CapSense_InitializeAllBaselines:
 264              	.LFB2:
 242:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 243:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 244:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 245:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_InitializeAllBaselines
 246:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 247:Generated_Source\PSoC5/CapSense_CSHL.c **** *
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 10


 248:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 249:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Uses the CapSense_InitializeSensorBaseline function to loads the 
 250:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaseline[] array with an initial values by scanning 
 251:Generated_Source\PSoC5/CapSense_CSHL.c **** *  all sensors. The raw count values are copied into the baseline array for 
 252:Generated_Source\PSoC5/CapSense_CSHL.c **** *  all sensors. The raw data filters are initialized if enabled.
 253:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 254:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 255:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 256:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 257:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 258:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 259:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 260:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 261:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 262:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 263:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 264:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_InitializeAllBaselines(void)
 265:Generated_Source\PSoC5/CapSense_CSHL.c ****                           
 266:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 265              		.loc 1 266 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 8
 268              		@ frame_needed = 1, uses_anonymous_args = 0
 269 0000 80B5     		push	{r7, lr}
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 7, -8
 272              		.cfi_offset 14, -4
 273 0002 82B0     		sub	sp, sp, #8
 274              		.cfi_def_cfa_offset 16
 275 0004 00AF     		add	r7, sp, #0
 276              		.cfi_def_cfa_register 7
 267:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 268:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 269:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* The baseline initialize by sensor of sensor pair */
 270:Generated_Source\PSoC5/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SCANSLOT_COUNT; i++)
 277              		.loc 1 270 0
 278 0006 0023     		movs	r3, #0
 279 0008 FB71     		strb	r3, [r7, #7]
 280 000a 06E0     		b	.L7
 281              	.L8:
 271:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 272:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_InitializeSensorBaseline(i);
 282              		.loc 1 272 0 discriminator 3
 283 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 284 000e 1846     		mov	r0, r3
 285 0010 FFF7FEFF 		bl	CapSense_InitializeSensorBaseline
 270:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 286              		.loc 1 270 0 discriminator 3
 287 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 288 0016 0133     		adds	r3, r3, #1
 289 0018 FB71     		strb	r3, [r7, #7]
 290              	.L7:
 270:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 291              		.loc 1 270 0 is_stmt 0 discriminator 1
 292 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 293 001c 092B     		cmp	r3, #9
 294 001e F5D9     		bls	.L8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 11


 273:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 274:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 295              		.loc 1 274 0 is_stmt 1
 296 0020 00BF     		nop
 297 0022 0837     		adds	r7, r7, #8
 298              		.cfi_def_cfa_offset 8
 299 0024 BD46     		mov	sp, r7
 300              		.cfi_def_cfa_register 13
 301              		@ sp needed
 302 0026 80BD     		pop	{r7, pc}
 303              		.cfi_endproc
 304              	.LFE2:
 305              		.size	CapSense_InitializeAllBaselines, .-CapSense_InitializeAllBaselines
 306              		.section	.text.CapSense_InitializeEnabledBaselines,"ax",%progbits
 307              		.align	2
 308              		.global	CapSense_InitializeEnabledBaselines
 309              		.thumb
 310              		.thumb_func
 311              		.type	CapSense_InitializeEnabledBaselines, %function
 312              	CapSense_InitializeEnabledBaselines:
 313              	.LFB3:
 275:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 276:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 277:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 278:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_InitializeEnabledBaselines
 279:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 280:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 281:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 282:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Scans all enabled widgets and the raw count values are copied into the 
 283:Generated_Source\PSoC5/CapSense_CSHL.c **** *  baseline array for all sensors enabled in scanning process. Baselines 
 284:Generated_Source\PSoC5/CapSense_CSHL.c **** *  initialize with zero values for sensors disabled from scanning process. 
 285:Generated_Source\PSoC5/CapSense_CSHL.c **** *  The raw data filters are initialized if enabled.
 286:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 287:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 288:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 289:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 290:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 291:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 292:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 293:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 294:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 295:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 296:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 297:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_InitializeEnabledBaselines(void)
 298:Generated_Source\PSoC5/CapSense_CSHL.c ****                              
 299:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 314              		.loc 1 299 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 8
 317              		@ frame_needed = 1, uses_anonymous_args = 0
 318 0000 80B5     		push	{r7, lr}
 319              		.cfi_def_cfa_offset 8
 320              		.cfi_offset 7, -8
 321              		.cfi_offset 14, -4
 322 0002 82B0     		sub	sp, sp, #8
 323              		.cfi_def_cfa_offset 16
 324 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 12


 325              		.cfi_def_cfa_register 7
 300:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 301:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos;
 302:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 enMask;
 303:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 304:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_ScanEnabledWidgets();
 326              		.loc 1 304 0
 327 0006 FFF7FEFF 		bl	CapSense_ScanEnabledWidgets
 305:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(CapSense_IsBusy() != 0u)
 328              		.loc 1 305 0
 329 000a 00BF     		nop
 330              	.L10:
 331              		.loc 1 305 0 is_stmt 0 discriminator 1
 332 000c FFF7FEFF 		bl	CapSense_IsBusy
 333 0010 0346     		mov	r3, r0
 334 0012 002B     		cmp	r3, #0
 335 0014 FAD1     		bne	.L10
 306:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 307:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Wait while busy */
 308:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 309:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 310:Generated_Source\PSoC5/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 336              		.loc 1 310 0 is_stmt 1
 337 0016 0023     		movs	r3, #0
 338 0018 FB71     		strb	r3, [r7, #7]
 339 001a 1DE0     		b	.L11
 340              	.L13:
 311:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 312:Generated_Source\PSoC5/CapSense_CSHL.c ****         pos = (i >> 3u);
 341              		.loc 1 312 0
 342 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 343 001e DB08     		lsrs	r3, r3, #3
 344 0020 BB71     		strb	r3, [r7, #6]
 313:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = 0x01u << (i & 0x07u);
 345              		.loc 1 313 0
 346 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 347 0024 03F00703 		and	r3, r3, #7
 348 0028 0122     		movs	r2, #1
 349 002a 02FA03F3 		lsl	r3, r2, r3
 350 002e 7B71     		strb	r3, [r7, #5]
 314:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 315:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Clear raw data if sensor is disabled from scanning process */
 316:Generated_Source\PSoC5/CapSense_CSHL.c ****         if((CapSense_sensorEnableMask[pos] & enMask) == 0u)
 351              		.loc 1 316 0
 352 0030 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 353 0032 0D4A     		ldr	r2, .L14
 354 0034 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 355 0036 7B79     		ldrb	r3, [r7, #5]
 356 0038 1340     		ands	r3, r3, r2
 357 003a DBB2     		uxtb	r3, r3
 358 003c 002B     		cmp	r3, #0
 359 003e 04D1     		bne	.L12
 317:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 318:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_sensorRaw[i] = 0u;
 360              		.loc 1 318 0
 361 0040 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 362 0042 0A4A     		ldr	r2, .L14+4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 13


 363 0044 0021     		movs	r1, #0
 364 0046 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 365              	.L12:
 319:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 320:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 321:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Initialize baselines */
 322:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_BaseInit(i);
 366              		.loc 1 322 0 discriminator 2
 367 004a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 368 004c 1846     		mov	r0, r3
 369 004e FFF7FEFF 		bl	CapSense_BaseInit
 310:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 370              		.loc 1 310 0 discriminator 2
 371 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 372 0054 0133     		adds	r3, r3, #1
 373 0056 FB71     		strb	r3, [r7, #7]
 374              	.L11:
 310:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 375              		.loc 1 310 0 is_stmt 0 discriminator 1
 376 0058 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 377 005a 092B     		cmp	r3, #9
 378 005c DED9     		bls	.L13
 323:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 324:Generated_Source\PSoC5/CapSense_CSHL.c **** }  
 379              		.loc 1 324 0 is_stmt 1
 380 005e 00BF     		nop
 381 0060 0837     		adds	r7, r7, #8
 382              		.cfi_def_cfa_offset 8
 383 0062 BD46     		mov	sp, r7
 384              		.cfi_def_cfa_register 13
 385              		@ sp needed
 386 0064 80BD     		pop	{r7, pc}
 387              	.L15:
 388 0066 00BF     		.align	2
 389              	.L14:
 390 0068 00000000 		.word	CapSense_sensorEnableMask
 391 006c 00000000 		.word	CapSense_sensorRaw
 392              		.cfi_endproc
 393              	.LFE3:
 394              		.size	CapSense_InitializeEnabledBaselines, .-CapSense_InitializeEnabledBaselines
 395              		.section	.text.CapSense_UpdateSensorBaseline,"ax",%progbits
 396              		.align	2
 397              		.global	CapSense_UpdateSensorBaseline
 398              		.thumb
 399              		.thumb_func
 400              		.type	CapSense_UpdateSensorBaseline, %function
 401              	CapSense_UpdateSensorBaseline:
 402              	.LFB4:
 325:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 326:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 327:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 328:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_UpdateSensorBaseline
 329:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 330:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 331:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 332:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Updates the CapSense_sensorBaseline[sensor] array element using the 
 333:Generated_Source\PSoC5/CapSense_CSHL.c **** *  LP filter with k = 256. The signal calculates the difference of count by 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 14


 334:Generated_Source\PSoC5/CapSense_CSHL.c **** *  subtracting the previous baseline from the current raw count value and stores
 335:Generated_Source\PSoC5/CapSense_CSHL.c **** *  it in CapSense_SensorSignal[sensor]. 
 336:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If auto reset option is enabled the baseline updated regards noise threshold. 
 337:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If auto reset option is disabled the baseline stops updating if signal is 
 338:Generated_Source\PSoC5/CapSense_CSHL.c **** *  greater that zero and baseline loads with raw count value if signal is less 
 339:Generated_Source\PSoC5/CapSense_CSHL.c **** *  that noise threshold.
 340:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Raw data filters are applied to the values if enabled before baseline 
 341:Generated_Source\PSoC5/CapSense_CSHL.c **** *  calculation.
 342:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 343:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 344:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensor:  Sensor number.
 345:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 346:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 347:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 348:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 349:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 350:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaseline[]    - used to store baseline value.
 351:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaselineLow[] - used to store fraction byte of 
 352:Generated_Source\PSoC5/CapSense_CSHL.c **** *  baseline value.
 353:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorSignal[]      - used to store diffence between 
 354:Generated_Source\PSoC5/CapSense_CSHL.c **** *  current value of raw data and previous value of baseline.
 355:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData1[]    - used to store previous sample of 
 356:Generated_Source\PSoC5/CapSense_CSHL.c **** *  any enabled raw data filter.
 357:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData2[]    - used to store before previous sample
 358:Generated_Source\PSoC5/CapSense_CSHL.c **** *  of enabled raw data filter. Only required for median or average filters.
 359:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 360:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 361:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 362:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 363:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 364:Generated_Source\PSoC5/CapSense_CSHL.c ****  void CapSense_UpdateSensorBaseline(uint8 sensor)
 365:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  
 366:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 403              		.loc 1 366 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 24
 406              		@ frame_needed = 1, uses_anonymous_args = 0
 407 0000 80B5     		push	{r7, lr}
 408              		.cfi_def_cfa_offset 8
 409              		.cfi_offset 7, -8
 410              		.cfi_offset 14, -4
 411 0002 86B0     		sub	sp, sp, #24
 412              		.cfi_def_cfa_offset 32
 413 0004 00AF     		add	r7, sp, #0
 414              		.cfi_def_cfa_register 7
 415 0006 0346     		mov	r3, r0
 416 0008 FB71     		strb	r3, [r7, #7]
 367:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint32 calc;
 368:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 tempRaw;
 369:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 filteredRawData;
 370:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 widget = CapSense_widgetNumber[sensor];
 417              		.loc 1 370 0
 418 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 419 000c 4D4A     		ldr	r2, .L26
 420 000e D35C     		ldrb	r3, [r2, r3]
 421 0010 7B75     		strb	r3, [r7, #21]
 371:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 noiseThreshold = CapSense_noiseThreshold[widget];
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 15


 422              		.loc 1 371 0
 423 0012 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 424 0014 4C4A     		ldr	r2, .L26+4
 425 0016 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 426 001a 7B82     		strh	r3, [r7, #18]	@ movhi
 372:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 373:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 374:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Exclude generic widget */
 375:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(widget < CapSense_END_OF_WIDGETS_INDEX)
 376:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 377:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 378:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 379:Generated_Source\PSoC5/CapSense_CSHL.c ****     filteredRawData = CapSense_sensorRaw[sensor];
 427              		.loc 1 379 0
 428 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 429 001e 4B4A     		ldr	r2, .L26+8
 430 0020 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 431 0024 3B82     		strh	r3, [r7, #16]	@ movhi
 380:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 381:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER)
 382:Generated_Source\PSoC5/CapSense_CSHL.c ****         tempRaw = filteredRawData;
 383:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_MedianFilter(filteredRawData, CapSense_rawFilterData1[sensor], 
 384:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                         CapSense_rawFilterData2[sensor]);
 385:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData2[sensor] = CapSense_rawFilterData1[sensor];
 386:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = tempRaw;
 387:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 388:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER)
 389:Generated_Source\PSoC5/CapSense_CSHL.c ****         tempRaw = filteredRawData;
 390:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_AveragingFilter(filteredRawData, CapSense_rawFilterData1[sensor]
 391:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                            CapSense_rawFilterData2[sensor]);
 392:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData2[sensor] = CapSense_rawFilterData1[sensor];
 393:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = tempRaw;
 394:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 395:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)
 396:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_IIR2Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 397:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 398:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 399:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)
 400:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_IIR4Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 432              		.loc 1 400 0
 433 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 434 0028 494A     		ldr	r2, .L26+12
 435 002a 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 436 002e 3B8A     		ldrh	r3, [r7, #16]
 437 0030 1146     		mov	r1, r2
 438 0032 1846     		mov	r0, r3
 439 0034 FFF7FEFF 		bl	CapSense_IIR4Filter
 440 0038 0346     		mov	r3, r0
 441 003a 3B82     		strh	r3, [r7, #16]	@ movhi
 401:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 442              		.loc 1 401 0
 443 003c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 444 003e 4449     		ldr	r1, .L26+12
 445 0040 3A8A     		ldrh	r2, [r7, #16]	@ movhi
 446 0042 21F81320 		strh	r2, [r1, r3, lsl #1]	@ movhi
 402:Generated_Source\PSoC5/CapSense_CSHL.c ****             
 403:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 16


 404:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_JitterFilter(filteredRawData, CapSense_rawFilterData1[sensor]);
 405:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 406:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 407:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)
 408:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_IIR8Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 409:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 410:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 411:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER)
 412:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_IIR16Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 413:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 414:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 415:Generated_Source\PSoC5/CapSense_CSHL.c ****     #else
 416:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* No Raw filters */
 417:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) */
 418:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 419:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING)
 420:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_CalculateThresholds(sensor);
 421:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif /* (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING) */
 422:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 423:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 424:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Baseline calculation */
 425:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Calculate difference RawData[cur] - Baseline[prev] */
 426:Generated_Source\PSoC5/CapSense_CSHL.c ****     if(filteredRawData >= CapSense_sensorBaseline[sensor])
 447              		.loc 1 426 0
 448 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 449 0048 424A     		ldr	r2, .L26+16
 450 004a 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 451 004e 3A8A     		ldrh	r2, [r7, #16]
 452 0050 9A42     		cmp	r2, r3
 453 0052 09D3     		bcc	.L17
 427:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 428:Generated_Source\PSoC5/CapSense_CSHL.c ****         tempRaw = filteredRawData - CapSense_sensorBaseline[sensor];
 454              		.loc 1 428 0
 455 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 456 0056 3F4A     		ldr	r2, .L26+16
 457 0058 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 458 005c 3A8A     		ldrh	r2, [r7, #16]	@ movhi
 459 005e D31A     		subs	r3, r2, r3
 460 0060 FB82     		strh	r3, [r7, #22]	@ movhi
 429:Generated_Source\PSoC5/CapSense_CSHL.c ****         widget = 1u;    /* Positive difference - Calculate the Signal */
 461              		.loc 1 429 0
 462 0062 0123     		movs	r3, #1
 463 0064 7B75     		strb	r3, [r7, #21]
 464 0066 08E0     		b	.L18
 465              	.L17:
 430:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 431:Generated_Source\PSoC5/CapSense_CSHL.c ****     else
 432:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 433:Generated_Source\PSoC5/CapSense_CSHL.c ****         tempRaw = CapSense_sensorBaseline[sensor] - filteredRawData;
 466              		.loc 1 433 0
 467 0068 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 468 006a 3A4A     		ldr	r2, .L26+16
 469 006c 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 470 0070 3B8A     		ldrh	r3, [r7, #16]	@ movhi
 471 0072 D31A     		subs	r3, r2, r3
 472 0074 FB82     		strh	r3, [r7, #22]	@ movhi
 434:Generated_Source\PSoC5/CapSense_CSHL.c ****         widget = 0u;    /* Negative difference - Do NOT calculate the Signal */
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 17


 473              		.loc 1 434 0
 474 0076 0023     		movs	r3, #0
 475 0078 7B75     		strb	r3, [r7, #21]
 476              	.L18:
 435:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 436:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 437:Generated_Source\PSoC5/CapSense_CSHL.c ****     if((widget == 0u) && (tempRaw > (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD))
 477              		.loc 1 437 0
 478 007a 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 479 007c 002B     		cmp	r3, #0
 480 007e 18D1     		bne	.L19
 481              		.loc 1 437 0 is_stmt 0 discriminator 1
 482 0080 FB8A     		ldrh	r3, [r7, #22]
 483 0082 142B     		cmp	r3, #20
 484 0084 15D9     		bls	.L19
 438:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 439:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(CapSense_lowBaselineResetCnt[sensor] >= CapSense_LOW_BASELINE_RESET)
 485              		.loc 1 439 0 is_stmt 1
 486 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 487 0088 334A     		ldr	r2, .L26+20
 488 008a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 489 008c 1D2B     		cmp	r3, #29
 490 008e 08D9     		bls	.L20
 440:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 441:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_BaseInit(sensor);
 491              		.loc 1 441 0
 492 0090 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 493 0092 1846     		mov	r0, r3
 494 0094 FFF7FEFF 		bl	CapSense_BaseInit
 442:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_lowBaselineResetCnt[sensor] = 0u;
 495              		.loc 1 442 0
 496 0098 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 497 009a 2F4A     		ldr	r2, .L26+20
 498 009c 0021     		movs	r1, #0
 499 009e D154     		strb	r1, [r2, r3]
 439:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 500              		.loc 1 439 0
 501 00a0 3AE0     		b	.L22
 502              	.L20:
 443:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 444:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
 445:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 446:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_lowBaselineResetCnt[sensor]++;
 503              		.loc 1 446 0
 504 00a2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 505 00a4 2C4A     		ldr	r2, .L26+20
 506 00a6 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 507 00a8 0132     		adds	r2, r2, #1
 508 00aa D1B2     		uxtb	r1, r2
 509 00ac 2A4A     		ldr	r2, .L26+20
 510 00ae D154     		strb	r1, [r2, r3]
 439:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 511              		.loc 1 439 0
 512 00b0 32E0     		b	.L22
 513              	.L19:
 447:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 448:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 18


 449:Generated_Source\PSoC5/CapSense_CSHL.c ****     else
 450:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 451:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 452:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Update Baseline if lower that noiseThreshold */
 453:Generated_Source\PSoC5/CapSense_CSHL.c ****             if ( (tempRaw <= (uint16) noiseThreshold) || 
 514              		.loc 1 453 0
 515 00b2 FA8A     		ldrh	r2, [r7, #22]
 516 00b4 7B8A     		ldrh	r3, [r7, #18]
 517 00b6 9A42     		cmp	r2, r3
 518 00b8 05D9     		bls	.L23
 519              		.loc 1 453 0 is_stmt 0 discriminator 1
 520 00ba FB8A     		ldrh	r3, [r7, #22]
 521 00bc 132B     		cmp	r3, #19
 522 00be 2BD8     		bhi	.L22
 454:Generated_Source\PSoC5/CapSense_CSHL.c ****                  ((tempRaw < (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD)
 455:Generated_Source\PSoC5/CapSense_CSHL.c ****                    && (widget == 0u)))
 523              		.loc 1 455 0 is_stmt 1
 524 00c0 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 525 00c2 002B     		cmp	r3, #0
 526 00c4 28D1     		bne	.L22
 527              	.L23:
 456:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 457:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE) */
 458:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Make full Baseline 23 bits */
 459:Generated_Source\PSoC5/CapSense_CSHL.c ****                 calc = (uint32) CapSense_sensorBaseline[sensor] << 8u;
 528              		.loc 1 459 0
 529 00c6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 530 00c8 224A     		ldr	r2, .L26+16
 531 00ca 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 532 00ce 1B02     		lsls	r3, r3, #8
 533 00d0 FB60     		str	r3, [r7, #12]
 460:Generated_Source\PSoC5/CapSense_CSHL.c ****                 calc |= (uint32) CapSense_sensorBaselineLow[sensor];
 534              		.loc 1 460 0
 535 00d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 536 00d4 214A     		ldr	r2, .L26+24
 537 00d6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 538 00d8 1A46     		mov	r2, r3
 539 00da FB68     		ldr	r3, [r7, #12]
 540 00dc 1343     		orrs	r3, r3, r2
 541 00de FB60     		str	r3, [r7, #12]
 461:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 462:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Add Raw Data to Baseline */
 463:Generated_Source\PSoC5/CapSense_CSHL.c ****                 calc += filteredRawData;
 542              		.loc 1 463 0
 543 00e0 3B8A     		ldrh	r3, [r7, #16]
 544 00e2 FA68     		ldr	r2, [r7, #12]
 545 00e4 1344     		add	r3, r3, r2
 546 00e6 FB60     		str	r3, [r7, #12]
 464:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 465:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Sub the high Baseline */
 466:Generated_Source\PSoC5/CapSense_CSHL.c ****                 calc -= CapSense_sensorBaseline[sensor];
 547              		.loc 1 466 0
 548 00e8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 549 00ea 1A4A     		ldr	r2, .L26+16
 550 00ec 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 551 00f0 1A46     		mov	r2, r3
 552 00f2 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 19


 553 00f4 9B1A     		subs	r3, r3, r2
 554 00f6 FB60     		str	r3, [r7, #12]
 467:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 468:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Put Baseline and BaselineLow */
 469:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorBaseline[sensor] = ((uint16) (calc >> 8u));
 555              		.loc 1 469 0
 556 00f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 557 00fa FA68     		ldr	r2, [r7, #12]
 558 00fc 120A     		lsrs	r2, r2, #8
 559 00fe 91B2     		uxth	r1, r2
 560 0100 144A     		ldr	r2, .L26+16
 561 0102 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 470:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorBaselineLow[sensor] = ((uint8) calc);
 562              		.loc 1 470 0
 563 0106 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 564 0108 FA68     		ldr	r2, [r7, #12]
 565 010a D1B2     		uxtb	r1, r2
 566 010c 134A     		ldr	r2, .L26+24
 567 010e D154     		strb	r1, [r2, r3]
 471:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 472:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_lowBaselineResetCnt[sensor] = 0u;
 568              		.loc 1 472 0
 569 0110 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 570 0112 114A     		ldr	r2, .L26+20
 571 0114 0021     		movs	r1, #0
 572 0116 D154     		strb	r1, [r2, r3]
 573              	.L22:
 473:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 474:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 475:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE) */
 476:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 477:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 478:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Calculate Signal if possitive difference > noiseThreshold */
 479:Generated_Source\PSoC5/CapSense_CSHL.c ****     if((tempRaw > (uint16) noiseThreshold) && (widget != 0u))
 574              		.loc 1 479 0
 575 0118 FA8A     		ldrh	r2, [r7, #22]
 576 011a 7B8A     		ldrh	r3, [r7, #18]
 577 011c 9A42     		cmp	r2, r3
 578 011e 08D9     		bls	.L24
 579              		.loc 1 479 0 is_stmt 0 discriminator 1
 580 0120 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 581 0122 002B     		cmp	r3, #0
 582 0124 05D0     		beq	.L24
 480:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 481:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_SIGNAL_SIZE == CapSense_SIGNAL_SIZE_UINT8)
 482:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Over flow defence for uint8 */
 483:Generated_Source\PSoC5/CapSense_CSHL.c ****             if (tempRaw > 0xFFu)
 484:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 485:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorSignal[sensor] = 0xFFu;
 486:Generated_Source\PSoC5/CapSense_CSHL.c ****             }    
 487:Generated_Source\PSoC5/CapSense_CSHL.c ****             else 
 488:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 489:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorSignal[sensor] = ((uint8) tempRaw);
 490:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 491:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
 492:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_sensorSignal[sensor] = ((uint16) tempRaw);
 583              		.loc 1 492 0 is_stmt 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 20


 584 0126 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 585 0128 0D49     		ldr	r1, .L26+28
 586 012a FA8A     		ldrh	r2, [r7, #22]	@ movhi
 587 012c 21F81320 		strh	r2, [r1, r3, lsl #1]	@ movhi
 588 0130 04E0     		b	.L25
 589              	.L24:
 493:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif  /* (CapSense_SIGNAL_SIZE == CapSense_SIGNAL_SIZE_UINT8) */
 494:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 495:Generated_Source\PSoC5/CapSense_CSHL.c ****     else
 496:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 497:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Signal is zero */
 498:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_sensorSignal[sensor] = 0u;
 590              		.loc 1 498 0
 591 0132 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 592 0134 0A4A     		ldr	r2, .L26+28
 593 0136 0021     		movs	r1, #0
 594 0138 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 595              	.L25:
 499:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 500:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 501:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 502:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Exclude generic widget */
 503:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 504:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 505:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 596              		.loc 1 505 0
 597 013c 00BF     		nop
 598 013e 1837     		adds	r7, r7, #24
 599              		.cfi_def_cfa_offset 8
 600 0140 BD46     		mov	sp, r7
 601              		.cfi_def_cfa_register 13
 602              		@ sp needed
 603 0142 80BD     		pop	{r7, pc}
 604              	.L27:
 605              		.align	2
 606              	.L26:
 607 0144 00000000 		.word	CapSense_widgetNumber
 608 0148 00000000 		.word	CapSense_noiseThreshold
 609 014c 00000000 		.word	CapSense_sensorRaw
 610 0150 00000000 		.word	CapSense_rawFilterData1
 611 0154 00000000 		.word	CapSense_sensorBaseline
 612 0158 00000000 		.word	CapSense_lowBaselineResetCnt
 613 015c 00000000 		.word	CapSense_sensorBaselineLow
 614 0160 00000000 		.word	CapSense_sensorSignal
 615              		.cfi_endproc
 616              	.LFE4:
 617              		.size	CapSense_UpdateSensorBaseline, .-CapSense_UpdateSensorBaseline
 618              		.section	.text.CapSense_UpdateEnabledBaselines,"ax",%progbits
 619              		.align	2
 620              		.global	CapSense_UpdateEnabledBaselines
 621              		.thumb
 622              		.thumb_func
 623              		.type	CapSense_UpdateEnabledBaselines, %function
 624              	CapSense_UpdateEnabledBaselines:
 625              	.LFB5:
 506:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 507:Generated_Source\PSoC5/CapSense_CSHL.c **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 21


 508:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 509:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_UpdateEnabledBaselines
 510:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 511:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 512:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 513:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Checks CapSense_sensorEnableMask[] array and calls the 
 514:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_UpdateSensorBaseline function to update the baselines 
 515:Generated_Source\PSoC5/CapSense_CSHL.c **** *  for enabled sensors.
 516:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 517:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 518:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 519:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 520:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 521:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 522:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 523:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 524:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
 525:Generated_Source\PSoC5/CapSense_CSHL.c **** *  state.
 526:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 527:Generated_Source\PSoC5/CapSense_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 528:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
 529:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 530:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 531:Generated_Source\PSoC5/CapSense_CSHL.c **** *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 532:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 533:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 534:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 535:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 536:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 537:Generated_Source\PSoC5/CapSense_CSHL.c ****  void CapSense_UpdateEnabledBaselines(void)
 538:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  
 539:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 626              		.loc 1 539 0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 8
 629              		@ frame_needed = 1, uses_anonymous_args = 0
 630 0000 80B5     		push	{r7, lr}
 631              		.cfi_def_cfa_offset 8
 632              		.cfi_offset 7, -8
 633              		.cfi_offset 14, -4
 634 0002 82B0     		sub	sp, sp, #8
 635              		.cfi_def_cfa_offset 16
 636 0004 00AF     		add	r7, sp, #0
 637              		.cfi_def_cfa_register 7
 540:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 541:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos;
 542:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 enMask;
 543:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 544:Generated_Source\PSoC5/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 638              		.loc 1 544 0
 639 0006 0023     		movs	r3, #0
 640 0008 FB71     		strb	r3, [r7, #7]
 641 000a 18E0     		b	.L29
 642              	.L31:
 545:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 546:Generated_Source\PSoC5/CapSense_CSHL.c ****         pos = (i >> 3u);
 643              		.loc 1 546 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 22


 644 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 645 000e DB08     		lsrs	r3, r3, #3
 646 0010 BB71     		strb	r3, [r7, #6]
 547:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = (uint8)(0x01u << (i & 0x07u));
 647              		.loc 1 547 0
 648 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 649 0014 03F00703 		and	r3, r3, #7
 650 0018 0122     		movs	r2, #1
 651 001a 02FA03F3 		lsl	r3, r2, r3
 652 001e 7B71     		strb	r3, [r7, #5]
 548:Generated_Source\PSoC5/CapSense_CSHL.c ****         if((CapSense_sensorEnableMask[pos] & enMask) != 0u)
 653              		.loc 1 548 0
 654 0020 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 655 0022 0A4A     		ldr	r2, .L32
 656 0024 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 657 0026 7B79     		ldrb	r3, [r7, #5]
 658 0028 1340     		ands	r3, r3, r2
 659 002a DBB2     		uxtb	r3, r3
 660 002c 002B     		cmp	r3, #0
 661 002e 03D0     		beq	.L30
 549:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 550:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_UpdateSensorBaseline(i);
 662              		.loc 1 550 0
 663 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 664 0032 1846     		mov	r0, r3
 665 0034 FFF7FEFF 		bl	CapSense_UpdateSensorBaseline
 666              	.L30:
 544:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 667              		.loc 1 544 0 discriminator 2
 668 0038 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 669 003a 0133     		adds	r3, r3, #1
 670 003c FB71     		strb	r3, [r7, #7]
 671              	.L29:
 544:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 672              		.loc 1 544 0 is_stmt 0 discriminator 1
 673 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 674 0040 092B     		cmp	r3, #9
 675 0042 E3D9     		bls	.L31
 551:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 552:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 553:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 676              		.loc 1 553 0 is_stmt 1
 677 0044 00BF     		nop
 678 0046 0837     		adds	r7, r7, #8
 679              		.cfi_def_cfa_offset 8
 680 0048 BD46     		mov	sp, r7
 681              		.cfi_def_cfa_register 13
 682              		@ sp needed
 683 004a 80BD     		pop	{r7, pc}
 684              	.L33:
 685              		.align	2
 686              	.L32:
 687 004c 00000000 		.word	CapSense_sensorEnableMask
 688              		.cfi_endproc
 689              	.LFE5:
 690              		.size	CapSense_UpdateEnabledBaselines, .-CapSense_UpdateEnabledBaselines
 691              		.section	.text.CapSense_CheckIsSensorActive,"ax",%progbits
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 23


 692              		.align	2
 693              		.global	CapSense_CheckIsSensorActive
 694              		.thumb
 695              		.thumb_func
 696              		.type	CapSense_CheckIsSensorActive, %function
 697              	CapSense_CheckIsSensorActive:
 698              	.LFB6:
 554:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 555:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 556:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 557:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_CheckIsSensorActive
 558:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 559:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 560:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 561:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Compares the CapSense_SensorSignal[sensor] array element to finger
 562:Generated_Source\PSoC5/CapSense_CSHL.c **** *  threshold of widget it belongs to. The hysteresis and debounce are taken into 
 563:Generated_Source\PSoC5/CapSense_CSHL.c **** *  account. The hysteresis is added or subtracted from the finger threshold 
 564:Generated_Source\PSoC5/CapSense_CSHL.c **** *  based on whether the sensor is currently active. 
 565:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If the sensor is active, the threshold is lowered by the hysteresis amount.
 566:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If the sensor is inactive, the threshold is raised by the hysteresis amount.
 567:Generated_Source\PSoC5/CapSense_CSHL.c **** *  The debounce counter added to the sensor active transition.
 568:Generated_Source\PSoC5/CapSense_CSHL.c **** *  This function updates CapSense_SensorOnMask[] array element.
 569:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 570:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 571:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensor:  Sensor number.
 572:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 573:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 574:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Returns sensor state 1 if active, 0 if not active.
 575:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 576:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 577:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorSignal[]      - used to store diffence between 
 578:Generated_Source\PSoC5/CapSense_CSHL.c **** *  current value of raw data and previous value of baseline.
 579:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_debounceCounter[]   - used to store current debounce 
 580:Generated_Source\PSoC5/CapSense_CSHL.c **** *  counter of sensor. Widget which has this parameter are buttons, matrix 
 581:Generated_Source\PSoC5/CapSense_CSHL.c **** *  buttons, proximity, guard. All other widgets haven't debounce parameter
 582:Generated_Source\PSoC5/CapSense_CSHL.c **** *  and use the last element of this array with value 0 (it means no debounce).
 583:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorOnMask[] - used to store sensors on/off state.
 584:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorOnMask[0] contains the masked bits for sensors 
 585:Generated_Source\PSoC5/CapSense_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 586:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
 587:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 588:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 - sensor is inactive.
 589:Generated_Source\PSoC5/CapSense_CSHL.c **** *  1 - sensor is active.
 590:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 591:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 592:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 593:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 594:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 595:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_CheckIsSensorActive(uint8 sensor)
 596:Generated_Source\PSoC5/CapSense_CSHL.c ****                                   
 597:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 699              		.loc 1 597 0
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 24
 702              		@ frame_needed = 1, uses_anonymous_args = 0
 703              		@ link register save eliminated.
 704 0000 80B4     		push	{r7}
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 24


 705              		.cfi_def_cfa_offset 4
 706              		.cfi_offset 7, -4
 707 0002 87B0     		sub	sp, sp, #28
 708              		.cfi_def_cfa_offset 32
 709 0004 00AF     		add	r7, sp, #0
 710              		.cfi_def_cfa_register 7
 711 0006 0346     		mov	r3, r0
 712 0008 FB71     		strb	r3, [r7, #7]
 598:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 debounceIndex;
 599:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Get On/Off mask */
 600:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos = (sensor >> 3u);
 713              		.loc 1 600 0
 714 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 715 000c DB08     		lsrs	r3, r3, #3
 716 000e FB75     		strb	r3, [r7, #23]
 601:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 onMask = 0x01u << (sensor & 0x07u);
 717              		.loc 1 601 0
 718 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 719 0012 03F00703 		and	r3, r3, #7
 720 0016 0122     		movs	r2, #1
 721 0018 02FA03F3 		lsl	r3, r2, r3
 722 001c BB75     		strb	r3, [r7, #22]
 602:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Prepare to find debounce counter index */
 603:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 widget = CapSense_widgetNumber[sensor];
 723              		.loc 1 603 0
 724 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 725 0020 344A     		ldr	r2, .L43
 726 0022 D35C     		ldrb	r3, [r2, r3]
 727 0024 7B75     		strb	r3, [r7, #21]
 604:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 fingerThreshold = CapSense_fingerThreshold[widget];
 728              		.loc 1 604 0
 729 0026 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 730 0028 334A     		ldr	r2, .L43+4
 731 002a 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 732 002e 7B82     		strh	r3, [r7, #18]	@ movhi
 605:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 hysteresis = CapSense_hysteresis[widget];
 733              		.loc 1 605 0
 734 0030 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 735 0032 324A     		ldr	r2, .L43+8
 736 0034 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 737 0038 3B82     		strh	r3, [r7, #16]	@ movhi
 606:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 debounce = CapSense_debounce[widget];
 738              		.loc 1 606 0
 739 003a 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 740 003c 304A     		ldr	r2, .L43+12
 741 003e D35C     		ldrb	r3, [r2, r3]
 742 0040 FB73     		strb	r3, [r7, #15]
 607:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 608:Generated_Source\PSoC5/CapSense_CSHL.c ****     debounceIndex = widget;
 743              		.loc 1 608 0
 744 0042 7B7D     		ldrb	r3, [r7, #21]
 745 0044 BB73     		strb	r3, [r7, #14]
 609:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 610:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 611:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Was on */
 612:Generated_Source\PSoC5/CapSense_CSHL.c ****     if (0u != (CapSense_sensorOnMask[pos] & onMask))
 746              		.loc 1 612 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 25


 747 0046 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 748 0048 2E4A     		ldr	r2, .L43+16
 749 004a D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 750 004c BB7D     		ldrb	r3, [r7, #22]
 751 004e 1340     		ands	r3, r3, r2
 752 0050 DBB2     		uxtb	r3, r3
 753 0052 002B     		cmp	r3, #0
 754 0054 19D0     		beq	.L35
 613:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 614:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Hysteresis minus */
 615:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (CapSense_sensorSignal[sensor] < (fingerThreshold - hysteresis))
 755              		.loc 1 615 0
 756 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 757 0058 2B4A     		ldr	r2, .L43+20
 758 005a 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 759 005e 1946     		mov	r1, r3
 760 0060 7A8A     		ldrh	r2, [r7, #18]
 761 0062 3B8A     		ldrh	r3, [r7, #16]
 762 0064 D31A     		subs	r3, r2, r3
 763 0066 9942     		cmp	r1, r3
 764 0068 33DA     		bge	.L37
 616:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 617:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_sensorOnMask[pos] &= (uint8)~onMask;
 765              		.loc 1 617 0
 766 006a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 767 006c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 768 006e 2549     		ldr	r1, .L43+16
 769 0070 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 770 0072 BA7D     		ldrb	r2, [r7, #22]
 771 0074 D243     		mvns	r2, r2
 772 0076 D2B2     		uxtb	r2, r2
 773 0078 0A40     		ands	r2, r2, r1
 774 007a D1B2     		uxtb	r1, r2
 775 007c 214A     		ldr	r2, .L43+16
 776 007e D154     		strb	r1, [r2, r3]
 618:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_debounceCounter[debounceIndex] = debounce; 
 777              		.loc 1 618 0
 778 0080 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 779 0082 2249     		ldr	r1, .L43+24
 780 0084 FA7B     		ldrb	r2, [r7, #15]
 781 0086 CA54     		strb	r2, [r1, r3]
 782 0088 23E0     		b	.L37
 783              	.L35:
 619:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 620:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 621:Generated_Source\PSoC5/CapSense_CSHL.c ****     else    /* Was off */
 622:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 623:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Hysteresis plus */
 624:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (CapSense_sensorSignal[sensor] > (fingerThreshold + hysteresis))
 784              		.loc 1 624 0
 785 008a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 786 008c 1E4A     		ldr	r2, .L43+20
 787 008e 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 788 0092 1946     		mov	r1, r3
 789 0094 7A8A     		ldrh	r2, [r7, #18]
 790 0096 3B8A     		ldrh	r3, [r7, #16]
 791 0098 1344     		add	r3, r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 26


 792 009a 9942     		cmp	r1, r3
 793 009c 15DD     		ble	.L38
 625:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 626:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Sensor active, decrement debounce counter */
 627:Generated_Source\PSoC5/CapSense_CSHL.c ****             if (CapSense_debounceCounter[debounceIndex] <= 1u)
 794              		.loc 1 627 0
 795 009e BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 796 00a0 1A4A     		ldr	r2, .L43+24
 797 00a2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 798 00a4 012B     		cmp	r3, #1
 799 00a6 08D8     		bhi	.L39
 628:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 629:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorOnMask[pos] |= onMask; 
 800              		.loc 1 629 0
 801 00a8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 802 00aa FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 803 00ac 1549     		ldr	r1, .L43+16
 804 00ae 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 805 00b0 BA7D     		ldrb	r2, [r7, #22]
 806 00b2 0A43     		orrs	r2, r2, r1
 807 00b4 D1B2     		uxtb	r1, r2
 808 00b6 134A     		ldr	r2, .L43+16
 809 00b8 D154     		strb	r1, [r2, r3]
 810              	.L39:
 630:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 631:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_debounceCounter[debounceIndex]--;
 811              		.loc 1 631 0
 812 00ba BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 813 00bc 134A     		ldr	r2, .L43+24
 814 00be D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 815 00c0 013A     		subs	r2, r2, #1
 816 00c2 D1B2     		uxtb	r1, r2
 817 00c4 114A     		ldr	r2, .L43+24
 818 00c6 D154     		strb	r1, [r2, r3]
 819 00c8 03E0     		b	.L37
 820              	.L38:
 632:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 633:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
 634:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 635:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Sensor inactive - reset Debounce counter */
 636:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_debounceCounter[debounceIndex] = debounce;
 821              		.loc 1 636 0
 822 00ca BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 823 00cc 0F49     		ldr	r1, .L43+24
 824 00ce FA7B     		ldrb	r2, [r7, #15]
 825 00d0 CA54     		strb	r2, [r1, r3]
 826              	.L37:
 637:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 638:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 639:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 640:Generated_Source\PSoC5/CapSense_CSHL.c ****     return (((CapSense_sensorOnMask[pos] & onMask) != 0u) ? 1u : 0u);
 827              		.loc 1 640 0
 828 00d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 829 00d4 0B4A     		ldr	r2, .L43+16
 830 00d6 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 831 00d8 BB7D     		ldrb	r3, [r7, #22]
 832 00da 1340     		ands	r3, r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 27


 833 00dc DBB2     		uxtb	r3, r3
 834 00de 002B     		cmp	r3, #0
 835 00e0 01D0     		beq	.L40
 836              		.loc 1 640 0 is_stmt 0 discriminator 1
 837 00e2 0123     		movs	r3, #1
 838 00e4 00E0     		b	.L41
 839              	.L40:
 840              		.loc 1 640 0 discriminator 2
 841 00e6 0023     		movs	r3, #0
 842              	.L41:
 641:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 843              		.loc 1 641 0 is_stmt 1 discriminator 4
 844 00e8 1846     		mov	r0, r3
 845 00ea 1C37     		adds	r7, r7, #28
 846              		.cfi_def_cfa_offset 4
 847 00ec BD46     		mov	sp, r7
 848              		.cfi_def_cfa_register 13
 849              		@ sp needed
 850 00ee 80BC     		pop	{r7}
 851              		.cfi_restore 7
 852              		.cfi_def_cfa_offset 0
 853 00f0 7047     		bx	lr
 854              	.L44:
 855 00f2 00BF     		.align	2
 856              	.L43:
 857 00f4 00000000 		.word	CapSense_widgetNumber
 858 00f8 00000000 		.word	CapSense_fingerThreshold
 859 00fc 00000000 		.word	CapSense_hysteresis
 860 0100 00000000 		.word	CapSense_debounce
 861 0104 00000000 		.word	CapSense_sensorOnMask
 862 0108 00000000 		.word	CapSense_sensorSignal
 863 010c 00000000 		.word	CapSense_debounceCounter
 864              		.cfi_endproc
 865              	.LFE6:
 866              		.size	CapSense_CheckIsSensorActive, .-CapSense_CheckIsSensorActive
 867              		.section	.text.CapSense_CheckIsWidgetActive,"ax",%progbits
 868              		.align	2
 869              		.global	CapSense_CheckIsWidgetActive
 870              		.thumb
 871              		.thumb_func
 872              		.type	CapSense_CheckIsWidgetActive, %function
 873              	CapSense_CheckIsWidgetActive:
 874              	.LFB7:
 642:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 643:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 644:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 645:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_CheckIsWidgetActive
 646:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 647:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 648:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 649:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Use function CapSense_CheckIsSensorActive() to update 
 650:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorOnMask[] for all sensors within the widget.
 651:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If one of sensors within widget is active the function return that widget is 
 652:Generated_Source\PSoC5/CapSense_CSHL.c **** *  active.
 653:Generated_Source\PSoC5/CapSense_CSHL.c **** *  The touch pad and matrix buttons widgets need to have active sensor within 
 654:Generated_Source\PSoC5/CapSense_CSHL.c **** *  col and row to return widget active status.
 655:Generated_Source\PSoC5/CapSense_CSHL.c **** *
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 28


 656:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 657:Generated_Source\PSoC5/CapSense_CSHL.c **** *  widget:  widget number.
 658:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 659:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 660:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Returns widget sensor state 1 if one or more sensors within widget is/are 
 661:Generated_Source\PSoC5/CapSense_CSHL.c **** *  active, 0 if all sensors within widget are inactive.
 662:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 663:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 664:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 665:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 666:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 667:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_CheckIsWidgetActive(uint8 widget)
 668:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  
 669:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 875              		.loc 1 669 0
 876              		.cfi_startproc
 877              		@ args = 0, pretend = 0, frame = 16
 878              		@ frame_needed = 1, uses_anonymous_args = 0
 879 0000 80B5     		push	{r7, lr}
 880              		.cfi_def_cfa_offset 8
 881              		.cfi_offset 7, -8
 882              		.cfi_offset 14, -4
 883 0002 84B0     		sub	sp, sp, #16
 884              		.cfi_def_cfa_offset 24
 885 0004 00AF     		add	r7, sp, #0
 886              		.cfi_def_cfa_register 7
 887 0006 0346     		mov	r3, r0
 888 0008 FB71     		strb	r3, [r7, #7]
 670:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 rawIndex = CapSense_rawDataIndex[widget];
 889              		.loc 1 670 0
 890 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 891 000c 0F4A     		ldr	r2, .L49
 892 000e D35C     		ldrb	r3, [r2, r3]
 893 0010 FB73     		strb	r3, [r7, #15]
 671:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 894              		.loc 1 671 0
 895 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 896 0014 0E4A     		ldr	r2, .L49+4
 897 0016 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 898 0018 FB7B     		ldrb	r3, [r7, #15]
 899 001a 1344     		add	r3, r3, r2
 900 001c 7B73     		strb	r3, [r7, #13]
 672:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 state = 0u;
 901              		.loc 1 672 0
 902 001e 0023     		movs	r3, #0
 903 0020 BB73     		strb	r3, [r7, #14]
 904              	.L47:
 673:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 674:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Check all sensors of the widget */
 675:Generated_Source\PSoC5/CapSense_CSHL.c ****     do
 676:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 677:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(CapSense_CheckIsSensorActive(rawIndex) != 0u)
 905              		.loc 1 677 0
 906 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 907 0024 1846     		mov	r0, r3
 908 0026 FFF7FEFF 		bl	CapSense_CheckIsSensorActive
 909 002a 0346     		mov	r3, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 29


 910 002c 002B     		cmp	r3, #0
 911 002e 01D0     		beq	.L46
 678:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 679:Generated_Source\PSoC5/CapSense_CSHL.c ****             state = CapSense_SENSOR_1_IS_ACTIVE;
 912              		.loc 1 679 0
 913 0030 0123     		movs	r3, #1
 914 0032 BB73     		strb	r3, [r7, #14]
 915              	.L46:
 680:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 681:Generated_Source\PSoC5/CapSense_CSHL.c ****         rawIndex++;
 916              		.loc 1 681 0
 917 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 918 0036 0133     		adds	r3, r3, #1
 919 0038 FB73     		strb	r3, [r7, #15]
 682:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 683:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(rawIndex < numberOfSensors);
 920              		.loc 1 683 0
 921 003a FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 922 003c 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 923 003e 9A42     		cmp	r2, r3
 924 0040 EFD3     		bcc	.L47
 684:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 685:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 686:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 687:Generated_Source\PSoC5/CapSense_CSHL.c ****     return (state);
 925              		.loc 1 687 0
 926 0042 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 688:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 927              		.loc 1 688 0
 928 0044 1846     		mov	r0, r3
 929 0046 1037     		adds	r7, r7, #16
 930              		.cfi_def_cfa_offset 8
 931 0048 BD46     		mov	sp, r7
 932              		.cfi_def_cfa_register 13
 933              		@ sp needed
 934 004a 80BD     		pop	{r7, pc}
 935              	.L50:
 936              		.align	2
 937              	.L49:
 938 004c 00000000 		.word	CapSense_rawDataIndex
 939 0050 00000000 		.word	CapSense_numberOfSensors
 940              		.cfi_endproc
 941              	.LFE7:
 942              		.size	CapSense_CheckIsWidgetActive, .-CapSense_CheckIsWidgetActive
 943              		.section	.text.CapSense_CheckIsAnyWidgetActive,"ax",%progbits
 944              		.align	2
 945              		.global	CapSense_CheckIsAnyWidgetActive
 946              		.thumb
 947              		.thumb_func
 948              		.type	CapSense_CheckIsAnyWidgetActive, %function
 949              	CapSense_CheckIsAnyWidgetActive:
 950              	.LFB8:
 689:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 690:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 691:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 692:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_CheckIsAnyWidgetActive
 693:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 30


 694:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 695:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 696:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Compares all sensors of the CapSense_signal[] array to their finger 
 697:Generated_Source\PSoC5/CapSense_CSHL.c **** *  threshold. Calls CapSense_CheckIsWidgetActive() for each widget so 
 698:Generated_Source\PSoC5/CapSense_CSHL.c **** *  the CapSense_SensorOnMask[] array is up to date after calling this 
 699:Generated_Source\PSoC5/CapSense_CSHL.c **** *  function.
 700:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 701:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 702:Generated_Source\PSoC5/CapSense_CSHL.c **** *  widget:  widget number.
 703:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 704:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 705:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Returns 1 if any widget is active, 0 none of widgets are active.
 706:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 707:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 708:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 709:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 710:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 711:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_CheckIsAnyWidgetActive(void)
 712:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  
 713:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 951              		.loc 1 713 0
 952              		.cfi_startproc
 953              		@ args = 0, pretend = 0, frame = 8
 954              		@ frame_needed = 1, uses_anonymous_args = 0
 955 0000 80B5     		push	{r7, lr}
 956              		.cfi_def_cfa_offset 8
 957              		.cfi_offset 7, -8
 958              		.cfi_offset 14, -4
 959 0002 82B0     		sub	sp, sp, #8
 960              		.cfi_def_cfa_offset 16
 961 0004 00AF     		add	r7, sp, #0
 962              		.cfi_def_cfa_register 7
 714:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 715:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 state = 0u;
 963              		.loc 1 715 0
 964 0006 0023     		movs	r3, #0
 965 0008 BB71     		strb	r3, [r7, #6]
 716:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 717:Generated_Source\PSoC5/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_WIDGET_COUNT; i++)
 966              		.loc 1 717 0
 967 000a 0023     		movs	r3, #0
 968 000c FB71     		strb	r3, [r7, #7]
 969 000e 0BE0     		b	.L52
 970              	.L54:
 718:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 719:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (CapSense_CheckIsWidgetActive(i) != 0u)
 971              		.loc 1 719 0
 972 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 973 0012 1846     		mov	r0, r3
 974 0014 FFF7FEFF 		bl	CapSense_CheckIsWidgetActive
 975 0018 0346     		mov	r3, r0
 976 001a 002B     		cmp	r3, #0
 977 001c 01D0     		beq	.L53
 720:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 721:Generated_Source\PSoC5/CapSense_CSHL.c ****             state = CapSense_WIDGET_IS_ACTIVE;
 978              		.loc 1 721 0
 979 001e 0123     		movs	r3, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 31


 980 0020 BB71     		strb	r3, [r7, #6]
 981              	.L53:
 717:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 982              		.loc 1 717 0 discriminator 2
 983 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 984 0024 0133     		adds	r3, r3, #1
 985 0026 FB71     		strb	r3, [r7, #7]
 986              	.L52:
 717:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 987              		.loc 1 717 0 is_stmt 0 discriminator 1
 988 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 989 002a 092B     		cmp	r3, #9
 990 002c F0D9     		bls	.L54
 722:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 723:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 724:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 725:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 726:Generated_Source\PSoC5/CapSense_CSHL.c ****     return (state);
 991              		.loc 1 726 0 is_stmt 1
 992 002e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 727:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 993              		.loc 1 727 0
 994 0030 1846     		mov	r0, r3
 995 0032 0837     		adds	r7, r7, #8
 996              		.cfi_def_cfa_offset 8
 997 0034 BD46     		mov	sp, r7
 998              		.cfi_def_cfa_register 13
 999              		@ sp needed
 1000 0036 80BD     		pop	{r7, pc}
 1001              		.cfi_endproc
 1002              	.LFE8:
 1003              		.size	CapSense_CheckIsAnyWidgetActive, .-CapSense_CheckIsAnyWidgetActive
 1004              		.section	.text.CapSense_EnableWidget,"ax",%progbits
 1005              		.align	2
 1006              		.global	CapSense_EnableWidget
 1007              		.thumb
 1008              		.thumb_func
 1009              		.type	CapSense_EnableWidget, %function
 1010              	CapSense_EnableWidget:
 1011              	.LFB9:
 728:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 729:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 730:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 731:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_EnableWidget
 732:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 733:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 734:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 735:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Enable all widget elements (sensors) to scanning process.
 736:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 737:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 738:Generated_Source\PSoC5/CapSense_CSHL.c **** *  widget:  widget number.
 739:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 740:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 741:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 742:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 743:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 744:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 32


 745:Generated_Source\PSoC5/CapSense_CSHL.c **** *  state.
 746:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 747:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 748:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
 749:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 750:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 751:Generated_Source\PSoC5/CapSense_CSHL.c **** *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 752:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 753:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 754:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 755:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 756:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 757:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_EnableWidget(uint8 widget)
 758:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    
 759:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 1012              		.loc 1 759 0
 1013              		.cfi_startproc
 1014              		@ args = 0, pretend = 0, frame = 16
 1015              		@ frame_needed = 1, uses_anonymous_args = 0
 1016              		@ link register save eliminated.
 1017 0000 80B4     		push	{r7}
 1018              		.cfi_def_cfa_offset 4
 1019              		.cfi_offset 7, -4
 1020 0002 85B0     		sub	sp, sp, #20
 1021              		.cfi_def_cfa_offset 24
 1022 0004 00AF     		add	r7, sp, #0
 1023              		.cfi_def_cfa_register 7
 1024 0006 0346     		mov	r3, r0
 1025 0008 FB71     		strb	r3, [r7, #7]
 760:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos;
 761:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 enMask;
 762:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 rawIndex = CapSense_rawDataIndex[widget];
 1026              		.loc 1 762 0
 1027 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1028 000c 134A     		ldr	r2, .L58
 1029 000e D35C     		ldrb	r3, [r2, r3]
 1030 0010 FB73     		strb	r3, [r7, #15]
 763:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 1031              		.loc 1 763 0
 1032 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1033 0014 124A     		ldr	r2, .L58+4
 1034 0016 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1035 0018 FB7B     		ldrb	r3, [r7, #15]
 1036 001a 1344     		add	r3, r3, r2
 1037 001c BB73     		strb	r3, [r7, #14]
 1038              	.L57:
 764:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 765:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Enable all sensors of the widget */
 766:Generated_Source\PSoC5/CapSense_CSHL.c ****     do
 767:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 768:Generated_Source\PSoC5/CapSense_CSHL.c ****         pos = (rawIndex >> 3u);
 1039              		.loc 1 768 0 discriminator 1
 1040 001e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1041 0020 DB08     		lsrs	r3, r3, #3
 1042 0022 7B73     		strb	r3, [r7, #13]
 769:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = 0x01u << (rawIndex & 0x07u);
 1043              		.loc 1 769 0 discriminator 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 33


 1044 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1045 0026 03F00703 		and	r3, r3, #7
 1046 002a 0122     		movs	r2, #1
 1047 002c 02FA03F3 		lsl	r3, r2, r3
 1048 0030 3B73     		strb	r3, [r7, #12]
 770:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 771:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_sensorEnableMask[pos] |= enMask;
 1049              		.loc 1 771 0 discriminator 1
 1050 0032 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1051 0034 7A7B     		ldrb	r2, [r7, #13]	@ zero_extendqisi2
 1052 0036 0B49     		ldr	r1, .L58+8
 1053 0038 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 1054 003a 3A7B     		ldrb	r2, [r7, #12]
 1055 003c 0A43     		orrs	r2, r2, r1
 1056 003e D1B2     		uxtb	r1, r2
 1057 0040 084A     		ldr	r2, .L58+8
 1058 0042 D154     		strb	r1, [r2, r3]
 772:Generated_Source\PSoC5/CapSense_CSHL.c ****         rawIndex++;
 1059              		.loc 1 772 0 discriminator 1
 1060 0044 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1061 0046 0133     		adds	r3, r3, #1
 1062 0048 FB73     		strb	r3, [r7, #15]
 773:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 774:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(rawIndex < numberOfSensors);
 1063              		.loc 1 774 0 discriminator 1
 1064 004a FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1065 004c BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1066 004e 9A42     		cmp	r2, r3
 1067 0050 E5D3     		bcc	.L57
 775:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 776:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 777:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 1068              		.loc 1 777 0
 1069 0052 00BF     		nop
 1070 0054 1437     		adds	r7, r7, #20
 1071              		.cfi_def_cfa_offset 4
 1072 0056 BD46     		mov	sp, r7
 1073              		.cfi_def_cfa_register 13
 1074              		@ sp needed
 1075 0058 80BC     		pop	{r7}
 1076              		.cfi_restore 7
 1077              		.cfi_def_cfa_offset 0
 1078 005a 7047     		bx	lr
 1079              	.L59:
 1080              		.align	2
 1081              	.L58:
 1082 005c 00000000 		.word	CapSense_rawDataIndex
 1083 0060 00000000 		.word	CapSense_numberOfSensors
 1084 0064 00000000 		.word	CapSense_sensorEnableMask
 1085              		.cfi_endproc
 1086              	.LFE9:
 1087              		.size	CapSense_EnableWidget, .-CapSense_EnableWidget
 1088              		.section	.text.CapSense_DisableWidget,"ax",%progbits
 1089              		.align	2
 1090              		.global	CapSense_DisableWidget
 1091              		.thumb
 1092              		.thumb_func
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 34


 1093              		.type	CapSense_DisableWidget, %function
 1094              	CapSense_DisableWidget:
 1095              	.LFB10:
 778:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 779:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 780:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 781:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_DisableWidget
 782:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 783:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 784:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 785:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Disable all widget elements (sensors) from scanning process.
 786:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 787:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 788:Generated_Source\PSoC5/CapSense_CSHL.c **** *  widget:  widget number.
 789:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 790:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 791:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 792:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 793:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 794:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
 795:Generated_Source\PSoC5/CapSense_CSHL.c **** *  state.
 796:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 797:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 798:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
 799:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 800:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 801:Generated_Source\PSoC5/CapSense_CSHL.c **** *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 802:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 803:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 804:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 805:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 806:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 807:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_DisableWidget(uint8 widget)
 808:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     
 809:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 1096              		.loc 1 809 0
 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 16
 1099              		@ frame_needed = 1, uses_anonymous_args = 0
 1100              		@ link register save eliminated.
 1101 0000 80B4     		push	{r7}
 1102              		.cfi_def_cfa_offset 4
 1103              		.cfi_offset 7, -4
 1104 0002 85B0     		sub	sp, sp, #20
 1105              		.cfi_def_cfa_offset 24
 1106 0004 00AF     		add	r7, sp, #0
 1107              		.cfi_def_cfa_register 7
 1108 0006 0346     		mov	r3, r0
 1109 0008 FB71     		strb	r3, [r7, #7]
 810:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos;
 811:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 enMask;
 812:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 rawIndex = CapSense_rawDataIndex[widget];
 1110              		.loc 1 812 0
 1111 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1112 000c 144A     		ldr	r2, .L62
 1113 000e D35C     		ldrb	r3, [r2, r3]
 1114 0010 FB73     		strb	r3, [r7, #15]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 35


 813:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 1115              		.loc 1 813 0
 1116 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1117 0014 134A     		ldr	r2, .L62+4
 1118 0016 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1119 0018 FB7B     		ldrb	r3, [r7, #15]
 1120 001a 1344     		add	r3, r3, r2
 1121 001c BB73     		strb	r3, [r7, #14]
 1122              	.L61:
 814:Generated_Source\PSoC5/CapSense_CSHL.c ****    
 815:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Disable all sensors of the widget */
 816:Generated_Source\PSoC5/CapSense_CSHL.c ****     do
 817:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 818:Generated_Source\PSoC5/CapSense_CSHL.c ****         pos = (rawIndex >> 3u);
 1123              		.loc 1 818 0 discriminator 1
 1124 001e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1125 0020 DB08     		lsrs	r3, r3, #3
 1126 0022 7B73     		strb	r3, [r7, #13]
 819:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = 0x01u << (rawIndex & 0x07u);
 1127              		.loc 1 819 0 discriminator 1
 1128 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1129 0026 03F00703 		and	r3, r3, #7
 1130 002a 0122     		movs	r2, #1
 1131 002c 02FA03F3 		lsl	r3, r2, r3
 1132 0030 3B73     		strb	r3, [r7, #12]
 820:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 821:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_sensorEnableMask[pos] &= (uint8)~enMask;
 1133              		.loc 1 821 0 discriminator 1
 1134 0032 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1135 0034 7A7B     		ldrb	r2, [r7, #13]	@ zero_extendqisi2
 1136 0036 0C49     		ldr	r1, .L62+8
 1137 0038 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 1138 003a 3A7B     		ldrb	r2, [r7, #12]
 1139 003c D243     		mvns	r2, r2
 1140 003e D2B2     		uxtb	r2, r2
 1141 0040 0A40     		ands	r2, r2, r1
 1142 0042 D1B2     		uxtb	r1, r2
 1143 0044 084A     		ldr	r2, .L62+8
 1144 0046 D154     		strb	r1, [r2, r3]
 822:Generated_Source\PSoC5/CapSense_CSHL.c ****         rawIndex++;
 1145              		.loc 1 822 0 discriminator 1
 1146 0048 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1147 004a 0133     		adds	r3, r3, #1
 1148 004c FB73     		strb	r3, [r7, #15]
 823:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 824:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(rawIndex < numberOfSensors);
 1149              		.loc 1 824 0 discriminator 1
 1150 004e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1151 0050 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1152 0052 9A42     		cmp	r2, r3
 1153 0054 E3D3     		bcc	.L61
 825:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 826:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 827:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 1154              		.loc 1 827 0
 1155 0056 00BF     		nop
 1156 0058 1437     		adds	r7, r7, #20
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 36


 1157              		.cfi_def_cfa_offset 4
 1158 005a BD46     		mov	sp, r7
 1159              		.cfi_def_cfa_register 13
 1160              		@ sp needed
 1161 005c 80BC     		pop	{r7}
 1162              		.cfi_restore 7
 1163              		.cfi_def_cfa_offset 0
 1164 005e 7047     		bx	lr
 1165              	.L63:
 1166              		.align	2
 1167              	.L62:
 1168 0060 00000000 		.word	CapSense_rawDataIndex
 1169 0064 00000000 		.word	CapSense_numberOfSensors
 1170 0068 00000000 		.word	CapSense_sensorEnableMask
 1171              		.cfi_endproc
 1172              	.LFE10:
 1173              		.size	CapSense_DisableWidget, .-CapSense_DisableWidget
 1174              		.section	.text.CapSense_IIR4Filter,"ax",%progbits
 1175              		.align	2
 1176              		.global	CapSense_IIR4Filter
 1177              		.thumb
 1178              		.thumb_func
 1179              		.type	CapSense_IIR4Filter, %function
 1180              	CapSense_IIR4Filter:
 1181              	.LFB11:
 828:Generated_Source\PSoC5/CapSense_CSHL.c **** #if(CapSense_TOTAL_CENTROIDS_COUNT)
 829:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
 830:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_FindMaximum
 831:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
 832:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
 833:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
 834:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Finds index of maximum element within defined centroid. Checks 
 835:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  CapSense_SensorSignal[] within defined cenrtoid and 
 836:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  returns index of maximum element. The values below finger threshold are 
 837:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  ignored.
 838:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The centrod defines by offset of first element and number of elements - count.
 839:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The diplexed centroid requires at least consecutive two elements above
 840:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  FingerThreshold to find index of maximum element.
 841:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
 842:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
 843:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  offset:  Start index of cetroid in CapSense_sensorSignal[] array.
 844:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  count:   number of elements within centroid.
 845:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  fingerThreshold:  Finger threshould.
 846:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  diplex:   pointer to diplex table.
 847:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
 848:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
 849:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns index of maximum element within defined centroid.
 850:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If index of maximum element doesn't find the 0xFF returns.
 851:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
 852:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
 853:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_IS_DIPLEX_SLIDER)
 854:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 CapSense_FindMaximum(uint8 offset, uint8 count, uint16 fingerThreshold, const uint8 C
 855:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                       
 856:Generated_Source\PSoC5/CapSense_CSHL.c ****     #else 
 857:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 CapSense_FindMaximum(uint8 offset, uint8 count, uint16 fingerThreshold)
 858:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                       
 859:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif /* (CapSense_IS_DIPLEX_SLIDER) */
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 37


 860:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 861:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 i;
 862:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)        
 863:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 curPos = 0u;
 864:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* No centroid at the Start */
 865:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 curCntrdSize = 0u;
 866:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 curCtrdStartPos = 0xFFu;
 867:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* The biggset centroid is zero */
 868:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 biggestCtrdSize = 0u;
 869:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 biggestCtrdStartPos = 0u;
 870:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
 871:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maximum = 0xFFu;
 872:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 temp = 0u;
 873:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 *startOfSlider = &CapSense_sensorSignal[offset]; 
 874:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 875:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)        
 876:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(diplex != 0u)
 877:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 878:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Initialize */
 879:Generated_Source\PSoC5/CapSense_CSHL.c ****                 i = 0u;
 880:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
 881:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Make slider x2 as Diplexed */
 882:Generated_Source\PSoC5/CapSense_CSHL.c ****                 count <<= 1u;
 883:Generated_Source\PSoC5/CapSense_CSHL.c ****                 while(1u)
 884:Generated_Source\PSoC5/CapSense_CSHL.c ****                 { 
 885:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (startOfSlider[curPos] > 0u)    /* Looking for centroids */
 886:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
 887:Generated_Source\PSoC5/CapSense_CSHL.c ****                         if (curCtrdStartPos == 0xFFu)
 888:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
 889:Generated_Source\PSoC5/CapSense_CSHL.c ****                             /* Start of centroid */
 890:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCtrdStartPos = i;
 891:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCntrdSize++;
 892:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
 893:Generated_Source\PSoC5/CapSense_CSHL.c ****                         else
 894:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
 895:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCntrdSize++;
 896:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
 897:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
 898:Generated_Source\PSoC5/CapSense_CSHL.c ****                     else   /* Select the bigest and indicate zero start */
 899:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {          
 900:Generated_Source\PSoC5/CapSense_CSHL.c ****                         if(curCntrdSize > 0u)
 901:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
 902:Generated_Source\PSoC5/CapSense_CSHL.c ****                             /* We are in the end of current */
 903:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if(curCntrdSize > biggestCtrdSize)
 904:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
 905:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 biggestCtrdSize = curCntrdSize;
 906:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 biggestCtrdStartPos = curCtrdStartPos;
 907:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
 908:Generated_Source\PSoC5/CapSense_CSHL.c ****                             
 909:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCntrdSize = 0u;
 910:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCtrdStartPos = 0xFFu;
 911:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
 912:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
 913:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
 914:Generated_Source\PSoC5/CapSense_CSHL.c ****                     i++; 
 915:Generated_Source\PSoC5/CapSense_CSHL.c ****                     curPos = diplex[i];
 916:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if(i == count)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 38


 917:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
 918:Generated_Source\PSoC5/CapSense_CSHL.c ****                         break;
 919:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }            
 920:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
 921:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
 922:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Find the biggest centroid if two are the same size, last one wins
 923:Generated_Source\PSoC5/CapSense_CSHL.c ****                        We are in the end of current */
 924:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (curCntrdSize >= biggestCtrdSize) 
 925:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
 926:Generated_Source\PSoC5/CapSense_CSHL.c ****                     biggestCtrdSize = curCntrdSize;
 927:Generated_Source\PSoC5/CapSense_CSHL.c ****                     biggestCtrdStartPos = curCtrdStartPos;
 928:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
 929:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 930:Generated_Source\PSoC5/CapSense_CSHL.c ****             else
 931:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 932:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Without diplexing */ 
 933:Generated_Source\PSoC5/CapSense_CSHL.c ****                 biggestCtrdSize = count;
 934:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 935:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
 936:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 937:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Check centroid size */
 938:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (CapSense_IS_NON_DIPLEX_SLIDER)
 939:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if((biggestCtrdSize >= 2u) || ((biggestCtrdSize == 1u) && (diplex == 0u)))
 940:Generated_Source\PSoC5/CapSense_CSHL.c ****             #else                    
 941:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if(biggestCtrdSize >= 2u)
 942:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (CapSense_IS_NON_DIPLEX_SLIDER) */
 943:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
 944:Generated_Source\PSoC5/CapSense_CSHL.c ****                     for (i = biggestCtrdStartPos; i < (biggestCtrdStartPos + biggestCtrdSize); i++)
 945:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
 946:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER)
 947:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (diplex == 0u)
 948:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
 949:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 curPos = i;
 950:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
 951:Generated_Source\PSoC5/CapSense_CSHL.c ****                             else
 952:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
 953:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 curPos = diplex[i];
 954:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }                    
 955:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #elif (CapSense_IS_DIPLEX_SLIDER)                    
 956:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curPos = diplex[i];                    
 957:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER) */
 958:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Looking for the grater element within centroid */
 959:Generated_Source\PSoC5/CapSense_CSHL.c ****                         if(startOfSlider[curPos] > fingerThreshold)
 960:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
 961:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if(startOfSlider[curPos] > temp)
 962:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
 963:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 maximum = i;
 964:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 temp = startOfSlider[curPos];
 965:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
 966:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
 967:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
 968:Generated_Source\PSoC5/CapSense_CSHL.c ****                 } 
 969:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
 970:Generated_Source\PSoC5/CapSense_CSHL.c ****             for (i = 0u; i < count; i++)
 971:Generated_Source\PSoC5/CapSense_CSHL.c ****             {                      
 972:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Looking for the grater element within centroid */
 973:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if(startOfSlider[i] > fingerThreshold)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 39


 974:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
 975:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if(startOfSlider[i] > temp)
 976:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
 977:Generated_Source\PSoC5/CapSense_CSHL.c ****                         maximum = i;
 978:Generated_Source\PSoC5/CapSense_CSHL.c ****                         temp = startOfSlider[i];
 979:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
 980:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
 981:Generated_Source\PSoC5/CapSense_CSHL.c ****             }    
 982:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
 983:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (maximum);
 984:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 985:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 986:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 987:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
 988:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_CalcCentroid
 989:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
 990:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
 991:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
 992:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns position value calculated accoring index of maximum element and API
 993:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  resolution.
 994:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
 995:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
 996:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  type:  widget type.
 997:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  diplex:  pointer to diplex table.
 998:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  maximum:  Index of maximum element within centroid.
 999:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  offset:   Start index of cetroid in CapSense_SensorSignal[] array.
1000:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  count:    Number of elements within centroid.
1001:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  resolution:  multiplicator calculated according to centroid type and
1002:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  API resolution.
1003:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  noiseThreshold:  Noise threshould.
1004:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
1005:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1006:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns position value of the slider.
1007:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
1008:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1009:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Reentrant:
1010:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  No.
1011:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1012:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1013:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 CapSense_CalcCentroid(uint8 maximum, uint8 offset, 
1014:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         uint8 count, uint16 resolution, uint16 noiseThreshold)
1015:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                    
1016:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1017:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT > 0u))
1018:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posPrev = 0u;
1019:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posNext = 0u;
1020:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT>0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT>0u)
1021:Generated_Source\PSoC5/CapSense_CSHL.c ****                
1022:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)                
1023:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 pos;
1024:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1025:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1026:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Helps while centroid calulation */
1027:Generated_Source\PSoC5/CapSense_CSHL.c ****         static uint16 CapSense_centroid[3u];
1028:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1029:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 position;
1030:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint32 numerator;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 40


1031:Generated_Source\PSoC5/CapSense_CSHL.c ****         int32 denominator;
1032:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 *startOfSlider = &CapSense_sensorSignal[offset];
1033:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
1034:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_ADD_SLIDER_TYPE)
1035:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(type == CapSense_TYPE_RADIAL_SLIDER)
1036:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1037:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_ADD_SLIDER_TYPE) */
1038:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1039:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)                
1040:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Copy Signal for found centriod */
1041:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_centroid[CapSense_POS] = startOfSlider[maximum];
1042:Generated_Source\PSoC5/CapSense_CSHL.c ****                  
1043:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Check borders for ROTARY Slider */
1044:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1045:Generated_Source\PSoC5/CapSense_CSHL.c ****                 { 
1046:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[count - 1u];
1047:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[1u];
1048:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1049:Generated_Source\PSoC5/CapSense_CSHL.c ****                 else if (maximum == (count - 1u))    /* End of centroid */
1050:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1051:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[maximum - 1u];
1052:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[0u];
1053:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1054:Generated_Source\PSoC5/CapSense_CSHL.c ****                 else                                /* Not first Not last */
1055:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1056:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[maximum - 1u];
1057:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[maximum + 1u];
1058:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1059:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1060:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1061:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_ADD_SLIDER_TYPE)
1062:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1063:Generated_Source\PSoC5/CapSense_CSHL.c ****             else
1064:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1065:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_ADD_SLIDER_TYPE) */
1066:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1067:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT > 0
1068:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #if (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER)                   
1069:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Calculate next and previous near to maximum */
1070:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if(diplex == 0u)
1071:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1072:Generated_Source\PSoC5/CapSense_CSHL.c ****                         pos     = maximum;
1073:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posPrev = maximum - 1u;
1074:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posNext = maximum + 1u; 
1075:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1076:Generated_Source\PSoC5/CapSense_CSHL.c ****                     else
1077:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1078:Generated_Source\PSoC5/CapSense_CSHL.c ****                         pos     = diplex[maximum];
1079:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posPrev = diplex[maximum - 1u];
1080:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posNext = diplex[maximum + 1u];
1081:Generated_Source\PSoC5/CapSense_CSHL.c ****                         count <<= 1u;
1082:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }                    
1083:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #elif (CapSense_IS_DIPLEX_SLIDER)
1084:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Calculate next and previous near to maximum */
1085:Generated_Source\PSoC5/CapSense_CSHL.c ****                     pos     = diplex[maximum];
1086:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posPrev = diplex[maximum - 1u];
1087:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posNext = diplex[maximum + 1u];
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 41


1088:Generated_Source\PSoC5/CapSense_CSHL.c ****                     count <<= 1u;                    
1089:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #else                    
1090:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Calculate next and previous near to maximum */
1091:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (maximum >= 1u)
1092:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1093:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posPrev = maximum - 1u;
1094:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1095:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posNext = maximum + 1u; 
1096:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #endif /* (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER) */
1097:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1098:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Copy Signal for found centriod */
1099:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #if (CapSense_IS_DIPLEX_SLIDER)
1100:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS] = startOfSlider[pos];
1101:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #else
1102:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS] = startOfSlider[maximum];
1103:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1104:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
1105:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Check borders for LINEAR Slider */
1106:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1107:Generated_Source\PSoC5/CapSense_CSHL.c ****                 { 
1108:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = 0u;
1109:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[posNext];
1110:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1111:Generated_Source\PSoC5/CapSense_CSHL.c ****                 else if (maximum == ((count) - 1u)) /* End of centroid */
1112:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1113:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[posPrev];
1114:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = 0u;
1115:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1116:Generated_Source\PSoC5/CapSense_CSHL.c ****                 else                                /* Not first Not last */
1117:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1118:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[posPrev];
1119:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[posNext];
1120:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1121:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT>0u)||(CapSense_TOTAL_TOUCH_PADS_COUNT>0
1122:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1123:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_ADD_SLIDER_TYPE)
1124:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1125:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_ADD_SLIDER_TYPE) */
1126:Generated_Source\PSoC5/CapSense_CSHL.c ****     
1127:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Subtract noiseThreshold */
1128:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(CapSense_centroid[CapSense_POS_PREV] > noiseThreshold)
1129:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1130:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_PREV] -= noiseThreshold;
1131:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1132:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
1133:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1134:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_PREV] = 0u;
1135:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1136:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1137:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Maximum always grater than fingerThreshold, so grate than noiseThreshold */
1138:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_centroid[CapSense_POS] -= noiseThreshold;
1139:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1140:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Subtract noiseThreshold */
1141:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(CapSense_centroid[CapSense_POS_NEXT] > noiseThreshold)
1142:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1143:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_NEXT] -= noiseThreshold;
1144:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 42


1145:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
1146:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1147:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_NEXT] = 0u;
1148:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1149:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1150:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1151:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Si+1 - Si-1 */
1152:Generated_Source\PSoC5/CapSense_CSHL.c ****         numerator = (uint32) CapSense_centroid[CapSense_POS_NEXT] -
1153:Generated_Source\PSoC5/CapSense_CSHL.c ****                     (uint32) CapSense_centroid[CapSense_POS_PREV];
1154:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1155:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Si+1 + Si + Si-1 */
1156:Generated_Source\PSoC5/CapSense_CSHL.c ****         denominator = (int32) CapSense_centroid[CapSense_POS_PREV] + 
1157:Generated_Source\PSoC5/CapSense_CSHL.c ****                       (int32) CapSense_centroid[CapSense_POS] + 
1158:Generated_Source\PSoC5/CapSense_CSHL.c ****                       (int32) CapSense_centroid[CapSense_POS_NEXT];
1159:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1160:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* (numerator/denominator) + maximum */
1161:Generated_Source\PSoC5/CapSense_CSHL.c ****         denominator = (((int32)(uint32)((uint32)numerator << 8u)/denominator) + (int32)(uint32)((ui
1162:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1163:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if(CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
1164:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Only required for RADIAL Slider */
1165:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(denominator < 0)
1166:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1167:Generated_Source\PSoC5/CapSense_CSHL.c ****                 denominator += (int32)((uint16)((uint16) count << 8u));
1168:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1169:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1170:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1171:Generated_Source\PSoC5/CapSense_CSHL.c ****         denominator *= (int16)resolution;
1172:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1173:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Round the relust and put it to uint8 */
1174:Generated_Source\PSoC5/CapSense_CSHL.c ****         position = ((uint8) HI16((uint32)denominator + CapSense_CENTROID_ROUND_VALUE));
1175:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1176:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (position);
1177:Generated_Source\PSoC5/CapSense_CSHL.c ****     }    
1178:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* (CapSense_TOTAL_CENTROIDS_COUNT) */
1179:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1180:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1181:Generated_Source\PSoC5/CapSense_CSHL.c **** #if(CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u)
1182:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1183:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_GetCentroidPos
1184:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1185:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1186:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1187:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Checks the CapSense_Signal[ ] array for a centroid within
1188:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  slider specified range. The centroid position is calculated to the resolution
1189:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1190:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  result if enabled.
1191:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1192:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1193:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  widget:  Widget number.
1194:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  For every linear slider widget there are defines in this format:
1195:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  #define CapSense_LS__"widget_name"            5
1196:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
1197:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1198:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns position value of the linear slider.
1199:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1200:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Side Effects:
1201:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 43


1202:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1203:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  sensors are active, the function returns 0xFFFF. If an error occurs during
1204:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  execution of the centroid/diplexing algorithm, the function returns 0xFFFF.
1205:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  There are no checks of widget type argument provided to this function.
1206:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
1207:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1208:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Note:
1209:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
1210:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1211:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so
1212:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  that noise will not generate a false centroid.
1213:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1214:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Reentrant:
1215:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  No.
1216:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1217:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1218:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_GetCentroidPos(uint8 widget) 
1219:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1220:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1221:Generated_Source\PSoC5/CapSense_CSHL.c ****             const uint8 CYCODE *diplex;
1222:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1223:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
1224:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1225:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posIndex;
1226:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 firstTimeIndex = CapSense_posFiltersData[widget];
1227:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posFiltersMask = CapSense_posFiltersMask[widget];  
1228:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1229:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1230:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1231:Generated_Source\PSoC5/CapSense_CSHL.c ****              (0u != (CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1232:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 tempPos;
1233:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1234:Generated_Source\PSoC5/CapSense_CSHL.c ****                *   (0u != (CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1235:Generated_Source\PSoC5/CapSense_CSHL.c ****                */
1236:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1237:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maximum;
1238:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 position;
1239:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 offset = CapSense_rawDataIndex[widget];
1240:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 count = CapSense_numberOfSensors[widget];
1241:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1242:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1243:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(widget < CapSense_TOTAL_DIPLEXED_SLIDERS_COUNT)
1244:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1245:Generated_Source\PSoC5/CapSense_CSHL.c ****                 maximum = CapSense_diplexTable[widget];
1246:Generated_Source\PSoC5/CapSense_CSHL.c ****                 diplex = &CapSense_diplexTable[maximum];
1247:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1248:Generated_Source\PSoC5/CapSense_CSHL.c ****             else
1249:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1250:Generated_Source\PSoC5/CapSense_CSHL.c ****                 diplex = 0u;
1251:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1252:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1253:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1254:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Find Maximum within centroid */      
1255:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)        
1256:Generated_Source\PSoC5/CapSense_CSHL.c ****             maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], diplex)
1257:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
1258:Generated_Source\PSoC5/CapSense_CSHL.c ****             maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 44


1259:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1260:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1261:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (maximum != 0xFFu)
1262:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1263:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Calculate centroid */
1264:Generated_Source\PSoC5/CapSense_CSHL.c ****             position = (uint16) CapSense_CalcCentroid(maximum, 
1265:Generated_Source\PSoC5/CapSense_CSHL.c ****                          offset, count, CapSense_centroidMult[widget], CapSense_noiseThreshold[widg
1266:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1267:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1268:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Check if this linear slider has enabled filters */
1269:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1270:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1271:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Caluclate position to store filters data */
1272:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
1273:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
1274:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (0u == CapSense_posFiltersData[firstTimeIndex])
1275:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1276:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Init filters */
1277:Generated_Source\PSoC5/CapSense_CSHL.c ****                         CapSense_posFiltersData[posIndex] = (uint8) position;
1278:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if ((0u != (CapSense_MEDIAN_FILTER & \
1279:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1280:Generated_Source\PSoC5/CapSense_CSHL.c ****                              (0u != (CapSense_AVERAGING_FILTER & \
1281:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1282:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1283:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER)) || 
1284:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
1285:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1286:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] = (uint8) position;
1287:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1288:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
1289:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1290:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *   (0u != (CapSense_AVERAGING_FILTER & \
1291:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1292:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1293:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1294:Generated_Source\PSoC5/CapSense_CSHL.c ****                         CapSense_posFiltersData[firstTimeIndex] = 1u;
1295:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1296:Generated_Source\PSoC5/CapSense_CSHL.c ****                     else
1297:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1298:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Do filtering */
1299:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MA
1300:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
1301:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1302:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1303:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_MedianFilter(position,
1304:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1305:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1306:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] =
1307:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
1308:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1309:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1310:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /*(0u != (CapSense_MEDIAN_FILTER &
1311:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *         CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1312:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1313:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1314:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if(0u!=(CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MA
1315:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 45


1316:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1317:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1318:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_AveragingFilter(position,
1319:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1320:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1321:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex+1u]=CapSense_posFiltersData[posInd
1322:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1323:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1324:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_AVERAGING_FILTER & \
1325:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1326:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1327:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1328:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR2_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK
1329:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR2_FILTER)) 
1330:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1331:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_IIR2Filter(position,
1332:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1333:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1334:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1335:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR2_FILTER & \
1336:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1337:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1338:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1339:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR4_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK
1340:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
1341:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1342:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_IIR4Filter(position,
1343:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1344:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1345:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }                                
1346:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR4_FILTER & \
1347:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1348:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1349:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1350:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_JITTER_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MA
1351:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
1352:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1353:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_JitterFilter(position,
1354:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1355:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1356:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1357:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_JITTER_FILTER & \
1358:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1359:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1360:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1361:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1362:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1363:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1364:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1365:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
1366:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1367:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* The maximum wasn't found */
1368:Generated_Source\PSoC5/CapSense_CSHL.c ****             position = 0xFFFFu;
1369:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1370:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if(0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1371:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Reset the filters */
1372:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if(0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 46


1373:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1374:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_posFiltersData[firstTimeIndex] = 0u;
1375:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1376:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1377:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1378:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1379:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1380:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (position);
1381:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1382:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* (CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) */
1383:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1384:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1385:Generated_Source\PSoC5/CapSense_CSHL.c **** #if(CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
1386:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1387:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_GetRadialCentroidPos
1388:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1389:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1390:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1391:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Checks the CapSense_Signal[ ] array for a centroid within
1392:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  slider specified range. The centroid position is calculated to the resolution
1393:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1394:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  result if enabled.
1395:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1396:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1397:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  widget:  Widget number.
1398:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  For every radial slider widget there are defines in this format:
1399:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  #define CapSense_RS_"widget_name"            5
1400:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
1401:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1402:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns position value of the radial slider.
1403:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1404:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Side Effects:
1405:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
1406:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1407:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  sensors are active, the function returns 0xFFFF.
1408:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  There are no checks of widget type argument provided to this function.
1409:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
1410:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1411:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Note:
1412:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
1413:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1414:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so 
1415:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  that noise will not generate a false centroid.
1416:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1417:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1418:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Reentrant:
1419:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  No.
1420:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1421:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1422:Generated_Source\PSoC5/CapSense_CSHL.c ****      uint16 CapSense_GetRadialCentroidPos(uint8 widget)
1423:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                       
1424:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1425:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
1426:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posIndex;
1427:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 firstTimeIndex = CapSense_posFiltersData[widget];
1428:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posFiltersMask = CapSense_posFiltersMask[widget]; 
1429:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 47


1430:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1431:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1432:Generated_Source\PSoC5/CapSense_CSHL.c ****              (0u != (CapSense_AVERAGING_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1433:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 tempPos;
1434:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1435:Generated_Source\PSoC5/CapSense_CSHL.c ****                *   (0u != (CapSense_AVERAGING_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1436:Generated_Source\PSoC5/CapSense_CSHL.c ****                */
1437:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1438:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maximum;
1439:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 position;
1440:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 offset = CapSense_rawDataIndex[widget];
1441:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 count = CapSense_numberOfSensors[widget];
1442:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1443:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Find Maximum within centroid */        
1444:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1445:Generated_Source\PSoC5/CapSense_CSHL.c ****             maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], 0u);
1446:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
1447:Generated_Source\PSoC5/CapSense_CSHL.c ****             maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
1448:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1449:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1450:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (maximum != 0xFFu)
1451:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1452:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Calculate centroid */
1453:Generated_Source\PSoC5/CapSense_CSHL.c ****             position = (uint16) CapSense_CalcCentroid(maximum, 
1454:Generated_Source\PSoC5/CapSense_CSHL.c ****                          offset, count, CapSense_centroidMult[widget], CapSense_noiseThreshold[widg
1455:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1456:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
1457:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Check if this Radial slider has enabled filters */
1458:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1459:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1460:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Caluclate position to store filters data */
1461:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
1462:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
1463:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (0u == CapSense_posFiltersData[firstTimeIndex])
1464:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1465:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Init filters */
1466:Generated_Source\PSoC5/CapSense_CSHL.c ****                         CapSense_posFiltersData[posIndex] = (uint8) position;
1467:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if ((0u != (CapSense_MEDIAN_FILTER & \
1468:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1469:Generated_Source\PSoC5/CapSense_CSHL.c ****                              (0u != (CapSense_AVERAGING_FILTER & \
1470:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1471:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1472:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))  || 
1473:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
1474:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1475:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] = (uint8) position;
1476:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1477:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
1478:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1479:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *   (0u != (CapSense_AVERAGING_FILTER & \
1480:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1481:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1482:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1483:Generated_Source\PSoC5/CapSense_CSHL.c ****                         CapSense_posFiltersData[firstTimeIndex] = 1u;
1484:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1485:Generated_Source\PSoC5/CapSense_CSHL.c ****                     else
1486:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 48


1487:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Do filtering */
1488:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MA
1489:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
1490:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1491:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1492:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_MedianFilter(position,
1493:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                         CapSense_posFiltersData[pos
1494:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                         CapSense_posFiltersData[pos
1495:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] = 
1496:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                               CapSense_posFiltersDa
1497:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1498:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1499:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_MEDIAN_FILTER & 
1500:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1501:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1502:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1503:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_AVERAGING_FILTER & \
1504:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1505:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER))
1506:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1507:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1508:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_AveragingFilter(position, 
1509:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posI
1510:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posI
1511:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex+1u]= CapSense_posFiltersData[posIn
1512:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1513:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1514:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_AVERAGING_FILTER & \
1515:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1516:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1517:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1518:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR2_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK
1519:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR2_FILTER))
1520:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1521:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_IIR2Filter(position,
1522:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1523:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1524:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1525:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR2_FILTER & 
1526:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1527:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1528:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1529:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR4_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK
1530:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
1531:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1532:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_IIR4Filter(position,
1533:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1534:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1535:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1536:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR4_FILTER & 
1537:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1538:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1539:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1540:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_JITTER_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MA
1541:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
1542:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1543:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_JitterFilter(position, 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 49


1544:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                          CapSense_posFiltersData[po
1545:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1546:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1547:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_JITTER_FILTER &
1548:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1549:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1550:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1551:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1552:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
1553:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1554:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1555:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
1556:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1557:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* The maximum didn't find */
1558:Generated_Source\PSoC5/CapSense_CSHL.c ****             position = 0xFFFFu;
1559:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1560:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
1561:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Reset the filters */
1562:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if((posFiltersMask & CapSense_ANY_POS_FILTER) != 0u)
1563:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1564:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_posFiltersData[firstTimeIndex] = 0u;
1565:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1566:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
1567:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1568:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1569:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (position);
1570:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1571:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif
1572:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1573:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1574:Generated_Source\PSoC5/CapSense_CSHL.c **** #if(CapSense_TOTAL_TOUCH_PADS_COUNT > 0u)
1575:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1576:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_GetTouchCentroidPos
1577:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1578:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1579:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1580:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If a finger is present on touch pad, this function calculates the X and Y
1581:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  position of the finger by calculating the centroids within touch pad specified
1582:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  range. The X and Y positions are calculated to the API resolutions set in the
1583:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  CapSense customizer. Returns a 1 if a finger is on the touchpad.
1584:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The position filter is applied to the result if enabled.
1585:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  This function is available only if a touch pad is defined by the CapSense
1586:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  customizer.
1587:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1588:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1589:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  widget:  Widget number. 
1590:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  For every touchpad widget there are defines in this format:
1591:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  #define CapSense_TP_"widget_name"            5
1592:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1593:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  pos:     Pointer to the array of two uint16 elements, where result
1594:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  result of calculation of X and Y position are stored.
1595:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  pos[0u]  - position of X
1596:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  pos[1u]  - position of Y
1597:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1598:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1599:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns a 1 if a finger is on the touch pad, 0 - if not.
1600:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 50


1601:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Side Effects:
1602:Generated_Source\PSoC5/CapSense_CSHL.c ****     *   There are no checks of widget type argument provided to this function.
1603:Generated_Source\PSoC5/CapSense_CSHL.c ****     *   The unproper widget type provided will cause unexpected position
1604:Generated_Source\PSoC5/CapSense_CSHL.c ****     *   calculations.
1605:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1606:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Reentrant:
1607:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  No.
1608:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1609:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1610:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 CapSense_GetTouchCentroidPos(uint8 widget, uint16* pos)
1611:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                    
1612:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1613:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
1614:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posXIndex;
1615:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posYIndex;
1616:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 firstTimeIndex = CapSense_posFiltersData[widget];
1617:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posFiltersMask = CapSense_posFiltersMask[widget];
1618:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
1619:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1620:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
1621:Generated_Source\PSoC5/CapSense_CSHL.c ****              (0u != (CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
1622:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint16 tempPos;
1623:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
1624:Generated_Source\PSoC5/CapSense_CSHL.c ****                *   (0u != (CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
1625:Generated_Source\PSoC5/CapSense_CSHL.c ****                */
1626:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1627:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maxX;
1628:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maxY;
1629:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 posX;
1630:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 posY;
1631:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 touch = 0u;
1632:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 offset = CapSense_rawDataIndex[widget];
1633:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 count = CapSense_numberOfSensors[widget];
1634:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1635:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Find Maximum within X centroid */
1636:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1637:Generated_Source\PSoC5/CapSense_CSHL.c ****             maxX = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], 0u);
1638:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
1639:Generated_Source\PSoC5/CapSense_CSHL.c ****             maxX = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
1640:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1641:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1642:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (maxX != 0xFFu)
1643:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1644:Generated_Source\PSoC5/CapSense_CSHL.c ****             offset = CapSense_rawDataIndex[widget + 1u];
1645:Generated_Source\PSoC5/CapSense_CSHL.c ****             count = CapSense_numberOfSensors[widget + 1u];
1646:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1647:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Find Maximum within Y centroid */
1648:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (CapSense_IS_DIPLEX_SLIDER)
1649:Generated_Source\PSoC5/CapSense_CSHL.c ****                 maxY = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget + 1u], 0
1650:Generated_Source\PSoC5/CapSense_CSHL.c ****             #else
1651:Generated_Source\PSoC5/CapSense_CSHL.c ****                 maxY = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget + 1u]);
1652:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1653:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1654:Generated_Source\PSoC5/CapSense_CSHL.c ****             if (maxY != 0xFFu)
1655:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1656:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* X and Y maximums are found = true touch */
1657:Generated_Source\PSoC5/CapSense_CSHL.c ****                 touch = 1u;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 51


1658:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
1659:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Calculate Y centroid */
1660:Generated_Source\PSoC5/CapSense_CSHL.c ****                 posY = CapSense_CalcCentroid(maxY, offset, count, 
1661:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_centroidMult[widget + 1u], CapSense_noiseThreshold[widget + 1u
1662:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
1663:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Calculate X centroid */
1664:Generated_Source\PSoC5/CapSense_CSHL.c ****                 offset = CapSense_rawDataIndex[widget];
1665:Generated_Source\PSoC5/CapSense_CSHL.c ****                 count = CapSense_numberOfSensors[widget];
1666:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
1667:Generated_Source\PSoC5/CapSense_CSHL.c ****                 posX = CapSense_CalcCentroid(maxX, offset, count, 
1668:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_centroidMult[widget],CapSense_noiseThreshold[widget]);
1669:Generated_Source\PSoC5/CapSense_CSHL.c ****     
1670:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
1671:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Check if this TP has enabled filters */
1672:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1673:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1674:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Caluclate position to store filters data */
1675:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posXIndex  = firstTimeIndex + 1u;
1676:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posYIndex  = CapSense_posFiltersData[widget + 1u];
1677:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1678:Generated_Source\PSoC5/CapSense_CSHL.c ****                         if (0u == CapSense_posFiltersData[firstTimeIndex])
1679:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
1680:Generated_Source\PSoC5/CapSense_CSHL.c ****                             /* Init filters */
1681:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_posFiltersData[posXIndex] = posX;
1682:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_posFiltersData[posYIndex] = posY;
1683:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1684:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if((0u != (CapSense_MEDIAN_FILTER & \
1685:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         CapSense_TOUCH_PADS_POS_FILTERS_MASK))|| \
1686:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 (0u != (CapSense_AVERAGING_FILTER & \
1687:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
1688:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1689:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER)) || 
1690:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
1691:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1692:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex + 1u] = posX;
1693:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex + 1u] = posY;
1694:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1695:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
1696:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
1697:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *    (0u != (CapSense_AVERAGING_FILTER & \
1698:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *            CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
1699:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1700:Generated_Source\PSoC5/CapSense_CSHL.c ****                             
1701:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_posFiltersData[firstTimeIndex] = 1u;
1702:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
1703:Generated_Source\PSoC5/CapSense_CSHL.c ****                         else
1704:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
1705:Generated_Source\PSoC5/CapSense_CSHL.c ****                             /* Do filtering */
1706:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if (0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MA
1707:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
1708:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1709:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     tempPos = posX;
1710:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_MedianFilter(posX,
1711:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posXI
1712:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posXI
1713:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex + 1u] = 
1714:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 52


1715:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = tempPos;
1716:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     
1717:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     tempPos = posY;
1718:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_MedianFilter(posY,
1719:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posY
1720:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posY
1721:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex + 1u] = 
1722:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
1723:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = tempPos;
1724:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1725:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 
1726:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_MEDIAN_FILTER & \
1727:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *          CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1728:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1729:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1730:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if(0u !=(CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_M
1731:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER))
1732:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1733:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     tempPos = posX;
1734:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_AveragingFilter(posX,
1735:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posX
1736:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posX
1737:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex + 1u] = 
1738:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
1739:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = tempPos;
1740:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     
1741:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     tempPos = posY;
1742:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_AveragingFilter(posY, 
1743:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posYI
1744:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posYI
1745:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex + 1u] = 
1746:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
1747:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = tempPos;
1748:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1749:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1750:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_AVERAGING_FILTER & \
1751:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1752:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1753:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1754:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if (0u != (CapSense_IIR2_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK
1755:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_IIR2_FILTER))
1756:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1757:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_IIR2Filter(posX, 
1758:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                            CapSense_posFiltersData[
1759:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = posX;
1760:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     
1761:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_IIR2Filter(posY, 
1762:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
1763:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = posY;
1764:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1765:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 
1766:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_IIR2_FILTER & \
1767:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *          CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1768:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1769:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1770:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if (0u != (CapSense_IIR4_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK
1771:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 53


1772:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1773:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_IIR4Filter((uint16)posX,
1774:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1775:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = posX;
1776:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1777:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_IIR4Filter((uint16)posY,
1778:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1779:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = posY;
1780:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1781:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 
1782:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_IIR4_FILTER & \
1783:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1784:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1785:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1786:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if (0u != (CapSense_JITTER_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MA
1787:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
1788:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     {
1789:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         posX = (uint8) CapSense_JitterFilter(posX, 
1790:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
1791:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         CapSense_posFiltersData[posXIndex] = posX;
1792:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         
1793:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         posY = (uint8) CapSense_JitterFilter(posY, 
1794:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
1795:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         CapSense_posFiltersData[posYIndex] = posY;
1796:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     }
1797:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_JITTER_FILTER & \
1798:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1799:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1800:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
1801:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1802:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
1803:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1804:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Save positions */
1805:Generated_Source\PSoC5/CapSense_CSHL.c ****                 pos[0u] = posX;
1806:Generated_Source\PSoC5/CapSense_CSHL.c ****                 pos[1u] = posY;
1807:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1808:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1809:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1810:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
1811:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(touch == 0u)
1812:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1813:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Reset the filters */
1814:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if ((posFiltersMask & CapSense_ANY_POS_FILTER) != 0u)
1815:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1816:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_posFiltersData[firstTimeIndex] = 0u;
1817:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1818:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1819:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
1820:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1821:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (touch);
1822:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1823:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* (CapSense_TOTAL_TOUCH_PADS_COUNT > 0u) */
1824:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1825:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1826:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
1827:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_POS_FILTERS_MASK & CapSense_MEDIAN_FILTER) )
1828:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 54


1829:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_MedianFilter
1830:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1831:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1832:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1833:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Median filter function. 
1834:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The median filter looks at the three most recent samples and reports the 
1835:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  median value.
1836:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1837:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1838:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x1:  Current value.
1839:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x2:  Previous value.
1840:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x3:  Before previous value.
1841:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1842:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1843:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns filtered value.
1844:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1845:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1846:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_MedianFilter(uint16 x1, uint16 x2, uint16 x3)
1847:Generated_Source\PSoC5/CapSense_CSHL.c ****                                          
1848:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1849:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 tmp;
1850:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1851:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (x1 > x2)
1852:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1853:Generated_Source\PSoC5/CapSense_CSHL.c ****             tmp = x2;
1854:Generated_Source\PSoC5/CapSense_CSHL.c ****             x2 = x1;
1855:Generated_Source\PSoC5/CapSense_CSHL.c ****             x1 = tmp;
1856:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1857:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1858:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (x2 > x3)
1859:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1860:Generated_Source\PSoC5/CapSense_CSHL.c ****             x2 = x3;
1861:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1862:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1863:Generated_Source\PSoC5/CapSense_CSHL.c ****         return ((x1 > x2) ? x1 : x2);
1864:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1865:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
1866:Generated_Source\PSoC5/CapSense_CSHL.c ****        *    (CapSense_POS_FILTERS_MASK & CapSense_MEDIAN_FILTER) )
1867:Generated_Source\PSoC5/CapSense_CSHL.c ****        */
1868:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1869:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1870:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) | \
1871:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_POS_FILTERS_MASK & CapSense_AVERAGING_FILTER) )
1872:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1873:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_AveragingFilter
1874:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1875:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1876:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1877:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Averaging filter function.
1878:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The averaging filter looks at the three most recent samples of position and
1879:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  reports the averaging value.
1880:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1881:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1882:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x1:  Current value.
1883:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x2:  Previous value.
1884:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x3:  Before previous value.
1885:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 55


1886:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1887:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns filtered value.
1888:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1889:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1890:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_AveragingFilter(uint16 x1, uint16 x2, uint16 x3)
1891:Generated_Source\PSoC5/CapSense_CSHL.c ****                                             
1892:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1893:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint32 tmp = ((uint32)x1 + (uint32)x2 + (uint32)x3) / 3u;
1894:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1895:Generated_Source\PSoC5/CapSense_CSHL.c ****         return ((uint16) tmp);
1896:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1897:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) | \
1898:Generated_Source\PSoC5/CapSense_CSHL.c ****        *    (CapSense_POS_FILTERS_MASK & CapSense_AVERAGING_FILTER) )
1899:Generated_Source\PSoC5/CapSense_CSHL.c ****        */
1900:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1901:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1902:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) | \
1903:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_POS_FILTERS_MASK & CapSense_IIR2_FILTER) )
1904:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1905:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_IIR2Filter
1906:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1907:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1908:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1909:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  IIR1/2 filter function. IIR1/2 = 1/2current + 1/2previous.
1910:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1911:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1912:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x1:  Current value.
1913:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x2:  Previous value.
1914:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1915:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1916:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns filtered value.
1917:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1918:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1919:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_IIR2Filter(uint16 x1, uint16 x2)
1920:Generated_Source\PSoC5/CapSense_CSHL.c ****                                        
1921:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1922:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint32 tmp;
1923:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1924:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* IIR = 1/2 Current Value+ 1/2 Previous Value */
1925:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp = (uint32)x1 + (uint32)x2;
1926:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp >>= 1u;
1927:Generated_Source\PSoC5/CapSense_CSHL.c ****     
1928:Generated_Source\PSoC5/CapSense_CSHL.c ****         return ((uint16) tmp);
1929:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1930:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) | \
1931:Generated_Source\PSoC5/CapSense_CSHL.c ****        *    (CapSense_POS_FILTERS_MASK & CapSense_IIR2_FILTER) )
1932:Generated_Source\PSoC5/CapSense_CSHL.c ****        */
1933:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1934:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1935:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER) | \
1936:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_POS_FILTERS_MASK & CapSense_IIR4_FILTER) )
1937:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1938:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_IIR4Filter
1939:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1940:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1941:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1942:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  IIR1/4 filter function. IIR1/4 = 1/4current + 3/4previous.
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 56


1943:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1944:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1945:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x1:  Current value.
1946:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x2:  Previous value.
1947:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1948:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1949:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns filtered value.
1950:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1951:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1952:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_IIR4Filter(uint16 x1, uint16 x2)
1953:Generated_Source\PSoC5/CapSense_CSHL.c ****                                        
1954:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 1182              		.loc 1 1954 0
 1183              		.cfi_startproc
 1184              		@ args = 0, pretend = 0, frame = 16
 1185              		@ frame_needed = 1, uses_anonymous_args = 0
 1186              		@ link register save eliminated.
 1187 0000 80B4     		push	{r7}
 1188              		.cfi_def_cfa_offset 4
 1189              		.cfi_offset 7, -4
 1190 0002 85B0     		sub	sp, sp, #20
 1191              		.cfi_def_cfa_offset 24
 1192 0004 00AF     		add	r7, sp, #0
 1193              		.cfi_def_cfa_register 7
 1194 0006 0346     		mov	r3, r0
 1195 0008 0A46     		mov	r2, r1
 1196 000a FB80     		strh	r3, [r7, #6]	@ movhi
 1197 000c 1346     		mov	r3, r2	@ movhi
 1198 000e BB80     		strh	r3, [r7, #4]	@ movhi
1955:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint32 tmp;
1956:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1957:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* IIR = 1/4 Current Value + 3/4 Previous Value */
1958:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp = (uint32)x1 + (uint32)x2;
 1199              		.loc 1 1958 0
 1200 0010 FA88     		ldrh	r2, [r7, #6]
 1201 0012 BB88     		ldrh	r3, [r7, #4]
 1202 0014 1344     		add	r3, r3, r2
 1203 0016 FB60     		str	r3, [r7, #12]
1959:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp += ((uint32)x2 << 1u);
 1204              		.loc 1 1959 0
 1205 0018 BB88     		ldrh	r3, [r7, #4]
 1206 001a 5B00     		lsls	r3, r3, #1
 1207 001c FA68     		ldr	r2, [r7, #12]
 1208 001e 1344     		add	r3, r3, r2
 1209 0020 FB60     		str	r3, [r7, #12]
1960:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp >>= 2u;
 1210              		.loc 1 1960 0
 1211 0022 FB68     		ldr	r3, [r7, #12]
 1212 0024 9B08     		lsrs	r3, r3, #2
 1213 0026 FB60     		str	r3, [r7, #12]
1961:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1962:Generated_Source\PSoC5/CapSense_CSHL.c ****         return ((uint16) tmp);
 1214              		.loc 1 1962 0
 1215 0028 FB68     		ldr	r3, [r7, #12]
 1216 002a 9BB2     		uxth	r3, r3
1963:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 1217              		.loc 1 1963 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 57


 1218 002c 1846     		mov	r0, r3
 1219 002e 1437     		adds	r7, r7, #20
 1220              		.cfi_def_cfa_offset 4
 1221 0030 BD46     		mov	sp, r7
 1222              		.cfi_def_cfa_register 13
 1223              		@ sp needed
 1224 0032 80BC     		pop	{r7}
 1225              		.cfi_restore 7
 1226              		.cfi_def_cfa_offset 0
 1227 0034 7047     		bx	lr
 1228              		.cfi_endproc
 1229              	.LFE11:
 1230              		.size	CapSense_IIR4Filter, .-CapSense_IIR4Filter
 1231 0036 00BF     		.text
 1232              	.Letext0:
 1233              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 1234              		.file 3 "Generated_Source\\PSoC5\\CapSense.h"
 1235              		.file 4 "Generated_Source\\PSoC5\\CapSense_CSHL.h"
 1236              		.section	.debug_info,"",%progbits
 1237              	.Ldebug_info0:
 1238 0000 AE050000 		.4byte	0x5ae
 1239 0004 0400     		.2byte	0x4
 1240 0006 00000000 		.4byte	.Ldebug_abbrev0
 1241 000a 04       		.byte	0x4
 1242 000b 01       		.uleb128 0x1
 1243 000c 51000000 		.4byte	.LASF60
 1244 0010 0C       		.byte	0xc
 1245 0011 D8040000 		.4byte	.LASF61
 1246 0015 96020000 		.4byte	.LASF62
 1247 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1248 001d 00000000 		.4byte	0
 1249 0021 00000000 		.4byte	.Ldebug_line0
 1250 0025 02       		.uleb128 0x2
 1251 0026 01       		.byte	0x1
 1252 0027 06       		.byte	0x6
 1253 0028 5E010000 		.4byte	.LASF0
 1254 002c 02       		.uleb128 0x2
 1255 002d 01       		.byte	0x1
 1256 002e 08       		.byte	0x8
 1257 002f 17040000 		.4byte	.LASF1
 1258 0033 02       		.uleb128 0x2
 1259 0034 02       		.byte	0x2
 1260 0035 05       		.byte	0x5
 1261 0036 54040000 		.4byte	.LASF2
 1262 003a 02       		.uleb128 0x2
 1263 003b 02       		.byte	0x2
 1264 003c 07       		.byte	0x7
 1265 003d 62020000 		.4byte	.LASF3
 1266 0041 02       		.uleb128 0x2
 1267 0042 04       		.byte	0x4
 1268 0043 05       		.byte	0x5
 1269 0044 A0010000 		.4byte	.LASF4
 1270 0048 02       		.uleb128 0x2
 1271 0049 04       		.byte	0x4
 1272 004a 07       		.byte	0x7
 1273 004b 1F020000 		.4byte	.LASF5
 1274 004f 02       		.uleb128 0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 58


 1275 0050 08       		.byte	0x8
 1276 0051 05       		.byte	0x5
 1277 0052 50010000 		.4byte	.LASF6
 1278 0056 02       		.uleb128 0x2
 1279 0057 08       		.byte	0x8
 1280 0058 07       		.byte	0x7
 1281 0059 DF000000 		.4byte	.LASF7
 1282 005d 03       		.uleb128 0x3
 1283 005e 04       		.byte	0x4
 1284 005f 05       		.byte	0x5
 1285 0060 696E7400 		.ascii	"int\000"
 1286 0064 02       		.uleb128 0x2
 1287 0065 04       		.byte	0x4
 1288 0066 07       		.byte	0x7
 1289 0067 12020000 		.4byte	.LASF8
 1290 006b 04       		.uleb128 0x4
 1291 006c C9010000 		.4byte	.LASF9
 1292 0070 02       		.byte	0x2
 1293 0071 E901     		.2byte	0x1e9
 1294 0073 2C000000 		.4byte	0x2c
 1295 0077 04       		.uleb128 0x4
 1296 0078 00000000 		.4byte	.LASF10
 1297 007c 02       		.byte	0x2
 1298 007d EA01     		.2byte	0x1ea
 1299 007f 3A000000 		.4byte	0x3a
 1300 0083 04       		.uleb128 0x4
 1301 0084 EC010000 		.4byte	.LASF11
 1302 0088 02       		.byte	0x2
 1303 0089 EB01     		.2byte	0x1eb
 1304 008b 48000000 		.4byte	0x48
 1305 008f 02       		.uleb128 0x2
 1306 0090 04       		.byte	0x4
 1307 0091 04       		.byte	0x4
 1308 0092 F4030000 		.4byte	.LASF12
 1309 0096 02       		.uleb128 0x2
 1310 0097 08       		.byte	0x8
 1311 0098 04       		.byte	0x4
 1312 0099 CF010000 		.4byte	.LASF13
 1313 009d 02       		.uleb128 0x2
 1314 009e 01       		.byte	0x1
 1315 009f 08       		.byte	0x8
 1316 00a0 C5040000 		.4byte	.LASF14
 1317 00a4 02       		.uleb128 0x2
 1318 00a5 08       		.byte	0x8
 1319 00a6 04       		.byte	0x4
 1320 00a7 59030000 		.4byte	.LASF15
 1321 00ab 02       		.uleb128 0x2
 1322 00ac 04       		.byte	0x4
 1323 00ad 07       		.byte	0x7
 1324 00ae 3A030000 		.4byte	.LASF16
 1325 00b2 05       		.uleb128 0x5
 1326 00b3 6C040000 		.4byte	.LASF17
 1327 00b7 01       		.byte	0x1
 1328 00b8 8B       		.byte	0x8b
 1329 00b9 00000000 		.4byte	.LFB0
 1330 00bd 7C000000 		.4byte	.LFE0-.LFB0
 1331 00c1 01       		.uleb128 0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 59


 1332 00c2 9C       		.byte	0x9c
 1333 00c3 E4000000 		.4byte	0xe4
 1334 00c7 06       		.uleb128 0x6
 1335 00c8 75020000 		.4byte	.LASF19
 1336 00cc 01       		.byte	0x1
 1337 00cd 8B       		.byte	0x8b
 1338 00ce 6B000000 		.4byte	0x6b
 1339 00d2 02       		.uleb128 0x2
 1340 00d3 91       		.byte	0x91
 1341 00d4 6F       		.sleb128 -17
 1342 00d5 07       		.uleb128 0x7
 1343 00d6 5E040000 		.4byte	.LASF21
 1344 00da 01       		.byte	0x1
 1345 00db 8F       		.byte	0x8f
 1346 00dc 6B000000 		.4byte	0x6b
 1347 00e0 02       		.uleb128 0x2
 1348 00e1 91       		.byte	0x91
 1349 00e2 77       		.sleb128 -9
 1350 00e3 00       		.byte	0
 1351 00e4 08       		.uleb128 0x8
 1352 00e5 65030000 		.4byte	.LASF18
 1353 00e9 01       		.byte	0x1
 1354 00ea D4       		.byte	0xd4
 1355 00eb 00000000 		.4byte	.LFB1
 1356 00ef 2E000000 		.4byte	.LFE1-.LFB1
 1357 00f3 01       		.uleb128 0x1
 1358 00f4 9C       		.byte	0x9c
 1359 00f5 08010000 		.4byte	0x108
 1360 00f9 06       		.uleb128 0x6
 1361 00fa 75020000 		.4byte	.LASF19
 1362 00fe 01       		.byte	0x1
 1363 00ff D4       		.byte	0xd4
 1364 0100 6B000000 		.4byte	0x6b
 1365 0104 02       		.uleb128 0x2
 1366 0105 91       		.byte	0x91
 1367 0106 77       		.sleb128 -9
 1368 0107 00       		.byte	0
 1369 0108 09       		.uleb128 0x9
 1370 0109 25040000 		.4byte	.LASF20
 1371 010d 01       		.byte	0x1
 1372 010e 0801     		.2byte	0x108
 1373 0110 00000000 		.4byte	.LFB2
 1374 0114 28000000 		.4byte	.LFE2-.LFB2
 1375 0118 01       		.uleb128 0x1
 1376 0119 9C       		.byte	0x9c
 1377 011a 2C010000 		.4byte	0x12c
 1378 011e 0A       		.uleb128 0xa
 1379 011f 6900     		.ascii	"i\000"
 1380 0121 01       		.byte	0x1
 1381 0122 0B01     		.2byte	0x10b
 1382 0124 6B000000 		.4byte	0x6b
 1383 0128 02       		.uleb128 0x2
 1384 0129 91       		.byte	0x91
 1385 012a 77       		.sleb128 -9
 1386 012b 00       		.byte	0
 1387 012c 09       		.uleb128 0x9
 1388 012d 0C010000 		.4byte	.LASF22
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 60


 1389 0131 01       		.byte	0x1
 1390 0132 2901     		.2byte	0x129
 1391 0134 00000000 		.4byte	.LFB3
 1392 0138 70000000 		.4byte	.LFE3-.LFB3
 1393 013c 01       		.uleb128 0x1
 1394 013d 9C       		.byte	0x9c
 1395 013e 6E010000 		.4byte	0x16e
 1396 0142 0A       		.uleb128 0xa
 1397 0143 6900     		.ascii	"i\000"
 1398 0145 01       		.byte	0x1
 1399 0146 2C01     		.2byte	0x12c
 1400 0148 6B000000 		.4byte	0x6b
 1401 014c 02       		.uleb128 0x2
 1402 014d 91       		.byte	0x91
 1403 014e 77       		.sleb128 -9
 1404 014f 0A       		.uleb128 0xa
 1405 0150 706F7300 		.ascii	"pos\000"
 1406 0154 01       		.byte	0x1
 1407 0155 2D01     		.2byte	0x12d
 1408 0157 6B000000 		.4byte	0x6b
 1409 015b 02       		.uleb128 0x2
 1410 015c 91       		.byte	0x91
 1411 015d 76       		.sleb128 -10
 1412 015e 0B       		.uleb128 0xb
 1413 015f A4030000 		.4byte	.LASF23
 1414 0163 01       		.byte	0x1
 1415 0164 2E01     		.2byte	0x12e
 1416 0166 6B000000 		.4byte	0x6b
 1417 016a 02       		.uleb128 0x2
 1418 016b 91       		.byte	0x91
 1419 016c 75       		.sleb128 -11
 1420 016d 00       		.byte	0
 1421 016e 09       		.uleb128 0x9
 1422 016f 0E030000 		.4byte	.LASF24
 1423 0173 01       		.byte	0x1
 1424 0174 6C01     		.2byte	0x16c
 1425 0176 00000000 		.4byte	.LFB4
 1426 017a 64010000 		.4byte	.LFE4-.LFB4
 1427 017e 01       		.uleb128 0x1
 1428 017f 9C       		.byte	0x9c
 1429 0180 DF010000 		.4byte	0x1df
 1430 0184 0C       		.uleb128 0xc
 1431 0185 75020000 		.4byte	.LASF19
 1432 0189 01       		.byte	0x1
 1433 018a 6C01     		.2byte	0x16c
 1434 018c 6B000000 		.4byte	0x6b
 1435 0190 02       		.uleb128 0x2
 1436 0191 91       		.byte	0x91
 1437 0192 67       		.sleb128 -25
 1438 0193 0B       		.uleb128 0xb
 1439 0194 2C030000 		.4byte	.LASF25
 1440 0198 01       		.byte	0x1
 1441 0199 6F01     		.2byte	0x16f
 1442 019b 83000000 		.4byte	0x83
 1443 019f 02       		.uleb128 0x2
 1444 01a0 91       		.byte	0x91
 1445 01a1 6C       		.sleb128 -20
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 61


 1446 01a2 0B       		.uleb128 0xb
 1447 01a3 2B050000 		.4byte	.LASF26
 1448 01a7 01       		.byte	0x1
 1449 01a8 7001     		.2byte	0x170
 1450 01aa 77000000 		.4byte	0x77
 1451 01ae 02       		.uleb128 0x2
 1452 01af 91       		.byte	0x91
 1453 01b0 76       		.sleb128 -10
 1454 01b1 0B       		.uleb128 0xb
 1455 01b2 07000000 		.4byte	.LASF27
 1456 01b6 01       		.byte	0x1
 1457 01b7 7101     		.2byte	0x171
 1458 01b9 77000000 		.4byte	0x77
 1459 01bd 02       		.uleb128 0x2
 1460 01be 91       		.byte	0x91
 1461 01bf 70       		.sleb128 -16
 1462 01c0 0B       		.uleb128 0xb
 1463 01c1 5E040000 		.4byte	.LASF21
 1464 01c5 01       		.byte	0x1
 1465 01c6 7201     		.2byte	0x172
 1466 01c8 6B000000 		.4byte	0x6b
 1467 01cc 02       		.uleb128 0x2
 1468 01cd 91       		.byte	0x91
 1469 01ce 75       		.sleb128 -11
 1470 01cf 0B       		.uleb128 0xb
 1471 01d0 45040000 		.4byte	.LASF28
 1472 01d4 01       		.byte	0x1
 1473 01d5 7301     		.2byte	0x173
 1474 01d7 77000000 		.4byte	0x77
 1475 01db 02       		.uleb128 0x2
 1476 01dc 91       		.byte	0x91
 1477 01dd 72       		.sleb128 -14
 1478 01de 00       		.byte	0
 1479 01df 09       		.uleb128 0x9
 1480 01e0 30010000 		.4byte	.LASF29
 1481 01e4 01       		.byte	0x1
 1482 01e5 1902     		.2byte	0x219
 1483 01e7 00000000 		.4byte	.LFB5
 1484 01eb 50000000 		.4byte	.LFE5-.LFB5
 1485 01ef 01       		.uleb128 0x1
 1486 01f0 9C       		.byte	0x9c
 1487 01f1 21020000 		.4byte	0x221
 1488 01f5 0A       		.uleb128 0xa
 1489 01f6 6900     		.ascii	"i\000"
 1490 01f8 01       		.byte	0x1
 1491 01f9 1C02     		.2byte	0x21c
 1492 01fb 6B000000 		.4byte	0x6b
 1493 01ff 02       		.uleb128 0x2
 1494 0200 91       		.byte	0x91
 1495 0201 77       		.sleb128 -9
 1496 0202 0A       		.uleb128 0xa
 1497 0203 706F7300 		.ascii	"pos\000"
 1498 0207 01       		.byte	0x1
 1499 0208 1D02     		.2byte	0x21d
 1500 020a 6B000000 		.4byte	0x6b
 1501 020e 02       		.uleb128 0x2
 1502 020f 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 62


 1503 0210 76       		.sleb128 -10
 1504 0211 0B       		.uleb128 0xb
 1505 0212 A4030000 		.4byte	.LASF23
 1506 0216 01       		.byte	0x1
 1507 0217 1E02     		.2byte	0x21e
 1508 0219 6B000000 		.4byte	0x6b
 1509 021d 02       		.uleb128 0x2
 1510 021e 91       		.byte	0x91
 1511 021f 75       		.sleb128 -11
 1512 0220 00       		.byte	0
 1513 0221 0D       		.uleb128 0xd
 1514 0222 87030000 		.4byte	.LASF35
 1515 0226 01       		.byte	0x1
 1516 0227 5302     		.2byte	0x253
 1517 0229 6B000000 		.4byte	0x6b
 1518 022d 00000000 		.4byte	.LFB6
 1519 0231 10010000 		.4byte	.LFE6-.LFB6
 1520 0235 01       		.uleb128 0x1
 1521 0236 9C       		.byte	0x9c
 1522 0237 B4020000 		.4byte	0x2b4
 1523 023b 0C       		.uleb128 0xc
 1524 023c 75020000 		.4byte	.LASF19
 1525 0240 01       		.byte	0x1
 1526 0241 5302     		.2byte	0x253
 1527 0243 6B000000 		.4byte	0x6b
 1528 0247 02       		.uleb128 0x2
 1529 0248 91       		.byte	0x91
 1530 0249 67       		.sleb128 -25
 1531 024a 0B       		.uleb128 0xb
 1532 024b CA040000 		.4byte	.LASF30
 1533 024f 01       		.byte	0x1
 1534 0250 5602     		.2byte	0x256
 1535 0252 6B000000 		.4byte	0x6b
 1536 0256 02       		.uleb128 0x2
 1537 0257 91       		.byte	0x91
 1538 0258 6E       		.sleb128 -18
 1539 0259 0A       		.uleb128 0xa
 1540 025a 706F7300 		.ascii	"pos\000"
 1541 025e 01       		.byte	0x1
 1542 025f 5802     		.2byte	0x258
 1543 0261 6B000000 		.4byte	0x6b
 1544 0265 02       		.uleb128 0x2
 1545 0266 91       		.byte	0x91
 1546 0267 77       		.sleb128 -9
 1547 0268 0B       		.uleb128 0xb
 1548 0269 65040000 		.4byte	.LASF31
 1549 026d 01       		.byte	0x1
 1550 026e 5902     		.2byte	0x259
 1551 0270 6B000000 		.4byte	0x6b
 1552 0274 02       		.uleb128 0x2
 1553 0275 91       		.byte	0x91
 1554 0276 76       		.sleb128 -10
 1555 0277 0B       		.uleb128 0xb
 1556 0278 5E040000 		.4byte	.LASF21
 1557 027c 01       		.byte	0x1
 1558 027d 5B02     		.2byte	0x25b
 1559 027f 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 63


 1560 0283 02       		.uleb128 0x2
 1561 0284 91       		.byte	0x91
 1562 0285 75       		.sleb128 -11
 1563 0286 0B       		.uleb128 0xb
 1564 0287 41000000 		.4byte	.LASF32
 1565 028b 01       		.byte	0x1
 1566 028c 5C02     		.2byte	0x25c
 1567 028e 77000000 		.4byte	0x77
 1568 0292 02       		.uleb128 0x2
 1569 0293 91       		.byte	0x91
 1570 0294 72       		.sleb128 -14
 1571 0295 0B       		.uleb128 0xb
 1572 0296 F3010000 		.4byte	.LASF33
 1573 029a 01       		.byte	0x1
 1574 029b 5D02     		.2byte	0x25d
 1575 029d 77000000 		.4byte	0x77
 1576 02a1 02       		.uleb128 0x2
 1577 02a2 91       		.byte	0x91
 1578 02a3 70       		.sleb128 -16
 1579 02a4 0B       		.uleb128 0xb
 1580 02a5 31030000 		.4byte	.LASF34
 1581 02a9 01       		.byte	0x1
 1582 02aa 5E02     		.2byte	0x25e
 1583 02ac 6B000000 		.4byte	0x6b
 1584 02b0 02       		.uleb128 0x2
 1585 02b1 91       		.byte	0x91
 1586 02b2 6F       		.sleb128 -17
 1587 02b3 00       		.byte	0
 1588 02b4 0E       		.uleb128 0xe
 1589 02b5 FA030000 		.4byte	.LASF36
 1590 02b9 01       		.byte	0x1
 1591 02ba 9B02     		.2byte	0x29b
 1592 02bc 6B000000 		.4byte	0x6b
 1593 02c0 00000000 		.4byte	.LFB7
 1594 02c4 54000000 		.4byte	.LFE7-.LFB7
 1595 02c8 01       		.uleb128 0x1
 1596 02c9 9C       		.byte	0x9c
 1597 02ca 0B030000 		.4byte	0x30b
 1598 02ce 0C       		.uleb128 0xc
 1599 02cf 5E040000 		.4byte	.LASF21
 1600 02d3 01       		.byte	0x1
 1601 02d4 9B02     		.2byte	0x29b
 1602 02d6 6B000000 		.4byte	0x6b
 1603 02da 02       		.uleb128 0x2
 1604 02db 91       		.byte	0x91
 1605 02dc 6F       		.sleb128 -17
 1606 02dd 0B       		.uleb128 0xb
 1607 02de 81010000 		.4byte	.LASF37
 1608 02e2 01       		.byte	0x1
 1609 02e3 9E02     		.2byte	0x29e
 1610 02e5 6B000000 		.4byte	0x6b
 1611 02e9 02       		.uleb128 0x2
 1612 02ea 91       		.byte	0x91
 1613 02eb 77       		.sleb128 -9
 1614 02ec 0B       		.uleb128 0xb
 1615 02ed 8A010000 		.4byte	.LASF38
 1616 02f1 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 64


 1617 02f2 9F02     		.2byte	0x29f
 1618 02f4 6B000000 		.4byte	0x6b
 1619 02f8 02       		.uleb128 0x2
 1620 02f9 91       		.byte	0x91
 1621 02fa 75       		.sleb128 -11
 1622 02fb 0B       		.uleb128 0xb
 1623 02fc 9A010000 		.4byte	.LASF39
 1624 0300 01       		.byte	0x1
 1625 0301 A002     		.2byte	0x2a0
 1626 0303 6B000000 		.4byte	0x6b
 1627 0307 02       		.uleb128 0x2
 1628 0308 91       		.byte	0x91
 1629 0309 76       		.sleb128 -10
 1630 030a 00       		.byte	0
 1631 030b 0E       		.uleb128 0xe
 1632 030c A9010000 		.4byte	.LASF40
 1633 0310 01       		.byte	0x1
 1634 0311 C702     		.2byte	0x2c7
 1635 0313 6B000000 		.4byte	0x6b
 1636 0317 00000000 		.4byte	.LFB8
 1637 031b 38000000 		.4byte	.LFE8-.LFB8
 1638 031f 01       		.uleb128 0x1
 1639 0320 9C       		.byte	0x9c
 1640 0321 42030000 		.4byte	0x342
 1641 0325 0A       		.uleb128 0xa
 1642 0326 6900     		.ascii	"i\000"
 1643 0328 01       		.byte	0x1
 1644 0329 CA02     		.2byte	0x2ca
 1645 032b 6B000000 		.4byte	0x6b
 1646 032f 02       		.uleb128 0x2
 1647 0330 91       		.byte	0x91
 1648 0331 77       		.sleb128 -9
 1649 0332 0B       		.uleb128 0xb
 1650 0333 9A010000 		.4byte	.LASF39
 1651 0337 01       		.byte	0x1
 1652 0338 CB02     		.2byte	0x2cb
 1653 033a 6B000000 		.4byte	0x6b
 1654 033e 02       		.uleb128 0x2
 1655 033f 91       		.byte	0x91
 1656 0340 76       		.sleb128 -10
 1657 0341 00       		.byte	0
 1658 0342 0F       		.uleb128 0xf
 1659 0343 43030000 		.4byte	.LASF41
 1660 0347 01       		.byte	0x1
 1661 0348 F502     		.2byte	0x2f5
 1662 034a 00000000 		.4byte	.LFB9
 1663 034e 68000000 		.4byte	.LFE9-.LFB9
 1664 0352 01       		.uleb128 0x1
 1665 0353 9C       		.byte	0x9c
 1666 0354 A4030000 		.4byte	0x3a4
 1667 0358 0C       		.uleb128 0xc
 1668 0359 5E040000 		.4byte	.LASF21
 1669 035d 01       		.byte	0x1
 1670 035e F502     		.2byte	0x2f5
 1671 0360 6B000000 		.4byte	0x6b
 1672 0364 02       		.uleb128 0x2
 1673 0365 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 65


 1674 0366 6F       		.sleb128 -17
 1675 0367 0A       		.uleb128 0xa
 1676 0368 706F7300 		.ascii	"pos\000"
 1677 036c 01       		.byte	0x1
 1678 036d F802     		.2byte	0x2f8
 1679 036f 6B000000 		.4byte	0x6b
 1680 0373 02       		.uleb128 0x2
 1681 0374 91       		.byte	0x91
 1682 0375 75       		.sleb128 -11
 1683 0376 0B       		.uleb128 0xb
 1684 0377 A4030000 		.4byte	.LASF23
 1685 037b 01       		.byte	0x1
 1686 037c F902     		.2byte	0x2f9
 1687 037e 6B000000 		.4byte	0x6b
 1688 0382 02       		.uleb128 0x2
 1689 0383 91       		.byte	0x91
 1690 0384 74       		.sleb128 -12
 1691 0385 0B       		.uleb128 0xb
 1692 0386 81010000 		.4byte	.LASF37
 1693 038a 01       		.byte	0x1
 1694 038b FA02     		.2byte	0x2fa
 1695 038d 6B000000 		.4byte	0x6b
 1696 0391 02       		.uleb128 0x2
 1697 0392 91       		.byte	0x91
 1698 0393 77       		.sleb128 -9
 1699 0394 0B       		.uleb128 0xb
 1700 0395 8A010000 		.4byte	.LASF38
 1701 0399 01       		.byte	0x1
 1702 039a FB02     		.2byte	0x2fb
 1703 039c 6B000000 		.4byte	0x6b
 1704 03a0 02       		.uleb128 0x2
 1705 03a1 91       		.byte	0x91
 1706 03a2 76       		.sleb128 -10
 1707 03a3 00       		.byte	0
 1708 03a4 0F       		.uleb128 0xf
 1709 03a5 6A010000 		.4byte	.LASF42
 1710 03a9 01       		.byte	0x1
 1711 03aa 2703     		.2byte	0x327
 1712 03ac 00000000 		.4byte	.LFB10
 1713 03b0 6C000000 		.4byte	.LFE10-.LFB10
 1714 03b4 01       		.uleb128 0x1
 1715 03b5 9C       		.byte	0x9c
 1716 03b6 06040000 		.4byte	0x406
 1717 03ba 0C       		.uleb128 0xc
 1718 03bb 5E040000 		.4byte	.LASF21
 1719 03bf 01       		.byte	0x1
 1720 03c0 2703     		.2byte	0x327
 1721 03c2 6B000000 		.4byte	0x6b
 1722 03c6 02       		.uleb128 0x2
 1723 03c7 91       		.byte	0x91
 1724 03c8 6F       		.sleb128 -17
 1725 03c9 0A       		.uleb128 0xa
 1726 03ca 706F7300 		.ascii	"pos\000"
 1727 03ce 01       		.byte	0x1
 1728 03cf 2A03     		.2byte	0x32a
 1729 03d1 6B000000 		.4byte	0x6b
 1730 03d5 02       		.uleb128 0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 66


 1731 03d6 91       		.byte	0x91
 1732 03d7 75       		.sleb128 -11
 1733 03d8 0B       		.uleb128 0xb
 1734 03d9 A4030000 		.4byte	.LASF23
 1735 03dd 01       		.byte	0x1
 1736 03de 2B03     		.2byte	0x32b
 1737 03e0 6B000000 		.4byte	0x6b
 1738 03e4 02       		.uleb128 0x2
 1739 03e5 91       		.byte	0x91
 1740 03e6 74       		.sleb128 -12
 1741 03e7 0B       		.uleb128 0xb
 1742 03e8 81010000 		.4byte	.LASF37
 1743 03ec 01       		.byte	0x1
 1744 03ed 2C03     		.2byte	0x32c
 1745 03ef 6B000000 		.4byte	0x6b
 1746 03f3 02       		.uleb128 0x2
 1747 03f4 91       		.byte	0x91
 1748 03f5 77       		.sleb128 -9
 1749 03f6 0B       		.uleb128 0xb
 1750 03f7 8A010000 		.4byte	.LASF38
 1751 03fb 01       		.byte	0x1
 1752 03fc 2D03     		.2byte	0x32d
 1753 03fe 6B000000 		.4byte	0x6b
 1754 0402 02       		.uleb128 0x2
 1755 0403 91       		.byte	0x91
 1756 0404 76       		.sleb128 -10
 1757 0405 00       		.byte	0
 1758 0406 0D       		.uleb128 0xd
 1759 0407 FE010000 		.4byte	.LASF43
 1760 040b 01       		.byte	0x1
 1761 040c A007     		.2byte	0x7a0
 1762 040e 77000000 		.4byte	0x77
 1763 0412 00000000 		.4byte	.LFB11
 1764 0416 36000000 		.4byte	.LFE11-.LFB11
 1765 041a 01       		.uleb128 0x1
 1766 041b 9C       		.byte	0x9c
 1767 041c 4C040000 		.4byte	0x44c
 1768 0420 10       		.uleb128 0x10
 1769 0421 783100   		.ascii	"x1\000"
 1770 0424 01       		.byte	0x1
 1771 0425 A007     		.2byte	0x7a0
 1772 0427 77000000 		.4byte	0x77
 1773 042b 02       		.uleb128 0x2
 1774 042c 91       		.byte	0x91
 1775 042d 6E       		.sleb128 -18
 1776 042e 10       		.uleb128 0x10
 1777 042f 783200   		.ascii	"x2\000"
 1778 0432 01       		.byte	0x1
 1779 0433 A007     		.2byte	0x7a0
 1780 0435 77000000 		.4byte	0x77
 1781 0439 02       		.uleb128 0x2
 1782 043a 91       		.byte	0x91
 1783 043b 6C       		.sleb128 -20
 1784 043c 0A       		.uleb128 0xa
 1785 043d 746D7000 		.ascii	"tmp\000"
 1786 0441 01       		.byte	0x1
 1787 0442 A307     		.2byte	0x7a3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 67


 1788 0444 83000000 		.4byte	0x83
 1789 0448 02       		.uleb128 0x2
 1790 0449 91       		.byte	0x91
 1791 044a 74       		.sleb128 -12
 1792 044b 00       		.byte	0
 1793 044c 11       		.uleb128 0x11
 1794 044d 77000000 		.4byte	0x77
 1795 0451 5C040000 		.4byte	0x45c
 1796 0455 12       		.uleb128 0x12
 1797 0456 AB000000 		.4byte	0xab
 1798 045a 09       		.byte	0x9
 1799 045b 00       		.byte	0
 1800 045c 13       		.uleb128 0x13
 1801 045d FF040000 		.4byte	.LASF44
 1802 0461 03       		.byte	0x3
 1803 0462 C202     		.2byte	0x2c2
 1804 0464 4C040000 		.4byte	0x44c
 1805 0468 14       		.uleb128 0x14
 1806 0469 DC030000 		.4byte	.LASF45
 1807 046d 01       		.byte	0x1
 1808 046e 21       		.byte	0x21
 1809 046f 4C040000 		.4byte	0x44c
 1810 0473 05       		.uleb128 0x5
 1811 0474 03       		.byte	0x3
 1812 0475 00000000 		.4byte	CapSense_rawFilterData1
 1813 0479 11       		.uleb128 0x11
 1814 047a 6B000000 		.4byte	0x6b
 1815 047e 89040000 		.4byte	0x489
 1816 0482 12       		.uleb128 0x12
 1817 0483 AB000000 		.4byte	0xab
 1818 0487 01       		.byte	0x1
 1819 0488 00       		.byte	0
 1820 0489 13       		.uleb128 0x13
 1821 048a 7C020000 		.4byte	.LASF46
 1822 048e 04       		.byte	0x4
 1823 048f 0C01     		.2byte	0x10c
 1824 0491 79040000 		.4byte	0x479
 1825 0495 11       		.uleb128 0x11
 1826 0496 A5040000 		.4byte	0x4a5
 1827 049a A5040000 		.4byte	0x4a5
 1828 049e 12       		.uleb128 0x12
 1829 049f AB000000 		.4byte	0xab
 1830 04a3 09       		.byte	0x9
 1831 04a4 00       		.byte	0
 1832 04a5 15       		.uleb128 0x15
 1833 04a6 6B000000 		.4byte	0x6b
 1834 04aa 13       		.uleb128 0x13
 1835 04ab D6010000 		.4byte	.LASF47
 1836 04af 04       		.byte	0x4
 1837 04b0 0D01     		.2byte	0x10d
 1838 04b2 B6040000 		.4byte	0x4b6
 1839 04b6 15       		.uleb128 0x15
 1840 04b7 95040000 		.4byte	0x495
 1841 04bb 14       		.uleb128 0x14
 1842 04bc AD040000 		.4byte	.LASF48
 1843 04c0 01       		.byte	0x1
 1844 04c1 29       		.byte	0x29
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 68


 1845 04c2 4C040000 		.4byte	0x44c
 1846 04c6 05       		.uleb128 0x5
 1847 04c7 03       		.byte	0x3
 1848 04c8 00000000 		.4byte	CapSense_sensorBaseline
 1849 04cc 11       		.uleb128 0x11
 1850 04cd 6B000000 		.4byte	0x6b
 1851 04d1 DC040000 		.4byte	0x4dc
 1852 04d5 12       		.uleb128 0x12
 1853 04d6 AB000000 		.4byte	0xab
 1854 04da 09       		.byte	0x9
 1855 04db 00       		.byte	0
 1856 04dc 14       		.uleb128 0x14
 1857 04dd 31020000 		.4byte	.LASF49
 1858 04e1 01       		.byte	0x1
 1859 04e2 2A       		.byte	0x2a
 1860 04e3 CC040000 		.4byte	0x4cc
 1861 04e7 05       		.uleb128 0x5
 1862 04e8 03       		.byte	0x3
 1863 04e9 00000000 		.4byte	CapSense_sensorBaselineLow
 1864 04ed 14       		.uleb128 0x14
 1865 04ee F6000000 		.4byte	.LASF50
 1866 04f2 01       		.byte	0x1
 1867 04f3 2B       		.byte	0x2b
 1868 04f4 4C040000 		.4byte	0x44c
 1869 04f8 05       		.uleb128 0x5
 1870 04f9 03       		.byte	0x3
 1871 04fa 00000000 		.4byte	CapSense_sensorSignal
 1872 04fe 14       		.uleb128 0x14
 1873 04ff 2B000000 		.4byte	.LASF51
 1874 0503 01       		.byte	0x1
 1875 0504 2C       		.byte	0x2c
 1876 0505 79040000 		.4byte	0x479
 1877 0509 05       		.uleb128 0x5
 1878 050a 03       		.byte	0x3
 1879 050b 00000000 		.4byte	CapSense_sensorOnMask
 1880 050f 14       		.uleb128 0x14
 1881 0510 7E040000 		.4byte	.LASF52
 1882 0514 01       		.byte	0x1
 1883 0515 2E       		.byte	0x2e
 1884 0516 CC040000 		.4byte	0x4cc
 1885 051a 05       		.uleb128 0x5
 1886 051b 03       		.byte	0x3
 1887 051c 00000000 		.4byte	CapSense_lowBaselineResetCnt
 1888 0520 14       		.uleb128 0x14
 1889 0521 C3030000 		.4byte	.LASF53
 1890 0525 01       		.byte	0x1
 1891 0526 30       		.byte	0x30
 1892 0527 4C040000 		.4byte	0x44c
 1893 052b 05       		.uleb128 0x5
 1894 052c 03       		.byte	0x3
 1895 052d 00000000 		.4byte	CapSense_fingerThreshold
 1896 0531 14       		.uleb128 0x14
 1897 0532 AB030000 		.4byte	.LASF54
 1898 0536 01       		.byte	0x1
 1899 0537 34       		.byte	0x34
 1900 0538 4C040000 		.4byte	0x44c
 1901 053c 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 69


 1902 053d 03       		.byte	0x3
 1903 053e 00000000 		.4byte	CapSense_noiseThreshold
 1904 0542 14       		.uleb128 0x14
 1905 0543 17000000 		.4byte	.LASF55
 1906 0547 01       		.byte	0x1
 1907 0548 38       		.byte	0x38
 1908 0549 4C040000 		.4byte	0x44c
 1909 054d 05       		.uleb128 0x5
 1910 054e 03       		.byte	0x3
 1911 054f 00000000 		.4byte	CapSense_hysteresis
 1912 0553 14       		.uleb128 0x14
 1913 0554 9B040000 		.4byte	.LASF56
 1914 0558 01       		.byte	0x1
 1915 0559 3C       		.byte	0x3c
 1916 055a CC040000 		.4byte	0x4cc
 1917 055e 05       		.uleb128 0x5
 1918 055f 03       		.byte	0x3
 1919 0560 00000000 		.4byte	CapSense_debounce
 1920 0564 11       		.uleb128 0x11
 1921 0565 6B000000 		.4byte	0x6b
 1922 0569 74050000 		.4byte	0x574
 1923 056d 12       		.uleb128 0x12
 1924 056e AB000000 		.4byte	0xab
 1925 0572 0A       		.byte	0xa
 1926 0573 00       		.byte	0
 1927 0574 14       		.uleb128 0x14
 1928 0575 12050000 		.4byte	.LASF57
 1929 0579 01       		.byte	0x1
 1930 057a 40       		.byte	0x40
 1931 057b 64050000 		.4byte	0x564
 1932 057f 05       		.uleb128 0x5
 1933 0580 03       		.byte	0x3
 1934 0581 00000000 		.4byte	CapSense_debounceCounter
 1935 0585 14       		.uleb128 0x14
 1936 0586 4C020000 		.4byte	.LASF58
 1937 058a 01       		.byte	0x1
 1938 058b 44       		.byte	0x44
 1939 058c 96050000 		.4byte	0x596
 1940 0590 05       		.uleb128 0x5
 1941 0591 03       		.byte	0x3
 1942 0592 00000000 		.4byte	CapSense_rawDataIndex
 1943 0596 15       		.uleb128 0x15
 1944 0597 95040000 		.4byte	0x495
 1945 059b 14       		.uleb128 0x14
 1946 059c 33050000 		.4byte	.LASF59
 1947 05a0 01       		.byte	0x1
 1948 05a1 52       		.byte	0x52
 1949 05a2 AC050000 		.4byte	0x5ac
 1950 05a6 05       		.uleb128 0x5
 1951 05a7 03       		.byte	0x3
 1952 05a8 00000000 		.4byte	CapSense_numberOfSensors
 1953 05ac 15       		.uleb128 0x15
 1954 05ad 95040000 		.4byte	0x495
 1955 05b1 00       		.byte	0
 1956              		.section	.debug_abbrev,"",%progbits
 1957              	.Ldebug_abbrev0:
 1958 0000 01       		.uleb128 0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 70


 1959 0001 11       		.uleb128 0x11
 1960 0002 01       		.byte	0x1
 1961 0003 25       		.uleb128 0x25
 1962 0004 0E       		.uleb128 0xe
 1963 0005 13       		.uleb128 0x13
 1964 0006 0B       		.uleb128 0xb
 1965 0007 03       		.uleb128 0x3
 1966 0008 0E       		.uleb128 0xe
 1967 0009 1B       		.uleb128 0x1b
 1968 000a 0E       		.uleb128 0xe
 1969 000b 55       		.uleb128 0x55
 1970 000c 17       		.uleb128 0x17
 1971 000d 11       		.uleb128 0x11
 1972 000e 01       		.uleb128 0x1
 1973 000f 10       		.uleb128 0x10
 1974 0010 17       		.uleb128 0x17
 1975 0011 00       		.byte	0
 1976 0012 00       		.byte	0
 1977 0013 02       		.uleb128 0x2
 1978 0014 24       		.uleb128 0x24
 1979 0015 00       		.byte	0
 1980 0016 0B       		.uleb128 0xb
 1981 0017 0B       		.uleb128 0xb
 1982 0018 3E       		.uleb128 0x3e
 1983 0019 0B       		.uleb128 0xb
 1984 001a 03       		.uleb128 0x3
 1985 001b 0E       		.uleb128 0xe
 1986 001c 00       		.byte	0
 1987 001d 00       		.byte	0
 1988 001e 03       		.uleb128 0x3
 1989 001f 24       		.uleb128 0x24
 1990 0020 00       		.byte	0
 1991 0021 0B       		.uleb128 0xb
 1992 0022 0B       		.uleb128 0xb
 1993 0023 3E       		.uleb128 0x3e
 1994 0024 0B       		.uleb128 0xb
 1995 0025 03       		.uleb128 0x3
 1996 0026 08       		.uleb128 0x8
 1997 0027 00       		.byte	0
 1998 0028 00       		.byte	0
 1999 0029 04       		.uleb128 0x4
 2000 002a 16       		.uleb128 0x16
 2001 002b 00       		.byte	0
 2002 002c 03       		.uleb128 0x3
 2003 002d 0E       		.uleb128 0xe
 2004 002e 3A       		.uleb128 0x3a
 2005 002f 0B       		.uleb128 0xb
 2006 0030 3B       		.uleb128 0x3b
 2007 0031 05       		.uleb128 0x5
 2008 0032 49       		.uleb128 0x49
 2009 0033 13       		.uleb128 0x13
 2010 0034 00       		.byte	0
 2011 0035 00       		.byte	0
 2012 0036 05       		.uleb128 0x5
 2013 0037 2E       		.uleb128 0x2e
 2014 0038 01       		.byte	0x1
 2015 0039 3F       		.uleb128 0x3f
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 71


 2016 003a 19       		.uleb128 0x19
 2017 003b 03       		.uleb128 0x3
 2018 003c 0E       		.uleb128 0xe
 2019 003d 3A       		.uleb128 0x3a
 2020 003e 0B       		.uleb128 0xb
 2021 003f 3B       		.uleb128 0x3b
 2022 0040 0B       		.uleb128 0xb
 2023 0041 27       		.uleb128 0x27
 2024 0042 19       		.uleb128 0x19
 2025 0043 11       		.uleb128 0x11
 2026 0044 01       		.uleb128 0x1
 2027 0045 12       		.uleb128 0x12
 2028 0046 06       		.uleb128 0x6
 2029 0047 40       		.uleb128 0x40
 2030 0048 18       		.uleb128 0x18
 2031 0049 9742     		.uleb128 0x2117
 2032 004b 19       		.uleb128 0x19
 2033 004c 01       		.uleb128 0x1
 2034 004d 13       		.uleb128 0x13
 2035 004e 00       		.byte	0
 2036 004f 00       		.byte	0
 2037 0050 06       		.uleb128 0x6
 2038 0051 05       		.uleb128 0x5
 2039 0052 00       		.byte	0
 2040 0053 03       		.uleb128 0x3
 2041 0054 0E       		.uleb128 0xe
 2042 0055 3A       		.uleb128 0x3a
 2043 0056 0B       		.uleb128 0xb
 2044 0057 3B       		.uleb128 0x3b
 2045 0058 0B       		.uleb128 0xb
 2046 0059 49       		.uleb128 0x49
 2047 005a 13       		.uleb128 0x13
 2048 005b 02       		.uleb128 0x2
 2049 005c 18       		.uleb128 0x18
 2050 005d 00       		.byte	0
 2051 005e 00       		.byte	0
 2052 005f 07       		.uleb128 0x7
 2053 0060 34       		.uleb128 0x34
 2054 0061 00       		.byte	0
 2055 0062 03       		.uleb128 0x3
 2056 0063 0E       		.uleb128 0xe
 2057 0064 3A       		.uleb128 0x3a
 2058 0065 0B       		.uleb128 0xb
 2059 0066 3B       		.uleb128 0x3b
 2060 0067 0B       		.uleb128 0xb
 2061 0068 49       		.uleb128 0x49
 2062 0069 13       		.uleb128 0x13
 2063 006a 02       		.uleb128 0x2
 2064 006b 18       		.uleb128 0x18
 2065 006c 00       		.byte	0
 2066 006d 00       		.byte	0
 2067 006e 08       		.uleb128 0x8
 2068 006f 2E       		.uleb128 0x2e
 2069 0070 01       		.byte	0x1
 2070 0071 3F       		.uleb128 0x3f
 2071 0072 19       		.uleb128 0x19
 2072 0073 03       		.uleb128 0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 72


 2073 0074 0E       		.uleb128 0xe
 2074 0075 3A       		.uleb128 0x3a
 2075 0076 0B       		.uleb128 0xb
 2076 0077 3B       		.uleb128 0x3b
 2077 0078 0B       		.uleb128 0xb
 2078 0079 27       		.uleb128 0x27
 2079 007a 19       		.uleb128 0x19
 2080 007b 11       		.uleb128 0x11
 2081 007c 01       		.uleb128 0x1
 2082 007d 12       		.uleb128 0x12
 2083 007e 06       		.uleb128 0x6
 2084 007f 40       		.uleb128 0x40
 2085 0080 18       		.uleb128 0x18
 2086 0081 9642     		.uleb128 0x2116
 2087 0083 19       		.uleb128 0x19
 2088 0084 01       		.uleb128 0x1
 2089 0085 13       		.uleb128 0x13
 2090 0086 00       		.byte	0
 2091 0087 00       		.byte	0
 2092 0088 09       		.uleb128 0x9
 2093 0089 2E       		.uleb128 0x2e
 2094 008a 01       		.byte	0x1
 2095 008b 3F       		.uleb128 0x3f
 2096 008c 19       		.uleb128 0x19
 2097 008d 03       		.uleb128 0x3
 2098 008e 0E       		.uleb128 0xe
 2099 008f 3A       		.uleb128 0x3a
 2100 0090 0B       		.uleb128 0xb
 2101 0091 3B       		.uleb128 0x3b
 2102 0092 05       		.uleb128 0x5
 2103 0093 27       		.uleb128 0x27
 2104 0094 19       		.uleb128 0x19
 2105 0095 11       		.uleb128 0x11
 2106 0096 01       		.uleb128 0x1
 2107 0097 12       		.uleb128 0x12
 2108 0098 06       		.uleb128 0x6
 2109 0099 40       		.uleb128 0x40
 2110 009a 18       		.uleb128 0x18
 2111 009b 9642     		.uleb128 0x2116
 2112 009d 19       		.uleb128 0x19
 2113 009e 01       		.uleb128 0x1
 2114 009f 13       		.uleb128 0x13
 2115 00a0 00       		.byte	0
 2116 00a1 00       		.byte	0
 2117 00a2 0A       		.uleb128 0xa
 2118 00a3 34       		.uleb128 0x34
 2119 00a4 00       		.byte	0
 2120 00a5 03       		.uleb128 0x3
 2121 00a6 08       		.uleb128 0x8
 2122 00a7 3A       		.uleb128 0x3a
 2123 00a8 0B       		.uleb128 0xb
 2124 00a9 3B       		.uleb128 0x3b
 2125 00aa 05       		.uleb128 0x5
 2126 00ab 49       		.uleb128 0x49
 2127 00ac 13       		.uleb128 0x13
 2128 00ad 02       		.uleb128 0x2
 2129 00ae 18       		.uleb128 0x18
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 73


 2130 00af 00       		.byte	0
 2131 00b0 00       		.byte	0
 2132 00b1 0B       		.uleb128 0xb
 2133 00b2 34       		.uleb128 0x34
 2134 00b3 00       		.byte	0
 2135 00b4 03       		.uleb128 0x3
 2136 00b5 0E       		.uleb128 0xe
 2137 00b6 3A       		.uleb128 0x3a
 2138 00b7 0B       		.uleb128 0xb
 2139 00b8 3B       		.uleb128 0x3b
 2140 00b9 05       		.uleb128 0x5
 2141 00ba 49       		.uleb128 0x49
 2142 00bb 13       		.uleb128 0x13
 2143 00bc 02       		.uleb128 0x2
 2144 00bd 18       		.uleb128 0x18
 2145 00be 00       		.byte	0
 2146 00bf 00       		.byte	0
 2147 00c0 0C       		.uleb128 0xc
 2148 00c1 05       		.uleb128 0x5
 2149 00c2 00       		.byte	0
 2150 00c3 03       		.uleb128 0x3
 2151 00c4 0E       		.uleb128 0xe
 2152 00c5 3A       		.uleb128 0x3a
 2153 00c6 0B       		.uleb128 0xb
 2154 00c7 3B       		.uleb128 0x3b
 2155 00c8 05       		.uleb128 0x5
 2156 00c9 49       		.uleb128 0x49
 2157 00ca 13       		.uleb128 0x13
 2158 00cb 02       		.uleb128 0x2
 2159 00cc 18       		.uleb128 0x18
 2160 00cd 00       		.byte	0
 2161 00ce 00       		.byte	0
 2162 00cf 0D       		.uleb128 0xd
 2163 00d0 2E       		.uleb128 0x2e
 2164 00d1 01       		.byte	0x1
 2165 00d2 3F       		.uleb128 0x3f
 2166 00d3 19       		.uleb128 0x19
 2167 00d4 03       		.uleb128 0x3
 2168 00d5 0E       		.uleb128 0xe
 2169 00d6 3A       		.uleb128 0x3a
 2170 00d7 0B       		.uleb128 0xb
 2171 00d8 3B       		.uleb128 0x3b
 2172 00d9 05       		.uleb128 0x5
 2173 00da 27       		.uleb128 0x27
 2174 00db 19       		.uleb128 0x19
 2175 00dc 49       		.uleb128 0x49
 2176 00dd 13       		.uleb128 0x13
 2177 00de 11       		.uleb128 0x11
 2178 00df 01       		.uleb128 0x1
 2179 00e0 12       		.uleb128 0x12
 2180 00e1 06       		.uleb128 0x6
 2181 00e2 40       		.uleb128 0x40
 2182 00e3 18       		.uleb128 0x18
 2183 00e4 9742     		.uleb128 0x2117
 2184 00e6 19       		.uleb128 0x19
 2185 00e7 01       		.uleb128 0x1
 2186 00e8 13       		.uleb128 0x13
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 74


 2187 00e9 00       		.byte	0
 2188 00ea 00       		.byte	0
 2189 00eb 0E       		.uleb128 0xe
 2190 00ec 2E       		.uleb128 0x2e
 2191 00ed 01       		.byte	0x1
 2192 00ee 3F       		.uleb128 0x3f
 2193 00ef 19       		.uleb128 0x19
 2194 00f0 03       		.uleb128 0x3
 2195 00f1 0E       		.uleb128 0xe
 2196 00f2 3A       		.uleb128 0x3a
 2197 00f3 0B       		.uleb128 0xb
 2198 00f4 3B       		.uleb128 0x3b
 2199 00f5 05       		.uleb128 0x5
 2200 00f6 27       		.uleb128 0x27
 2201 00f7 19       		.uleb128 0x19
 2202 00f8 49       		.uleb128 0x49
 2203 00f9 13       		.uleb128 0x13
 2204 00fa 11       		.uleb128 0x11
 2205 00fb 01       		.uleb128 0x1
 2206 00fc 12       		.uleb128 0x12
 2207 00fd 06       		.uleb128 0x6
 2208 00fe 40       		.uleb128 0x40
 2209 00ff 18       		.uleb128 0x18
 2210 0100 9642     		.uleb128 0x2116
 2211 0102 19       		.uleb128 0x19
 2212 0103 01       		.uleb128 0x1
 2213 0104 13       		.uleb128 0x13
 2214 0105 00       		.byte	0
 2215 0106 00       		.byte	0
 2216 0107 0F       		.uleb128 0xf
 2217 0108 2E       		.uleb128 0x2e
 2218 0109 01       		.byte	0x1
 2219 010a 3F       		.uleb128 0x3f
 2220 010b 19       		.uleb128 0x19
 2221 010c 03       		.uleb128 0x3
 2222 010d 0E       		.uleb128 0xe
 2223 010e 3A       		.uleb128 0x3a
 2224 010f 0B       		.uleb128 0xb
 2225 0110 3B       		.uleb128 0x3b
 2226 0111 05       		.uleb128 0x5
 2227 0112 27       		.uleb128 0x27
 2228 0113 19       		.uleb128 0x19
 2229 0114 11       		.uleb128 0x11
 2230 0115 01       		.uleb128 0x1
 2231 0116 12       		.uleb128 0x12
 2232 0117 06       		.uleb128 0x6
 2233 0118 40       		.uleb128 0x40
 2234 0119 18       		.uleb128 0x18
 2235 011a 9742     		.uleb128 0x2117
 2236 011c 19       		.uleb128 0x19
 2237 011d 01       		.uleb128 0x1
 2238 011e 13       		.uleb128 0x13
 2239 011f 00       		.byte	0
 2240 0120 00       		.byte	0
 2241 0121 10       		.uleb128 0x10
 2242 0122 05       		.uleb128 0x5
 2243 0123 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 75


 2244 0124 03       		.uleb128 0x3
 2245 0125 08       		.uleb128 0x8
 2246 0126 3A       		.uleb128 0x3a
 2247 0127 0B       		.uleb128 0xb
 2248 0128 3B       		.uleb128 0x3b
 2249 0129 05       		.uleb128 0x5
 2250 012a 49       		.uleb128 0x49
 2251 012b 13       		.uleb128 0x13
 2252 012c 02       		.uleb128 0x2
 2253 012d 18       		.uleb128 0x18
 2254 012e 00       		.byte	0
 2255 012f 00       		.byte	0
 2256 0130 11       		.uleb128 0x11
 2257 0131 01       		.uleb128 0x1
 2258 0132 01       		.byte	0x1
 2259 0133 49       		.uleb128 0x49
 2260 0134 13       		.uleb128 0x13
 2261 0135 01       		.uleb128 0x1
 2262 0136 13       		.uleb128 0x13
 2263 0137 00       		.byte	0
 2264 0138 00       		.byte	0
 2265 0139 12       		.uleb128 0x12
 2266 013a 21       		.uleb128 0x21
 2267 013b 00       		.byte	0
 2268 013c 49       		.uleb128 0x49
 2269 013d 13       		.uleb128 0x13
 2270 013e 2F       		.uleb128 0x2f
 2271 013f 0B       		.uleb128 0xb
 2272 0140 00       		.byte	0
 2273 0141 00       		.byte	0
 2274 0142 13       		.uleb128 0x13
 2275 0143 34       		.uleb128 0x34
 2276 0144 00       		.byte	0
 2277 0145 03       		.uleb128 0x3
 2278 0146 0E       		.uleb128 0xe
 2279 0147 3A       		.uleb128 0x3a
 2280 0148 0B       		.uleb128 0xb
 2281 0149 3B       		.uleb128 0x3b
 2282 014a 05       		.uleb128 0x5
 2283 014b 49       		.uleb128 0x49
 2284 014c 13       		.uleb128 0x13
 2285 014d 3F       		.uleb128 0x3f
 2286 014e 19       		.uleb128 0x19
 2287 014f 3C       		.uleb128 0x3c
 2288 0150 19       		.uleb128 0x19
 2289 0151 00       		.byte	0
 2290 0152 00       		.byte	0
 2291 0153 14       		.uleb128 0x14
 2292 0154 34       		.uleb128 0x34
 2293 0155 00       		.byte	0
 2294 0156 03       		.uleb128 0x3
 2295 0157 0E       		.uleb128 0xe
 2296 0158 3A       		.uleb128 0x3a
 2297 0159 0B       		.uleb128 0xb
 2298 015a 3B       		.uleb128 0x3b
 2299 015b 0B       		.uleb128 0xb
 2300 015c 49       		.uleb128 0x49
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 76


 2301 015d 13       		.uleb128 0x13
 2302 015e 3F       		.uleb128 0x3f
 2303 015f 19       		.uleb128 0x19
 2304 0160 02       		.uleb128 0x2
 2305 0161 18       		.uleb128 0x18
 2306 0162 00       		.byte	0
 2307 0163 00       		.byte	0
 2308 0164 15       		.uleb128 0x15
 2309 0165 26       		.uleb128 0x26
 2310 0166 00       		.byte	0
 2311 0167 49       		.uleb128 0x49
 2312 0168 13       		.uleb128 0x13
 2313 0169 00       		.byte	0
 2314 016a 00       		.byte	0
 2315 016b 00       		.byte	0
 2316              		.section	.debug_aranges,"",%progbits
 2317 0000 74000000 		.4byte	0x74
 2318 0004 0200     		.2byte	0x2
 2319 0006 00000000 		.4byte	.Ldebug_info0
 2320 000a 04       		.byte	0x4
 2321 000b 00       		.byte	0
 2322 000c 0000     		.2byte	0
 2323 000e 0000     		.2byte	0
 2324 0010 00000000 		.4byte	.LFB0
 2325 0014 7C000000 		.4byte	.LFE0-.LFB0
 2326 0018 00000000 		.4byte	.LFB1
 2327 001c 2E000000 		.4byte	.LFE1-.LFB1
 2328 0020 00000000 		.4byte	.LFB2
 2329 0024 28000000 		.4byte	.LFE2-.LFB2
 2330 0028 00000000 		.4byte	.LFB3
 2331 002c 70000000 		.4byte	.LFE3-.LFB3
 2332 0030 00000000 		.4byte	.LFB4
 2333 0034 64010000 		.4byte	.LFE4-.LFB4
 2334 0038 00000000 		.4byte	.LFB5
 2335 003c 50000000 		.4byte	.LFE5-.LFB5
 2336 0040 00000000 		.4byte	.LFB6
 2337 0044 10010000 		.4byte	.LFE6-.LFB6
 2338 0048 00000000 		.4byte	.LFB7
 2339 004c 54000000 		.4byte	.LFE7-.LFB7
 2340 0050 00000000 		.4byte	.LFB8
 2341 0054 38000000 		.4byte	.LFE8-.LFB8
 2342 0058 00000000 		.4byte	.LFB9
 2343 005c 68000000 		.4byte	.LFE9-.LFB9
 2344 0060 00000000 		.4byte	.LFB10
 2345 0064 6C000000 		.4byte	.LFE10-.LFB10
 2346 0068 00000000 		.4byte	.LFB11
 2347 006c 36000000 		.4byte	.LFE11-.LFB11
 2348 0070 00000000 		.4byte	0
 2349 0074 00000000 		.4byte	0
 2350              		.section	.debug_ranges,"",%progbits
 2351              	.Ldebug_ranges0:
 2352 0000 00000000 		.4byte	.LFB0
 2353 0004 7C000000 		.4byte	.LFE0
 2354 0008 00000000 		.4byte	.LFB1
 2355 000c 2E000000 		.4byte	.LFE1
 2356 0010 00000000 		.4byte	.LFB2
 2357 0014 28000000 		.4byte	.LFE2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 77


 2358 0018 00000000 		.4byte	.LFB3
 2359 001c 70000000 		.4byte	.LFE3
 2360 0020 00000000 		.4byte	.LFB4
 2361 0024 64010000 		.4byte	.LFE4
 2362 0028 00000000 		.4byte	.LFB5
 2363 002c 50000000 		.4byte	.LFE5
 2364 0030 00000000 		.4byte	.LFB6
 2365 0034 10010000 		.4byte	.LFE6
 2366 0038 00000000 		.4byte	.LFB7
 2367 003c 54000000 		.4byte	.LFE7
 2368 0040 00000000 		.4byte	.LFB8
 2369 0044 38000000 		.4byte	.LFE8
 2370 0048 00000000 		.4byte	.LFB9
 2371 004c 68000000 		.4byte	.LFE9
 2372 0050 00000000 		.4byte	.LFB10
 2373 0054 6C000000 		.4byte	.LFE10
 2374 0058 00000000 		.4byte	.LFB11
 2375 005c 36000000 		.4byte	.LFE11
 2376 0060 00000000 		.4byte	0
 2377 0064 00000000 		.4byte	0
 2378              		.section	.debug_line,"",%progbits
 2379              	.Ldebug_line0:
 2380 0000 51020000 		.section	.debug_str,"MS",%progbits,1
 2380      02006B00 
 2380      00000201 
 2380      FB0E0D00 
 2380      01010101 
 2381              	.LASF10:
 2382 0000 75696E74 		.ascii	"uint16\000"
 2382      313600
 2383              	.LASF27:
 2384 0007 66696C74 		.ascii	"filteredRawData\000"
 2384      65726564 
 2384      52617744 
 2384      61746100 
 2385              	.LASF55:
 2386 0017 43617053 		.ascii	"CapSense_hysteresis\000"
 2386      656E7365 
 2386      5F687973 
 2386      74657265 
 2386      73697300 
 2387              	.LASF51:
 2388 002b 43617053 		.ascii	"CapSense_sensorOnMask\000"
 2388      656E7365 
 2388      5F73656E 
 2388      736F724F 
 2388      6E4D6173 
 2389              	.LASF32:
 2390 0041 66696E67 		.ascii	"fingerThreshold\000"
 2390      65725468 
 2390      72657368 
 2390      6F6C6400 
 2391              	.LASF60:
 2392 0051 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2392      43313120 
 2392      352E342E 
 2392      31203230 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 78


 2392      31363036 
 2393 0084 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2393      20726576 
 2393      6973696F 
 2393      6E203233 
 2393      37373135 
 2394 00b7 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2394      66756E63 
 2394      74696F6E 
 2394      2D736563 
 2394      74696F6E 
 2395              	.LASF7:
 2396 00df 6C6F6E67 		.ascii	"long long unsigned int\000"
 2396      206C6F6E 
 2396      6720756E 
 2396      7369676E 
 2396      65642069 
 2397              	.LASF50:
 2398 00f6 43617053 		.ascii	"CapSense_sensorSignal\000"
 2398      656E7365 
 2398      5F73656E 
 2398      736F7253 
 2398      69676E61 
 2399              	.LASF22:
 2400 010c 43617053 		.ascii	"CapSense_InitializeEnabledBaselines\000"
 2400      656E7365 
 2400      5F496E69 
 2400      7469616C 
 2400      697A6545 
 2401              	.LASF29:
 2402 0130 43617053 		.ascii	"CapSense_UpdateEnabledBaselines\000"
 2402      656E7365 
 2402      5F557064 
 2402      61746545 
 2402      6E61626C 
 2403              	.LASF6:
 2404 0150 6C6F6E67 		.ascii	"long long int\000"
 2404      206C6F6E 
 2404      6720696E 
 2404      7400
 2405              	.LASF0:
 2406 015e 7369676E 		.ascii	"signed char\000"
 2406      65642063 
 2406      68617200 
 2407              	.LASF42:
 2408 016a 43617053 		.ascii	"CapSense_DisableWidget\000"
 2408      656E7365 
 2408      5F446973 
 2408      61626C65 
 2408      57696467 
 2409              	.LASF37:
 2410 0181 72617749 		.ascii	"rawIndex\000"
 2410      6E646578 
 2410      00
 2411              	.LASF38:
 2412 018a 6E756D62 		.ascii	"numberOfSensors\000"
 2412      65724F66 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 79


 2412      53656E73 
 2412      6F727300 
 2413              	.LASF39:
 2414 019a 73746174 		.ascii	"state\000"
 2414      6500
 2415              	.LASF4:
 2416 01a0 6C6F6E67 		.ascii	"long int\000"
 2416      20696E74 
 2416      00
 2417              	.LASF40:
 2418 01a9 43617053 		.ascii	"CapSense_CheckIsAnyWidgetActive\000"
 2418      656E7365 
 2418      5F436865 
 2418      636B4973 
 2418      416E7957 
 2419              	.LASF9:
 2420 01c9 75696E74 		.ascii	"uint8\000"
 2420      3800
 2421              	.LASF13:
 2422 01cf 646F7562 		.ascii	"double\000"
 2422      6C6500
 2423              	.LASF47:
 2424 01d6 43617053 		.ascii	"CapSense_widgetNumber\000"
 2424      656E7365 
 2424      5F776964 
 2424      6765744E 
 2424      756D6265 
 2425              	.LASF11:
 2426 01ec 75696E74 		.ascii	"uint32\000"
 2426      333200
 2427              	.LASF33:
 2428 01f3 68797374 		.ascii	"hysteresis\000"
 2428      65726573 
 2428      697300
 2429              	.LASF43:
 2430 01fe 43617053 		.ascii	"CapSense_IIR4Filter\000"
 2430      656E7365 
 2430      5F494952 
 2430      3446696C 
 2430      74657200 
 2431              	.LASF8:
 2432 0212 756E7369 		.ascii	"unsigned int\000"
 2432      676E6564 
 2432      20696E74 
 2432      00
 2433              	.LASF5:
 2434 021f 6C6F6E67 		.ascii	"long unsigned int\000"
 2434      20756E73 
 2434      69676E65 
 2434      6420696E 
 2434      7400
 2435              	.LASF49:
 2436 0231 43617053 		.ascii	"CapSense_sensorBaselineLow\000"
 2436      656E7365 
 2436      5F73656E 
 2436      736F7242 
 2436      6173656C 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 80


 2437              	.LASF58:
 2438 024c 43617053 		.ascii	"CapSense_rawDataIndex\000"
 2438      656E7365 
 2438      5F726177 
 2438      44617461 
 2438      496E6465 
 2439              	.LASF3:
 2440 0262 73686F72 		.ascii	"short unsigned int\000"
 2440      7420756E 
 2440      7369676E 
 2440      65642069 
 2440      6E7400
 2441              	.LASF19:
 2442 0275 73656E73 		.ascii	"sensor\000"
 2442      6F7200
 2443              	.LASF46:
 2444 027c 43617053 		.ascii	"CapSense_sensorEnableMask\000"
 2444      656E7365 
 2444      5F73656E 
 2444      736F7245 
 2444      6E61626C 
 2445              	.LASF62:
 2446 0296 433A5C55 		.ascii	"C:\\Users\\JeffSnyder\\dev\\Electrosteel_embedded\\"
 2446      73657273 
 2446      5C4A6566 
 2446      66536E79 
 2446      6465725C 
 2447 02c4 50534F43 		.ascii	"PSOC5_electrosteel_stringsensors_newpcb\\CE210514_P"
 2447      355F656C 
 2447      65637472 
 2447      6F737465 
 2447      656C5F73 
 2448 02f6 534F4333 		.ascii	"SOC3_5_Thermistor.cydsn\000"
 2448      5F355F54 
 2448      6865726D 
 2448      6973746F 
 2448      722E6379 
 2449              	.LASF24:
 2450 030e 43617053 		.ascii	"CapSense_UpdateSensorBaseline\000"
 2450      656E7365 
 2450      5F557064 
 2450      61746553 
 2450      656E736F 
 2451              	.LASF25:
 2452 032c 63616C63 		.ascii	"calc\000"
 2452      00
 2453              	.LASF34:
 2454 0331 6465626F 		.ascii	"debounce\000"
 2454      756E6365 
 2454      00
 2455              	.LASF16:
 2456 033a 73697A65 		.ascii	"sizetype\000"
 2456      74797065 
 2456      00
 2457              	.LASF41:
 2458 0343 43617053 		.ascii	"CapSense_EnableWidget\000"
 2458      656E7365 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 81


 2458      5F456E61 
 2458      626C6557 
 2458      69646765 
 2459              	.LASF15:
 2460 0359 6C6F6E67 		.ascii	"long double\000"
 2460      20646F75 
 2460      626C6500 
 2461              	.LASF18:
 2462 0365 43617053 		.ascii	"CapSense_InitializeSensorBaseline\000"
 2462      656E7365 
 2462      5F496E69 
 2462      7469616C 
 2462      697A6553 
 2463              	.LASF35:
 2464 0387 43617053 		.ascii	"CapSense_CheckIsSensorActive\000"
 2464      656E7365 
 2464      5F436865 
 2464      636B4973 
 2464      53656E73 
 2465              	.LASF23:
 2466 03a4 656E4D61 		.ascii	"enMask\000"
 2466      736B00
 2467              	.LASF54:
 2468 03ab 43617053 		.ascii	"CapSense_noiseThreshold\000"
 2468      656E7365 
 2468      5F6E6F69 
 2468      73655468 
 2468      72657368 
 2469              	.LASF53:
 2470 03c3 43617053 		.ascii	"CapSense_fingerThreshold\000"
 2470      656E7365 
 2470      5F66696E 
 2470      67657254 
 2470      68726573 
 2471              	.LASF45:
 2472 03dc 43617053 		.ascii	"CapSense_rawFilterData1\000"
 2472      656E7365 
 2472      5F726177 
 2472      46696C74 
 2472      65724461 
 2473              	.LASF12:
 2474 03f4 666C6F61 		.ascii	"float\000"
 2474      7400
 2475              	.LASF36:
 2476 03fa 43617053 		.ascii	"CapSense_CheckIsWidgetActive\000"
 2476      656E7365 
 2476      5F436865 
 2476      636B4973 
 2476      57696467 
 2477              	.LASF1:
 2478 0417 756E7369 		.ascii	"unsigned char\000"
 2478      676E6564 
 2478      20636861 
 2478      7200
 2479              	.LASF20:
 2480 0425 43617053 		.ascii	"CapSense_InitializeAllBaselines\000"
 2480      656E7365 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 82


 2480      5F496E69 
 2480      7469616C 
 2480      697A6541 
 2481              	.LASF28:
 2482 0445 6E6F6973 		.ascii	"noiseThreshold\000"
 2482      65546872 
 2482      6573686F 
 2482      6C6400
 2483              	.LASF2:
 2484 0454 73686F72 		.ascii	"short int\000"
 2484      7420696E 
 2484      7400
 2485              	.LASF21:
 2486 045e 77696467 		.ascii	"widget\000"
 2486      657400
 2487              	.LASF31:
 2488 0465 6F6E4D61 		.ascii	"onMask\000"
 2488      736B00
 2489              	.LASF17:
 2490 046c 43617053 		.ascii	"CapSense_BaseInit\000"
 2490      656E7365 
 2490      5F426173 
 2490      65496E69 
 2490      7400
 2491              	.LASF52:
 2492 047e 43617053 		.ascii	"CapSense_lowBaselineResetCnt\000"
 2492      656E7365 
 2492      5F6C6F77 
 2492      42617365 
 2492      6C696E65 
 2493              	.LASF56:
 2494 049b 43617053 		.ascii	"CapSense_debounce\000"
 2494      656E7365 
 2494      5F646562 
 2494      6F756E63 
 2494      6500
 2495              	.LASF48:
 2496 04ad 43617053 		.ascii	"CapSense_sensorBaseline\000"
 2496      656E7365 
 2496      5F73656E 
 2496      736F7242 
 2496      6173656C 
 2497              	.LASF14:
 2498 04c5 63686172 		.ascii	"char\000"
 2498      00
 2499              	.LASF30:
 2500 04ca 6465626F 		.ascii	"debounceIndex\000"
 2500      756E6365 
 2500      496E6465 
 2500      7800
 2501              	.LASF61:
 2502 04d8 47656E65 		.ascii	"Generated_Source\\PSoC5\\CapSense_CSHL.c\000"
 2502      72617465 
 2502      645F536F 
 2502      75726365 
 2502      5C50536F 
 2503              	.LASF44:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccPS5Aw0.s 			page 83


 2504 04ff 43617053 		.ascii	"CapSense_sensorRaw\000"
 2504      656E7365 
 2504      5F73656E 
 2504      736F7252 
 2504      617700
 2505              	.LASF57:
 2506 0512 43617053 		.ascii	"CapSense_debounceCounter\000"
 2506      656E7365 
 2506      5F646562 
 2506      6F756E63 
 2506      65436F75 
 2507              	.LASF26:
 2508 052b 74656D70 		.ascii	"tempRaw\000"
 2508      52617700 
 2509              	.LASF59:
 2510 0533 43617053 		.ascii	"CapSense_numberOfSensors\000"
 2510      656E7365 
 2510      5F6E756D 
 2510      6265724F 
 2510      6653656E 
 2511              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
