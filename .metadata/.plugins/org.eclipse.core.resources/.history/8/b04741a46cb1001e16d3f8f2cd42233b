/*
 * string3.c
 *
 *  Created on: Jan 11, 2024
 *      Author: jeffsnyder
 */


/*
 * string2.c
 *
 *  Created on: Dec 27, 2023
 *      Author: jeffsnyder
 */




#include "main.h"
#include "leaf.h"
#include "codec.h"
#include "i2c.h"
#include "gpio.h"
#include "spi.h"
#include "parameters.h"
#include "audiostream.h"
#include "arm_math.h"
#include "string3.h"


tStiffString stringsC[NUM_STRINGS_PER_BOARD];




void __ATTR_ITCMRAM audioInitString3()
{

	for (int v = 0; v < numStringsThisBoard; v++)
	{
		tStiffString_init(&stringsC[v], 60, &leaf);
	}
}


void __ATTR_ITCMRAM audioFreeString3()
{
	for (int v = 0; v < numStringsThisBoard; v++)
	{
		tStiffString_free(&stringsC[v]);
	}
}

void __ATTR_ITCMRAM audioFrameString3(uint16_t buffer_offset)
{
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
		uint32_t tempCountFrame = DWT->CYCCNT;
		int32_t current_sample = 0;

		if (resetStringInputs)
		{
			for (int i = 0; i < numStringsThisBoard; i++)
			{
				//note off
				//tTString_mute(&strings[i]);
				previousStringInputs[i] = 0;
			}
			resetStringInputs = 0;
			newPluck = 1;
		}
		float theNote[NUM_STRINGS_PER_BOARD];
		for (int i = 0; i < numStringsThisBoard; i++)
		{
			theNote[i] = stringMIDIPitches[i] + stringOctave[i];

			if (theNote[i] < 0.0f)
			{
				theNote[i] = 0.0f;
			}
			if (theNote[i] > 127.0f)
			{
				theNote[i] = 127.0f;
			}
			if (isnan(theNote[i]))
			{
				theNote[i] = 64.0f;
			}

			float finalFreq = mtofTableLookup(theNote[i]);
			//float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
			tStiffString_setFreq(&stringsC[i], finalFreq);

			tStiffString_setPluckPos(&stringsC[i], knobScaled[0]);
			tStiffString_setPickupPos(&stringsC[i], knobScaled[1]);
			tStiffString_setStiffness(&stringsC[i], knobScaled[2]);
			tStiffString_setDecay(&stringsC[i], knobScaled[4]);
			tStiffString_setDecayHF(&stringsC[i], knobScaled[4]);
		}
		//mono operation, no need to compute right channel. Also for loop iterating by 2 instead of 1 to avoid if statement.
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
		{
			int iplusbuffer = buffer_offset + i;
			current_sample = (int32_t)(audioTickString3() * TWO_TO_23);
			audioOutBuffer[iplusbuffer] = current_sample;
			audioOutBuffer[iplusbuffer + 1] = current_sample;
		}
		if (switchStrings)
		{
			switchStringModel(switchStrings);
		}
		switchStrings = 0;
		timeFrame = DWT->CYCCNT - tempCountFrame;
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}



float str3Amps[NUM_STRINGS_PER_BOARD];

float __ATTR_ITCMRAM audioTickString3(void)
{
	float temp = 0.0f;


	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
	}

	/*
	  specialModeMacroNames[1][0] = "DecayTime ";
	  specialModeMacroNames[1][1] = "Tone      ";
	  specialModeMacroNames[1][2] = "PluckPos  ";
	  specialModeMacroNames[1][3] = "PickupPos ";
	  specialModeMacroNames[1][4] = "SlideNois ";
	  specialModeMacroNames[1][5] = "Stiffness ";
	  specialModeMacroNames[1][6] = "FB Amp    ";
	  specialModeMacroNames[1][7] = "FB Speed  ";
	  specialModeMacroNames[1][8] = "PU Filter ";
	  specialModeMacroNames[1][9] = "Harmonic  ";
	  specialModeMacroNames[1][10] = "HarmPosX  ";
	  specialModeMacroNames[1][11] = "HarmPosY  ";
	  specialModeMacroNames[1][12] = "PUModRate ";
	  specialModeMacroNames[1][13] = "PUModAmp  ";
	  specialModeMacroNames[1][14] = "Ph Harm G ";
	  specialModeMacroNames[1][15] = "PUFilterQ ";
	  specialModeMacroNames[1][16] = "PeakF Q   ";
	  specialModeMacroNames[1][17] = "PeakF Frq ";
	  specialModeMacroNames[1][18] = "Tension G ";
	  specialModeMacroNames[1][19] = "Tension S ";
	  */
	if (newPluck)
	{
		float theNote[NUM_STRINGS_PER_BOARD];
		for (int i = 0; i < numStringsThisBoard; i++)
		{
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
			{
				str3Amps[i] = stringInputs[i] * 0.000015259021897f;
				stringOctave[i] = octave;

				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
				if (theNote[i] < 0.0f)
				{
					theNote[i] = 0.0f;
				}
				if (theNote[i] > 127.0f)
				{
					theNote[i] = 127.0f;
				}
				if (isnan(theNote[i]))
				{
					theNote[i] = 64.0f;
				}
				float finalFreq = mtofTableLookup(theNote[i]);
				tStiffString_setFreq(&stringsC[i], finalFreq);
				tStiffString_setInitialAmplitudes(&stringsC[i]);

			}
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
			{
				//note off
				//tTString_mute(&strings[i]);
			}
			previousStringInputs[i] = stringInputs[i];
		}
		newPluck = 0;
	}
	for (int i = 0; i < numStringsThisBoard; i++)
	{


		temp += tStiffString_tick(&stringsC[i]) * str3Amps[i];
	}
	//float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	//temp *= outVol;
	temp *= outVol * masterVolFromBrain;
	temp = tanhf(temp);
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
}
