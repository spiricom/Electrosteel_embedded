
Electrosteel_Daisy_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008e60  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  080090f8  080090f8  00020018  2**0
                  CONTENTS
  3 .exidx        00000000  080090f8  080090f8  00020018  2**0
                  CONTENTS
  4 .ARM.attributes 0000002e  080090f8  080090f8  00020018  2**0
                  CONTENTS, READONLY
  5 .init_array   00000004  080090f8  080090f8  000190f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080090fc  080090fc  000190fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000018  20000000  08009100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000938  20000018  08009118  00020018  2**2
                  ALLOC
  9 .dtcmram_bss  00000000  20000950  20000950  00020046  2**0
                  CONTENTS
 10 .sram1_bss    00040000  24000000  24000000  00030000  2**5
                  ALLOC
 11 .userflash    00000020  38800000  38800000  00030000  2**5
                  ALLOC
 12 .sdram_bss    00000000  c0000000  c0000000  00020046  2**0
                  CONTENTS
 13 .qspiflash_text 00000000  90000000  90000000  00020046  2**0
                  CONTENTS
 14 .qspiflash_data 00000000  90000000  90000000  00020046  2**0
                  CONTENTS
 15 .qspiflash_bss 00040000  90000000  90000000  00030000  2**5
                  ALLOC
 16 .heap         00000000  20000950  20000950  00020046  2**0
                  CONTENTS
 17 .reserved_for_stack 00000000  20000950  20000950  00020046  2**0
                  CONTENTS
 18 .debug_info   000236ec  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00003af2  00000000  00000000  00043732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00001308  00000000  00000000  00047224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 000012b8  00000000  00000000  0004852c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0003972c  00000000  00000000  000497e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   0002367e  00000000  00000000  00082f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    0015c32b  00000000  00000000  000a658e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      00000050  00000000  00000000  002028b9  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0000366c  00000000  00000000  0020290c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_loc    000152fc  00000000  00000000  00205f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000018 	.word	0x20000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080090f8 	.word	0x080090f8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2000001c 	.word	0x2000001c
 80002d4:	080090f8 	.word	0x080090f8

080002d8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80002d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002dc:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	2400      	movs	r4, #0
 80002e0:	9409      	str	r4, [sp, #36]	; 0x24
 80002e2:	940a      	str	r4, [sp, #40]	; 0x28
 80002e4:	940b      	str	r4, [sp, #44]	; 0x2c
 80002e6:	940c      	str	r4, [sp, #48]	; 0x30
 80002e8:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002ea:	4b8d      	ldr	r3, [pc, #564]	; (8000520 <MX_GPIO_Init+0x248>)
 80002ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80002f0:	f042 0210 	orr.w	r2, r2, #16
 80002f4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80002f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80002fc:	f002 0210 	and.w	r2, r2, #16
 8000300:	9200      	str	r2, [sp, #0]
 8000302:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000304:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000308:	f042 0202 	orr.w	r2, r2, #2
 800030c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000310:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000314:	f002 0202 	and.w	r2, r2, #2
 8000318:	9201      	str	r2, [sp, #4]
 800031a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800031c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000324:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000328:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800032c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000330:	9202      	str	r2, [sp, #8]
 8000332:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000334:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000338:	f042 0208 	orr.w	r2, r2, #8
 800033c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000340:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000344:	f002 0208 	and.w	r2, r2, #8
 8000348:	9203      	str	r2, [sp, #12]
 800034a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000350:	f042 0204 	orr.w	r2, r2, #4
 8000354:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000358:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800035c:	f002 0204 	and.w	r2, r2, #4
 8000360:	9204      	str	r2, [sp, #16]
 8000362:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000364:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000368:	f042 0201 	orr.w	r2, r2, #1
 800036c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000370:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000374:	f002 0201 	and.w	r2, r2, #1
 8000378:	9205      	str	r2, [sp, #20]
 800037a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800037c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000384:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000388:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800038c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000390:	9206      	str	r2, [sp, #24]
 8000392:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000394:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000398:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800039c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80003a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80003a4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80003a8:	9207      	str	r2, [sp, #28]
 80003aa:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80003b0:	f042 0220 	orr.w	r2, r2, #32
 80003b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80003b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003bc:	f003 0320 	and.w	r3, r3, #32
 80003c0:	9308      	str	r3, [sp, #32]
 80003c2:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80003c4:	4e57      	ldr	r6, [pc, #348]	; (8000524 <MX_GPIO_Init+0x24c>)
 80003c6:	4622      	mov	r2, r4
 80003c8:	2180      	movs	r1, #128	; 0x80
 80003ca:	4630      	mov	r0, r6
 80003cc:	f001 fcdd 	bl	8001d8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80003d0:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8000540 <MX_GPIO_Init+0x268>
 80003d4:	4622      	mov	r2, r4
 80003d6:	2180      	movs	r1, #128	; 0x80
 80003d8:	4648      	mov	r0, r9
 80003da:	f001 fcd6 	bl	8001d8a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE1 PE0
                           PE4 PE5 PE6 PE13
                           PE8 PE9 PE11 PE14
                           PE7 PE10 PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 80003de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003e2:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_13
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e4:	2503      	movs	r5, #3
 80003e6:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003ea:	a909      	add	r1, sp, #36	; 0x24
 80003ec:	484e      	ldr	r0, [pc, #312]	; (8000528 <MX_GPIO_Init+0x250>)
 80003ee:	f001 fb0d 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB4 PB2 PB13
                           PB1 PB0 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_13
 80003f2:	f642 4337 	movw	r3, #11319	; 0x2c37
 80003f6:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003f8:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003fc:	a909      	add	r1, sp, #36	; 0x24
 80003fe:	4630      	mov	r0, r6
 8000400:	f001 fb04 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG12
                           PG11 PG10 PG9 PG8
                           PG7 PG5 PG4 PG3
                           PG2 PG1 PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12
 8000404:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8000408:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800040a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800040e:	a909      	add	r1, sp, #36	; 0x24
 8000410:	4846      	ldr	r0, [pc, #280]	; (800052c <MX_GPIO_Init+0x254>)
 8000412:	f001 fafb 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD1 PD4 PD3 PD15
                           PD14 PD13 PD12 PD11
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 8000416:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800041a:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_15
                          |GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_11
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800041c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000420:	a909      	add	r1, sp, #36	; 0x24
 8000422:	4843      	ldr	r0, [pc, #268]	; (8000530 <MX_GPIO_Init+0x258>)
 8000424:	f001 faf2 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA9 PA8 PA0 PA4
                           PA6 PA5 PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 8000428:	f649 73f9 	movw	r3, #40953	; 0x9ff9
 800042c:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800042e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000432:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8000544 <MX_GPIO_Init+0x26c>
 8000436:	a909      	add	r1, sp, #36	; 0x24
 8000438:	4640      	mov	r0, r8
 800043a:	f001 fae7 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800043e:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8000442:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000446:	2701      	movs	r7, #1
 8000448:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044c:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800044e:	a909      	add	r1, sp, #36	; 0x24
 8000450:	4630      	mov	r0, r6
 8000452:	f001 fadb 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000456:	2340      	movs	r3, #64	; 0x40
 8000458:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800045a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800045c:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800045e:	a909      	add	r1, sp, #36	; 0x24
 8000460:	4630      	mov	r0, r6
 8000462:	f001 fad3 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI7 PI6 PI5 PI3
                           PI2 PI8 PI9 PI4
                           PI1 PI10 PI11 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
 8000466:	f640 73ff 	movw	r3, #4095	; 0xfff
 800046a:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4
                          |GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800046c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000470:	a909      	add	r1, sp, #36	; 0x24
 8000472:	4830      	ldr	r0, [pc, #192]	; (8000534 <MX_GPIO_Init+0x25c>)
 8000474:	f001 faca 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 8000478:	f24e 037f 	movw	r3, #57471	; 0xe07f
 800047c:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800047e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000480:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000482:	a909      	add	r1, sp, #36	; 0x24
 8000484:	4648      	mov	r0, r9
 8000486:	f001 fac1 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH2
                           PH3 PH4 PH5 PH12
                           PH11 PH10 PH6 PH8
                           PH9 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
 800048a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800048e:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000490:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000494:	a909      	add	r1, sp, #36	; 0x24
 8000496:	4828      	ldr	r0, [pc, #160]	; (8000538 <MX_GPIO_Init+0x260>)
 8000498:	f001 fab8 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF2 PF1 PF3
                           PF4 PF5 PF13 PF12
                           PF15 PF11 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 800049c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80004a0:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004a2:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004a6:	a909      	add	r1, sp, #36	; 0x24
 80004a8:	4824      	ldr	r0, [pc, #144]	; (800053c <MX_GPIO_Init+0x264>)
 80004aa:	f001 faaf 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004ae:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b2:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b6:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b8:	a909      	add	r1, sp, #36	; 0x24
 80004ba:	4648      	mov	r0, r9
 80004bc:	f001 faa6 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004c0:	2302      	movs	r3, #2
 80004c2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004c6:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c8:	a909      	add	r1, sp, #36	; 0x24
 80004ca:	4640      	mov	r0, r8
 80004cc:	f001 fa9e 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004d0:	2304      	movs	r3, #4
 80004d2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d8:	a909      	add	r1, sp, #36	; 0x24
 80004da:	4640      	mov	r0, r8
 80004dc:	f001 fa96 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80004e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004e4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80004ea:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ee:	a909      	add	r1, sp, #36	; 0x24
 80004f0:	4630      	mov	r0, r6
 80004f2:	f001 fa8b 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80004f6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80004fa:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fc:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000500:	a909      	add	r1, sp, #36	; 0x24
 8000502:	4630      	mov	r0, r6
 8000504:	f001 fa82 	bl	8001a0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000508:	4622      	mov	r2, r4
 800050a:	4639      	mov	r1, r7
 800050c:	2028      	movs	r0, #40	; 0x28
 800050e:	f001 f9b3 	bl	8001878 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000512:	2028      	movs	r0, #40	; 0x28
 8000514:	f001 f9e6 	bl	80018e4 <HAL_NVIC_EnableIRQ>

}
 8000518:	b00e      	add	sp, #56	; 0x38
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	bf00      	nop
 8000520:	58024400 	.word	0x58024400
 8000524:	58020400 	.word	0x58020400
 8000528:	58021000 	.word	0x58021000
 800052c:	58021800 	.word	0x58021800
 8000530:	58020c00 	.word	0x58020c00
 8000534:	58022000 	.word	0x58022000
 8000538:	58021c00 	.word	0x58021c00
 800053c:	58021400 	.word	0x58021400
 8000540:	58020800 	.word	0x58020800
 8000544:	58020000 	.word	0x58020000

08000548 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000548:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800054a:	4813      	ldr	r0, [pc, #76]	; (8000598 <MX_I2C1_Init+0x50>)
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <MX_I2C1_Init+0x54>)
 800054e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8000550:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <MX_I2C1_Init+0x58>)
 8000552:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 68;
 8000554:	2344      	movs	r3, #68	; 0x44
 8000556:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000558:	2301      	movs	r3, #1
 800055a:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800055c:	2300      	movs	r3, #0
 800055e:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000560:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000562:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000564:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000566:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000568:	f001 fddc 	bl	8002124 <HAL_I2C_Init>
 800056c:	b950      	cbnz	r0, 8000584 <MX_I2C1_Init+0x3c>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800056e:	2100      	movs	r1, #0
 8000570:	4809      	ldr	r0, [pc, #36]	; (8000598 <MX_I2C1_Init+0x50>)
 8000572:	f001 ffcf 	bl	8002514 <HAL_I2CEx_ConfigAnalogFilter>
 8000576:	b940      	cbnz	r0, 800058a <MX_I2C1_Init+0x42>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000578:	2100      	movs	r1, #0
 800057a:	4807      	ldr	r0, [pc, #28]	; (8000598 <MX_I2C1_Init+0x50>)
 800057c:	f001 fff8 	bl	8002570 <HAL_I2CEx_ConfigDigitalFilter>
 8000580:	b930      	cbnz	r0, 8000590 <MX_I2C1_Init+0x48>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000582:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000584:	f000 fc44 	bl	8000e10 <Error_Handler>
 8000588:	e7f1      	b.n	800056e <MX_I2C1_Init+0x26>
    Error_Handler();
 800058a:	f000 fc41 	bl	8000e10 <Error_Handler>
 800058e:	e7f3      	b.n	8000578 <MX_I2C1_Init+0x30>
    Error_Handler();
 8000590:	f000 fc3e 	bl	8000e10 <Error_Handler>
}
 8000594:	e7f5      	b.n	8000582 <MX_I2C1_Init+0x3a>
 8000596:	bf00      	nop
 8000598:	20000034 	.word	0x20000034
 800059c:	40005400 	.word	0x40005400
 80005a0:	00b03fdb 	.word	0x00b03fdb

080005a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005a4:	b510      	push	{r4, lr}
 80005a6:	b0b8      	sub	sp, #224	; 0xe0
 80005a8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	2100      	movs	r1, #0
 80005ac:	9133      	str	r1, [sp, #204]	; 0xcc
 80005ae:	9134      	str	r1, [sp, #208]	; 0xd0
 80005b0:	9135      	str	r1, [sp, #212]	; 0xd4
 80005b2:	9136      	str	r1, [sp, #216]	; 0xd8
 80005b4:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005b6:	22c0      	movs	r2, #192	; 0xc0
 80005b8:	a802      	add	r0, sp, #8
 80005ba:	f008 fb49 	bl	8008c50 <memset>
  if(i2cHandle->Instance==I2C1)
 80005be:	6822      	ldr	r2, [r4, #0]
 80005c0:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <HAL_I2C_MspInit+0x90>)
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d001      	beq.n	80005ca <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005c6:	b038      	add	sp, #224	; 0xe0
 80005c8:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80005ca:	2208      	movs	r2, #8
 80005cc:	2300      	movs	r3, #0
 80005ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005d2:	a802      	add	r0, sp, #8
 80005d4:	f003 fac2 	bl	8003b5c <HAL_RCCEx_PeriphCLKConfig>
 80005d8:	bb40      	cbnz	r0, 800062c <HAL_I2C_MspInit+0x88>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005da:	4c17      	ldr	r4, [pc, #92]	; (8000638 <HAL_I2C_MspInit+0x94>)
 80005dc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80005e8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80005ec:	f003 0302 	and.w	r3, r3, #2
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005f8:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005fa:	2312      	movs	r3, #18
 80005fc:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000602:	2303      	movs	r3, #3
 8000604:	9336      	str	r3, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000606:	2304      	movs	r3, #4
 8000608:	9337      	str	r3, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060a:	a933      	add	r1, sp, #204	; 0xcc
 800060c:	480b      	ldr	r0, [pc, #44]	; (800063c <HAL_I2C_MspInit+0x98>)
 800060e:	f001 f9fd 	bl	8001a0c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000612:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8000616:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800061a:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 800061e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8000622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	9b01      	ldr	r3, [sp, #4]
}
 800062a:	e7cc      	b.n	80005c6 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 800062c:	f000 fbf0 	bl	8000e10 <Error_Handler>
 8000630:	e7d3      	b.n	80005da <HAL_I2C_MspInit+0x36>
 8000632:	bf00      	nop
 8000634:	40005400 	.word	0x40005400
 8000638:	58024400 	.word	0x58024400
 800063c:	58020400 	.word	0x58020400

08000640 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 8000640:	6802      	ldr	r2, [r0, #0]
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <HAL_I2C_MspDeInit+0x34>)
 8000644:	429a      	cmp	r2, r3
 8000646:	d000      	beq.n	800064a <HAL_I2C_MspDeInit+0xa>
 8000648:	4770      	bx	lr
{
 800064a:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800064c:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <HAL_I2C_MspDeInit+0x38>)
 800064e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8000652:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000656:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800065a:	4c08      	ldr	r4, [pc, #32]	; (800067c <HAL_I2C_MspDeInit+0x3c>)
 800065c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000660:	4620      	mov	r0, r4
 8000662:	f001 fae3 	bl	8001c2c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8000666:	f44f 7100 	mov.w	r1, #512	; 0x200
 800066a:	4620      	mov	r0, r4
 800066c:	f001 fade 	bl	8001c2c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8000670:	bd10      	pop	{r4, pc}
 8000672:	bf00      	nop
 8000674:	40005400 	.word	0x40005400
 8000678:	58024400 	.word	0x58024400
 800067c:	58020400 	.word	0x58020400

08000680 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000680:	b510      	push	{r4, lr}
 8000682:	b084      	sub	sp, #16
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000684:	2400      	movs	r4, #0
 8000686:	9400      	str	r4, [sp, #0]
 8000688:	9401      	str	r4, [sp, #4]
 800068a:	9402      	str	r4, [sp, #8]
 800068c:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800068e:	f001 f96f 	bl	8001970 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000692:	2301      	movs	r3, #1
 8000694:	f88d 3000 	strb.w	r3, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000698:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 800069c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80006a0:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 80006a2:	2316      	movs	r3, #22
 80006a4:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80006a8:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80006ac:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80006b0:	2303      	movs	r3, #3
 80006b2:	f88d 300b 	strb.w	r3, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80006b6:	f88d 400c 	strb.w	r4, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80006ba:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80006be:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80006c2:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80006c6:	4668      	mov	r0, sp
 80006c8:	f001 f970 	bl	80019ac <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80006cc:	2004      	movs	r0, #4
 80006ce:	f001 f95d 	bl	800198c <HAL_MPU_Enable>

}
 80006d2:	b004      	add	sp, #16
 80006d4:	bd10      	pop	{r4, pc}

080006d6 <BSP_SD_IsDetected>:
{
 80006d6:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 80006d8:	2301      	movs	r3, #1
 80006da:	f88d 3007 	strb.w	r3, [sp, #7]
  return status;
 80006de:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80006e2:	b002      	add	sp, #8
 80006e4:	4770      	bx	lr
	...

080006e8 <qspi_error>:
{
 80006e8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	4802      	ldr	r0, [pc, #8]	; (80006f8 <qspi_error+0x10>)
 80006f0:	f001 fb4b 	bl	8001d8a <HAL_GPIO_WritePin>
}
 80006f4:	bd08      	pop	{r3, pc}
 80006f6:	bf00      	nop
 80006f8:	58020800 	.word	0x58020800

080006fc <AutopollingMemReady>:
{
 80006fc:	b500      	push	{lr}
 80006fe:	b095      	sub	sp, #84	; 0x54
 8000700:	4603      	mov	r3, r0
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000706:	920c      	str	r2, [sp, #48]	; 0x30
	    s_command.Instruction       = READ_STATUS_REG_CMD;
 8000708:	2205      	movs	r2, #5
 800070a:	9206      	str	r2, [sp, #24]
	    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800070c:	2200      	movs	r2, #0
 800070e:	920d      	str	r2, [sp, #52]	; 0x34
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000710:	920e      	str	r2, [sp, #56]	; 0x38
	    s_command.DataMode          = QSPI_DATA_1_LINE;
 8000712:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000716:	910f      	str	r1, [sp, #60]	; 0x3c
	    s_command.DummyCycles       = 0;
 8000718:	920b      	str	r2, [sp, #44]	; 0x2c
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800071a:	9211      	str	r2, [sp, #68]	; 0x44
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800071c:	9212      	str	r2, [sp, #72]	; 0x48
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800071e:	9213      	str	r2, [sp, #76]	; 0x4c
	    s_config.Match         = 0;
 8000720:	9200      	str	r2, [sp, #0]
	    s_config.MatchMode     = QSPI_MATCH_MODE_AND;
 8000722:	9204      	str	r2, [sp, #16]
	    s_config.Interval      = 0x10;
 8000724:	2210      	movs	r2, #16
 8000726:	9202      	str	r2, [sp, #8]
	    s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000728:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800072c:	9205      	str	r2, [sp, #20]
	    s_config.Mask          = IS25LP064A_SR_WIP;
 800072e:	2201      	movs	r2, #1
 8000730:	9201      	str	r2, [sp, #4]
	    s_config.StatusBytesSize = 1;
 8000732:	9203      	str	r2, [sp, #12]
	    if(HAL_QSPI_AutoPolling(&hqspi, &s_command, &s_config, timeout)
 8000734:	466a      	mov	r2, sp
 8000736:	a906      	add	r1, sp, #24
 8000738:	4805      	ldr	r0, [pc, #20]	; (8000750 <AutopollingMemReady+0x54>)
 800073a:	f002 f94d 	bl	80029d8 <HAL_QSPI_AutoPolling>
 800073e:	b918      	cbnz	r0, 8000748 <AutopollingMemReady+0x4c>
}
 8000740:	2001      	movs	r0, #1
 8000742:	b015      	add	sp, #84	; 0x54
 8000744:	f85d fb04 	ldr.w	pc, [sp], #4
	    	qspi_error();
 8000748:	f7ff ffce 	bl	80006e8 <qspi_error>
 800074c:	e7f8      	b.n	8000740 <AutopollingMemReady+0x44>
 800074e:	bf00      	nop
 8000750:	200001e8 	.word	0x200001e8

08000754 <qspi_WriteEnable>:
{
 8000754:	b500      	push	{lr}
 8000756:	b095      	sub	sp, #84	; 0x54
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800075c:	930c      	str	r3, [sp, #48]	; 0x30
	    s_command.Instruction       = WRITE_ENABLE_CMD;
 800075e:	2306      	movs	r3, #6
 8000760:	9306      	str	r3, [sp, #24]
	    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000762:	2300      	movs	r3, #0
 8000764:	930d      	str	r3, [sp, #52]	; 0x34
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000766:	930e      	str	r3, [sp, #56]	; 0x38
	    s_command.DataMode          = QSPI_DATA_NONE;
 8000768:	930f      	str	r3, [sp, #60]	; 0x3c
	    s_command.DummyCycles       = 0;
 800076a:	930b      	str	r3, [sp, #44]	; 0x2c
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800076c:	9311      	str	r3, [sp, #68]	; 0x44
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800076e:	9312      	str	r3, [sp, #72]	; 0x48
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000770:	9313      	str	r3, [sp, #76]	; 0x4c
	    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000772:	f241 3288 	movw	r2, #5000	; 0x1388
 8000776:	a906      	add	r1, sp, #24
 8000778:	4813      	ldr	r0, [pc, #76]	; (80007c8 <qspi_WriteEnable+0x74>)
 800077a:	f002 f875 	bl	8002868 <HAL_QSPI_Command>
 800077e:	b9e0      	cbnz	r0, 80007ba <qspi_WriteEnable+0x66>
	    s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8000780:	2300      	movs	r3, #0
 8000782:	9304      	str	r3, [sp, #16]
	    s_config.Match           = IS25LP064A_SR_WREN;
 8000784:	2302      	movs	r3, #2
 8000786:	9300      	str	r3, [sp, #0]
	    s_config.Mask            = IS25LP064A_SR_WREN;
 8000788:	9301      	str	r3, [sp, #4]
	    s_config.Interval        = 0x10;
 800078a:	2310      	movs	r3, #16
 800078c:	9302      	str	r3, [sp, #8]
	    s_config.StatusBytesSize = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	9303      	str	r3, [sp, #12]
	    s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000792:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000796:	9305      	str	r3, [sp, #20]
	    s_command.Instruction = READ_STATUS_REG_CMD;
 8000798:	2305      	movs	r3, #5
 800079a:	9306      	str	r3, [sp, #24]
	    s_command.DataMode    = QSPI_DATA_1_LINE;
 800079c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007a0:	930f      	str	r3, [sp, #60]	; 0x3c
	    if(HAL_QSPI_AutoPolling(
 80007a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80007a6:	466a      	mov	r2, sp
 80007a8:	a906      	add	r1, sp, #24
 80007aa:	4807      	ldr	r0, [pc, #28]	; (80007c8 <qspi_WriteEnable+0x74>)
 80007ac:	f002 f914 	bl	80029d8 <HAL_QSPI_AutoPolling>
 80007b0:	b930      	cbnz	r0, 80007c0 <qspi_WriteEnable+0x6c>
}
 80007b2:	2001      	movs	r0, #1
 80007b4:	b015      	add	sp, #84	; 0x54
 80007b6:	f85d fb04 	ldr.w	pc, [sp], #4
	    	qspi_error();
 80007ba:	f7ff ff95 	bl	80006e8 <qspi_error>
 80007be:	e7df      	b.n	8000780 <qspi_WriteEnable+0x2c>
	    	qspi_error();
 80007c0:	f7ff ff92 	bl	80006e8 <qspi_error>
 80007c4:	e7f5      	b.n	80007b2 <qspi_WriteEnable+0x5e>
 80007c6:	bf00      	nop
 80007c8:	200001e8 	.word	0x200001e8

080007cc <qspi_reset_memory>:
{
 80007cc:	b500      	push	{lr}
 80007ce:	b08f      	sub	sp, #60	; 0x3c
		    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80007d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007d4:	9306      	str	r3, [sp, #24]
		    s_command.Instruction       = RESET_ENABLE_CMD;
 80007d6:	2366      	movs	r3, #102	; 0x66
 80007d8:	9300      	str	r3, [sp, #0]
		    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80007da:	2300      	movs	r3, #0
 80007dc:	9307      	str	r3, [sp, #28]
		    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80007de:	9308      	str	r3, [sp, #32]
		    s_command.DataMode          = QSPI_DATA_NONE;
 80007e0:	9309      	str	r3, [sp, #36]	; 0x24
		    s_command.DummyCycles       = 0;
 80007e2:	9305      	str	r3, [sp, #20]
		    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80007e4:	930b      	str	r3, [sp, #44]	; 0x2c
		    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80007e6:	930c      	str	r3, [sp, #48]	; 0x30
		    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80007e8:	930d      	str	r3, [sp, #52]	; 0x34
		    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80007ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80007ee:	4669      	mov	r1, sp
 80007f0:	480f      	ldr	r0, [pc, #60]	; (8000830 <qspi_reset_memory+0x64>)
 80007f2:	f002 f839 	bl	8002868 <HAL_QSPI_Command>
 80007f6:	b988      	cbnz	r0, 800081c <qspi_reset_memory+0x50>
		    s_command.Instruction = RESET_MEMORY_CMD;
 80007f8:	2399      	movs	r3, #153	; 0x99
 80007fa:	9300      	str	r3, [sp, #0]
		    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80007fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000800:	4669      	mov	r1, sp
 8000802:	480b      	ldr	r0, [pc, #44]	; (8000830 <qspi_reset_memory+0x64>)
 8000804:	f002 f830 	bl	8002868 <HAL_QSPI_Command>
 8000808:	b958      	cbnz	r0, 8000822 <qspi_reset_memory+0x56>
		    if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800080a:	f241 3088 	movw	r0, #5000	; 0x1388
 800080e:	f7ff ff75 	bl	80006fc <AutopollingMemReady>
 8000812:	2801      	cmp	r0, #1
 8000814:	d108      	bne.n	8000828 <qspi_reset_memory+0x5c>
}
 8000816:	b00f      	add	sp, #60	; 0x3c
 8000818:	f85d fb04 	ldr.w	pc, [sp], #4
		    	qspi_error();
 800081c:	f7ff ff64 	bl	80006e8 <qspi_error>
 8000820:	e7ea      	b.n	80007f8 <qspi_reset_memory+0x2c>
		    	qspi_error();
 8000822:	f7ff ff61 	bl	80006e8 <qspi_error>
 8000826:	e7f0      	b.n	800080a <qspi_reset_memory+0x3e>
		    	qspi_error();
 8000828:	f7ff ff5e 	bl	80006e8 <qspi_error>
}
 800082c:	e7f3      	b.n	8000816 <qspi_reset_memory+0x4a>
 800082e:	bf00      	nop
 8000830:	200001e8 	.word	0x200001e8

08000834 <qspi_dummy_cycles_config>:
{
 8000834:	b500      	push	{lr}
 8000836:	b091      	sub	sp, #68	; 0x44
	    uint16_t            reg     = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	f8ad 3006 	strh.w	r3, [sp, #6]
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800083e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000842:	9208      	str	r2, [sp, #32]
	    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000844:	9309      	str	r3, [sp, #36]	; 0x24
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000846:	930a      	str	r3, [sp, #40]	; 0x28
	    s_command.DataMode          = QSPI_DATA_1_LINE;
 8000848:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800084c:	920b      	str	r2, [sp, #44]	; 0x2c
	    s_command.DummyCycles       = 0;
 800084e:	9307      	str	r3, [sp, #28]
	    s_command.NbData            = 1;
 8000850:	2201      	movs	r2, #1
 8000852:	920c      	str	r2, [sp, #48]	; 0x30
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000854:	930d      	str	r3, [sp, #52]	; 0x34
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000856:	930e      	str	r3, [sp, #56]	; 0x38
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000858:	930f      	str	r3, [sp, #60]	; 0x3c
	           reg = 0xF0;
 800085a:	23f0      	movs	r3, #240	; 0xf0
 800085c:	f8ad 3006 	strh.w	r3, [sp, #6]
	             s_command.Instruction = WRITE_READ_PARAM_REG_CMD;
 8000860:	23c0      	movs	r3, #192	; 0xc0
 8000862:	9302      	str	r3, [sp, #8]
	             if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000864:	f241 3288 	movw	r2, #5000	; 0x1388
 8000868:	a902      	add	r1, sp, #8
 800086a:	480f      	ldr	r0, [pc, #60]	; (80008a8 <qspi_dummy_cycles_config+0x74>)
 800086c:	f001 fffc 	bl	8002868 <HAL_QSPI_Command>
 8000870:	b980      	cbnz	r0, 8000894 <qspi_dummy_cycles_config+0x60>
	             if(HAL_QSPI_Transmit(
 8000872:	f241 3288 	movw	r2, #5000	; 0x1388
 8000876:	f10d 0106 	add.w	r1, sp, #6
 800087a:	480b      	ldr	r0, [pc, #44]	; (80008a8 <qspi_dummy_cycles_config+0x74>)
 800087c:	f002 f843 	bl	8002906 <HAL_QSPI_Transmit>
 8000880:	b958      	cbnz	r0, 800089a <qspi_dummy_cycles_config+0x66>
	             if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000882:	f241 3088 	movw	r0, #5000	; 0x1388
 8000886:	f7ff ff39 	bl	80006fc <AutopollingMemReady>
 800088a:	2801      	cmp	r0, #1
 800088c:	d108      	bne.n	80008a0 <qspi_dummy_cycles_config+0x6c>
}
 800088e:	b011      	add	sp, #68	; 0x44
 8000890:	f85d fb04 	ldr.w	pc, [sp], #4
	            	 qspi_error();
 8000894:	f7ff ff28 	bl	80006e8 <qspi_error>
 8000898:	e7eb      	b.n	8000872 <qspi_dummy_cycles_config+0x3e>
	            	 qspi_error();
 800089a:	f7ff ff25 	bl	80006e8 <qspi_error>
 800089e:	e7f0      	b.n	8000882 <qspi_dummy_cycles_config+0x4e>
	            	 qspi_error();
 80008a0:	f7ff ff22 	bl	80006e8 <qspi_error>
}
 80008a4:	e7f3      	b.n	800088e <qspi_dummy_cycles_config+0x5a>
 80008a6:	bf00      	nop
 80008a8:	200001e8 	.word	0x200001e8

080008ac <qspi_quad_enable>:
{
 80008ac:	b500      	push	{lr}
 80008ae:	b097      	sub	sp, #92	; 0x5c
	    uint8_t                 reg = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f88d 3007 	strb.w	r3, [sp, #7]
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80008b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ba:	920e      	str	r2, [sp, #56]	; 0x38
	    s_command.Instruction       = WRITE_STATUS_REG_CMD;
 80008bc:	2201      	movs	r2, #1
 80008be:	9208      	str	r2, [sp, #32]
	    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80008c0:	930f      	str	r3, [sp, #60]	; 0x3c
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80008c2:	9310      	str	r3, [sp, #64]	; 0x40
	    s_command.DataMode          = QSPI_DATA_1_LINE;
 80008c4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80008c8:	9111      	str	r1, [sp, #68]	; 0x44
	    s_command.DummyCycles       = 0;
 80008ca:	930d      	str	r3, [sp, #52]	; 0x34
	    s_command.NbData            = 1;
 80008cc:	9212      	str	r2, [sp, #72]	; 0x48
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80008ce:	9313      	str	r3, [sp, #76]	; 0x4c
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80008d0:	9314      	str	r3, [sp, #80]	; 0x50
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80008d2:	9315      	str	r3, [sp, #84]	; 0x54
	    if(qspi_WriteEnable() != 1)
 80008d4:	f7ff ff3e 	bl	8000754 <qspi_WriteEnable>
 80008d8:	2801      	cmp	r0, #1
 80008da:	d133      	bne.n	8000944 <qspi_quad_enable+0x98>
	    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80008dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80008e0:	a908      	add	r1, sp, #32
 80008e2:	4820      	ldr	r0, [pc, #128]	; (8000964 <qspi_quad_enable+0xb8>)
 80008e4:	f001 ffc0 	bl	8002868 <HAL_QSPI_Command>
 80008e8:	bb78      	cbnz	r0, 800094a <qspi_quad_enable+0x9e>
	    reg = IS25LP064A_SR_QE; // Set QE bit  to 1
 80008ea:	2340      	movs	r3, #64	; 0x40
 80008ec:	f88d 3007 	strb.w	r3, [sp, #7]
	    if(HAL_QSPI_Transmit(
 80008f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80008f4:	f10d 0107 	add.w	r1, sp, #7
 80008f8:	481a      	ldr	r0, [pc, #104]	; (8000964 <qspi_quad_enable+0xb8>)
 80008fa:	f002 f804 	bl	8002906 <HAL_QSPI_Transmit>
 80008fe:	bb38      	cbnz	r0, 8000950 <qspi_quad_enable+0xa4>
	    s_config.Match           = IS25LP064A_SR_QE;
 8000900:	2340      	movs	r3, #64	; 0x40
 8000902:	9302      	str	r3, [sp, #8]
	    s_config.Mask            = IS25LP064A_SR_QE;
 8000904:	9303      	str	r3, [sp, #12]
	    s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8000906:	2300      	movs	r3, #0
 8000908:	9306      	str	r3, [sp, #24]
	    s_config.StatusBytesSize = 1;
 800090a:	2301      	movs	r3, #1
 800090c:	9305      	str	r3, [sp, #20]
	    s_config.Interval      = 0x10;
 800090e:	2310      	movs	r3, #16
 8000910:	9304      	str	r3, [sp, #16]
	    s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000912:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000916:	9307      	str	r3, [sp, #28]
	    s_command.Instruction = READ_STATUS_REG_CMD;
 8000918:	2305      	movs	r3, #5
 800091a:	9308      	str	r3, [sp, #32]
	    s_command.DataMode    = QSPI_DATA_1_LINE;
 800091c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000920:	9311      	str	r3, [sp, #68]	; 0x44
	    if(HAL_QSPI_AutoPolling(
 8000922:	f241 3388 	movw	r3, #5000	; 0x1388
 8000926:	aa02      	add	r2, sp, #8
 8000928:	a908      	add	r1, sp, #32
 800092a:	480e      	ldr	r0, [pc, #56]	; (8000964 <qspi_quad_enable+0xb8>)
 800092c:	f002 f854 	bl	80029d8 <HAL_QSPI_AutoPolling>
 8000930:	b988      	cbnz	r0, 8000956 <qspi_quad_enable+0xaa>
	    if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000932:	f241 3088 	movw	r0, #5000	; 0x1388
 8000936:	f7ff fee1 	bl	80006fc <AutopollingMemReady>
 800093a:	2801      	cmp	r0, #1
 800093c:	d10e      	bne.n	800095c <qspi_quad_enable+0xb0>
}
 800093e:	b017      	add	sp, #92	; 0x5c
 8000940:	f85d fb04 	ldr.w	pc, [sp], #4
	    	qspi_error();
 8000944:	f7ff fed0 	bl	80006e8 <qspi_error>
 8000948:	e7c8      	b.n	80008dc <qspi_quad_enable+0x30>
	    	qspi_error();
 800094a:	f7ff fecd 	bl	80006e8 <qspi_error>
 800094e:	e7cc      	b.n	80008ea <qspi_quad_enable+0x3e>
	    	qspi_error();
 8000950:	f7ff feca 	bl	80006e8 <qspi_error>
 8000954:	e7d4      	b.n	8000900 <qspi_quad_enable+0x54>
	    	qspi_error();
 8000956:	f7ff fec7 	bl	80006e8 <qspi_error>
 800095a:	e7ea      	b.n	8000932 <qspi_quad_enable+0x86>
	    	qspi_error();
 800095c:	f7ff fec4 	bl	80006e8 <qspi_error>
}
 8000960:	e7ed      	b.n	800093e <qspi_quad_enable+0x92>
 8000962:	bf00      	nop
 8000964:	200001e8 	.word	0x200001e8

08000968 <qspi_enable_memory_mapped>:
{
 8000968:	b500      	push	{lr}
 800096a:	b091      	sub	sp, #68	; 0x44
	    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800096c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000970:	9308      	str	r3, [sp, #32]
	    s_command.Instruction     = QUAD_INOUT_FAST_READ_CMD;
 8000972:	23eb      	movs	r3, #235	; 0xeb
 8000974:	9302      	str	r3, [sp, #8]
	    s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 8000976:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800097a:	9309      	str	r3, [sp, #36]	; 0x24
	    s_command.AddressSize     = QSPI_ADDRESS_24_BITS;
 800097c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000980:	9305      	str	r3, [sp, #20]
	    s_command.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 8000982:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000986:	930a      	str	r3, [sp, #40]	; 0x28
	    s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8000988:	2300      	movs	r3, #0
 800098a:	9306      	str	r3, [sp, #24]
	    s_command.AlternateBytes     = 0x000000A0;
 800098c:	22a0      	movs	r2, #160	; 0xa0
 800098e:	9204      	str	r2, [sp, #16]
	    s_command.DummyCycles        = 6;
 8000990:	2206      	movs	r2, #6
 8000992:	9207      	str	r2, [sp, #28]
	    s_command.DdrMode            = QSPI_DDR_MODE_DISABLE;
 8000994:	930d      	str	r3, [sp, #52]	; 0x34
	    s_command.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 8000996:	930e      	str	r3, [sp, #56]	; 0x38
	    s_command.SIOOMode = QSPI_SIOO_INST_ONLY_FIRST_CMD;
 8000998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800099c:	920f      	str	r2, [sp, #60]	; 0x3c
	    s_command.DataMode = QSPI_DATA_4_LINES;
 800099e:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80009a2:	920b      	str	r2, [sp, #44]	; 0x2c
	    s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80009a4:	9301      	str	r3, [sp, #4]
	    s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80009a6:	9300      	str	r3, [sp, #0]
	    uint32_t qspiresult = HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg);
 80009a8:	466a      	mov	r2, sp
 80009aa:	a902      	add	r1, sp, #8
 80009ac:	4806      	ldr	r0, [pc, #24]	; (80009c8 <qspi_enable_memory_mapped+0x60>)
 80009ae:	f002 f86e 	bl	8002a8e <HAL_QSPI_MemoryMapped>
	    if(qspiresult
 80009b2:	b928      	cbnz	r0, 80009c0 <qspi_enable_memory_mapped+0x58>
	    memory_already_mapped = 1;
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <qspi_enable_memory_mapped+0x64>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
}
 80009ba:	b011      	add	sp, #68	; 0x44
 80009bc:	f85d fb04 	ldr.w	pc, [sp], #4
	    	qspi_error();
 80009c0:	f7ff fe92 	bl	80006e8 <qspi_error>
 80009c4:	e7f6      	b.n	80009b4 <qspi_enable_memory_mapped+0x4c>
 80009c6:	bf00      	nop
 80009c8:	200001e8 	.word	0x200001e8
 80009cc:	200001e4 	.word	0x200001e4

080009d0 <qspi_initialize>:
{
 80009d0:	b538      	push	{r3, r4, r5, lr}
 80009d2:	4604      	mov	r4, r0
	HAL_QSPI_DeInit(&hqspi);
 80009d4:	4d0a      	ldr	r5, [pc, #40]	; (8000a00 <qspi_initialize+0x30>)
 80009d6:	4628      	mov	r0, r5
 80009d8:	f001 ff35 	bl	8002846 <HAL_QSPI_DeInit>
	HAL_QSPI_Init(&hqspi);
 80009dc:	4628      	mov	r0, r5
 80009de:	f002 f8a5 	bl	8002b2c <HAL_QSPI_Init>
	qspi_reset_memory();
 80009e2:	f7ff fef3 	bl	80007cc <qspi_reset_memory>
	qspi_dummy_cycles_config();
 80009e6:	f7ff ff25 	bl	8000834 <qspi_dummy_cycles_config>
	qspi_quad_enable();
 80009ea:	f7ff ff5f 	bl	80008ac <qspi_quad_enable>
	if (mode == MEMORY_MAPPED)
 80009ee:	2c01      	cmp	r4, #1
 80009f0:	d003      	beq.n	80009fa <qspi_initialize+0x2a>
		memory_already_mapped = 0;
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <qspi_initialize+0x34>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
}
 80009f8:	bd38      	pop	{r3, r4, r5, pc}
		qspi_enable_memory_mapped();
 80009fa:	f7ff ffb5 	bl	8000968 <qspi_enable_memory_mapped>
 80009fe:	e7fb      	b.n	80009f8 <qspi_initialize+0x28>
 8000a00:	200001e8 	.word	0x200001e8
 8000a04:	200001e4 	.word	0x200001e4

08000a08 <qspi_SetMode>:
	if (mode == INDIRECT_POLLING)
 8000a08:	b130      	cbz	r0, 8000a18 <qspi_SetMode+0x10>
{
 8000a0a:	b508      	push	{r3, lr}
	else if (mode == MEMORY_MAPPED)
 8000a0c:	2801      	cmp	r0, #1
 8000a0e:	d000      	beq.n	8000a12 <qspi_SetMode+0xa>
}
 8000a10:	bd08      	pop	{r3, pc}
		qspi_enable_memory_mapped();
 8000a12:	f7ff ffa9 	bl	8000968 <qspi_enable_memory_mapped>
}
 8000a16:	e7fb      	b.n	8000a10 <qspi_SetMode+0x8>
 8000a18:	4770      	bx	lr
	...

08000a1c <qpsi_EraseSector>:
{
 8000a1c:	b500      	push	{lr}
 8000a1e:	b08f      	sub	sp, #60	; 0x3c
        s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000a20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a24:	9306      	str	r3, [sp, #24]
        s_command.Instruction     = SECTOR_ERASE_CMD;
 8000a26:	23d7      	movs	r3, #215	; 0xd7
 8000a28:	9300      	str	r3, [sp, #0]
        s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 8000a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a2e:	9307      	str	r3, [sp, #28]
    s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000a30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a34:	9303      	str	r3, [sp, #12]
    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	9308      	str	r3, [sp, #32]
    s_command.DataMode          = QSPI_DATA_NONE;
 8000a3a:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DummyCycles       = 0;
 8000a3c:	9305      	str	r3, [sp, #20]
    s_command.NbData            = 1;
 8000a3e:	2201      	movs	r2, #1
 8000a40:	920a      	str	r2, [sp, #40]	; 0x28
    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000a42:	930b      	str	r3, [sp, #44]	; 0x2c
    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000a44:	930c      	str	r3, [sp, #48]	; 0x30
    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000a46:	930d      	str	r3, [sp, #52]	; 0x34
    s_command.Address           = address;
 8000a48:	9001      	str	r0, [sp, #4]
    qspi_SetMode(INDIRECT_POLLING);
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff ffdc 	bl	8000a08 <qspi_SetMode>
    if(qspi_WriteEnable() != 1)
 8000a50:	f7ff fe80 	bl	8000754 <qspi_WriteEnable>
 8000a54:	2801      	cmp	r0, #1
 8000a56:	d110      	bne.n	8000a7a <qpsi_EraseSector+0x5e>
    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a5c:	4669      	mov	r1, sp
 8000a5e:	480b      	ldr	r0, [pc, #44]	; (8000a8c <qpsi_EraseSector+0x70>)
 8000a60:	f001 ff02 	bl	8002868 <HAL_QSPI_Command>
 8000a64:	b960      	cbnz	r0, 8000a80 <qpsi_EraseSector+0x64>
    if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000a66:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a6a:	f7ff fe47 	bl	80006fc <AutopollingMemReady>
 8000a6e:	2801      	cmp	r0, #1
 8000a70:	d109      	bne.n	8000a86 <qpsi_EraseSector+0x6a>
}
 8000a72:	2001      	movs	r0, #1
 8000a74:	b00f      	add	sp, #60	; 0x3c
 8000a76:	f85d fb04 	ldr.w	pc, [sp], #4
    	qspi_error();
 8000a7a:	f7ff fe35 	bl	80006e8 <qspi_error>
 8000a7e:	e7eb      	b.n	8000a58 <qpsi_EraseSector+0x3c>
    	qspi_error();
 8000a80:	f7ff fe32 	bl	80006e8 <qspi_error>
 8000a84:	e7ef      	b.n	8000a66 <qpsi_EraseSector+0x4a>
    	qspi_error();
 8000a86:	f7ff fe2f 	bl	80006e8 <qspi_error>
 8000a8a:	e7f2      	b.n	8000a72 <qpsi_EraseSector+0x56>
 8000a8c:	200001e8 	.word	0x200001e8

08000a90 <qspi_Erase>:
{
 8000a90:	b538      	push	{r3, r4, r5, lr}
 8000a92:	460d      	mov	r5, r1
    start_addr = start_addr - (start_addr % block_size);
 8000a94:	4c08      	ldr	r4, [pc, #32]	; (8000ab8 <qspi_Erase+0x28>)
 8000a96:	4004      	ands	r4, r0
    while(end_addr > start_addr)
 8000a98:	e001      	b.n	8000a9e <qspi_Erase+0xe>
        start_addr += block_size;
 8000a9a:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    while(end_addr > start_addr)
 8000a9e:	42ac      	cmp	r4, r5
 8000aa0:	d208      	bcs.n	8000ab4 <qspi_Erase+0x24>
        if(qpsi_EraseSector(block_addr) != 1)
 8000aa2:	f024 4070 	bic.w	r0, r4, #4026531840	; 0xf0000000
 8000aa6:	f7ff ffb9 	bl	8000a1c <qpsi_EraseSector>
 8000aaa:	2801      	cmp	r0, #1
 8000aac:	d0f5      	beq.n	8000a9a <qspi_Erase+0xa>
        	qspi_error();
 8000aae:	f7ff fe1b 	bl	80006e8 <qspi_error>
 8000ab2:	e7f2      	b.n	8000a9a <qspi_Erase+0xa>
}
 8000ab4:	bd38      	pop	{r3, r4, r5, pc}
 8000ab6:	bf00      	nop
 8000ab8:	fffff000 	.word	0xfffff000

08000abc <qspi_WritePage>:
{
 8000abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ac0:	b08e      	sub	sp, #56	; 0x38
 8000ac2:	4680      	mov	r8, r0
 8000ac4:	460d      	mov	r5, r1
 8000ac6:	4617      	mov	r7, r2
 8000ac8:	461e      	mov	r6, r3
	qspi_SetMode(INDIRECT_POLLING);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f7ff ff9c 	bl	8000a08 <qspi_SetMode>
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad4:	9306      	str	r3, [sp, #24]
	    s_command.Instruction       = PAGE_PROG_CMD;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	9300      	str	r3, [sp, #0]
	    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8000ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ade:	9307      	str	r3, [sp, #28]
	    s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae4:	9303      	str	r3, [sp, #12]
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ae6:	2400      	movs	r4, #0
 8000ae8:	9408      	str	r4, [sp, #32]
	    s_command.DataMode          = QSPI_DATA_1_LINE;
 8000aea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aee:	9309      	str	r3, [sp, #36]	; 0x24
	    s_command.DummyCycles       = 0;
 8000af0:	9405      	str	r4, [sp, #20]
	    s_command.NbData            = size <= 256 ? size : 256;
 8000af2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000af6:	bf28      	it	cs
 8000af8:	f44f 7580 	movcs.w	r5, #256	; 0x100
 8000afc:	950a      	str	r5, [sp, #40]	; 0x28
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000afe:	940b      	str	r4, [sp, #44]	; 0x2c
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b00:	940c      	str	r4, [sp, #48]	; 0x30
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000b02:	940d      	str	r4, [sp, #52]	; 0x34
	    s_command.Address           = address;
 8000b04:	f8cd 8004 	str.w	r8, [sp, #4]
	    if(qspi_WriteEnable() != 1)
 8000b08:	f7ff fe24 	bl	8000754 <qspi_WriteEnable>
 8000b0c:	2801      	cmp	r0, #1
 8000b0e:	d118      	bne.n	8000b42 <qspi_WritePage+0x86>
	    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b14:	4669      	mov	r1, sp
 8000b16:	4813      	ldr	r0, [pc, #76]	; (8000b64 <qspi_WritePage+0xa8>)
 8000b18:	f001 fea6 	bl	8002868 <HAL_QSPI_Command>
 8000b1c:	b9a0      	cbnz	r0, 8000b48 <qspi_WritePage+0x8c>
	    if(HAL_QSPI_Transmit(
 8000b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b22:	4639      	mov	r1, r7
 8000b24:	480f      	ldr	r0, [pc, #60]	; (8000b64 <qspi_WritePage+0xa8>)
 8000b26:	f001 feee 	bl	8002906 <HAL_QSPI_Transmit>
 8000b2a:	b980      	cbnz	r0, 8000b4e <qspi_WritePage+0x92>
	    if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000b2c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b30:	f7ff fde4 	bl	80006fc <AutopollingMemReady>
 8000b34:	2801      	cmp	r0, #1
 8000b36:	d10d      	bne.n	8000b54 <qspi_WritePage+0x98>
	    if(reset_mode)
 8000b38:	b97e      	cbnz	r6, 8000b5a <qspi_WritePage+0x9e>
}
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	b00e      	add	sp, #56	; 0x38
 8000b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    	qspi_error();
 8000b42:	f7ff fdd1 	bl	80006e8 <qspi_error>
 8000b46:	e7e3      	b.n	8000b10 <qspi_WritePage+0x54>
	    	qspi_error();
 8000b48:	f7ff fdce 	bl	80006e8 <qspi_error>
 8000b4c:	e7e7      	b.n	8000b1e <qspi_WritePage+0x62>
	    	qspi_error();
 8000b4e:	f7ff fdcb 	bl	80006e8 <qspi_error>
 8000b52:	e7eb      	b.n	8000b2c <qspi_WritePage+0x70>
	    	qspi_error();
 8000b54:	f7ff fdc8 	bl	80006e8 <qspi_error>
 8000b58:	e7ee      	b.n	8000b38 <qspi_WritePage+0x7c>
	    	qspi_SetMode(MEMORY_MAPPED);
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f7ff ff54 	bl	8000a08 <qspi_SetMode>
 8000b60:	e7eb      	b.n	8000b3a <qspi_WritePage+0x7e>
 8000b62:	bf00      	nop
 8000b64:	200001e8 	.word	0x200001e8

08000b68 <qspi_Write>:
{
 8000b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b6c:	4614      	mov	r4, r2
	    address                  = address & 0x0FFFFFFF;
 8000b6e:	f020 4570 	bic.w	r5, r0, #4026531840	; 0xf0000000
	    Addr                     = address % flash_page_size;
 8000b72:	b2c0      	uxtb	r0, r0
	    NumOfSingle              = size % flash_page_size;
 8000b74:	b2ce      	uxtb	r6, r1
	    if(Addr == 0) /*!< Address is QSPI_PAGESIZE aligned  */
 8000b76:	bb10      	cbnz	r0, 8000bbe <qspi_Write+0x56>
 8000b78:	0a0b      	lsrs	r3, r1, #8
	        if(NumOfPage == 0) /*!< NumByteToWrite < QSPI_PAGESIZE */
 8000b7a:	29ff      	cmp	r1, #255	; 0xff
 8000b7c:	d810      	bhi.n	8000ba0 <qspi_Write+0x38>
	            qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8000b7e:	2300      	movs	r3, #0
 8000b80:	4628      	mov	r0, r5
 8000b82:	f7ff ff9b 	bl	8000abc <qspi_WritePage>
 8000b86:	e00f      	b.n	8000ba8 <qspi_Write+0x40>
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8000b88:	2300      	movs	r3, #0
 8000b8a:	4622      	mov	r2, r4
 8000b8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b90:	4628      	mov	r0, r5
 8000b92:	f7ff ff93 	bl	8000abc <qspi_WritePage>
	                address += flash_page_size;
 8000b96:	f505 7580 	add.w	r5, r5, #256	; 0x100
	                buffer += flash_page_size;
 8000b9a:	f504 7480 	add.w	r4, r4, #256	; 0x100
	            while(NumOfPage--)
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	1e5f      	subs	r7, r3, #1
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d1f0      	bne.n	8000b88 <qspi_Write+0x20>
	            if(QSPI_DataNum > 0)
 8000ba6:	b926      	cbnz	r6, 8000bb2 <qspi_Write+0x4a>
	    qspi_SetMode(MEMORY_MAPPED);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f7ff ff2d 	bl	8000a08 <qspi_SetMode>
}
 8000bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	            	qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8000bb2:	4622      	mov	r2, r4
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	4628      	mov	r0, r5
 8000bb8:	f7ff ff80 	bl	8000abc <qspi_WritePage>
 8000bbc:	e7f4      	b.n	8000ba8 <qspi_Write+0x40>
 8000bbe:	f5c0 7780 	rsb	r7, r0, #256	; 0x100
	        if(NumOfPage == 0) /*!< Size < QSPI_PAGESIZE */
 8000bc2:	29ff      	cmp	r1, #255	; 0xff
 8000bc4:	d815      	bhi.n	8000bf2 <qspi_Write+0x8a>
	            if(NumOfSingle > count) /*!< (Size + Address) > QSPI_PAGESIZE */
 8000bc6:	42b7      	cmp	r7, r6
 8000bc8:	d20e      	bcs.n	8000be8 <qspi_Write+0x80>
	                temp         = NumOfSingle - count;
 8000bca:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000bce:	4406      	add	r6, r0
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	4639      	mov	r1, r7
 8000bd4:	4628      	mov	r0, r5
 8000bd6:	f7ff ff71 	bl	8000abc <qspi_WritePage>
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8000bda:	2300      	movs	r3, #0
 8000bdc:	19e2      	adds	r2, r4, r7
 8000bde:	4631      	mov	r1, r6
 8000be0:	19e8      	adds	r0, r5, r7
 8000be2:	f7ff ff6b 	bl	8000abc <qspi_WritePage>
 8000be6:	e7df      	b.n	8000ba8 <qspi_Write+0x40>
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8000be8:	2300      	movs	r3, #0
 8000bea:	4628      	mov	r0, r5
 8000bec:	f7ff ff66 	bl	8000abc <qspi_WritePage>
 8000bf0:	e7da      	b.n	8000ba8 <qspi_Write+0x40>
	            size -= count;
 8000bf2:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000bf6:	4401      	add	r1, r0
	            NumOfPage    = size / flash_page_size;
 8000bf8:	ea4f 2811 	mov.w	r8, r1, lsr #8
	            NumOfSingle  = size % flash_page_size;
 8000bfc:	b2ce      	uxtb	r6, r1
	            qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8000bfe:	2300      	movs	r3, #0
 8000c00:	4639      	mov	r1, r7
 8000c02:	4628      	mov	r0, r5
 8000c04:	f7ff ff5a 	bl	8000abc <qspi_WritePage>
	            address += count;
 8000c08:	443d      	add	r5, r7
	            buffer += count;
 8000c0a:	443c      	add	r4, r7
	            while(NumOfPage--)
 8000c0c:	e00b      	b.n	8000c26 <qspi_Write+0xbe>
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8000c0e:	2300      	movs	r3, #0
 8000c10:	4622      	mov	r2, r4
 8000c12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c16:	4628      	mov	r0, r5
 8000c18:	f7ff ff50 	bl	8000abc <qspi_WritePage>
	                address += flash_page_size;
 8000c1c:	f505 7580 	add.w	r5, r5, #256	; 0x100
	                buffer += flash_page_size;
 8000c20:	f504 7480 	add.w	r4, r4, #256	; 0x100
	            while(NumOfPage--)
 8000c24:	46b8      	mov	r8, r7
 8000c26:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8000c2a:	f1b8 0f00 	cmp.w	r8, #0
 8000c2e:	d1ee      	bne.n	8000c0e <qspi_Write+0xa6>
	            if(NumOfSingle != 0)
 8000c30:	2e00      	cmp	r6, #0
 8000c32:	d0b9      	beq.n	8000ba8 <qspi_Write+0x40>
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8000c34:	2300      	movs	r3, #0
 8000c36:	4622      	mov	r2, r4
 8000c38:	4631      	mov	r1, r6
 8000c3a:	4628      	mov	r0, r5
 8000c3c:	f7ff ff3e 	bl	8000abc <qspi_WritePage>
 8000c40:	e7b2      	b.n	8000ba8 <qspi_Write+0x40>
	...

08000c44 <FS_FileOperations>:
{
 8000c44:	b510      	push	{r4, lr}
	HAL_Delay(300);
 8000c46:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c4a:	f000 fde9 	bl	8001820 <HAL_Delay>
	disk_initialize(0);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f006 f878 	bl	8006d44 <disk_initialize>
    disk_status(0);
 8000c54:	2000      	movs	r0, #0
 8000c56:	f006 f869 	bl	8006d2c <disk_status>
	if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4920      	ldr	r1, [pc, #128]	; (8000ce0 <FS_FileOperations+0x9c>)
 8000c5e:	4821      	ldr	r0, [pc, #132]	; (8000ce4 <FS_FileOperations+0xa0>)
 8000c60:	f007 fc0a 	bl	8008478 <f_mount>
 8000c64:	b100      	cbz	r0, 8000c68 <FS_FileOperations+0x24>
}
 8000c66:	bd10      	pop	{r4, pc}
		res = f_findfirst(&dir, &fno, SDPath, "*.bin");
 8000c68:	4c1f      	ldr	r4, [pc, #124]	; (8000ce8 <FS_FileOperations+0xa4>)
 8000c6a:	4b20      	ldr	r3, [pc, #128]	; (8000cec <FS_FileOperations+0xa8>)
 8000c6c:	4a1c      	ldr	r2, [pc, #112]	; (8000ce0 <FS_FileOperations+0x9c>)
 8000c6e:	4621      	mov	r1, r4
 8000c70:	481f      	ldr	r0, [pc, #124]	; (8000cf0 <FS_FileOperations+0xac>)
 8000c72:	f007 ff1e 	bl	8008ab2 <f_findfirst>
		if (fno.fname[0])
 8000c76:	7da3      	ldrb	r3, [r4, #22]
 8000c78:	b103      	cbz	r3, 8000c7c <FS_FileOperations+0x38>
		  if(res == FR_OK)
 8000c7a:	b140      	cbz	r0, 8000c8e <FS_FileOperations+0x4a>
		f_closedir(&dir);
 8000c7c:	481c      	ldr	r0, [pc, #112]	; (8000cf0 <FS_FileOperations+0xac>)
 8000c7e:	f007 fec2 	bl	8008a06 <f_closedir>
		f_mount(0, "", 0); //unmount
 8000c82:	2200      	movs	r2, #0
 8000c84:	491b      	ldr	r1, [pc, #108]	; (8000cf4 <FS_FileOperations+0xb0>)
 8000c86:	4610      	mov	r0, r2
 8000c88:	f007 fbf6 	bl	8008478 <f_mount>
}
 8000c8c:	e7eb      	b.n	8000c66 <FS_FileOperations+0x22>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 8000c8e:	2211      	movs	r2, #17
 8000c90:	f104 0116 	add.w	r1, r4, #22
 8000c94:	4818      	ldr	r0, [pc, #96]	; (8000cf8 <FS_FileOperations+0xb4>)
 8000c96:	f007 fc1f 	bl	80084d8 <f_open>
 8000c9a:	2800      	cmp	r0, #0
 8000c9c:	d1ee      	bne.n	8000c7c <FS_FileOperations+0x38>
					f_read(&SDFile, &tempBinaryBuffer, f_size(&SDFile), &bytesRead);
 8000c9e:	4816      	ldr	r0, [pc, #88]	; (8000cf8 <FS_FileOperations+0xb4>)
 8000ca0:	4c16      	ldr	r4, [pc, #88]	; (8000cfc <FS_FileOperations+0xb8>)
 8000ca2:	4623      	mov	r3, r4
 8000ca4:	68c2      	ldr	r2, [r0, #12]
 8000ca6:	4916      	ldr	r1, [pc, #88]	; (8000d00 <FS_FileOperations+0xbc>)
 8000ca8:	f007 fd2c 	bl	8008704 <f_read>
					if (bytesRead < 262140)
 8000cac:	6821      	ldr	r1, [r4, #0]
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <FS_FileOperations+0xc0>)
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d903      	bls.n	8000cbc <FS_FileOperations+0x78>
					f_close(&SDFile);
 8000cb4:	4810      	ldr	r0, [pc, #64]	; (8000cf8 <FS_FileOperations+0xb4>)
 8000cb6:	f007 fe4c 	bl	8008952 <f_close>
 8000cba:	e7df      	b.n	8000c7c <FS_FileOperations+0x38>
						qspi_Erase(QSPI_START, QSPI_START+bytesRead);
 8000cbc:	f101 4110 	add.w	r1, r1, #2415919104	; 0x90000000
 8000cc0:	f04f 4010 	mov.w	r0, #2415919104	; 0x90000000
 8000cc4:	f7ff fee4 	bl	8000a90 <qspi_Erase>
						qspi_Write(QSPI_START, bytesRead,(uint8_t*)tempBinaryBuffer);
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <FS_FileOperations+0xbc>)
 8000cca:	6821      	ldr	r1, [r4, #0]
 8000ccc:	f04f 4010 	mov.w	r0, #2415919104	; 0x90000000
 8000cd0:	f7ff ff4a 	bl	8000b68 <qspi_Write>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2180      	movs	r1, #128	; 0x80
 8000cd8:	480b      	ldr	r0, [pc, #44]	; (8000d08 <FS_FileOperations+0xc4>)
 8000cda:	f001 f856 	bl	8001d8a <HAL_GPIO_WritePin>
 8000cde:	e7e9      	b.n	8000cb4 <FS_FileOperations+0x70>
 8000ce0:	20000714 	.word	0x20000714
 8000ce4:	200002b4 	.word	0x200002b4
 8000ce8:	200000cc 	.word	0x200000cc
 8000cec:	08008c60 	.word	0x08008c60
 8000cf0:	20000094 	.word	0x20000094
 8000cf4:	08008c94 	.word	0x08008c94
 8000cf8:	200004e8 	.word	0x200004e8
 8000cfc:	20000090 	.word	0x20000090
 8000d00:	24000000 	.word	0x24000000
 8000d04:	0003fffb 	.word	0x0003fffb
 8000d08:	58020800 	.word	0x58020800

08000d0c <HAL_GPIO_EXTI_Callback>:
{
 8000d0c:	b538      	push	{r3, r4, r5, lr}
	if (boardNumber != 0)
 8000d0e:	4b34      	ldr	r3, [pc, #208]	; (8000de0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b113      	cbz	r3, 8000d1a <HAL_GPIO_EXTI_Callback+0xe>
		if(GPIO_Pin == GPIO_PIN_12) // If The INT Source Is EXTI Line12
 8000d14:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8000d18:	d000      	beq.n	8000d1c <HAL_GPIO_EXTI_Callback+0x10>
}
 8000d1a:	bd38      	pop	{r3, r4, r5, pc}
			MX_I2C1_Init();
 8000d1c:	f7ff fc14 	bl	8000548 <MX_I2C1_Init>
			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) ==  1)
 8000d20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d24:	482f      	ldr	r0, [pc, #188]	; (8000de4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000d26:	f001 f829 	bl	8001d7c <HAL_GPIO_ReadPin>
 8000d2a:	2801      	cmp	r0, #1
 8000d2c:	d0f8      	beq.n	8000d20 <HAL_GPIO_EXTI_Callback+0x14>
			HAL_I2C_Slave_Receive(&hi2c1, tempBinaryBuffer, 65535,
 8000d2e:	4d2e      	ldr	r5, [pc, #184]	; (8000de8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000d30:	4c2e      	ldr	r4, [pc, #184]	; (8000dec <HAL_GPIO_EXTI_Callback+0xe0>)
 8000d32:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	f001 fb27 	bl	8002390 <HAL_I2C_Slave_Receive>
			HAL_Delay(98);
 8000d42:	2062      	movs	r0, #98	; 0x62
 8000d44:	f000 fd6c 	bl	8001820 <HAL_Delay>
			HAL_I2C_Slave_Receive(&hi2c1, tempBinaryBuffer+65535, 65535,
 8000d48:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d50:	4927      	ldr	r1, [pc, #156]	; (8000df0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000d52:	4620      	mov	r0, r4
 8000d54:	f001 fb1c 	bl	8002390 <HAL_I2C_Slave_Receive>
			HAL_Delay(98);
 8000d58:	2062      	movs	r0, #98	; 0x62
 8000d5a:	f000 fd61 	bl	8001820 <HAL_Delay>
			HAL_I2C_Slave_Receive(&hi2c1, tempBinaryBuffer+131070, 65535,
 8000d5e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d66:	4923      	ldr	r1, [pc, #140]	; (8000df4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000d68:	4620      	mov	r0, r4
 8000d6a:	f001 fb11 	bl	8002390 <HAL_I2C_Slave_Receive>
			HAL_Delay(98);
 8000d6e:	2062      	movs	r0, #98	; 0x62
 8000d70:	f000 fd56 	bl	8001820 <HAL_Delay>
			HAL_I2C_Slave_Receive(&hi2c1, tempBinaryBuffer+196605, 65535,
 8000d74:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7c:	491e      	ldr	r1, [pc, #120]	; (8000df8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000d7e:	4620      	mov	r0, r4
 8000d80:	f001 fb06 	bl	8002390 <HAL_I2C_Slave_Receive>
			qspi_Erase(QSPI_START, QSPI_START+262140);
 8000d84:	491d      	ldr	r1, [pc, #116]	; (8000dfc <HAL_GPIO_EXTI_Callback+0xf0>)
 8000d86:	f04f 4010 	mov.w	r0, #2415919104	; 0x90000000
 8000d8a:	f7ff fe81 	bl	8000a90 <qspi_Erase>
			qspi_Write(QSPI_START, 262140,(uint8_t*)tempBinaryBuffer);
 8000d8e:	462a      	mov	r2, r5
 8000d90:	491b      	ldr	r1, [pc, #108]	; (8000e00 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000d92:	f04f 4010 	mov.w	r0, #2415919104	; 0x90000000
 8000d96:	f7ff fee7 	bl	8000b68 <qspi_Write>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2180      	movs	r1, #128	; 0x80
 8000d9e:	4819      	ldr	r0, [pc, #100]	; (8000e04 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000da0:	f000 fff3 	bl	8001d8a <HAL_GPIO_WritePin>
			  if (!memory_already_mapped)
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b1bb      	cbz	r3, 8000dda <HAL_GPIO_EXTI_Callback+0xce>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	2180      	movs	r1, #128	; 0x80
 8000dae:	480d      	ldr	r0, [pc, #52]	; (8000de4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000db0:	f000 ffeb 	bl	8001d8a <HAL_GPIO_WritePin>
    	  HAL_I2C_DeInit(&hi2c1);
 8000db4:	480d      	ldr	r0, [pc, #52]	; (8000dec <HAL_GPIO_EXTI_Callback+0xe0>)
 8000db6:	f001 fa13 	bl	80021e0 <HAL_I2C_DeInit>
	 	  HAL_QSPI_MspDeInit(&hqspi);
 8000dba:	4814      	ldr	r0, [pc, #80]	; (8000e0c <HAL_GPIO_EXTI_Callback+0x100>)
 8000dbc:	f000 fb08 	bl	80013d0 <HAL_QSPI_MspDeInit>
		  HAL_RCC_DeInit();
 8000dc0:	f001 ff08 	bl	8002bd4 <HAL_RCC_DeInit>
		  HAL_DeInit();
 8000dc4:	f000 fc82 	bl	80016cc <HAL_DeInit>
  	 	  SysTick->CTRL = 0;
 8000dc8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  	 	  SysTick->LOAD = 0;
 8000dd0:	615a      	str	r2, [r3, #20]
  	 	  SysTick->VAL  = 0;
 8000dd2:	619a      	str	r2, [r3, #24]
  	 	  HAL_NVIC_SystemReset();
 8000dd4:	f000 fda6 	bl	8001924 <HAL_NVIC_SystemReset>
}
 8000dd8:	e79f      	b.n	8000d1a <HAL_GPIO_EXTI_Callback+0xe>
				  qspi_enable_memory_mapped();
 8000dda:	f7ff fdc5 	bl	8000968 <qspi_enable_memory_mapped>
 8000dde:	e7e4      	b.n	8000daa <HAL_GPIO_EXTI_Callback+0x9e>
 8000de0:	20000000 	.word	0x20000000
 8000de4:	58020400 	.word	0x58020400
 8000de8:	24000000 	.word	0x24000000
 8000dec:	20000034 	.word	0x20000034
 8000df0:	2400ffff 	.word	0x2400ffff
 8000df4:	2401fffe 	.word	0x2401fffe
 8000df8:	2402fffd 	.word	0x2402fffd
 8000dfc:	9003fffc 	.word	0x9003fffc
 8000e00:	0003fffc 	.word	0x0003fffc
 8000e04:	58020800 	.word	0x58020800
 8000e08:	200001e4 	.word	0x200001e4
 8000e0c:	200001e8 	.word	0x200001e8

08000e10 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <Error_Handler+0x2>

08000e14 <SystemClock_Config>:
{
 8000e14:	b500      	push	{lr}
 8000e16:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e18:	224c      	movs	r2, #76	; 0x4c
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	a80b      	add	r0, sp, #44	; 0x2c
 8000e1e:	f007 ff17 	bl	8008c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e22:	2220      	movs	r2, #32
 8000e24:	2100      	movs	r1, #0
 8000e26:	a803      	add	r0, sp, #12
 8000e28:	f007 ff12 	bl	8008c50 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e2c:	2002      	movs	r0, #2
 8000e2e:	f001 fbcb 	bl	80025c8 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e32:	2300      	movs	r3, #0
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	4b39      	ldr	r3, [pc, #228]	; (8000f1c <SystemClock_Config+0x108>)
 8000e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e3a:	f022 0201 	bic.w	r2, r2, #1
 8000e3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	4b35      	ldr	r3, [pc, #212]	; (8000f20 <SystemClock_Config+0x10c>)
 8000e4a:	699a      	ldr	r2, [r3, #24]
 8000e4c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000e50:	619a      	str	r2, [r3, #24]
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e5c:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <SystemClock_Config+0x10c>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000e64:	d0fa      	beq.n	8000e5c <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <SystemClock_Config+0x110>)
 8000e68:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000e6c:	f042 0202 	orr.w	r2, r2, #2
 8000e70:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000e74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e80:	2300      	movs	r3, #0
 8000e82:	9302      	str	r3, [sp, #8]
 8000e84:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <SystemClock_Config+0x10c>)
 8000e86:	699a      	ldr	r2, [r3, #24]
 8000e88:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000e8c:	619a      	str	r2, [r3, #24]
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e94:	9302      	str	r3, [sp, #8]
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <SystemClock_Config+0x108>)
 8000e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e9a:	f042 0201 	orr.w	r2, r2, #1
 8000e9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	9302      	str	r3, [sp, #8]
 8000ea8:	9b02      	ldr	r3, [sp, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <SystemClock_Config+0x10c>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000eb2:	d0fa      	beq.n	8000eaa <SystemClock_Config+0x96>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ebc:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ec2:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ec4:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000ec6:	223c      	movs	r2, #60	; 0x3c
 8000ec8:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000eca:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000ecc:	2306      	movs	r3, #6
 8000ece:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 8;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ed4:	230c      	movs	r3, #12
 8000ed6:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000edc:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ede:	a80b      	add	r0, sp, #44	; 0x2c
 8000ee0:	f001 ff5e 	bl	8002da0 <HAL_RCC_OscConfig>
 8000ee4:	b9b0      	cbnz	r0, 8000f14 <SystemClock_Config+0x100>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee6:	233f      	movs	r3, #63	; 0x3f
 8000ee8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eea:	2303      	movs	r3, #3
 8000eec:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ef2:	2308      	movs	r3, #8
 8000ef4:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ef6:	2340      	movs	r3, #64	; 0x40
 8000ef8:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000efa:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000efc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f00:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f02:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f04:	2104      	movs	r1, #4
 8000f06:	a803      	add	r0, sp, #12
 8000f08:	f002 fb9e 	bl	8003648 <HAL_RCC_ClockConfig>
 8000f0c:	b920      	cbnz	r0, 8000f18 <SystemClock_Config+0x104>
}
 8000f0e:	b01f      	add	sp, #124	; 0x7c
 8000f10:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f14:	f7ff ff7c 	bl	8000e10 <Error_Handler>
    Error_Handler();
 8000f18:	f7ff ff7a 	bl	8000e10 <Error_Handler>
 8000f1c:	58000400 	.word	0x58000400
 8000f20:	58024800 	.word	0x58024800
 8000f24:	58024400 	.word	0x58024400

08000f28 <main>:
{
 8000f28:	b570      	push	{r4, r5, r6, lr}
 8000f2a:	b088      	sub	sp, #32
  MPU_Config();
 8000f2c:	f7ff fba8 	bl	8000680 <MPU_Config>
  HAL_Init();
 8000f30:	f000 fc36 	bl	80017a0 <HAL_Init>
  SystemClock_Config();
 8000f34:	f7ff ff6e 	bl	8000e14 <SystemClock_Config>
  MX_GPIO_Init();
 8000f38:	f7ff f9ce 	bl	80002d8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8000f3c:	f000 f9a4 	bl	8001288 <MX_QUADSPI_Init>
     PWR->CR1 |= PWR_CR1_DBP;
 8000f40:	4abd      	ldr	r2, [pc, #756]	; (8001238 <main+0x310>)
 8000f42:	6813      	ldr	r3, [r2, #0]
 8000f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f48:	6013      	str	r3, [r2, #0]
     while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8000f4a:	4bbb      	ldr	r3, [pc, #748]	; (8001238 <main+0x310>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f52:	d0fa      	beq.n	8000f4a <main+0x22>
     __HAL_RCC_BKPRAM_CLK_ENABLE();
 8000f54:	4bb9      	ldr	r3, [pc, #740]	; (800123c <main+0x314>)
 8000f56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f5e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	9302      	str	r3, [sp, #8]
 8000f6c:	9b02      	ldr	r3, [sp, #8]
     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000f6e:	4db4      	ldr	r5, [pc, #720]	; (8001240 <main+0x318>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	4628      	mov	r0, r5
 8000f76:	f000 ff08 	bl	8001d8a <HAL_GPIO_WritePin>
 	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8000f7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f7e:	4628      	mov	r0, r5
 8000f80:	f000 fefc 	bl	8001d7c <HAL_GPIO_ReadPin>
 8000f84:	4604      	mov	r4, r0
 	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8000f86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	f000 fef6 	bl	8001d7c <HAL_GPIO_ReadPin>
 8000f90:	4605      	mov	r5, r0
 	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8000f92:	2104      	movs	r1, #4
 8000f94:	48ab      	ldr	r0, [pc, #684]	; (8001244 <main+0x31c>)
 8000f96:	f000 fef1 	bl	8001d7c <HAL_GPIO_ReadPin>
 	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 8000f9a:	0063      	lsls	r3, r4, #1
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	00aa      	lsls	r2, r5, #2
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	4403      	add	r3, r0
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	4aa7      	ldr	r2, [pc, #668]	; (8001248 <main+0x320>)
 8000fac:	7013      	strb	r3, [r2, #0]
 	if (boardNumber == 0)
 8000fae:	b1ab      	cbz	r3, 8000fdc <main+0xb4>
	  qspi_initialize(INDIRECT_POLLING);
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff fd0d 	bl	80009d0 <qspi_initialize>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000fb6:	4ca2      	ldr	r4, [pc, #648]	; (8001240 <main+0x318>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2180      	movs	r1, #128	; 0x80
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	f000 fee4 	bl	8001d8a <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000fc2:	2064      	movs	r0, #100	; 0x64
 8000fc4:	f000 fc2c 	bl	8001820 <HAL_Delay>
     if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0)
 8000fc8:	2140      	movs	r1, #64	; 0x40
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f000 fed6 	bl	8001d7c <HAL_GPIO_ReadPin>
 8000fd0:	b1f8      	cbz	r0, 8001012 <main+0xea>
    	 bootloader_button_pressed = 0;
 8000fd2:	4b9e      	ldr	r3, [pc, #632]	; (800124c <main+0x324>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
    	 int i = 6;
 8000fd8:	2406      	movs	r4, #6
		  while(i--)
 8000fda:	e0a6      	b.n	800112a <main+0x202>
		  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000fdc:	2028      	movs	r0, #40	; 0x28
 8000fde:	f000 fc8f 	bl	8001900 <HAL_NVIC_DisableIRQ>
 		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	9403      	str	r4, [sp, #12]
 8000fe6:	9404      	str	r4, [sp, #16]
 8000fe8:	9405      	str	r4, [sp, #20]
 8000fea:	9406      	str	r4, [sp, #24]
 8000fec:	9407      	str	r4, [sp, #28]
		  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fee:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8000ff2:	9603      	str	r6, [sp, #12]
		  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	9304      	str	r3, [sp, #16]
		  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	9305      	str	r3, [sp, #20]
		  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffc:	4d90      	ldr	r5, [pc, #576]	; (8001240 <main+0x318>)
 8000ffe:	a903      	add	r1, sp, #12
 8001000:	4628      	mov	r0, r5
 8001002:	f000 fd03 	bl	8001a0c <HAL_GPIO_Init>
 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001006:	4622      	mov	r2, r4
 8001008:	4631      	mov	r1, r6
 800100a:	4628      	mov	r0, r5
 800100c:	f000 febd 	bl	8001d8a <HAL_GPIO_WritePin>
 8001010:	e7ce      	b.n	8000fb0 <main+0x88>
    	 bootloader_button_pressed = 1;
 8001012:	2201      	movs	r2, #1
 8001014:	4b8d      	ldr	r3, [pc, #564]	; (800124c <main+0x324>)
 8001016:	701a      	strb	r2, [r3, #0]
   		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001018:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800101c:	4620      	mov	r0, r4
 800101e:	f000 feb4 	bl	8001d8a <HAL_GPIO_WritePin>
    		  MX_I2C1_Init();
 8001022:	f7ff fa91 	bl	8000548 <MX_I2C1_Init>
    		  MX_SDMMC1_SD_Init();
 8001026:	f000 f9f3 	bl	8001410 <MX_SDMMC1_SD_Init>
    		  MX_FATFS_Init();
 800102a:	f005 fd9f 	bl	8006b6c <MX_FATFS_Init>
    		  int i = 6;
 800102e:	2406      	movs	r4, #6
    	   	  while(i--)
 8001030:	e007      	b.n	8001042 <main+0x11a>
    	   		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8001032:	2180      	movs	r1, #128	; 0x80
 8001034:	4886      	ldr	r0, [pc, #536]	; (8001250 <main+0x328>)
 8001036:	f000 feae 	bl	8001d96 <HAL_GPIO_TogglePin>
    	   		  HAL_Delay(200);
 800103a:	20c8      	movs	r0, #200	; 0xc8
 800103c:	f000 fbf0 	bl	8001820 <HAL_Delay>
    	   	  while(i--)
 8001040:	462c      	mov	r4, r5
 8001042:	1e65      	subs	r5, r4, #1
 8001044:	2c00      	cmp	r4, #0
 8001046:	d1f4      	bne.n	8001032 <main+0x10a>
    	 	  if(BSP_SD_IsDetected())
 8001048:	f7ff fb45 	bl	80006d6 <BSP_SD_IsDetected>
 800104c:	b928      	cbnz	r0, 800105a <main+0x132>
    	 	  if (!memory_already_mapped)
 800104e:	4b81      	ldr	r3, [pc, #516]	; (8001254 <main+0x32c>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b953      	cbnz	r3, 800106a <main+0x142>
    	 		  qspi_enable_memory_mapped();
 8001054:	f7ff fc88 	bl	8000968 <qspi_enable_memory_mapped>
 8001058:	e007      	b.n	800106a <main+0x142>
    	 		  FS_FileOperations();
 800105a:	f7ff fdf3 	bl	8000c44 <FS_FileOperations>
 800105e:	e7f6      	b.n	800104e <main+0x126>
    	 		  tempBinaryBuffer[i] = flash_mem[i];
 8001060:	4b7d      	ldr	r3, [pc, #500]	; (8001258 <main+0x330>)
 8001062:	5d1a      	ldrb	r2, [r3, r4]
 8001064:	4b7d      	ldr	r3, [pc, #500]	; (800125c <main+0x334>)
 8001066:	551a      	strb	r2, [r3, r4]
    	 	  for (int i = 0; i < 262140; i++)
 8001068:	3401      	adds	r4, #1
 800106a:	4b7d      	ldr	r3, [pc, #500]	; (8001260 <main+0x338>)
 800106c:	429c      	cmp	r4, r3
 800106e:	ddf7      	ble.n	8001060 <main+0x138>
    	 	  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0)
 8001070:	2140      	movs	r1, #64	; 0x40
 8001072:	4873      	ldr	r0, [pc, #460]	; (8001240 <main+0x318>)
 8001074:	f000 fe82 	bl	8001d7c <HAL_GPIO_ReadPin>
 8001078:	2800      	cmp	r0, #0
 800107a:	d0f9      	beq.n	8001070 <main+0x148>
    	 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001082:	486f      	ldr	r0, [pc, #444]	; (8001240 <main+0x318>)
 8001084:	f000 fe81 	bl	8001d8a <HAL_GPIO_WritePin>
    	 	 HAL_Delay(1);
 8001088:	2001      	movs	r0, #1
 800108a:	f000 fbc9 	bl	8001820 <HAL_Delay>
			HAL_I2C_Master_Transmit(&hi2c1, 34<<1, tempBinaryBuffer, 65535,
 800108e:	4c75      	ldr	r4, [pc, #468]	; (8001264 <main+0x33c>)
 8001090:	f242 7510 	movw	r5, #10000	; 0x2710
 8001094:	9500      	str	r5, [sp, #0]
 8001096:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800109a:	4a70      	ldr	r2, [pc, #448]	; (800125c <main+0x334>)
 800109c:	2144      	movs	r1, #68	; 0x44
 800109e:	4620      	mov	r0, r4
 80010a0:	f001 f8b8 	bl	8002214 <HAL_I2C_Master_Transmit>
			HAL_Delay(100);
 80010a4:	2064      	movs	r0, #100	; 0x64
 80010a6:	f000 fbbb 	bl	8001820 <HAL_Delay>
			HAL_I2C_Master_Transmit(&hi2c1, 34<<1, tempBinaryBuffer+65535, 65535,
 80010aa:	9500      	str	r5, [sp, #0]
 80010ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b0:	4a6d      	ldr	r2, [pc, #436]	; (8001268 <main+0x340>)
 80010b2:	2144      	movs	r1, #68	; 0x44
 80010b4:	4620      	mov	r0, r4
 80010b6:	f001 f8ad 	bl	8002214 <HAL_I2C_Master_Transmit>
			HAL_Delay(100);
 80010ba:	2064      	movs	r0, #100	; 0x64
 80010bc:	f000 fbb0 	bl	8001820 <HAL_Delay>
			HAL_I2C_Master_Transmit(&hi2c1, 34<<1, tempBinaryBuffer+131070, 65535,
 80010c0:	9500      	str	r5, [sp, #0]
 80010c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c6:	4a69      	ldr	r2, [pc, #420]	; (800126c <main+0x344>)
 80010c8:	2144      	movs	r1, #68	; 0x44
 80010ca:	4620      	mov	r0, r4
 80010cc:	f001 f8a2 	bl	8002214 <HAL_I2C_Master_Transmit>
			HAL_Delay(100);
 80010d0:	2064      	movs	r0, #100	; 0x64
 80010d2:	f000 fba5 	bl	8001820 <HAL_Delay>
			HAL_I2C_Master_Transmit(&hi2c1, 34<<1, tempBinaryBuffer+196605, 65535,
 80010d6:	9500      	str	r5, [sp, #0]
 80010d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010dc:	4a64      	ldr	r2, [pc, #400]	; (8001270 <main+0x348>)
 80010de:	2144      	movs	r1, #68	; 0x44
 80010e0:	4620      	mov	r0, r4
 80010e2:	f001 f897 	bl	8002214 <HAL_I2C_Master_Transmit>
			HAL_Delay(6000);
 80010e6:	f241 7070 	movw	r0, #6000	; 0x1770
 80010ea:	f000 fb99 	bl	8001820 <HAL_Delay>
    	 	  HAL_QSPI_MspDeInit(&hqspi);
 80010ee:	4861      	ldr	r0, [pc, #388]	; (8001274 <main+0x34c>)
 80010f0:	f000 f96e 	bl	80013d0 <HAL_QSPI_MspDeInit>
      	 	  HAL_I2C_DeInit(&hi2c1);
 80010f4:	4620      	mov	r0, r4
 80010f6:	f001 f873 	bl	80021e0 <HAL_I2C_DeInit>
    	 	  HAL_SD_MspDeInit(&hsd1);
 80010fa:	485f      	ldr	r0, [pc, #380]	; (8001278 <main+0x350>)
 80010fc:	f000 fa0a 	bl	8001514 <HAL_SD_MspDeInit>
    	 	  HAL_RCC_DeInit();
 8001100:	f001 fd68 	bl	8002bd4 <HAL_RCC_DeInit>
    	 	  HAL_DeInit();
 8001104:	f000 fae2 	bl	80016cc <HAL_DeInit>
    	 	  SysTick->CTRL = 0;
 8001108:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
    	 	  SysTick->LOAD = 0;
 8001110:	615a      	str	r2, [r3, #20]
    	 	  SysTick->VAL  = 0;
 8001112:	619a      	str	r2, [r3, #24]
    	 	  HAL_NVIC_SystemReset();
 8001114:	f000 fc06 	bl	8001924 <HAL_NVIC_SystemReset>
  while (1)
 8001118:	e7fe      	b.n	8001118 <main+0x1f0>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 800111a:	2180      	movs	r1, #128	; 0x80
 800111c:	484c      	ldr	r0, [pc, #304]	; (8001250 <main+0x328>)
 800111e:	f000 fe3a 	bl	8001d96 <HAL_GPIO_TogglePin>
			  HAL_Delay(40);
 8001122:	2028      	movs	r0, #40	; 0x28
 8001124:	f000 fb7c 	bl	8001820 <HAL_Delay>
		  while(i--)
 8001128:	462c      	mov	r4, r5
 800112a:	1e65      	subs	r5, r4, #1
 800112c:	2c00      	cmp	r4, #0
 800112e:	d1f4      	bne.n	800111a <main+0x1f2>
		  HAL_Delay(2000);
 8001130:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001134:	f000 fb74 	bl	8001820 <HAL_Delay>
		  if (!memory_already_mapped)
 8001138:	4b46      	ldr	r3, [pc, #280]	; (8001254 <main+0x32c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b93b      	cbnz	r3, 800114e <main+0x226>
			  qspi_enable_memory_mapped();
 800113e:	f7ff fc13 	bl	8000968 <qspi_enable_memory_mapped>
 8001142:	e004      	b.n	800114e <main+0x226>
			  tempBinaryBuffer[i] = flash_mem[i];
 8001144:	4b44      	ldr	r3, [pc, #272]	; (8001258 <main+0x330>)
 8001146:	5d1a      	ldrb	r2, [r3, r4]
 8001148:	4b44      	ldr	r3, [pc, #272]	; (800125c <main+0x334>)
 800114a:	551a      	strb	r2, [r3, r4]
		  for (int i = 0; i < 262140; i++)
 800114c:	3401      	adds	r4, #1
 800114e:	4b44      	ldr	r3, [pc, #272]	; (8001260 <main+0x338>)
 8001150:	429c      	cmp	r4, r3
 8001152:	ddf7      	ble.n	8001144 <main+0x21c>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8001154:	2180      	movs	r1, #128	; 0x80
 8001156:	483e      	ldr	r0, [pc, #248]	; (8001250 <main+0x328>)
 8001158:	f000 fe1d 	bl	8001d96 <HAL_GPIO_TogglePin>
		  JumpToApplication = (pFunction) (*(__IO uint32_t*) (APPLICATION_ADDRESS+4));
 800115c:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	4c46      	ldr	r4, [pc, #280]	; (800127c <main+0x354>)
 8001164:	6023      	str	r3, [r4, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2180      	movs	r1, #128	; 0x80
 800116a:	4835      	ldr	r0, [pc, #212]	; (8001240 <main+0x318>)
 800116c:	f000 fe0d 	bl	8001d8a <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001170:	2001      	movs	r0, #1
 8001172:	f000 fb55 	bl	8001820 <HAL_Delay>
		  if (((uint32_t)JumpToApplication > 0x30000000) ||  ((uint32_t)JumpToApplication < 0x24000000) )
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	f103 435c 	add.w	r3, r3, #3690987520	; 0xdc000000
 800117c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001180:	d852      	bhi.n	8001228 <main+0x300>
	 	  HAL_QSPI_MspDeInit(&hqspi);
 8001182:	483c      	ldr	r0, [pc, #240]	; (8001274 <main+0x34c>)
 8001184:	f000 f924 	bl	80013d0 <HAL_QSPI_MspDeInit>
		  HAL_RCC_DeInit();
 8001188:	f001 fd24 	bl	8002bd4 <HAL_RCC_DeInit>
		  HAL_DeInit();
 800118c:	f000 fa9e 	bl	80016cc <HAL_DeInit>
 8001190:	b672      	cpsid	i
		   NVIC->ICER[0] = 0xFFFFFFFF;
 8001192:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <main+0x358>)
 8001194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		    NVIC->ICER[1] = 0xFFFFFFFF;
 800119c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		    NVIC->ICER[2] = 0xFFFFFFFF;
 80011a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		    NVIC->ICER[3] = 0xFFFFFFFF;
 80011a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		    NVIC->ICER[4] = 0xFFFFFFFF;
 80011a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		    NVIC->ICER[5] = 0xFFFFFFFF;
 80011ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		    NVIC->ICER[6] = 0xFFFFFFFF;
 80011b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		    NVIC->ICER[7] = 0xFFFFFFFF;
 80011b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		    NVIC->ICPR[0] = 0xFFFFFFFF;
 80011b8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		    NVIC->ICPR[1] = 0xFFFFFFFF;
 80011bc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		    NVIC->ICPR[2] = 0xFFFFFFFF;
 80011c0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		    NVIC->ICPR[3] = 0xFFFFFFFF;
 80011c4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
		    NVIC->ICPR[4] = 0xFFFFFFFF;
 80011c8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		    NVIC->ICPR[5] = 0xFFFFFFFF;
 80011cc:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
		    NVIC->ICPR[6] = 0xFFFFFFFF;
 80011d0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
		    NVIC->ICPR[7] = 0xFFFFFFFF;
 80011d4:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
		    SysTick->CTRL = 0;
 80011d8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80011dc:	2300      	movs	r3, #0
 80011de:	6113      	str	r3, [r2, #16]
		    SysTick->LOAD = 0; // Needed?
 80011e0:	6153      	str	r3, [r2, #20]
		    SysTick->VAL = 0;  // Needed?
 80011e2:	6193      	str	r3, [r2, #24]
		    SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk;
 80011e4:	4927      	ldr	r1, [pc, #156]	; (8001284 <main+0x35c>)
 80011e6:	6848      	ldr	r0, [r1, #4]
 80011e8:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 80011ec:	6048      	str	r0, [r1, #4]
		    SCB->SHCSR &= ~(SCB_SHCSR_USGFAULTENA_Msk | //
 80011ee:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80011f0:	f420 20e0 	bic.w	r0, r0, #458752	; 0x70000
 80011f4:	6248      	str	r0, [r1, #36]	; 0x24
		  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 80011f6:	f04f 5010 	mov.w	r0, #603979776	; 0x24000000
 80011fa:	6804      	ldr	r4, [r0, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80011fc:	f384 8808 	msr	MSP, r4
		  __set_PSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8001200:	6804      	ldr	r4, [r0, #0]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001202:	f384 8809 	msr	PSP, r4
		  SCB->VTOR = APPLICATION_ADDRESS;
 8001206:	6088      	str	r0, [r1, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001208:	f383 8814 	msr	CONTROL, r3
		  SysTick->CTRL = 0;
 800120c:	6113      	str	r3, [r2, #16]
		  SysTick->LOAD = 0;
 800120e:	6153      	str	r3, [r2, #20]
		  SysTick->VAL  = 0;
 8001210:	6193      	str	r3, [r2, #24]
		  JumpToApplication();
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <main+0x354>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4798      	blx	r3
 8001218:	e77e      	b.n	8001118 <main+0x1f0>
				  HAL_Delay(2);
 800121a:	2002      	movs	r0, #2
 800121c:	f000 fb00 	bl	8001820 <HAL_Delay>
				  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001220:	2180      	movs	r1, #128	; 0x80
 8001222:	4807      	ldr	r0, [pc, #28]	; (8001240 <main+0x318>)
 8001224:	f000 fdb7 	bl	8001d96 <HAL_GPIO_TogglePin>
				  if (memory_already_mapped)
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <main+0x32c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f4      	beq.n	800121a <main+0x2f2>
					  qspi_initialize(INDIRECT_POLLING);
 8001230:	2000      	movs	r0, #0
 8001232:	f7ff fbcd 	bl	80009d0 <qspi_initialize>
 8001236:	e7f0      	b.n	800121a <main+0x2f2>
 8001238:	58024800 	.word	0x58024800
 800123c:	58024400 	.word	0x58024400
 8001240:	58020400 	.word	0x58020400
 8001244:	58020000 	.word	0x58020000
 8001248:	20000000 	.word	0x20000000
 800124c:	2000008c 	.word	0x2000008c
 8001250:	58020800 	.word	0x58020800
 8001254:	200001e4 	.word	0x200001e4
 8001258:	90000000 	.word	0x90000000
 800125c:	24000000 	.word	0x24000000
 8001260:	0003fffb 	.word	0x0003fffb
 8001264:	20000034 	.word	0x20000034
 8001268:	2400ffff 	.word	0x2400ffff
 800126c:	2401fffe 	.word	0x2401fffe
 8001270:	2402fffd 	.word	0x2402fffd
 8001274:	200001e8 	.word	0x200001e8
 8001278:	20000234 	.word	0x20000234
 800127c:	20000088 	.word	0x20000088
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001288:	b508      	push	{r3, lr}
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800128a:	480a      	ldr	r0, [pc, #40]	; (80012b4 <MX_QUADSPI_Init+0x2c>)
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <MX_QUADSPI_Init+0x30>)
 800128e:	6003      	str	r3, [r0, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001290:	2301      	movs	r3, #1
 8001292:	6043      	str	r3, [r0, #4]
  hqspi.Init.FifoThreshold = 1;
 8001294:	6083      	str	r3, [r0, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001296:	2300      	movs	r3, #0
 8001298:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FlashSize = 19;
 800129a:	2213      	movs	r2, #19
 800129c:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800129e:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80012a0:	6183      	str	r3, [r0, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80012a2:	61c3      	str	r3, [r0, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80012a4:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012a6:	f001 fc41 	bl	8002b2c <HAL_QSPI_Init>
 80012aa:	b900      	cbnz	r0, 80012ae <MX_QUADSPI_Init+0x26>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80012ac:	bd08      	pop	{r3, pc}
    Error_Handler();
 80012ae:	f7ff fdaf 	bl	8000e10 <Error_Handler>
}
 80012b2:	e7fb      	b.n	80012ac <MX_QUADSPI_Init+0x24>
 80012b4:	200001e8 	.word	0x200001e8
 80012b8:	52005000 	.word	0x52005000

080012bc <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80012bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012c0:	b0ba      	sub	sp, #232	; 0xe8
 80012c2:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	2100      	movs	r1, #0
 80012c6:	9135      	str	r1, [sp, #212]	; 0xd4
 80012c8:	9136      	str	r1, [sp, #216]	; 0xd8
 80012ca:	9137      	str	r1, [sp, #220]	; 0xdc
 80012cc:	9138      	str	r1, [sp, #224]	; 0xe0
 80012ce:	9139      	str	r1, [sp, #228]	; 0xe4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d0:	22c0      	movs	r2, #192	; 0xc0
 80012d2:	a804      	add	r0, sp, #16
 80012d4:	f007 fcbc 	bl	8008c50 <memset>
  if(qspiHandle->Instance==QUADSPI)
 80012d8:	6822      	ldr	r2, [r4, #0]
 80012da:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <HAL_QSPI_MspInit+0x104>)
 80012dc:	429a      	cmp	r2, r3
 80012de:	d002      	beq.n	80012e6 <HAL_QSPI_MspInit+0x2a>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80012e0:	b03a      	add	sp, #232	; 0xe8
 80012e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80012e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012ea:	2300      	movs	r3, #0
 80012ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80012f0:	2301      	movs	r3, #1
 80012f2:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 80012f4:	230c      	movs	r3, #12
 80012f6:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 80012f8:	2308      	movs	r3, #8
 80012fa:	9308      	str	r3, [sp, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001300:	930a      	str	r3, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001302:	23c0      	movs	r3, #192	; 0xc0
 8001304:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8001306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130a:	930d      	str	r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL2;
 800130c:	2320      	movs	r3, #32
 800130e:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001310:	a804      	add	r0, sp, #16
 8001312:	f002 fc23 	bl	8003b5c <HAL_RCCEx_PeriphCLKConfig>
 8001316:	2800      	cmp	r0, #0
 8001318:	d14e      	bne.n	80013b8 <HAL_QSPI_MspInit+0xfc>
    __HAL_RCC_QSPI_CLK_ENABLE();
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <HAL_QSPI_MspInit+0x108>)
 800131c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001320:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001324:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001328:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800132c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001330:	9201      	str	r2, [sp, #4]
 8001332:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001334:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800133c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001340:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001344:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001348:	9202      	str	r2, [sp, #8]
 800134a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800134c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001350:	f042 0220 	orr.w	r2, r2, #32
 8001354:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135c:	f003 0320 	and.w	r3, r3, #32
 8001360:	9303      	str	r3, [sp, #12]
 8001362:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001364:	2340      	movs	r3, #64	; 0x40
 8001366:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2602      	movs	r6, #2
 800136a:	9636      	str	r6, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2500      	movs	r5, #0
 800136e:	9537      	str	r5, [sp, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2403      	movs	r4, #3
 8001372:	9438      	str	r4, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001374:	f04f 080a 	mov.w	r8, #10
 8001378:	f8cd 80e4 	str.w	r8, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800137c:	a935      	add	r1, sp, #212	; 0xd4
 800137e:	4812      	ldr	r0, [pc, #72]	; (80013c8 <HAL_QSPI_MspInit+0x10c>)
 8001380:	f000 fb44 	bl	8001a0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
 8001384:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001388:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	9636      	str	r6, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	9537      	str	r5, [sp, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	9438      	str	r4, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001390:	2309      	movs	r3, #9
 8001392:	9339      	str	r3, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001394:	4f0d      	ldr	r7, [pc, #52]	; (80013cc <HAL_QSPI_MspInit+0x110>)
 8001396:	a935      	add	r1, sp, #212	; 0xd4
 8001398:	4638      	mov	r0, r7
 800139a:	f000 fb37 	bl	8001a0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800139e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013a2:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	9636      	str	r6, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	9537      	str	r5, [sp, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	9438      	str	r4, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80013aa:	f8cd 80e4 	str.w	r8, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013ae:	a935      	add	r1, sp, #212	; 0xd4
 80013b0:	4638      	mov	r0, r7
 80013b2:	f000 fb2b 	bl	8001a0c <HAL_GPIO_Init>
}
 80013b6:	e793      	b.n	80012e0 <HAL_QSPI_MspInit+0x24>
      Error_Handler();
 80013b8:	f7ff fd2a 	bl	8000e10 <Error_Handler>
 80013bc:	e7ad      	b.n	800131a <HAL_QSPI_MspInit+0x5e>
 80013be:	bf00      	nop
 80013c0:	52005000 	.word	0x52005000
 80013c4:	58024400 	.word	0x58024400
 80013c8:	58021800 	.word	0x58021800
 80013cc:	58021400 	.word	0x58021400

080013d0 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 80013d0:	b508      	push	{r3, lr}

  if(qspiHandle->Instance==QUADSPI)
 80013d2:	6802      	ldr	r2, [r0, #0]
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_QSPI_MspDeInit+0x30>)
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d000      	beq.n	80013dc <HAL_QSPI_MspDeInit+0xc>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 80013da:	bd08      	pop	{r3, pc}
    __HAL_RCC_QSPI_CLK_DISABLE();
 80013dc:	4a09      	ldr	r2, [pc, #36]	; (8001404 <HAL_QSPI_MspDeInit+0x34>)
 80013de:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 80013e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013e6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_6);
 80013ea:	2140      	movs	r1, #64	; 0x40
 80013ec:	4806      	ldr	r0, [pc, #24]	; (8001408 <HAL_QSPI_MspDeInit+0x38>)
 80013ee:	f000 fc1d 	bl	8001c2c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 80013f2:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_QSPI_MspDeInit+0x3c>)
 80013f8:	f000 fc18 	bl	8001c2c <HAL_GPIO_DeInit>
}
 80013fc:	e7ed      	b.n	80013da <HAL_QSPI_MspDeInit+0xa>
 80013fe:	bf00      	nop
 8001400:	52005000 	.word	0x52005000
 8001404:	58024400 	.word	0x58024400
 8001408:	58021800 	.word	0x58021800
 800140c:	58021400 	.word	0x58021400

08001410 <MX_SDMMC1_SD_Init>:
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_SDMMC1_SD_Init+0x1c>)
 8001412:	4a07      	ldr	r2, [pc, #28]	; (8001430 <MX_SDMMC1_SD_Init+0x20>)
 8001414:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800141a:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800141c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001420:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001422:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 25;
 8001424:	2219      	movs	r2, #25
 8001426:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20000234 	.word	0x20000234
 8001430:	52007000 	.word	0x52007000

08001434 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001436:	b0bb      	sub	sp, #236	; 0xec
 8001438:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	2100      	movs	r1, #0
 800143c:	9135      	str	r1, [sp, #212]	; 0xd4
 800143e:	9136      	str	r1, [sp, #216]	; 0xd8
 8001440:	9137      	str	r1, [sp, #220]	; 0xdc
 8001442:	9138      	str	r1, [sp, #224]	; 0xe0
 8001444:	9139      	str	r1, [sp, #228]	; 0xe4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001446:	22c0      	movs	r2, #192	; 0xc0
 8001448:	a804      	add	r0, sp, #16
 800144a:	f007 fc01 	bl	8008c50 <memset>
  if(sdHandle->Instance==SDMMC1)
 800144e:	6822      	ldr	r2, [r4, #0]
 8001450:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <HAL_SD_MspInit+0xd0>)
 8001452:	429a      	cmp	r2, r3
 8001454:	d001      	beq.n	800145a <HAL_SD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001456:	b03b      	add	sp, #236	; 0xec
 8001458:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800145a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800145e:	2300      	movs	r3, #0
 8001460:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001464:	a804      	add	r0, sp, #16
 8001466:	f002 fb79 	bl	8003b5c <HAL_RCCEx_PeriphCLKConfig>
 800146a:	2800      	cmp	r0, #0
 800146c:	d146      	bne.n	80014fc <HAL_SD_MspInit+0xc8>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800146e:	4b26      	ldr	r3, [pc, #152]	; (8001508 <HAL_SD_MspInit+0xd4>)
 8001470:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001474:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001478:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800147c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001480:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8001484:	9201      	str	r2, [sp, #4]
 8001486:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001488:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800148c:	f042 0204 	orr.w	r2, r2, #4
 8001490:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001494:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001498:	f002 0204 	and.w	r2, r2, #4
 800149c:	9202      	str	r2, [sp, #8]
 800149e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014a4:	f042 0208 	orr.w	r2, r2, #8
 80014a8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	9303      	str	r3, [sp, #12]
 80014b6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 80014b8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80014bc:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2402      	movs	r4, #2
 80014c0:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2500      	movs	r5, #0
 80014c4:	9537      	str	r5, [sp, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2703      	movs	r7, #3
 80014c8:	9738      	str	r7, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80014ca:	260c      	movs	r6, #12
 80014cc:	9639      	str	r6, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ce:	a935      	add	r1, sp, #212	; 0xd4
 80014d0:	480e      	ldr	r0, [pc, #56]	; (800150c <HAL_SD_MspInit+0xd8>)
 80014d2:	f000 fa9b 	bl	8001a0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014d6:	2304      	movs	r3, #4
 80014d8:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	9537      	str	r5, [sp, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	9738      	str	r7, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80014e0:	9639      	str	r6, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e2:	a935      	add	r1, sp, #212	; 0xd4
 80014e4:	480a      	ldr	r0, [pc, #40]	; (8001510 <HAL_SD_MspInit+0xdc>)
 80014e6:	f000 fa91 	bl	8001a0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 2, 0);
 80014ea:	462a      	mov	r2, r5
 80014ec:	4621      	mov	r1, r4
 80014ee:	2031      	movs	r0, #49	; 0x31
 80014f0:	f000 f9c2 	bl	8001878 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80014f4:	2031      	movs	r0, #49	; 0x31
 80014f6:	f000 f9f5 	bl	80018e4 <HAL_NVIC_EnableIRQ>
}
 80014fa:	e7ac      	b.n	8001456 <HAL_SD_MspInit+0x22>
      Error_Handler();
 80014fc:	f7ff fc88 	bl	8000e10 <Error_Handler>
 8001500:	e7b5      	b.n	800146e <HAL_SD_MspInit+0x3a>
 8001502:	bf00      	nop
 8001504:	52007000 	.word	0x52007000
 8001508:	58024400 	.word	0x58024400
 800150c:	58020800 	.word	0x58020800
 8001510:	58020c00 	.word	0x58020c00

08001514 <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* sdHandle)
{
 8001514:	b508      	push	{r3, lr}

  if(sdHandle->Instance==SDMMC1)
 8001516:	6802      	ldr	r2, [r0, #0]
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <HAL_SD_MspDeInit+0x34>)
 800151a:	429a      	cmp	r2, r3
 800151c:	d000      	beq.n	8001520 <HAL_SD_MspDeInit+0xc>
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }
}
 800151e:	bd08      	pop	{r3, pc}
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 8001520:	4a0a      	ldr	r2, [pc, #40]	; (800154c <HAL_SD_MspDeInit+0x38>)
 8001522:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 8001526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 800152e:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8001532:	4807      	ldr	r0, [pc, #28]	; (8001550 <HAL_SD_MspDeInit+0x3c>)
 8001534:	f000 fb7a 	bl	8001c2c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8001538:	2104      	movs	r1, #4
 800153a:	4806      	ldr	r0, [pc, #24]	; (8001554 <HAL_SD_MspDeInit+0x40>)
 800153c:	f000 fb76 	bl	8001c2c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 8001540:	2031      	movs	r0, #49	; 0x31
 8001542:	f000 f9dd 	bl	8001900 <HAL_NVIC_DisableIRQ>
}
 8001546:	e7ea      	b.n	800151e <HAL_SD_MspDeInit+0xa>
 8001548:	52007000 	.word	0x52007000
 800154c:	58024400 	.word	0x58024400
 8001550:	58020800 	.word	0x58020800
 8001554:	58020c00 	.word	0x58020c00

08001558 <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
 8001558:	e7fe      	b.n	8001558 <Default_Handler>
	...

0800155c <Reset_Handler>:
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <Reset_Handler+0x34>)
 800155e:	490d      	ldr	r1, [pc, #52]	; (8001594 <Reset_Handler+0x38>)
 8001560:	e003      	b.n	800156a <Reset_Handler+0xe>
		*pDest = *pSource;
 8001562:	f851 2b04 	ldr.w	r2, [r1], #4
 8001566:	f843 2b04 	str.w	r2, [r3], #4
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 800156a:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <Reset_Handler+0x3c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d1f8      	bne.n	8001562 <Reset_Handler+0x6>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <Reset_Handler+0x40>)
 8001572:	e002      	b.n	800157a <Reset_Handler+0x1e>
		*pDest = 0;
 8001574:	2200      	movs	r2, #0
 8001576:	f843 2b04 	str.w	r2, [r3], #4
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 800157a:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <Reset_Handler+0x44>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d1f9      	bne.n	8001574 <Reset_Handler+0x18>
	SystemInit();
 8001580:	f000 f83c 	bl	80015fc <SystemInit>
	__libc_init_array();
 8001584:	f007 fb40 	bl	8008c08 <__libc_init_array>
	(void)main();
 8001588:	f7ff fcce 	bl	8000f28 <main>
	for (;;) ;
 800158c:	e7fe      	b.n	800158c <Reset_Handler+0x30>
 800158e:	bf00      	nop
 8001590:	20000000 	.word	0x20000000
 8001594:	08009100 	.word	0x08009100
 8001598:	20000018 	.word	0x20000018
 800159c:	20000018 	.word	0x20000018
 80015a0:	20000950 	.word	0x20000950

080015a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <HAL_MspInit+0x20>)
 80015a8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80015ac:	f042 0202 	orr.w	r2, r2, #2
 80015b0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80015b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c0:	b002      	add	sp, #8
 80015c2:	4770      	bx	lr
 80015c4:	58024400 	.word	0x58024400

080015c8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <NMI_Handler>

080015ca <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <HardFault_Handler>

080015cc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <MemManage_Handler>

080015ce <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <BusFault_Handler>

080015d0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <UsageFault_Handler>

080015d2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d2:	4770      	bx	lr

080015d4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d4:	4770      	bx	lr

080015d6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d6:	4770      	bx	lr

080015d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015da:	f000 f90f 	bl	80017fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015de:	bd08      	pop	{r3, pc}

080015e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80015e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80015e6:	f000 fbdf 	bl	8001da8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015ea:	bd08      	pop	{r3, pc}

080015ec <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80015ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80015ee:	4802      	ldr	r0, [pc, #8]	; (80015f8 <SDMMC1_IRQHandler+0xc>)
 80015f0:	f004 fde0 	bl	80061b4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80015f4:	bd08      	pop	{r3, pc}
 80015f6:	bf00      	nop
 80015f8:	20000234 	.word	0x20000234

080015fc <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015fc:	4a27      	ldr	r2, [pc, #156]	; (800169c <SystemInit+0xa0>)
 80015fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001602:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001606:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800160a:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <SystemInit+0xa4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	2b06      	cmp	r3, #6
 8001614:	d806      	bhi.n	8001624 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001616:	4a22      	ldr	r2, [pc, #136]	; (80016a0 <SystemInit+0xa4>)
 8001618:	6813      	ldr	r3, [r2, #0]
 800161a:	f023 030f 	bic.w	r3, r3, #15
 800161e:	f043 0307 	orr.w	r3, r3, #7
 8001622:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <SystemInit+0xa8>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	f042 0201 	orr.w	r2, r2, #1
 800162c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001632:	6819      	ldr	r1, [r3, #0]
 8001634:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <SystemInit+0xac>)
 8001636:	400a      	ands	r2, r1
 8001638:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <SystemInit+0xa4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f013 0f08 	tst.w	r3, #8
 8001642:	d006      	beq.n	8001652 <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001644:	4a16      	ldr	r2, [pc, #88]	; (80016a0 <SystemInit+0xa4>)
 8001646:	6813      	ldr	r3, [r2, #0]
 8001648:	f023 030f 	bic.w	r3, r3, #15
 800164c:	f043 0307 	orr.w	r3, r3, #7
 8001650:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <SystemInit+0xa8>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001658:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800165a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800165c:	4913      	ldr	r1, [pc, #76]	; (80016ac <SystemInit+0xb0>)
 800165e:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001660:	4913      	ldr	r1, [pc, #76]	; (80016b0 <SystemInit+0xb4>)
 8001662:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001664:	4913      	ldr	r1, [pc, #76]	; (80016b4 <SystemInit+0xb8>)
 8001666:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001668:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800166a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800166c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800166e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001670:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001672:	6819      	ldr	r1, [r3, #0]
 8001674:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001678:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800167a:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <SystemInit+0xbc>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <SystemInit+0xc0>)
 8001682:	4013      	ands	r3, r2
 8001684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001688:	d203      	bcs.n	8001692 <SystemInit+0x96>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800168a:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <SystemInit+0xc4>)
 800168c:	2201      	movs	r2, #1
 800168e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <SystemInit+0xc8>)
 8001694:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001698:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00
 80016a0:	52002000 	.word	0x52002000
 80016a4:	58024400 	.word	0x58024400
 80016a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80016ac:	02020200 	.word	0x02020200
 80016b0:	01ff0000 	.word	0x01ff0000
 80016b4:	01010280 	.word	0x01010280
 80016b8:	5c001000 	.word	0x5c001000
 80016bc:	ffff0000 	.word	0xffff0000
 80016c0:	51008000 	.word	0x51008000
 80016c4:	52004000 	.word	0x52004000

080016c8 <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80016c8:	4770      	bx	lr
	...

080016cc <HAL_DeInit>:
{
 80016cc:	b510      	push	{r4, lr}
  __HAL_RCC_AHB3_FORCE_RESET();
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_DeInit+0x68>)
 80016d0:	4a19      	ldr	r2, [pc, #100]	; (8001738 <HAL_DeInit+0x6c>)
 80016d2:	67da      	str	r2, [r3, #124]	; 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
 80016d4:	2400      	movs	r4, #0
 80016d6:	67dc      	str	r4, [r3, #124]	; 0x7c
  __HAL_RCC_AHB1_FORCE_RESET();
 80016d8:	4a18      	ldr	r2, [pc, #96]	; (800173c <HAL_DeInit+0x70>)
 80016da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();
 80016de:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  __HAL_RCC_AHB2_FORCE_RESET();
 80016e2:	f240 2271 	movw	r2, #625	; 0x271
 80016e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();
 80016ea:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  __HAL_RCC_AHB4_FORCE_RESET();
 80016ee:	4a14      	ldr	r2, [pc, #80]	; (8001740 <HAL_DeInit+0x74>)
 80016f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();
 80016f4:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  __HAL_RCC_APB3_FORCE_RESET();
 80016f8:	2218      	movs	r2, #24
 80016fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();
 80016fe:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
  __HAL_RCC_APB1L_FORCE_RESET();
 8001702:	4a10      	ldr	r2, [pc, #64]	; (8001744 <HAL_DeInit+0x78>)
 8001704:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();
 8001708:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
  __HAL_RCC_APB1H_FORCE_RESET();
 800170c:	f44f 729b 	mov.w	r2, #310	; 0x136
 8001710:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();
 8001714:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
   __HAL_RCC_APB2_FORCE_RESET();
 8001718:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <HAL_DeInit+0x7c>)
 800171a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   __HAL_RCC_APB2_RELEASE_RESET();
 800171e:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
  __HAL_RCC_APB4_FORCE_RESET();
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_DeInit+0x80>)
 8001724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
 8001728:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
  HAL_MspDeInit();
 800172c:	f7ff ffcc 	bl	80016c8 <HAL_MspDeInit>
}
 8001730:	4620      	mov	r0, r4
 8001732:	bd10      	pop	{r4, pc}
 8001734:	58024400 	.word	0x58024400
 8001738:	00015031 	.word	0x00015031
 800173c:	0a00c023 	.word	0x0a00c023
 8001740:	032807ff 	.word	0x032807ff
 8001744:	e8ffc3ff 	.word	0xe8ffc3ff
 8001748:	31d73033 	.word	0x31d73033
 800174c:	0020deaa 	.word	0x0020deaa

08001750 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_InitTick+0x44>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b90b      	cbnz	r3, 800175a <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8001756:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001758:	4770      	bx	lr
{
 800175a:	b510      	push	{r4, lr}
 800175c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800175e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001762:	fbb0 f3f3 	udiv	r3, r0, r3
 8001766:	4a0c      	ldr	r2, [pc, #48]	; (8001798 <HAL_InitTick+0x48>)
 8001768:	6810      	ldr	r0, [r2, #0]
 800176a:	fbb0 f0f3 	udiv	r0, r0, r3
 800176e:	f000 f8eb 	bl	8001948 <HAL_SYSTICK_Config>
 8001772:	b968      	cbnz	r0, 8001790 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001774:	2c0f      	cmp	r4, #15
 8001776:	d901      	bls.n	800177c <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001778:	2001      	movs	r0, #1
 800177a:	e00a      	b.n	8001792 <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800177c:	2200      	movs	r2, #0
 800177e:	4621      	mov	r1, r4
 8001780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001784:	f000 f878 	bl	8001878 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <HAL_InitTick+0x4c>)
 800178a:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 800178c:	2000      	movs	r0, #0
 800178e:	e000      	b.n	8001792 <HAL_InitTick+0x42>
      return HAL_ERROR;
 8001790:	2001      	movs	r0, #1
}
 8001792:	bd10      	pop	{r4, pc}
 8001794:	2000000c 	.word	0x2000000c
 8001798:	20000004 	.word	0x20000004
 800179c:	20000010 	.word	0x20000010

080017a0 <HAL_Init>:
{
 80017a0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a2:	2003      	movs	r0, #3
 80017a4:	f000 f856 	bl	8001854 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017a8:	f001 fe54 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 80017ac:	490f      	ldr	r1, [pc, #60]	; (80017ec <HAL_Init+0x4c>)
 80017ae:	698b      	ldr	r3, [r1, #24]
 80017b0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80017b4:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <HAL_Init+0x50>)
 80017b6:	5cd3      	ldrb	r3, [r2, r3]
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017be:	698b      	ldr	r3, [r1, #24]
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	5cd3      	ldrb	r3, [r2, r3]
 80017c6:	f003 031f 	and.w	r3, r3, #31
 80017ca:	fa20 f303 	lsr.w	r3, r0, r3
 80017ce:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <HAL_Init+0x54>)
 80017d0:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_Init+0x58>)
 80017d4:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017d6:	2000      	movs	r0, #0
 80017d8:	f7ff ffba 	bl	8001750 <HAL_InitTick>
 80017dc:	b110      	cbz	r0, 80017e4 <HAL_Init+0x44>
    return HAL_ERROR;
 80017de:	2401      	movs	r4, #1
}
 80017e0:	4620      	mov	r0, r4
 80017e2:	bd10      	pop	{r4, pc}
 80017e4:	4604      	mov	r4, r0
  HAL_MspInit();
 80017e6:	f7ff fedd 	bl	80015a4 <HAL_MspInit>
  return HAL_OK;
 80017ea:	e7f9      	b.n	80017e0 <HAL_Init+0x40>
 80017ec:	58024400 	.word	0x58024400
 80017f0:	08008c68 	.word	0x08008c68
 80017f4:	20000008 	.word	0x20000008
 80017f8:	20000004 	.word	0x20000004

080017fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_IncTick+0x10>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4a03      	ldr	r2, [pc, #12]	; (8001810 <HAL_IncTick+0x14>)
 8001802:	6811      	ldr	r1, [r2, #0]
 8001804:	440b      	add	r3, r1
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	2000000c 	.word	0x2000000c
 8001810:	200002b0 	.word	0x200002b0

08001814 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001814:	4b01      	ldr	r3, [pc, #4]	; (800181c <HAL_GetTick+0x8>)
 8001816:	6818      	ldr	r0, [r3, #0]
}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	200002b0 	.word	0x200002b0

08001820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001820:	b538      	push	{r3, r4, r5, lr}
 8001822:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001824:	f7ff fff6 	bl	8001814 <HAL_GetTick>
 8001828:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800182e:	d002      	beq.n	8001836 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <HAL_Delay+0x24>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001836:	f7ff ffed 	bl	8001814 <HAL_GetTick>
 800183a:	1b40      	subs	r0, r0, r5
 800183c:	42a0      	cmp	r0, r4
 800183e:	d3fa      	bcc.n	8001836 <HAL_Delay+0x16>
  {
  }
}
 8001840:	bd38      	pop	{r3, r4, r5, pc}
 8001842:	bf00      	nop
 8001844:	2000000c 	.word	0x2000000c

08001848 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001848:	4b01      	ldr	r3, [pc, #4]	; (8001850 <HAL_GetREVID+0x8>)
 800184a:	6818      	ldr	r0, [r3, #0]
}
 800184c:	0c00      	lsrs	r0, r0, #16
 800184e:	4770      	bx	lr
 8001850:	5c001000 	.word	0x5c001000

08001854 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001854:	4906      	ldr	r1, [pc, #24]	; (8001870 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8001856:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001858:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800185c:	041b      	lsls	r3, r3, #16
 800185e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001860:	0200      	lsls	r0, r0, #8
 8001862:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001866:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001868:	4a02      	ldr	r2, [pc, #8]	; (8001874 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800186a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800186c:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00
 8001874:	05fa0000 	.word	0x05fa0000

08001878 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001878:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_NVIC_SetPriority+0x60>)
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001882:	f1c3 0c07 	rsb	ip, r3, #7
 8001886:	f1bc 0f04 	cmp.w	ip, #4
 800188a:	bf28      	it	cs
 800188c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001890:	f103 0e04 	add.w	lr, r3, #4
 8001894:	f1be 0f06 	cmp.w	lr, #6
 8001898:	d914      	bls.n	80018c4 <HAL_NVIC_SetPriority+0x4c>
 800189a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80018a0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80018a4:	ea21 010c 	bic.w	r1, r1, ip
 80018a8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018aa:	fa0e f303 	lsl.w	r3, lr, r3
 80018ae:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80018b4:	2800      	cmp	r0, #0
 80018b6:	db07      	blt.n	80018c8 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b8:	0109      	lsls	r1, r1, #4
 80018ba:	b2c9      	uxtb	r1, r1
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <HAL_NVIC_SetPriority+0x64>)
 80018be:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80018c0:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c4:	2300      	movs	r3, #0
 80018c6:	e7e9      	b.n	800189c <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	f000 000f 	and.w	r0, r0, #15
 80018cc:	0109      	lsls	r1, r1, #4
 80018ce:	b2c9      	uxtb	r1, r1
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <HAL_NVIC_SetPriority+0x68>)
 80018d2:	5419      	strb	r1, [r3, r0]
 80018d4:	e7f4      	b.n	80018c0 <HAL_NVIC_SetPriority+0x48>
 80018d6:	bf00      	nop
 80018d8:	e000ed00 	.word	0xe000ed00
 80018dc:	e000e400 	.word	0xe000e400
 80018e0:	e000ed14 	.word	0xe000ed14

080018e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80018e4:	2800      	cmp	r0, #0
 80018e6:	db07      	blt.n	80018f8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e8:	f000 021f 	and.w	r2, r0, #31
 80018ec:	0940      	lsrs	r0, r0, #5
 80018ee:	2301      	movs	r3, #1
 80018f0:	4093      	lsls	r3, r2
 80018f2:	4a02      	ldr	r2, [pc, #8]	; (80018fc <HAL_NVIC_EnableIRQ+0x18>)
 80018f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100

08001900 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001900:	2800      	cmp	r0, #0
 8001902:	db0c      	blt.n	800191e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001904:	f000 021f 	and.w	r2, r0, #31
 8001908:	0940      	lsrs	r0, r0, #5
 800190a:	2301      	movs	r3, #1
 800190c:	4093      	lsls	r3, r2
 800190e:	3020      	adds	r0, #32
 8001910:	4a03      	ldr	r2, [pc, #12]	; (8001920 <HAL_NVIC_DisableIRQ+0x20>)
 8001912:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001916:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800191a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800191e:	4770      	bx	lr
 8001920:	e000e100 	.word	0xe000e100

08001924 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8001924:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001928:	4905      	ldr	r1, [pc, #20]	; (8001940 <HAL_NVIC_SystemReset+0x1c>)
 800192a:	68ca      	ldr	r2, [r1, #12]
 800192c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <HAL_NVIC_SystemReset+0x20>)
 8001932:	4313      	orrs	r3, r2
 8001934:	60cb      	str	r3, [r1, #12]
 8001936:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800193a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800193c:	e7fd      	b.n	800193a <HAL_NVIC_SystemReset+0x16>
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00
 8001944:	05fa0004 	.word	0x05fa0004

08001948 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001948:	3801      	subs	r0, #1
 800194a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800194e:	d20b      	bcs.n	8001968 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001950:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001954:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <HAL_SYSTICK_Config+0x24>)
 8001958:	21f0      	movs	r1, #240	; 0xf0
 800195a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800195e:	2000      	movs	r0, #0
 8001960:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001962:	2207      	movs	r2, #7
 8001964:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001966:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001968:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001970:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <HAL_MPU_Disable+0x18>)
 8001976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001978:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800197c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800197e:	2200      	movs	r2, #0
 8001980:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800198c:	f040 0001 	orr.w	r0, r0, #1
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_MPU_Enable+0x1c>)
 8001992:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001998:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800199c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800199e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80019a2:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80019ac:	7842      	ldrb	r2, [r0, #1]
 80019ae:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <HAL_MPU_ConfigRegion+0x5c>)
 80019b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 80019b4:	7803      	ldrb	r3, [r0, #0]
 80019b6:	b1fb      	cbz	r3, 80019f8 <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80019b8:	6843      	ldr	r3, [r0, #4]
 80019ba:	4a13      	ldr	r2, [pc, #76]	; (8001a08 <HAL_MPU_ConfigRegion+0x5c>)
 80019bc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019c0:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019c2:	7ac3      	ldrb	r3, [r0, #11]
 80019c4:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019c6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019ca:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019cc:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019d0:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019d2:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019d6:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019d8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019dc:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019e2:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019e8:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019ea:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80019ee:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019f0:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019f2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80019f6:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <HAL_MPU_ConfigRegion+0x5c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 8001a00:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0e:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8001a10:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a12:	e06b      	b.n	8001aec <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a14:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a16:	005e      	lsls	r6, r3, #1
 8001a18:	2403      	movs	r4, #3
 8001a1a:	40b4      	lsls	r4, r6
 8001a1c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a20:	68cc      	ldr	r4, [r1, #12]
 8001a22:	40b4      	lsls	r4, r6
 8001a24:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001a26:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a28:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a2a:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a2e:	684c      	ldr	r4, [r1, #4]
 8001a30:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8001a34:	409c      	lsls	r4, r3
 8001a36:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8001a3a:	6044      	str	r4, [r0, #4]
 8001a3c:	e068      	b.n	8001b10 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a3e:	08dd      	lsrs	r5, r3, #3
 8001a40:	3508      	adds	r5, #8
 8001a42:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a46:	f003 0407 	and.w	r4, r3, #7
 8001a4a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8001a4e:	240f      	movs	r4, #15
 8001a50:	fa04 f40c 	lsl.w	r4, r4, ip
 8001a54:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a58:	690c      	ldr	r4, [r1, #16]
 8001a5a:	fa04 f40c 	lsl.w	r4, r4, ip
 8001a5e:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001a62:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8001a66:	e06b      	b.n	8001b40 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a68:	2409      	movs	r4, #9
 8001a6a:	e000      	b.n	8001a6e <HAL_GPIO_Init+0x62>
 8001a6c:	2400      	movs	r4, #0
 8001a6e:	fa04 f40e 	lsl.w	r4, r4, lr
 8001a72:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a74:	f10c 0c02 	add.w	ip, ip, #2
 8001a78:	4d69      	ldr	r5, [pc, #420]	; (8001c20 <HAL_GPIO_Init+0x214>)
 8001a7a:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a7e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8001a82:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001a84:	43d4      	mvns	r4, r2
 8001a86:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a8a:	684f      	ldr	r7, [r1, #4]
 8001a8c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001a90:	d001      	beq.n	8001a96 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 8001a92:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001a96:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001a9a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8001a9c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001a9e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aa2:	684f      	ldr	r7, [r1, #4]
 8001aa4:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8001aa8:	d001      	beq.n	8001aae <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 8001aaa:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8001aae:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001ab2:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ab4:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 8001ab8:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001abc:	684f      	ldr	r7, [r1, #4]
 8001abe:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001ac2:	d001      	beq.n	8001ac8 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001ac4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ac8:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001acc:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ad0:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 8001ad4:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ad6:	684e      	ldr	r6, [r1, #4]
 8001ad8:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8001adc:	d001      	beq.n	8001ae2 <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 8001ade:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ae2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ae6:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 8001aea:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001aec:	680a      	ldr	r2, [r1, #0]
 8001aee:	fa32 f403 	lsrs.w	r4, r2, r3
 8001af2:	f000 8092 	beq.w	8001c1a <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001af6:	f04f 0c01 	mov.w	ip, #1
 8001afa:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 8001afe:	ea1c 0202 	ands.w	r2, ip, r2
 8001b02:	d0f2      	beq.n	8001aea <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b04:	684c      	ldr	r4, [r1, #4]
 8001b06:	f004 0403 	and.w	r4, r4, #3
 8001b0a:	3c01      	subs	r4, #1
 8001b0c:	2c01      	cmp	r4, #1
 8001b0e:	d981      	bls.n	8001a14 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b10:	684c      	ldr	r4, [r1, #4]
 8001b12:	f004 0403 	and.w	r4, r4, #3
 8001b16:	2c03      	cmp	r4, #3
 8001b18:	d00c      	beq.n	8001b34 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 8001b1a:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b1c:	005d      	lsls	r5, r3, #1
 8001b1e:	f04f 0c03 	mov.w	ip, #3
 8001b22:	fa0c fc05 	lsl.w	ip, ip, r5
 8001b26:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b2a:	688c      	ldr	r4, [r1, #8]
 8001b2c:	40ac      	lsls	r4, r5
 8001b2e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 8001b32:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b34:	684c      	ldr	r4, [r1, #4]
 8001b36:	f004 0403 	and.w	r4, r4, #3
 8001b3a:	2c02      	cmp	r4, #2
 8001b3c:	f43f af7f 	beq.w	8001a3e <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8001b40:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b42:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001b46:	f04f 0c03 	mov.w	ip, #3
 8001b4a:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001b4e:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b52:	684c      	ldr	r4, [r1, #4]
 8001b54:	f004 0403 	and.w	r4, r4, #3
 8001b58:	fa04 f40e 	lsl.w	r4, r4, lr
 8001b5c:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8001b60:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b62:	684c      	ldr	r4, [r1, #4]
 8001b64:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8001b68:	d0bf      	beq.n	8001aea <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6a:	4c2e      	ldr	r4, [pc, #184]	; (8001c24 <HAL_GPIO_Init+0x218>)
 8001b6c:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8001b70:	f045 0502 	orr.w	r5, r5, #2
 8001b74:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 8001b78:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8001b7c:	f004 0402 	and.w	r4, r4, #2
 8001b80:	9401      	str	r4, [sp, #4]
 8001b82:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001b84:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8001b88:	f10c 0502 	add.w	r5, ip, #2
 8001b8c:	4c24      	ldr	r4, [pc, #144]	; (8001c20 <HAL_GPIO_Init+0x214>)
 8001b8e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b92:	f003 0403 	and.w	r4, r3, #3
 8001b96:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8001b9a:	240f      	movs	r4, #15
 8001b9c:	fa04 f40e 	lsl.w	r4, r4, lr
 8001ba0:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ba4:	4c20      	ldr	r4, [pc, #128]	; (8001c28 <HAL_GPIO_Init+0x21c>)
 8001ba6:	42a0      	cmp	r0, r4
 8001ba8:	f43f af60 	beq.w	8001a6c <HAL_GPIO_Init+0x60>
 8001bac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001bb0:	42a0      	cmp	r0, r4
 8001bb2:	d022      	beq.n	8001bfa <HAL_GPIO_Init+0x1ee>
 8001bb4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001bb8:	42a0      	cmp	r0, r4
 8001bba:	d020      	beq.n	8001bfe <HAL_GPIO_Init+0x1f2>
 8001bbc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001bc0:	42a0      	cmp	r0, r4
 8001bc2:	d01e      	beq.n	8001c02 <HAL_GPIO_Init+0x1f6>
 8001bc4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001bc8:	42a0      	cmp	r0, r4
 8001bca:	d01c      	beq.n	8001c06 <HAL_GPIO_Init+0x1fa>
 8001bcc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001bd0:	42a0      	cmp	r0, r4
 8001bd2:	d01a      	beq.n	8001c0a <HAL_GPIO_Init+0x1fe>
 8001bd4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001bd8:	42a0      	cmp	r0, r4
 8001bda:	d018      	beq.n	8001c0e <HAL_GPIO_Init+0x202>
 8001bdc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001be0:	42a0      	cmp	r0, r4
 8001be2:	d016      	beq.n	8001c12 <HAL_GPIO_Init+0x206>
 8001be4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001be8:	42a0      	cmp	r0, r4
 8001bea:	d014      	beq.n	8001c16 <HAL_GPIO_Init+0x20a>
 8001bec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001bf0:	42a0      	cmp	r0, r4
 8001bf2:	f43f af39 	beq.w	8001a68 <HAL_GPIO_Init+0x5c>
 8001bf6:	240a      	movs	r4, #10
 8001bf8:	e739      	b.n	8001a6e <HAL_GPIO_Init+0x62>
 8001bfa:	2401      	movs	r4, #1
 8001bfc:	e737      	b.n	8001a6e <HAL_GPIO_Init+0x62>
 8001bfe:	2402      	movs	r4, #2
 8001c00:	e735      	b.n	8001a6e <HAL_GPIO_Init+0x62>
 8001c02:	2403      	movs	r4, #3
 8001c04:	e733      	b.n	8001a6e <HAL_GPIO_Init+0x62>
 8001c06:	2404      	movs	r4, #4
 8001c08:	e731      	b.n	8001a6e <HAL_GPIO_Init+0x62>
 8001c0a:	2405      	movs	r4, #5
 8001c0c:	e72f      	b.n	8001a6e <HAL_GPIO_Init+0x62>
 8001c0e:	2406      	movs	r4, #6
 8001c10:	e72d      	b.n	8001a6e <HAL_GPIO_Init+0x62>
 8001c12:	2407      	movs	r4, #7
 8001c14:	e72b      	b.n	8001a6e <HAL_GPIO_Init+0x62>
 8001c16:	2408      	movs	r4, #8
 8001c18:	e729      	b.n	8001a6e <HAL_GPIO_Init+0x62>
  }
}
 8001c1a:	b003      	add	sp, #12
 8001c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	58000400 	.word	0x58000400
 8001c24:	58024400 	.word	0x58024400
 8001c28:	58020000 	.word	0x58020000

08001c2c <HAL_GPIO_DeInit>:
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 8001c2c:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8001c2e:	fa31 f203 	lsrs.w	r2, r1, r3
 8001c32:	f000 809d 	beq.w	8001d70 <HAL_GPIO_DeInit+0x144>
{
 8001c36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c38:	e02e      	b.n	8001c98 <HAL_GPIO_DeInit+0x6c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001c3a:	2509      	movs	r5, #9
 8001c3c:	e000      	b.n	8001c40 <HAL_GPIO_DeInit+0x14>
 8001c3e:	2500      	movs	r5, #0
 8001c40:	fa05 fc0c 	lsl.w	ip, r5, ip
 8001c44:	45a4      	cmp	ip, r4
 8001c46:	d072      	beq.n	8001d2e <HAL_GPIO_DeInit+0x102>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001c48:	6804      	ldr	r4, [r0, #0]
 8001c4a:	005d      	lsls	r5, r3, #1
 8001c4c:	f04f 0c03 	mov.w	ip, #3
 8001c50:	fa0c fc05 	lsl.w	ip, ip, r5
 8001c54:	ea44 040c 	orr.w	r4, r4, ip
 8001c58:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8001c5a:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001c5e:	f10e 0e08 	add.w	lr, lr, #8
 8001c62:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8001c66:	f003 0507 	and.w	r5, r3, #7
 8001c6a:	00ae      	lsls	r6, r5, #2
 8001c6c:	250f      	movs	r5, #15
 8001c6e:	40b5      	lsls	r5, r6
 8001c70:	ea24 0405 	bic.w	r4, r4, r5
 8001c74:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c78:	68c4      	ldr	r4, [r0, #12]
 8001c7a:	ea24 040c 	bic.w	r4, r4, ip
 8001c7e:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c80:	6844      	ldr	r4, [r0, #4]
 8001c82:	ea24 0202 	bic.w	r2, r4, r2
 8001c86:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c88:	6882      	ldr	r2, [r0, #8]
 8001c8a:	ea22 020c 	bic.w	r2, r2, ip
 8001c8e:	6082      	str	r2, [r0, #8]
    }

    position++;
 8001c90:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 8001c92:	fa31 f203 	lsrs.w	r2, r1, r3
 8001c96:	d06a      	beq.n	8001d6e <HAL_GPIO_DeInit+0x142>
    iocurrent = GPIO_Pin & (1UL << position) ;
 8001c98:	2201      	movs	r2, #1
 8001c9a:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8001c9c:	ea12 0e01 	ands.w	lr, r2, r1
 8001ca0:	d0f6      	beq.n	8001c90 <HAL_GPIO_DeInit+0x64>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001ca2:	089e      	lsrs	r6, r3, #2
 8001ca4:	1cb5      	adds	r5, r6, #2
 8001ca6:	4c33      	ldr	r4, [pc, #204]	; (8001d74 <HAL_GPIO_DeInit+0x148>)
 8001ca8:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001cac:	f003 0c03 	and.w	ip, r3, #3
 8001cb0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001cb4:	250f      	movs	r5, #15
 8001cb6:	fa05 f70c 	lsl.w	r7, r5, ip
 8001cba:	403c      	ands	r4, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001cbc:	4d2e      	ldr	r5, [pc, #184]	; (8001d78 <HAL_GPIO_DeInit+0x14c>)
 8001cbe:	42a8      	cmp	r0, r5
 8001cc0:	d0bd      	beq.n	8001c3e <HAL_GPIO_DeInit+0x12>
 8001cc2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cc6:	42a8      	cmp	r0, r5
 8001cc8:	d021      	beq.n	8001d0e <HAL_GPIO_DeInit+0xe2>
 8001cca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cce:	42a8      	cmp	r0, r5
 8001cd0:	d01f      	beq.n	8001d12 <HAL_GPIO_DeInit+0xe6>
 8001cd2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cd6:	42a8      	cmp	r0, r5
 8001cd8:	d01d      	beq.n	8001d16 <HAL_GPIO_DeInit+0xea>
 8001cda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cde:	42a8      	cmp	r0, r5
 8001ce0:	d01b      	beq.n	8001d1a <HAL_GPIO_DeInit+0xee>
 8001ce2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ce6:	42a8      	cmp	r0, r5
 8001ce8:	d019      	beq.n	8001d1e <HAL_GPIO_DeInit+0xf2>
 8001cea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cee:	42a8      	cmp	r0, r5
 8001cf0:	d017      	beq.n	8001d22 <HAL_GPIO_DeInit+0xf6>
 8001cf2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cf6:	42a8      	cmp	r0, r5
 8001cf8:	d015      	beq.n	8001d26 <HAL_GPIO_DeInit+0xfa>
 8001cfa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cfe:	42a8      	cmp	r0, r5
 8001d00:	d013      	beq.n	8001d2a <HAL_GPIO_DeInit+0xfe>
 8001d02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d06:	42a8      	cmp	r0, r5
 8001d08:	d097      	beq.n	8001c3a <HAL_GPIO_DeInit+0xe>
 8001d0a:	250a      	movs	r5, #10
 8001d0c:	e798      	b.n	8001c40 <HAL_GPIO_DeInit+0x14>
 8001d0e:	2501      	movs	r5, #1
 8001d10:	e796      	b.n	8001c40 <HAL_GPIO_DeInit+0x14>
 8001d12:	2502      	movs	r5, #2
 8001d14:	e794      	b.n	8001c40 <HAL_GPIO_DeInit+0x14>
 8001d16:	2503      	movs	r5, #3
 8001d18:	e792      	b.n	8001c40 <HAL_GPIO_DeInit+0x14>
 8001d1a:	2504      	movs	r5, #4
 8001d1c:	e790      	b.n	8001c40 <HAL_GPIO_DeInit+0x14>
 8001d1e:	2505      	movs	r5, #5
 8001d20:	e78e      	b.n	8001c40 <HAL_GPIO_DeInit+0x14>
 8001d22:	2506      	movs	r5, #6
 8001d24:	e78c      	b.n	8001c40 <HAL_GPIO_DeInit+0x14>
 8001d26:	2507      	movs	r5, #7
 8001d28:	e78a      	b.n	8001c40 <HAL_GPIO_DeInit+0x14>
 8001d2a:	2508      	movs	r5, #8
 8001d2c:	e788      	b.n	8001c40 <HAL_GPIO_DeInit+0x14>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8001d2e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8001d32:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8001d36:	ea25 050e 	bic.w	r5, r5, lr
 8001d3a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8001d3e:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8001d42:	ea25 050e 	bic.w	r5, r5, lr
 8001d46:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8001d4a:	6865      	ldr	r5, [r4, #4]
 8001d4c:	ea25 050e 	bic.w	r5, r5, lr
 8001d50:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001d52:	6825      	ldr	r5, [r4, #0]
 8001d54:	ea25 050e 	bic.w	r5, r5, lr
 8001d58:	6025      	str	r5, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001d5a:	f8df c018 	ldr.w	ip, [pc, #24]	; 8001d74 <HAL_GPIO_DeInit+0x148>
 8001d5e:	1cb4      	adds	r4, r6, #2
 8001d60:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 8001d64:	ea25 0507 	bic.w	r5, r5, r7
 8001d68:	f84c 5024 	str.w	r5, [ip, r4, lsl #2]
 8001d6c:	e76c      	b.n	8001c48 <HAL_GPIO_DeInit+0x1c>
  }
}
 8001d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	58000400 	.word	0x58000400
 8001d78:	58020000 	.word	0x58020000

08001d7c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001d7c:	6903      	ldr	r3, [r0, #16]
 8001d7e:	4219      	tst	r1, r3
 8001d80:	d001      	beq.n	8001d86 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001d82:	2001      	movs	r0, #1
 8001d84:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d86:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001d88:	4770      	bx	lr

08001d8a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d8a:	b10a      	cbz	r2, 8001d90 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8c:	6181      	str	r1, [r0, #24]
 8001d8e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d90:	0409      	lsls	r1, r1, #16
 8001d92:	6181      	str	r1, [r0, #24]
  }
}
 8001d94:	4770      	bx	lr

08001d96 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d96:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d98:	ea01 0203 	and.w	r2, r1, r3
 8001d9c:	ea21 0103 	bic.w	r1, r1, r3
 8001da0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001da4:	6181      	str	r1, [r0, #24]
}
 8001da6:	4770      	bx	lr

08001da8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001da8:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db2:	4203      	tst	r3, r0
 8001db4:	d100      	bne.n	8001db8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8001db6:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dbc:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dc0:	f7fe ffa4 	bl	8000d0c <HAL_GPIO_EXTI_Callback>
}
 8001dc4:	e7f7      	b.n	8001db6 <HAL_GPIO_EXTI_IRQHandler+0xe>

08001dc6 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001dc6:	6803      	ldr	r3, [r0, #0]
 8001dc8:	699a      	ldr	r2, [r3, #24]
 8001dca:	f012 0f02 	tst.w	r2, #2
 8001dce:	d001      	beq.n	8001dd4 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dd4:	6803      	ldr	r3, [r0, #0]
 8001dd6:	699a      	ldr	r2, [r3, #24]
 8001dd8:	f012 0f01 	tst.w	r2, #1
 8001ddc:	d103      	bne.n	8001de6 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001dde:	699a      	ldr	r2, [r3, #24]
 8001de0:	f042 0201 	orr.w	r2, r2, #1
 8001de4:	619a      	str	r2, [r3, #24]
  }
}
 8001de6:	4770      	bx	lr

08001de8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001de8:	b410      	push	{r4}
 8001dea:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dec:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001df0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001df4:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001df6:	4321      	orrs	r1, r4
 8001df8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001dfc:	6802      	ldr	r2, [r0, #0]
 8001dfe:	6853      	ldr	r3, [r2, #4]
 8001e00:	0d64      	lsrs	r4, r4, #21
 8001e02:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001e06:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001e0a:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001e0e:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001e12:	f044 0403 	orr.w	r4, r4, #3
 8001e16:	ea23 0404 	bic.w	r4, r3, r4
 8001e1a:	4321      	orrs	r1, r4
 8001e1c:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <I2C_IsErrorOccurred>:
{
 8001e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e28:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e2a:	6803      	ldr	r3, [r0, #0]
 8001e2c:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e2e:	f016 0610 	ands.w	r6, r6, #16
 8001e32:	d07e      	beq.n	8001f32 <I2C_IsErrorOccurred+0x10e>
 8001e34:	460d      	mov	r5, r1
 8001e36:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e38:	2210      	movs	r2, #16
 8001e3a:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8001e3c:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001e3e:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e40:	6823      	ldr	r3, [r4, #0]
 8001e42:	6998      	ldr	r0, [r3, #24]
 8001e44:	f010 0f20 	tst.w	r0, #32
 8001e48:	d132      	bne.n	8001eb0 <I2C_IsErrorOccurred+0x8c>
 8001e4a:	bb8f      	cbnz	r7, 8001eb0 <I2C_IsErrorOccurred+0x8c>
      if (Timeout != HAL_MAX_DELAY)
 8001e4c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001e50:	d0f6      	beq.n	8001e40 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e52:	f7ff fcdf 	bl	8001814 <HAL_GetTick>
 8001e56:	eba0 0008 	sub.w	r0, r0, r8
 8001e5a:	42a8      	cmp	r0, r5
 8001e5c:	d801      	bhi.n	8001e62 <I2C_IsErrorOccurred+0x3e>
 8001e5e:	2d00      	cmp	r5, #0
 8001e60:	d1ee      	bne.n	8001e40 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e62:	6821      	ldr	r1, [r4, #0]
 8001e64:	684a      	ldr	r2, [r1, #4]
 8001e66:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8001e6a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8001e6e:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e70:	6988      	ldr	r0, [r1, #24]
 8001e72:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8001e76:	d004      	beq.n	8001e82 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 8001e78:	3b20      	subs	r3, #32
 8001e7a:	bf18      	it	ne
 8001e7c:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 8001e7e:	b902      	cbnz	r2, 8001e82 <I2C_IsErrorOccurred+0x5e>
 8001e80:	b973      	cbnz	r3, 8001ea0 <I2C_IsErrorOccurred+0x7c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e82:	6823      	ldr	r3, [r4, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f013 0f20 	tst.w	r3, #32
 8001e8a:	d1d9      	bne.n	8001e40 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e8c:	f7ff fcc2 	bl	8001814 <HAL_GetTick>
 8001e90:	eba0 0008 	sub.w	r0, r0, r8
 8001e94:	2819      	cmp	r0, #25
 8001e96:	d9f4      	bls.n	8001e82 <I2C_IsErrorOccurred+0x5e>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001e98:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 8001e9c:	2701      	movs	r7, #1
              break;
 8001e9e:	e7cf      	b.n	8001e40 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ea0:	684b      	ldr	r3, [r1, #4]
 8001ea2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea6:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8001ea8:	f7ff fcb4 	bl	8001814 <HAL_GetTick>
 8001eac:	4680      	mov	r8, r0
 8001eae:	e7e8      	b.n	8001e82 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8001eb0:	b90f      	cbnz	r7, 8001eb6 <I2C_IsErrorOccurred+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8001eb6:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 8001eba:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8001ebc:	6822      	ldr	r2, [r4, #0]
 8001ebe:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ec0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ec4:	d005      	beq.n	8001ed2 <I2C_IsErrorOccurred+0xae>
    error_code |= HAL_I2C_ERROR_BERR;
 8001ec6:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ece:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8001ed0:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ed2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001ed6:	d006      	beq.n	8001ee6 <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_OVR;
 8001ed8:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001edc:	6822      	ldr	r2, [r4, #0]
 8001ede:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ee2:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8001ee4:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ee6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001eea:	d024      	beq.n	8001f36 <I2C_IsErrorOccurred+0x112>
    error_code |= HAL_I2C_ERROR_ARLO;
 8001eec:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef6:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8001ef8:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8001efa:	4620      	mov	r0, r4
 8001efc:	f7ff ff63 	bl	8001dc6 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001f00:	6822      	ldr	r2, [r4, #0]
 8001f02:	6853      	ldr	r3, [r2, #4]
 8001f04:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001f08:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001f0c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8001f16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f18:	431e      	orrs	r6, r3
 8001f1a:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f1c:	2320      	movs	r3, #32
 8001f1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001f28:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8001f2c:	4628      	mov	r0, r5
 8001f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8001f32:	2500      	movs	r5, #0
 8001f34:	e7c2      	b.n	8001ebc <I2C_IsErrorOccurred+0x98>
  if (status != HAL_OK)
 8001f36:	2d00      	cmp	r5, #0
 8001f38:	d0f8      	beq.n	8001f2c <I2C_IsErrorOccurred+0x108>
 8001f3a:	e7de      	b.n	8001efa <I2C_IsErrorOccurred+0xd6>

08001f3c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001f3c:	b570      	push	{r4, r5, r6, lr}
 8001f3e:	4604      	mov	r4, r0
 8001f40:	460d      	mov	r5, r1
 8001f42:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f013 0f02 	tst.w	r3, #2
 8001f4c:	d122      	bne.n	8001f94 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f4e:	4632      	mov	r2, r6
 8001f50:	4629      	mov	r1, r5
 8001f52:	4620      	mov	r0, r4
 8001f54:	f7ff ff66 	bl	8001e24 <I2C_IsErrorOccurred>
 8001f58:	b9f0      	cbnz	r0, 8001f98 <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8001f5a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001f5e:	d0f1      	beq.n	8001f44 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f60:	f7ff fc58 	bl	8001814 <HAL_GetTick>
 8001f64:	1b80      	subs	r0, r0, r6
 8001f66:	42a8      	cmp	r0, r5
 8001f68:	d801      	bhi.n	8001f6e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001f6a:	2d00      	cmp	r5, #0
 8001f6c:	d1ea      	bne.n	8001f44 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001f6e:	6823      	ldr	r3, [r4, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f013 0f02 	tst.w	r3, #2
 8001f76:	d1e5      	bne.n	8001f44 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f7a:	f043 0320 	orr.w	r3, r3, #32
 8001f7e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f80:	2320      	movs	r3, #32
 8001f82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8001f8c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8001f90:	2001      	movs	r0, #1
 8001f92:	e000      	b.n	8001f96 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 8001f94:	2000      	movs	r0, #0
}
 8001f96:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001f98:	2001      	movs	r0, #1
 8001f9a:	e7fc      	b.n	8001f96 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

08001f9c <I2C_WaitOnFlagUntilTimeout>:
{
 8001f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fa0:	4605      	mov	r5, r0
 8001fa2:	460f      	mov	r7, r1
 8001fa4:	4616      	mov	r6, r2
 8001fa6:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fa8:	682c      	ldr	r4, [r5, #0]
 8001faa:	69a4      	ldr	r4, [r4, #24]
 8001fac:	ea37 0304 	bics.w	r3, r7, r4
 8001fb0:	bf0c      	ite	eq
 8001fb2:	f04f 0c01 	moveq.w	ip, #1
 8001fb6:	f04f 0c00 	movne.w	ip, #0
 8001fba:	45b4      	cmp	ip, r6
 8001fbc:	d122      	bne.n	8002004 <I2C_WaitOnFlagUntilTimeout+0x68>
    if (Timeout != HAL_MAX_DELAY)
 8001fbe:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8001fc2:	d0f1      	beq.n	8001fa8 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc4:	f7ff fc26 	bl	8001814 <HAL_GetTick>
 8001fc8:	9b06      	ldr	r3, [sp, #24]
 8001fca:	1ac0      	subs	r0, r0, r3
 8001fcc:	4540      	cmp	r0, r8
 8001fce:	d802      	bhi.n	8001fd6 <I2C_WaitOnFlagUntilTimeout+0x3a>
 8001fd0:	f1b8 0f00 	cmp.w	r8, #0
 8001fd4:	d1e8      	bne.n	8001fa8 <I2C_WaitOnFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fd6:	682b      	ldr	r3, [r5, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	ea37 0303 	bics.w	r3, r7, r3
 8001fde:	bf0c      	ite	eq
 8001fe0:	2301      	moveq	r3, #1
 8001fe2:	2300      	movne	r3, #0
 8001fe4:	42b3      	cmp	r3, r6
 8001fe6:	d1df      	bne.n	8001fa8 <I2C_WaitOnFlagUntilTimeout+0xc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fe8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001fea:	f043 0320 	orr.w	r3, r3, #32
 8001fee:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8001ffc:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8002000:	2001      	movs	r0, #1
 8002002:	e000      	b.n	8002006 <I2C_WaitOnFlagUntilTimeout+0x6a>
  return HAL_OK;
 8002004:	2000      	movs	r0, #0
}
 8002006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800200a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800200a:	b570      	push	{r4, r5, r6, lr}
 800200c:	4604      	mov	r4, r0
 800200e:	460d      	mov	r5, r1
 8002010:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002012:	e004      	b.n	800201e <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002014:	6823      	ldr	r3, [r4, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f013 0f20 	tst.w	r3, #32
 800201c:	d012      	beq.n	8002044 <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f013 0f20 	tst.w	r3, #32
 8002026:	d11b      	bne.n	8002060 <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002028:	4632      	mov	r2, r6
 800202a:	4629      	mov	r1, r5
 800202c:	4620      	mov	r0, r4
 800202e:	f7ff fef9 	bl	8001e24 <I2C_IsErrorOccurred>
 8002032:	b9b8      	cbnz	r0, 8002064 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002034:	f7ff fbee 	bl	8001814 <HAL_GetTick>
 8002038:	1b80      	subs	r0, r0, r6
 800203a:	42a8      	cmp	r0, r5
 800203c:	d8ea      	bhi.n	8002014 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 800203e:	2d00      	cmp	r5, #0
 8002040:	d1ed      	bne.n	800201e <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
 8002042:	e7e7      	b.n	8002014 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002044:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002046:	f043 0320 	orr.w	r3, r3, #32
 800204a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800204c:	2320      	movs	r3, #32
 800204e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002052:	2300      	movs	r3, #0
 8002054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002058:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800205c:	2001      	movs	r0, #1
 800205e:	e000      	b.n	8002062 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
 8002060:	2000      	movs	r0, #0
}
 8002062:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002064:	2001      	movs	r0, #1
 8002066:	e7fc      	b.n	8002062 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>

08002068 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002068:	b570      	push	{r4, r5, r6, lr}
 800206a:	4604      	mov	r4, r0
 800206c:	460d      	mov	r5, r1
 800206e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002070:	e02d      	b.n	80020ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002072:	699a      	ldr	r2, [r3, #24]
 8002074:	f012 0f04 	tst.w	r2, #4
 8002078:	d002      	beq.n	8002080 <I2C_WaitOnRXNEFlagUntilTimeout+0x18>
 800207a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800207c:	2a00      	cmp	r2, #0
 800207e:	d14c      	bne.n	800211a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002080:	699a      	ldr	r2, [r3, #24]
 8002082:	f012 0f10 	tst.w	r2, #16
 8002086:	d01a      	beq.n	80020be <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002088:	2210      	movs	r2, #16
 800208a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800208c:	2304      	movs	r3, #4
 800208e:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002090:	6823      	ldr	r3, [r4, #0]
 8002092:	2220      	movs	r2, #32
 8002094:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8002096:	6821      	ldr	r1, [r4, #0]
 8002098:	684b      	ldr	r3, [r1, #4]
 800209a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800209e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80020a2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80020a6:	f023 0301 	bic.w	r3, r3, #1
 80020aa:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80020ac:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80020b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80020ba:	2101      	movs	r1, #1
 80020bc:	e02d      	b.n	800211a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020be:	2300      	movs	r3, #0
 80020c0:	6463      	str	r3, [r4, #68]	; 0x44
 80020c2:	e7e5      	b.n	8002090 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80020c4:	6823      	ldr	r3, [r4, #0]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f013 0f04 	tst.w	r3, #4
 80020cc:	d018      	beq.n	8002100 <I2C_WaitOnRXNEFlagUntilTimeout+0x98>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020ce:	6823      	ldr	r3, [r4, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	f013 0f04 	tst.w	r3, #4
 80020d6:	d11f      	bne.n	8002118 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020d8:	4632      	mov	r2, r6
 80020da:	4629      	mov	r1, r5
 80020dc:	4620      	mov	r0, r4
 80020de:	f7ff fea1 	bl	8001e24 <I2C_IsErrorOccurred>
 80020e2:	4601      	mov	r1, r0
 80020e4:	b9d8      	cbnz	r0, 800211e <I2C_WaitOnRXNEFlagUntilTimeout+0xb6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	699a      	ldr	r2, [r3, #24]
 80020ea:	f012 0f20 	tst.w	r2, #32
 80020ee:	d1c0      	bne.n	8002072 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f0:	f7ff fb90 	bl	8001814 <HAL_GetTick>
 80020f4:	1b80      	subs	r0, r0, r6
 80020f6:	42a8      	cmp	r0, r5
 80020f8:	d8e4      	bhi.n	80020c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 80020fa:	2d00      	cmp	r5, #0
 80020fc:	d1e7      	bne.n	80020ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80020fe:	e7e1      	b.n	80020c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002100:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002102:	f043 0320 	orr.w	r3, r3, #32
 8002106:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002108:	2320      	movs	r3, #32
 800210a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800210e:	2300      	movs	r3, #0
 8002110:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002114:	2101      	movs	r1, #1
 8002116:	e000      	b.n	800211a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  return HAL_OK;
 8002118:	2100      	movs	r1, #0
}
 800211a:	4608      	mov	r0, r1
 800211c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800211e:	2101      	movs	r1, #1
 8002120:	e7fb      	b.n	800211a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
	...

08002124 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002124:	2800      	cmp	r0, #0
 8002126:	d057      	beq.n	80021d8 <HAL_I2C_Init+0xb4>
{
 8002128:	b510      	push	{r4, lr}
 800212a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800212c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002130:	2b00      	cmp	r3, #0
 8002132:	d041      	beq.n	80021b8 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002134:	2324      	movs	r3, #36	; 0x24
 8002136:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800213a:	6822      	ldr	r2, [r4, #0]
 800213c:	6813      	ldr	r3, [r2, #0]
 800213e:	f023 0301 	bic.w	r3, r3, #1
 8002142:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002144:	6863      	ldr	r3, [r4, #4]
 8002146:	6822      	ldr	r2, [r4, #0]
 8002148:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800214c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800214e:	6822      	ldr	r2, [r4, #0]
 8002150:	6893      	ldr	r3, [r2, #8]
 8002152:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002156:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002158:	68e3      	ldr	r3, [r4, #12]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d031      	beq.n	80021c2 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800215e:	68a3      	ldr	r3, [r4, #8]
 8002160:	6822      	ldr	r2, [r4, #0]
 8002162:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8002166:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002168:	68e3      	ldr	r3, [r4, #12]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d02f      	beq.n	80021ce <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800216e:	6822      	ldr	r2, [r4, #0]
 8002170:	6851      	ldr	r1, [r2, #4]
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <HAL_I2C_Init+0xb8>)
 8002174:	430b      	orrs	r3, r1
 8002176:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002178:	6822      	ldr	r2, [r4, #0]
 800217a:	68d3      	ldr	r3, [r2, #12]
 800217c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002180:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002182:	6923      	ldr	r3, [r4, #16]
 8002184:	6962      	ldr	r2, [r4, #20]
 8002186:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002188:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800218a:	6822      	ldr	r2, [r4, #0]
 800218c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002190:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002192:	69e3      	ldr	r3, [r4, #28]
 8002194:	6a21      	ldr	r1, [r4, #32]
 8002196:	6822      	ldr	r2, [r4, #0]
 8002198:	430b      	orrs	r3, r1
 800219a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800219c:	6822      	ldr	r2, [r4, #0]
 800219e:	6813      	ldr	r3, [r2, #0]
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a6:	2000      	movs	r0, #0
 80021a8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021aa:	2320      	movs	r3, #32
 80021ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021b0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80021b6:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80021b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80021bc:	f7fe f9f2 	bl	80005a4 <HAL_I2C_MspInit>
 80021c0:	e7b8      	b.n	8002134 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021c2:	68a3      	ldr	r3, [r4, #8]
 80021c4:	6822      	ldr	r2, [r4, #0]
 80021c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ca:	6093      	str	r3, [r2, #8]
 80021cc:	e7cc      	b.n	8002168 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021ce:	6823      	ldr	r3, [r4, #0]
 80021d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	e7ca      	b.n	800216e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80021d8:	2001      	movs	r0, #1
}
 80021da:	4770      	bx	lr
 80021dc:	02008000 	.word	0x02008000

080021e0 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80021e0:	b1a8      	cbz	r0, 800220e <HAL_I2C_DeInit+0x2e>
{
 80021e2:	b510      	push	{r4, lr}
 80021e4:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e6:	2324      	movs	r3, #36	; 0x24
 80021e8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80021ec:	6802      	ldr	r2, [r0, #0]
 80021ee:	6813      	ldr	r3, [r2, #0]
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80021f6:	f7fe fa23 	bl	8000640 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021fa:	2000      	movs	r0, #0
 80021fc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80021fe:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002202:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002204:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 8002208:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800220c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800220e:	2001      	movs	r0, #1
}
 8002210:	4770      	bx	lr
	...

08002214 <HAL_I2C_Master_Transmit>:
{
 8002214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	460f      	mov	r7, r1
 800221c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800221e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8002222:	b2c9      	uxtb	r1, r1
 8002224:	2920      	cmp	r1, #32
 8002226:	f040 80a3 	bne.w	8002370 <HAL_I2C_Master_Transmit+0x15c>
 800222a:	4604      	mov	r4, r0
 800222c:	4690      	mov	r8, r2
 800222e:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8002230:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002234:	2b01      	cmp	r3, #1
 8002236:	f000 809f 	beq.w	8002378 <HAL_I2C_Master_Transmit+0x164>
 800223a:	f04f 0a01 	mov.w	sl, #1
 800223e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002242:	f7ff fae7 	bl	8001814 <HAL_GetTick>
 8002246:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002248:	9000      	str	r0, [sp, #0]
 800224a:	2319      	movs	r3, #25
 800224c:	4652      	mov	r2, sl
 800224e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002252:	4620      	mov	r0, r4
 8002254:	f7ff fea2 	bl	8001f9c <I2C_WaitOnFlagUntilTimeout>
 8002258:	2800      	cmp	r0, #0
 800225a:	f040 808f 	bne.w	800237c <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800225e:	2321      	movs	r3, #33	; 0x21
 8002260:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002264:	2310      	movs	r3, #16
 8002266:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800226a:	2300      	movs	r3, #0
 800226c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800226e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002272:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002276:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002278:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800227a:	b29b      	uxth	r3, r3
 800227c:	2bff      	cmp	r3, #255	; 0xff
 800227e:	d90a      	bls.n	8002296 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002280:	22ff      	movs	r2, #255	; 0xff
 8002282:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002284:	4b41      	ldr	r3, [pc, #260]	; (800238c <HAL_I2C_Master_Transmit+0x178>)
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800228c:	4639      	mov	r1, r7
 800228e:	4620      	mov	r0, r4
 8002290:	f7ff fdaa 	bl	8001de8 <I2C_TransferConfig>
 8002294:	e018      	b.n	80022c8 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8002296:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002298:	b292      	uxth	r2, r2
 800229a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800229c:	4b3b      	ldr	r3, [pc, #236]	; (800238c <HAL_I2C_Master_Transmit+0x178>)
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	4639      	mov	r1, r7
 80022a8:	4620      	mov	r0, r4
 80022aa:	f7ff fd9d 	bl	8001de8 <I2C_TransferConfig>
 80022ae:	e00b      	b.n	80022c8 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 80022b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80022b2:	b292      	uxth	r2, r2
 80022b4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022b6:	2300      	movs	r3, #0
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	4639      	mov	r1, r7
 80022c2:	4620      	mov	r0, r4
 80022c4:	f7ff fd90 	bl	8001de8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d033      	beq.n	8002338 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d0:	462a      	mov	r2, r5
 80022d2:	4631      	mov	r1, r6
 80022d4:	4620      	mov	r0, r4
 80022d6:	f7ff fe31 	bl	8001f3c <I2C_WaitOnTXISFlagUntilTimeout>
 80022da:	2800      	cmp	r0, #0
 80022dc:	d150      	bne.n	8002380 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80022e0:	6823      	ldr	r3, [r4, #0]
 80022e2:	7812      	ldrb	r2, [r2, #0]
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80022e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022e8:	3301      	adds	r3, #1
 80022ea:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80022ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80022f6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002300:	b292      	uxth	r2, r2
 8002302:	2a00      	cmp	r2, #0
 8002304:	d0e0      	beq.n	80022c8 <HAL_I2C_Master_Transmit+0xb4>
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1de      	bne.n	80022c8 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800230a:	9500      	str	r5, [sp, #0]
 800230c:	4633      	mov	r3, r6
 800230e:	2200      	movs	r2, #0
 8002310:	2180      	movs	r1, #128	; 0x80
 8002312:	4620      	mov	r0, r4
 8002314:	f7ff fe42 	bl	8001f9c <I2C_WaitOnFlagUntilTimeout>
 8002318:	bba0      	cbnz	r0, 8002384 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800231a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800231c:	b29b      	uxth	r3, r3
 800231e:	2bff      	cmp	r3, #255	; 0xff
 8002320:	d9c6      	bls.n	80022b0 <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002322:	22ff      	movs	r2, #255	; 0xff
 8002324:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002326:	2300      	movs	r3, #0
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800232e:	4639      	mov	r1, r7
 8002330:	4620      	mov	r0, r4
 8002332:	f7ff fd59 	bl	8001de8 <I2C_TransferConfig>
 8002336:	e7c7      	b.n	80022c8 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002338:	462a      	mov	r2, r5
 800233a:	4631      	mov	r1, r6
 800233c:	4620      	mov	r0, r4
 800233e:	f7ff fe64 	bl	800200a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002342:	bb08      	cbnz	r0, 8002388 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002344:	6823      	ldr	r3, [r4, #0]
 8002346:	2220      	movs	r2, #32
 8002348:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800234a:	6821      	ldr	r1, [r4, #0]
 800234c:	684b      	ldr	r3, [r1, #4]
 800234e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002352:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002356:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800235a:	f023 0301 	bic.w	r3, r3, #1
 800235e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002360:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002364:	2300      	movs	r3, #0
 8002366:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800236a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800236e:	e000      	b.n	8002372 <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8002370:	2002      	movs	r0, #2
}
 8002372:	b002      	add	sp, #8
 8002374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8002378:	2002      	movs	r0, #2
 800237a:	e7fa      	b.n	8002372 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 800237c:	2001      	movs	r0, #1
 800237e:	e7f8      	b.n	8002372 <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8002380:	2001      	movs	r0, #1
 8002382:	e7f6      	b.n	8002372 <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8002384:	2001      	movs	r0, #1
 8002386:	e7f4      	b.n	8002372 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8002388:	2001      	movs	r0, #1
 800238a:	e7f2      	b.n	8002372 <HAL_I2C_Master_Transmit+0x15e>
 800238c:	80002000 	.word	0x80002000

08002390 <HAL_I2C_Slave_Receive>:
{
 8002390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	461d      	mov	r5, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002398:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b20      	cmp	r3, #32
 80023a0:	f040 80b2 	bne.w	8002508 <HAL_I2C_Slave_Receive+0x178>
 80023a4:	4604      	mov	r4, r0
 80023a6:	460f      	mov	r7, r1
 80023a8:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80023aa:	2a00      	cmp	r2, #0
 80023ac:	bf18      	it	ne
 80023ae:	2900      	cmpne	r1, #0
 80023b0:	d02b      	beq.n	800240a <HAL_I2C_Slave_Receive+0x7a>
    __HAL_LOCK(hi2c);
 80023b2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	f000 80aa 	beq.w	8002510 <HAL_I2C_Slave_Receive+0x180>
 80023bc:	2301      	movs	r3, #1
 80023be:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80023c2:	f7ff fa27 	bl	8001814 <HAL_GetTick>
 80023c6:	4606      	mov	r6, r0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023c8:	2322      	movs	r3, #34	; 0x22
 80023ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80023ce:	2320      	movs	r3, #32
 80023d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d4:	2200      	movs	r2, #0
 80023d6:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80023d8:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80023da:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize = hi2c->XferCount;
 80023de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80023e0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferISR   = NULL;
 80023e2:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80023e4:	6821      	ldr	r1, [r4, #0]
 80023e6:	684b      	ldr	r3, [r1, #4]
 80023e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80023ec:	604b      	str	r3, [r1, #4]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80023ee:	9000      	str	r0, [sp, #0]
 80023f0:	462b      	mov	r3, r5
 80023f2:	2108      	movs	r1, #8
 80023f4:	4620      	mov	r0, r4
 80023f6:	f7ff fdd1 	bl	8001f9c <I2C_WaitOnFlagUntilTimeout>
 80023fa:	b158      	cbz	r0, 8002414 <HAL_I2C_Slave_Receive+0x84>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80023fc:	6822      	ldr	r2, [r4, #0]
 80023fe:	6853      	ldr	r3, [r2, #4]
 8002400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002404:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8002406:	2001      	movs	r0, #1
 8002408:	e07f      	b.n	800250a <HAL_I2C_Slave_Receive+0x17a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800240a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800240e:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002410:	2001      	movs	r0, #1
 8002412:	e07a      	b.n	800250a <HAL_I2C_Slave_Receive+0x17a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002414:	6823      	ldr	r3, [r4, #0]
 8002416:	2208      	movs	r2, #8
 8002418:	61da      	str	r2, [r3, #28]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 800241a:	9600      	str	r6, [sp, #0]
 800241c:	462b      	mov	r3, r5
 800241e:	2201      	movs	r2, #1
 8002420:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002424:	4620      	mov	r0, r4
 8002426:	f7ff fdb9 	bl	8001f9c <I2C_WaitOnFlagUntilTimeout>
 800242a:	b9f0      	cbnz	r0, 800246a <HAL_I2C_Slave_Receive+0xda>
    while (hi2c->XferCount > 0U)
 800242c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800242e:	b29b      	uxth	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d03b      	beq.n	80024ac <HAL_I2C_Slave_Receive+0x11c>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002434:	4632      	mov	r2, r6
 8002436:	4629      	mov	r1, r5
 8002438:	4620      	mov	r0, r4
 800243a:	f7ff fe15 	bl	8002068 <I2C_WaitOnRXNEFlagUntilTimeout>
 800243e:	b9d8      	cbnz	r0, 8002478 <HAL_I2C_Slave_Receive+0xe8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002444:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002446:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800244a:	3301      	adds	r3, #1
 800244c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800244e:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
 8002452:	fa1f fc8c 	uxth.w	ip, ip
 8002456:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800245a:	fa1f fc8c 	uxth.w	ip, ip
 800245e:	f8a4 c02a 	strh.w	ip, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002462:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002464:	3b01      	subs	r3, #1
 8002466:	8523      	strh	r3, [r4, #40]	; 0x28
 8002468:	e7e0      	b.n	800242c <HAL_I2C_Slave_Receive+0x9c>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800246a:	6822      	ldr	r2, [r4, #0]
 800246c:	6853      	ldr	r3, [r2, #4]
 800246e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002472:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8002474:	2001      	movs	r0, #1
 8002476:	e048      	b.n	800250a <HAL_I2C_Slave_Receive+0x17a>
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002478:	6822      	ldr	r2, [r4, #0]
 800247a:	6853      	ldr	r3, [r2, #4]
 800247c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002480:	6053      	str	r3, [r2, #4]
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002482:	6823      	ldr	r3, [r4, #0]
 8002484:	699a      	ldr	r2, [r3, #24]
 8002486:	f012 0f04 	tst.w	r2, #4
 800248a:	d00d      	beq.n	80024a8 <HAL_I2C_Slave_Receive+0x118>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800248c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800248e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002490:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002494:	3301      	adds	r3, #1
 8002496:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8002498:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29b      	uxth	r3, r3
 80024a0:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 80024a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80024a4:	3b01      	subs	r3, #1
 80024a6:	8523      	strh	r3, [r4, #40]	; 0x28
        return HAL_ERROR;
 80024a8:	2001      	movs	r0, #1
 80024aa:	e02e      	b.n	800250a <HAL_I2C_Slave_Receive+0x17a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ac:	4632      	mov	r2, r6
 80024ae:	4629      	mov	r1, r5
 80024b0:	4620      	mov	r0, r4
 80024b2:	f7ff fdaa 	bl	800200a <I2C_WaitOnSTOPFlagUntilTimeout>
 80024b6:	b130      	cbz	r0, 80024c6 <HAL_I2C_Slave_Receive+0x136>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80024b8:	6822      	ldr	r2, [r4, #0]
 80024ba:	6853      	ldr	r3, [r2, #4]
 80024bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c0:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 80024c2:	2001      	movs	r0, #1
 80024c4:	e021      	b.n	800250a <HAL_I2C_Slave_Receive+0x17a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	2220      	movs	r2, #32
 80024ca:	61da      	str	r2, [r3, #28]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 80024cc:	9600      	str	r6, [sp, #0]
 80024ce:	462b      	mov	r3, r5
 80024d0:	2201      	movs	r2, #1
 80024d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024d6:	4620      	mov	r0, r4
 80024d8:	f7ff fd60 	bl	8001f9c <I2C_WaitOnFlagUntilTimeout>
 80024dc:	b130      	cbz	r0, 80024ec <HAL_I2C_Slave_Receive+0x15c>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80024de:	6822      	ldr	r2, [r4, #0]
 80024e0:	6853      	ldr	r3, [r2, #4]
 80024e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e6:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 80024e8:	2001      	movs	r0, #1
 80024ea:	e00e      	b.n	800250a <HAL_I2C_Slave_Receive+0x17a>
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80024ec:	6822      	ldr	r2, [r4, #0]
 80024ee:	6853      	ldr	r3, [r2, #4]
 80024f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024f4:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80024f6:	2320      	movs	r3, #32
 80024f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002502:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8002506:	e000      	b.n	800250a <HAL_I2C_Slave_Receive+0x17a>
    return HAL_BUSY;
 8002508:	2002      	movs	r0, #2
}
 800250a:	b002      	add	sp, #8
 800250c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 8002510:	2002      	movs	r0, #2
 8002512:	e7fa      	b.n	800250a <HAL_I2C_Slave_Receive+0x17a>

08002514 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002514:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b20      	cmp	r3, #32
 800251c:	d124      	bne.n	8002568 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800251e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002522:	2b01      	cmp	r3, #1
 8002524:	d022      	beq.n	800256c <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002526:	2301      	movs	r3, #1
 8002528:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800252c:	2324      	movs	r3, #36	; 0x24
 800252e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002532:	6802      	ldr	r2, [r0, #0]
 8002534:	6813      	ldr	r3, [r2, #0]
 8002536:	f023 0301 	bic.w	r3, r3, #1
 800253a:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800253c:	6802      	ldr	r2, [r0, #0]
 800253e:	6813      	ldr	r3, [r2, #0]
 8002540:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002544:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002546:	6802      	ldr	r2, [r0, #0]
 8002548:	6813      	ldr	r3, [r2, #0]
 800254a:	4319      	orrs	r1, r3
 800254c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800254e:	6802      	ldr	r2, [r0, #0]
 8002550:	6813      	ldr	r3, [r2, #0]
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002558:	2320      	movs	r3, #32
 800255a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800255e:	2300      	movs	r3, #0
 8002560:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002564:	4618      	mov	r0, r3
 8002566:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002568:	2002      	movs	r0, #2
 800256a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800256c:	2002      	movs	r0, #2
  }
}
 800256e:	4770      	bx	lr

08002570 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002570:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b20      	cmp	r3, #32
 8002578:	d122      	bne.n	80025c0 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800257a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800257e:	2b01      	cmp	r3, #1
 8002580:	d020      	beq.n	80025c4 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002582:	2301      	movs	r3, #1
 8002584:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002588:	2324      	movs	r3, #36	; 0x24
 800258a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800258e:	6802      	ldr	r2, [r0, #0]
 8002590:	6813      	ldr	r3, [r2, #0]
 8002592:	f023 0301 	bic.w	r3, r3, #1
 8002596:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002598:	6802      	ldr	r2, [r0, #0]
 800259a:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800259c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025a0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025a4:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025a6:	6802      	ldr	r2, [r0, #0]
 80025a8:	6813      	ldr	r3, [r2, #0]
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b0:	2320      	movs	r3, #32
 80025b2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b6:	2300      	movs	r3, #0
 80025b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80025bc:	4618      	mov	r0, r3
 80025be:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80025c0:	2002      	movs	r0, #2
 80025c2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80025c4:	2002      	movs	r0, #2
  }
}
 80025c6:	4770      	bx	lr

080025c8 <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80025c8:	4b13      	ldr	r3, [pc, #76]	; (8002618 <HAL_PWREx_ConfigSupply+0x50>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f013 0f04 	tst.w	r3, #4
 80025d0:	d107      	bne.n	80025e2 <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <HAL_PWREx_ConfigSupply+0x50>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	4283      	cmp	r3, r0
 80025dc:	d01a      	beq.n	8002614 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025de:	2001      	movs	r0, #1
 80025e0:	4770      	bx	lr
{
 80025e2:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025e4:	4a0c      	ldr	r2, [pc, #48]	; (8002618 <HAL_PWREx_ConfigSupply+0x50>)
 80025e6:	68d3      	ldr	r3, [r2, #12]
 80025e8:	f023 0307 	bic.w	r3, r3, #7
 80025ec:	4318      	orrs	r0, r3
 80025ee:	60d0      	str	r0, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025f0:	f7ff f910 	bl	8001814 <HAL_GetTick>
 80025f4:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025f6:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_PWREx_ConfigSupply+0x50>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80025fe:	d107      	bne.n	8002610 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002600:	f7ff f908 	bl	8001814 <HAL_GetTick>
 8002604:	1b00      	subs	r0, r0, r4
 8002606:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800260a:	d9f4      	bls.n	80025f6 <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 800260c:	2001      	movs	r0, #1
 800260e:	e000      	b.n	8002612 <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002610:	2000      	movs	r0, #0
}
 8002612:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8002614:	2000      	movs	r0, #0
}
 8002616:	4770      	bx	lr
 8002618:	58024800 	.word	0x58024800

0800261c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800261c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800261e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8002620:	b133      	cbz	r3, 8002630 <QSPI_Config+0x14>
 8002622:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8002626:	d003      	beq.n	8002630 <QSPI_Config+0x14>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8002628:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800262a:	6804      	ldr	r4, [r0, #0]
 800262c:	3b01      	subs	r3, #1
 800262e:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8002630:	698c      	ldr	r4, [r1, #24]
 8002632:	2c00      	cmp	r4, #0
 8002634:	d06e      	beq.n	8002714 <QSPI_Config+0xf8>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002636:	6a0e      	ldr	r6, [r1, #32]
 8002638:	2e00      	cmp	r6, #0
 800263a:	d03b      	beq.n	80026b4 <QSPI_Config+0x98>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800263c:	6803      	ldr	r3, [r0, #0]
 800263e:	688c      	ldr	r4, [r1, #8]
 8002640:	61dc      	str	r4, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002642:	69cc      	ldr	r4, [r1, #28]
 8002644:	b1f4      	cbz	r4, 8002684 <QSPI_Config+0x68>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002646:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002648:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800264a:	432b      	orrs	r3, r5
 800264c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800264e:	432b      	orrs	r3, r5
 8002650:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8002652:	432b      	orrs	r3, r5
 8002654:	694d      	ldr	r5, [r1, #20]
 8002656:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
 800265a:	690d      	ldr	r5, [r1, #16]
 800265c:	432b      	orrs	r3, r5
 800265e:	6a0d      	ldr	r5, [r1, #32]
 8002660:	432b      	orrs	r3, r5
 8002662:	68cd      	ldr	r5, [r1, #12]
 8002664:	432b      	orrs	r3, r5
 8002666:	4323      	orrs	r3, r4
 8002668:	698c      	ldr	r4, [r1, #24]
 800266a:	4323      	orrs	r3, r4
 800266c:	680c      	ldr	r4, [r1, #0]
 800266e:	4323      	orrs	r3, r4
 8002670:	6804      	ldr	r4, [r0, #0]
 8002672:	4313      	orrs	r3, r2
 8002674:	6163      	str	r3, [r4, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002676:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 800267a:	d019      	beq.n	80026b0 <QSPI_Config+0x94>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800267c:	6803      	ldr	r3, [r0, #0]
 800267e:	684a      	ldr	r2, [r1, #4]
 8002680:	619a      	str	r2, [r3, #24]
 8002682:	e015      	b.n	80026b0 <QSPI_Config+0x94>
      }
      else
      {
        /*---- Command with instruction and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002684:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002686:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8002688:	432b      	orrs	r3, r5
 800268a:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800268c:	432b      	orrs	r3, r5
 800268e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8002690:	432b      	orrs	r3, r5
 8002692:	694d      	ldr	r5, [r1, #20]
 8002694:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
 8002698:	690d      	ldr	r5, [r1, #16]
 800269a:	432b      	orrs	r3, r5
 800269c:	6a0d      	ldr	r5, [r1, #32]
 800269e:	432b      	orrs	r3, r5
 80026a0:	4323      	orrs	r3, r4
 80026a2:	698c      	ldr	r4, [r1, #24]
 80026a4:	4323      	orrs	r3, r4
 80026a6:	680c      	ldr	r4, [r1, #0]
 80026a8:	4323      	orrs	r3, r4
 80026aa:	6801      	ldr	r1, [r0, #0]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	614a      	str	r2, [r1, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80026b0:	bcf0      	pop	{r4, r5, r6, r7}
 80026b2:	4770      	bx	lr
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80026b4:	69cd      	ldr	r5, [r1, #28]
 80026b6:	b1d5      	cbz	r5, 80026ee <QSPI_Config+0xd2>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80026b8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80026ba:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 80026bc:	433b      	orrs	r3, r7
 80026be:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 80026c0:	433b      	orrs	r3, r7
 80026c2:	6a4f      	ldr	r7, [r1, #36]	; 0x24
 80026c4:	433b      	orrs	r3, r7
 80026c6:	694f      	ldr	r7, [r1, #20]
 80026c8:	ea43 4387 	orr.w	r3, r3, r7, lsl #18
 80026cc:	4333      	orrs	r3, r6
 80026ce:	68ce      	ldr	r6, [r1, #12]
 80026d0:	4333      	orrs	r3, r6
 80026d2:	432b      	orrs	r3, r5
 80026d4:	4323      	orrs	r3, r4
 80026d6:	680c      	ldr	r4, [r1, #0]
 80026d8:	4323      	orrs	r3, r4
 80026da:	6804      	ldr	r4, [r0, #0]
 80026dc:	4313      	orrs	r3, r2
 80026de:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80026e0:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 80026e4:	d0e4      	beq.n	80026b0 <QSPI_Config+0x94>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80026e6:	6803      	ldr	r3, [r0, #0]
 80026e8:	684a      	ldr	r2, [r1, #4]
 80026ea:	619a      	str	r2, [r3, #24]
 80026ec:	e7e0      	b.n	80026b0 <QSPI_Config+0x94>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80026ee:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80026f0:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 80026f2:	433b      	orrs	r3, r7
 80026f4:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 80026f6:	433b      	orrs	r3, r7
 80026f8:	6a4f      	ldr	r7, [r1, #36]	; 0x24
 80026fa:	433b      	orrs	r3, r7
 80026fc:	694f      	ldr	r7, [r1, #20]
 80026fe:	ea43 4387 	orr.w	r3, r3, r7, lsl #18
 8002702:	4333      	orrs	r3, r6
 8002704:	432b      	orrs	r3, r5
 8002706:	4323      	orrs	r3, r4
 8002708:	680c      	ldr	r4, [r1, #0]
 800270a:	4323      	orrs	r3, r4
 800270c:	6801      	ldr	r1, [r0, #0]
 800270e:	431a      	orrs	r2, r3
 8002710:	614a      	str	r2, [r1, #20]
 8002712:	e7cd      	b.n	80026b0 <QSPI_Config+0x94>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002714:	6a0d      	ldr	r5, [r1, #32]
 8002716:	2d00      	cmp	r5, #0
 8002718:	d037      	beq.n	800278a <QSPI_Config+0x16e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800271a:	6803      	ldr	r3, [r0, #0]
 800271c:	688c      	ldr	r4, [r1, #8]
 800271e:	61dc      	str	r4, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002720:	69cd      	ldr	r5, [r1, #28]
 8002722:	b1e5      	cbz	r5, 800275e <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002724:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002726:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8002728:	4323      	orrs	r3, r4
 800272a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800272c:	4323      	orrs	r3, r4
 800272e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002730:	4323      	orrs	r3, r4
 8002732:	694c      	ldr	r4, [r1, #20]
 8002734:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8002738:	690c      	ldr	r4, [r1, #16]
 800273a:	4323      	orrs	r3, r4
 800273c:	6a0c      	ldr	r4, [r1, #32]
 800273e:	4323      	orrs	r3, r4
 8002740:	68cc      	ldr	r4, [r1, #12]
 8002742:	4323      	orrs	r3, r4
 8002744:	432b      	orrs	r3, r5
 8002746:	698c      	ldr	r4, [r1, #24]
 8002748:	4323      	orrs	r3, r4
 800274a:	6804      	ldr	r4, [r0, #0]
 800274c:	4313      	orrs	r3, r2
 800274e:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002750:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8002754:	d0ac      	beq.n	80026b0 <QSPI_Config+0x94>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002756:	6803      	ldr	r3, [r0, #0]
 8002758:	684a      	ldr	r2, [r1, #4]
 800275a:	619a      	str	r2, [r3, #24]
 800275c:	e7a8      	b.n	80026b0 <QSPI_Config+0x94>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800275e:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8002760:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002762:	431c      	orrs	r4, r3
 8002764:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8002766:	431c      	orrs	r4, r3
 8002768:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800276a:	431c      	orrs	r4, r3
 800276c:	694b      	ldr	r3, [r1, #20]
 800276e:	ea44 4483 	orr.w	r4, r4, r3, lsl #18
 8002772:	690b      	ldr	r3, [r1, #16]
 8002774:	431c      	orrs	r4, r3
 8002776:	6a0b      	ldr	r3, [r1, #32]
 8002778:	431c      	orrs	r4, r3
 800277a:	ea45 0304 	orr.w	r3, r5, r4
 800277e:	698c      	ldr	r4, [r1, #24]
 8002780:	4323      	orrs	r3, r4
 8002782:	6801      	ldr	r1, [r0, #0]
 8002784:	431a      	orrs	r2, r3
 8002786:	614a      	str	r2, [r1, #20]
 8002788:	e792      	b.n	80026b0 <QSPI_Config+0x94>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800278a:	69ce      	ldr	r6, [r1, #28]
 800278c:	b1ce      	cbz	r6, 80027c2 <QSPI_Config+0x1a6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800278e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002790:	6acf      	ldr	r7, [r1, #44]	; 0x2c
 8002792:	433b      	orrs	r3, r7
 8002794:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 8002796:	433b      	orrs	r3, r7
 8002798:	6a4f      	ldr	r7, [r1, #36]	; 0x24
 800279a:	433b      	orrs	r3, r7
 800279c:	694f      	ldr	r7, [r1, #20]
 800279e:	ea43 4387 	orr.w	r3, r3, r7, lsl #18
 80027a2:	432b      	orrs	r3, r5
 80027a4:	68cd      	ldr	r5, [r1, #12]
 80027a6:	432b      	orrs	r3, r5
 80027a8:	4333      	orrs	r3, r6
 80027aa:	4323      	orrs	r3, r4
 80027ac:	6804      	ldr	r4, [r0, #0]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80027b2:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 80027b6:	f43f af7b 	beq.w	80026b0 <QSPI_Config+0x94>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80027ba:	6803      	ldr	r3, [r0, #0]
 80027bc:	684a      	ldr	r2, [r1, #4]
 80027be:	619a      	str	r2, [r3, #24]
 80027c0:	e776      	b.n	80026b0 <QSPI_Config+0x94>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80027c2:	f8d1 c024 	ldr.w	ip, [r1, #36]	; 0x24
 80027c6:	f1bc 0f00 	cmp.w	ip, #0
 80027ca:	f43f af71 	beq.w	80026b0 <QSPI_Config+0x94>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80027ce:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80027d0:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 80027d2:	433b      	orrs	r3, r7
 80027d4:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 80027d6:	433b      	orrs	r3, r7
 80027d8:	ea4c 0703 	orr.w	r7, ip, r3
 80027dc:	694b      	ldr	r3, [r1, #20]
 80027de:	ea47 4383 	orr.w	r3, r7, r3, lsl #18
 80027e2:	431d      	orrs	r5, r3
 80027e4:	ea46 0305 	orr.w	r3, r6, r5
 80027e8:	4323      	orrs	r3, r4
 80027ea:	6801      	ldr	r1, [r0, #0]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	614a      	str	r2, [r1, #20]
}
 80027f0:	e75e      	b.n	80026b0 <QSPI_Config+0x94>

080027f2 <QSPI_WaitFlagStateUntilTimeout>:
{
 80027f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027f6:	4605      	mov	r5, r0
 80027f8:	460f      	mov	r7, r1
 80027fa:	4616      	mov	r6, r2
 80027fc:	4699      	mov	r9, r3
 80027fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002802:	682c      	ldr	r4, [r5, #0]
 8002804:	68a4      	ldr	r4, [r4, #8]
 8002806:	423c      	tst	r4, r7
 8002808:	bf14      	ite	ne
 800280a:	f04f 0c01 	movne.w	ip, #1
 800280e:	f04f 0c00 	moveq.w	ip, #0
 8002812:	45b4      	cmp	ip, r6
 8002814:	d014      	beq.n	8002840 <QSPI_WaitFlagStateUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8002816:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800281a:	d0f2      	beq.n	8002802 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281c:	f7fe fffa 	bl	8001814 <HAL_GetTick>
 8002820:	eba0 0009 	sub.w	r0, r0, r9
 8002824:	4540      	cmp	r0, r8
 8002826:	d802      	bhi.n	800282e <QSPI_WaitFlagStateUntilTimeout+0x3c>
 8002828:	f1b8 0f00 	cmp.w	r8, #0
 800282c:	d1e9      	bne.n	8002802 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800282e:	2304      	movs	r3, #4
 8002830:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002834:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	646b      	str	r3, [r5, #68]	; 0x44
        return HAL_ERROR;
 800283c:	2001      	movs	r0, #1
 800283e:	e000      	b.n	8002842 <QSPI_WaitFlagStateUntilTimeout+0x50>
  return HAL_OK;
 8002840:	2000      	movs	r0, #0
}
 8002842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002846 <HAL_QSPI_DeInit>:
  if(hqspi == NULL)
 8002846:	b168      	cbz	r0, 8002864 <HAL_QSPI_DeInit+0x1e>
{
 8002848:	b510      	push	{r4, lr}
 800284a:	4604      	mov	r4, r0
  __HAL_QSPI_DISABLE(hqspi);
 800284c:	6802      	ldr	r2, [r0, #0]
 800284e:	6813      	ldr	r3, [r2, #0]
 8002850:	f023 0301 	bic.w	r3, r3, #1
 8002854:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 8002856:	f7fe fdbb 	bl	80013d0 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800285a:	2000      	movs	r0, #0
 800285c:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 800285e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
}
 8002862:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002864:	2001      	movs	r0, #1
}
 8002866:	4770      	bx	lr

08002868 <HAL_QSPI_Command>:
{
 8002868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	4604      	mov	r4, r0
 8002870:	460f      	mov	r7, r1
 8002872:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8002874:	f7fe ffce 	bl	8001814 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8002878:	f894 c040 	ldrb.w	ip, [r4, #64]	; 0x40
 800287c:	fa5f fc8c 	uxtb.w	ip, ip
 8002880:	f1bc 0f01 	cmp.w	ip, #1
 8002884:	d03c      	beq.n	8002900 <HAL_QSPI_Command+0x98>
 8002886:	4605      	mov	r5, r0
 8002888:	2301      	movs	r3, #1
 800288a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800288e:	f894 c041 	ldrb.w	ip, [r4, #65]	; 0x41
 8002892:	fa5f fc8c 	uxtb.w	ip, ip
 8002896:	459c      	cmp	ip, r3
 8002898:	d008      	beq.n	80028ac <HAL_QSPI_Command+0x44>
    status = HAL_BUSY;
 800289a:	f04f 0802 	mov.w	r8, #2
  __HAL_UNLOCK(hqspi);
 800289e:	2300      	movs	r3, #0
 80028a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80028a4:	4640      	mov	r0, r8
 80028a6:	b002      	add	sp, #8
 80028a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80028ac:	2200      	movs	r2, #0
 80028ae:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80028b0:	2302      	movs	r3, #2
 80028b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80028b6:	9600      	str	r6, [sp, #0]
 80028b8:	4603      	mov	r3, r0
 80028ba:	2120      	movs	r1, #32
 80028bc:	4620      	mov	r0, r4
 80028be:	f7ff ff98 	bl	80027f2 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80028c2:	4680      	mov	r8, r0
 80028c4:	2800      	cmp	r0, #0
 80028c6:	d1ea      	bne.n	800289e <HAL_QSPI_Command+0x36>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80028c8:	2200      	movs	r2, #0
 80028ca:	4639      	mov	r1, r7
 80028cc:	4620      	mov	r0, r4
 80028ce:	f7ff fea5 	bl	800261c <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	b11b      	cbz	r3, 80028de <HAL_QSPI_Command+0x76>
        hqspi->State = HAL_QSPI_STATE_READY;
 80028d6:	2301      	movs	r3, #1
 80028d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80028dc:	e7df      	b.n	800289e <HAL_QSPI_Command+0x36>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80028de:	9600      	str	r6, [sp, #0]
 80028e0:	462b      	mov	r3, r5
 80028e2:	2201      	movs	r2, #1
 80028e4:	2102      	movs	r1, #2
 80028e6:	4620      	mov	r0, r4
 80028e8:	f7ff ff83 	bl	80027f2 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80028ec:	4680      	mov	r8, r0
 80028ee:	2800      	cmp	r0, #0
 80028f0:	d1d5      	bne.n	800289e <HAL_QSPI_Command+0x36>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	2202      	movs	r2, #2
 80028f6:	60da      	str	r2, [r3, #12]
          hqspi->State = HAL_QSPI_STATE_READY;
 80028f8:	2301      	movs	r3, #1
 80028fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80028fe:	e7ce      	b.n	800289e <HAL_QSPI_Command+0x36>
  __HAL_LOCK(hqspi);
 8002900:	f04f 0802 	mov.w	r8, #2
 8002904:	e7ce      	b.n	80028a4 <HAL_QSPI_Command+0x3c>

08002906 <HAL_QSPI_Transmit>:
{
 8002906:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800290a:	b083      	sub	sp, #12
 800290c:	4604      	mov	r4, r0
 800290e:	4689      	mov	r9, r1
 8002910:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8002912:	f7fe ff7f 	bl	8001814 <HAL_GetTick>
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002916:	f8d4 8000 	ldr.w	r8, [r4]
  __HAL_LOCK(hqspi);
 800291a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d057      	beq.n	80029d4 <HAL_QSPI_Transmit+0xce>
 8002924:	4606      	mov	r6, r0
 8002926:	2301      	movs	r3, #1
 8002928:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800292c:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 8002930:	b2ed      	uxtb	r5, r5
 8002932:	429d      	cmp	r5, r3
 8002934:	d007      	beq.n	8002946 <HAL_QSPI_Transmit+0x40>
    status = HAL_BUSY;
 8002936:	2502      	movs	r5, #2
  __HAL_UNLOCK(hqspi);
 8002938:	2300      	movs	r3, #0
 800293a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800293e:	4628      	mov	r0, r5
 8002940:	b003      	add	sp, #12
 8002942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002946:	2300      	movs	r3, #0
 8002948:	6463      	str	r3, [r4, #68]	; 0x44
    if(pData != NULL )
 800294a:	f1b9 0f00 	cmp.w	r9, #0
 800294e:	d03c      	beq.n	80029ca <HAL_QSPI_Transmit+0xc4>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8002950:	2312      	movs	r3, #18
 8002952:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002956:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800295a:	3301      	adds	r3, #1
 800295c:	62e3      	str	r3, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800295e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8002962:	3301      	adds	r3, #1
 8002964:	62a3      	str	r3, [r4, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8002966:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800296a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800296e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002972:	f8c8 3014 	str.w	r3, [r8, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2500      	movs	r5, #0
      while(hqspi->TxXferCount > 0U)
 8002978:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800297a:	b19b      	cbz	r3, 80029a4 <HAL_QSPI_Transmit+0x9e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800297c:	9700      	str	r7, [sp, #0]
 800297e:	4633      	mov	r3, r6
 8002980:	2201      	movs	r2, #1
 8002982:	2104      	movs	r1, #4
 8002984:	4620      	mov	r0, r4
 8002986:	f7ff ff34 	bl	80027f2 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800298a:	4605      	mov	r5, r0
 800298c:	b950      	cbnz	r0, 80029a4 <HAL_QSPI_Transmit+0x9e>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800298e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	f888 3020 	strb.w	r3, [r8, #32]
        hqspi->pTxBuffPtr++;
 8002996:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002998:	3101      	adds	r1, #1
 800299a:	6261      	str	r1, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800299c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800299e:	3901      	subs	r1, #1
 80029a0:	62e1      	str	r1, [r4, #44]	; 0x2c
 80029a2:	e7e9      	b.n	8002978 <HAL_QSPI_Transmit+0x72>
      if (status == HAL_OK)
 80029a4:	b11d      	cbz	r5, 80029ae <HAL_QSPI_Transmit+0xa8>
      hqspi->State = HAL_QSPI_STATE_READY;
 80029a6:	2301      	movs	r3, #1
 80029a8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80029ac:	e7c4      	b.n	8002938 <HAL_QSPI_Transmit+0x32>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80029ae:	9700      	str	r7, [sp, #0]
 80029b0:	4633      	mov	r3, r6
 80029b2:	2201      	movs	r2, #1
 80029b4:	2102      	movs	r1, #2
 80029b6:	4620      	mov	r0, r4
 80029b8:	f7ff ff1b 	bl	80027f2 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80029bc:	4605      	mov	r5, r0
 80029be:	2800      	cmp	r0, #0
 80029c0:	d1f1      	bne.n	80029a6 <HAL_QSPI_Transmit+0xa0>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80029c2:	6823      	ldr	r3, [r4, #0]
 80029c4:	2202      	movs	r2, #2
 80029c6:	60da      	str	r2, [r3, #12]
 80029c8:	e7ed      	b.n	80029a6 <HAL_QSPI_Transmit+0xa0>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80029ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80029cc:	f043 0308 	orr.w	r3, r3, #8
 80029d0:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 80029d2:	e7b1      	b.n	8002938 <HAL_QSPI_Transmit+0x32>
  __HAL_LOCK(hqspi);
 80029d4:	2502      	movs	r5, #2
 80029d6:	e7b2      	b.n	800293e <HAL_QSPI_Transmit+0x38>

080029d8 <HAL_QSPI_AutoPolling>:
{
 80029d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	4604      	mov	r4, r0
 80029e0:	4688      	mov	r8, r1
 80029e2:	4615      	mov	r5, r2
 80029e4:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 80029e6:	f7fe ff15 	bl	8001814 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80029ea:	f894 c040 	ldrb.w	ip, [r4, #64]	; 0x40
 80029ee:	fa5f fc8c 	uxtb.w	ip, ip
 80029f2:	f1bc 0f01 	cmp.w	ip, #1
 80029f6:	d048      	beq.n	8002a8a <HAL_QSPI_AutoPolling+0xb2>
 80029f8:	4606      	mov	r6, r0
 80029fa:	2301      	movs	r3, #1
 80029fc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002a00:	f894 c041 	ldrb.w	ip, [r4, #65]	; 0x41
 8002a04:	fa5f fc8c 	uxtb.w	ip, ip
 8002a08:	459c      	cmp	ip, r3
 8002a0a:	d006      	beq.n	8002a1a <HAL_QSPI_AutoPolling+0x42>
    status = HAL_BUSY;
 8002a0c:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8002a14:	b002      	add	sp, #8
 8002a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8002a1e:	2342      	movs	r3, #66	; 0x42
 8002a20:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002a24:	9700      	str	r7, [sp, #0]
 8002a26:	4603      	mov	r3, r0
 8002a28:	2120      	movs	r1, #32
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f7ff fee1 	bl	80027f2 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8002a30:	2800      	cmp	r0, #0
 8002a32:	d1ec      	bne.n	8002a0e <HAL_QSPI_AutoPolling+0x36>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8002a34:	6823      	ldr	r3, [r4, #0]
 8002a36:	682a      	ldr	r2, [r5, #0]
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8002a3a:	6823      	ldr	r3, [r4, #0]
 8002a3c:	686a      	ldr	r2, [r5, #4]
 8002a3e:	625a      	str	r2, [r3, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	68aa      	ldr	r2, [r5, #8]
 8002a44:	62da      	str	r2, [r3, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8002a46:	6822      	ldr	r2, [r4, #0]
 8002a48:	6813      	ldr	r3, [r2, #0]
 8002a4a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002a4e:	6929      	ldr	r1, [r5, #16]
 8002a50:	430b      	orrs	r3, r1
 8002a52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a56:	6013      	str	r3, [r2, #0]
      cmd->NbData = cfg->StatusBytesSize;
 8002a58:	68eb      	ldr	r3, [r5, #12]
 8002a5a:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8002a5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a62:	4641      	mov	r1, r8
 8002a64:	4620      	mov	r0, r4
 8002a66:	f7ff fdd9 	bl	800261c <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8002a6a:	9700      	str	r7, [sp, #0]
 8002a6c:	4633      	mov	r3, r6
 8002a6e:	2201      	movs	r2, #1
 8002a70:	2108      	movs	r1, #8
 8002a72:	4620      	mov	r0, r4
 8002a74:	f7ff febd 	bl	80027f2 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8002a78:	2800      	cmp	r0, #0
 8002a7a:	d1c8      	bne.n	8002a0e <HAL_QSPI_AutoPolling+0x36>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	2208      	movs	r2, #8
 8002a80:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8002a82:	2301      	movs	r3, #1
 8002a84:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002a88:	e7c1      	b.n	8002a0e <HAL_QSPI_AutoPolling+0x36>
  __HAL_LOCK(hqspi);
 8002a8a:	2002      	movs	r0, #2
 8002a8c:	e7c2      	b.n	8002a14 <HAL_QSPI_AutoPolling+0x3c>

08002a8e <HAL_QSPI_MemoryMapped>:
{
 8002a8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a90:	b083      	sub	sp, #12
 8002a92:	4604      	mov	r4, r0
 8002a94:	460e      	mov	r6, r1
 8002a96:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8002a98:	f7fe febc 	bl	8001814 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8002a9c:	f894 c040 	ldrb.w	ip, [r4, #64]	; 0x40
 8002aa0:	fa5f fc8c 	uxtb.w	ip, ip
 8002aa4:	f1bc 0f01 	cmp.w	ip, #1
 8002aa8:	d03b      	beq.n	8002b22 <HAL_QSPI_MemoryMapped+0x94>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002ab0:	f894 c041 	ldrb.w	ip, [r4, #65]	; 0x41
 8002ab4:	fa5f fc8c 	uxtb.w	ip, ip
 8002ab8:	459c      	cmp	ip, r3
 8002aba:	d006      	beq.n	8002aca <HAL_QSPI_MemoryMapped+0x3c>
    status = HAL_BUSY;
 8002abc:	2702      	movs	r7, #2
  __HAL_UNLOCK(hqspi);
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8002ac4:	4638      	mov	r0, r7
 8002ac6:	b003      	add	sp, #12
 8002ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002aca:	2200      	movs	r2, #0
 8002acc:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8002ace:	2382      	movs	r3, #130	; 0x82
 8002ad0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002ad4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2120      	movs	r1, #32
 8002adc:	4620      	mov	r0, r4
 8002ade:	f7ff fe88 	bl	80027f2 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8002ae2:	4607      	mov	r7, r0
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	d1ea      	bne.n	8002abe <HAL_QSPI_MemoryMapped+0x30>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8002ae8:	6822      	ldr	r2, [r4, #0]
 8002aea:	6813      	ldr	r3, [r2, #0]
 8002aec:	f023 0308 	bic.w	r3, r3, #8
 8002af0:	6869      	ldr	r1, [r5, #4]
 8002af2:	430b      	orrs	r3, r1
 8002af4:	6013      	str	r3, [r2, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8002af6:	686b      	ldr	r3, [r5, #4]
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d006      	beq.n	8002b0a <HAL_QSPI_MemoryMapped+0x7c>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8002afc:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002b00:	4631      	mov	r1, r6
 8002b02:	4620      	mov	r0, r4
 8002b04:	f7ff fd8a 	bl	800261c <QSPI_Config>
 8002b08:	e7d9      	b.n	8002abe <HAL_QSPI_MemoryMapped+0x30>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8002b0a:	6823      	ldr	r3, [r4, #0]
 8002b0c:	682a      	ldr	r2, [r5, #0]
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8002b10:	6823      	ldr	r3, [r4, #0]
 8002b12:	2210      	movs	r2, #16
 8002b14:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8002b16:	6822      	ldr	r2, [r4, #0]
 8002b18:	6813      	ldr	r3, [r2, #0]
 8002b1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	e7ec      	b.n	8002afc <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8002b22:	2702      	movs	r7, #2
 8002b24:	e7ce      	b.n	8002ac4 <HAL_QSPI_MemoryMapped+0x36>

08002b26 <HAL_QSPI_SetTimeout>:
  hqspi->Timeout = Timeout;
 8002b26:	6481      	str	r1, [r0, #72]	; 0x48
}
 8002b28:	4770      	bx	lr
	...

08002b2c <HAL_QSPI_Init>:
{
 8002b2c:	b570      	push	{r4, r5, r6, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002b32:	f7fe fe6f 	bl	8001814 <HAL_GetTick>
  if(hqspi == NULL)
 8002b36:	2c00      	cmp	r4, #0
 8002b38:	d045      	beq.n	8002bc6 <HAL_QSPI_Init+0x9a>
 8002b3a:	4606      	mov	r6, r0
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002b3c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d037      	beq.n	8002bb4 <HAL_QSPI_Init+0x88>
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002b44:	6825      	ldr	r5, [r4, #0]
 8002b46:	682a      	ldr	r2, [r5, #0]
 8002b48:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8002b4c:	68a1      	ldr	r1, [r4, #8]
 8002b4e:	3901      	subs	r1, #1
 8002b50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b54:	602a      	str	r2, [r5, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002b56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	4633      	mov	r3, r6
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2120      	movs	r1, #32
 8002b60:	4620      	mov	r0, r4
 8002b62:	f7ff fe46 	bl	80027f2 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8002b66:	bb18      	cbnz	r0, 8002bb0 <HAL_QSPI_Init+0x84>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8002b68:	6821      	ldr	r1, [r4, #0]
 8002b6a:	680b      	ldr	r3, [r1, #0]
 8002b6c:	4a17      	ldr	r2, [pc, #92]	; (8002bcc <HAL_QSPI_Init+0xa0>)
 8002b6e:	401a      	ands	r2, r3
 8002b70:	6865      	ldr	r5, [r4, #4]
 8002b72:	68e3      	ldr	r3, [r4, #12]
 8002b74:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8002b78:	69e5      	ldr	r5, [r4, #28]
 8002b7a:	432b      	orrs	r3, r5
 8002b7c:	6a25      	ldr	r5, [r4, #32]
 8002b7e:	432b      	orrs	r3, r5
 8002b80:	4313      	orrs	r3, r2
 8002b82:	600b      	str	r3, [r1, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002b84:	6821      	ldr	r1, [r4, #0]
 8002b86:	684a      	ldr	r2, [r1, #4]
 8002b88:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <HAL_QSPI_Init+0xa4>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	6925      	ldr	r5, [r4, #16]
 8002b8e:	6962      	ldr	r2, [r4, #20]
 8002b90:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8002b94:	69a5      	ldr	r5, [r4, #24]
 8002b96:	432a      	orrs	r2, r5
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8002b9c:	6822      	ldr	r2, [r4, #0]
 8002b9e:	6813      	ldr	r3, [r2, #0]
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	6013      	str	r3, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8002baa:	2301      	movs	r3, #1
 8002bac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8002bb0:	b002      	add	sp, #8
 8002bb2:	bd70      	pop	{r4, r5, r6, pc}
    HAL_QSPI_MspInit(hqspi);
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f7fe fb81 	bl	80012bc <HAL_QSPI_MspInit>
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002bba:	f241 3188 	movw	r1, #5000	; 0x1388
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	f7ff ffb1 	bl	8002b26 <HAL_QSPI_SetTimeout>
 8002bc4:	e7be      	b.n	8002b44 <HAL_QSPI_Init+0x18>
    return HAL_ERROR;
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	e7f2      	b.n	8002bb0 <HAL_QSPI_Init+0x84>
 8002bca:	bf00      	nop
 8002bcc:	00ffff2f 	.word	0x00ffff2f
 8002bd0:	ffe0f8fe 	.word	0xffe0f8fe

08002bd4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002bd4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 8002bd6:	4b68      	ldr	r3, [pc, #416]	; (8002d78 <HAL_RCC_DeInit+0x1a4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	2b06      	cmp	r3, #6
 8002be0:	d80c      	bhi.n	8002bfc <HAL_RCC_DeInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8002be2:	4a65      	ldr	r2, [pc, #404]	; (8002d78 <HAL_RCC_DeInit+0x1a4>)
 8002be4:	6813      	ldr	r3, [r2, #0]
 8002be6:	f023 030f 	bic.w	r3, r3, #15
 8002bea:	f043 0307 	orr.w	r3, r3, #7
 8002bee:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8002bf0:	6813      	ldr	r3, [r2, #0]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	2b07      	cmp	r3, #7
 8002bf8:	f040 80ba 	bne.w	8002d70 <HAL_RCC_DeInit+0x19c>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002bfc:	f7fe fe0a 	bl	8001814 <HAL_GetTick>
 8002c00:	4604      	mov	r4, r0

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002c02:	4a5e      	ldr	r2, [pc, #376]	; (8002d7c <HAL_RCC_DeInit+0x1a8>)
 8002c04:	6813      	ldr	r3, [r2, #0]
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c0c:	4b5b      	ldr	r3, [pc, #364]	; (8002d7c <HAL_RCC_DeInit+0x1a8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f013 0f04 	tst.w	r3, #4
 8002c14:	d106      	bne.n	8002c24 <HAL_RCC_DeInit+0x50>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c16:	f7fe fdfd 	bl	8001814 <HAL_GetTick>
 8002c1a:	1b00      	subs	r0, r0, r4
 8002c1c:	2802      	cmp	r0, #2
 8002c1e:	d9f5      	bls.n	8002c0c <HAL_RCC_DeInit+0x38>
    {
      return HAL_TIMEOUT;
 8002c20:	2403      	movs	r4, #3
 8002c22:	e0a6      	b.n	8002d72 <HAL_RCC_DeInit+0x19e>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 8002c24:	4b55      	ldr	r3, [pc, #340]	; (8002d7c <HAL_RCC_DeInit+0x1a8>)
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c2c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002c2e:	2200      	movs	r2, #0
 8002c30:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 8002c32:	4b53      	ldr	r3, [pc, #332]	; (8002d80 <HAL_RCC_DeInit+0x1ac>)
 8002c34:	4a53      	ldr	r2, [pc, #332]	; (8002d84 <HAL_RCC_DeInit+0x1b0>)
 8002c36:	6013      	str	r3, [r2, #0]
  SystemD2Clock = HSI_VALUE;
 8002c38:	4a53      	ldr	r2, [pc, #332]	; (8002d88 <HAL_RCC_DeInit+0x1b4>)
 8002c3a:	6013      	str	r3, [r2, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c3c:	4b53      	ldr	r3, [pc, #332]	; (8002d8c <HAL_RCC_DeInit+0x1b8>)
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	f7fe fd86 	bl	8001750 <HAL_InitTick>
 8002c44:	4604      	mov	r4, r0
 8002c46:	b108      	cbz	r0, 8002c4c <HAL_RCC_DeInit+0x78>
  {
    return HAL_ERROR;
 8002c48:	2401      	movs	r4, #1
 8002c4a:	e092      	b.n	8002d72 <HAL_RCC_DeInit+0x19e>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002c4c:	f7fe fde2 	bl	8001814 <HAL_GetTick>
 8002c50:	4605      	mov	r5, r0

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002c52:	4b4a      	ldr	r3, [pc, #296]	; (8002d7c <HAL_RCC_DeInit+0x1a8>)
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f013 0f38 	tst.w	r3, #56	; 0x38
 8002c5a:	d008      	beq.n	8002c6e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5c:	f7fe fdda 	bl	8001814 <HAL_GetTick>
 8002c60:	1b40      	subs	r0, r0, r5
 8002c62:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c66:	4298      	cmp	r0, r3
 8002c68:	d9f3      	bls.n	8002c52 <HAL_RCC_DeInit+0x7e>
    {
      return HAL_TIMEOUT;
 8002c6a:	2403      	movs	r4, #3
 8002c6c:	e081      	b.n	8002d72 <HAL_RCC_DeInit+0x19e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002c6e:	f7fe fdd1 	bl	8001814 <HAL_GetTick>
 8002c72:	4605      	mov	r5, r0

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON | RCC_CR_HSIDIV | RCC_CR_HSIDIVF | RCC_CR_CSION | RCC_CR_CSIKERON  \
 8002c74:	4a41      	ldr	r2, [pc, #260]	; (8002d7c <HAL_RCC_DeInit+0x1a8>)
 8002c76:	6811      	ldr	r1, [r2, #0]
 8002c78:	4b45      	ldr	r3, [pc, #276]	; (8002d90 <HAL_RCC_DeInit+0x1bc>)
 8002c7a:	400b      	ands	r3, r1
 8002c7c:	6013      	str	r3, [r2, #0]
            | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c7e:	4b3f      	ldr	r3, [pc, #252]	; (8002d7c <HAL_RCC_DeInit+0x1a8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c86:	d006      	beq.n	8002c96 <HAL_RCC_DeInit+0xc2>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c88:	f7fe fdc4 	bl	8001814 <HAL_GetTick>
 8002c8c:	1b40      	subs	r0, r0, r5
 8002c8e:	2864      	cmp	r0, #100	; 0x64
 8002c90:	d9f5      	bls.n	8002c7e <HAL_RCC_DeInit+0xaa>
    {
      return HAL_TIMEOUT;
 8002c92:	2403      	movs	r4, #3
 8002c94:	e06d      	b.n	8002d72 <HAL_RCC_DeInit+0x19e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002c96:	f7fe fdbd 	bl	8001814 <HAL_GetTick>
 8002c9a:	4605      	mov	r5, r0

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8002c9c:	4a37      	ldr	r2, [pc, #220]	; (8002d7c <HAL_RCC_DeInit+0x1a8>)
 8002c9e:	6813      	ldr	r3, [r2, #0]
 8002ca0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca4:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ca6:	4b35      	ldr	r3, [pc, #212]	; (8002d7c <HAL_RCC_DeInit+0x1a8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002cae:	d006      	beq.n	8002cbe <HAL_RCC_DeInit+0xea>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7fe fdb0 	bl	8001814 <HAL_GetTick>
 8002cb4:	1b40      	subs	r0, r0, r5
 8002cb6:	2802      	cmp	r0, #2
 8002cb8:	d9f5      	bls.n	8002ca6 <HAL_RCC_DeInit+0xd2>
    {
      return HAL_TIMEOUT;
 8002cba:	2403      	movs	r4, #3
 8002cbc:	e059      	b.n	8002d72 <HAL_RCC_DeInit+0x19e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002cbe:	f7fe fda9 	bl	8001814 <HAL_GetTick>
 8002cc2:	4605      	mov	r5, r0

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 8002cc4:	4a2d      	ldr	r2, [pc, #180]	; (8002d7c <HAL_RCC_DeInit+0x1a8>)
 8002cc6:	6813      	ldr	r3, [r2, #0]
 8002cc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ccc:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8002cce:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <HAL_RCC_DeInit+0x1a8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002cd6:	d006      	beq.n	8002ce6 <HAL_RCC_DeInit+0x112>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd8:	f7fe fd9c 	bl	8001814 <HAL_GetTick>
 8002cdc:	1b40      	subs	r0, r0, r5
 8002cde:	2802      	cmp	r0, #2
 8002ce0:	d9f5      	bls.n	8002cce <HAL_RCC_DeInit+0xfa>
    {
      return HAL_TIMEOUT;
 8002ce2:	2403      	movs	r4, #3
 8002ce4:	e045      	b.n	8002d72 <HAL_RCC_DeInit+0x19e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002ce6:	f7fe fd95 	bl	8001814 <HAL_GetTick>
 8002cea:	4605      	mov	r5, r0

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 8002cec:	4a23      	ldr	r2, [pc, #140]	; (8002d7c <HAL_RCC_DeInit+0x1a8>)
 8002cee:	6813      	ldr	r3, [r2, #0]
 8002cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8002cf6:	4b21      	ldr	r3, [pc, #132]	; (8002d7c <HAL_RCC_DeInit+0x1a8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002cfe:	d006      	beq.n	8002d0e <HAL_RCC_DeInit+0x13a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d00:	f7fe fd88 	bl	8001814 <HAL_GetTick>
 8002d04:	1b40      	subs	r0, r0, r5
 8002d06:	2802      	cmp	r0, #2
 8002d08:	d9f5      	bls.n	8002cf6 <HAL_RCC_DeInit+0x122>
    {
      return HAL_TIMEOUT;
 8002d0a:	2403      	movs	r4, #3
 8002d0c:	e031      	b.n	8002d72 <HAL_RCC_DeInit+0x19e>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <HAL_RCC_DeInit+0x1a8>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 8002d14:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 8002d16:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM1_5 | RCC_PLLCKSELR_DIVM2_5 | RCC_PLLCKSELR_DIVM3_5;
 8002d18:	491e      	ldr	r1, [pc, #120]	; (8002d94 <HAL_RCC_DeInit+0x1c0>)
 8002d1a:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 8002d1c:	491e      	ldr	r1, [pc, #120]	; (8002d98 <HAL_RCC_DeInit+0x1c4>)
 8002d1e:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 8002d20:	491e      	ldr	r1, [pc, #120]	; (8002d9c <HAL_RCC_DeInit+0x1c8>)
 8002d22:	6319      	str	r1, [r3, #48]	; 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 8002d24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 8002d26:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 8002d28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 8002d2a:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 8002d2c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002d2e:	6819      	ldr	r1, [r3, #0]
 8002d30:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002d34:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8002d36:	661a      	str	r2, [r3, #96]	; 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8002d38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d3c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 8002d3e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002d42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d46:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_DeInit+0x1a4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f013 0f08 	tst.w	r3, #8
 8002d52:	d00e      	beq.n	8002d72 <HAL_RCC_DeInit+0x19e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8002d54:	4a08      	ldr	r2, [pc, #32]	; (8002d78 <HAL_RCC_DeInit+0x1a4>)
 8002d56:	6813      	ldr	r3, [r2, #0]
 8002d58:	f023 030f 	bic.w	r3, r3, #15
 8002d5c:	f043 0307 	orr.w	r3, r3, #7
 8002d60:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8002d62:	6813      	ldr	r3, [r2, #0]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	2b07      	cmp	r3, #7
 8002d6a:	d002      	beq.n	8002d72 <HAL_RCC_DeInit+0x19e>
    {
      return HAL_ERROR;
 8002d6c:	2401      	movs	r4, #1
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_DeInit+0x19e>
      return HAL_ERROR;
 8002d70:	2401      	movs	r4, #1
    }

  }

  return HAL_OK;
}
 8002d72:	4620      	mov	r0, r4
 8002d74:	bd38      	pop	{r3, r4, r5, pc}
 8002d76:	bf00      	nop
 8002d78:	52002000 	.word	0x52002000
 8002d7c:	58024400 	.word	0x58024400
 8002d80:	03d09000 	.word	0x03d09000
 8002d84:	20000004 	.word	0x20000004
 8002d88:	20000008 	.word	0x20000008
 8002d8c:	20000010 	.word	0x20000010
 8002d90:	fff6ed45 	.word	0xfff6ed45
 8002d94:	02020200 	.word	0x02020200
 8002d98:	01ff0000 	.word	0x01ff0000
 8002d9c:	01010280 	.word	0x01010280

08002da0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002da0:	2800      	cmp	r0, #0
 8002da2:	f000 8339 	beq.w	8003418 <HAL_RCC_OscConfig+0x678>
{
 8002da6:	b538      	push	{r3, r4, r5, lr}
 8002da8:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002daa:	6803      	ldr	r3, [r0, #0]
 8002dac:	f013 0f01 	tst.w	r3, #1
 8002db0:	d025      	beq.n	8002dfe <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db2:	4a94      	ldr	r2, [pc, #592]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002db4:	6913      	ldr	r3, [r2, #16]
 8002db6:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002dba:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002dbc:	2b10      	cmp	r3, #16
 8002dbe:	d015      	beq.n	8002dec <HAL_RCC_OscConfig+0x4c>
 8002dc0:	2b18      	cmp	r3, #24
 8002dc2:	d00f      	beq.n	8002de4 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc4:	6863      	ldr	r3, [r4, #4]
 8002dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dca:	d03f      	beq.n	8002e4c <HAL_RCC_OscConfig+0xac>
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d153      	bne.n	8002e78 <HAL_RCC_OscConfig+0xd8>
 8002dd0:	4b8c      	ldr	r3, [pc, #560]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	e038      	b.n	8002e56 <HAL_RCC_OscConfig+0xb6>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002de4:	f002 0203 	and.w	r2, r2, #3
 8002de8:	2a02      	cmp	r2, #2
 8002dea:	d1eb      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x24>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dec:	4b85      	ldr	r3, [pc, #532]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002df4:	d003      	beq.n	8002dfe <HAL_RCC_OscConfig+0x5e>
 8002df6:	6863      	ldr	r3, [r4, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 830f 	beq.w	800341c <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	f013 0f02 	tst.w	r3, #2
 8002e04:	f000 80a1 	beq.w	8002f4a <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e08:	4a7e      	ldr	r2, [pc, #504]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002e0a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e0e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8002e12:	d05a      	beq.n	8002eca <HAL_RCC_OscConfig+0x12a>
 8002e14:	2b18      	cmp	r3, #24
 8002e16:	d055      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e18:	68e3      	ldr	r3, [r4, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 80de 	beq.w	8002fdc <HAL_RCC_OscConfig+0x23c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e20:	4978      	ldr	r1, [pc, #480]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002e22:	680a      	ldr	r2, [r1, #0]
 8002e24:	f022 0219 	bic.w	r2, r2, #25
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fcf2 	bl	8001814 <HAL_GetTick>
 8002e30:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e32:	4b74      	ldr	r3, [pc, #464]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f013 0f04 	tst.w	r3, #4
 8002e3a:	f040 80ad 	bne.w	8002f98 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3e:	f7fe fce9 	bl	8001814 <HAL_GetTick>
 8002e42:	1b40      	subs	r0, r0, r5
 8002e44:	2802      	cmp	r0, #2
 8002e46:	d9f4      	bls.n	8002e32 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8002e48:	2003      	movs	r0, #3
 8002e4a:	e2ee      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e4c:	4a6d      	ldr	r2, [pc, #436]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002e4e:	6813      	ldr	r3, [r2, #0]
 8002e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e54:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e56:	6863      	ldr	r3, [r4, #4]
 8002e58:	b32b      	cbz	r3, 8002ea6 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8002e5a:	f7fe fcdb 	bl	8001814 <HAL_GetTick>
 8002e5e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e60:	4b68      	ldr	r3, [pc, #416]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002e68:	d1c9      	bne.n	8002dfe <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e6a:	f7fe fcd3 	bl	8001814 <HAL_GetTick>
 8002e6e:	1b40      	subs	r0, r0, r5
 8002e70:	2864      	cmp	r0, #100	; 0x64
 8002e72:	d9f5      	bls.n	8002e60 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8002e74:	2003      	movs	r0, #3
 8002e76:	e2d8      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e7c:	d009      	beq.n	8002e92 <HAL_RCC_OscConfig+0xf2>
 8002e7e:	4b61      	ldr	r3, [pc, #388]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	e7e1      	b.n	8002e56 <HAL_RCC_OscConfig+0xb6>
 8002e92:	4b5c      	ldr	r3, [pc, #368]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e7d7      	b.n	8002e56 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8002ea6:	f7fe fcb5 	bl	8001814 <HAL_GetTick>
 8002eaa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002eac:	4b55      	ldr	r3, [pc, #340]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002eb4:	d0a3      	beq.n	8002dfe <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb6:	f7fe fcad 	bl	8001814 <HAL_GetTick>
 8002eba:	1b40      	subs	r0, r0, r5
 8002ebc:	2864      	cmp	r0, #100	; 0x64
 8002ebe:	d9f5      	bls.n	8002eac <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8002ec0:	2003      	movs	r0, #3
 8002ec2:	e2b2      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ec4:	f012 0f03 	tst.w	r2, #3
 8002ec8:	d1a6      	bne.n	8002e18 <HAL_RCC_OscConfig+0x78>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eca:	4b4e      	ldr	r3, [pc, #312]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f013 0f04 	tst.w	r3, #4
 8002ed2:	d003      	beq.n	8002edc <HAL_RCC_OscConfig+0x13c>
 8002ed4:	68e3      	ldr	r3, [r4, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 82a2 	beq.w	8003420 <HAL_RCC_OscConfig+0x680>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002edc:	4a49      	ldr	r2, [pc, #292]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002ede:	6813      	ldr	r3, [r2, #0]
 8002ee0:	f023 0319 	bic.w	r3, r3, #25
 8002ee4:	68e1      	ldr	r1, [r4, #12]
 8002ee6:	430b      	orrs	r3, r1
 8002ee8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002eea:	f7fe fc93 	bl	8001814 <HAL_GetTick>
 8002eee:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ef0:	4b44      	ldr	r3, [pc, #272]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f013 0f04 	tst.w	r3, #4
 8002ef8:	d106      	bne.n	8002f08 <HAL_RCC_OscConfig+0x168>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002efa:	f7fe fc8b 	bl	8001814 <HAL_GetTick>
 8002efe:	1b40      	subs	r0, r0, r5
 8002f00:	2802      	cmp	r0, #2
 8002f02:	d9f5      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8002f04:	2003      	movs	r0, #3
 8002f06:	e290      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f08:	f7fe fc9e 	bl	8001848 <HAL_GetREVID>
 8002f0c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002f10:	4298      	cmp	r0, r3
 8002f12:	d812      	bhi.n	8002f3a <HAL_RCC_OscConfig+0x19a>
 8002f14:	6922      	ldr	r2, [r4, #16]
 8002f16:	2a40      	cmp	r2, #64	; 0x40
 8002f18:	d007      	beq.n	8002f2a <HAL_RCC_OscConfig+0x18a>
 8002f1a:	493a      	ldr	r1, [pc, #232]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002f1c:	684b      	ldr	r3, [r1, #4]
 8002f1e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f22:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002f26:	604b      	str	r3, [r1, #4]
 8002f28:	e00f      	b.n	8002f4a <HAL_RCC_OscConfig+0x1aa>
 8002f2a:	4a36      	ldr	r2, [pc, #216]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002f2c:	6853      	ldr	r3, [r2, #4]
 8002f2e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f36:	6053      	str	r3, [r2, #4]
 8002f38:	e007      	b.n	8002f4a <HAL_RCC_OscConfig+0x1aa>
 8002f3a:	4a32      	ldr	r2, [pc, #200]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002f3c:	6853      	ldr	r3, [r2, #4]
 8002f3e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f42:	6921      	ldr	r1, [r4, #16]
 8002f44:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002f48:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	f013 0f10 	tst.w	r3, #16
 8002f50:	f000 8088 	beq.w	8003064 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f54:	4a2b      	ldr	r2, [pc, #172]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002f56:	6913      	ldr	r3, [r2, #16]
 8002f58:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d056      	beq.n	8003010 <HAL_RCC_OscConfig+0x270>
 8002f62:	2b18      	cmp	r3, #24
 8002f64:	d050      	beq.n	8003008 <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002f66:	69e3      	ldr	r3, [r4, #28]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 80b8 	beq.w	80030de <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002f6e:	4a25      	ldr	r2, [pc, #148]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002f70:	6813      	ldr	r3, [r2, #0]
 8002f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fe fc4c 	bl	8001814 <HAL_GetTick>
 8002f7c:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f7e:	4b21      	ldr	r3, [pc, #132]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f86:	f040 8088 	bne.w	800309a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f8a:	f7fe fc43 	bl	8001814 <HAL_GetTick>
 8002f8e:	1b40      	subs	r0, r0, r5
 8002f90:	2802      	cmp	r0, #2
 8002f92:	d9f4      	bls.n	8002f7e <HAL_RCC_OscConfig+0x1de>
          {
            return HAL_TIMEOUT;
 8002f94:	2003      	movs	r0, #3
 8002f96:	e248      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f98:	f7fe fc56 	bl	8001848 <HAL_GetREVID>
 8002f9c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002fa0:	4298      	cmp	r0, r3
 8002fa2:	d812      	bhi.n	8002fca <HAL_RCC_OscConfig+0x22a>
 8002fa4:	6922      	ldr	r2, [r4, #16]
 8002fa6:	2a40      	cmp	r2, #64	; 0x40
 8002fa8:	d007      	beq.n	8002fba <HAL_RCC_OscConfig+0x21a>
 8002faa:	4916      	ldr	r1, [pc, #88]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002fac:	684b      	ldr	r3, [r1, #4]
 8002fae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002fb2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002fb6:	604b      	str	r3, [r1, #4]
 8002fb8:	e7c7      	b.n	8002f4a <HAL_RCC_OscConfig+0x1aa>
 8002fba:	4a12      	ldr	r2, [pc, #72]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002fbc:	6853      	ldr	r3, [r2, #4]
 8002fbe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc6:	6053      	str	r3, [r2, #4]
 8002fc8:	e7bf      	b.n	8002f4a <HAL_RCC_OscConfig+0x1aa>
 8002fca:	4a0e      	ldr	r2, [pc, #56]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002fcc:	6853      	ldr	r3, [r2, #4]
 8002fce:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002fd2:	6921      	ldr	r1, [r4, #16]
 8002fd4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002fd8:	6053      	str	r3, [r2, #4]
 8002fda:	e7b6      	b.n	8002f4a <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 8002fdc:	4a09      	ldr	r2, [pc, #36]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002fde:	6813      	ldr	r3, [r2, #0]
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002fe6:	f7fe fc15 	bl	8001814 <HAL_GetTick>
 8002fea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fec:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_RCC_OscConfig+0x264>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f013 0f04 	tst.w	r3, #4
 8002ff4:	d0a9      	beq.n	8002f4a <HAL_RCC_OscConfig+0x1aa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff6:	f7fe fc0d 	bl	8001814 <HAL_GetTick>
 8002ffa:	1b40      	subs	r0, r0, r5
 8002ffc:	2802      	cmp	r0, #2
 8002ffe:	d9f5      	bls.n	8002fec <HAL_RCC_OscConfig+0x24c>
            return HAL_TIMEOUT;
 8003000:	2003      	movs	r0, #3
 8003002:	e212      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
 8003004:	58024400 	.word	0x58024400
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003008:	f002 0203 	and.w	r2, r2, #3
 800300c:	2a01      	cmp	r2, #1
 800300e:	d1aa      	bne.n	8002f66 <HAL_RCC_OscConfig+0x1c6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003010:	4ba1      	ldr	r3, [pc, #644]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003018:	d003      	beq.n	8003022 <HAL_RCC_OscConfig+0x282>
 800301a:	69e3      	ldr	r3, [r4, #28]
 800301c:	2b80      	cmp	r3, #128	; 0x80
 800301e:	f040 8201 	bne.w	8003424 <HAL_RCC_OscConfig+0x684>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003022:	f7fe fc11 	bl	8001848 <HAL_GetREVID>
 8003026:	f241 0303 	movw	r3, #4099	; 0x1003
 800302a:	4298      	cmp	r0, r3
 800302c:	d812      	bhi.n	8003054 <HAL_RCC_OscConfig+0x2b4>
 800302e:	6a22      	ldr	r2, [r4, #32]
 8003030:	2a20      	cmp	r2, #32
 8003032:	d007      	beq.n	8003044 <HAL_RCC_OscConfig+0x2a4>
 8003034:	4998      	ldr	r1, [pc, #608]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003036:	684b      	ldr	r3, [r1, #4]
 8003038:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800303c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8003040:	604b      	str	r3, [r1, #4]
 8003042:	e00f      	b.n	8003064 <HAL_RCC_OscConfig+0x2c4>
 8003044:	4a94      	ldr	r2, [pc, #592]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003046:	6853      	ldr	r3, [r2, #4]
 8003048:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800304c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003050:	6053      	str	r3, [r2, #4]
 8003052:	e007      	b.n	8003064 <HAL_RCC_OscConfig+0x2c4>
 8003054:	4a90      	ldr	r2, [pc, #576]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003056:	68d3      	ldr	r3, [r2, #12]
 8003058:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800305c:	6a21      	ldr	r1, [r4, #32]
 800305e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003062:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	f013 0f08 	tst.w	r3, #8
 800306a:	d060      	beq.n	800312e <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800306c:	6963      	ldr	r3, [r4, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d049      	beq.n	8003106 <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003072:	4a89      	ldr	r2, [pc, #548]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003074:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307c:	f7fe fbca 	bl	8001814 <HAL_GetTick>
 8003080:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003082:	4b85      	ldr	r3, [pc, #532]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003086:	f013 0f02 	tst.w	r3, #2
 800308a:	d150      	bne.n	800312e <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800308c:	f7fe fbc2 	bl	8001814 <HAL_GetTick>
 8003090:	1b40      	subs	r0, r0, r5
 8003092:	2802      	cmp	r0, #2
 8003094:	d9f5      	bls.n	8003082 <HAL_RCC_OscConfig+0x2e2>
        {
          return HAL_TIMEOUT;
 8003096:	2003      	movs	r0, #3
 8003098:	e1c7      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800309a:	f7fe fbd5 	bl	8001848 <HAL_GetREVID>
 800309e:	f241 0303 	movw	r3, #4099	; 0x1003
 80030a2:	4298      	cmp	r0, r3
 80030a4:	d812      	bhi.n	80030cc <HAL_RCC_OscConfig+0x32c>
 80030a6:	6a22      	ldr	r2, [r4, #32]
 80030a8:	2a20      	cmp	r2, #32
 80030aa:	d007      	beq.n	80030bc <HAL_RCC_OscConfig+0x31c>
 80030ac:	497a      	ldr	r1, [pc, #488]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 80030ae:	684b      	ldr	r3, [r1, #4]
 80030b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80030b4:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80030b8:	604b      	str	r3, [r1, #4]
 80030ba:	e7d3      	b.n	8003064 <HAL_RCC_OscConfig+0x2c4>
 80030bc:	4a76      	ldr	r2, [pc, #472]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 80030be:	6853      	ldr	r3, [r2, #4]
 80030c0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80030c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030c8:	6053      	str	r3, [r2, #4]
 80030ca:	e7cb      	b.n	8003064 <HAL_RCC_OscConfig+0x2c4>
 80030cc:	4a72      	ldr	r2, [pc, #456]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 80030ce:	68d3      	ldr	r3, [r2, #12]
 80030d0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80030d4:	6a21      	ldr	r1, [r4, #32]
 80030d6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80030da:	60d3      	str	r3, [r2, #12]
 80030dc:	e7c2      	b.n	8003064 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 80030de:	4a6e      	ldr	r2, [pc, #440]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 80030e0:	6813      	ldr	r3, [r2, #0]
 80030e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030e6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80030e8:	f7fe fb94 	bl	8001814 <HAL_GetTick>
 80030ec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030ee:	4b6a      	ldr	r3, [pc, #424]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80030f6:	d0b5      	beq.n	8003064 <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80030f8:	f7fe fb8c 	bl	8001814 <HAL_GetTick>
 80030fc:	1b40      	subs	r0, r0, r5
 80030fe:	2802      	cmp	r0, #2
 8003100:	d9f5      	bls.n	80030ee <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8003102:	2003      	movs	r0, #3
 8003104:	e191      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003106:	4a64      	ldr	r2, [pc, #400]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003108:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800310a:	f023 0301 	bic.w	r3, r3, #1
 800310e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003110:	f7fe fb80 	bl	8001814 <HAL_GetTick>
 8003114:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003116:	4b60      	ldr	r3, [pc, #384]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311a:	f013 0f02 	tst.w	r3, #2
 800311e:	d006      	beq.n	800312e <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003120:	f7fe fb78 	bl	8001814 <HAL_GetTick>
 8003124:	1b40      	subs	r0, r0, r5
 8003126:	2802      	cmp	r0, #2
 8003128:	d9f5      	bls.n	8003116 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800312a:	2003      	movs	r0, #3
 800312c:	e17d      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800312e:	6823      	ldr	r3, [r4, #0]
 8003130:	f013 0f20 	tst.w	r3, #32
 8003134:	d029      	beq.n	800318a <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003136:	69a3      	ldr	r3, [r4, #24]
 8003138:	b19b      	cbz	r3, 8003162 <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800313a:	4a57      	ldr	r2, [pc, #348]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 800313c:	6813      	ldr	r3, [r2, #0]
 800313e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003142:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003144:	f7fe fb66 	bl	8001814 <HAL_GetTick>
 8003148:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800314a:	4b53      	ldr	r3, [pc, #332]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003152:	d11a      	bne.n	800318a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003154:	f7fe fb5e 	bl	8001814 <HAL_GetTick>
 8003158:	1b40      	subs	r0, r0, r5
 800315a:	2802      	cmp	r0, #2
 800315c:	d9f5      	bls.n	800314a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800315e:	2003      	movs	r0, #3
 8003160:	e163      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003162:	4a4d      	ldr	r2, [pc, #308]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003164:	6813      	ldr	r3, [r2, #0]
 8003166:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800316a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800316c:	f7fe fb52 	bl	8001814 <HAL_GetTick>
 8003170:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003172:	4b49      	ldr	r3, [pc, #292]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800317a:	d006      	beq.n	800318a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800317c:	f7fe fb4a 	bl	8001814 <HAL_GetTick>
 8003180:	1b40      	subs	r0, r0, r5
 8003182:	2802      	cmp	r0, #2
 8003184:	d9f5      	bls.n	8003172 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003186:	2003      	movs	r0, #3
 8003188:	e14f      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	f013 0f04 	tst.w	r3, #4
 8003190:	d121      	bne.n	80031d6 <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 8147 	beq.w	8003428 <HAL_RCC_OscConfig+0x688>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800319a:	4a3f      	ldr	r2, [pc, #252]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 800319c:	6912      	ldr	r2, [r2, #16]
 800319e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80031a2:	2a18      	cmp	r2, #24
 80031a4:	f000 80ee 	beq.w	8003384 <HAL_RCC_OscConfig+0x5e4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d079      	beq.n	80032a0 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ac:	4a3a      	ldr	r2, [pc, #232]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 80031ae:	6813      	ldr	r3, [r2, #0]
 80031b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b6:	f7fe fb2d 	bl	8001814 <HAL_GetTick>
 80031ba:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031bc:	4b36      	ldr	r3, [pc, #216]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80031c4:	f000 80dc 	beq.w	8003380 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c8:	f7fe fb24 	bl	8001814 <HAL_GetTick>
 80031cc:	1b00      	subs	r0, r0, r4
 80031ce:	2802      	cmp	r0, #2
 80031d0:	d9f4      	bls.n	80031bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031d2:	2003      	movs	r0, #3
 80031d4:	e129      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
    PWR->CR1 |= PWR_CR1_DBP;
 80031d6:	4a31      	ldr	r2, [pc, #196]	; (800329c <HAL_RCC_OscConfig+0x4fc>)
 80031d8:	6813      	ldr	r3, [r2, #0]
 80031da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031de:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80031e0:	f7fe fb18 	bl	8001814 <HAL_GetTick>
 80031e4:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031e6:	4b2d      	ldr	r3, [pc, #180]	; (800329c <HAL_RCC_OscConfig+0x4fc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f413 7f80 	tst.w	r3, #256	; 0x100
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x45e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f0:	f7fe fb10 	bl	8001814 <HAL_GetTick>
 80031f4:	1b40      	subs	r0, r0, r5
 80031f6:	2864      	cmp	r0, #100	; 0x64
 80031f8:	d9f5      	bls.n	80031e6 <HAL_RCC_OscConfig+0x446>
        return HAL_TIMEOUT;
 80031fa:	2003      	movs	r0, #3
 80031fc:	e115      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fe:	68a3      	ldr	r3, [r4, #8]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d00a      	beq.n	800321a <HAL_RCC_OscConfig+0x47a>
 8003204:	bb0b      	cbnz	r3, 800324a <HAL_RCC_OscConfig+0x4aa>
 8003206:	4b24      	ldr	r3, [pc, #144]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003208:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	671a      	str	r2, [r3, #112]	; 0x70
 8003210:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003212:	f022 0204 	bic.w	r2, r2, #4
 8003216:	671a      	str	r2, [r3, #112]	; 0x70
 8003218:	e004      	b.n	8003224 <HAL_RCC_OscConfig+0x484>
 800321a:	4a1f      	ldr	r2, [pc, #124]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 800321c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003224:	68a3      	ldr	r3, [r4, #8]
 8003226:	b333      	cbz	r3, 8003276 <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 8003228:	f7fe faf4 	bl	8001814 <HAL_GetTick>
 800322c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800322e:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	f013 0f02 	tst.w	r3, #2
 8003236:	d1ac      	bne.n	8003192 <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003238:	f7fe faec 	bl	8001814 <HAL_GetTick>
 800323c:	1b40      	subs	r0, r0, r5
 800323e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003242:	4298      	cmp	r0, r3
 8003244:	d9f3      	bls.n	800322e <HAL_RCC_OscConfig+0x48e>
          return HAL_TIMEOUT;
 8003246:	2003      	movs	r0, #3
 8003248:	e0ef      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800324a:	2b05      	cmp	r3, #5
 800324c:	d009      	beq.n	8003262 <HAL_RCC_OscConfig+0x4c2>
 800324e:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003250:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003252:	f022 0201 	bic.w	r2, r2, #1
 8003256:	671a      	str	r2, [r3, #112]	; 0x70
 8003258:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800325a:	f022 0204 	bic.w	r2, r2, #4
 800325e:	671a      	str	r2, [r3, #112]	; 0x70
 8003260:	e7e0      	b.n	8003224 <HAL_RCC_OscConfig+0x484>
 8003262:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003264:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003266:	f042 0204 	orr.w	r2, r2, #4
 800326a:	671a      	str	r2, [r3, #112]	; 0x70
 800326c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	671a      	str	r2, [r3, #112]	; 0x70
 8003274:	e7d6      	b.n	8003224 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 8003276:	f7fe facd 	bl	8001814 <HAL_GetTick>
 800327a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800327c:	4b06      	ldr	r3, [pc, #24]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 800327e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003280:	f013 0f02 	tst.w	r3, #2
 8003284:	d085      	beq.n	8003192 <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003286:	f7fe fac5 	bl	8001814 <HAL_GetTick>
 800328a:	1b40      	subs	r0, r0, r5
 800328c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003290:	4298      	cmp	r0, r3
 8003292:	d9f3      	bls.n	800327c <HAL_RCC_OscConfig+0x4dc>
          return HAL_TIMEOUT;
 8003294:	2003      	movs	r0, #3
 8003296:	e0c8      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
 8003298:	58024400 	.word	0x58024400
 800329c:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 80032a0:	4a69      	ldr	r2, [pc, #420]	; (8003448 <HAL_RCC_OscConfig+0x6a8>)
 80032a2:	6813      	ldr	r3, [r2, #0]
 80032a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032a8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80032aa:	f7fe fab3 	bl	8001814 <HAL_GetTick>
 80032ae:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032b0:	4b65      	ldr	r3, [pc, #404]	; (8003448 <HAL_RCC_OscConfig+0x6a8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80032b8:	d006      	beq.n	80032c8 <HAL_RCC_OscConfig+0x528>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ba:	f7fe faab 	bl	8001814 <HAL_GetTick>
 80032be:	1b40      	subs	r0, r0, r5
 80032c0:	2802      	cmp	r0, #2
 80032c2:	d9f5      	bls.n	80032b0 <HAL_RCC_OscConfig+0x510>
            return HAL_TIMEOUT;
 80032c4:	2003      	movs	r0, #3
 80032c6:	e0b0      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032c8:	4b5f      	ldr	r3, [pc, #380]	; (8003448 <HAL_RCC_OscConfig+0x6a8>)
 80032ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80032cc:	4a5f      	ldr	r2, [pc, #380]	; (800344c <HAL_RCC_OscConfig+0x6ac>)
 80032ce:	400a      	ands	r2, r1
 80032d0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80032d2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80032d4:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80032d8:	430a      	orrs	r2, r1
 80032da:	629a      	str	r2, [r3, #40]	; 0x28
 80032dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80032de:	3a01      	subs	r2, #1
 80032e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032e6:	3901      	subs	r1, #1
 80032e8:	0249      	lsls	r1, r1, #9
 80032ea:	b289      	uxth	r1, r1
 80032ec:	430a      	orrs	r2, r1
 80032ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80032f0:	3901      	subs	r1, #1
 80032f2:	0409      	lsls	r1, r1, #16
 80032f4:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80032f8:	430a      	orrs	r2, r1
 80032fa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80032fc:	3901      	subs	r1, #1
 80032fe:	0609      	lsls	r1, r1, #24
 8003300:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003304:	430a      	orrs	r2, r1
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8003308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003310:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003312:	4a4f      	ldr	r2, [pc, #316]	; (8003450 <HAL_RCC_OscConfig+0x6b0>)
 8003314:	400a      	ands	r2, r1
 8003316:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003318:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800331c:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800331e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003320:	f022 020c 	bic.w	r2, r2, #12
 8003324:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003326:	430a      	orrs	r2, r1
 8003328:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800332a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332c:	f022 0202 	bic.w	r2, r2, #2
 8003330:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003332:	430a      	orrs	r2, r1
 8003334:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003338:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800333c:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003340:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003344:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003348:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800334c:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	f042 0201 	orr.w	r2, r2, #1
 8003354:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800335c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800335e:	f7fe fa59 	bl	8001814 <HAL_GetTick>
 8003362:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003364:	4b38      	ldr	r3, [pc, #224]	; (8003448 <HAL_RCC_OscConfig+0x6a8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800336c:	d106      	bne.n	800337c <HAL_RCC_OscConfig+0x5dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336e:	f7fe fa51 	bl	8001814 <HAL_GetTick>
 8003372:	1b00      	subs	r0, r0, r4
 8003374:	2802      	cmp	r0, #2
 8003376:	d9f5      	bls.n	8003364 <HAL_RCC_OscConfig+0x5c4>
            return HAL_TIMEOUT;
 8003378:	2003      	movs	r0, #3
 800337a:	e056      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800337c:	2000      	movs	r0, #0
 800337e:	e054      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
 8003380:	2000      	movs	r0, #0
 8003382:	e052      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003384:	4a30      	ldr	r2, [pc, #192]	; (8003448 <HAL_RCC_OscConfig+0x6a8>)
 8003386:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003388:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800338a:	2b01      	cmp	r3, #1
 800338c:	d04e      	beq.n	800342c <HAL_RCC_OscConfig+0x68c>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338e:	f001 0303 	and.w	r3, r1, #3
 8003392:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003394:	4293      	cmp	r3, r2
 8003396:	d14b      	bne.n	8003430 <HAL_RCC_OscConfig+0x690>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003398:	f3c1 1105 	ubfx	r1, r1, #4, #6
 800339c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339e:	4299      	cmp	r1, r3
 80033a0:	d148      	bne.n	8003434 <HAL_RCC_OscConfig+0x694>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033a2:	f3c0 0208 	ubfx	r2, r0, #0, #9
 80033a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d144      	bne.n	8003438 <HAL_RCC_OscConfig+0x698>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033ae:	f3c0 2246 	ubfx	r2, r0, #9, #7
 80033b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033b4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d140      	bne.n	800343c <HAL_RCC_OscConfig+0x69c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033ba:	f3c0 4206 	ubfx	r2, r0, #16, #7
 80033be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d13c      	bne.n	8003440 <HAL_RCC_OscConfig+0x6a0>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80033c6:	f3c0 6006 	ubfx	r0, r0, #24, #7
 80033ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033ce:	4298      	cmp	r0, r3
 80033d0:	d138      	bne.n	8003444 <HAL_RCC_OscConfig+0x6a4>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80033d2:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_RCC_OscConfig+0x6a8>)
 80033d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80033da:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80033dc:	429a      	cmp	r2, r3
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_OscConfig+0x644>
  return HAL_OK;
 80033e0:	2000      	movs	r0, #0
 80033e2:	e022      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_DISABLE();
 80033e4:	4a18      	ldr	r2, [pc, #96]	; (8003448 <HAL_RCC_OscConfig+0x6a8>)
 80033e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 80033ee:	f7fe fa11 	bl	8001814 <HAL_GetTick>
 80033f2:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80033f4:	f7fe fa0e 	bl	8001814 <HAL_GetTick>
 80033f8:	42a8      	cmp	r0, r5
 80033fa:	d0fb      	beq.n	80033f4 <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033fc:	4a12      	ldr	r2, [pc, #72]	; (8003448 <HAL_RCC_OscConfig+0x6a8>)
 80033fe:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003400:	4b13      	ldr	r3, [pc, #76]	; (8003450 <HAL_RCC_OscConfig+0x6b0>)
 8003402:	400b      	ands	r3, r1
 8003404:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003406:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800340a:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800340c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	62d3      	str	r3, [r2, #44]	; 0x2c
  return HAL_OK;
 8003414:	2000      	movs	r0, #0
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
    return HAL_ERROR;
 8003418:	2001      	movs	r0, #1
}
 800341a:	4770      	bx	lr
        return HAL_ERROR;
 800341c:	2001      	movs	r0, #1
 800341e:	e004      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 8003420:	2001      	movs	r0, #1
 8003422:	e002      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 8003424:	2001      	movs	r0, #1
 8003426:	e000      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
  return HAL_OK;
 8003428:	2000      	movs	r0, #0
}
 800342a:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800342c:	2001      	movs	r0, #1
 800342e:	e7fc      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
 8003430:	2001      	movs	r0, #1
 8003432:	e7fa      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
 8003434:	2001      	movs	r0, #1
 8003436:	e7f8      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
 8003438:	2001      	movs	r0, #1
 800343a:	e7f6      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
 800343c:	2001      	movs	r0, #1
 800343e:	e7f4      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
 8003440:	2001      	movs	r0, #1
 8003442:	e7f2      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
 8003444:	2001      	movs	r0, #1
 8003446:	e7f0      	b.n	800342a <HAL_RCC_OscConfig+0x68a>
 8003448:	58024400 	.word	0x58024400
 800344c:	fffffc0c 	.word	0xfffffc0c
 8003450:	ffff0007 	.word	0xffff0007

08003454 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003454:	4b74      	ldr	r3, [pc, #464]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800345c:	2b10      	cmp	r3, #16
 800345e:	f000 80de 	beq.w	800361e <HAL_RCC_GetSysClockFreq+0x1ca>
 8003462:	2b18      	cmp	r3, #24
 8003464:	d010      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x34>
 8003466:	b10b      	cbz	r3, 800346c <HAL_RCC_GetSysClockFreq+0x18>
 8003468:	4870      	ldr	r0, [pc, #448]	; (800362c <HAL_RCC_GetSysClockFreq+0x1d8>)
 800346a:	4770      	bx	lr
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800346c:	4b6e      	ldr	r3, [pc, #440]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f013 0f20 	tst.w	r3, #32
 8003474:	f000 80d5 	beq.w	8003622 <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003478:	4b6b      	ldr	r3, [pc, #428]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8003480:	4b6b      	ldr	r3, [pc, #428]	; (8003630 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8003482:	fa23 f000 	lsr.w	r0, r3, r0
 8003486:	4770      	bx	lr
{
 8003488:	b410      	push	{r4}
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800348a:	4a67      	ldr	r2, [pc, #412]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800348c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800348e:	f001 0103 	and.w	r1, r1, #3
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003492:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8003494:	f3c4 1005 	ubfx	r0, r4, #4, #6
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003498:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800349a:	f003 0c01 	and.w	ip, r3, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800349e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80034a0:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80034a4:	fb0c f303 	mul.w	r3, ip, r3
 80034a8:	ee07 3a90 	vmov	s15, r3
 80034ac:	eef8 7a67 	vcvt.f32.u32	s15, s15

      if (pllm != 0U)
 80034b0:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 80034b4:	f000 8093 	beq.w	80035de <HAL_RCC_GetSysClockFreq+0x18a>
      {
        switch (pllsource)
 80034b8:	2901      	cmp	r1, #1
 80034ba:	d065      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0x134>
 80034bc:	2902      	cmp	r1, #2
 80034be:	f000 8091 	beq.w	80035e4 <HAL_RCC_GetSysClockFreq+0x190>
 80034c2:	b1e1      	cbz	r1, 80034fe <HAL_RCC_GetSysClockFreq+0xaa>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034c4:	ee07 0a10 	vmov	s14, r0
 80034c8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80034cc:	ed9f 6a59 	vldr	s12, [pc, #356]	; 8003634 <HAL_RCC_GetSysClockFreq+0x1e0>
 80034d0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80034d4:	4b54      	ldr	r3, [pc, #336]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034dc:	ee06 3a90 	vmov	s13, r3
 80034e0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80034e4:	ed9f 6a54 	vldr	s12, [pc, #336]	; 8003638 <HAL_RCC_GetSysClockFreq+0x1e4>
 80034e8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80034ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034f8:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 80034fc:	e060      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x16c>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034fe:	6813      	ldr	r3, [r2, #0]
 8003500:	f013 0f20 	tst.w	r3, #32
 8003504:	d023      	beq.n	800354e <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003506:	4611      	mov	r1, r2
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800350e:	4b48      	ldr	r3, [pc, #288]	; (8003630 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8003510:	40d3      	lsrs	r3, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003512:	ee07 3a10 	vmov	s14, r3
 8003516:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800351a:	ee07 0a10 	vmov	s14, r0
 800351e:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8003522:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8003526:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800352c:	ee06 3a90 	vmov	s13, r3
 8003530:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003534:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8003638 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003538:	ee67 7a86 	vmul.f32	s15, s15, s12
 800353c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003540:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003544:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003548:	ee27 7a27 	vmul.f32	s14, s14, s15
 800354c:	e038      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x16c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800354e:	ee07 0a10 	vmov	s14, r0
 8003552:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003556:	ed9f 6a39 	vldr	s12, [pc, #228]	; 800363c <HAL_RCC_GetSysClockFreq+0x1e8>
 800355a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800355e:	4b32      	ldr	r3, [pc, #200]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003566:	ee06 3a90 	vmov	s13, r3
 800356a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800356e:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8003638 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003572:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800357a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800357e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003582:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003586:	e01b      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x16c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003588:	ee07 0a10 	vmov	s14, r0
 800358c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003590:	ed9f 6a28 	vldr	s12, [pc, #160]	; 8003634 <HAL_RCC_GetSysClockFreq+0x1e0>
 8003594:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003598:	4b23      	ldr	r3, [pc, #140]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a0:	ee06 3a90 	vmov	s13, r3
 80035a4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80035a8:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8003638 <HAL_RCC_GetSysClockFreq+0x1e4>
 80035ac:	ee67 7a86 	vmul.f32	s15, s15, s12
 80035b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035bc:	ee27 7a27 	vmul.f32	s14, s14, s15
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80035c0:	4b19      	ldr	r3, [pc, #100]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80035c8:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80035ca:	ee07 3a90 	vmov	s15, r3
 80035ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80035d6:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80035da:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80035de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035e2:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035e4:	ee07 0a10 	vmov	s14, r0
 80035e8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80035ec:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8003640 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035f0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80035f4:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fc:	ee06 3a90 	vmov	s13, r3
 8003600:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003604:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8003638 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003608:	ee67 7a86 	vmul.f32	s15, s15, s12
 800360c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003610:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003614:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003618:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 800361c:	e7d0      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x16c>
      sysclockfreq = HSE_VALUE;
 800361e:	4809      	ldr	r0, [pc, #36]	; (8003644 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003620:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003622:	4803      	ldr	r0, [pc, #12]	; (8003630 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	58024400 	.word	0x58024400
 800362c:	003d0900 	.word	0x003d0900
 8003630:	03d09000 	.word	0x03d09000
 8003634:	4a742400 	.word	0x4a742400
 8003638:	39000000 	.word	0x39000000
 800363c:	4c742400 	.word	0x4c742400
 8003640:	4b742400 	.word	0x4b742400
 8003644:	00f42400 	.word	0x00f42400

08003648 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003648:	2800      	cmp	r0, #0
 800364a:	f000 8132 	beq.w	80038b2 <HAL_RCC_ClockConfig+0x26a>
{
 800364e:	b570      	push	{r4, r5, r6, lr}
 8003650:	460d      	mov	r5, r1
 8003652:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003654:	4b9b      	ldr	r3, [pc, #620]	; (80038c4 <HAL_RCC_ClockConfig+0x27c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	428b      	cmp	r3, r1
 800365e:	d20b      	bcs.n	8003678 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003660:	4a98      	ldr	r2, [pc, #608]	; (80038c4 <HAL_RCC_ClockConfig+0x27c>)
 8003662:	6813      	ldr	r3, [r2, #0]
 8003664:	f023 030f 	bic.w	r3, r3, #15
 8003668:	430b      	orrs	r3, r1
 800366a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366c:	6813      	ldr	r3, [r2, #0]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	428b      	cmp	r3, r1
 8003674:	f040 811f 	bne.w	80038b6 <HAL_RCC_ClockConfig+0x26e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	f013 0f04 	tst.w	r3, #4
 800367e:	d00c      	beq.n	800369a <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003680:	6922      	ldr	r2, [r4, #16]
 8003682:	4b91      	ldr	r3, [pc, #580]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800368a:	429a      	cmp	r2, r3
 800368c:	d905      	bls.n	800369a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800368e:	498e      	ldr	r1, [pc, #568]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 8003690:	698b      	ldr	r3, [r1, #24]
 8003692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003696:	431a      	orrs	r2, r3
 8003698:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	f013 0f08 	tst.w	r3, #8
 80036a0:	d00c      	beq.n	80036bc <HAL_RCC_ClockConfig+0x74>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036a2:	6962      	ldr	r2, [r4, #20]
 80036a4:	4b88      	ldr	r3, [pc, #544]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d905      	bls.n	80036bc <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036b0:	4985      	ldr	r1, [pc, #532]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 80036b2:	69cb      	ldr	r3, [r1, #28]
 80036b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b8:	431a      	orrs	r2, r3
 80036ba:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	f013 0f10 	tst.w	r3, #16
 80036c2:	d00c      	beq.n	80036de <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036c4:	69a2      	ldr	r2, [r4, #24]
 80036c6:	4b80      	ldr	r3, [pc, #512]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d905      	bls.n	80036de <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036d2:	497d      	ldr	r1, [pc, #500]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 80036d4:	69cb      	ldr	r3, [r1, #28]
 80036d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80036da:	431a      	orrs	r2, r3
 80036dc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	f013 0f20 	tst.w	r3, #32
 80036e4:	d00c      	beq.n	8003700 <HAL_RCC_ClockConfig+0xb8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80036e6:	69e2      	ldr	r2, [r4, #28]
 80036e8:	4b77      	ldr	r3, [pc, #476]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d905      	bls.n	8003700 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80036f4:	4974      	ldr	r1, [pc, #464]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 80036f6:	6a0b      	ldr	r3, [r1, #32]
 80036f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fc:	431a      	orrs	r2, r3
 80036fe:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	f013 0f02 	tst.w	r3, #2
 8003706:	d00c      	beq.n	8003722 <HAL_RCC_ClockConfig+0xda>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003708:	68e2      	ldr	r2, [r4, #12]
 800370a:	4b6f      	ldr	r3, [pc, #444]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	429a      	cmp	r2, r3
 8003714:	d905      	bls.n	8003722 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003716:	496c      	ldr	r1, [pc, #432]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 8003718:	698b      	ldr	r3, [r1, #24]
 800371a:	f023 030f 	bic.w	r3, r3, #15
 800371e:	431a      	orrs	r2, r3
 8003720:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	f013 0f01 	tst.w	r3, #1
 8003728:	d041      	beq.n	80037ae <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800372a:	4a67      	ldr	r2, [pc, #412]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 800372c:	6993      	ldr	r3, [r2, #24]
 800372e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003732:	68a1      	ldr	r1, [r4, #8]
 8003734:	430b      	orrs	r3, r1
 8003736:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003738:	6863      	ldr	r3, [r4, #4]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d00a      	beq.n	8003754 <HAL_RCC_ClockConfig+0x10c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800373e:	2b03      	cmp	r3, #3
 8003740:	d027      	beq.n	8003792 <HAL_RCC_ClockConfig+0x14a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003742:	2b01      	cmp	r3, #1
 8003744:	d02c      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x158>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003746:	4a60      	ldr	r2, [pc, #384]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	f012 0f04 	tst.w	r2, #4
 800374e:	d106      	bne.n	800375e <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8003750:	2001      	movs	r0, #1
 8003752:	e0ad      	b.n	80038b0 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800375a:	f000 80ae 	beq.w	80038ba <HAL_RCC_ClockConfig+0x272>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800375e:	495a      	ldr	r1, [pc, #360]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 8003760:	690a      	ldr	r2, [r1, #16]
 8003762:	f022 0207 	bic.w	r2, r2, #7
 8003766:	4313      	orrs	r3, r2
 8003768:	610b      	str	r3, [r1, #16]
    tickstart = HAL_GetTick();
 800376a:	f7fe f853 	bl	8001814 <HAL_GetTick>
 800376e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003770:	4b55      	ldr	r3, [pc, #340]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003778:	6862      	ldr	r2, [r4, #4]
 800377a:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800377e:	d016      	beq.n	80037ae <HAL_RCC_ClockConfig+0x166>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003780:	f7fe f848 	bl	8001814 <HAL_GetTick>
 8003784:	1b80      	subs	r0, r0, r6
 8003786:	f241 3388 	movw	r3, #5000	; 0x1388
 800378a:	4298      	cmp	r0, r3
 800378c:	d9f0      	bls.n	8003770 <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 800378e:	2003      	movs	r0, #3
 8003790:	e08e      	b.n	80038b0 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003792:	4a4d      	ldr	r2, [pc, #308]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 8003794:	6812      	ldr	r2, [r2, #0]
 8003796:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800379a:	d1e0      	bne.n	800375e <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 800379c:	2001      	movs	r0, #1
 800379e:	e087      	b.n	80038b0 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037a0:	4a49      	ldr	r2, [pc, #292]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80037a8:	d1d9      	bne.n	800375e <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 80037aa:	2001      	movs	r0, #1
 80037ac:	e080      	b.n	80038b0 <HAL_RCC_ClockConfig+0x268>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	f013 0f02 	tst.w	r3, #2
 80037b4:	d00c      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x188>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80037b6:	68e2      	ldr	r2, [r4, #12]
 80037b8:	4b43      	ldr	r3, [pc, #268]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d205      	bcs.n	80037d0 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c4:	4940      	ldr	r1, [pc, #256]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 80037c6:	698b      	ldr	r3, [r1, #24]
 80037c8:	f023 030f 	bic.w	r3, r3, #15
 80037cc:	431a      	orrs	r2, r3
 80037ce:	618a      	str	r2, [r1, #24]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037d0:	4b3c      	ldr	r3, [pc, #240]	; (80038c4 <HAL_RCC_ClockConfig+0x27c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	42ab      	cmp	r3, r5
 80037da:	d90a      	bls.n	80037f2 <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037dc:	4a39      	ldr	r2, [pc, #228]	; (80038c4 <HAL_RCC_ClockConfig+0x27c>)
 80037de:	6813      	ldr	r3, [r2, #0]
 80037e0:	f023 030f 	bic.w	r3, r3, #15
 80037e4:	432b      	orrs	r3, r5
 80037e6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e8:	6813      	ldr	r3, [r2, #0]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	42ab      	cmp	r3, r5
 80037f0:	d165      	bne.n	80038be <HAL_RCC_ClockConfig+0x276>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	f013 0f04 	tst.w	r3, #4
 80037f8:	d00c      	beq.n	8003814 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80037fa:	6922      	ldr	r2, [r4, #16]
 80037fc:	4b32      	ldr	r3, [pc, #200]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003804:	429a      	cmp	r2, r3
 8003806:	d205      	bcs.n	8003814 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003808:	492f      	ldr	r1, [pc, #188]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 800380a:	698b      	ldr	r3, [r1, #24]
 800380c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003810:	431a      	orrs	r2, r3
 8003812:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	f013 0f08 	tst.w	r3, #8
 800381a:	d00c      	beq.n	8003836 <HAL_RCC_ClockConfig+0x1ee>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800381c:	6962      	ldr	r2, [r4, #20]
 800381e:	4b2a      	ldr	r3, [pc, #168]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003826:	429a      	cmp	r2, r3
 8003828:	d205      	bcs.n	8003836 <HAL_RCC_ClockConfig+0x1ee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800382a:	4927      	ldr	r1, [pc, #156]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 800382c:	69cb      	ldr	r3, [r1, #28]
 800382e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003832:	431a      	orrs	r2, r3
 8003834:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	f013 0f10 	tst.w	r3, #16
 800383c:	d00c      	beq.n	8003858 <HAL_RCC_ClockConfig+0x210>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800383e:	69a2      	ldr	r2, [r4, #24]
 8003840:	4b21      	ldr	r3, [pc, #132]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003848:	429a      	cmp	r2, r3
 800384a:	d205      	bcs.n	8003858 <HAL_RCC_ClockConfig+0x210>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800384c:	491e      	ldr	r1, [pc, #120]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 800384e:	69cb      	ldr	r3, [r1, #28]
 8003850:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003854:	431a      	orrs	r2, r3
 8003856:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	f013 0f20 	tst.w	r3, #32
 800385e:	d00c      	beq.n	800387a <HAL_RCC_ClockConfig+0x232>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003860:	69e2      	ldr	r2, [r4, #28]
 8003862:	4b19      	ldr	r3, [pc, #100]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800386a:	429a      	cmp	r2, r3
 800386c:	d205      	bcs.n	800387a <HAL_RCC_ClockConfig+0x232>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800386e:	4916      	ldr	r1, [pc, #88]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 8003870:	6a0b      	ldr	r3, [r1, #32]
 8003872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003876:	431a      	orrs	r2, r3
 8003878:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800387a:	f7ff fdeb 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 800387e:	4912      	ldr	r1, [pc, #72]	; (80038c8 <HAL_RCC_ClockConfig+0x280>)
 8003880:	698b      	ldr	r3, [r1, #24]
 8003882:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003886:	4a11      	ldr	r2, [pc, #68]	; (80038cc <HAL_RCC_ClockConfig+0x284>)
 8003888:	5cd3      	ldrb	r3, [r2, r3]
 800388a:	f003 031f 	and.w	r3, r3, #31
 800388e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003890:	698b      	ldr	r3, [r1, #24]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	5cd3      	ldrb	r3, [r2, r3]
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	fa20 f303 	lsr.w	r3, r0, r3
 80038a0:	4a0b      	ldr	r2, [pc, #44]	; (80038d0 <HAL_RCC_ClockConfig+0x288>)
 80038a2:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_ClockConfig+0x28c>)
 80038a6:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_ClockConfig+0x290>)
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	f7fd ff50 	bl	8001750 <HAL_InitTick>
}
 80038b0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80038b2:	2001      	movs	r0, #1
}
 80038b4:	4770      	bx	lr
      return HAL_ERROR;
 80038b6:	2001      	movs	r0, #1
 80038b8:	e7fa      	b.n	80038b0 <HAL_RCC_ClockConfig+0x268>
        return HAL_ERROR;
 80038ba:	2001      	movs	r0, #1
 80038bc:	e7f8      	b.n	80038b0 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 80038be:	2001      	movs	r0, #1
 80038c0:	e7f6      	b.n	80038b0 <HAL_RCC_ClockConfig+0x268>
 80038c2:	bf00      	nop
 80038c4:	52002000 	.word	0x52002000
 80038c8:	58024400 	.word	0x58024400
 80038cc:	08008c68 	.word	0x08008c68
 80038d0:	20000008 	.word	0x20000008
 80038d4:	20000004 	.word	0x20000004
 80038d8:	20000010 	.word	0x20000010

080038dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038dc:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80038de:	f7ff fdb9 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 80038e2:	4a0b      	ldr	r2, [pc, #44]	; (8003910 <HAL_RCC_GetHCLKFreq+0x34>)
 80038e4:	6993      	ldr	r3, [r2, #24]
 80038e6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80038ea:	490a      	ldr	r1, [pc, #40]	; (8003914 <HAL_RCC_GetHCLKFreq+0x38>)
 80038ec:	5ccb      	ldrb	r3, [r1, r3]
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038f6:	6992      	ldr	r2, [r2, #24]
 80038f8:	f002 020f 	and.w	r2, r2, #15
 80038fc:	5c88      	ldrb	r0, [r1, r2]
 80038fe:	f000 001f 	and.w	r0, r0, #31
 8003902:	fa23 f000 	lsr.w	r0, r3, r0
 8003906:	4a04      	ldr	r2, [pc, #16]	; (8003918 <HAL_RCC_GetHCLKFreq+0x3c>)
 8003908:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800390a:	4a04      	ldr	r2, [pc, #16]	; (800391c <HAL_RCC_GetHCLKFreq+0x40>)
 800390c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800390e:	bd08      	pop	{r3, pc}
 8003910:	58024400 	.word	0x58024400
 8003914:	08008c68 	.word	0x08008c68
 8003918:	20000008 	.word	0x20000008
 800391c:	20000004 	.word	0x20000004

08003920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003920:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003922:	f7ff ffdb 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800392e:	4a04      	ldr	r2, [pc, #16]	; (8003940 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003930:	5cd3      	ldrb	r3, [r2, r3]
 8003932:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003936:	40d8      	lsrs	r0, r3
 8003938:	bd08      	pop	{r3, pc}
 800393a:	bf00      	nop
 800393c:	58024400 	.word	0x58024400
 8003940:	08008c68 	.word	0x08008c68

08003944 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003944:	4b40      	ldr	r3, [pc, #256]	; (8003a48 <RCCEx_PLL2_Config+0x104>)
 8003946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	2b03      	cmp	r3, #3
 800394e:	d079      	beq.n	8003a44 <RCCEx_PLL2_Config+0x100>
{
 8003950:	b570      	push	{r4, r5, r6, lr}
 8003952:	4605      	mov	r5, r0
 8003954:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003956:	4a3c      	ldr	r2, [pc, #240]	; (8003a48 <RCCEx_PLL2_Config+0x104>)
 8003958:	6813      	ldr	r3, [r2, #0]
 800395a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800395e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003960:	f7fd ff58 	bl	8001814 <HAL_GetTick>
 8003964:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003966:	4b38      	ldr	r3, [pc, #224]	; (8003a48 <RCCEx_PLL2_Config+0x104>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800396e:	d006      	beq.n	800397e <RCCEx_PLL2_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003970:	f7fd ff50 	bl	8001814 <HAL_GetTick>
 8003974:	1b03      	subs	r3, r0, r4
 8003976:	2b02      	cmp	r3, #2
 8003978:	d9f5      	bls.n	8003966 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 800397a:	2003      	movs	r0, #3

  }


  return status;
}
 800397c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800397e:	4b32      	ldr	r3, [pc, #200]	; (8003a48 <RCCEx_PLL2_Config+0x104>)
 8003980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003982:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8003986:	6829      	ldr	r1, [r5, #0]
 8003988:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 800398c:	629a      	str	r2, [r3, #40]	; 0x28
 800398e:	686a      	ldr	r2, [r5, #4]
 8003990:	3a01      	subs	r2, #1
 8003992:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003996:	68a9      	ldr	r1, [r5, #8]
 8003998:	3901      	subs	r1, #1
 800399a:	0249      	lsls	r1, r1, #9
 800399c:	b289      	uxth	r1, r1
 800399e:	430a      	orrs	r2, r1
 80039a0:	68e9      	ldr	r1, [r5, #12]
 80039a2:	3901      	subs	r1, #1
 80039a4:	0409      	lsls	r1, r1, #16
 80039a6:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80039aa:	430a      	orrs	r2, r1
 80039ac:	6929      	ldr	r1, [r5, #16]
 80039ae:	3901      	subs	r1, #1
 80039b0:	0609      	lsls	r1, r1, #24
 80039b2:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80039b6:	430a      	orrs	r2, r1
 80039b8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80039ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039bc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80039c0:	6969      	ldr	r1, [r5, #20]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80039c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c8:	f022 0220 	bic.w	r2, r2, #32
 80039cc:	69a9      	ldr	r1, [r5, #24]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80039d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d4:	f022 0210 	bic.w	r2, r2, #16
 80039d8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80039da:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80039dc:	4a1b      	ldr	r2, [pc, #108]	; (8003a4c <RCCEx_PLL2_Config+0x108>)
 80039de:	400a      	ands	r2, r1
 80039e0:	69e9      	ldr	r1, [r5, #28]
 80039e2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80039e6:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 80039e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ea:	f042 0210 	orr.w	r2, r2, #16
 80039ee:	62da      	str	r2, [r3, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80039f0:	b9c6      	cbnz	r6, 8003a24 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80039f2:	461a      	mov	r2, r3
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039fa:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 80039fc:	4a12      	ldr	r2, [pc, #72]	; (8003a48 <RCCEx_PLL2_Config+0x104>)
 80039fe:	6813      	ldr	r3, [r2, #0]
 8003a00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a04:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003a06:	f7fd ff05 	bl	8001814 <HAL_GetTick>
 8003a0a:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a0c:	4b0e      	ldr	r3, [pc, #56]	; (8003a48 <RCCEx_PLL2_Config+0x104>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003a14:	d114      	bne.n	8003a40 <RCCEx_PLL2_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003a16:	f7fd fefd 	bl	8001814 <HAL_GetTick>
 8003a1a:	1b00      	subs	r0, r0, r4
 8003a1c:	2802      	cmp	r0, #2
 8003a1e:	d9f5      	bls.n	8003a0c <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8003a20:	2003      	movs	r0, #3
 8003a22:	e7ab      	b.n	800397c <RCCEx_PLL2_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 8003a24:	2e01      	cmp	r6, #1
 8003a26:	d005      	beq.n	8003a34 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003a28:	4a07      	ldr	r2, [pc, #28]	; (8003a48 <RCCEx_PLL2_Config+0x104>)
 8003a2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a30:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a32:	e7e3      	b.n	80039fc <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003a34:	4a04      	ldr	r2, [pc, #16]	; (8003a48 <RCCEx_PLL2_Config+0x104>)
 8003a36:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a3e:	e7dd      	b.n	80039fc <RCCEx_PLL2_Config+0xb8>
  return status;
 8003a40:	2000      	movs	r0, #0
 8003a42:	e79b      	b.n	800397c <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8003a44:	2001      	movs	r0, #1
}
 8003a46:	4770      	bx	lr
 8003a48:	58024400 	.word	0x58024400
 8003a4c:	ffff0007 	.word	0xffff0007

08003a50 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a50:	4b40      	ldr	r3, [pc, #256]	; (8003b54 <RCCEx_PLL3_Config+0x104>)
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d079      	beq.n	8003b50 <RCCEx_PLL3_Config+0x100>
{
 8003a5c:	b570      	push	{r4, r5, r6, lr}
 8003a5e:	4605      	mov	r5, r0
 8003a60:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003a62:	4a3c      	ldr	r2, [pc, #240]	; (8003b54 <RCCEx_PLL3_Config+0x104>)
 8003a64:	6813      	ldr	r3, [r2, #0]
 8003a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a6c:	f7fd fed2 	bl	8001814 <HAL_GetTick>
 8003a70:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003a72:	4b38      	ldr	r3, [pc, #224]	; (8003b54 <RCCEx_PLL3_Config+0x104>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003a7a:	d006      	beq.n	8003a8a <RCCEx_PLL3_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003a7c:	f7fd feca 	bl	8001814 <HAL_GetTick>
 8003a80:	1b03      	subs	r3, r0, r4
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d9f5      	bls.n	8003a72 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8003a86:	2003      	movs	r0, #3

  }


  return status;
}
 8003a88:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003a8a:	4b32      	ldr	r3, [pc, #200]	; (8003b54 <RCCEx_PLL3_Config+0x104>)
 8003a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a8e:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8003a92:	6829      	ldr	r1, [r5, #0]
 8003a94:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003a98:	629a      	str	r2, [r3, #40]	; 0x28
 8003a9a:	686a      	ldr	r2, [r5, #4]
 8003a9c:	3a01      	subs	r2, #1
 8003a9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aa2:	68a9      	ldr	r1, [r5, #8]
 8003aa4:	3901      	subs	r1, #1
 8003aa6:	0249      	lsls	r1, r1, #9
 8003aa8:	b289      	uxth	r1, r1
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	68e9      	ldr	r1, [r5, #12]
 8003aae:	3901      	subs	r1, #1
 8003ab0:	0409      	lsls	r1, r1, #16
 8003ab2:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	6929      	ldr	r1, [r5, #16]
 8003aba:	3901      	subs	r1, #1
 8003abc:	0609      	lsls	r1, r1, #24
 8003abe:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003acc:	6969      	ldr	r1, [r5, #20]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ad8:	69a9      	ldr	r1, [r5, #24]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ae4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003ae6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003ae8:	4a1b      	ldr	r2, [pc, #108]	; (8003b58 <RCCEx_PLL3_Config+0x108>)
 8003aea:	400a      	ands	r2, r1
 8003aec:	69e9      	ldr	r1, [r5, #28]
 8003aee:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003af2:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003afa:	62da      	str	r2, [r3, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8003afc:	b9c6      	cbnz	r6, 8003b30 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003afe:	461a      	mov	r2, r3
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b06:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8003b08:	4a12      	ldr	r2, [pc, #72]	; (8003b54 <RCCEx_PLL3_Config+0x104>)
 8003b0a:	6813      	ldr	r3, [r2, #0]
 8003b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b10:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003b12:	f7fd fe7f 	bl	8001814 <HAL_GetTick>
 8003b16:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003b18:	4b0e      	ldr	r3, [pc, #56]	; (8003b54 <RCCEx_PLL3_Config+0x104>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003b20:	d114      	bne.n	8003b4c <RCCEx_PLL3_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003b22:	f7fd fe77 	bl	8001814 <HAL_GetTick>
 8003b26:	1b00      	subs	r0, r0, r4
 8003b28:	2802      	cmp	r0, #2
 8003b2a:	d9f5      	bls.n	8003b18 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8003b2c:	2003      	movs	r0, #3
 8003b2e:	e7ab      	b.n	8003a88 <RCCEx_PLL3_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 8003b30:	2e01      	cmp	r6, #1
 8003b32:	d005      	beq.n	8003b40 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003b34:	4a07      	ldr	r2, [pc, #28]	; (8003b54 <RCCEx_PLL3_Config+0x104>)
 8003b36:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003b38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b3c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b3e:	e7e3      	b.n	8003b08 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003b40:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <RCCEx_PLL3_Config+0x104>)
 8003b42:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003b44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b48:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b4a:	e7dd      	b.n	8003b08 <RCCEx_PLL3_Config+0xb8>
  return status;
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	e79b      	b.n	8003a88 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8003b50:	2001      	movs	r0, #1
}
 8003b52:	4770      	bx	lr
 8003b54:	58024400 	.word	0x58024400
 8003b58:	ffff0007 	.word	0xffff0007

08003b5c <HAL_RCCEx_PeriphCLKConfig>:
{
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b60:	6803      	ldr	r3, [r0, #0]
 8003b62:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003b66:	d030      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003b68:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003b6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b6e:	d026      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003b70:	d80e      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003b72:	b1eb      	cbz	r3, 8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003b74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b78:	d107      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x2e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b7a:	2102      	movs	r1, #2
 8003b7c:	3008      	adds	r0, #8
 8003b7e:	f7ff fee1 	bl	8003944 <RCCEx_PLL2_Config>
 8003b82:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8003b84:	b145      	cbz	r5, 8003b98 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003b86:	462e      	mov	r6, r5
 8003b88:	e021      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003b8a:	2601      	movs	r6, #1
 8003b8c:	4635      	mov	r5, r6
 8003b8e:	e01e      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003b90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b94:	d109      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003b96:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b98:	4a98      	ldr	r2, [pc, #608]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003b9a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003b9c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003ba0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003ba2:	430b      	orrs	r3, r1
 8003ba4:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ba6:	2600      	movs	r6, #0
 8003ba8:	e011      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003baa:	2601      	movs	r6, #1
 8003bac:	4635      	mov	r5, r6
 8003bae:	e00e      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x72>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb0:	4a92      	ldr	r2, [pc, #584]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003bb2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb8:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bba:	2500      	movs	r5, #0
 8003bbc:	e7ec      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bbe:	2102      	movs	r1, #2
 8003bc0:	3028      	adds	r0, #40	; 0x28
 8003bc2:	f7ff ff45 	bl	8003a50 <RCCEx_PLL3_Config>
 8003bc6:	4605      	mov	r5, r0
        break;
 8003bc8:	e7dc      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bca:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bcc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003bd4:	d014      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch (PeriphClkInit->Sai1ClockSelection)
 8003bd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d832      	bhi.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8003bdc:	e8df f003 	tbb	[pc, r3]
 8003be0:	082a2303 	.word	0x082a2303
 8003be4:	08          	.byte	0x08
 8003be5:	00          	.byte	0x00
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be6:	4a85      	ldr	r2, [pc, #532]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003be8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bee:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8003bf0:	bb55      	cbnz	r5, 8003c48 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bf2:	4a82      	ldr	r2, [pc, #520]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003bf4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003bf6:	f023 0307 	bic.w	r3, r3, #7
 8003bfa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003c06:	d031      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch (PeriphClkInit->Sai23ClockSelection)
 8003c08:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003c0a:	2b80      	cmp	r3, #128	; 0x80
 8003c0c:	d04c      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003c0e:	d820      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d043      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x140>
 8003c14:	2b40      	cmp	r3, #64	; 0x40
 8003c16:	d119      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c18:	2100      	movs	r1, #0
 8003c1a:	f104 0008 	add.w	r0, r4, #8
 8003c1e:	f7ff fe91 	bl	8003944 <RCCEx_PLL2_Config>
 8003c22:	4605      	mov	r5, r0
        break;
 8003c24:	e01a      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x100>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c26:	2100      	movs	r1, #0
 8003c28:	f104 0008 	add.w	r0, r4, #8
 8003c2c:	f7ff fe8a 	bl	8003944 <RCCEx_PLL2_Config>
 8003c30:	4605      	mov	r5, r0
        break;
 8003c32:	e7dd      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x94>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c34:	2100      	movs	r1, #0
 8003c36:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8003c3a:	f7ff ff09 	bl	8003a50 <RCCEx_PLL3_Config>
 8003c3e:	4605      	mov	r5, r0
        break;
 8003c40:	e7d6      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 8003c42:	2601      	movs	r6, #1
 8003c44:	4635      	mov	r5, r6
 8003c46:	e7db      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003c48:	462e      	mov	r6, r5
 8003c4a:	e7d9      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch (PeriphClkInit->Sai23ClockSelection)
 8003c4c:	2601      	movs	r6, #1
 8003c4e:	4635      	mov	r5, r6
 8003c50:	e00c      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c52:	2bc0      	cmp	r3, #192	; 0xc0
 8003c54:	d002      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c5a:	d11c      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if (ret == HAL_OK)
 8003c5c:	bb5d      	cbnz	r5, 8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003c5e:	4a67      	ldr	r2, [pc, #412]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003c60:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003c62:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8003c66:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003c72:	d046      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    switch (PeriphClkInit->Sai4AClockSelection)
 8003c74:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8003c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c7c:	d039      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003c7e:	d81f      	bhi.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8003c80:	b38b      	cbz	r3, 8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003c82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c86:	d118      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x15e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c88:	2100      	movs	r1, #0
 8003c8a:	f104 0008 	add.w	r0, r4, #8
 8003c8e:	f7ff fe59 	bl	8003944 <RCCEx_PLL2_Config>
 8003c92:	4605      	mov	r5, r0
        break;
 8003c94:	e01a      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x170>
    switch (PeriphClkInit->Sai23ClockSelection)
 8003c96:	2601      	movs	r6, #1
 8003c98:	4635      	mov	r5, r6
 8003c9a:	e7e7      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x110>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c9c:	4a57      	ldr	r2, [pc, #348]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003c9e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca4:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8003ca6:	e7d9      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x100>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ca8:	2100      	movs	r1, #0
 8003caa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8003cae:	f7ff fecf 	bl	8003a50 <RCCEx_PLL3_Config>
 8003cb2:	4605      	mov	r5, r0
        break;
 8003cb4:	e7d2      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003cb6:	462e      	mov	r6, r5
 8003cb8:	e7d8      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch (PeriphClkInit->Sai4AClockSelection)
 8003cba:	2601      	movs	r6, #1
 8003cbc:	4635      	mov	r5, r6
 8003cbe:	e020      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003cc0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003cc4:	d002      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x170>
 8003cc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cca:	d109      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x184>
    if (ret == HAL_OK)
 8003ccc:	b9c5      	cbnz	r5, 8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003cce:	4a4b      	ldr	r2, [pc, #300]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003cd0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003cd2:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8003cd6:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8003cda:	430b      	orrs	r3, r1
 8003cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8003cde:	e010      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    switch (PeriphClkInit->Sai4AClockSelection)
 8003ce0:	2601      	movs	r6, #1
 8003ce2:	4635      	mov	r5, r6
 8003ce4:	e00d      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ce6:	4a45      	ldr	r2, [pc, #276]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003ce8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cee:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8003cf0:	e7ec      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x170>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8003cf8:	f7ff feaa 	bl	8003a50 <RCCEx_PLL3_Config>
 8003cfc:	4605      	mov	r5, r0
        break;
 8003cfe:	e7e5      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x170>
 8003d00:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003d08:	d024      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch (PeriphClkInit->Sai4BClockSelection)
 8003d0a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8003d0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d12:	d042      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8003d14:	d80e      	bhi.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d039      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003d1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d1e:	d106      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d20:	2100      	movs	r1, #0
 8003d22:	f104 0008 	add.w	r0, r4, #8
 8003d26:	f7ff fe0d 	bl	8003944 <RCCEx_PLL2_Config>
 8003d2a:	4605      	mov	r5, r0
        break;
 8003d2c:	e008      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch (PeriphClkInit->Sai4BClockSelection)
 8003d2e:	2601      	movs	r6, #1
 8003d30:	4635      	mov	r5, r6
 8003d32:	e00f      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003d34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d38:	d002      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003d3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d3e:	d123      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    if (ret == HAL_OK)
 8003d40:	2d00      	cmp	r5, #0
 8003d42:	d131      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003d44:	4a2d      	ldr	r2, [pc, #180]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003d46:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003d48:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003d4c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8003d50:	430b      	orrs	r3, r1
 8003d52:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003d5a:	d02e      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch (PeriphClkInit->QspiClockSelection)
 8003d5c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d040      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003d62:	d826      	bhi.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003d64:	b133      	cbz	r3, 8003d74 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003d66:	2b10      	cmp	r3, #16
 8003d68:	d120      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x250>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d6a:	4a24      	ldr	r2, [pc, #144]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003d6c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d72:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8003d74:	2d00      	cmp	r5, #0
 8003d76:	d13c      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x296>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d78:	4a20      	ldr	r2, [pc, #128]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003d7a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003d7c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d80:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003d82:	430b      	orrs	r3, r1
 8003d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d86:	e018      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch (PeriphClkInit->Sai4BClockSelection)
 8003d88:	2601      	movs	r6, #1
 8003d8a:	4635      	mov	r5, r6
 8003d8c:	e7e2      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d8e:	4a1b      	ldr	r2, [pc, #108]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003d90:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d96:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8003d98:	e7d2      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8003da0:	f7ff fe56 	bl	8003a50 <RCCEx_PLL3_Config>
 8003da4:	4605      	mov	r5, r0
        break;
 8003da6:	e7cb      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003da8:	462e      	mov	r6, r5
 8003daa:	e7d3      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch (PeriphClkInit->QspiClockSelection)
 8003dac:	2601      	movs	r6, #1
 8003dae:	4635      	mov	r5, r6
 8003db0:	e003      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003db2:	2b30      	cmp	r3, #48	; 0x30
 8003db4:	d0de      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003db6:	2601      	movs	r6, #1
 8003db8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003dc0:	d02d      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    switch (PeriphClkInit->Spi123ClockSelection)
 8003dc2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc8:	d04f      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8003dca:	d819      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d046      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x302>
 8003dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd4:	d10f      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	f104 0008 	add.w	r0, r4, #8
 8003ddc:	f7ff fdb2 	bl	8003944 <RCCEx_PLL2_Config>
 8003de0:	4605      	mov	r5, r0
        break;
 8003de2:	e013      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003de4:	2102      	movs	r1, #2
 8003de6:	f104 0008 	add.w	r0, r4, #8
 8003dea:	f7ff fdab 	bl	8003944 <RCCEx_PLL2_Config>
 8003dee:	4605      	mov	r5, r0
        break;
 8003df0:	e7c0      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003df2:	462e      	mov	r6, r5
 8003df4:	e7e1      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch (PeriphClkInit->Spi123ClockSelection)
 8003df6:	2601      	movs	r6, #1
 8003df8:	4635      	mov	r5, r6
 8003dfa:	e010      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003dfc:	58024400 	.word	0x58024400
 8003e00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e04:	d002      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003e06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e0a:	d125      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    if (ret == HAL_OK)
 8003e0c:	2d00      	cmp	r5, #0
 8003e0e:	d133      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e10:	4a77      	ldr	r2, [pc, #476]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003e12:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e18:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003e24:	d038      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    switch (PeriphClkInit->Spi45ClockSelection)
 8003e26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e2c:	d053      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003e2e:	d828      	bhi.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8003e30:	b143      	cbz	r3, 8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e36:	d121      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x320>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e38:	2101      	movs	r1, #1
 8003e3a:	f104 0008 	add.w	r0, r4, #8
 8003e3e:	f7ff fd81 	bl	8003944 <RCCEx_PLL2_Config>
 8003e42:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8003e44:	2d00      	cmp	r5, #0
 8003e46:	d14d      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x388>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003e48:	4a69      	ldr	r2, [pc, #420]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003e4a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003e4c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003e50:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003e52:	430b      	orrs	r3, r1
 8003e54:	6513      	str	r3, [r2, #80]	; 0x50
 8003e56:	e01f      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8003e58:	2601      	movs	r6, #1
 8003e5a:	4635      	mov	r5, r6
 8003e5c:	e7df      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e5e:	4a64      	ldr	r2, [pc, #400]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003e60:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e66:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8003e68:	e7d0      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8003e70:	f7ff fdee 	bl	8003a50 <RCCEx_PLL3_Config>
 8003e74:	4605      	mov	r5, r0
        break;
 8003e76:	e7c9      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003e78:	462e      	mov	r6, r5
 8003e7a:	e7d0      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    switch (PeriphClkInit->Spi45ClockSelection)
 8003e7c:	2601      	movs	r6, #1
 8003e7e:	4635      	mov	r5, r6
 8003e80:	e00a      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003e82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e86:	d0dd      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e8c:	d0da      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003e8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e92:	d0d7      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003e94:	2601      	movs	r6, #1
 8003e96:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003e9e:	d031      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ea0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea8:	d045      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x3da>
 8003eaa:	d820      	bhi.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003eac:	b143      	cbz	r3, 8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eb2:	d119      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	f104 0008 	add.w	r0, r4, #8
 8003eba:	f7ff fd43 	bl	8003944 <RCCEx_PLL2_Config>
 8003ebe:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8003ec0:	2d00      	cmp	r5, #0
 8003ec2:	d13f      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ec4:	4a4a      	ldr	r2, [pc, #296]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003ec6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003ec8:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003ecc:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ed4:	e016      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8003edc:	f7ff fdb8 	bl	8003a50 <RCCEx_PLL3_Config>
 8003ee0:	4605      	mov	r5, r0
        break;
 8003ee2:	e7af      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003ee4:	462e      	mov	r6, r5
 8003ee6:	e7d7      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ee8:	2601      	movs	r6, #1
 8003eea:	4635      	mov	r5, r6
 8003eec:	e00a      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef2:	d0e5      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ef8:	d0e2      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003efa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003efe:	d0df      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003f00:	2601      	movs	r6, #1
 8003f02:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f04:	6823      	ldr	r3, [r4, #0]
 8003f06:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003f0a:	d009      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->FdcanClockSelection)
 8003f0c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003f0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f12:	d019      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f18:	d024      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003f1a:	b1d3      	cbz	r3, 8003f52 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8003f1c:	2601      	movs	r6, #1
 8003f1e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003f26:	d033      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x434>
    switch (PeriphClkInit->FmcClockSelection)
 8003f28:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d85b      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003f2e:	e8df f003 	tbb	[pc, r3]
 8003f32:	2227      	.short	0x2227
 8003f34:	2753      	.short	0x2753
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f36:	2101      	movs	r1, #1
 8003f38:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8003f3c:	f7ff fd88 	bl	8003a50 <RCCEx_PLL3_Config>
 8003f40:	4605      	mov	r5, r0
        break;
 8003f42:	e7bd      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003f44:	462e      	mov	r6, r5
 8003f46:	e7dd      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f48:	4a29      	ldr	r2, [pc, #164]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003f4a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f50:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8003f52:	b975      	cbnz	r5, 8003f72 <HAL_RCCEx_PeriphCLKConfig+0x416>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f54:	4a26      	ldr	r2, [pc, #152]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003f56:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003f58:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003f5c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003f5e:	430b      	orrs	r3, r1
 8003f60:	6513      	str	r3, [r2, #80]	; 0x50
 8003f62:	e7dd      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f64:	2101      	movs	r1, #1
 8003f66:	f104 0008 	add.w	r0, r4, #8
 8003f6a:	f7ff fceb 	bl	8003944 <RCCEx_PLL2_Config>
 8003f6e:	4605      	mov	r5, r0
        break;
 8003f70:	e7ef      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8003f72:	462e      	mov	r6, r5
 8003f74:	e7d4      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f76:	4a1e      	ldr	r2, [pc, #120]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003f78:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f7e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8003f80:	bba5      	cbnz	r5, 8003fec <HAL_RCCEx_PeriphCLKConfig+0x490>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f82:	4a1b      	ldr	r2, [pc, #108]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003f84:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003f86:	f023 0303 	bic.w	r3, r3, #3
 8003f8a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003f96:	d12d      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x498>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	f013 0f01 	tst.w	r3, #1
 8003f9e:	f000 80a5 	beq.w	80040ec <HAL_RCCEx_PeriphCLKConfig+0x590>
    switch (PeriphClkInit->Usart16ClockSelection)
 8003fa2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003fa4:	2b28      	cmp	r3, #40	; 0x28
 8003fa6:	f200 809f 	bhi.w	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
 8003faa:	e8df f003 	tbb	[pc, r3]
 8003fae:	9d8d      	.short	0x9d8d
 8003fb0:	9d9d9d9d 	.word	0x9d9d9d9d
 8003fb4:	9d879d9d 	.word	0x9d879d9d
 8003fb8:	9d9d9d9d 	.word	0x9d9d9d9d
 8003fbc:	9d969d9d 	.word	0x9d969d9d
 8003fc0:	9d9d9d9d 	.word	0x9d9d9d9d
 8003fc4:	9d8d9d9d 	.word	0x9d8d9d9d
 8003fc8:	9d9d9d9d 	.word	0x9d9d9d9d
 8003fcc:	9d8d9d9d 	.word	0x9d8d9d9d
 8003fd0:	9d9d9d9d 	.word	0x9d9d9d9d
 8003fd4:	9d9d      	.short	0x9d9d
 8003fd6:	8d          	.byte	0x8d
 8003fd7:	00          	.byte	0x00
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fd8:	2102      	movs	r1, #2
 8003fda:	f104 0008 	add.w	r0, r4, #8
 8003fde:	f7ff fcb1 	bl	8003944 <RCCEx_PLL2_Config>
 8003fe2:	4605      	mov	r5, r0
        break;
 8003fe4:	e7cc      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch (PeriphClkInit->FmcClockSelection)
 8003fe6:	2601      	movs	r6, #1
 8003fe8:	4635      	mov	r5, r6
 8003fea:	e7d1      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8003fec:	462e      	mov	r6, r5
 8003fee:	e7cf      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8003ff0:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ff4:	4a91      	ldr	r2, [pc, #580]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x6e0>)
 8003ff6:	6813      	ldr	r3, [r2, #0]
 8003ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ffc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003ffe:	f7fd fc09 	bl	8001814 <HAL_GetTick>
 8004002:	4607      	mov	r7, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004004:	4b8d      	ldr	r3, [pc, #564]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x6e0>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f413 7f80 	tst.w	r3, #256	; 0x100
 800400c:	d105      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x4be>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400e:	f7fd fc01 	bl	8001814 <HAL_GetTick>
 8004012:	1bc0      	subs	r0, r0, r7
 8004014:	2864      	cmp	r0, #100	; 0x64
 8004016:	d9f5      	bls.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        ret = HAL_TIMEOUT;
 8004018:	2503      	movs	r5, #3
    if (ret == HAL_OK)
 800401a:	2d00      	cmp	r5, #0
 800401c:	d14a      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x558>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800401e:	4b88      	ldr	r3, [pc, #544]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8004026:	4053      	eors	r3, r2
 8004028:	f413 7f40 	tst.w	r3, #768	; 0x300
 800402c:	d00c      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800402e:	4b84      	ldr	r3, [pc, #528]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8004030:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004032:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004036:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004038:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800403c:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800403e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004040:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004044:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8004046:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004048:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800404c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004050:	d015      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x522>
      if (ret == HAL_OK)
 8004052:	bb8d      	cbnz	r5, 80040b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004054:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8004058:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800405c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004060:	d01e      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8004062:	4a77      	ldr	r2, [pc, #476]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8004064:	6913      	ldr	r3, [r2, #16]
 8004066:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800406a:	6113      	str	r3, [r2, #16]
 800406c:	4974      	ldr	r1, [pc, #464]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 800406e:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8004070:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8004074:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004078:	4313      	orrs	r3, r2
 800407a:	670b      	str	r3, [r1, #112]	; 0x70
 800407c:	e78c      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        tickstart = HAL_GetTick();
 800407e:	f7fd fbc9 	bl	8001814 <HAL_GetTick>
 8004082:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004084:	4b6e      	ldr	r3, [pc, #440]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8004086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004088:	f013 0f02 	tst.w	r3, #2
 800408c:	d1e1      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408e:	f7fd fbc1 	bl	8001814 <HAL_GetTick>
 8004092:	1bc0      	subs	r0, r0, r7
 8004094:	f241 3388 	movw	r3, #5000	; 0x1388
 8004098:	4298      	cmp	r0, r3
 800409a:	d9f3      	bls.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x528>
            ret = HAL_TIMEOUT;
 800409c:	2503      	movs	r5, #3
 800409e:	e7d8      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040a0:	4867      	ldr	r0, [pc, #412]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80040a2:	6902      	ldr	r2, [r0, #16]
 80040a4:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80040a8:	4966      	ldr	r1, [pc, #408]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80040aa:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 80040ae:	4313      	orrs	r3, r2
 80040b0:	6103      	str	r3, [r0, #16]
 80040b2:	e7db      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x510>
      status = ret;
 80040b4:	462e      	mov	r6, r5
 80040b6:	e76f      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        status = ret;
 80040b8:	462e      	mov	r6, r5
 80040ba:	e76d      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040bc:	2101      	movs	r1, #1
 80040be:	f104 0008 	add.w	r0, r4, #8
 80040c2:	f7ff fc3f 	bl	8003944 <RCCEx_PLL2_Config>
 80040c6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80040c8:	b9e5      	cbnz	r5, 8004104 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80040ca:	4a5d      	ldr	r2, [pc, #372]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80040cc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80040ce:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80040d2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80040d4:	430b      	orrs	r3, r1
 80040d6:	6553      	str	r3, [r2, #84]	; 0x54
 80040d8:	e008      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x590>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040da:	2101      	movs	r1, #1
 80040dc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80040e0:	f7ff fcb6 	bl	8003a50 <RCCEx_PLL3_Config>
 80040e4:	4605      	mov	r5, r0
        break;
 80040e6:	e7ef      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch (PeriphClkInit->Usart16ClockSelection)
 80040e8:	2601      	movs	r6, #1
 80040ea:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	f013 0f02 	tst.w	r3, #2
 80040f2:	d017      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80040f4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80040f6:	2b05      	cmp	r3, #5
 80040f8:	d828      	bhi.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 80040fa:	e8df f003 	tbb	[pc, r3]
 80040fe:	050b      	.short	0x050b
 8004100:	0b0b0b20 	.word	0x0b0b0b20
 8004104:	462e      	mov	r6, r5
 8004106:	e7f1      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x590>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004108:	2101      	movs	r1, #1
 800410a:	f104 0008 	add.w	r0, r4, #8
 800410e:	f7ff fc19 	bl	8003944 <RCCEx_PLL2_Config>
 8004112:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004114:	b9ed      	cbnz	r5, 8004152 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004116:	4a4a      	ldr	r2, [pc, #296]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8004118:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800411a:	f023 0307 	bic.w	r3, r3, #7
 800411e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004120:	430b      	orrs	r3, r1
 8004122:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	f013 0f04 	tst.w	r3, #4
 800412a:	d023      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x618>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800412c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004130:	2b05      	cmp	r3, #5
 8004132:	d845      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004134:	e8df f003 	tbb	[pc, r3]
 8004138:	153d0f15 	.word	0x153d0f15
 800413c:	1515      	.short	0x1515
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800413e:	2101      	movs	r1, #1
 8004140:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004144:	f7ff fc84 	bl	8003a50 <RCCEx_PLL3_Config>
 8004148:	4605      	mov	r5, r0
        break;
 800414a:	e7e3      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800414c:	2601      	movs	r6, #1
 800414e:	4635      	mov	r5, r6
 8004150:	e7e8      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004152:	462e      	mov	r6, r5
 8004154:	e7e6      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004156:	2101      	movs	r1, #1
 8004158:	f104 0008 	add.w	r0, r4, #8
 800415c:	f7ff fbf2 	bl	8003944 <RCCEx_PLL2_Config>
 8004160:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004162:	bb85      	cbnz	r5, 80041c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004164:	4a36      	ldr	r2, [pc, #216]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8004166:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004168:	f023 0307 	bic.w	r3, r3, #7
 800416c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8004170:	430b      	orrs	r3, r1
 8004172:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	f013 0f20 	tst.w	r3, #32
 800417a:	d034      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800417c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004184:	d04e      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 8004186:	d823      	bhi.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x674>
 8004188:	b143      	cbz	r3, 800419c <HAL_RCCEx_PeriphCLKConfig+0x640>
 800418a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800418e:	d11c      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004190:	2100      	movs	r1, #0
 8004192:	f104 0008 	add.w	r0, r4, #8
 8004196:	f7ff fbd5 	bl	8003944 <RCCEx_PLL2_Config>
 800419a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800419c:	2d00      	cmp	r5, #0
 800419e:	d148      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041a0:	4a27      	ldr	r2, [pc, #156]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80041a2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80041a4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80041a8:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80041ac:	430b      	orrs	r3, r1
 80041ae:	6553      	str	r3, [r2, #84]	; 0x54
 80041b0:	e019      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041b2:	2101      	movs	r1, #1
 80041b4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80041b8:	f7ff fc4a 	bl	8003a50 <RCCEx_PLL3_Config>
 80041bc:	4605      	mov	r5, r0
        break;
 80041be:	e7d0      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x606>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80041c0:	2601      	movs	r6, #1
 80041c2:	4635      	mov	r5, r6
 80041c4:	e7d6      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80041c6:	462e      	mov	r6, r5
 80041c8:	e7d4      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x618>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80041ca:	2601      	movs	r6, #1
 80041cc:	4635      	mov	r5, r6
 80041ce:	e00a      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
 80041d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d4:	d0e2      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x640>
 80041d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041da:	d0df      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x640>
 80041dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041e0:	d0dc      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x640>
 80041e2:	2601      	movs	r6, #1
 80041e4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80041ec:	d037      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80041ee:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80041f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f6:	d053      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x744>
 80041f8:	d826      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 80041fa:	b143      	cbz	r3, 800420e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80041fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004200:	d119      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004202:	2100      	movs	r1, #0
 8004204:	f104 0008 	add.w	r0, r4, #8
 8004208:	f7ff fb9c 	bl	8003944 <RCCEx_PLL2_Config>
 800420c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800420e:	2d00      	cmp	r5, #0
 8004210:	d14d      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x752>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004212:	4a0b      	ldr	r2, [pc, #44]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8004214:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004216:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800421a:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800421e:	430b      	orrs	r3, r1
 8004220:	6593      	str	r3, [r2, #88]	; 0x58
 8004222:	e01c      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x702>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004224:	2102      	movs	r1, #2
 8004226:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800422a:	f7ff fc11 	bl	8003a50 <RCCEx_PLL3_Config>
 800422e:	4605      	mov	r5, r0
        break;
 8004230:	e7b4      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x640>
 8004232:	462e      	mov	r6, r5
 8004234:	e7d7      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004236:	2601      	movs	r6, #1
 8004238:	4635      	mov	r5, r6
 800423a:	e010      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x702>
 800423c:	58024800 	.word	0x58024800
 8004240:	58024400 	.word	0x58024400
 8004244:	00ffffcf 	.word	0x00ffffcf
 8004248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424c:	d0df      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800424e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004252:	d0dc      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8004254:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004258:	d0d9      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800425a:	2601      	movs	r6, #1
 800425c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800425e:	6823      	ldr	r3, [r4, #0]
 8004260:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004264:	d033      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x772>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004266:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800426a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800426e:	f000 80a3 	beq.w	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 8004272:	d821      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8004274:	b143      	cbz	r3, 8004288 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8004276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427a:	d11a      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800427c:	2100      	movs	r1, #0
 800427e:	f104 0008 	add.w	r0, r4, #8
 8004282:	f7ff fb5f 	bl	8003944 <RCCEx_PLL2_Config>
 8004286:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004288:	2d00      	cmp	r5, #0
 800428a:	f040 809c 	bne.w	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800428e:	4a81      	ldr	r2, [pc, #516]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8004290:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004292:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004296:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800429a:	430b      	orrs	r3, r1
 800429c:	6593      	str	r3, [r2, #88]	; 0x58
 800429e:	e016      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x772>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042a0:	2102      	movs	r1, #2
 80042a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80042a6:	f7ff fbd3 	bl	8003a50 <RCCEx_PLL3_Config>
 80042aa:	4605      	mov	r5, r0
        break;
 80042ac:	e7af      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80042ae:	462e      	mov	r6, r5
 80042b0:	e7d5      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch (PeriphClkInit->Lptim345ClockSelection)
 80042b2:	2601      	movs	r6, #1
 80042b4:	4635      	mov	r5, r6
 80042b6:	e00a      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x772>
 80042b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042bc:	d0e4      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80042be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042c2:	d0e1      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80042c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042c8:	d0de      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80042ca:	2601      	movs	r6, #1
 80042cc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	f013 0f08 	tst.w	r3, #8
 80042d4:	d00c      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x794>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80042d6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80042da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042de:	d074      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x86e>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80042e0:	4a6c      	ldr	r2, [pc, #432]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 80042e2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80042e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80042e8:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80042ec:	430b      	orrs	r3, r1
 80042ee:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	f013 0f10 	tst.w	r3, #16
 80042f6:	d00c      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80042f8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80042fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004300:	d06c      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x880>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004302:	4a64      	ldr	r2, [pc, #400]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8004304:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430a:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800430e:	430b      	orrs	r3, r1
 8004310:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004318:	d00b      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
    switch (PeriphClkInit->AdcClockSelection)
 800431a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800431e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004322:	d074      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8004324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004328:	d067      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d05f      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x892>
 800432e:	2601      	movs	r6, #1
 8004330:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004338:	d00c      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
    switch (PeriphClkInit->UsbClockSelection)
 800433a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800433e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004342:	d07c      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004344:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004348:	d06f      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 800434a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800434e:	d067      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8004350:	2601      	movs	r6, #1
 8004352:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800435a:	d008      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x812>
    switch (PeriphClkInit->SdmmcClockSelection)
 800435c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800435e:	2b00      	cmp	r3, #0
 8004360:	d076      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004366:	f000 8081 	beq.w	800446c <HAL_RCCEx_PeriphCLKConfig+0x910>
 800436a:	2601      	movs	r6, #1
 800436c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004374:	f040 8083 	bne.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x922>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800437e:	f000 808e 	beq.w	800449e <HAL_RCCEx_PeriphCLKConfig+0x942>
    switch (PeriphClkInit->RngClockSelection)
 8004382:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800438a:	f000 80ec 	beq.w	8004566 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800438e:	f240 8083 	bls.w	8004498 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 8004392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004396:	d003      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8004398:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800439c:	f040 80e1 	bne.w	8004562 <HAL_RCCEx_PeriphCLKConfig+0xa06>
    if (ret == HAL_OK)
 80043a0:	2d00      	cmp	r5, #0
 80043a2:	f040 80e6 	bne.w	8004572 <HAL_RCCEx_PeriphCLKConfig+0xa16>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043a6:	4a3b      	ldr	r2, [pc, #236]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 80043a8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80043aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ae:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80043b2:	430b      	orrs	r3, r1
 80043b4:	6553      	str	r3, [r2, #84]	; 0x54
 80043b6:	e072      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x942>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043b8:	2102      	movs	r1, #2
 80043ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80043be:	f7ff fb47 	bl	8003a50 <RCCEx_PLL3_Config>
 80043c2:	4605      	mov	r5, r0
        break;
 80043c4:	e760      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80043c6:	462e      	mov	r6, r5
 80043c8:	e781      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x772>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043ca:	2102      	movs	r1, #2
 80043cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80043d0:	f7ff fb3e 	bl	8003a50 <RCCEx_PLL3_Config>
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d083      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x784>
        status = HAL_ERROR;
 80043d8:	2601      	movs	r6, #1
 80043da:	e781      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x784>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043dc:	2102      	movs	r1, #2
 80043de:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80043e2:	f7ff fb35 	bl	8003a50 <RCCEx_PLL3_Config>
 80043e6:	2800      	cmp	r0, #0
 80043e8:	d08b      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
        status = HAL_ERROR;
 80043ea:	2601      	movs	r6, #1
 80043ec:	e789      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043ee:	2100      	movs	r1, #0
 80043f0:	f104 0008 	add.w	r0, r4, #8
 80043f4:	f7ff faa6 	bl	8003944 <RCCEx_PLL2_Config>
 80043f8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80043fa:	b97d      	cbnz	r5, 800441c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043fc:	4a25      	ldr	r2, [pc, #148]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 80043fe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004400:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004404:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8004408:	430b      	orrs	r3, r1
 800440a:	6593      	str	r3, [r2, #88]	; 0x58
 800440c:	e791      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800440e:	2102      	movs	r1, #2
 8004410:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004414:	f7ff fb1c 	bl	8003a50 <RCCEx_PLL3_Config>
 8004418:	4605      	mov	r5, r0
        break;
 800441a:	e7ee      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800441c:	462e      	mov	r6, r5
 800441e:	e788      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004420:	4a1c      	ldr	r2, [pc, #112]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8004422:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004428:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800442a:	b97d      	cbnz	r5, 800444c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800442c:	4a19      	ldr	r2, [pc, #100]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 800442e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004430:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004434:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8004438:	430b      	orrs	r3, r1
 800443a:	6553      	str	r3, [r2, #84]	; 0x54
 800443c:	e78a      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800443e:	2101      	movs	r1, #1
 8004440:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004444:	f7ff fb04 	bl	8003a50 <RCCEx_PLL3_Config>
 8004448:	4605      	mov	r5, r0
        break;
 800444a:	e7ee      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 800444c:	462e      	mov	r6, r5
 800444e:	e781      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004450:	4a10      	ldr	r2, [pc, #64]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8004452:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004458:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800445a:	b975      	cbnz	r5, 800447a <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800445c:	4a0d      	ldr	r2, [pc, #52]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 800445e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004464:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004466:	430b      	orrs	r3, r1
 8004468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800446a:	e780      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x812>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800446c:	2102      	movs	r1, #2
 800446e:	f104 0008 	add.w	r0, r4, #8
 8004472:	f7ff fa67 	bl	8003944 <RCCEx_PLL2_Config>
 8004476:	4605      	mov	r5, r0
        break;
 8004478:	e7ef      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800447a:	462e      	mov	r6, r5
 800447c:	e777      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x812>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800447e:	2102      	movs	r1, #2
 8004480:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004484:	f7ff fae4 	bl	8003a50 <RCCEx_PLL3_Config>
 8004488:	2800      	cmp	r0, #0
 800448a:	f43f af75 	beq.w	8004378 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      status = HAL_ERROR;
 800448e:	2601      	movs	r6, #1
 8004490:	e772      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 8004492:	bf00      	nop
 8004494:	58024400 	.word	0x58024400
    switch (PeriphClkInit->RngClockSelection)
 8004498:	2b00      	cmp	r3, #0
 800449a:	d081      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800449c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80044a4:	d006      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044a6:	4a4f      	ldr	r2, [pc, #316]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80044a8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80044aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044ae:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80044b0:	430b      	orrs	r3, r1
 80044b2:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80044ba:	d007      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x970>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80044bc:	4a49      	ldr	r2, [pc, #292]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80044be:	6913      	ldr	r3, [r2, #16]
 80044c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044c4:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 80044c8:	430b      	orrs	r3, r1
 80044ca:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80044d2:	d006      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x986>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044d4:	4a43      	ldr	r2, [pc, #268]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80044d6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80044d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044dc:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80044de:	430b      	orrs	r3, r1
 80044e0:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80044e8:	d009      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x9a2>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044ea:	4b3e      	ldr	r3, [pc, #248]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80044ec:	691a      	ldr	r2, [r3, #16]
 80044ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044f2:	611a      	str	r2, [r3, #16]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 80044fa:	430a      	orrs	r2, r1
 80044fc:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	da06      	bge.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004504:	4a37      	ldr	r2, [pc, #220]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004506:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004508:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800450c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800450e:	430b      	orrs	r3, r1
 8004510:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004518:	d007      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x9ce>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800451a:	4a32      	ldr	r2, [pc, #200]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800451c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800451e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004522:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004526:	430b      	orrs	r3, r1
 8004528:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800452a:	6863      	ldr	r3, [r4, #4]
 800452c:	f013 0f01 	tst.w	r3, #1
 8004530:	d121      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004532:	6863      	ldr	r3, [r4, #4]
 8004534:	f013 0f02 	tst.w	r3, #2
 8004538:	d126      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800453a:	6863      	ldr	r3, [r4, #4]
 800453c:	f013 0f04 	tst.w	r3, #4
 8004540:	d12b      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004542:	6863      	ldr	r3, [r4, #4]
 8004544:	f013 0f08 	tst.w	r3, #8
 8004548:	d130      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xa50>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800454a:	6863      	ldr	r3, [r4, #4]
 800454c:	f013 0f10 	tst.w	r3, #16
 8004550:	d135      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xa62>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004552:	6863      	ldr	r3, [r4, #4]
 8004554:	f013 0f20 	tst.w	r3, #32
 8004558:	d13a      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  if (status == HAL_OK)
 800455a:	b106      	cbz	r6, 800455e <HAL_RCCEx_PeriphCLKConfig+0xa02>
  return HAL_ERROR;
 800455c:	2601      	movs	r6, #1
}
 800455e:	4630      	mov	r0, r6
 8004560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (PeriphClkInit->RngClockSelection)
 8004562:	2601      	movs	r6, #1
 8004564:	e79b      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x942>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004566:	4a1f      	ldr	r2, [pc, #124]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004568:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800456a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800456e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8004570:	e716      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8004572:	462e      	mov	r6, r5
 8004574:	e793      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x942>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004576:	2100      	movs	r1, #0
 8004578:	f104 0008 	add.w	r0, r4, #8
 800457c:	f7ff f9e2 	bl	8003944 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8004580:	2800      	cmp	r0, #0
 8004582:	d0d6      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
      status = ret;
 8004584:	4606      	mov	r6, r0
 8004586:	e7d4      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004588:	2101      	movs	r1, #1
 800458a:	f104 0008 	add.w	r0, r4, #8
 800458e:	f7ff f9d9 	bl	8003944 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8004592:	2800      	cmp	r0, #0
 8004594:	d0d1      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x9de>
      status = ret;
 8004596:	4606      	mov	r6, r0
 8004598:	e7cf      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x9de>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800459a:	2102      	movs	r1, #2
 800459c:	f104 0008 	add.w	r0, r4, #8
 80045a0:	f7ff f9d0 	bl	8003944 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 80045a4:	2800      	cmp	r0, #0
 80045a6:	d0cc      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
      status = ret;
 80045a8:	4606      	mov	r6, r0
 80045aa:	e7ca      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045ac:	2100      	movs	r1, #0
 80045ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80045b2:	f7ff fa4d 	bl	8003a50 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d0c7      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
      status = ret;
 80045ba:	4606      	mov	r6, r0
 80045bc:	e7c5      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045be:	2101      	movs	r1, #1
 80045c0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80045c4:	f7ff fa44 	bl	8003a50 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d0c2      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
      status = ret;
 80045cc:	4606      	mov	r6, r0
 80045ce:	e7c0      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045d0:	2102      	movs	r1, #2
 80045d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80045d6:	f7ff fa3b 	bl	8003a50 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80045da:	2800      	cmp	r0, #0
 80045dc:	d0bd      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x9fe>
      status = ret;
 80045de:	4606      	mov	r6, r0
 80045e0:	e7bb      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 80045e2:	bf00      	nop
 80045e4:	58024400 	.word	0x58024400

080045e8 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80045e8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80045ea:	f7ff f977 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 80045ee:	4b05      	ldr	r3, [pc, #20]	; (8004604 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80045f6:	4a04      	ldr	r2, [pc, #16]	; (8004608 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80045f8:	5cd3      	ldrb	r3, [r2, r3]
 80045fa:	f003 031f 	and.w	r3, r3, #31
}
 80045fe:	40d8      	lsrs	r0, r3
 8004600:	bd08      	pop	{r3, pc}
 8004602:	bf00      	nop
 8004604:	58024400 	.word	0x58024400
 8004608:	08008c68 	.word	0x08008c68

0800460c <HAL_RCCEx_GetPLL2ClockFreq>:
{
 800460c:	b510      	push	{r4, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800460e:	4a77      	ldr	r2, [pc, #476]	; (80047ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8004610:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004612:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8004614:	f3c4 3e05 	ubfx	lr, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004618:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800461a:	f3c3 1c00 	ubfx	ip, r3, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800461e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8004620:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8004624:	fb0c f303 	mul.w	r3, ip, r3
  if (pll2m != 0U)
 8004628:	f414 3f7c 	tst.w	r4, #258048	; 0x3f000
 800462c:	f000 80d8 	beq.w	80047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
 8004630:	f001 0103 	and.w	r1, r1, #3
 8004634:	ee07 3a90 	vmov	s15, r3
 8004638:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800463c:	2901      	cmp	r1, #1
 800463e:	d065      	beq.n	800470c <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8004640:	2902      	cmp	r1, #2
 8004642:	f000 80b0 	beq.w	80047a6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 8004646:	b1e1      	cbz	r1, 8004682 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004648:	ee07 ea10 	vmov	s14, lr
 800464c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004650:	ed9f 6a67 	vldr	s12, [pc, #412]	; 80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8004654:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004658:	4b64      	ldr	r3, [pc, #400]	; (80047ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004660:	ee07 3a10 	vmov	s14, r3
 8004664:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004668:	ed9f 6a62 	vldr	s12, [pc, #392]	; 80047f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800466c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004674:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004678:	ee77 7a87 	vadd.f32	s15, s15, s14
 800467c:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
 8004680:	e060      	b.n	8004744 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004682:	6813      	ldr	r3, [r2, #0]
 8004684:	f013 0f20 	tst.w	r3, #32
 8004688:	d023      	beq.n	80046d2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800468a:	4611      	mov	r1, r2
 800468c:	6812      	ldr	r2, [r2, #0]
 800468e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004692:	4b59      	ldr	r3, [pc, #356]	; (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>)
 8004694:	40d3      	lsrs	r3, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004696:	ee07 3a10 	vmov	s14, r3
 800469a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800469e:	ee06 ea90 	vmov	s13, lr
 80046a2:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80046a6:	eec7 6a06 	vdiv.f32	s13, s14, s12
 80046aa:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80046ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b0:	ee07 3a10 	vmov	s14, r3
 80046b4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80046b8:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 80047f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80046bc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80046c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80046d0:	e038      	b.n	8004744 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046d2:	ee07 ea10 	vmov	s14, lr
 80046d6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80046da:	ed9f 6a48 	vldr	s12, [pc, #288]	; 80047fc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 80046de:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80046e2:	4b42      	ldr	r3, [pc, #264]	; (80047ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ea:	ee07 3a10 	vmov	s14, r3
 80046ee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80046f2:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80047f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80046f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80046fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004702:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004706:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800470a:	e01b      	b.n	8004744 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800470c:	ee07 ea10 	vmov	s14, lr
 8004710:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004714:	ed9f 6a36 	vldr	s12, [pc, #216]	; 80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8004718:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800471c:	4b33      	ldr	r3, [pc, #204]	; (80047ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004724:	ee07 3a10 	vmov	s14, r3
 8004728:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800472c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80047f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8004730:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004738:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800473c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004740:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004744:	4a29      	ldr	r2, [pc, #164]	; (80047ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8004746:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004748:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800474c:	ee07 3a10 	vmov	s14, r3
 8004750:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004754:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004758:	ee37 7a06 	vadd.f32	s14, s14, s12
 800475c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004764:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004768:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800476a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800476e:	ee07 3a10 	vmov	s14, r3
 8004772:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004776:	ee37 7a06 	vadd.f32	s14, s14, s12
 800477a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800477e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004782:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004786:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004788:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800478c:	ee07 3a90 	vmov	s15, r3
 8004790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004794:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800479c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80047a0:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80047a4:	bd10      	pop	{r4, pc}
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047a6:	ee07 ea10 	vmov	s14, lr
 80047aa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80047ae:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 80047b2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80047b6:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 80047b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047be:	ee07 3a10 	vmov	s14, r3
 80047c2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80047c6:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80047f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80047ca:	ee67 7a86 	vmul.f32	s15, s15, s12
 80047ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047da:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
 80047de:	e7b1      	b.n	8004744 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80047e4:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047e6:	6083      	str	r3, [r0, #8]
}
 80047e8:	e7dc      	b.n	80047a4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>
 80047ea:	bf00      	nop
 80047ec:	58024400 	.word	0x58024400
 80047f0:	4a742400 	.word	0x4a742400
 80047f4:	39000000 	.word	0x39000000
 80047f8:	03d09000 	.word	0x03d09000
 80047fc:	4c742400 	.word	0x4c742400
 8004800:	4b742400 	.word	0x4b742400

08004804 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8004804:	b510      	push	{r4, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004806:	4a77      	ldr	r2, [pc, #476]	; (80049e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8004808:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800480a:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800480c:	f3c4 5e05 	ubfx	lr, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004810:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004812:	f3c3 2c00 	ubfx	ip, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004816:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004818:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800481c:	fb0c f303 	mul.w	r3, ip, r3
  if (pll3m != 0U)
 8004820:	f014 7f7c 	tst.w	r4, #66060288	; 0x3f00000
 8004824:	f000 80d8 	beq.w	80049d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
 8004828:	f001 0103 	and.w	r1, r1, #3
 800482c:	ee07 3a90 	vmov	s15, r3
 8004830:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8004834:	2901      	cmp	r1, #1
 8004836:	d065      	beq.n	8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8004838:	2902      	cmp	r1, #2
 800483a:	f000 80b0 	beq.w	800499e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 800483e:	b1e1      	cbz	r1, 800487a <HAL_RCCEx_GetPLL3ClockFreq+0x76>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004840:	ee07 ea10 	vmov	s14, lr
 8004844:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004848:	ed9f 6a67 	vldr	s12, [pc, #412]	; 80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800484c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004850:	4b64      	ldr	r3, [pc, #400]	; (80049e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004858:	ee07 3a10 	vmov	s14, r3
 800485c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004860:	ed9f 6a62 	vldr	s12, [pc, #392]	; 80049ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8004864:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800486c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004870:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004874:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
 8004878:	e060      	b.n	800493c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800487a:	6813      	ldr	r3, [r2, #0]
 800487c:	f013 0f20 	tst.w	r3, #32
 8004880:	d023      	beq.n	80048ca <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004882:	4611      	mov	r1, r2
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800488a:	4b59      	ldr	r3, [pc, #356]	; (80049f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>)
 800488c:	40d3      	lsrs	r3, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800488e:	ee07 3a10 	vmov	s14, r3
 8004892:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004896:	ee06 ea90 	vmov	s13, lr
 800489a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800489e:	eec7 6a06 	vdiv.f32	s13, s14, s12
 80048a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a8:	ee07 3a10 	vmov	s14, r3
 80048ac:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80048b0:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 80049ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80048b4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80048b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80048c8:	e038      	b.n	800493c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048ca:	ee07 ea10 	vmov	s14, lr
 80048ce:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80048d2:	ed9f 6a48 	vldr	s12, [pc, #288]	; 80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 80048d6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80048da:	4b42      	ldr	r3, [pc, #264]	; (80049e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e2:	ee07 3a10 	vmov	s14, r3
 80048e6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80048ea:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80049ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80048ee:	ee67 7a86 	vmul.f32	s15, s15, s12
 80048f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004902:	e01b      	b.n	800493c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004904:	ee07 ea10 	vmov	s14, lr
 8004908:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800490c:	ed9f 6a36 	vldr	s12, [pc, #216]	; 80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8004910:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004914:	4b33      	ldr	r3, [pc, #204]	; (80049e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800491c:	ee07 3a10 	vmov	s14, r3
 8004920:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004924:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80049ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8004928:	ee67 7a86 	vmul.f32	s15, s15, s12
 800492c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004930:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004934:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004938:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800493c:	4a29      	ldr	r2, [pc, #164]	; (80049e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800493e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004940:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004944:	ee07 3a10 	vmov	s14, r3
 8004948:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800494c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004950:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800495c:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004960:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004962:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004966:	ee07 3a10 	vmov	s14, r3
 800496a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800496e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800497a:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800497e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004980:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004984:	ee07 3a90 	vmov	s15, r3
 8004988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004990:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004994:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004998:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800499c:	bd10      	pop	{r4, pc}
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800499e:	ee07 ea10 	vmov	s14, lr
 80049a2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80049a6:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80049f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 80049aa:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80049ae:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b6:	ee07 3a10 	vmov	s14, r3
 80049ba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80049be:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80049ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80049c2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80049c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
 80049d6:	e7b1      	b.n	800493c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80049dc:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80049de:	6083      	str	r3, [r0, #8]
}
 80049e0:	e7dc      	b.n	800499c <HAL_RCCEx_GetPLL3ClockFreq+0x198>
 80049e2:	bf00      	nop
 80049e4:	58024400 	.word	0x58024400
 80049e8:	4a742400 	.word	0x4a742400
 80049ec:	39000000 	.word	0x39000000
 80049f0:	03d09000 	.word	0x03d09000
 80049f4:	4c742400 	.word	0x4c742400
 80049f8:	4b742400 	.word	0x4b742400

080049fc <HAL_RCCEx_GetPLL1ClockFreq>:
{
 80049fc:	b510      	push	{r4, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049fe:	4a77      	ldr	r2, [pc, #476]	; (8004bdc <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8004a00:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8004a02:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8004a04:	f3c4 1e05 	ubfx	lr, r4, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004a08:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004a0a:	f003 0c01 	and.w	ip, r3, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004a0e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004a10:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8004a14:	fb0c f303 	mul.w	r3, ip, r3
  if (pll1m != 0U)
 8004a18:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8004a1c:	f000 80d8 	beq.w	8004bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
 8004a20:	f001 0103 	and.w	r1, r1, #3
 8004a24:	ee07 3a90 	vmov	s15, r3
 8004a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8004a2c:	2901      	cmp	r1, #1
 8004a2e:	d065      	beq.n	8004afc <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 8004a30:	2902      	cmp	r1, #2
 8004a32:	f000 80b0 	beq.w	8004b96 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 8004a36:	b1e1      	cbz	r1, 8004a72 <HAL_RCCEx_GetPLL1ClockFreq+0x76>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a38:	ee07 ea10 	vmov	s14, lr
 8004a3c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a40:	ed9f 6a67 	vldr	s12, [pc, #412]	; 8004be0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8004a44:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004a48:	4b64      	ldr	r3, [pc, #400]	; (8004bdc <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a50:	ee07 3a10 	vmov	s14, r3
 8004a54:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a58:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8004be4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8004a5c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
 8004a70:	e060      	b.n	8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a72:	6813      	ldr	r3, [r2, #0]
 8004a74:	f013 0f20 	tst.w	r3, #32
 8004a78:	d023      	beq.n	8004ac2 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	6812      	ldr	r2, [r2, #0]
 8004a7e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004a82:	4b59      	ldr	r3, [pc, #356]	; (8004be8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>)
 8004a84:	40d3      	lsrs	r3, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a86:	ee07 3a10 	vmov	s14, r3
 8004a8a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a8e:	ee06 ea90 	vmov	s13, lr
 8004a92:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8004a96:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8004a9a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8004a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa0:	ee07 3a10 	vmov	s14, r3
 8004aa4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004aa8:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8004be4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8004aac:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ab4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ab8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004abc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004ac0:	e038      	b.n	8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ac2:	ee07 ea10 	vmov	s14, lr
 8004ac6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004aca:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8004be0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8004ace:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004ad2:	4b42      	ldr	r3, [pc, #264]	; (8004bdc <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ada:	ee07 3a10 	vmov	s14, r3
 8004ade:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004ae2:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8004be4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8004ae6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004aee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004af2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004af6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004afa:	e01b      	b.n	8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004afc:	ee07 ea10 	vmov	s14, lr
 8004b00:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b04:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8004bec <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
 8004b08:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004b0c:	4b33      	ldr	r3, [pc, #204]	; (8004bdc <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b14:	ee07 3a10 	vmov	s14, r3
 8004b18:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b1c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8004be4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8004b20:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b30:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8004b34:	4a29      	ldr	r2, [pc, #164]	; (8004bdc <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8004b36:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004b38:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004b3c:	ee07 3a10 	vmov	s14, r3
 8004b40:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b44:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004b48:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b54:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8004b58:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004b5a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004b5e:	ee07 3a10 	vmov	s14, r3
 8004b62:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b66:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b72:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8004b76:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004b78:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004b7c:	ee07 3a90 	vmov	s15, r3
 8004b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b84:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004b88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b8c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004b90:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8004b94:	bd10      	pop	{r4, pc}
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b96:	ee07 ea10 	vmov	s14, lr
 8004b9a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b9e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 8004ba2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004ba6:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bae:	ee07 3a10 	vmov	s14, r3
 8004bb2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004bb6:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8004be4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8004bba:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bca:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
 8004bce:	e7b1      	b.n	8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004bd4:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004bd6:	6083      	str	r3, [r0, #8]
}
 8004bd8:	e7dc      	b.n	8004b94 <HAL_RCCEx_GetPLL1ClockFreq+0x198>
 8004bda:	bf00      	nop
 8004bdc:	58024400 	.word	0x58024400
 8004be0:	4c742400 	.word	0x4c742400
 8004be4:	39000000 	.word	0x39000000
 8004be8:	03d09000 	.word	0x03d09000
 8004bec:	4a742400 	.word	0x4a742400
 8004bf0:	4b742400 	.word	0x4b742400

08004bf4 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8004bf4:	b500      	push	{lr}
 8004bf6:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004bf8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	d02e      	beq.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004c00:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 8004c04:	430b      	orrs	r3, r1
 8004c06:	d07e      	beq.n	8004d06 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004c08:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	f000 80d4 	beq.w	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004c12:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8004c16:	430b      	orrs	r3, r1
 8004c18:	f000 812c 	beq.w	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004c1c:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 8004c20:	430b      	orrs	r3, r1
 8004c22:	f000 818b 	beq.w	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004c26:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	f000 81e3 	beq.w	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004c30:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8004c34:	430b      	orrs	r3, r1
 8004c36:	f000 822c 	beq.w	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004c3a:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8004c3e:	430b      	orrs	r3, r1
 8004c40:	f000 826f 	beq.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004c44:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	f000 8290 	beq.w	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004c4e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8004c52:	ea50 0301 	orrs.w	r3, r0, r1
 8004c56:	f000 82d3 	beq.w	8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
    frequency = 0;
 8004c5a:	2000      	movs	r0, #0
 8004c5c:	e301      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004c5e:	4b95      	ldr	r3, [pc, #596]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c62:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	f200 82f2 	bhi.w	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8004c6c:	e8df f003 	tbb	[pc, r3]
 8004c70:	031b1005 	.word	0x031b1005
 8004c74:	26          	.byte	0x26
 8004c75:	00          	.byte	0x00
 8004c76:	4890      	ldr	r0, [pc, #576]	; (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004c78:	e2f3      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c7a:	4b8e      	ldr	r3, [pc, #568]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004c82:	f000 82ee 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c86:	a807      	add	r0, sp, #28
 8004c88:	f7ff feb8 	bl	80049fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c8c:	9808      	ldr	r0, [sp, #32]
 8004c8e:	e2e8      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c90:	4b88      	ldr	r3, [pc, #544]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004c98:	f000 82e3 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c9c:	a804      	add	r0, sp, #16
 8004c9e:	f7ff fcb5 	bl	800460c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ca2:	9804      	ldr	r0, [sp, #16]
 8004ca4:	e2dd      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ca6:	4b83      	ldr	r3, [pc, #524]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004ca8:	6818      	ldr	r0, [r3, #0]
 8004caa:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004cae:	f000 82d8 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cb2:	a801      	add	r0, sp, #4
 8004cb4:	f7ff fda6 	bl	8004804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004cb8:	9801      	ldr	r0, [sp, #4]
 8004cba:	e2d2      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004cbc:	4a7d      	ldr	r2, [pc, #500]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004cbe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004cc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004cc4:	6812      	ldr	r2, [r2, #0]
 8004cc6:	f012 0f04 	tst.w	r2, #4
 8004cca:	d007      	beq.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8004ccc:	b933      	cbnz	r3, 8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cce:	4b79      	ldr	r3, [pc, #484]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004cd6:	4879      	ldr	r0, [pc, #484]	; (8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004cd8:	40d8      	lsrs	r0, r3
 8004cda:	e2c2      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004cdc:	4a75      	ldr	r2, [pc, #468]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004cde:	6812      	ldr	r2, [r2, #0]
 8004ce0:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004ce4:	d003      	beq.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8004ce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cea:	f000 82b3 	beq.w	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004cee:	4a71      	ldr	r2, [pc, #452]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004cf0:	6812      	ldr	r2, [r2, #0]
 8004cf2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004cf6:	f000 82af 	beq.w	8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8004cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cfe:	f000 82ad 	beq.w	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = 0;
 8004d02:	2000      	movs	r0, #0
 8004d04:	e2ad      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8004d06:	4b6b      	ldr	r3, [pc, #428]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 8004d0e:	2b80      	cmp	r3, #128	; 0x80
 8004d10:	d033      	beq.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8004d12:	d915      	bls.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8004d14:	2bc0      	cmp	r3, #192	; 0xc0
 8004d16:	f000 82a3 	beq.w	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8004d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d1e:	d11f      	bne.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d20:	4a64      	ldr	r2, [pc, #400]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004d22:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004d24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d28:	6812      	ldr	r2, [r2, #0]
 8004d2a:	f012 0f04 	tst.w	r2, #4
 8004d2e:	d02f      	beq.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8004d30:	bb73      	cbnz	r3, 8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d32:	4b60      	ldr	r3, [pc, #384]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004d3a:	4860      	ldr	r0, [pc, #384]	; (8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004d3c:	40d8      	lsrs	r0, r3
 8004d3e:	e290      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 8004d40:	b183      	cbz	r3, 8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8004d42:	2b40      	cmp	r3, #64	; 0x40
 8004d44:	d10a      	bne.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d46:	4b5b      	ldr	r3, [pc, #364]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004d48:	6818      	ldr	r0, [r3, #0]
 8004d4a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004d4e:	f000 8288 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d52:	a804      	add	r0, sp, #16
 8004d54:	f7ff fc5a 	bl	800460c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d58:	9804      	ldr	r0, [sp, #16]
 8004d5a:	e282      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	e280      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8004d60:	2000      	movs	r0, #0
 8004d62:	e27e      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d64:	4b53      	ldr	r3, [pc, #332]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004d6c:	f000 8279 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d70:	a807      	add	r0, sp, #28
 8004d72:	f7ff fe43 	bl	80049fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d76:	9808      	ldr	r0, [sp, #32]
 8004d78:	e273      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d7a:	4b4e      	ldr	r3, [pc, #312]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004d82:	f000 826e 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d86:	a801      	add	r0, sp, #4
 8004d88:	f7ff fd3c 	bl	8004804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004d8c:	9801      	ldr	r0, [sp, #4]
 8004d8e:	e268      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d90:	4a48      	ldr	r2, [pc, #288]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004d92:	6812      	ldr	r2, [r2, #0]
 8004d94:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004d98:	d003      	beq.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 8004d9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d9e:	f000 8263 	beq.w	8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004da2:	4a44      	ldr	r2, [pc, #272]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004da4:	6812      	ldr	r2, [r2, #0]
 8004da6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004daa:	f000 825f 	beq.w	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
 8004dae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004db2:	f000 825d 	beq.w	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
          frequency = 0;
 8004db6:	2000      	movs	r0, #0
 8004db8:	e253      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8004dba:	4b3e      	ldr	r3, [pc, #248]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dbe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 8004dc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dc6:	d035      	beq.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8004dc8:	d916      	bls.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 8004dca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004dce:	f000 8251 	beq.w	8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8004dd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dd6:	d120      	bne.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x226>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004dd8:	4a36      	ldr	r2, [pc, #216]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004dda:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004ddc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004de0:	6812      	ldr	r2, [r2, #0]
 8004de2:	f012 0f04 	tst.w	r2, #4
 8004de6:	d030      	beq.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8004de8:	bb7b      	cbnz	r3, 8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004dea:	4b32      	ldr	r3, [pc, #200]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004df2:	4832      	ldr	r0, [pc, #200]	; (8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004df4:	40d8      	lsrs	r0, r3
 8004df6:	e234      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 8004df8:	b18b      	cbz	r3, 8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 8004dfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dfe:	d10a      	bne.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e00:	4b2c      	ldr	r3, [pc, #176]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004e02:	6818      	ldr	r0, [r3, #0]
 8004e04:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004e08:	f000 822b 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e0c:	a804      	add	r0, sp, #16
 8004e0e:	f7ff fbfd 	bl	800460c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e12:	9804      	ldr	r0, [sp, #16]
 8004e14:	e225      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 8004e16:	2000      	movs	r0, #0
 8004e18:	e223      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	e221      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e1e:	4b25      	ldr	r3, [pc, #148]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004e26:	f000 821c 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e2a:	a807      	add	r0, sp, #28
 8004e2c:	f7ff fde6 	bl	80049fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e30:	9808      	ldr	r0, [sp, #32]
 8004e32:	e216      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e34:	4b1f      	ldr	r3, [pc, #124]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004e3c:	f000 8211 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e40:	a801      	add	r0, sp, #4
 8004e42:	f7ff fcdf 	bl	8004804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004e46:	9801      	ldr	r0, [sp, #4]
 8004e48:	e20b      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e4a:	4a1a      	ldr	r2, [pc, #104]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004e52:	d003      	beq.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8004e54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e58:	f000 820e 	beq.w	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e5c:	4a15      	ldr	r2, [pc, #84]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004e64:	f000 820a 	beq.w	800527c <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 8004e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e6c:	f000 8208 	beq.w	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0;
 8004e70:	2000      	movs	r0, #0
 8004e72:	e1f6      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8004e74:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e78:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 8004e7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e80:	d03c      	beq.n	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8004e82:	d91d      	bls.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8004e84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e88:	f000 81fc 	beq.w	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
 8004e8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e90:	d127      	bne.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e92:	4a08      	ldr	r2, [pc, #32]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004e94:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004e96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	f012 0f04 	tst.w	r2, #4
 8004ea0:	d037      	beq.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d135      	bne.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ea6:	4b03      	ldr	r3, [pc, #12]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004eae:	4803      	ldr	r0, [pc, #12]	; (8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004eb0:	40d8      	lsrs	r0, r3
 8004eb2:	e1d6      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8004eb4:	58024400 	.word	0x58024400
 8004eb8:	00bb8000 	.word	0x00bb8000
 8004ebc:	03d09000 	.word	0x03d09000
    switch (saiclocksource)
 8004ec0:	b18b      	cbz	r3, 8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8004ec2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ec6:	d10a      	bne.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ec8:	4b9a      	ldr	r3, [pc, #616]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004ed0:	f000 81c7 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ed4:	a804      	add	r0, sp, #16
 8004ed6:	f7ff fb99 	bl	800460c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004eda:	9804      	ldr	r0, [sp, #16]
 8004edc:	e1c1      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 8004ede:	2000      	movs	r0, #0
 8004ee0:	e1bf      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	e1bd      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ee6:	4b93      	ldr	r3, [pc, #588]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004ee8:	6818      	ldr	r0, [r3, #0]
 8004eea:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004eee:	f000 81b8 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ef2:	a807      	add	r0, sp, #28
 8004ef4:	f7ff fd82 	bl	80049fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ef8:	9808      	ldr	r0, [sp, #32]
 8004efa:	e1b2      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004efc:	4b8d      	ldr	r3, [pc, #564]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004efe:	6818      	ldr	r0, [r3, #0]
 8004f00:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004f04:	f000 81ad 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f08:	a801      	add	r0, sp, #4
 8004f0a:	f7ff fc7b 	bl	8004804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f0e:	9801      	ldr	r0, [sp, #4]
 8004f10:	e1a7      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f12:	4a88      	ldr	r2, [pc, #544]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004f14:	6812      	ldr	r2, [r2, #0]
 8004f16:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004f1a:	d003      	beq.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
 8004f1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f20:	f000 81b2 	beq.w	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f24:	4a83      	ldr	r2, [pc, #524]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004f2c:	f000 81ae 	beq.w	800528c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8004f30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f34:	f000 81ac 	beq.w	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          frequency = 0;
 8004f38:	2000      	movs	r0, #0
 8004f3a:	e192      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004f3c:	4b7d      	ldr	r3, [pc, #500]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f40:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 8004f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f48:	d035      	beq.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004f4a:	d916      	bls.n	8004f7a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8004f4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f50:	f000 81a0 	beq.w	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8004f54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f58:	d120      	bne.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004f5a:	4a76      	ldr	r2, [pc, #472]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004f5c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004f5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f62:	6812      	ldr	r2, [r2, #0]
 8004f64:	f012 0f04 	tst.w	r2, #4
 8004f68:	d030      	beq.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
 8004f6a:	bb7b      	cbnz	r3, 8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f6c:	4b71      	ldr	r3, [pc, #452]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004f74:	4870      	ldr	r0, [pc, #448]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 8004f76:	40d8      	lsrs	r0, r3
 8004f78:	e173      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8004f7a:	b18b      	cbz	r3, 8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8004f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f80:	d10a      	bne.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f82:	4b6c      	ldr	r3, [pc, #432]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004f8a:	f000 816a 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f8e:	a804      	add	r0, sp, #16
 8004f90:	f7ff fb3c 	bl	800460c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f94:	9804      	ldr	r0, [sp, #16]
 8004f96:	e164      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 8004f98:	2000      	movs	r0, #0
 8004f9a:	e162      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	e160      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004fa0:	4b64      	ldr	r3, [pc, #400]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004fa8:	f000 815b 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fac:	a807      	add	r0, sp, #28
 8004fae:	f7ff fd25 	bl	80049fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fb2:	9808      	ldr	r0, [sp, #32]
 8004fb4:	e155      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004fb6:	4b5f      	ldr	r3, [pc, #380]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004fb8:	6818      	ldr	r0, [r3, #0]
 8004fba:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004fbe:	f000 8150 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fc2:	a801      	add	r0, sp, #4
 8004fc4:	f7ff fc1e 	bl	8004804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004fc8:	9801      	ldr	r0, [sp, #4]
 8004fca:	e14a      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004fcc:	4a59      	ldr	r2, [pc, #356]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004fce:	6812      	ldr	r2, [r2, #0]
 8004fd0:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004fd4:	d003      	beq.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8004fd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fda:	f000 815d 	beq.w	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004fde:	4a55      	ldr	r2, [pc, #340]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004fe0:	6812      	ldr	r2, [r2, #0]
 8004fe2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004fe6:	f000 8159 	beq.w	800529c <HAL_RCCEx_GetPeriphCLKFreq+0x6a8>
 8004fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fee:	f000 8157 	beq.w	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
          frequency = 0;
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	e135      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004ff6:	4b4f      	ldr	r3, [pc, #316]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ffa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 8004ffe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005002:	d032      	beq.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005004:	d816      	bhi.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 8005006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800500a:	d023      	beq.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800500c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005010:	d10a      	bne.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005012:	4b48      	ldr	r3, [pc, #288]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800501a:	f000 8122 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800501e:	a801      	add	r0, sp, #4
 8005020:	f7ff fbf0 	bl	8004804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005024:	9802      	ldr	r0, [sp, #8]
 8005026:	e11c      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8005028:	b913      	cbnz	r3, 8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
        frequency = HAL_RCC_GetPCLK1Freq();
 800502a:	f7fe fc79 	bl	8003920 <HAL_RCC_GetPCLK1Freq>
        break;
 800502e:	e118      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8005030:	2000      	movs	r0, #0
 8005032:	e116      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005034:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005038:	d023      	beq.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800503a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800503e:	d107      	bne.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005040:	4b3c      	ldr	r3, [pc, #240]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8005048:	f000 810b 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 800504c:	483b      	ldr	r0, [pc, #236]	; (800513c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800504e:	e108      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8005050:	2000      	movs	r0, #0
 8005052:	e106      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005054:	4b37      	ldr	r3, [pc, #220]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005056:	6818      	ldr	r0, [r3, #0]
 8005058:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800505c:	f000 8101 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005060:	a804      	add	r0, sp, #16
 8005062:	f7ff fad3 	bl	800460c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005066:	9805      	ldr	r0, [sp, #20]
 8005068:	e0fb      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800506a:	4b32      	ldr	r3, [pc, #200]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	f010 0004 	ands.w	r0, r0, #4
 8005072:	f000 80f6 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800507c:	482e      	ldr	r0, [pc, #184]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 800507e:	40d8      	lsrs	r0, r3
 8005080:	e0ef      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005082:	4b2c      	ldr	r3, [pc, #176]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005084:	6818      	ldr	r0, [r3, #0]
 8005086:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800508a:	f000 80ea 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 800508e:	482c      	ldr	r0, [pc, #176]	; (8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005090:	e0e7      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005092:	4b28      	ldr	r3, [pc, #160]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005096:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 800509a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800509e:	d010      	beq.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 80050a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050a4:	d018      	beq.n	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 80050a6:	b10b      	cbz	r3, 80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80050a8:	2000      	movs	r0, #0
 80050aa:	e0da      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050ac:	4b21      	ldr	r3, [pc, #132]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80050ae:	6818      	ldr	r0, [r3, #0]
 80050b0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80050b4:	f000 80d5 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050b8:	a804      	add	r0, sp, #16
 80050ba:	f7ff faa7 	bl	800460c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80050be:	9804      	ldr	r0, [sp, #16]
 80050c0:	e0cf      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80050c2:	4b1c      	ldr	r3, [pc, #112]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80050ca:	f000 80ca 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050ce:	a801      	add	r0, sp, #4
 80050d0:	f7ff fb98 	bl	8004804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80050d4:	9803      	ldr	r0, [sp, #12]
 80050d6:	e0c4      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80050d8:	4a16      	ldr	r2, [pc, #88]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80050da:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80050dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050e0:	6812      	ldr	r2, [r2, #0]
 80050e2:	f012 0f04 	tst.w	r2, #4
 80050e6:	d007      	beq.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80050e8:	b933      	cbnz	r3, 80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050ea:	4b12      	ldr	r3, [pc, #72]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80050f2:	4811      	ldr	r0, [pc, #68]	; (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 80050f4:	40d8      	lsrs	r0, r3
 80050f6:	e0b4      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050f8:	4a0e      	ldr	r2, [pc, #56]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80050fa:	6812      	ldr	r2, [r2, #0]
 80050fc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005100:	d003      	beq.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8005102:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005106:	f000 80cd 	beq.w	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800510a:	4a0a      	ldr	r2, [pc, #40]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800510c:	6812      	ldr	r2, [r2, #0]
 800510e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005112:	f000 80c9 	beq.w	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8005116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800511a:	f000 80c7 	beq.w	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
          frequency = 0;
 800511e:	2000      	movs	r0, #0
 8005120:	e09f      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005122:	4b04      	ldr	r3, [pc, #16]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    switch (srcclk)
 8005126:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800512a:	d00b      	beq.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
 800512c:	b9ab      	cbnz	r3, 800515a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800512e:	2000      	movs	r0, #0
 8005130:	e097      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005132:	bf00      	nop
 8005134:	58024400 	.word	0x58024400
 8005138:	03d09000 	.word	0x03d09000
 800513c:	00f42400 	.word	0x00f42400
 8005140:	003d0900 	.word	0x003d0900
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005144:	4b5a      	ldr	r3, [pc, #360]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8005146:	6818      	ldr	r0, [r3, #0]
 8005148:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800514c:	f000 8089 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005150:	a807      	add	r0, sp, #28
 8005152:	f7ff fc53 	bl	80049fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005156:	9808      	ldr	r0, [sp, #32]
 8005158:	e083      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800515a:	4b55      	ldr	r3, [pc, #340]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005162:	d07e      	beq.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005164:	a804      	add	r0, sp, #16
 8005166:	f7ff fa51 	bl	800460c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800516a:	9806      	ldr	r0, [sp, #24]
 800516c:	e079      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800516e:	4b50      	ldr	r3, [pc, #320]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8005170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005172:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 8005176:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800517a:	d02f      	beq.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800517c:	d815      	bhi.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 800517e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005182:	d021      	beq.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8005184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005188:	d109      	bne.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800518a:	4b49      	ldr	r3, [pc, #292]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005192:	d066      	beq.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005194:	a801      	add	r0, sp, #4
 8005196:	f7ff fb35 	bl	8004804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800519a:	9802      	ldr	r0, [sp, #8]
 800519c:	e061      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 800519e:	b913      	cbnz	r3, 80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80051a0:	f7ff fa22 	bl	80045e8 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 80051a4:	e05d      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 80051a6:	2000      	movs	r0, #0
 80051a8:	e05b      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80051aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ae:	d020      	beq.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80051b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051b4:	d106      	bne.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80051b6:	4b3e      	ldr	r3, [pc, #248]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80051be:	d050      	beq.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 80051c0:	483c      	ldr	r0, [pc, #240]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 80051c2:	e04e      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 80051c4:	2000      	movs	r0, #0
 80051c6:	e04c      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051c8:	4b39      	ldr	r3, [pc, #228]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80051ca:	6818      	ldr	r0, [r3, #0]
 80051cc:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80051d0:	d047      	beq.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051d2:	a804      	add	r0, sp, #16
 80051d4:	f7ff fa1a 	bl	800460c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80051d8:	9805      	ldr	r0, [sp, #20]
 80051da:	e042      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80051dc:	4b34      	ldr	r3, [pc, #208]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80051de:	6818      	ldr	r0, [r3, #0]
 80051e0:	f010 0004 	ands.w	r0, r0, #4
 80051e4:	d03d      	beq.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80051ec:	4832      	ldr	r0, [pc, #200]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>)
 80051ee:	40d8      	lsrs	r0, r3
 80051f0:	e037      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80051f2:	4b2f      	ldr	r3, [pc, #188]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80051f4:	6818      	ldr	r0, [r3, #0]
 80051f6:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80051fa:	d032      	beq.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 80051fc:	482f      	ldr	r0, [pc, #188]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 80051fe:	e030      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005200:	4b2b      	ldr	r3, [pc, #172]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8005202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005204:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 8005208:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800520c:	d00c      	beq.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800520e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005212:	d013      	beq.n	800523c <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8005214:	b10b      	cbz	r3, 800521a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005216:	2000      	movs	r0, #0
  return frequency;
 8005218:	e023      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800521a:	4b25      	ldr	r3, [pc, #148]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8005222:	d01e      	beq.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8005224:	4823      	ldr	r0, [pc, #140]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8005226:	e01c      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005228:	4b21      	ldr	r3, [pc, #132]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800522a:	6818      	ldr	r0, [r3, #0]
 800522c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005230:	d017      	beq.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005232:	a807      	add	r0, sp, #28
 8005234:	f7ff fbe2 	bl	80049fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005238:	9808      	ldr	r0, [sp, #32]
 800523a:	e012      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800523c:	4b1c      	ldr	r3, [pc, #112]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800523e:	6818      	ldr	r0, [r3, #0]
 8005240:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005244:	d00d      	beq.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005246:	a804      	add	r0, sp, #16
 8005248:	f7ff f9e0 	bl	800460c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800524c:	9805      	ldr	r0, [sp, #20]
 800524e:	e008      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 8005250:	2000      	movs	r0, #0
 8005252:	e006      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8005254:	4819      	ldr	r0, [pc, #100]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8005256:	e004      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8005258:	2000      	movs	r0, #0
 800525a:	e002      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 800525c:	4815      	ldr	r0, [pc, #84]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800525e:	e000      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 8005260:	4817      	ldr	r0, [pc, #92]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
}
 8005262:	b00b      	add	sp, #44	; 0x2c
 8005264:	f85d fb04 	ldr.w	pc, [sp], #4
          frequency = CSI_VALUE;
 8005268:	4814      	ldr	r0, [pc, #80]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800526a:	e7fa      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 800526c:	2000      	movs	r0, #0
 800526e:	e7f8      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8005270:	4810      	ldr	r0, [pc, #64]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8005272:	e7f6      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 8005274:	4812      	ldr	r0, [pc, #72]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 8005276:	e7f4      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8005278:	4810      	ldr	r0, [pc, #64]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800527a:	e7f2      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 800527c:	2000      	movs	r0, #0
 800527e:	e7f0      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8005280:	480c      	ldr	r0, [pc, #48]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8005282:	e7ee      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 8005284:	480e      	ldr	r0, [pc, #56]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 8005286:	e7ec      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8005288:	480c      	ldr	r0, [pc, #48]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800528a:	e7ea      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 800528c:	2000      	movs	r0, #0
 800528e:	e7e8      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8005290:	4808      	ldr	r0, [pc, #32]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8005292:	e7e6      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8005294:	480a      	ldr	r0, [pc, #40]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 8005296:	e7e4      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8005298:	4808      	ldr	r0, [pc, #32]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800529a:	e7e2      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 800529c:	2000      	movs	r0, #0
 800529e:	e7e0      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 80052a0:	4804      	ldr	r0, [pc, #16]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 80052a2:	e7de      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 80052a4:	4805      	ldr	r0, [pc, #20]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 80052a6:	e7dc      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 80052a8:	2000      	movs	r0, #0
 80052aa:	e7da      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 80052ac:	4801      	ldr	r0, [pc, #4]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 80052ae:	e7d8      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80052b0:	58024400 	.word	0x58024400
 80052b4:	00f42400 	.word	0x00f42400
 80052b8:	03d09000 	.word	0x03d09000
 80052bc:	003d0900 	.word	0x003d0900
 80052c0:	00bb8000 	.word	0x00bb8000

080052c4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80052c4:	b570      	push	{r4, r5, r6, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	9301      	str	r3, [sp, #4]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80052ce:	6800      	ldr	r0, [r0, #0]
 80052d0:	f001 f8f8 	bl	80064c4 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 80052d4:	4605      	mov	r5, r0
 80052d6:	b110      	cbz	r0, 80052de <SD_PowerON+0x1a>
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
}
 80052d8:	4628      	mov	r0, r5
 80052da:	b002      	add	sp, #8
 80052dc:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80052de:	6820      	ldr	r0, [r4, #0]
 80052e0:	f001 fc2c 	bl	8006b3c <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80052e4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80052e8:	d007      	beq.n	80052fa <SD_PowerON+0x36>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80052ea:	2301      	movs	r3, #1
 80052ec:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80052ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d00b      	beq.n	800530c <SD_PowerON+0x48>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80052f4:	462e      	mov	r6, r5
 80052f6:	4628      	mov	r0, r5
 80052f8:	e014      	b.n	8005324 <SD_PowerON+0x60>
    hsd->SdCard.CardVersion = CARD_V1_X;
 80052fa:	2300      	movs	r3, #0
 80052fc:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80052fe:	6820      	ldr	r0, [r4, #0]
 8005300:	f001 f8e0 	bl	80064c4 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005304:	2800      	cmp	r0, #0
 8005306:	d0f2      	beq.n	80052ee <SD_PowerON+0x2a>
      return errorstate;
 8005308:	4605      	mov	r5, r0
 800530a:	e7e5      	b.n	80052d8 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800530c:	2100      	movs	r1, #0
 800530e:	6820      	ldr	r0, [r4, #0]
 8005310:	f001 fa5f 	bl	80067d2 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005314:	2800      	cmp	r0, #0
 8005316:	d0ed      	beq.n	80052f4 <SD_PowerON+0x30>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005318:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800531c:	e7dc      	b.n	80052d8 <SD_PowerON+0x14>
    count++;
 800531e:	9b01      	ldr	r3, [sp, #4]
 8005320:	3301      	adds	r3, #1
 8005322:	9301      	str	r3, [sp, #4]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005324:	9a01      	ldr	r2, [sp, #4]
 8005326:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800532a:	429a      	cmp	r2, r3
 800532c:	d813      	bhi.n	8005356 <SD_PowerON+0x92>
 800532e:	b996      	cbnz	r6, 8005356 <SD_PowerON+0x92>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005330:	2100      	movs	r1, #0
 8005332:	6820      	ldr	r0, [r4, #0]
 8005334:	f001 fa4d 	bl	80067d2 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005338:	b9d0      	cbnz	r0, 8005370 <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800533a:	4912      	ldr	r1, [pc, #72]	; (8005384 <SD_PowerON+0xc0>)
 800533c:	6820      	ldr	r0, [r4, #0]
 800533e:	f001 fb49 	bl	80069d4 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005342:	4606      	mov	r6, r0
 8005344:	b9b0      	cbnz	r0, 8005374 <SD_PowerON+0xb0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005346:	2100      	movs	r1, #0
 8005348:	6820      	ldr	r0, [r4, #0]
 800534a:	f001 f8a6 	bl	800649a <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800534e:	0fc3      	lsrs	r3, r0, #31
 8005350:	d0e5      	beq.n	800531e <SD_PowerON+0x5a>
 8005352:	461e      	mov	r6, r3
 8005354:	e7e3      	b.n	800531e <SD_PowerON+0x5a>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8005356:	9a01      	ldr	r2, [sp, #4]
 8005358:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800535c:	429a      	cmp	r2, r3
 800535e:	d80c      	bhi.n	800537a <SD_PowerON+0xb6>
  hsd->SdCard.CardType = CARD_SDSC;
 8005360:	2300      	movs	r3, #0
 8005362:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8005364:	f010 4380 	ands.w	r3, r0, #1073741824	; 0x40000000
 8005368:	d00a      	beq.n	8005380 <SD_PowerON+0xbc>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800536a:	2301      	movs	r3, #1
 800536c:	63a3      	str	r3, [r4, #56]	; 0x38
 800536e:	e7b3      	b.n	80052d8 <SD_PowerON+0x14>
      return errorstate;
 8005370:	4605      	mov	r5, r0
 8005372:	e7b1      	b.n	80052d8 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005374:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005378:	e7ae      	b.n	80052d8 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800537a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800537e:	e7ab      	b.n	80052d8 <SD_PowerON+0x14>
  return HAL_SD_ERROR_NONE;
 8005380:	461d      	mov	r5, r3
 8005382:	e7a9      	b.n	80052d8 <SD_PowerON+0x14>
 8005384:	c1100000 	.word	0xc1100000

08005388 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005388:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800538a:	6a44      	ldr	r4, [r0, #36]	; 0x24

  if (hsd->RxXferSize >= 32U)
 800538c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800538e:	2b1f      	cmp	r3, #31
 8005390:	d815      	bhi.n	80053be <SD_Read_IT+0x36>
    }

    hsd->pRxBuffPtr = tmp;
    hsd->RxXferSize -= 32U;
  }
}
 8005392:	bd70      	pop	{r4, r5, r6, pc}
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005394:	6830      	ldr	r0, [r6, #0]
 8005396:	f001 f859 	bl	800644c <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800539a:	7020      	strb	r0, [r4, #0]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800539c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80053a0:	7063      	strb	r3, [r4, #1]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80053a2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80053a6:	70a3      	strb	r3, [r4, #2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80053a8:	0e00      	lsrs	r0, r0, #24
 80053aa:	70e0      	strb	r0, [r4, #3]
      tmp++;
 80053ac:	3404      	adds	r4, #4
    for (count = 0U; count < 8U; count++)
 80053ae:	3501      	adds	r5, #1
 80053b0:	2d07      	cmp	r5, #7
 80053b2:	d9ef      	bls.n	8005394 <SD_Read_IT+0xc>
    hsd->pRxBuffPtr = tmp;
 80053b4:	6274      	str	r4, [r6, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 80053b6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80053b8:	3b20      	subs	r3, #32
 80053ba:	62b3      	str	r3, [r6, #40]	; 0x28
}
 80053bc:	e7e9      	b.n	8005392 <SD_Read_IT+0xa>
 80053be:	4606      	mov	r6, r0
    for (count = 0U; count < 8U; count++)
 80053c0:	2500      	movs	r5, #0
 80053c2:	e7f5      	b.n	80053b0 <SD_Read_IT+0x28>

080053c4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80053c4:	b570      	push	{r4, r5, r6, lr}
 80053c6:	b082      	sub	sp, #8
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 80053c8:	69c4      	ldr	r4, [r0, #28]

  if (hsd->TxXferSize >= 32U)
 80053ca:	6a03      	ldr	r3, [r0, #32]
 80053cc:	2b1f      	cmp	r3, #31
 80053ce:	d81c      	bhi.n	800540a <SD_Write_IT+0x46>
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize -= 32U;
  }
}
 80053d0:	b002      	add	sp, #8
 80053d2:	bd70      	pop	{r4, r5, r6, pc}
      data = (uint32_t)(*tmp);
 80053d4:	7823      	ldrb	r3, [r4, #0]
 80053d6:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 80053d8:	7862      	ldrb	r2, [r4, #1]
 80053da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80053de:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 80053e0:	78a2      	ldrb	r2, [r4, #2]
 80053e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053e6:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 80053e8:	78e2      	ldrb	r2, [r4, #3]
 80053ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80053ee:	9301      	str	r3, [sp, #4]
      tmp++;
 80053f0:	3404      	adds	r4, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80053f2:	a901      	add	r1, sp, #4
 80053f4:	6830      	ldr	r0, [r6, #0]
 80053f6:	f001 f82c 	bl	8006452 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80053fa:	3501      	adds	r5, #1
 80053fc:	2d07      	cmp	r5, #7
 80053fe:	d9e9      	bls.n	80053d4 <SD_Write_IT+0x10>
    hsd->pTxBuffPtr = tmp;
 8005400:	61f4      	str	r4, [r6, #28]
    hsd->TxXferSize -= 32U;
 8005402:	6a33      	ldr	r3, [r6, #32]
 8005404:	3b20      	subs	r3, #32
 8005406:	6233      	str	r3, [r6, #32]
}
 8005408:	e7e2      	b.n	80053d0 <SD_Write_IT+0xc>
 800540a:	4606      	mov	r6, r0
    for (count = 0U; count < 8U; count++)
 800540c:	2500      	movs	r5, #0
 800540e:	e7f5      	b.n	80053fc <SD_Write_IT+0x38>

08005410 <SD_SendSDStatus>:
{
 8005410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005412:	b087      	sub	sp, #28
 8005414:	4605      	mov	r5, r0
 8005416:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 8005418:	f7fc f9fc 	bl	8001814 <HAL_GetTick>
 800541c:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800541e:	2100      	movs	r1, #0
 8005420:	6828      	ldr	r0, [r5, #0]
 8005422:	f001 f83a 	bl	800649a <SDMMC_GetResponse>
 8005426:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800542a:	d164      	bne.n	80054f6 <SD_SendSDStatus+0xe6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800542c:	2140      	movs	r1, #64	; 0x40
 800542e:	6828      	ldr	r0, [r5, #0]
 8005430:	f001 f90c 	bl	800664c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005434:	4603      	mov	r3, r0
 8005436:	b110      	cbz	r0, 800543e <SD_SendSDStatus+0x2e>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005438:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800543a:	636a      	str	r2, [r5, #52]	; 0x34
    return errorstate;
 800543c:	e05d      	b.n	80054fa <SD_SendSDStatus+0xea>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800543e:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8005440:	0409      	lsls	r1, r1, #16
 8005442:	6828      	ldr	r0, [r5, #0]
 8005444:	f001 f9c5 	bl	80067d2 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005448:	4603      	mov	r3, r0
 800544a:	b110      	cbz	r0, 8005452 <SD_SendSDStatus+0x42>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800544c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800544e:	636a      	str	r2, [r5, #52]	; 0x34
    return errorstate;
 8005450:	e053      	b.n	80054fa <SD_SendSDStatus+0xea>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005456:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
 8005458:	2340      	movs	r3, #64	; 0x40
 800545a:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800545c:	2360      	movs	r3, #96	; 0x60
 800545e:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005460:	2302      	movs	r3, #2
 8005462:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005464:	2300      	movs	r3, #0
 8005466:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005468:	2301      	movs	r3, #1
 800546a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800546c:	4669      	mov	r1, sp
 800546e:	6828      	ldr	r0, [r5, #0]
 8005470:	f001 f816 	bl	80064a0 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8005474:	6828      	ldr	r0, [r5, #0]
 8005476:	f001 fa10 	bl	800689a <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 800547a:	4603      	mov	r3, r0
 800547c:	b180      	cbz	r0, 80054a0 <SD_SendSDStatus+0x90>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800547e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005480:	636a      	str	r2, [r5, #52]	; 0x34
    return errorstate;
 8005482:	e03a      	b.n	80054fa <SD_SendSDStatus+0xea>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005484:	6828      	ldr	r0, [r5, #0]
 8005486:	f000 ffe1 	bl	800644c <SDMMC_ReadFIFO>
 800548a:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 800548e:	3401      	adds	r4, #1
 8005490:	2c07      	cmp	r4, #7
 8005492:	d9f7      	bls.n	8005484 <SD_SendSDStatus+0x74>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005494:	f7fc f9be 	bl	8001814 <HAL_GetTick>
 8005498:	1bc0      	subs	r0, r0, r7
 800549a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800549e:	d02f      	beq.n	8005500 <SD_SendSDStatus+0xf0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80054a0:	682b      	ldr	r3, [r5, #0]
 80054a2:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80054a4:	f414 7495 	ands.w	r4, r4, #298	; 0x12a
 80054a8:	d104      	bne.n	80054b4 <SD_SendSDStatus+0xa4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80054aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ac:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80054b0:	d0f0      	beq.n	8005494 <SD_SendSDStatus+0x84>
 80054b2:	e7ed      	b.n	8005490 <SD_SendSDStatus+0x80>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80054b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054b6:	f012 0f08 	tst.w	r2, #8
 80054ba:	d124      	bne.n	8005506 <SD_SendSDStatus+0xf6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80054bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054be:	f012 0f02 	tst.w	r2, #2
 80054c2:	d122      	bne.n	800550a <SD_SendSDStatus+0xfa>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80054c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c6:	f013 0f20 	tst.w	r3, #32
 80054ca:	d120      	bne.n	800550e <SD_SendSDStatus+0xfe>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80054cc:	6828      	ldr	r0, [r5, #0]
 80054ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80054d0:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80054d4:	d00c      	beq.n	80054f0 <SD_SendSDStatus+0xe0>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80054d6:	f000 ffb9 	bl	800644c <SDMMC_ReadFIFO>
 80054da:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80054de:	f7fc f999 	bl	8001814 <HAL_GetTick>
 80054e2:	1bc0      	subs	r0, r0, r7
 80054e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80054e8:	d1f0      	bne.n	80054cc <SD_SendSDStatus+0xbc>
      return HAL_SD_ERROR_TIMEOUT;
 80054ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054ee:	e004      	b.n	80054fa <SD_SendSDStatus+0xea>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80054f0:	4a08      	ldr	r2, [pc, #32]	; (8005514 <SD_SendSDStatus+0x104>)
 80054f2:	6382      	str	r2, [r0, #56]	; 0x38
  return HAL_SD_ERROR_NONE;
 80054f4:	e001      	b.n	80054fa <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80054f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	b007      	add	sp, #28
 80054fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_SD_ERROR_TIMEOUT;
 8005500:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005504:	e7f9      	b.n	80054fa <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005506:	2308      	movs	r3, #8
 8005508:	e7f7      	b.n	80054fa <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800550a:	2302      	movs	r3, #2
 800550c:	e7f5      	b.n	80054fa <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_RX_OVERRUN;
 800550e:	2320      	movs	r3, #32
 8005510:	e7f3      	b.n	80054fa <SD_SendSDStatus+0xea>
 8005512:	bf00      	nop
 8005514:	18000f3a 	.word	0x18000f3a

08005518 <SD_FindSCR>:
{
 8005518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800551a:	b089      	sub	sp, #36	; 0x24
 800551c:	4604      	mov	r4, r0
 800551e:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8005520:	f7fc f978 	bl	8001814 <HAL_GetTick>
 8005524:	4605      	mov	r5, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 8005526:	2300      	movs	r3, #0
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800552c:	2108      	movs	r1, #8
 800552e:	6820      	ldr	r0, [r4, #0]
 8005530:	f001 f88c 	bl	800664c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005534:	4606      	mov	r6, r0
 8005536:	b110      	cbz	r0, 800553e <SD_FindSCR+0x26>
}
 8005538:	4630      	mov	r0, r6
 800553a:	b009      	add	sp, #36	; 0x24
 800553c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800553e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005540:	0409      	lsls	r1, r1, #16
 8005542:	6820      	ldr	r0, [r4, #0]
 8005544:	f001 f945 	bl	80067d2 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005548:	4606      	mov	r6, r0
 800554a:	2800      	cmp	r0, #0
 800554c:	d1f4      	bne.n	8005538 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800554e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005552:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8005554:	2308      	movs	r3, #8
 8005556:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005558:	2330      	movs	r3, #48	; 0x30
 800555a:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800555c:	2302      	movs	r3, #2
 800555e:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005560:	2300      	movs	r3, #0
 8005562:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005564:	2301      	movs	r3, #1
 8005566:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005568:	a902      	add	r1, sp, #8
 800556a:	6820      	ldr	r0, [r4, #0]
 800556c:	f000 ff98 	bl	80064a0 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005570:	6820      	ldr	r0, [r4, #0]
 8005572:	f001 f960 	bl	8006836 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005576:	4606      	mov	r6, r0
 8005578:	b130      	cbz	r0, 8005588 <SD_FindSCR+0x70>
 800557a:	e7dd      	b.n	8005538 <SD_FindSCR+0x20>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800557c:	f7fc f94a 	bl	8001814 <HAL_GetTick>
 8005580:	1b43      	subs	r3, r0, r5
 8005582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005586:	d046      	beq.n	8005616 <SD_FindSCR+0xfe>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8005588:	6820      	ldr	r0, [r4, #0]
 800558a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800558c:	f240 532a 	movw	r3, #1322	; 0x52a
 8005590:	421a      	tst	r2, r3
 8005592:	d10e      	bne.n	80055b2 <SD_FindSCR+0x9a>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8005594:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005596:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800559a:	d1ef      	bne.n	800557c <SD_FindSCR+0x64>
 800559c:	2e00      	cmp	r6, #0
 800559e:	d1ed      	bne.n	800557c <SD_FindSCR+0x64>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80055a0:	f000 ff54 	bl	800644c <SDMMC_ReadFIFO>
 80055a4:	9000      	str	r0, [sp, #0]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80055a6:	6820      	ldr	r0, [r4, #0]
 80055a8:	f000 ff50 	bl	800644c <SDMMC_ReadFIFO>
 80055ac:	9001      	str	r0, [sp, #4]
      index++;
 80055ae:	3601      	adds	r6, #1
 80055b0:	e7e4      	b.n	800557c <SD_FindSCR+0x64>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80055b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80055b4:	f013 0f08 	tst.w	r3, #8
 80055b8:	d124      	bne.n	8005604 <SD_FindSCR+0xec>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80055ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80055bc:	f013 0f02 	tst.w	r3, #2
 80055c0:	d123      	bne.n	800560a <SD_FindSCR+0xf2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80055c2:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80055c4:	f016 0620 	ands.w	r6, r6, #32
 80055c8:	d122      	bne.n	8005610 <SD_FindSCR+0xf8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80055ca:	4b14      	ldr	r3, [pc, #80]	; (800561c <SD_FindSCR+0x104>)
 80055cc:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80055ce:	9a01      	ldr	r2, [sp, #4]
 80055d0:	0213      	lsls	r3, r2, #8
 80055d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80055da:	0a11      	lsrs	r1, r2, #8
 80055dc:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80055e0:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80055e2:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80055e6:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80055e8:	9a00      	ldr	r2, [sp, #0]
 80055ea:	0213      	lsls	r3, r2, #8
 80055ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80055f4:	0a11      	lsrs	r1, r2, #8
 80055f6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80055fa:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80055fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005600:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8005602:	e799      	b.n	8005538 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005604:	2608      	movs	r6, #8
 8005606:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005608:	e796      	b.n	8005538 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800560a:	2602      	movs	r6, #2
 800560c:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800560e:	e793      	b.n	8005538 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005610:	2620      	movs	r6, #32
 8005612:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8005614:	e790      	b.n	8005538 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 8005616:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800561a:	e78d      	b.n	8005538 <SD_FindSCR+0x20>
 800561c:	18000f3a 	.word	0x18000f3a

08005620 <SD_WideBus_Enable>:
{
 8005620:	b510      	push	{r4, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 8005626:	2100      	movs	r1, #0
 8005628:	9100      	str	r1, [sp, #0]
 800562a:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800562c:	6800      	ldr	r0, [r0, #0]
 800562e:	f000 ff34 	bl	800649a <SDMMC_GetResponse>
 8005632:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005636:	d113      	bne.n	8005660 <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8005638:	4669      	mov	r1, sp
 800563a:	4620      	mov	r0, r4
 800563c:	f7ff ff6c 	bl	8005518 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005640:	b980      	cbnz	r0, 8005664 <SD_WideBus_Enable+0x44>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005642:	9b01      	ldr	r3, [sp, #4]
 8005644:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005648:	d00e      	beq.n	8005668 <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800564a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800564c:	0409      	lsls	r1, r1, #16
 800564e:	6820      	ldr	r0, [r4, #0]
 8005650:	f001 f8bf 	bl	80067d2 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005654:	b930      	cbnz	r0, 8005664 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005656:	2102      	movs	r1, #2
 8005658:	6820      	ldr	r0, [r4, #0]
 800565a:	f001 f8d3 	bl	8006804 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 800565e:	e001      	b.n	8005664 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005660:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8005664:	b002      	add	sp, #8
 8005666:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005668:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800566c:	e7fa      	b.n	8005664 <SD_WideBus_Enable+0x44>

0800566e <SD_WideBus_Disable>:
{
 800566e:	b510      	push	{r4, lr}
 8005670:	b082      	sub	sp, #8
 8005672:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 8005674:	2100      	movs	r1, #0
 8005676:	9100      	str	r1, [sp, #0]
 8005678:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800567a:	6800      	ldr	r0, [r0, #0]
 800567c:	f000 ff0d 	bl	800649a <SDMMC_GetResponse>
 8005680:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005684:	d113      	bne.n	80056ae <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8005686:	4669      	mov	r1, sp
 8005688:	4620      	mov	r0, r4
 800568a:	f7ff ff45 	bl	8005518 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800568e:	b980      	cbnz	r0, 80056b2 <SD_WideBus_Disable+0x44>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005690:	9b01      	ldr	r3, [sp, #4]
 8005692:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005696:	d00e      	beq.n	80056b6 <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005698:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800569a:	0409      	lsls	r1, r1, #16
 800569c:	6820      	ldr	r0, [r4, #0]
 800569e:	f001 f898 	bl	80067d2 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80056a2:	b930      	cbnz	r0, 80056b2 <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80056a4:	2100      	movs	r1, #0
 80056a6:	6820      	ldr	r0, [r4, #0]
 80056a8:	f001 f8ac 	bl	8006804 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 80056ac:	e001      	b.n	80056b2 <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80056ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 80056b2:	b002      	add	sp, #8
 80056b4:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80056b6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80056ba:	e7fa      	b.n	80056b2 <SD_WideBus_Disable+0x44>

080056bc <SD_SendStatus>:
{
 80056bc:	b570      	push	{r4, r5, r6, lr}
  if (pCardStatus == NULL)
 80056be:	b181      	cbz	r1, 80056e2 <SD_SendStatus+0x26>
 80056c0:	4604      	mov	r4, r0
 80056c2:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80056c4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80056c6:	0409      	lsls	r1, r1, #16
 80056c8:	6800      	ldr	r0, [r0, #0]
 80056ca:	f001 f8cd 	bl	8006868 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 80056ce:	4605      	mov	r5, r0
 80056d0:	b108      	cbz	r0, 80056d6 <SD_SendStatus+0x1a>
}
 80056d2:	4628      	mov	r0, r5
 80056d4:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80056d6:	2100      	movs	r1, #0
 80056d8:	6820      	ldr	r0, [r4, #0]
 80056da:	f000 fede 	bl	800649a <SDMMC_GetResponse>
 80056de:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 80056e0:	e7f7      	b.n	80056d2 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 80056e2:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 80056e6:	e7f4      	b.n	80056d2 <SD_SendStatus+0x16>

080056e8 <HAL_SD_ReadBlocks>:
{
 80056e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ec:	b087      	sub	sp, #28
 80056ee:	4605      	mov	r5, r0
 80056f0:	460c      	mov	r4, r1
 80056f2:	4616      	mov	r6, r2
 80056f4:	469a      	mov	sl, r3
 80056f6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80056fa:	f7fc f88b 	bl	8001814 <HAL_GetTick>
  if (NULL == pData)
 80056fe:	2c00      	cmp	r4, #0
 8005700:	d03a      	beq.n	8005778 <HAL_SD_ReadBlocks+0x90>
 8005702:	4680      	mov	r8, r0
  if (hsd->State == HAL_SD_STATE_READY)
 8005704:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
 8005708:	b2ff      	uxtb	r7, r7
 800570a:	2f01      	cmp	r7, #1
 800570c:	f040 80e0 	bne.w	80058d0 <HAL_SD_ReadBlocks+0x1e8>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005710:	2300      	movs	r3, #0
 8005712:	636b      	str	r3, [r5, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005714:	eb06 030a 	add.w	r3, r6, sl
 8005718:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800571a:	4293      	cmp	r3, r2
 800571c:	d832      	bhi.n	8005784 <HAL_SD_ReadBlocks+0x9c>
    hsd->State = HAL_SD_STATE_BUSY;
 800571e:	2303      	movs	r3, #3
 8005720:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 8005724:	682b      	ldr	r3, [r5, #0]
 8005726:	2200      	movs	r2, #0
 8005728:	62da      	str	r2, [r3, #44]	; 0x2c
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800572a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800572c:	2b01      	cmp	r3, #1
 800572e:	d000      	beq.n	8005732 <HAL_SD_ReadBlocks+0x4a>
      add *= 512U;
 8005730:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005736:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005738:	ea4f 234a 	mov.w	r3, sl, lsl #9
 800573c:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800573e:	2390      	movs	r3, #144	; 0x90
 8005740:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005742:	2302      	movs	r3, #2
 8005744:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005746:	2300      	movs	r3, #0
 8005748:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800574a:	9305      	str	r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800574c:	4669      	mov	r1, sp
 800574e:	6828      	ldr	r0, [r5, #0]
 8005750:	f000 fea6 	bl	80064a0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005754:	682a      	ldr	r2, [r5, #0]
 8005756:	68d3      	ldr	r3, [r2, #12]
 8005758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800575c:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 800575e:	f1ba 0f01 	cmp.w	sl, #1
 8005762:	d914      	bls.n	800578e <HAL_SD_ReadBlocks+0xa6>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005764:	2302      	movs	r3, #2
 8005766:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005768:	4631      	mov	r1, r6
 800576a:	6828      	ldr	r0, [r5, #0]
 800576c:	f000 ffa0 	bl	80066b0 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005770:	b9a0      	cbnz	r0, 800579c <HAL_SD_ReadBlocks+0xb4>
    dataremaining = config.DataLength;
 8005772:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005776:	e038      	b.n	80057ea <HAL_SD_ReadBlocks+0x102>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005778:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800577a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800577e:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8005780:	2701      	movs	r7, #1
 8005782:	e0aa      	b.n	80058da <HAL_SD_ReadBlocks+0x1f2>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005784:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005786:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800578a:	636b      	str	r3, [r5, #52]	; 0x34
      return HAL_ERROR;
 800578c:	e0a5      	b.n	80058da <HAL_SD_ReadBlocks+0x1f2>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800578e:	2301      	movs	r3, #1
 8005790:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005792:	4631      	mov	r1, r6
 8005794:	6828      	ldr	r0, [r5, #0]
 8005796:	f000 ff72 	bl	800667e <SDMMC_CmdReadSingleBlock>
 800579a:	e7e9      	b.n	8005770 <HAL_SD_ReadBlocks+0x88>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800579c:	682b      	ldr	r3, [r5, #0]
 800579e:	4a51      	ldr	r2, [pc, #324]	; (80058e4 <HAL_SD_ReadBlocks+0x1fc>)
 80057a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80057a2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80057a4:	4318      	orrs	r0, r3
 80057a6:	6368      	str	r0, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80057a8:	2301      	movs	r3, #1
 80057aa:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80057ae:	2300      	movs	r3, #0
 80057b0:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 80057b2:	e092      	b.n	80058da <HAL_SD_ReadBlocks+0x1f2>
          data = SDMMC_ReadFIFO(hsd->Instance);
 80057b4:	6828      	ldr	r0, [r5, #0]
 80057b6:	f000 fe49 	bl	800644c <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 80057ba:	7020      	strb	r0, [r4, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80057bc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80057c0:	7063      	strb	r3, [r4, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80057c2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80057c6:	70a3      	strb	r3, [r4, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80057c8:	0e00      	lsrs	r0, r0, #24
 80057ca:	70e0      	strb	r0, [r4, #3]
          tempbuff++;
 80057cc:	3404      	adds	r4, #4
        for (count = 0U; count < 8U; count++)
 80057ce:	3601      	adds	r6, #1
 80057d0:	2e07      	cmp	r6, #7
 80057d2:	d9ef      	bls.n	80057b4 <HAL_SD_ReadBlocks+0xcc>
        dataremaining -= 32U;
 80057d4:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80057d8:	f7fc f81c 	bl	8001814 <HAL_GetTick>
 80057dc:	eba0 0008 	sub.w	r0, r0, r8
 80057e0:	4548      	cmp	r0, r9
 80057e2:	d20f      	bcs.n	8005804 <HAL_SD_ReadBlocks+0x11c>
 80057e4:	f1b9 0f00 	cmp.w	r9, #0
 80057e8:	d00c      	beq.n	8005804 <HAL_SD_ReadBlocks+0x11c>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80057ea:	682b      	ldr	r3, [r5, #0]
 80057ec:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80057ee:	f416 7695 	ands.w	r6, r6, #298	; 0x12a
 80057f2:	d115      	bne.n	8005820 <HAL_SD_ReadBlocks+0x138>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80057f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80057fa:	d0ed      	beq.n	80057d8 <HAL_SD_ReadBlocks+0xf0>
 80057fc:	f1bb 0f1f 	cmp.w	fp, #31
 8005800:	d9ea      	bls.n	80057d8 <HAL_SD_ReadBlocks+0xf0>
 8005802:	e7e5      	b.n	80057d0 <HAL_SD_ReadBlocks+0xe8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005804:	682b      	ldr	r3, [r5, #0]
 8005806:	4a37      	ldr	r2, [pc, #220]	; (80058e4 <HAL_SD_ReadBlocks+0x1fc>)
 8005808:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800580a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800580c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005810:	636b      	str	r3, [r5, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8005812:	2301      	movs	r3, #1
 8005814:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8005818:	2300      	movs	r3, #0
 800581a:	62eb      	str	r3, [r5, #44]	; 0x2c
        return HAL_TIMEOUT;
 800581c:	2703      	movs	r7, #3
 800581e:	e05c      	b.n	80058da <HAL_SD_ReadBlocks+0x1f2>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005826:	60da      	str	r2, [r3, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005828:	6828      	ldr	r0, [r5, #0]
 800582a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800582c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005830:	d005      	beq.n	800583e <HAL_SD_ReadBlocks+0x156>
 8005832:	f1ba 0f01 	cmp.w	sl, #1
 8005836:	d902      	bls.n	800583e <HAL_SD_ReadBlocks+0x156>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005838:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800583a:	2b03      	cmp	r3, #3
 800583c:	d118      	bne.n	8005870 <HAL_SD_ReadBlocks+0x188>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800583e:	682b      	ldr	r3, [r5, #0]
 8005840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005842:	f012 0f08 	tst.w	r2, #8
 8005846:	d124      	bne.n	8005892 <HAL_SD_ReadBlocks+0x1aa>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800584a:	f012 0f02 	tst.w	r2, #2
 800584e:	d12c      	bne.n	80058aa <HAL_SD_ReadBlocks+0x1c2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005852:	f012 0f20 	tst.w	r2, #32
 8005856:	d034      	beq.n	80058c2 <HAL_SD_ReadBlocks+0x1da>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005858:	4a22      	ldr	r2, [pc, #136]	; (80058e4 <HAL_SD_ReadBlocks+0x1fc>)
 800585a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800585c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800585e:	f043 0320 	orr.w	r3, r3, #32
 8005862:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005864:	2301      	movs	r3, #1
 8005866:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800586a:	2300      	movs	r3, #0
 800586c:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 800586e:	e034      	b.n	80058da <HAL_SD_ReadBlocks+0x1f2>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005870:	f000 ff6a 	bl	8006748 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8005874:	4603      	mov	r3, r0
 8005876:	2800      	cmp	r0, #0
 8005878:	d0e1      	beq.n	800583e <HAL_SD_ReadBlocks+0x156>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800587a:	682a      	ldr	r2, [r5, #0]
 800587c:	4919      	ldr	r1, [pc, #100]	; (80058e4 <HAL_SD_ReadBlocks+0x1fc>)
 800587e:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005880:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005882:	4313      	orrs	r3, r2
 8005884:	636b      	str	r3, [r5, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005886:	2301      	movs	r3, #1
 8005888:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800588c:	2300      	movs	r3, #0
 800588e:	62eb      	str	r3, [r5, #44]	; 0x2c
          return HAL_ERROR;
 8005890:	e023      	b.n	80058da <HAL_SD_ReadBlocks+0x1f2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005892:	4a14      	ldr	r2, [pc, #80]	; (80058e4 <HAL_SD_ReadBlocks+0x1fc>)
 8005894:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005896:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005898:	f043 0308 	orr.w	r3, r3, #8
 800589c:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800589e:	2301      	movs	r3, #1
 80058a0:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80058a4:	2300      	movs	r3, #0
 80058a6:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 80058a8:	e017      	b.n	80058da <HAL_SD_ReadBlocks+0x1f2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058aa:	4a0e      	ldr	r2, [pc, #56]	; (80058e4 <HAL_SD_ReadBlocks+0x1fc>)
 80058ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80058ae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80058b0:	f043 0302 	orr.w	r3, r3, #2
 80058b4:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80058b6:	2301      	movs	r3, #1
 80058b8:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80058bc:	2300      	movs	r3, #0
 80058be:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 80058c0:	e00b      	b.n	80058da <HAL_SD_ReadBlocks+0x1f2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80058c2:	4a09      	ldr	r2, [pc, #36]	; (80058e8 <HAL_SD_ReadBlocks+0x200>)
 80058c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80058c6:	2301      	movs	r3, #1
 80058c8:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    return HAL_OK;
 80058cc:	2700      	movs	r7, #0
 80058ce:	e004      	b.n	80058da <HAL_SD_ReadBlocks+0x1f2>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80058d0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80058d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058d6:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 80058d8:	2701      	movs	r7, #1
}
 80058da:	4638      	mov	r0, r7
 80058dc:	b007      	add	sp, #28
 80058de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e2:	bf00      	nop
 80058e4:	1fe00fff 	.word	0x1fe00fff
 80058e8:	18000f3a 	.word	0x18000f3a

080058ec <HAL_SD_WriteBlocks>:
{
 80058ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f0:	b08b      	sub	sp, #44	; 0x2c
 80058f2:	4605      	mov	r5, r0
 80058f4:	460c      	mov	r4, r1
 80058f6:	4616      	mov	r6, r2
 80058f8:	469a      	mov	sl, r3
 80058fa:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
 80058fe:	f7fb ff89 	bl	8001814 <HAL_GetTick>
  if (NULL == pData)
 8005902:	2c00      	cmp	r4, #0
 8005904:	d03b      	beq.n	800597e <HAL_SD_WriteBlocks+0x92>
 8005906:	4680      	mov	r8, r0
  if (hsd->State == HAL_SD_STATE_READY)
 8005908:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
 800590c:	b2ff      	uxtb	r7, r7
 800590e:	2f01      	cmp	r7, #1
 8005910:	f040 80e9 	bne.w	8005ae6 <HAL_SD_WriteBlocks+0x1fa>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005914:	2300      	movs	r3, #0
 8005916:	636b      	str	r3, [r5, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005918:	eb06 030a 	add.w	r3, r6, sl
 800591c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800591e:	4293      	cmp	r3, r2
 8005920:	d833      	bhi.n	800598a <HAL_SD_WriteBlocks+0x9e>
    hsd->State = HAL_SD_STATE_BUSY;
 8005922:	2303      	movs	r3, #3
 8005924:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	2200      	movs	r2, #0
 800592c:	62da      	str	r2, [r3, #44]	; 0x2c
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800592e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005930:	2b01      	cmp	r3, #1
 8005932:	d000      	beq.n	8005936 <HAL_SD_WriteBlocks+0x4a>
      add *= 512U;
 8005934:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800593a:	9304      	str	r3, [sp, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800593c:	ea4f 234a 	mov.w	r3, sl, lsl #9
 8005940:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005942:	2390      	movs	r3, #144	; 0x90
 8005944:	9306      	str	r3, [sp, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005946:	2300      	movs	r3, #0
 8005948:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800594a:	9308      	str	r3, [sp, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800594c:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800594e:	a904      	add	r1, sp, #16
 8005950:	6828      	ldr	r0, [r5, #0]
 8005952:	f000 fda5 	bl	80064a0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005956:	682a      	ldr	r2, [r5, #0]
 8005958:	68d3      	ldr	r3, [r2, #12]
 800595a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800595e:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 8005960:	f1ba 0f01 	cmp.w	sl, #1
 8005964:	d916      	bls.n	8005994 <HAL_SD_WriteBlocks+0xa8>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005966:	2320      	movs	r3, #32
 8005968:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800596a:	4631      	mov	r1, r6
 800596c:	6828      	ldr	r0, [r5, #0]
 800596e:	f000 fed1 	bl	8006714 <SDMMC_CmdWriteMultiBlock>
 8005972:	9001      	str	r0, [sp, #4]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005974:	9b01      	ldr	r3, [sp, #4]
 8005976:	b9ab      	cbnz	r3, 80059a4 <HAL_SD_WriteBlocks+0xb8>
    dataremaining = config.DataLength;
 8005978:	f8dd b014 	ldr.w	fp, [sp, #20]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800597c:	e040      	b.n	8005a00 <HAL_SD_WriteBlocks+0x114>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800597e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005980:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005984:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8005986:	2701      	movs	r7, #1
 8005988:	e0b2      	b.n	8005af0 <HAL_SD_WriteBlocks+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800598a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800598c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005990:	636b      	str	r3, [r5, #52]	; 0x34
      return HAL_ERROR;
 8005992:	e0ad      	b.n	8005af0 <HAL_SD_WriteBlocks+0x204>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005994:	2310      	movs	r3, #16
 8005996:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005998:	4631      	mov	r1, r6
 800599a:	6828      	ldr	r0, [r5, #0]
 800599c:	f000 fea1 	bl	80066e2 <SDMMC_CmdWriteSingleBlock>
 80059a0:	9001      	str	r0, [sp, #4]
 80059a2:	e7e7      	b.n	8005974 <HAL_SD_WriteBlocks+0x88>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	4a54      	ldr	r2, [pc, #336]	; (8005af8 <HAL_SD_WriteBlocks+0x20c>)
 80059a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80059aa:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80059ac:	9b01      	ldr	r3, [sp, #4]
 80059ae:	4318      	orrs	r0, r3
 80059b0:	6368      	str	r0, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80059b2:	2301      	movs	r3, #1
 80059b4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80059b8:	2300      	movs	r3, #0
 80059ba:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 80059bc:	e098      	b.n	8005af0 <HAL_SD_WriteBlocks+0x204>
          data = (uint32_t)(*tempbuff);
 80059be:	7823      	ldrb	r3, [r4, #0]
 80059c0:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 8U);
 80059c2:	7862      	ldrb	r2, [r4, #1]
 80059c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80059c8:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 16U);
 80059ca:	78a2      	ldrb	r2, [r4, #2]
 80059cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059d0:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 24U);
 80059d2:	78e2      	ldrb	r2, [r4, #3]
 80059d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80059d8:	9303      	str	r3, [sp, #12]
          tempbuff++;
 80059da:	3404      	adds	r4, #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80059dc:	a903      	add	r1, sp, #12
 80059de:	6828      	ldr	r0, [r5, #0]
 80059e0:	f000 fd37 	bl	8006452 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80059e4:	3601      	adds	r6, #1
 80059e6:	2e07      	cmp	r6, #7
 80059e8:	d9e9      	bls.n	80059be <HAL_SD_WriteBlocks+0xd2>
        dataremaining -= 32U;
 80059ea:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80059ee:	f7fb ff11 	bl	8001814 <HAL_GetTick>
 80059f2:	eba0 0008 	sub.w	r0, r0, r8
 80059f6:	4548      	cmp	r0, r9
 80059f8:	d20f      	bcs.n	8005a1a <HAL_SD_WriteBlocks+0x12e>
 80059fa:	f1b9 0f00 	cmp.w	r9, #0
 80059fe:	d00c      	beq.n	8005a1a <HAL_SD_WriteBlocks+0x12e>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8005a00:	682b      	ldr	r3, [r5, #0]
 8005a02:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8005a04:	f416 768d 	ands.w	r6, r6, #282	; 0x11a
 8005a08:	d115      	bne.n	8005a36 <HAL_SD_WriteBlocks+0x14a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8005a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005a10:	d0ed      	beq.n	80059ee <HAL_SD_WriteBlocks+0x102>
 8005a12:	f1bb 0f1f 	cmp.w	fp, #31
 8005a16:	d9ea      	bls.n	80059ee <HAL_SD_WriteBlocks+0x102>
 8005a18:	e7e5      	b.n	80059e6 <HAL_SD_WriteBlocks+0xfa>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a1a:	682b      	ldr	r3, [r5, #0]
 8005a1c:	4a36      	ldr	r2, [pc, #216]	; (8005af8 <HAL_SD_WriteBlocks+0x20c>)
 8005a1e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005a20:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8005a22:	9b01      	ldr	r3, [sp, #4]
 8005a24:	4318      	orrs	r0, r3
 8005a26:	6368      	str	r0, [r5, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	62eb      	str	r3, [r5, #44]	; 0x2c
        return HAL_TIMEOUT;
 8005a32:	2703      	movs	r7, #3
 8005a34:	e05c      	b.n	8005af0 <HAL_SD_WriteBlocks+0x204>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a3c:	60da      	str	r2, [r3, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005a3e:	6828      	ldr	r0, [r5, #0]
 8005a40:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005a42:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005a46:	d005      	beq.n	8005a54 <HAL_SD_WriteBlocks+0x168>
 8005a48:	f1ba 0f01 	cmp.w	sl, #1
 8005a4c:	d902      	bls.n	8005a54 <HAL_SD_WriteBlocks+0x168>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005a4e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d118      	bne.n	8005a86 <HAL_SD_WriteBlocks+0x19a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005a54:	682b      	ldr	r3, [r5, #0]
 8005a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a58:	f012 0f08 	tst.w	r2, #8
 8005a5c:	d124      	bne.n	8005aa8 <HAL_SD_WriteBlocks+0x1bc>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a60:	f012 0f02 	tst.w	r2, #2
 8005a64:	d12c      	bne.n	8005ac0 <HAL_SD_WriteBlocks+0x1d4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8005a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a68:	f012 0f10 	tst.w	r2, #16
 8005a6c:	d034      	beq.n	8005ad8 <HAL_SD_WriteBlocks+0x1ec>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a6e:	4a22      	ldr	r2, [pc, #136]	; (8005af8 <HAL_SD_WriteBlocks+0x20c>)
 8005a70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005a72:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005a74:	f043 0310 	orr.w	r3, r3, #16
 8005a78:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005a80:	2300      	movs	r3, #0
 8005a82:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8005a84:	e034      	b.n	8005af0 <HAL_SD_WriteBlocks+0x204>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005a86:	f000 fe5f 	bl	8006748 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	d0e1      	beq.n	8005a54 <HAL_SD_WriteBlocks+0x168>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a90:	682a      	ldr	r2, [r5, #0]
 8005a92:	4919      	ldr	r1, [pc, #100]	; (8005af8 <HAL_SD_WriteBlocks+0x20c>)
 8005a94:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005a96:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	636b      	str	r3, [r5, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	62eb      	str	r3, [r5, #44]	; 0x2c
          return HAL_ERROR;
 8005aa6:	e023      	b.n	8005af0 <HAL_SD_WriteBlocks+0x204>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005aa8:	4a13      	ldr	r2, [pc, #76]	; (8005af8 <HAL_SD_WriteBlocks+0x20c>)
 8005aaa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005aac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005aae:	f043 0308 	orr.w	r3, r3, #8
 8005ab2:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8005abe:	e017      	b.n	8005af0 <HAL_SD_WriteBlocks+0x204>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ac0:	4a0d      	ldr	r2, [pc, #52]	; (8005af8 <HAL_SD_WriteBlocks+0x20c>)
 8005ac2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005ac4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005ac6:	f043 0302 	orr.w	r3, r3, #2
 8005aca:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005acc:	2301      	movs	r3, #1
 8005ace:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8005ad6:	e00b      	b.n	8005af0 <HAL_SD_WriteBlocks+0x204>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005ad8:	4a08      	ldr	r2, [pc, #32]	; (8005afc <HAL_SD_WriteBlocks+0x210>)
 8005ada:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005adc:	2301      	movs	r3, #1
 8005ade:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    return HAL_OK;
 8005ae2:	2700      	movs	r7, #0
 8005ae4:	e004      	b.n	8005af0 <HAL_SD_WriteBlocks+0x204>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005ae6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005ae8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005aec:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8005aee:	2701      	movs	r7, #1
}
 8005af0:	4638      	mov	r0, r7
 8005af2:	b00b      	add	sp, #44	; 0x2c
 8005af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af8:	1fe00fff 	.word	0x1fe00fff
 8005afc:	18000f3a 	.word	0x18000f3a

08005b00 <HAL_SD_ErrorCallback>:
}
 8005b00:	4770      	bx	lr
	...

08005b04 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005b04:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005b06:	0f9b      	lsrs	r3, r3, #30
 8005b08:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005b0a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005b0c:	f3c3 6383 	ubfx	r3, r3, #26, #4
 8005b10:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005b12:	f890 305f 	ldrb.w	r3, [r0, #95]	; 0x5f
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005b1c:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
 8005b20:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005b22:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8005b26:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005b28:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005b2c:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005b2e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005b30:	0d1b      	lsrs	r3, r3, #20
 8005b32:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005b34:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005b3e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005b40:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8005b44:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005b46:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005b48:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8005b4c:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005b4e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005b50:	f3c3 3340 	ubfx	r3, r3, #13, #1
 8005b54:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005b56:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005b58:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8005b5c:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005b5e:	2300      	movs	r3, #0
 8005b60:	734b      	strb	r3, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 8005b62:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f040 8086 	bne.w	8005c76 <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005b6a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8005b6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b70:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 8005b74:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8005b76:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8005b7a:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005b7c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005b7e:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 8005b82:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005b84:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 8005b88:	f003 0307 	and.w	r3, r3, #7
 8005b8c:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005b8e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005b90:	f3c3 5342 	ubfx	r3, r3, #21, #3
 8005b94:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005b96:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005b98:	f3c3 4382 	ubfx	r3, r3, #18, #3
 8005b9c:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005b9e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005ba0:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 8005ba4:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005ba6:	690b      	ldr	r3, [r1, #16]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005bac:	7e0a      	ldrb	r2, [r1, #24]
 8005bae:	f002 0207 	and.w	r2, r2, #7
 8005bb2:	3202      	adds	r2, #2
 8005bb4:	4093      	lsls	r3, r2
 8005bb6:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005bb8:	7a0a      	ldrb	r2, [r1, #8]
 8005bba:	f002 0c0f 	and.w	ip, r2, #15
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	fa02 f20c 	lsl.w	r2, r2, ip
 8005bc4:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005bc6:	0a52      	lsrs	r2, r2, #9
 8005bc8:	fb02 f303 	mul.w	r3, r2, r3
 8005bcc:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8005bce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bd2:	6543      	str	r3, [r0, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005bd4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005bd6:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8005bda:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005bdc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005bde:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8005be2:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005be4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bea:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005bec:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005bee:	0fdb      	lsrs	r3, r3, #31
 8005bf0:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005bf2:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005bf4:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8005bf8:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005bfa:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005bfc:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8005c00:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005c02:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005c04:	f3c3 5383 	ubfx	r3, r3, #22, #4
 8005c08:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005c0a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005c0c:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8005c10:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 8005c14:	2300      	movs	r3, #0
 8005c16:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005c1a:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8005c1e:	f002 0201 	and.w	r2, r2, #1
 8005c22:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005c26:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8005c28:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8005c2c:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005c30:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8005c32:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8005c36:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005c3a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8005c3c:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8005c40:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005c44:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8005c46:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8005c4a:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005c4e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8005c50:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8005c54:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005c58:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8005c5a:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8005c5e:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005c62:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8005c64:	f3c2 0246 	ubfx	r2, r2, #1, #7
 8005c68:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 8005c72:	4618      	mov	r0, r3
}
 8005c74:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d111      	bne.n	8005c9e <HAL_SD_GetCardCSD+0x19a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005c7a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005c7c:	041b      	lsls	r3, r3, #16
 8005c7e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8005c82:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
 8005c86:	4313      	orrs	r3, r2
 8005c88:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005c8a:	690b      	ldr	r3, [r1, #16]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	029b      	lsls	r3, r3, #10
 8005c90:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005c92:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8005c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c98:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005c9a:	6543      	str	r3, [r0, #84]	; 0x54
 8005c9c:	e79a      	b.n	8005bd4 <HAL_SD_GetCardCSD+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c9e:	6803      	ldr	r3, [r0, #0]
 8005ca0:	4a05      	ldr	r2, [pc, #20]	; (8005cb8 <HAL_SD_GetCardCSD+0x1b4>)
 8005ca2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ca4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005caa:	6343      	str	r3, [r0, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005cac:	2301      	movs	r3, #1
 8005cae:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    return HAL_ERROR;
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	1fe00fff 	.word	0x1fe00fff

08005cbc <SD_InitCard>:
{
 8005cbc:	b530      	push	{r4, r5, lr}
 8005cbe:	b08d      	sub	sp, #52	; 0x34
 8005cc0:	4604      	mov	r4, r0
  uint16_t sd_rca = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tickstart = HAL_GetTick();
 8005cc8:	f7fb fda4 	bl	8001814 <HAL_GetTick>
 8005ccc:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005cce:	6820      	ldr	r0, [r4, #0]
 8005cd0:	f000 fbca 	bl	8006468 <SDMMC_GetPowerState>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d067      	beq.n	8005da8 <SD_InitCard+0xec>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8005cd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d117      	bne.n	8005d0e <SD_InitCard+0x52>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8005cde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d02f      	beq.n	8005d44 <SD_InitCard+0x88>
    while (sd_rca == 0U)
 8005ce4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005ce8:	bb63      	cbnz	r3, 8005d44 <SD_InitCard+0x88>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005cea:	f10d 0102 	add.w	r1, sp, #2
 8005cee:	6820      	ldr	r0, [r4, #0]
 8005cf0:	f000 fed8 	bl	8006aa4 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	d158      	bne.n	8005dac <SD_InitCard+0xf0>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8005cfa:	f7fb fd8b 	bl	8001814 <HAL_GetTick>
 8005cfe:	1b43      	subs	r3, r0, r5
 8005d00:	f241 3287 	movw	r2, #4999	; 0x1387
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d9ed      	bls.n	8005ce4 <SD_InitCard+0x28>
        return HAL_SD_ERROR_TIMEOUT;
 8005d08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d0c:	e04e      	b.n	8005dac <SD_InitCard+0xf0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005d0e:	6820      	ldr	r0, [r4, #0]
 8005d10:	f000 fe0c 	bl	800692c <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005d14:	4603      	mov	r3, r0
 8005d16:	2800      	cmp	r0, #0
 8005d18:	d148      	bne.n	8005dac <SD_InitCard+0xf0>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	6820      	ldr	r0, [r4, #0]
 8005d1e:	f000 fbbc 	bl	800649a <SDMMC_GetResponse>
 8005d22:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005d24:	2104      	movs	r1, #4
 8005d26:	6820      	ldr	r0, [r4, #0]
 8005d28:	f000 fbb7 	bl	800649a <SDMMC_GetResponse>
 8005d2c:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005d2e:	2108      	movs	r1, #8
 8005d30:	6820      	ldr	r0, [r4, #0]
 8005d32:	f000 fbb2 	bl	800649a <SDMMC_GetResponse>
 8005d36:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005d38:	210c      	movs	r1, #12
 8005d3a:	6820      	ldr	r0, [r4, #0]
 8005d3c:	f000 fbad 	bl	800649a <SDMMC_GetResponse>
 8005d40:	67a0      	str	r0, [r4, #120]	; 0x78
 8005d42:	e7cc      	b.n	8005cde <SD_InitCard+0x22>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8005d44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d01c      	beq.n	8005d84 <SD_InitCard+0xc8>
    hsd->SdCard.RelCardAdd = sd_rca;
 8005d4a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8005d4e:	6461      	str	r1, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005d50:	0409      	lsls	r1, r1, #16
 8005d52:	6820      	ldr	r0, [r4, #0]
 8005d54:	f000 fe00 	bl	8006958 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005d58:	4603      	mov	r3, r0
 8005d5a:	bb38      	cbnz	r0, 8005dac <SD_InitCard+0xf0>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	6820      	ldr	r0, [r4, #0]
 8005d60:	f000 fb9b 	bl	800649a <SDMMC_GetResponse>
 8005d64:	65e0      	str	r0, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005d66:	2104      	movs	r1, #4
 8005d68:	6820      	ldr	r0, [r4, #0]
 8005d6a:	f000 fb96 	bl	800649a <SDMMC_GetResponse>
 8005d6e:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005d70:	2108      	movs	r1, #8
 8005d72:	6820      	ldr	r0, [r4, #0]
 8005d74:	f000 fb91 	bl	800649a <SDMMC_GetResponse>
 8005d78:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005d7a:	210c      	movs	r1, #12
 8005d7c:	6820      	ldr	r0, [r4, #0]
 8005d7e:	f000 fb8c 	bl	800649a <SDMMC_GetResponse>
 8005d82:	66a0      	str	r0, [r4, #104]	; 0x68
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005d84:	2104      	movs	r1, #4
 8005d86:	6820      	ldr	r0, [r4, #0]
 8005d88:	f000 fb87 	bl	800649a <SDMMC_GetResponse>
 8005d8c:	0d00      	lsrs	r0, r0, #20
 8005d8e:	6420      	str	r0, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005d90:	a901      	add	r1, sp, #4
 8005d92:	4620      	mov	r0, r4
 8005d94:	f7ff feb6 	bl	8005b04 <HAL_SD_GetCardCSD>
 8005d98:	b958      	cbnz	r0, 8005db2 <SD_InitCard+0xf6>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005d9a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005d9c:	0409      	lsls	r1, r1, #16
 8005d9e:	6820      	ldr	r0, [r4, #0]
 8005da0:	f000 fcfe 	bl	80067a0 <SDMMC_CmdSelDesel>
 8005da4:	4603      	mov	r3, r0
  if (errorstate != HAL_SD_ERROR_NONE)
 8005da6:	e001      	b.n	8005dac <SD_InitCard+0xf0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005da8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	b00d      	add	sp, #52	; 0x34
 8005db0:	bd30      	pop	{r4, r5, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005db2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005db6:	e7f9      	b.n	8005dac <SD_InitCard+0xf0>

08005db8 <HAL_SD_InitCard>:
{
 8005db8:	b570      	push	{r4, r5, r6, lr}
 8005dba:	b088      	sub	sp, #32
 8005dbc:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	9303      	str	r3, [sp, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005dc2:	9304      	str	r3, [sp, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005dc4:	9305      	str	r3, [sp, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005dc6:	9306      	str	r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005dc8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005dcc:	2100      	movs	r1, #0
 8005dce:	f7fe ff11 	bl	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 8005dd2:	b938      	cbnz	r0, 8005de4 <HAL_SD_InitCard+0x2c>
    hsd->State = HAL_SD_STATE_READY;
 8005dd4:	2001      	movs	r0, #1
 8005dd6:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005dda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005dde:	6363      	str	r3, [r4, #52]	; 0x34
}
 8005de0:	b008      	add	sp, #32
 8005de2:	bd70      	pop	{r4, r5, r6, pc}
 8005de4:	4606      	mov	r6, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005de6:	0a05      	lsrs	r5, r0, #8
 8005de8:	4b23      	ldr	r3, [pc, #140]	; (8005e78 <HAL_SD_InitCard+0xc0>)
 8005dea:	fba3 3505 	umull	r3, r5, r3, r5
 8005dee:	092d      	lsrs	r5, r5, #4
 8005df0:	9507      	str	r5, [sp, #28]
  (void)SDMMC_Init(hsd->Instance, Init);
 8005df2:	ab08      	add	r3, sp, #32
 8005df4:	e913 0003 	ldmdb	r3, {r0, r1}
 8005df8:	e88d 0003 	stmia.w	sp, {r0, r1}
 8005dfc:	ab03      	add	r3, sp, #12
 8005dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e00:	6820      	ldr	r0, [r4, #0]
 8005e02:	f000 fb0b 	bl	800641c <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005e06:	6820      	ldr	r0, [r4, #0]
 8005e08:	f000 fb28 	bl	800645c <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 8005e0c:	b115      	cbz	r5, 8005e14 <HAL_SD_InitCard+0x5c>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005e0e:	006d      	lsls	r5, r5, #1
 8005e10:	fbb6 f6f5 	udiv	r6, r6, r5
  if (sdmmc_clk != 0U)
 8005e14:	b95e      	cbnz	r6, 8005e2e <HAL_SD_InitCard+0x76>
  errorstate = SD_PowerON(hsd);
 8005e16:	4620      	mov	r0, r4
 8005e18:	f7ff fa54 	bl	80052c4 <SD_PowerON>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	b168      	cbz	r0, 8005e3c <HAL_SD_InitCard+0x84>
    hsd->State = HAL_SD_STATE_READY;
 8005e20:	2001      	movs	r0, #1
 8005e22:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005e26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	6363      	str	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8005e2c:	e7d8      	b.n	8005de0 <HAL_SD_InitCard+0x28>
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005e2e:	4813      	ldr	r0, [pc, #76]	; (8005e7c <HAL_SD_InitCard+0xc4>)
 8005e30:	fbb0 f0f6 	udiv	r0, r0, r6
 8005e34:	3001      	adds	r0, #1
 8005e36:	f7fb fcf3 	bl	8001820 <HAL_Delay>
 8005e3a:	e7ec      	b.n	8005e16 <HAL_SD_InitCard+0x5e>
  errorstate = SD_InitCard(hsd);
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f7ff ff3d 	bl	8005cbc <SD_InitCard>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005e42:	4602      	mov	r2, r0
 8005e44:	b130      	cbz	r0, 8005e54 <HAL_SD_InitCard+0x9c>
    hsd->State = HAL_SD_STATE_READY;
 8005e46:	2001      	movs	r0, #1
 8005e48:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005e4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	6363      	str	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8005e52:	e7c5      	b.n	8005de0 <HAL_SD_InitCard+0x28>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005e54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e58:	6820      	ldr	r0, [r4, #0]
 8005e5a:	f000 fbf7 	bl	800664c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005e5e:	b908      	cbnz	r0, 8005e64 <HAL_SD_InitCard+0xac>
  return HAL_OK;
 8005e60:	2000      	movs	r0, #0
 8005e62:	e7bd      	b.n	8005de0 <HAL_SD_InitCard+0x28>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	4906      	ldr	r1, [pc, #24]	; (8005e80 <HAL_SD_InitCard+0xc8>)
 8005e68:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005e6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e6c:	4303      	orrs	r3, r0
 8005e6e:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005e70:	2001      	movs	r0, #1
 8005e72:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    return HAL_ERROR;
 8005e76:	e7b3      	b.n	8005de0 <HAL_SD_InitCard+0x28>
 8005e78:	014f8b59 	.word	0x014f8b59
 8005e7c:	00012110 	.word	0x00012110
 8005e80:	1fe00fff 	.word	0x1fe00fff

08005e84 <HAL_SD_GetCardStatus>:
{
 8005e84:	b530      	push	{r4, r5, lr}
 8005e86:	b091      	sub	sp, #68	; 0x44
  if (hsd->State == HAL_SD_STATE_BUSY)
 8005e88:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b03      	cmp	r3, #3
 8005e90:	d059      	beq.n	8005f46 <HAL_SD_GetCardStatus+0xc2>
 8005e92:	4604      	mov	r4, r0
 8005e94:	460d      	mov	r5, r1
  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005e96:	4669      	mov	r1, sp
 8005e98:	f7ff faba 	bl	8005410 <SD_SendSDStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005e9c:	b1b8      	cbz	r0, 8005ece <HAL_SD_GetCardStatus+0x4a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	492b      	ldr	r1, [pc, #172]	; (8005f50 <HAL_SD_GetCardStatus+0xcc>)
 8005ea2:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005ea4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ea6:	4303      	orrs	r3, r0
 8005ea8:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005eaa:	2501      	movs	r5, #1
 8005eac:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005eb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005eb4:	6820      	ldr	r0, [r4, #0]
 8005eb6:	f000 fbc9 	bl	800664c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	d044      	beq.n	8005f48 <HAL_SD_GetCardStatus+0xc4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ebe:	6822      	ldr	r2, [r4, #0]
 8005ec0:	4923      	ldr	r1, [pc, #140]	; (8005f50 <HAL_SD_GetCardStatus+0xcc>)
 8005ec2:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8005ec4:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005ec6:	2501      	movs	r5, #1
 8005ec8:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    status = HAL_ERROR;
 8005ecc:	e03c      	b.n	8005f48 <HAL_SD_GetCardStatus+0xc4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005ece:	9a00      	ldr	r2, [sp, #0]
 8005ed0:	f3c2 1381 	ubfx	r3, r2, #6, #2
 8005ed4:	702b      	strb	r3, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005ed6:	f3c2 1340 	ubfx	r3, r2, #5, #1
 8005eda:	706b      	strb	r3, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005edc:	0a13      	lsrs	r3, r2, #8
 8005ede:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ee2:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	806b      	strh	r3, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005eea:	9a01      	ldr	r2, [sp, #4]
 8005eec:	0213      	lsls	r3, r2, #8
 8005eee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ef2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005ef6:	0a11      	lsrs	r1, r2, #8
 8005ef8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005efc:	430b      	orrs	r3, r1
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005efe:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005f02:	606b      	str	r3, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005f04:	9b02      	ldr	r3, [sp, #8]
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005f0a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005f0e:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005f10:	f3c3 5203 	ubfx	r2, r3, #20, #4
 8005f14:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005f16:	0c1b      	lsrs	r3, r3, #16
 8005f18:	9a03      	ldr	r2, [sp, #12]
 8005f1a:	b2d1      	uxtb	r1, r2
 8005f1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f20:	430b      	orrs	r3, r1
 8005f22:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005f24:	f3c2 2385 	ubfx	r3, r2, #10, #6
 8005f28:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8005f2a:	f3c2 2301 	ubfx	r3, r2, #8, #2
 8005f2e:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005f30:	f3c2 1303 	ubfx	r3, r2, #4, #4
 8005f34:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005f36:	f002 020f 	and.w	r2, r2, #15
 8005f3a:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005f3c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8005f40:	74ab      	strb	r3, [r5, #18]
  HAL_StatusTypeDef status = HAL_OK;
 8005f42:	2500      	movs	r5, #0
 8005f44:	e7b4      	b.n	8005eb0 <HAL_SD_GetCardStatus+0x2c>
    return HAL_ERROR;
 8005f46:	2501      	movs	r5, #1
}
 8005f48:	4628      	mov	r0, r5
 8005f4a:	b011      	add	sp, #68	; 0x44
 8005f4c:	bd30      	pop	{r4, r5, pc}
 8005f4e:	bf00      	nop
 8005f50:	1fe00fff 	.word	0x1fe00fff

08005f54 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005f54:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005f56:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005f58:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005f5a:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005f5c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005f5e:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005f60:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005f62:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005f64:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005f66:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005f68:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005f6a:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005f6c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005f6e:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005f70:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005f72:	61cb      	str	r3, [r1, #28]
}
 8005f74:	2000      	movs	r0, #0
 8005f76:	4770      	bx	lr

08005f78 <HAL_SD_ConfigWideBusOperation>:
{
 8005f78:	b530      	push	{r4, r5, lr}
 8005f7a:	b089      	sub	sp, #36	; 0x24
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8005f80:	2303      	movs	r3, #3
 8005f82:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 8005f86:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d01c      	beq.n	8005fc6 <HAL_SD_ConfigWideBusOperation+0x4e>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8005f8c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005f90:	d008      	beq.n	8005fa4 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8005f92:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005f96:	d00a      	beq.n	8005fae <HAL_SD_ConfigWideBusOperation+0x36>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8005f98:	b179      	cbz	r1, 8005fba <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f9a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fa0:	6343      	str	r3, [r0, #52]	; 0x34
 8005fa2:	e014      	b.n	8005fce <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005fa4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005faa:	6343      	str	r3, [r0, #52]	; 0x34
 8005fac:	e00f      	b.n	8005fce <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8005fae:	f7ff fb37 	bl	8005620 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8005fb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fb4:	4303      	orrs	r3, r0
 8005fb6:	6363      	str	r3, [r4, #52]	; 0x34
 8005fb8:	e009      	b.n	8005fce <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8005fba:	f7ff fb58 	bl	800566e <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8005fbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fc0:	4303      	orrs	r3, r0
 8005fc2:	6363      	str	r3, [r4, #52]	; 0x34
 8005fc4:	e003      	b.n	8005fce <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005fc6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fcc:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005fce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fd0:	b1b3      	cbz	r3, 8006000 <HAL_SD_ConfigWideBusOperation+0x88>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	4a3a      	ldr	r2, [pc, #232]	; (80060c0 <HAL_SD_ConfigWideBusOperation+0x148>)
 8005fd6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005fd8:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005fda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fde:	6820      	ldr	r0, [r4, #0]
 8005fe0:	f000 fb34 	bl	800664c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005fe4:	b130      	cbz	r0, 8005ff4 <HAL_SD_ConfigWideBusOperation+0x7c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	4935      	ldr	r1, [pc, #212]	; (80060c0 <HAL_SD_ConfigWideBusOperation+0x148>)
 8005fea:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005fec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fee:	4303      	orrs	r3, r0
 8005ff0:	6363      	str	r3, [r4, #52]	; 0x34
    status = HAL_ERROR;
 8005ff2:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	b009      	add	sp, #36	; 0x24
 8005ffe:	bd30      	pop	{r4, r5, pc}
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006000:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006004:	2100      	movs	r1, #0
 8006006:	f7fe fdf5 	bl	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 800600a:	4602      	mov	r2, r0
 800600c:	2800      	cmp	r0, #0
 800600e:	d050      	beq.n	80060b2 <HAL_SD_ConfigWideBusOperation+0x13a>
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006010:	6863      	ldr	r3, [r4, #4]
 8006012:	9303      	str	r3, [sp, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006014:	68a3      	ldr	r3, [r4, #8]
 8006016:	9304      	str	r3, [sp, #16]
      Init.BusWide             = WideMode;
 8006018:	9505      	str	r5, [sp, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800601a:	6923      	ldr	r3, [r4, #16]
 800601c:	9306      	str	r3, [sp, #24]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800601e:	6961      	ldr	r1, [r4, #20]
 8006020:	4b28      	ldr	r3, [pc, #160]	; (80060c4 <HAL_SD_ConfigWideBusOperation+0x14c>)
 8006022:	fba3 0302 	umull	r0, r3, r3, r2
 8006026:	0e18      	lsrs	r0, r3, #24
 8006028:	ebb1 6f13 	cmp.w	r1, r3, lsr #24
 800602c:	d30c      	bcc.n	8006048 <HAL_SD_ConfigWideBusOperation+0xd0>
        Init.ClockDiv = hsd->Init.ClockDiv;
 800602e:	9107      	str	r1, [sp, #28]
      (void)SDMMC_Init(hsd->Instance, Init);
 8006030:	ab08      	add	r3, sp, #32
 8006032:	e913 0003 	ldmdb	r3, {r0, r1}
 8006036:	e88d 0003 	stmia.w	sp, {r0, r1}
 800603a:	ab03      	add	r3, sp, #12
 800603c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800603e:	6820      	ldr	r0, [r4, #0]
 8006040:	f000 f9ec 	bl	800641c <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8006044:	2500      	movs	r5, #0
 8006046:	e7c8      	b.n	8005fda <HAL_SD_ConfigWideBusOperation+0x62>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006048:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800604a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800604e:	d008      	beq.n	8006062 <HAL_SD_ConfigWideBusOperation+0xea>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006054:	d007      	beq.n	8006066 <HAL_SD_ConfigWideBusOperation+0xee>
        if (hsd->Init.ClockDiv == 0U)
 8006056:	bb11      	cbnz	r1, 800609e <HAL_SD_ConfigWideBusOperation+0x126>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006058:	4b1b      	ldr	r3, [pc, #108]	; (80060c8 <HAL_SD_ConfigWideBusOperation+0x150>)
 800605a:	429a      	cmp	r2, r3
 800605c:	d91d      	bls.n	800609a <HAL_SD_ConfigWideBusOperation+0x122>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800605e:	9007      	str	r0, [sp, #28]
 8006060:	e7e6      	b.n	8006030 <HAL_SD_ConfigWideBusOperation+0xb8>
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006062:	9107      	str	r1, [sp, #28]
 8006064:	e7e4      	b.n	8006030 <HAL_SD_ConfigWideBusOperation+0xb8>
        if (hsd->Init.ClockDiv == 0U)
 8006066:	b951      	cbnz	r1, 800607e <HAL_SD_ConfigWideBusOperation+0x106>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006068:	4b18      	ldr	r3, [pc, #96]	; (80060cc <HAL_SD_ConfigWideBusOperation+0x154>)
 800606a:	429a      	cmp	r2, r3
 800606c:	d905      	bls.n	800607a <HAL_SD_ConfigWideBusOperation+0x102>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800606e:	4b15      	ldr	r3, [pc, #84]	; (80060c4 <HAL_SD_ConfigWideBusOperation+0x14c>)
 8006070:	fba3 2302 	umull	r2, r3, r3, r2
 8006074:	0e5b      	lsrs	r3, r3, #25
 8006076:	9307      	str	r3, [sp, #28]
 8006078:	e7da      	b.n	8006030 <HAL_SD_ConfigWideBusOperation+0xb8>
            Init.ClockDiv = hsd->Init.ClockDiv;
 800607a:	9107      	str	r1, [sp, #28]
 800607c:	e7d8      	b.n	8006030 <HAL_SD_ConfigWideBusOperation+0xb8>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800607e:	004b      	lsls	r3, r1, #1
 8006080:	fbb2 f3f3 	udiv	r3, r2, r3
 8006084:	4811      	ldr	r0, [pc, #68]	; (80060cc <HAL_SD_ConfigWideBusOperation+0x154>)
 8006086:	4283      	cmp	r3, r0
 8006088:	d905      	bls.n	8006096 <HAL_SD_ConfigWideBusOperation+0x11e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800608a:	4b0e      	ldr	r3, [pc, #56]	; (80060c4 <HAL_SD_ConfigWideBusOperation+0x14c>)
 800608c:	fba3 2302 	umull	r2, r3, r3, r2
 8006090:	0e5b      	lsrs	r3, r3, #25
 8006092:	9307      	str	r3, [sp, #28]
 8006094:	e7cc      	b.n	8006030 <HAL_SD_ConfigWideBusOperation+0xb8>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006096:	9107      	str	r1, [sp, #28]
 8006098:	e7ca      	b.n	8006030 <HAL_SD_ConfigWideBusOperation+0xb8>
            Init.ClockDiv = hsd->Init.ClockDiv;
 800609a:	9107      	str	r1, [sp, #28]
 800609c:	e7c8      	b.n	8006030 <HAL_SD_ConfigWideBusOperation+0xb8>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800609e:	004b      	lsls	r3, r1, #1
 80060a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80060a4:	4b08      	ldr	r3, [pc, #32]	; (80060c8 <HAL_SD_ConfigWideBusOperation+0x150>)
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d901      	bls.n	80060ae <HAL_SD_ConfigWideBusOperation+0x136>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80060aa:	9007      	str	r0, [sp, #28]
 80060ac:	e7c0      	b.n	8006030 <HAL_SD_ConfigWideBusOperation+0xb8>
            Init.ClockDiv = hsd->Init.ClockDiv;
 80060ae:	9107      	str	r1, [sp, #28]
 80060b0:	e7be      	b.n	8006030 <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80060b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060b8:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 80060ba:	2501      	movs	r5, #1
 80060bc:	e78d      	b.n	8005fda <HAL_SD_ConfigWideBusOperation+0x62>
 80060be:	bf00      	nop
 80060c0:	1fe00fff 	.word	0x1fe00fff
 80060c4:	55e63b89 	.word	0x55e63b89
 80060c8:	017d7840 	.word	0x017d7840
 80060cc:	02faf080 	.word	0x02faf080

080060d0 <HAL_SD_GetCardState>:
{
 80060d0:	b510      	push	{r4, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 80060d6:	2300      	movs	r3, #0
 80060d8:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 80060da:	a901      	add	r1, sp, #4
 80060dc:	f7ff faee 	bl	80056bc <SD_SendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 80060e0:	b110      	cbz	r0, 80060e8 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 80060e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060e4:	4303      	orrs	r3, r0
 80060e6:	6363      	str	r3, [r4, #52]	; 0x34
}
 80060e8:	9801      	ldr	r0, [sp, #4]
 80060ea:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80060ee:	b002      	add	sp, #8
 80060f0:	bd10      	pop	{r4, pc}

080060f2 <HAL_SD_Init>:
{
 80060f2:	b570      	push	{r4, r5, r6, lr}
 80060f4:	b086      	sub	sp, #24
  if (hsd == NULL)
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d054      	beq.n	80061a4 <HAL_SD_Init+0xb2>
 80060fa:	4604      	mov	r4, r0
  if (hsd->State == HAL_SD_STATE_RESET)
 80060fc:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8006100:	b153      	cbz	r3, 8006118 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8006102:	2304      	movs	r3, #4
 8006104:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006108:	4620      	mov	r0, r4
 800610a:	f7ff fe55 	bl	8005db8 <HAL_SD_InitCard>
 800610e:	b138      	cbz	r0, 8006120 <HAL_SD_Init+0x2e>
    return HAL_ERROR;
 8006110:	2501      	movs	r5, #1
}
 8006112:	4628      	mov	r0, r5
 8006114:	b006      	add	sp, #24
 8006116:	bd70      	pop	{r4, r5, r6, pc}
    hsd->Lock = HAL_UNLOCKED;
 8006118:	7603      	strb	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 800611a:	f7fb f98b 	bl	8001434 <HAL_SD_MspInit>
 800611e:	e7f0      	b.n	8006102 <HAL_SD_Init+0x10>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006120:	a901      	add	r1, sp, #4
 8006122:	4620      	mov	r0, r4
 8006124:	f7ff feae 	bl	8005e84 <HAL_SD_GetCardStatus>
 8006128:	2800      	cmp	r0, #0
 800612a:	d13d      	bne.n	80061a8 <HAL_SD_Init+0xb6>
  speedgrade = CardStatus.UhsSpeedGrade;
 800612c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8006130:	b2da      	uxtb	r2, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006132:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8006136:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006138:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800613a:	2901      	cmp	r1, #1
 800613c:	d00b      	beq.n	8006156 <HAL_SD_Init+0x64>
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800613e:	2901      	cmp	r1, #1
 8006140:	d00f      	beq.n	8006162 <HAL_SD_Init+0x70>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006142:	2300      	movs	r3, #0
 8006144:	65a3      	str	r3, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006146:	68e1      	ldr	r1, [r4, #12]
 8006148:	4620      	mov	r0, r4
 800614a:	f7ff ff15 	bl	8005f78 <HAL_SD_ConfigWideBusOperation>
 800614e:	4605      	mov	r5, r0
 8006150:	b158      	cbz	r0, 800616a <HAL_SD_Init+0x78>
    return HAL_ERROR;
 8006152:	2501      	movs	r5, #1
 8006154:	e7dd      	b.n	8006112 <HAL_SD_Init+0x20>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006156:	4313      	orrs	r3, r2
 8006158:	d0f1      	beq.n	800613e <HAL_SD_Init+0x4c>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800615a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800615e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006160:	e7f1      	b.n	8006146 <HAL_SD_Init+0x54>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006166:	65a3      	str	r3, [r4, #88]	; 0x58
 8006168:	e7ed      	b.n	8006146 <HAL_SD_Init+0x54>
  tickstart = HAL_GetTick();
 800616a:	f7fb fb53 	bl	8001814 <HAL_GetTick>
 800616e:	4606      	mov	r6, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006170:	4620      	mov	r0, r4
 8006172:	f7ff ffad 	bl	80060d0 <HAL_SD_GetCardState>
 8006176:	2804      	cmp	r0, #4
 8006178:	d00d      	beq.n	8006196 <HAL_SD_Init+0xa4>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800617a:	f7fb fb4b 	bl	8001814 <HAL_GetTick>
 800617e:	1b80      	subs	r0, r0, r6
 8006180:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006184:	d1f4      	bne.n	8006170 <HAL_SD_Init+0x7e>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006186:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800618a:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800618c:	2301      	movs	r3, #1
 800618e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 8006192:	2503      	movs	r5, #3
 8006194:	e7bd      	b.n	8006112 <HAL_SD_Init+0x20>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006196:	2300      	movs	r3, #0
 8006198:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800619a:	62e3      	str	r3, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
 800619c:	2301      	movs	r3, #1
 800619e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 80061a2:	e7b6      	b.n	8006112 <HAL_SD_Init+0x20>
    return HAL_ERROR;
 80061a4:	2501      	movs	r5, #1
 80061a6:	e7b4      	b.n	8006112 <HAL_SD_Init+0x20>
    return HAL_ERROR;
 80061a8:	2501      	movs	r5, #1
 80061aa:	e7b2      	b.n	8006112 <HAL_SD_Init+0x20>

080061ac <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80061ac:	4770      	bx	lr

080061ae <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80061ae:	4770      	bx	lr

080061b0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80061b0:	4770      	bx	lr

080061b2 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80061b2:	4770      	bx	lr

080061b4 <HAL_SD_IRQHandler>:
{
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 80061b8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80061ba:	6803      	ldr	r3, [r0, #0]
 80061bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061be:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80061c2:	d002      	beq.n	80061ca <HAL_SD_IRQHandler+0x16>
 80061c4:	f015 0f08 	tst.w	r5, #8
 80061c8:	d12a      	bne.n	8006220 <HAL_SD_IRQHandler+0x6c>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80061ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061cc:	f412 7f80 	tst.w	r2, #256	; 0x100
 80061d0:	d067      	beq.n	80062a2 <HAL_SD_IRQHandler+0xee>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80061d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061d6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80061d8:	6822      	ldr	r2, [r4, #0]
 80061da:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80061dc:	4b7e      	ldr	r3, [pc, #504]	; (80063d8 <HAL_SD_IRQHandler+0x224>)
 80061de:	400b      	ands	r3, r1
 80061e0:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80061e2:	6822      	ldr	r2, [r4, #0]
 80061e4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80061e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061ea:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80061ec:	6822      	ldr	r2, [r4, #0]
 80061ee:	68d3      	ldr	r3, [r2, #12]
 80061f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f4:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 80061f6:	f015 0f08 	tst.w	r5, #8
 80061fa:	d025      	beq.n	8006248 <HAL_SD_IRQHandler+0x94>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80061fc:	f015 0f22 	tst.w	r5, #34	; 0x22
 8006200:	d111      	bne.n	8006226 <HAL_SD_IRQHandler+0x72>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	4a75      	ldr	r2, [pc, #468]	; (80063dc <HAL_SD_IRQHandler+0x228>)
 8006206:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006208:	2301      	movs	r3, #1
 800620a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800620e:	2300      	movs	r3, #0
 8006210:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006212:	f015 0f03 	tst.w	r5, #3
 8006216:	d013      	beq.n	8006240 <HAL_SD_IRQHandler+0x8c>
        HAL_SD_RxCpltCallback(hsd);
 8006218:	4620      	mov	r0, r4
 800621a:	f000 fcef 	bl	8006bfc <HAL_SD_RxCpltCallback>
 800621e:	e001      	b.n	8006224 <HAL_SD_IRQHandler+0x70>
    SD_Read_IT(hsd);
 8006220:	f7ff f8b2 	bl	8005388 <SD_Read_IT>
}
 8006224:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006226:	6820      	ldr	r0, [r4, #0]
 8006228:	f000 fa8e 	bl	8006748 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800622c:	4603      	mov	r3, r0
 800622e:	2800      	cmp	r0, #0
 8006230:	d0e7      	beq.n	8006202 <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 8006232:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006234:	4313      	orrs	r3, r2
 8006236:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8006238:	4620      	mov	r0, r4
 800623a:	f7ff fc61 	bl	8005b00 <HAL_SD_ErrorCallback>
 800623e:	e7e0      	b.n	8006202 <HAL_SD_IRQHandler+0x4e>
        HAL_SD_TxCpltCallback(hsd);
 8006240:	4620      	mov	r0, r4
 8006242:	f000 fcd6 	bl	8006bf2 <HAL_SD_TxCpltCallback>
 8006246:	e7ed      	b.n	8006224 <HAL_SD_IRQHandler+0x70>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006248:	f015 0f80 	tst.w	r5, #128	; 0x80
 800624c:	d0ea      	beq.n	8006224 <HAL_SD_IRQHandler+0x70>
      hsd->Instance->DLEN = 0;
 800624e:	6822      	ldr	r2, [r4, #0]
 8006250:	2300      	movs	r3, #0
 8006252:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006254:	6822      	ldr	r2, [r4, #0]
 8006256:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006258:	6822      	ldr	r2, [r4, #0]
 800625a:	6513      	str	r3, [r2, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800625c:	f015 0f22 	tst.w	r5, #34	; 0x22
 8006260:	d10e      	bne.n	8006280 <HAL_SD_IRQHandler+0xcc>
      hsd->State = HAL_SD_STATE_READY;
 8006262:	2301      	movs	r3, #1
 8006264:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006268:	2300      	movs	r3, #0
 800626a:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800626c:	f015 0f30 	tst.w	r5, #48	; 0x30
 8006270:	d113      	bne.n	800629a <HAL_SD_IRQHandler+0xe6>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006272:	f015 0f03 	tst.w	r5, #3
 8006276:	d0d5      	beq.n	8006224 <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 8006278:	4620      	mov	r0, r4
 800627a:	f000 fcbf 	bl	8006bfc <HAL_SD_RxCpltCallback>
 800627e:	e7d1      	b.n	8006224 <HAL_SD_IRQHandler+0x70>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006280:	6820      	ldr	r0, [r4, #0]
 8006282:	f000 fa61 	bl	8006748 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8006286:	4603      	mov	r3, r0
 8006288:	2800      	cmp	r0, #0
 800628a:	d0ea      	beq.n	8006262 <HAL_SD_IRQHandler+0xae>
          hsd->ErrorCode |= errorstate;
 800628c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800628e:	4313      	orrs	r3, r2
 8006290:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8006292:	4620      	mov	r0, r4
 8006294:	f7ff fc34 	bl	8005b00 <HAL_SD_ErrorCallback>
 8006298:	e7e3      	b.n	8006262 <HAL_SD_IRQHandler+0xae>
        HAL_SD_TxCpltCallback(hsd);
 800629a:	4620      	mov	r0, r4
 800629c:	f000 fca9 	bl	8006bf2 <HAL_SD_TxCpltCallback>
 80062a0:	e7e7      	b.n	8006272 <HAL_SD_IRQHandler+0xbe>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80062a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062a4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80062a8:	d002      	beq.n	80062b0 <HAL_SD_IRQHandler+0xfc>
 80062aa:	f015 0f08 	tst.w	r5, #8
 80062ae:	d162      	bne.n	8006376 <HAL_SD_IRQHandler+0x1c2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80062b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062b2:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 80062b6:	d06b      	beq.n	8006390 <HAL_SD_IRQHandler+0x1dc>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80062b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ba:	f012 0f02 	tst.w	r2, #2
 80062be:	d003      	beq.n	80062c8 <HAL_SD_IRQHandler+0x114>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80062c0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80062c2:	f042 0202 	orr.w	r2, r2, #2
 80062c6:	6362      	str	r2, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80062c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ca:	f012 0f08 	tst.w	r2, #8
 80062ce:	d003      	beq.n	80062d8 <HAL_SD_IRQHandler+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80062d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80062d2:	f042 0208 	orr.w	r2, r2, #8
 80062d6:	6362      	str	r2, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80062d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062da:	f012 0f20 	tst.w	r2, #32
 80062de:	d003      	beq.n	80062e8 <HAL_SD_IRQHandler+0x134>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80062e0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80062e2:	f042 0220 	orr.w	r2, r2, #32
 80062e6:	6362      	str	r2, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80062e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ea:	f012 0f10 	tst.w	r2, #16
 80062ee:	d003      	beq.n	80062f8 <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80062f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80062f2:	f042 0210 	orr.w	r2, r2, #16
 80062f6:	6362      	str	r2, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80062f8:	4a38      	ldr	r2, [pc, #224]	; (80063dc <HAL_SD_IRQHandler+0x228>)
 80062fa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80062fc:	6822      	ldr	r2, [r4, #0]
 80062fe:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006300:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8006304:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006306:	6822      	ldr	r2, [r4, #0]
 8006308:	68d3      	ldr	r3, [r2, #12]
 800630a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800630e:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006310:	6822      	ldr	r2, [r4, #0]
 8006312:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006314:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006318:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800631a:	6822      	ldr	r2, [r4, #0]
 800631c:	68d3      	ldr	r3, [r2, #12]
 800631e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006322:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006324:	6820      	ldr	r0, [r4, #0]
 8006326:	f000 fa0f 	bl	8006748 <SDMMC_CmdStopTransfer>
 800632a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800632c:	4303      	orrs	r3, r0
 800632e:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006330:	6822      	ldr	r2, [r4, #0]
 8006332:	68d3      	ldr	r3, [r2, #12]
 8006334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006338:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006340:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8006342:	f015 0f08 	tst.w	r5, #8
 8006346:	d11a      	bne.n	800637e <HAL_SD_IRQHandler+0x1ca>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006348:	f015 0f80 	tst.w	r5, #128	; 0x80
 800634c:	f43f af6a 	beq.w	8006224 <HAL_SD_IRQHandler+0x70>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006350:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006352:	2b00      	cmp	r3, #0
 8006354:	f43f af66 	beq.w	8006224 <HAL_SD_IRQHandler+0x70>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006358:	6822      	ldr	r2, [r4, #0]
 800635a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800635c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006360:	63d3      	str	r3, [r2, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	2200      	movs	r2, #0
 8006366:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006368:	2301      	movs	r3, #1
 800636a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800636e:	4620      	mov	r0, r4
 8006370:	f7ff fbc6 	bl	8005b00 <HAL_SD_ErrorCallback>
 8006374:	e756      	b.n	8006224 <HAL_SD_IRQHandler+0x70>
    SD_Write_IT(hsd);
 8006376:	4620      	mov	r0, r4
 8006378:	f7ff f824 	bl	80053c4 <SD_Write_IT>
 800637c:	e752      	b.n	8006224 <HAL_SD_IRQHandler+0x70>
      hsd->State = HAL_SD_STATE_READY;
 800637e:	2301      	movs	r3, #1
 8006380:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006384:	2300      	movs	r3, #0
 8006386:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8006388:	4620      	mov	r0, r4
 800638a:	f7ff fbb9 	bl	8005b00 <HAL_SD_ErrorCallback>
 800638e:	e749      	b.n	8006224 <HAL_SD_IRQHandler+0x70>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006392:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8006396:	f43f af45 	beq.w	8006224 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800639a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800639e:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a4:	f013 0f04 	tst.w	r3, #4
 80063a8:	d10a      	bne.n	80063c0 <HAL_SD_IRQHandler+0x20c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80063aa:	f015 0f20 	tst.w	r5, #32
 80063ae:	d003      	beq.n	80063b8 <HAL_SD_IRQHandler+0x204>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80063b0:	4620      	mov	r0, r4
 80063b2:	f7ff fefe 	bl	80061b2 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 80063b6:	e735      	b.n	8006224 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80063b8:	4620      	mov	r0, r4
 80063ba:	f7ff fef8 	bl	80061ae <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 80063be:	e731      	b.n	8006224 <HAL_SD_IRQHandler+0x70>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80063c0:	f015 0f20 	tst.w	r5, #32
 80063c4:	d003      	beq.n	80063ce <HAL_SD_IRQHandler+0x21a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80063c6:	4620      	mov	r0, r4
 80063c8:	f7ff fef2 	bl	80061b0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 80063cc:	e72a      	b.n	8006224 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80063ce:	4620      	mov	r0, r4
 80063d0:	f7ff feec 	bl	80061ac <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80063d4:	e726      	b.n	8006224 <HAL_SD_IRQHandler+0x70>
 80063d6:	bf00      	nop
 80063d8:	ffff3ec5 	.word	0xffff3ec5
 80063dc:	18000f3a 	.word	0x18000f3a

080063e0 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80063e0:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <SDMMC_GetCmdError+0x30>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a0b      	ldr	r2, [pc, #44]	; (8006414 <SDMMC_GetCmdError+0x34>)
 80063e6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ea:	0a5b      	lsrs	r3, r3, #9
 80063ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f0:	fb02 f303 	mul.w	r3, r2, r3

  do
  {
    if (count-- == 0U)
 80063f4:	461a      	mov	r2, r3
 80063f6:	3b01      	subs	r3, #1
 80063f8:	b13a      	cbz	r2, 800640a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80063fa:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80063fc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006400:	d0f8      	beq.n	80063f4 <SDMMC_GetCmdError+0x14>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006402:	4b05      	ldr	r3, [pc, #20]	; (8006418 <SDMMC_GetCmdError+0x38>)
 8006404:	6383      	str	r3, [r0, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8006406:	2000      	movs	r0, #0
 8006408:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800640a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800640e:	4770      	bx	lr
 8006410:	20000004 	.word	0x20000004
 8006414:	10624dd3 	.word	0x10624dd3
 8006418:	002000c5 	.word	0x002000c5

0800641c <SDMMC_Init>:
{
 800641c:	b084      	sub	sp, #16
 800641e:	f10d 0c04 	add.w	ip, sp, #4
 8006422:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 8006426:	460b      	mov	r3, r1
 8006428:	4313      	orrs	r3, r2
             Init.BusWide             | \
 800642a:	9a03      	ldr	r2, [sp, #12]
             Init.ClockPowerSave      | \
 800642c:	4313      	orrs	r3, r2
             Init.HardwareFlowControl | \
 800642e:	9a04      	ldr	r2, [sp, #16]
             Init.BusWide             | \
 8006430:	4313      	orrs	r3, r2
             Init.ClockDiv
 8006432:	9a05      	ldr	r2, [sp, #20]
             Init.HardwareFlowControl | \
 8006434:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006436:	6841      	ldr	r1, [r0, #4]
 8006438:	4a03      	ldr	r2, [pc, #12]	; (8006448 <SDMMC_Init+0x2c>)
 800643a:	400a      	ands	r2, r1
 800643c:	4313      	orrs	r3, r2
 800643e:	6043      	str	r3, [r0, #4]
}
 8006440:	2000      	movs	r0, #0
 8006442:	b004      	add	sp, #16
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	ffc02c00 	.word	0xffc02c00

0800644c <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800644c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8006450:	4770      	bx	lr

08006452 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 8006452:	680b      	ldr	r3, [r1, #0]
 8006454:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8006458:	2000      	movs	r0, #0
 800645a:	4770      	bx	lr

0800645c <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800645c:	6803      	ldr	r3, [r0, #0]
 800645e:	f043 0303 	orr.w	r3, r3, #3
 8006462:	6003      	str	r3, [r0, #0]
}
 8006464:	2000      	movs	r0, #0
 8006466:	4770      	bx	lr

08006468 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006468:	6800      	ldr	r0, [r0, #0]
}
 800646a:	f000 0003 	and.w	r0, r0, #3
 800646e:	4770      	bx	lr

08006470 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8006470:	680b      	ldr	r3, [r1, #0]
 8006472:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006474:	684b      	ldr	r3, [r1, #4]
                       Command->Response         | \
 8006476:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006478:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt | \
 800647a:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         | \
 800647c:	4313      	orrs	r3, r2
                       Command->CPSM);
 800647e:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt | \
 8006480:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006482:	68c1      	ldr	r1, [r0, #12]
 8006484:	4a02      	ldr	r2, [pc, #8]	; (8006490 <SDMMC_SendCommand+0x20>)
 8006486:	400a      	ands	r2, r1
 8006488:	4313      	orrs	r3, r2
 800648a:	60c3      	str	r3, [r0, #12]
}
 800648c:	2000      	movs	r0, #0
 800648e:	4770      	bx	lr
 8006490:	fffee0c0 	.word	0xfffee0c0

08006494 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 8006494:	6900      	ldr	r0, [r0, #16]
}
 8006496:	b2c0      	uxtb	r0, r0
 8006498:	4770      	bx	lr

0800649a <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800649a:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800649c:	5840      	ldr	r0, [r0, r1]
}
 800649e:	4770      	bx	lr

080064a0 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 80064a0:	680b      	ldr	r3, [r1, #0]
 80064a2:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 80064a4:	684b      	ldr	r3, [r1, #4]
 80064a6:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80064a8:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   | \
 80064aa:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80064ac:	4313      	orrs	r3, r2
                       Data->TransferMode  | \
 80064ae:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   | \
 80064b0:	4313      	orrs	r3, r2
                       Data->DPSM);
 80064b2:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  | \
 80064b4:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80064b6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80064b8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80064bc:	4313      	orrs	r3, r2
 80064be:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80064c0:	2000      	movs	r0, #0
 80064c2:	4770      	bx	lr

080064c4 <SDMMC_CmdGoIdleState>:
{
 80064c4:	b510      	push	{r4, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80064ce:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80064d0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80064d2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80064d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064d8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80064da:	a901      	add	r1, sp, #4
 80064dc:	f7ff ffc8 	bl	8006470 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80064e0:	4620      	mov	r0, r4
 80064e2:	f7ff ff7d 	bl	80063e0 <SDMMC_GetCmdError>
}
 80064e6:	b006      	add	sp, #24
 80064e8:	bd10      	pop	{r4, pc}
	...

080064ec <SDMMC_GetCmdResp1>:
{
 80064ec:	b570      	push	{r4, r5, r6, lr}
 80064ee:	4605      	mov	r5, r0
 80064f0:	460e      	mov	r6, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80064f2:	4b51      	ldr	r3, [pc, #324]	; (8006638 <SDMMC_GetCmdResp1+0x14c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4951      	ldr	r1, [pc, #324]	; (800663c <SDMMC_GetCmdResp1+0x150>)
 80064f8:	fba1 1303 	umull	r1, r3, r1, r3
 80064fc:	0a5b      	lsrs	r3, r3, #9
 80064fe:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 8006502:	4613      	mov	r3, r2
 8006504:	3a01      	subs	r2, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	d05e      	beq.n	80065c8 <SDMMC_GetCmdResp1+0xdc>
    sta_reg = SDMMCx->STA;
 800650a:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800650c:	4b4c      	ldr	r3, [pc, #304]	; (8006640 <SDMMC_GetCmdResp1+0x154>)
 800650e:	4023      	ands	r3, r4
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006510:	2b00      	cmp	r3, #0
 8006512:	d0f6      	beq.n	8006502 <SDMMC_GetCmdResp1+0x16>
 8006514:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 8006518:	d1f3      	bne.n	8006502 <SDMMC_GetCmdResp1+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800651a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800651c:	f013 0f04 	tst.w	r3, #4
 8006520:	d106      	bne.n	8006530 <SDMMC_GetCmdResp1+0x44>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006522:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006524:	f013 0f01 	tst.w	r3, #1
 8006528:	d005      	beq.n	8006536 <SDMMC_GetCmdResp1+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800652a:	2001      	movs	r0, #1
 800652c:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800652e:	e04d      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006530:	2004      	movs	r0, #4
 8006532:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006534:	e04a      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006536:	4b43      	ldr	r3, [pc, #268]	; (8006644 <SDMMC_GetCmdResp1+0x158>)
 8006538:	63ab      	str	r3, [r5, #56]	; 0x38
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800653a:	4628      	mov	r0, r5
 800653c:	f7ff ffaa 	bl	8006494 <SDMMC_GetCommandResponse>
 8006540:	42b0      	cmp	r0, r6
 8006542:	d001      	beq.n	8006548 <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006544:	2001      	movs	r0, #1
 8006546:	e041      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006548:	2100      	movs	r1, #0
 800654a:	4628      	mov	r0, r5
 800654c:	f7ff ffa5 	bl	800649a <SDMMC_GetResponse>
 8006550:	4603      	mov	r3, r0
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006552:	483d      	ldr	r0, [pc, #244]	; (8006648 <SDMMC_GetCmdResp1+0x15c>)
 8006554:	4018      	ands	r0, r3
 8006556:	b3c8      	cbz	r0, 80065cc <SDMMC_GetCmdResp1+0xe0>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006558:	2b00      	cmp	r3, #0
 800655a:	db38      	blt.n	80065ce <SDMMC_GetCmdResp1+0xe2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800655c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006560:	d138      	bne.n	80065d4 <SDMMC_GetCmdResp1+0xe8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006562:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8006566:	d137      	bne.n	80065d8 <SDMMC_GetCmdResp1+0xec>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006568:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800656c:	d136      	bne.n	80065dc <SDMMC_GetCmdResp1+0xf0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800656e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006572:	d136      	bne.n	80065e2 <SDMMC_GetCmdResp1+0xf6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006574:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8006578:	d136      	bne.n	80065e8 <SDMMC_GetCmdResp1+0xfc>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800657a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800657e:	d136      	bne.n	80065ee <SDMMC_GetCmdResp1+0x102>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006580:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006584:	d136      	bne.n	80065f4 <SDMMC_GetCmdResp1+0x108>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006586:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800658a:	d136      	bne.n	80065fa <SDMMC_GetCmdResp1+0x10e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800658c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8006590:	d136      	bne.n	8006600 <SDMMC_GetCmdResp1+0x114>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006592:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006596:	d136      	bne.n	8006606 <SDMMC_GetCmdResp1+0x11a>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006598:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800659c:	d136      	bne.n	800660c <SDMMC_GetCmdResp1+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800659e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80065a2:	d136      	bne.n	8006612 <SDMMC_GetCmdResp1+0x126>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80065a4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80065a8:	d136      	bne.n	8006618 <SDMMC_GetCmdResp1+0x12c>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80065aa:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80065ae:	d136      	bne.n	800661e <SDMMC_GetCmdResp1+0x132>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80065b0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80065b4:	d136      	bne.n	8006624 <SDMMC_GetCmdResp1+0x138>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80065b6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80065ba:	d136      	bne.n	800662a <SDMMC_GetCmdResp1+0x13e>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80065bc:	f013 0f08 	tst.w	r3, #8
 80065c0:	d036      	beq.n	8006630 <SDMMC_GetCmdResp1+0x144>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80065c2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80065c6:	e001      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
      return SDMMC_ERROR_TIMEOUT;
 80065c8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80065cc:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80065ce:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80065d2:	e7fb      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80065d4:	2040      	movs	r0, #64	; 0x40
 80065d6:	e7f9      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80065d8:	2080      	movs	r0, #128	; 0x80
 80065da:	e7f7      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80065dc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80065e0:	e7f4      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80065e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80065e6:	e7f1      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80065e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80065ec:	e7ee      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80065ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80065f2:	e7eb      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80065f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80065f8:	e7e8      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80065fa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80065fe:	e7e5      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006600:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006604:	e7e2      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CC_ERR;
 8006606:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800660a:	e7df      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800660c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006610:	e7dc      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006612:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8006616:	e7d9      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006618:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800661c:	e7d6      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800661e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006622:	e7d3      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006624:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006628:	e7d0      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_RESET;
 800662a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800662e:	e7cd      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006630:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006634:	e7ca      	b.n	80065cc <SDMMC_GetCmdResp1+0xe0>
 8006636:	bf00      	nop
 8006638:	20000004 	.word	0x20000004
 800663c:	10624dd3 	.word	0x10624dd3
 8006640:	00200045 	.word	0x00200045
 8006644:	002000c5 	.word	0x002000c5
 8006648:	fdffe008 	.word	0xfdffe008

0800664c <SDMMC_CmdBlockLength>:
{
 800664c:	b530      	push	{r4, r5, lr}
 800664e:	b087      	sub	sp, #28
 8006650:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006652:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006654:	2510      	movs	r5, #16
 8006656:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006658:	f44f 7380 	mov.w	r3, #256	; 0x100
 800665c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800665e:	2300      	movs	r3, #0
 8006660:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006666:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006668:	a901      	add	r1, sp, #4
 800666a:	f7ff ff01 	bl	8006470 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800666e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006672:	4629      	mov	r1, r5
 8006674:	4620      	mov	r0, r4
 8006676:	f7ff ff39 	bl	80064ec <SDMMC_GetCmdResp1>
}
 800667a:	b007      	add	sp, #28
 800667c:	bd30      	pop	{r4, r5, pc}

0800667e <SDMMC_CmdReadSingleBlock>:
{
 800667e:	b530      	push	{r4, r5, lr}
 8006680:	b087      	sub	sp, #28
 8006682:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006684:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006686:	2511      	movs	r5, #17
 8006688:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800668a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800668e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006690:	2300      	movs	r3, #0
 8006692:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006698:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800669a:	a901      	add	r1, sp, #4
 800669c:	f7ff fee8 	bl	8006470 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80066a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a4:	4629      	mov	r1, r5
 80066a6:	4620      	mov	r0, r4
 80066a8:	f7ff ff20 	bl	80064ec <SDMMC_GetCmdResp1>
}
 80066ac:	b007      	add	sp, #28
 80066ae:	bd30      	pop	{r4, r5, pc}

080066b0 <SDMMC_CmdReadMultiBlock>:
{
 80066b0:	b530      	push	{r4, r5, lr}
 80066b2:	b087      	sub	sp, #28
 80066b4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80066b6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80066b8:	2512      	movs	r5, #18
 80066ba:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80066bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066c0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80066c2:	2300      	movs	r3, #0
 80066c4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80066c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066ca:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80066cc:	a901      	add	r1, sp, #4
 80066ce:	f7ff fecf 	bl	8006470 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80066d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066d6:	4629      	mov	r1, r5
 80066d8:	4620      	mov	r0, r4
 80066da:	f7ff ff07 	bl	80064ec <SDMMC_GetCmdResp1>
}
 80066de:	b007      	add	sp, #28
 80066e0:	bd30      	pop	{r4, r5, pc}

080066e2 <SDMMC_CmdWriteSingleBlock>:
{
 80066e2:	b530      	push	{r4, r5, lr}
 80066e4:	b087      	sub	sp, #28
 80066e6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80066e8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80066ea:	2518      	movs	r5, #24
 80066ec:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80066ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066f2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80066f4:	2300      	movs	r3, #0
 80066f6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80066f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066fc:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80066fe:	a901      	add	r1, sp, #4
 8006700:	f7ff feb6 	bl	8006470 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006704:	f241 3288 	movw	r2, #5000	; 0x1388
 8006708:	4629      	mov	r1, r5
 800670a:	4620      	mov	r0, r4
 800670c:	f7ff feee 	bl	80064ec <SDMMC_GetCmdResp1>
}
 8006710:	b007      	add	sp, #28
 8006712:	bd30      	pop	{r4, r5, pc}

08006714 <SDMMC_CmdWriteMultiBlock>:
{
 8006714:	b530      	push	{r4, r5, lr}
 8006716:	b087      	sub	sp, #28
 8006718:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800671a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800671c:	2519      	movs	r5, #25
 800671e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006724:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006726:	2300      	movs	r3, #0
 8006728:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800672a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800672e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006730:	a901      	add	r1, sp, #4
 8006732:	f7ff fe9d 	bl	8006470 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006736:	f241 3288 	movw	r2, #5000	; 0x1388
 800673a:	4629      	mov	r1, r5
 800673c:	4620      	mov	r0, r4
 800673e:	f7ff fed5 	bl	80064ec <SDMMC_GetCmdResp1>
}
 8006742:	b007      	add	sp, #28
 8006744:	bd30      	pop	{r4, r5, pc}
	...

08006748 <SDMMC_CmdStopTransfer>:
{
 8006748:	b530      	push	{r4, r5, lr}
 800674a:	b087      	sub	sp, #28
 800674c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006752:	250c      	movs	r5, #12
 8006754:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006756:	f44f 7280 	mov.w	r2, #256	; 0x100
 800675a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800675c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800675e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006762:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8006764:	68c3      	ldr	r3, [r0, #12]
 8006766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676a:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800676c:	68c3      	ldr	r3, [r0, #12]
 800676e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006772:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006774:	a901      	add	r1, sp, #4
 8006776:	f7ff fe7b 	bl	8006470 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800677a:	4a08      	ldr	r2, [pc, #32]	; (800679c <SDMMC_CmdStopTransfer+0x54>)
 800677c:	4629      	mov	r1, r5
 800677e:	4620      	mov	r0, r4
 8006780:	f7ff feb4 	bl	80064ec <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006784:	68e3      	ldr	r3, [r4, #12]
 8006786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800678a:	60e3      	str	r3, [r4, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800678c:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8006790:	d001      	beq.n	8006796 <SDMMC_CmdStopTransfer+0x4e>
}
 8006792:	b007      	add	sp, #28
 8006794:	bd30      	pop	{r4, r5, pc}
    errorstate = SDMMC_ERROR_NONE;
 8006796:	2000      	movs	r0, #0
  return errorstate;
 8006798:	e7fb      	b.n	8006792 <SDMMC_CmdStopTransfer+0x4a>
 800679a:	bf00      	nop
 800679c:	05f5e100 	.word	0x05f5e100

080067a0 <SDMMC_CmdSelDesel>:
{
 80067a0:	b530      	push	{r4, r5, lr}
 80067a2:	b087      	sub	sp, #28
 80067a4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80067a6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80067a8:	2507      	movs	r5, #7
 80067aa:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80067ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067b0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80067b2:	2300      	movs	r3, #0
 80067b4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80067b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067ba:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80067bc:	a901      	add	r1, sp, #4
 80067be:	f7ff fe57 	bl	8006470 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80067c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067c6:	4629      	mov	r1, r5
 80067c8:	4620      	mov	r0, r4
 80067ca:	f7ff fe8f 	bl	80064ec <SDMMC_GetCmdResp1>
}
 80067ce:	b007      	add	sp, #28
 80067d0:	bd30      	pop	{r4, r5, pc}

080067d2 <SDMMC_CmdAppCommand>:
{
 80067d2:	b530      	push	{r4, r5, lr}
 80067d4:	b087      	sub	sp, #28
 80067d6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80067d8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80067da:	2537      	movs	r5, #55	; 0x37
 80067dc:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80067de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067e2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80067e4:	2300      	movs	r3, #0
 80067e6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80067e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067ec:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80067ee:	a901      	add	r1, sp, #4
 80067f0:	f7ff fe3e 	bl	8006470 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80067f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f8:	4629      	mov	r1, r5
 80067fa:	4620      	mov	r0, r4
 80067fc:	f7ff fe76 	bl	80064ec <SDMMC_GetCmdResp1>
}
 8006800:	b007      	add	sp, #28
 8006802:	bd30      	pop	{r4, r5, pc}

08006804 <SDMMC_CmdBusWidth>:
{
 8006804:	b530      	push	{r4, r5, lr}
 8006806:	b087      	sub	sp, #28
 8006808:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800680a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800680c:	2506      	movs	r5, #6
 800680e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006814:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006816:	2300      	movs	r3, #0
 8006818:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800681a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800681e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006820:	a901      	add	r1, sp, #4
 8006822:	f7ff fe25 	bl	8006470 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8006826:	f241 3288 	movw	r2, #5000	; 0x1388
 800682a:	4629      	mov	r1, r5
 800682c:	4620      	mov	r0, r4
 800682e:	f7ff fe5d 	bl	80064ec <SDMMC_GetCmdResp1>
}
 8006832:	b007      	add	sp, #28
 8006834:	bd30      	pop	{r4, r5, pc}

08006836 <SDMMC_CmdSendSCR>:
{
 8006836:	b530      	push	{r4, r5, lr}
 8006838:	b087      	sub	sp, #28
 800683a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006840:	2533      	movs	r5, #51	; 0x33
 8006842:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006844:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006848:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800684a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800684c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006850:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006852:	a901      	add	r1, sp, #4
 8006854:	f7ff fe0c 	bl	8006470 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8006858:	f241 3288 	movw	r2, #5000	; 0x1388
 800685c:	4629      	mov	r1, r5
 800685e:	4620      	mov	r0, r4
 8006860:	f7ff fe44 	bl	80064ec <SDMMC_GetCmdResp1>
}
 8006864:	b007      	add	sp, #28
 8006866:	bd30      	pop	{r4, r5, pc}

08006868 <SDMMC_CmdSendStatus>:
{
 8006868:	b530      	push	{r4, r5, lr}
 800686a:	b087      	sub	sp, #28
 800686c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800686e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006870:	250d      	movs	r5, #13
 8006872:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006874:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006878:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800687a:	2300      	movs	r3, #0
 800687c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800687e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006882:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006884:	a901      	add	r1, sp, #4
 8006886:	f7ff fdf3 	bl	8006470 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800688a:	f241 3288 	movw	r2, #5000	; 0x1388
 800688e:	4629      	mov	r1, r5
 8006890:	4620      	mov	r0, r4
 8006892:	f7ff fe2b 	bl	80064ec <SDMMC_GetCmdResp1>
}
 8006896:	b007      	add	sp, #28
 8006898:	bd30      	pop	{r4, r5, pc}

0800689a <SDMMC_CmdStatusRegister>:
{
 800689a:	b530      	push	{r4, r5, lr}
 800689c:	b087      	sub	sp, #28
 800689e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80068a4:	250d      	movs	r5, #13
 80068a6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80068a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068ac:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80068ae:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068b4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068b6:	a901      	add	r1, sp, #4
 80068b8:	f7ff fdda 	bl	8006470 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80068bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c0:	4629      	mov	r1, r5
 80068c2:	4620      	mov	r0, r4
 80068c4:	f7ff fe12 	bl	80064ec <SDMMC_GetCmdResp1>
}
 80068c8:	b007      	add	sp, #28
 80068ca:	bd30      	pop	{r4, r5, pc}

080068cc <SDMMC_GetCmdResp2>:
{
 80068cc:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80068ce:	4b14      	ldr	r3, [pc, #80]	; (8006920 <SDMMC_GetCmdResp2+0x54>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a14      	ldr	r2, [pc, #80]	; (8006924 <SDMMC_GetCmdResp2+0x58>)
 80068d4:	fba2 2303 	umull	r2, r3, r2, r3
 80068d8:	0a5b      	lsrs	r3, r3, #9
 80068da:	f241 3288 	movw	r2, #5000	; 0x1388
 80068de:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 80068e2:	461a      	mov	r2, r3
 80068e4:	3b01      	subs	r3, #1
 80068e6:	b1ba      	cbz	r2, 8006918 <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDMMCx->STA;
 80068e8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80068ea:	f012 0f45 	tst.w	r2, #69	; 0x45
 80068ee:	d0f8      	beq.n	80068e2 <SDMMC_GetCmdResp2+0x16>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80068f0:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80068f4:	d1f5      	bne.n	80068e2 <SDMMC_GetCmdResp2+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80068f6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80068f8:	f013 0f04 	tst.w	r3, #4
 80068fc:	d106      	bne.n	800690c <SDMMC_GetCmdResp2+0x40>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80068fe:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8006900:	f010 0001 	ands.w	r0, r0, #1
 8006904:	d105      	bne.n	8006912 <SDMMC_GetCmdResp2+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006906:	4b08      	ldr	r3, [pc, #32]	; (8006928 <SDMMC_GetCmdResp2+0x5c>)
 8006908:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800690a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800690c:	2004      	movs	r0, #4
 800690e:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006910:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006912:	2001      	movs	r0, #1
 8006914:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006916:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8006918:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	20000004 	.word	0x20000004
 8006924:	10624dd3 	.word	0x10624dd3
 8006928:	002000c5 	.word	0x002000c5

0800692c <SDMMC_CmdSendCID>:
{
 800692c:	b510      	push	{r4, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006936:	2202      	movs	r2, #2
 8006938:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800693a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800693e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006940:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006946:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006948:	a901      	add	r1, sp, #4
 800694a:	f7ff fd91 	bl	8006470 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800694e:	4620      	mov	r0, r4
 8006950:	f7ff ffbc 	bl	80068cc <SDMMC_GetCmdResp2>
}
 8006954:	b006      	add	sp, #24
 8006956:	bd10      	pop	{r4, pc}

08006958 <SDMMC_CmdSendCSD>:
{
 8006958:	b510      	push	{r4, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800695e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006960:	2309      	movs	r3, #9
 8006962:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006964:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006968:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800696a:	2300      	movs	r3, #0
 800696c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800696e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006972:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006974:	a901      	add	r1, sp, #4
 8006976:	f7ff fd7b 	bl	8006470 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800697a:	4620      	mov	r0, r4
 800697c:	f7ff ffa6 	bl	80068cc <SDMMC_GetCmdResp2>
}
 8006980:	b006      	add	sp, #24
 8006982:	bd10      	pop	{r4, pc}

08006984 <SDMMC_GetCmdResp3>:
{
 8006984:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006986:	4b10      	ldr	r3, [pc, #64]	; (80069c8 <SDMMC_GetCmdResp3+0x44>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a10      	ldr	r2, [pc, #64]	; (80069cc <SDMMC_GetCmdResp3+0x48>)
 800698c:	fba2 2303 	umull	r2, r3, r2, r3
 8006990:	0a5b      	lsrs	r3, r3, #9
 8006992:	f241 3288 	movw	r2, #5000	; 0x1388
 8006996:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800699a:	461a      	mov	r2, r3
 800699c:	3b01      	subs	r3, #1
 800699e:	b182      	cbz	r2, 80069c2 <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDMMCx->STA;
 80069a0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80069a2:	f012 0f45 	tst.w	r2, #69	; 0x45
 80069a6:	d0f8      	beq.n	800699a <SDMMC_GetCmdResp3+0x16>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80069a8:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80069ac:	d1f5      	bne.n	800699a <SDMMC_GetCmdResp3+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80069ae:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80069b0:	f010 0004 	ands.w	r0, r0, #4
 80069b4:	d102      	bne.n	80069bc <SDMMC_GetCmdResp3+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80069b6:	4b06      	ldr	r3, [pc, #24]	; (80069d0 <SDMMC_GetCmdResp3+0x4c>)
 80069b8:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80069ba:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80069bc:	2004      	movs	r0, #4
 80069be:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80069c0:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80069c2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80069c6:	4770      	bx	lr
 80069c8:	20000004 	.word	0x20000004
 80069cc:	10624dd3 	.word	0x10624dd3
 80069d0:	002000c5 	.word	0x002000c5

080069d4 <SDMMC_CmdAppOperCommand>:
{
 80069d4:	b510      	push	{r4, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80069da:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80069dc:	2329      	movs	r3, #41	; 0x29
 80069de:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80069e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069e4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80069e6:	2300      	movs	r3, #0
 80069e8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069ee:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069f0:	a901      	add	r1, sp, #4
 80069f2:	f7ff fd3d 	bl	8006470 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80069f6:	4620      	mov	r0, r4
 80069f8:	f7ff ffc4 	bl	8006984 <SDMMC_GetCmdResp3>
}
 80069fc:	b006      	add	sp, #24
 80069fe:	bd10      	pop	{r4, pc}

08006a00 <SDMMC_GetCmdResp6>:
{
 8006a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a02:	4605      	mov	r5, r0
 8006a04:	460e      	mov	r6, r1
 8006a06:	4617      	mov	r7, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006a08:	4b23      	ldr	r3, [pc, #140]	; (8006a98 <SDMMC_GetCmdResp6+0x98>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a23      	ldr	r2, [pc, #140]	; (8006a9c <SDMMC_GetCmdResp6+0x9c>)
 8006a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a12:	0a5b      	lsrs	r3, r3, #9
 8006a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a18:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	b38a      	cbz	r2, 8006a86 <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDMMCx->STA;
 8006a22:	6b6c      	ldr	r4, [r5, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006a24:	f014 0f45 	tst.w	r4, #69	; 0x45
 8006a28:	d0f8      	beq.n	8006a1c <SDMMC_GetCmdResp6+0x1c>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006a2a:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 8006a2e:	d1f5      	bne.n	8006a1c <SDMMC_GetCmdResp6+0x1c>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006a30:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006a32:	f013 0f04 	tst.w	r3, #4
 8006a36:	d106      	bne.n	8006a46 <SDMMC_GetCmdResp6+0x46>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006a38:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006a3a:	f013 0f01 	tst.w	r3, #1
 8006a3e:	d005      	beq.n	8006a4c <SDMMC_GetCmdResp6+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006a40:	2001      	movs	r0, #1
 8006a42:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a44:	e021      	b.n	8006a8a <SDMMC_GetCmdResp6+0x8a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006a46:	2004      	movs	r0, #4
 8006a48:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006a4a:	e01e      	b.n	8006a8a <SDMMC_GetCmdResp6+0x8a>
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	f7ff fd21 	bl	8006494 <SDMMC_GetCommandResponse>
 8006a52:	42b0      	cmp	r0, r6
 8006a54:	d001      	beq.n	8006a5a <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a56:	2001      	movs	r0, #1
 8006a58:	e017      	b.n	8006a8a <SDMMC_GetCmdResp6+0x8a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006a5a:	4b11      	ldr	r3, [pc, #68]	; (8006aa0 <SDMMC_GetCmdResp6+0xa0>)
 8006a5c:	63ab      	str	r3, [r5, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006a5e:	2100      	movs	r1, #0
 8006a60:	4628      	mov	r0, r5
 8006a62:	f7ff fd1a 	bl	800649a <SDMMC_GetResponse>
 8006a66:	4603      	mov	r3, r0
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8006a68:	f410 4060 	ands.w	r0, r0, #57344	; 0xe000
 8006a6c:	d008      	beq.n	8006a80 <SDMMC_GetCmdResp6+0x80>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006a6e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006a72:	d10b      	bne.n	8006a8c <SDMMC_GetCmdResp6+0x8c>
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006a74:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006a78:	d00b      	beq.n	8006a92 <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006a7a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006a7e:	e004      	b.n	8006a8a <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t)(response_r1 >> 16);
 8006a80:	0c1b      	lsrs	r3, r3, #16
 8006a82:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 8006a84:	e001      	b.n	8006a8a <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 8006a86:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006a8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006a90:	e7fb      	b.n	8006a8a <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006a92:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006a96:	e7f8      	b.n	8006a8a <SDMMC_GetCmdResp6+0x8a>
 8006a98:	20000004 	.word	0x20000004
 8006a9c:	10624dd3 	.word	0x10624dd3
 8006aa0:	002000c5 	.word	0x002000c5

08006aa4 <SDMMC_CmdSetRelAdd>:
{
 8006aa4:	b570      	push	{r4, r5, r6, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006ab0:	2603      	movs	r6, #3
 8006ab2:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006ab4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ab8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006aba:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ac0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ac2:	a901      	add	r1, sp, #4
 8006ac4:	f7ff fcd4 	bl	8006470 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006ac8:	462a      	mov	r2, r5
 8006aca:	4631      	mov	r1, r6
 8006acc:	4620      	mov	r0, r4
 8006ace:	f7ff ff97 	bl	8006a00 <SDMMC_GetCmdResp6>
}
 8006ad2:	b006      	add	sp, #24
 8006ad4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ad8 <SDMMC_GetCmdResp7>:
{
 8006ad8:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006ada:	4b16      	ldr	r3, [pc, #88]	; (8006b34 <SDMMC_GetCmdResp7+0x5c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a16      	ldr	r2, [pc, #88]	; (8006b38 <SDMMC_GetCmdResp7+0x60>)
 8006ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae4:	0a5b      	lsrs	r3, r3, #9
 8006ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aea:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8006aee:	461a      	mov	r2, r3
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b1e2      	cbz	r2, 8006b2e <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDMMCx->STA;
 8006af4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006af6:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006afa:	d0f8      	beq.n	8006aee <SDMMC_GetCmdResp7+0x16>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006afc:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8006b00:	d1f5      	bne.n	8006aee <SDMMC_GetCmdResp7+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006b02:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006b04:	f013 0f04 	tst.w	r3, #4
 8006b08:	d10b      	bne.n	8006b22 <SDMMC_GetCmdResp7+0x4a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006b0a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006b0c:	f013 0301 	ands.w	r3, r3, #1
 8006b10:	d10a      	bne.n	8006b28 <SDMMC_GetCmdResp7+0x50>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006b12:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8006b14:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8006b18:	d00b      	beq.n	8006b32 <SDMMC_GetCmdResp7+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006b1a:	2240      	movs	r2, #64	; 0x40
 8006b1c:	638a      	str	r2, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8006b1e:	4618      	mov	r0, r3
 8006b20:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006b22:	2004      	movs	r0, #4
 8006b24:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006b26:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006b28:	2001      	movs	r0, #1
 8006b2a:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006b2c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8006b2e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006b32:	4770      	bx	lr
 8006b34:	20000004 	.word	0x20000004
 8006b38:	10624dd3 	.word	0x10624dd3

08006b3c <SDMMC_CmdOperCond>:
{
 8006b3c:	b510      	push	{r4, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006b42:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006b46:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006b48:	2308      	movs	r3, #8
 8006b4a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b50:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b52:	2300      	movs	r3, #0
 8006b54:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b5a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b5c:	a901      	add	r1, sp, #4
 8006b5e:	f7ff fc87 	bl	8006470 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8006b62:	4620      	mov	r0, r4
 8006b64:	f7ff ffb8 	bl	8006ad8 <SDMMC_GetCmdResp7>
}
 8006b68:	b006      	add	sp, #24
 8006b6a:	bd10      	pop	{r4, pc}

08006b6c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006b6c:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006b6e:	4903      	ldr	r1, [pc, #12]	; (8006b7c <MX_FATFS_Init+0x10>)
 8006b70:	4803      	ldr	r0, [pc, #12]	; (8006b80 <MX_FATFS_Init+0x14>)
 8006b72:	f001 ffd7 	bl	8008b24 <FATFS_LinkDriver>
 8006b76:	4b03      	ldr	r3, [pc, #12]	; (8006b84 <MX_FATFS_Init+0x18>)
 8006b78:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006b7a:	bd08      	pop	{r3, pc}
 8006b7c:	20000714 	.word	0x20000714
 8006b80:	08008c78 	.word	0x08008c78
 8006b84:	20000718 	.word	0x20000718

08006b88 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8006b88:	2000      	movs	r0, #0
 8006b8a:	4770      	bx	lr

08006b8c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006b8c:	b500      	push	{lr}
 8006b8e:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	4613      	mov	r3, r2
 8006b94:	460a      	mov	r2, r1
 8006b96:	4601      	mov	r1, r0
 8006b98:	4803      	ldr	r0, [pc, #12]	; (8006ba8 <BSP_SD_ReadBlocks+0x1c>)
 8006b9a:	f7fe fda5 	bl	80056e8 <HAL_SD_ReadBlocks>
 8006b9e:	b100      	cbz	r0, 8006ba2 <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8006ba0:	2001      	movs	r0, #1
  }

  return sd_state;
}
 8006ba2:	b003      	add	sp, #12
 8006ba4:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ba8:	20000234 	.word	0x20000234

08006bac <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006bac:	b500      	push	{lr}
 8006bae:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	460a      	mov	r2, r1
 8006bb6:	4601      	mov	r1, r0
 8006bb8:	4803      	ldr	r0, [pc, #12]	; (8006bc8 <BSP_SD_WriteBlocks+0x1c>)
 8006bba:	f7fe fe97 	bl	80058ec <HAL_SD_WriteBlocks>
 8006bbe:	b100      	cbz	r0, 8006bc2 <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8006bc0:	2001      	movs	r0, #1
  }

  return sd_state;
}
 8006bc2:	b003      	add	sp, #12
 8006bc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bc8:	20000234 	.word	0x20000234

08006bcc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006bcc:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006bce:	4803      	ldr	r0, [pc, #12]	; (8006bdc <BSP_SD_GetCardState+0x10>)
 8006bd0:	f7ff fa7e 	bl	80060d0 <HAL_SD_GetCardState>
}
 8006bd4:	3804      	subs	r0, #4
 8006bd6:	bf18      	it	ne
 8006bd8:	2001      	movne	r0, #1
 8006bda:	bd08      	pop	{r3, pc}
 8006bdc:	20000234 	.word	0x20000234

08006be0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006be0:	b508      	push	{r3, lr}
 8006be2:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8006be4:	4801      	ldr	r0, [pc, #4]	; (8006bec <BSP_SD_GetCardInfo+0xc>)
 8006be6:	f7ff f9b5 	bl	8005f54 <HAL_SD_GetCardInfo>
}
 8006bea:	bd08      	pop	{r3, pc}
 8006bec:	20000234 	.word	0x20000234

08006bf0 <BSP_SD_WriteCpltCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{

}
 8006bf0:	4770      	bx	lr

08006bf2 <HAL_SD_TxCpltCallback>:
{
 8006bf2:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8006bf4:	f7ff fffc 	bl	8006bf0 <BSP_SD_WriteCpltCallback>
}
 8006bf8:	bd08      	pop	{r3, pc}

08006bfa <BSP_SD_ReadCpltCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{

}
 8006bfa:	4770      	bx	lr

08006bfc <HAL_SD_RxCpltCallback>:
{
 8006bfc:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8006bfe:	f7ff fffc 	bl	8006bfa <BSP_SD_ReadCpltCallback>
}
 8006c02:	bd08      	pop	{r3, pc}

08006c04 <BSP_SD_Init>:
{
 8006c04:	b538      	push	{r3, r4, r5, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006c06:	f7f9 fd66 	bl	80006d6 <BSP_SD_IsDetected>
 8006c0a:	2801      	cmp	r0, #1
 8006c0c:	d002      	beq.n	8006c14 <BSP_SD_Init+0x10>
    return MSD_ERROR_SD_NOT_PRESENT;
 8006c0e:	2502      	movs	r5, #2
}
 8006c10:	4628      	mov	r0, r5
 8006c12:	bd38      	pop	{r3, r4, r5, pc}
 8006c14:	4604      	mov	r4, r0
  sd_state = HAL_SD_Init(&hsd1);
 8006c16:	4807      	ldr	r0, [pc, #28]	; (8006c34 <BSP_SD_Init+0x30>)
 8006c18:	f7ff fa6b 	bl	80060f2 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8006c1c:	4605      	mov	r5, r0
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d1f6      	bne.n	8006c10 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8006c22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c26:	4803      	ldr	r0, [pc, #12]	; (8006c34 <BSP_SD_Init+0x30>)
 8006c28:	f7ff f9a6 	bl	8005f78 <HAL_SD_ConfigWideBusOperation>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	d0ef      	beq.n	8006c10 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 8006c30:	4625      	mov	r5, r4
 8006c32:	e7ed      	b.n	8006c10 <BSP_SD_Init+0xc>
 8006c34:	20000234 	.word	0x20000234

08006c38 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006c38:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8006c3a:	4b07      	ldr	r3, [pc, #28]	; (8006c58 <SD_CheckStatus+0x20>)
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006c40:	f7ff ffc4 	bl	8006bcc <BSP_SD_GetCardState>
 8006c44:	b920      	cbnz	r0, 8006c50 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 8006c46:	4a04      	ldr	r2, [pc, #16]	; (8006c58 <SD_CheckStatus+0x20>)
 8006c48:	7813      	ldrb	r3, [r2, #0]
 8006c4a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006c4e:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8006c50:	4b01      	ldr	r3, [pc, #4]	; (8006c58 <SD_CheckStatus+0x20>)
 8006c52:	7818      	ldrb	r0, [r3, #0]
}
 8006c54:	bd08      	pop	{r3, pc}
 8006c56:	bf00      	nop
 8006c58:	20000014 	.word	0x20000014

08006c5c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006c5c:	b510      	push	{r4, lr}
 8006c5e:	4604      	mov	r4, r0
Stat = STA_NOINIT;
 8006c60:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <SD_initialize+0x24>)
 8006c62:	2201      	movs	r2, #1
 8006c64:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006c66:	f7ff ffcd 	bl	8006c04 <BSP_SD_Init>
 8006c6a:	b110      	cbz	r0, 8006c72 <SD_initialize+0x16>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006c6c:	4b04      	ldr	r3, [pc, #16]	; (8006c80 <SD_initialize+0x24>)
 8006c6e:	7818      	ldrb	r0, [r3, #0]
}
 8006c70:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 8006c72:	4620      	mov	r0, r4
 8006c74:	f7ff ffe0 	bl	8006c38 <SD_CheckStatus>
 8006c78:	4b01      	ldr	r3, [pc, #4]	; (8006c80 <SD_initialize+0x24>)
 8006c7a:	7018      	strb	r0, [r3, #0]
 8006c7c:	e7f6      	b.n	8006c6c <SD_initialize+0x10>
 8006c7e:	bf00      	nop
 8006c80:	20000014 	.word	0x20000014

08006c84 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006c84:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 8006c86:	f7ff ffd7 	bl	8006c38 <SD_CheckStatus>
}
 8006c8a:	bd08      	pop	{r3, pc}

08006c8c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006c8c:	b508      	push	{r3, lr}
 8006c8e:	4608      	mov	r0, r1
 8006c90:	4611      	mov	r1, r2
 8006c92:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c98:	f7ff ff78 	bl	8006b8c <BSP_SD_ReadBlocks>
 8006c9c:	b930      	cbnz	r0, 8006cac <SD_read+0x20>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006c9e:	f7ff ff95 	bl	8006bcc <BSP_SD_GetCardState>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d1fa      	bne.n	8006c9e <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e7fb      	b.n	8006ca8 <SD_read+0x1c>

08006cb0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006cb0:	b508      	push	{r3, lr}
 8006cb2:	4608      	mov	r0, r1
 8006cb4:	4611      	mov	r1, r2
 8006cb6:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cbc:	f7ff ff76 	bl	8006bac <BSP_SD_WriteBlocks>
 8006cc0:	b930      	cbnz	r0, 8006cd0 <SD_write+0x20>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006cc2:	f7ff ff83 	bl	8006bcc <BSP_SD_GetCardState>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	d1fa      	bne.n	8006cc2 <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e7fb      	b.n	8006ccc <SD_write+0x1c>

08006cd4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006cd4:	b530      	push	{r4, r5, lr}
 8006cd6:	b08b      	sub	sp, #44	; 0x2c
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006cd8:	4b13      	ldr	r3, [pc, #76]	; (8006d28 <SD_ioctl+0x54>)
 8006cda:	7818      	ldrb	r0, [r3, #0]
 8006cdc:	f010 0401 	ands.w	r4, r0, #1
 8006ce0:	d11b      	bne.n	8006d1a <SD_ioctl+0x46>
 8006ce2:	4615      	mov	r5, r2

  switch (cmd)
 8006ce4:	2903      	cmp	r1, #3
 8006ce6:	d81c      	bhi.n	8006d22 <SD_ioctl+0x4e>
 8006ce8:	e8df f001 	tbb	[pc, r1]
 8006cec:	100a0402 	.word	0x100a0402
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	e013      	b.n	8006d1c <SD_ioctl+0x48>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006cf4:	a801      	add	r0, sp, #4
 8006cf6:	f7ff ff73 	bl	8006be0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006cfa:	9b07      	ldr	r3, [sp, #28]
 8006cfc:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8006cfe:	e00d      	b.n	8006d1c <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006d00:	a801      	add	r0, sp, #4
 8006d02:	f7ff ff6d 	bl	8006be0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006d06:	9b08      	ldr	r3, [sp, #32]
 8006d08:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 8006d0a:	e007      	b.n	8006d1c <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006d0c:	a801      	add	r0, sp, #4
 8006d0e:	f7ff ff67 	bl	8006be0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006d12:	9b08      	ldr	r3, [sp, #32]
 8006d14:	0a5b      	lsrs	r3, r3, #9
 8006d16:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8006d18:	e000      	b.n	8006d1c <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006d1a:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	b00b      	add	sp, #44	; 0x2c
 8006d20:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 8006d22:	2404      	movs	r4, #4
 8006d24:	e7fa      	b.n	8006d1c <SD_ioctl+0x48>
 8006d26:	bf00      	nop
 8006d28:	20000014 	.word	0x20000014

08006d2c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006d2c:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006d2e:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <disk_status+0x14>)
 8006d30:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8006d34:	6852      	ldr	r2, [r2, #4]
 8006d36:	6852      	ldr	r2, [r2, #4]
 8006d38:	4403      	add	r3, r0
 8006d3a:	7a18      	ldrb	r0, [r3, #8]
 8006d3c:	4790      	blx	r2
  return stat;
}
 8006d3e:	bd08      	pop	{r3, pc}
 8006d40:	20000944 	.word	0x20000944

08006d44 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006d44:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8006d46:	4b08      	ldr	r3, [pc, #32]	; (8006d68 <disk_initialize+0x24>)
 8006d48:	5c1b      	ldrb	r3, [r3, r0]
 8006d4a:	b953      	cbnz	r3, 8006d62 <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8006d4c:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <disk_initialize+0x24>)
 8006d4e:	2201      	movs	r2, #1
 8006d50:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006d52:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8006d56:	6852      	ldr	r2, [r2, #4]
 8006d58:	6812      	ldr	r2, [r2, #0]
 8006d5a:	4418      	add	r0, r3
 8006d5c:	7a00      	ldrb	r0, [r0, #8]
 8006d5e:	4790      	blx	r2
  }
  return stat;
}
 8006d60:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8006d62:	2000      	movs	r0, #0
 8006d64:	e7fc      	b.n	8006d60 <disk_initialize+0x1c>
 8006d66:	bf00      	nop
 8006d68:	20000944 	.word	0x20000944

08006d6c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006d6c:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006d6e:	4c04      	ldr	r4, [pc, #16]	; (8006d80 <disk_read+0x14>)
 8006d70:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8006d74:	686d      	ldr	r5, [r5, #4]
 8006d76:	68ad      	ldr	r5, [r5, #8]
 8006d78:	4404      	add	r4, r0
 8006d7a:	7a20      	ldrb	r0, [r4, #8]
 8006d7c:	47a8      	blx	r5
  return res;
}
 8006d7e:	bd38      	pop	{r3, r4, r5, pc}
 8006d80:	20000944 	.word	0x20000944

08006d84 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006d84:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006d86:	4c04      	ldr	r4, [pc, #16]	; (8006d98 <disk_write+0x14>)
 8006d88:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8006d8c:	686d      	ldr	r5, [r5, #4]
 8006d8e:	68ed      	ldr	r5, [r5, #12]
 8006d90:	4404      	add	r4, r0
 8006d92:	7a20      	ldrb	r0, [r4, #8]
 8006d94:	47a8      	blx	r5
  return res;
}
 8006d96:	bd38      	pop	{r3, r4, r5, pc}
 8006d98:	20000944 	.word	0x20000944

08006d9c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006d9c:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006d9e:	4b04      	ldr	r3, [pc, #16]	; (8006db0 <disk_ioctl+0x14>)
 8006da0:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8006da4:	6864      	ldr	r4, [r4, #4]
 8006da6:	6924      	ldr	r4, [r4, #16]
 8006da8:	4403      	add	r3, r0
 8006daa:	7a18      	ldrb	r0, [r3, #8]
 8006dac:	47a0      	blx	r4
  return res;
}
 8006dae:	bd10      	pop	{r4, pc}
 8006db0:	20000944 	.word	0x20000944

08006db4 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 8006db4:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 8006db6:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8006db8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8006dbc:	4770      	bx	lr

08006dbe <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8006dbe:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 8006dc0:	7883      	ldrb	r3, [r0, #2]
 8006dc2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 8006dc6:	7843      	ldrb	r3, [r0, #1]
 8006dc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8006dcc:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8006dce:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8006dd2:	4770      	bx	lr

08006dd4 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8006dd4:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 8006dd6:	0a09      	lsrs	r1, r1, #8
 8006dd8:	7041      	strb	r1, [r0, #1]
}
 8006dda:	4770      	bx	lr

08006ddc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8006ddc:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006dde:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8006de2:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8006de4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8006de8:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8006dea:	0e09      	lsrs	r1, r1, #24
 8006dec:	70c1      	strb	r1, [r0, #3]
}
 8006dee:	4770      	bx	lr

08006df0 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8006df0:	4694      	mov	ip, r2
 8006df2:	b132      	cbz	r2, 8006e02 <mem_cpy+0x12>
		do {
			*d++ = *s++;
 8006df4:	780a      	ldrb	r2, [r1, #0]
 8006df6:	3101      	adds	r1, #1
 8006df8:	7002      	strb	r2, [r0, #0]
 8006dfa:	3001      	adds	r0, #1
		} while (--cnt);
 8006dfc:	f1bc 0c01 	subs.w	ip, ip, #1
 8006e00:	d1f8      	bne.n	8006df4 <mem_cpy+0x4>
	}
}
 8006e02:	4770      	bx	lr

08006e04 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8006e04:	7001      	strb	r1, [r0, #0]
 8006e06:	3001      	adds	r0, #1
	} while (--cnt);
 8006e08:	3a01      	subs	r2, #1
 8006e0a:	d1fb      	bne.n	8006e04 <mem_set>
}
 8006e0c:	4770      	bx	lr

08006e0e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006e0e:	4684      	mov	ip, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 8006e10:	f89c 0000 	ldrb.w	r0, [ip]
 8006e14:	f10c 0c01 	add.w	ip, ip, #1
 8006e18:	780b      	ldrb	r3, [r1, #0]
 8006e1a:	3101      	adds	r1, #1
 8006e1c:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 8006e1e:	3a01      	subs	r2, #1
 8006e20:	d001      	beq.n	8006e26 <mem_cmp+0x18>
 8006e22:	2800      	cmp	r0, #0
 8006e24:	d0f4      	beq.n	8006e10 <mem_cmp+0x2>

	return r;
}
 8006e26:	4770      	bx	lr

08006e28 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006e28:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 8006e2a:	e000      	b.n	8006e2e <chk_chr+0x6>
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	7818      	ldrb	r0, [r3, #0]
 8006e30:	b108      	cbz	r0, 8006e36 <chk_chr+0xe>
 8006e32:	4288      	cmp	r0, r1
 8006e34:	d1fa      	bne.n	8006e2c <chk_chr+0x4>
	return *str;
}
 8006e36:	4770      	bx	lr

08006e38 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006e38:	b410      	push	{r4}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006e3a:	f04f 0c00 	mov.w	ip, #0
 8006e3e:	4663      	mov	r3, ip
 8006e40:	e002      	b.n	8006e48 <chk_lock+0x10>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8006e42:	f04f 0c01 	mov.w	ip, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006e46:	3301      	adds	r3, #1
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d815      	bhi.n	8006e78 <chk_lock+0x40>
		if (Files[i].fs) {	/* Existing entry */
 8006e4c:	011a      	lsls	r2, r3, #4
 8006e4e:	4c18      	ldr	r4, [pc, #96]	; (8006eb0 <chk_lock+0x78>)
 8006e50:	58a2      	ldr	r2, [r4, r2]
 8006e52:	2a00      	cmp	r2, #0
 8006e54:	d0f5      	beq.n	8006e42 <chk_lock+0xa>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006e56:	6804      	ldr	r4, [r0, #0]
 8006e58:	42a2      	cmp	r2, r4
 8006e5a:	d1f4      	bne.n	8006e46 <chk_lock+0xe>
				Files[i].clu == dp->obj.sclust &&
 8006e5c:	4a14      	ldr	r2, [pc, #80]	; (8006eb0 <chk_lock+0x78>)
 8006e5e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006e62:	6854      	ldr	r4, [r2, #4]
 8006e64:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006e66:	4294      	cmp	r4, r2
 8006e68:	d1ed      	bne.n	8006e46 <chk_lock+0xe>
				Files[i].ofs == dp->dptr) break;
 8006e6a:	4a11      	ldr	r2, [pc, #68]	; (8006eb0 <chk_lock+0x78>)
 8006e6c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006e70:	6894      	ldr	r4, [r2, #8]
 8006e72:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 8006e74:	4294      	cmp	r4, r2
 8006e76:	d1e6      	bne.n	8006e46 <chk_lock+0xe>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d00b      	beq.n	8006e94 <chk_lock+0x5c>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006e7c:	b9b1      	cbnz	r1, 8006eac <chk_lock+0x74>
 8006e7e:	4a0c      	ldr	r2, [pc, #48]	; (8006eb0 <chk_lock+0x78>)
 8006e80:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8006e84:	899b      	ldrh	r3, [r3, #12]
 8006e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e8a:	d00d      	beq.n	8006ea8 <chk_lock+0x70>
 8006e8c:	2000      	movs	r0, #0
}
 8006e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e92:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006e94:	2902      	cmp	r1, #2
 8006e96:	bf14      	ite	ne
 8006e98:	4663      	movne	r3, ip
 8006e9a:	f04c 0301 	orreq.w	r3, ip, #1
 8006e9e:	b10b      	cbz	r3, 8006ea4 <chk_lock+0x6c>
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	e7f4      	b.n	8006e8e <chk_lock+0x56>
 8006ea4:	2012      	movs	r0, #18
 8006ea6:	e7f2      	b.n	8006e8e <chk_lock+0x56>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006ea8:	2010      	movs	r0, #16
 8006eaa:	e7f0      	b.n	8006e8e <chk_lock+0x56>
 8006eac:	2010      	movs	r0, #16
 8006eae:	e7ee      	b.n	8006e8e <chk_lock+0x56>
 8006eb0:	20000720 	.word	0x20000720

08006eb4 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	e000      	b.n	8006eba <enq_lock+0x6>
 8006eb8:	3001      	adds	r0, #1
 8006eba:	2801      	cmp	r0, #1
 8006ebc:	d804      	bhi.n	8006ec8 <enq_lock+0x14>
 8006ebe:	0103      	lsls	r3, r0, #4
 8006ec0:	4a03      	ldr	r2, [pc, #12]	; (8006ed0 <enq_lock+0x1c>)
 8006ec2:	58d3      	ldr	r3, [r2, r3]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1f7      	bne.n	8006eb8 <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 8006ec8:	3802      	subs	r0, #2
 8006eca:	bf18      	it	ne
 8006ecc:	2001      	movne	r0, #1
 8006ece:	4770      	bx	lr
 8006ed0:	20000720 	.word	0x20000720

08006ed4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006ed4:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	e000      	b.n	8006edc <inc_lock+0x8>
 8006eda:	3301      	adds	r3, #1
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d813      	bhi.n	8006f08 <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 8006ee0:	011a      	lsls	r2, r3, #4
 8006ee2:	4c24      	ldr	r4, [pc, #144]	; (8006f74 <inc_lock+0xa0>)
 8006ee4:	58a4      	ldr	r4, [r4, r2]
 8006ee6:	6802      	ldr	r2, [r0, #0]
 8006ee8:	4294      	cmp	r4, r2
 8006eea:	d1f6      	bne.n	8006eda <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 8006eec:	4a21      	ldr	r2, [pc, #132]	; (8006f74 <inc_lock+0xa0>)
 8006eee:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006ef2:	6854      	ldr	r4, [r2, #4]
 8006ef4:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006ef6:	4294      	cmp	r4, r2
 8006ef8:	d1ef      	bne.n	8006eda <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 8006efa:	4a1e      	ldr	r2, [pc, #120]	; (8006f74 <inc_lock+0xa0>)
 8006efc:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006f00:	6894      	ldr	r4, [r2, #8]
 8006f02:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 8006f04:	4294      	cmp	r4, r2
 8006f06:	d1e8      	bne.n	8006eda <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d00d      	beq.n	8006f28 <inc_lock+0x54>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006f0c:	b121      	cbz	r1, 8006f18 <inc_lock+0x44>
 8006f0e:	4a19      	ldr	r2, [pc, #100]	; (8006f74 <inc_lock+0xa0>)
 8006f10:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006f14:	8992      	ldrh	r2, [r2, #12]
 8006f16:	bb52      	cbnz	r2, 8006f6e <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006f18:	b9f1      	cbnz	r1, 8006f58 <inc_lock+0x84>
 8006f1a:	4a16      	ldr	r2, [pc, #88]	; (8006f74 <inc_lock+0xa0>)
 8006f1c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006f20:	8991      	ldrh	r1, [r2, #12]
 8006f22:	3101      	adds	r1, #1
 8006f24:	b289      	uxth	r1, r1
 8006f26:	e019      	b.n	8006f5c <inc_lock+0x88>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d805      	bhi.n	8006f3a <inc_lock+0x66>
 8006f2e:	011a      	lsls	r2, r3, #4
 8006f30:	4c10      	ldr	r4, [pc, #64]	; (8006f74 <inc_lock+0xa0>)
 8006f32:	58a2      	ldr	r2, [r4, r2]
 8006f34:	b10a      	cbz	r2, 8006f3a <inc_lock+0x66>
 8006f36:	3301      	adds	r3, #1
 8006f38:	e7f7      	b.n	8006f2a <inc_lock+0x56>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d015      	beq.n	8006f6a <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 8006f3e:	4d0d      	ldr	r5, [pc, #52]	; (8006f74 <inc_lock+0xa0>)
 8006f40:	011c      	lsls	r4, r3, #4
 8006f42:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 8006f46:	6806      	ldr	r6, [r0, #0]
 8006f48:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 8006f4a:	6884      	ldr	r4, [r0, #8]
 8006f4c:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 8006f4e:	6940      	ldr	r0, [r0, #20]
 8006f50:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8006f52:	2000      	movs	r0, #0
 8006f54:	8190      	strh	r0, [r2, #12]
 8006f56:	e7d9      	b.n	8006f0c <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006f58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f5c:	4a05      	ldr	r2, [pc, #20]	; (8006f74 <inc_lock+0xa0>)
 8006f5e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006f62:	8191      	strh	r1, [r2, #12]

	return i + 1;
 8006f64:	1c58      	adds	r0, r3, #1
}
 8006f66:	bc70      	pop	{r4, r5, r6}
 8006f68:	4770      	bx	lr
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	e7fb      	b.n	8006f66 <inc_lock+0x92>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006f6e:	2000      	movs	r0, #0
 8006f70:	e7f9      	b.n	8006f66 <inc_lock+0x92>
 8006f72:	bf00      	nop
 8006f74:	20000720 	.word	0x20000720

08006f78 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006f78:	3801      	subs	r0, #1
 8006f7a:	2801      	cmp	r0, #1
 8006f7c:	d815      	bhi.n	8006faa <dec_lock+0x32>
		n = Files[i].ctr;
 8006f7e:	4b0d      	ldr	r3, [pc, #52]	; (8006fb4 <dec_lock+0x3c>)
 8006f80:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8006f84:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f8a:	d003      	beq.n	8006f94 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 8006f8c:	b11b      	cbz	r3, 8006f96 <dec_lock+0x1e>
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	e000      	b.n	8006f96 <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006f94:	2300      	movs	r3, #0
		Files[i].ctr = n;
 8006f96:	4a07      	ldr	r2, [pc, #28]	; (8006fb4 <dec_lock+0x3c>)
 8006f98:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8006f9c:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006f9e:	b933      	cbnz	r3, 8006fae <dec_lock+0x36>
 8006fa0:	0103      	lsls	r3, r0, #4
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	4a03      	ldr	r2, [pc, #12]	; (8006fb4 <dec_lock+0x3c>)
 8006fa6:	50d0      	str	r0, [r2, r3]
 8006fa8:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006faa:	2002      	movs	r0, #2
 8006fac:	4770      	bx	lr
		res = FR_OK;
 8006fae:	2000      	movs	r0, #0
	}
	return res;
}
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	20000720 	.word	0x20000720

08006fb8 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006fb8:	2300      	movs	r3, #0
 8006fba:	e003      	b.n	8006fc4 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 8006fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fc0:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d811      	bhi.n	8006fec <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006fc8:	011a      	lsls	r2, r3, #4
 8006fca:	4909      	ldr	r1, [pc, #36]	; (8006ff0 <clear_lock+0x38>)
 8006fcc:	588a      	ldr	r2, [r1, r2]
 8006fce:	4282      	cmp	r2, r0
 8006fd0:	d1f7      	bne.n	8006fc2 <clear_lock+0xa>
{
 8006fd2:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006fd4:	011a      	lsls	r2, r3, #4
 8006fd6:	2400      	movs	r4, #0
 8006fd8:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 8006fda:	3301      	adds	r3, #1
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d8ed      	bhi.n	8006fbc <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006fe0:	011a      	lsls	r2, r3, #4
 8006fe2:	4903      	ldr	r1, [pc, #12]	; (8006ff0 <clear_lock+0x38>)
 8006fe4:	588a      	ldr	r2, [r1, r2]
 8006fe6:	4282      	cmp	r2, r0
 8006fe8:	d1f7      	bne.n	8006fda <clear_lock+0x22>
 8006fea:	e7f3      	b.n	8006fd4 <clear_lock+0x1c>
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	20000720 	.word	0x20000720

08006ff4 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8006ff4:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006ff6:	6983      	ldr	r3, [r0, #24]
 8006ff8:	3b02      	subs	r3, #2
 8006ffa:	428b      	cmp	r3, r1
 8006ffc:	d904      	bls.n	8007008 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8006ffe:	8943      	ldrh	r3, [r0, #10]
 8007000:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8007002:	fb01 0003 	mla	r0, r1, r3, r0
 8007006:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007008:	2000      	movs	r0, #0
}
 800700a:	4770      	bx	lr

0800700c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	4606      	mov	r6, r0
 8007010:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007012:	f101 001a 	add.w	r0, r1, #26
 8007016:	f7ff fecd 	bl	8006db4 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 800701a:	7833      	ldrb	r3, [r6, #0]
 800701c:	2b03      	cmp	r3, #3
 800701e:	d000      	beq.n	8007022 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 8007020:	bd70      	pop	{r4, r5, r6, pc}
 8007022:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007024:	f105 0014 	add.w	r0, r5, #20
 8007028:	f7ff fec4 	bl	8006db4 <ld_word>
 800702c:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 8007030:	e7f6      	b.n	8007020 <ld_clust+0x14>

08007032 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007032:	b570      	push	{r4, r5, r6, lr}
 8007034:	4606      	mov	r6, r0
 8007036:	460c      	mov	r4, r1
 8007038:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800703a:	b291      	uxth	r1, r2
 800703c:	f104 001a 	add.w	r0, r4, #26
 8007040:	f7ff fec8 	bl	8006dd4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007044:	7833      	ldrb	r3, [r6, #0]
 8007046:	2b03      	cmp	r3, #3
 8007048:	d000      	beq.n	800704c <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 800704a:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800704c:	0c29      	lsrs	r1, r5, #16
 800704e:	f104 0014 	add.w	r0, r4, #20
 8007052:	f7ff febf 	bl	8006dd4 <st_word>
}
 8007056:	e7f8      	b.n	800704a <st_clust+0x18>

08007058 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8007058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800705c:	4680      	mov	r8, r0
 800705e:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8007060:	f101 001a 	add.w	r0, r1, #26
 8007064:	f7ff fea6 	bl	8006db4 <ld_word>
 8007068:	bb50      	cbnz	r0, 80070c0 <pick_lfn+0x68>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800706a:	7835      	ldrb	r5, [r6, #0]
 800706c:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8007070:	3d01      	subs	r5, #1
 8007072:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8007076:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800707a:	2701      	movs	r7, #1
 800707c:	2400      	movs	r4, #0
 800707e:	e004      	b.n	800708a <pick_lfn+0x32>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007080:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007084:	4298      	cmp	r0, r3
 8007086:	d120      	bne.n	80070ca <pick_lfn+0x72>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007088:	3401      	adds	r4, #1
 800708a:	2c0c      	cmp	r4, #12
 800708c:	d80d      	bhi.n	80070aa <pick_lfn+0x52>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800708e:	4b12      	ldr	r3, [pc, #72]	; (80070d8 <pick_lfn+0x80>)
 8007090:	5d18      	ldrb	r0, [r3, r4]
 8007092:	4430      	add	r0, r6
 8007094:	f7ff fe8e 	bl	8006db4 <ld_word>
		if (wc) {
 8007098:	2f00      	cmp	r7, #0
 800709a:	d0f1      	beq.n	8007080 <pick_lfn+0x28>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800709c:	2dfe      	cmp	r5, #254	; 0xfe
 800709e:	d812      	bhi.n	80070c6 <pick_lfn+0x6e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80070a0:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
 80070a4:	4607      	mov	r7, r0
 80070a6:	3501      	adds	r5, #1
 80070a8:	e7ee      	b.n	8007088 <pick_lfn+0x30>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80070aa:	7833      	ldrb	r3, [r6, #0]
 80070ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80070b0:	d00d      	beq.n	80070ce <pick_lfn+0x76>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80070b2:	2dfe      	cmp	r5, #254	; 0xfe
 80070b4:	d80d      	bhi.n	80070d2 <pick_lfn+0x7a>
		lfnbuf[i] = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	f828 3015 	strh.w	r3, [r8, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
 80070bc:	2001      	movs	r0, #1
 80070be:	e000      	b.n	80070c2 <pick_lfn+0x6a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80070c0:	2000      	movs	r0, #0
}
 80070c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80070c6:	2000      	movs	r0, #0
 80070c8:	e7fb      	b.n	80070c2 <pick_lfn+0x6a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80070ca:	2000      	movs	r0, #0
 80070cc:	e7f9      	b.n	80070c2 <pick_lfn+0x6a>
	return 1;		/* The part of LFN is valid */
 80070ce:	2001      	movs	r0, #1
 80070d0:	e7f7      	b.n	80070c2 <pick_lfn+0x6a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80070d2:	2000      	movs	r0, #0
 80070d4:	e7f5      	b.n	80070c2 <pick_lfn+0x6a>
 80070d6:	bf00      	nop
 80070d8:	08008d20 	.word	0x08008d20

080070dc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80070dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070e0:	4680      	mov	r8, r0
 80070e2:	460f      	mov	r7, r1
 80070e4:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80070e6:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80070e8:	230f      	movs	r3, #15
 80070ea:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 80070ec:	2400      	movs	r4, #0
 80070ee:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 80070f0:	4621      	mov	r1, r4
 80070f2:	f107 001a 	add.w	r0, r7, #26
 80070f6:	f7ff fe6d 	bl	8006dd4 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80070fa:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 80070fe:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8007102:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 8007106:	4625      	mov	r5, r4
 8007108:	e002      	b.n	8007110 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 800710a:	3401      	adds	r4, #1
 800710c:	2c0c      	cmp	r4, #12
 800710e:	d811      	bhi.n	8007134 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007110:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007114:	429d      	cmp	r5, r3
 8007116:	d002      	beq.n	800711e <put_lfn+0x42>
 8007118:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 800711c:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800711e:	4b0c      	ldr	r3, [pc, #48]	; (8007150 <put_lfn+0x74>)
 8007120:	5d18      	ldrb	r0, [r3, r4]
 8007122:	4629      	mov	r1, r5
 8007124:	4438      	add	r0, r7
 8007126:	f7ff fe55 	bl	8006dd4 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800712a:	2d00      	cmp	r5, #0
 800712c:	d1ed      	bne.n	800710a <put_lfn+0x2e>
 800712e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8007132:	e7ea      	b.n	800710a <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007138:	429d      	cmp	r5, r3
 800713a:	d002      	beq.n	8007142 <put_lfn+0x66>
 800713c:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 8007140:	b90b      	cbnz	r3, 8007146 <put_lfn+0x6a>
 8007142:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007146:	f887 9000 	strb.w	r9, [r7]
}
 800714a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800714e:	bf00      	nop
 8007150:	08008d20 	.word	0x08008d20

08007154 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007154:	b570      	push	{r4, r5, r6, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	4605      	mov	r5, r0
 800715a:	4616      	mov	r6, r2
 800715c:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800715e:	220b      	movs	r2, #11
 8007160:	f7ff fe46 	bl	8006df0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007164:	2c05      	cmp	r4, #5
 8007166:	d811      	bhi.n	800718c <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 8007168:	2307      	movs	r3, #7
 800716a:	e01f      	b.n	80071ac <gen_numname+0x58>
 800716c:	3101      	adds	r1, #1
 800716e:	290f      	cmp	r1, #15
 8007170:	d80c      	bhi.n	800718c <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 8007172:	f003 0c01 	and.w	ip, r3, #1
 8007176:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
				wc >>= 1;
 800717a:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800717c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8007180:	d0f4      	beq.n	800716c <gen_numname+0x18>
 8007182:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 8007186:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 800718a:	e7ef      	b.n	800716c <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 800718c:	8833      	ldrh	r3, [r6, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d0ea      	beq.n	8007168 <gen_numname+0x14>
			wc = *lfn++;
 8007192:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
 8007194:	2100      	movs	r1, #0
 8007196:	e7ea      	b.n	800716e <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
 8007198:	1e5a      	subs	r2, r3, #1
 800719a:	3308      	adds	r3, #8
 800719c:	446b      	add	r3, sp
 800719e:	f803 1c08 	strb.w	r1, [r3, #-8]
		seq /= 16;
 80071a2:	0921      	lsrs	r1, r4, #4
	} while (seq);
 80071a4:	2c0f      	cmp	r4, #15
 80071a6:	d90a      	bls.n	80071be <gen_numname+0x6a>
		ns[i--] = c;
 80071a8:	4613      	mov	r3, r2
		seq /= 16;
 80071aa:	460c      	mov	r4, r1
		c = (BYTE)((seq % 16) + '0');
 80071ac:	f004 020f 	and.w	r2, r4, #15
 80071b0:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
 80071b4:	2939      	cmp	r1, #57	; 0x39
 80071b6:	d9ef      	bls.n	8007198 <gen_numname+0x44>
 80071b8:	f102 0137 	add.w	r1, r2, #55	; 0x37
 80071bc:	e7ec      	b.n	8007198 <gen_numname+0x44>
	ns[i] = '~';
 80071be:	217e      	movs	r1, #126	; 0x7e
 80071c0:	f102 0308 	add.w	r3, r2, #8
 80071c4:	446b      	add	r3, sp
 80071c6:	f803 1c08 	strb.w	r1, [r3, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80071ca:	2300      	movs	r3, #0
 80071cc:	e000      	b.n	80071d0 <gen_numname+0x7c>
 80071ce:	3301      	adds	r3, #1
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d209      	bcs.n	80071e8 <gen_numname+0x94>
 80071d4:	5ce9      	ldrb	r1, [r5, r3]
 80071d6:	2920      	cmp	r1, #32
 80071d8:	d1f9      	bne.n	80071ce <gen_numname+0x7a>
 80071da:	e005      	b.n	80071e8 <gen_numname+0x94>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80071dc:	2020      	movs	r0, #32
 80071de:	1c59      	adds	r1, r3, #1
 80071e0:	54e8      	strb	r0, [r5, r3]
	} while (j < 8);
 80071e2:	2907      	cmp	r1, #7
 80071e4:	d809      	bhi.n	80071fa <gen_numname+0xa6>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80071e6:	460b      	mov	r3, r1
 80071e8:	2a07      	cmp	r2, #7
 80071ea:	d8f7      	bhi.n	80071dc <gen_numname+0x88>
 80071ec:	f102 0108 	add.w	r1, r2, #8
 80071f0:	4469      	add	r1, sp
 80071f2:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 80071f6:	3201      	adds	r2, #1
 80071f8:	e7f1      	b.n	80071de <gen_numname+0x8a>
}
 80071fa:	b002      	add	sp, #8
 80071fc:	bd70      	pop	{r4, r5, r6, pc}

080071fe <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80071fe:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 8007200:	f04f 0c0b 	mov.w	ip, #11
	BYTE sum = 0;
 8007204:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007206:	01c3      	lsls	r3, r0, #7
 8007208:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 800720c:	7808      	ldrb	r0, [r1, #0]
 800720e:	3101      	adds	r1, #1
 8007210:	fa50 f383 	uxtab	r3, r0, r3
 8007214:	b2d8      	uxtb	r0, r3
	} while (--n);
 8007216:	f1bc 0c01 	subs.w	ip, ip, #1
 800721a:	d1f4      	bne.n	8007206 <sum_sfn+0x8>
	return sum;
}
 800721c:	4770      	bx	lr
	...

08007220 <get_achar>:
)
{
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8007220:	6803      	ldr	r3, [r0, #0]
 8007222:	1c5a      	adds	r2, r3, #1
 8007224:	6002      	str	r2, [r0, #0]
 8007226:	7818      	ldrb	r0, [r3, #0]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8007228:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800722c:	b29b      	uxth	r3, r3
 800722e:	2b19      	cmp	r3, #25
 8007230:	d801      	bhi.n	8007236 <get_achar+0x16>
 8007232:	3820      	subs	r0, #32
 8007234:	b280      	uxth	r0, r0
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8007236:	287f      	cmp	r0, #127	; 0x7f
 8007238:	d902      	bls.n	8007240 <get_achar+0x20>
 800723a:	3880      	subs	r0, #128	; 0x80
 800723c:	4b01      	ldr	r3, [pc, #4]	; (8007244 <get_achar+0x24>)
 800723e:	5c18      	ldrb	r0, [r3, r0]
#endif
	return chr;
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	08008ca0 	.word	0x08008ca0

08007248 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8007248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800724c:	b084      	sub	sp, #16
 800724e:	4607      	mov	r7, r0
 8007250:	9101      	str	r1, [sp, #4]
 8007252:	4614      	mov	r4, r2
 8007254:	4698      	mov	r8, r3
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8007256:	4626      	mov	r6, r4
 8007258:	3c01      	subs	r4, #1
 800725a:	b14e      	cbz	r6, 8007270 <pattern_matching+0x28>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800725c:	a801      	add	r0, sp, #4
 800725e:	f7ff ffdf 	bl	8007220 <get_achar>
 8007262:	2800      	cmp	r0, #0
 8007264:	d1f7      	bne.n	8007256 <pattern_matching+0xe>
 8007266:	2600      	movs	r6, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 8007268:	4630      	mov	r0, r6
 800726a:	b004      	add	sp, #16
 800726c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8007270:	783b      	ldrb	r3, [r7, #0]
 8007272:	bb1b      	cbnz	r3, 80072bc <pattern_matching+0x74>
 8007274:	f1b8 0f00 	cmp.w	r8, #0
 8007278:	d020      	beq.n	80072bc <pattern_matching+0x74>
 800727a:	2601      	movs	r6, #1
 800727c:	e7f4      	b.n	8007268 <pattern_matching+0x20>
				nm = nx = 0;
 800727e:	4633      	mov	r3, r6
 8007280:	4632      	mov	r2, r6
 8007282:	e005      	b.n	8007290 <pattern_matching+0x48>
					if (*pp++ == '?') nm++; else nx = 1;
 8007284:	3201      	adds	r2, #1
				} while (*pp == '?' || *pp == '*');
 8007286:	7849      	ldrb	r1, [r1, #1]
 8007288:	292a      	cmp	r1, #42	; 0x2a
 800728a:	bf18      	it	ne
 800728c:	293f      	cmpne	r1, #63	; 0x3f
 800728e:	d107      	bne.n	80072a0 <pattern_matching+0x58>
					if (*pp++ == '?') nm++; else nx = 1;
 8007290:	9903      	ldr	r1, [sp, #12]
 8007292:	1c48      	adds	r0, r1, #1
 8007294:	9003      	str	r0, [sp, #12]
 8007296:	780c      	ldrb	r4, [r1, #0]
 8007298:	2c3f      	cmp	r4, #63	; 0x3f
 800729a:	d0f3      	beq.n	8007284 <pattern_matching+0x3c>
 800729c:	2301      	movs	r3, #1
 800729e:	e7f2      	b.n	8007286 <pattern_matching+0x3e>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80072a0:	9902      	ldr	r1, [sp, #8]
 80072a2:	f7ff ffd1 	bl	8007248 <pattern_matching>
 80072a6:	bb00      	cbnz	r0, 80072ea <pattern_matching+0xa2>
				nc = *np; break;	/* Branch mismatched */
 80072a8:	9b02      	ldr	r3, [sp, #8]
 80072aa:	781d      	ldrb	r5, [r3, #0]
		get_achar(&nam);			/* nam++ */
 80072ac:	a801      	add	r0, sp, #4
 80072ae:	f7ff ffb7 	bl	8007220 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 80072b2:	f1b8 0f00 	cmp.w	r8, #0
 80072b6:	bf18      	it	ne
 80072b8:	2d00      	cmpne	r5, #0
 80072ba:	d0d5      	beq.n	8007268 <pattern_matching+0x20>
		pp = pat; np = nam;			/* Top of pattern and name to match */
 80072bc:	9703      	str	r7, [sp, #12]
 80072be:	9b01      	ldr	r3, [sp, #4]
 80072c0:	9302      	str	r3, [sp, #8]
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 80072c2:	9b03      	ldr	r3, [sp, #12]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2b2a      	cmp	r3, #42	; 0x2a
 80072c8:	bf18      	it	ne
 80072ca:	2b3f      	cmpne	r3, #63	; 0x3f
 80072cc:	d0d7      	beq.n	800727e <pattern_matching+0x36>
			pc = get_achar(&pp);	/* Get a pattern char */
 80072ce:	a803      	add	r0, sp, #12
 80072d0:	f7ff ffa6 	bl	8007220 <get_achar>
 80072d4:	4604      	mov	r4, r0
			nc = get_achar(&np);	/* Get a name char */
 80072d6:	a802      	add	r0, sp, #8
 80072d8:	f7ff ffa2 	bl	8007220 <get_achar>
 80072dc:	4605      	mov	r5, r0
			if (pc != nc) break;	/* Branch mismatched? */
 80072de:	4284      	cmp	r4, r0
 80072e0:	d1e4      	bne.n	80072ac <pattern_matching+0x64>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 80072e2:	2c00      	cmp	r4, #0
 80072e4:	d1ed      	bne.n	80072c2 <pattern_matching+0x7a>
 80072e6:	2601      	movs	r6, #1
 80072e8:	e7be      	b.n	8007268 <pattern_matching+0x20>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80072ea:	2601      	movs	r6, #1
 80072ec:	e7bc      	b.n	8007268 <pattern_matching+0x20>

080072ee <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80072ee:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80072f0:	6800      	ldr	r0, [r0, #0]
 80072f2:	b108      	cbz	r0, 80072f8 <get_ldnumber+0xa>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80072f4:	4602      	mov	r2, r0
 80072f6:	e003      	b.n	8007300 <get_ldnumber+0x12>
	int vol = -1;
 80072f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072fc:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80072fe:	3201      	adds	r2, #1
 8007300:	7813      	ldrb	r3, [r2, #0]
 8007302:	2b3a      	cmp	r3, #58	; 0x3a
 8007304:	bf18      	it	ne
 8007306:	2b1f      	cmpne	r3, #31
 8007308:	d8f9      	bhi.n	80072fe <get_ldnumber+0x10>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800730a:	2b3a      	cmp	r3, #58	; 0x3a
 800730c:	d001      	beq.n	8007312 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800730e:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8007310:	4770      	bx	lr
			i = *tp++ - '0';
 8007312:	4603      	mov	r3, r0
 8007314:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007318:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800731a:	2809      	cmp	r0, #9
 800731c:	bf98      	it	ls
 800731e:	429a      	cmpls	r2, r3
 8007320:	d103      	bne.n	800732a <get_ldnumber+0x3c>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007322:	b928      	cbnz	r0, 8007330 <get_ldnumber+0x42>
					*path = ++tt;
 8007324:	3201      	adds	r2, #1
 8007326:	600a      	str	r2, [r1, #0]
 8007328:	4770      	bx	lr
	int vol = -1;
 800732a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800732e:	4770      	bx	lr
 8007330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return vol;
 8007334:	4770      	bx	lr

08007336 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007336:	b538      	push	{r3, r4, r5, lr}
 8007338:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800733a:	4604      	mov	r4, r0
 800733c:	b198      	cbz	r0, 8007366 <validate+0x30>
 800733e:	6803      	ldr	r3, [r0, #0]
 8007340:	b19b      	cbz	r3, 800736a <validate+0x34>
 8007342:	781a      	ldrb	r2, [r3, #0]
 8007344:	b1a2      	cbz	r2, 8007370 <validate+0x3a>
 8007346:	8881      	ldrh	r1, [r0, #4]
 8007348:	88da      	ldrh	r2, [r3, #6]
 800734a:	4291      	cmp	r1, r2
 800734c:	d003      	beq.n	8007356 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 800734e:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007350:	2400      	movs	r4, #0
 8007352:	602c      	str	r4, [r5, #0]
	return res;
}
 8007354:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007356:	7858      	ldrb	r0, [r3, #1]
 8007358:	f7ff fce8 	bl	8006d2c <disk_status>
 800735c:	f010 0001 	ands.w	r0, r0, #1
 8007360:	d109      	bne.n	8007376 <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007362:	6824      	ldr	r4, [r4, #0]
 8007364:	e7f5      	b.n	8007352 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8007366:	2009      	movs	r0, #9
 8007368:	e7f3      	b.n	8007352 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800736a:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 800736c:	2009      	movs	r0, #9
 800736e:	e7f0      	b.n	8007352 <validate+0x1c>
 8007370:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007372:	2400      	movs	r4, #0
 8007374:	e7ed      	b.n	8007352 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8007376:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007378:	2400      	movs	r4, #0
 800737a:	e7ea      	b.n	8007352 <validate+0x1c>

0800737c <sync_window>:
{
 800737c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007380:	78c5      	ldrb	r5, [r0, #3]
 8007382:	b915      	cbnz	r5, 800738a <sync_window+0xe>
}
 8007384:	4628      	mov	r0, r5
 8007386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800738a:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 800738c:	6b07      	ldr	r7, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800738e:	f100 0834 	add.w	r8, r0, #52	; 0x34
 8007392:	2301      	movs	r3, #1
 8007394:	463a      	mov	r2, r7
 8007396:	4641      	mov	r1, r8
 8007398:	7840      	ldrb	r0, [r0, #1]
 800739a:	f7ff fcf3 	bl	8006d84 <disk_write>
 800739e:	4605      	mov	r5, r0
 80073a0:	b9a0      	cbnz	r0, 80073cc <sync_window+0x50>
			fs->wflag = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80073a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073a8:	1afb      	subs	r3, r7, r3
 80073aa:	69e2      	ldr	r2, [r4, #28]
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d2e9      	bcs.n	8007384 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80073b0:	78a6      	ldrb	r6, [r4, #2]
 80073b2:	e008      	b.n	80073c6 <sync_window+0x4a>
					wsect += fs->fsize;
 80073b4:	69e3      	ldr	r3, [r4, #28]
 80073b6:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80073b8:	2301      	movs	r3, #1
 80073ba:	463a      	mov	r2, r7
 80073bc:	4641      	mov	r1, r8
 80073be:	7860      	ldrb	r0, [r4, #1]
 80073c0:	f7ff fce0 	bl	8006d84 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80073c4:	3e01      	subs	r6, #1
 80073c6:	2e01      	cmp	r6, #1
 80073c8:	d8f4      	bhi.n	80073b4 <sync_window+0x38>
 80073ca:	e7db      	b.n	8007384 <sync_window+0x8>
			res = FR_DISK_ERR;
 80073cc:	2501      	movs	r5, #1
 80073ce:	e7d9      	b.n	8007384 <sync_window+0x8>

080073d0 <move_window>:
{
 80073d0:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 80073d2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80073d4:	428b      	cmp	r3, r1
 80073d6:	d102      	bne.n	80073de <move_window+0xe>
	FRESULT res = FR_OK;
 80073d8:	2600      	movs	r6, #0
}
 80073da:	4630      	mov	r0, r6
 80073dc:	bd70      	pop	{r4, r5, r6, pc}
 80073de:	4604      	mov	r4, r0
 80073e0:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 80073e2:	f7ff ffcb 	bl	800737c <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80073e6:	4606      	mov	r6, r0
 80073e8:	2800      	cmp	r0, #0
 80073ea:	d1f6      	bne.n	80073da <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80073ec:	2301      	movs	r3, #1
 80073ee:	462a      	mov	r2, r5
 80073f0:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80073f4:	7860      	ldrb	r0, [r4, #1]
 80073f6:	f7ff fcb9 	bl	8006d6c <disk_read>
 80073fa:	b110      	cbz	r0, 8007402 <move_window+0x32>
				res = FR_DISK_ERR;
 80073fc:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80073fe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
 8007402:	6325      	str	r5, [r4, #48]	; 0x30
 8007404:	e7e9      	b.n	80073da <move_window+0xa>
	...

08007408 <check_fs>:
{
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800740c:	2300      	movs	r3, #0
 800740e:	70c3      	strb	r3, [r0, #3]
 8007410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007414:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007416:	f7ff ffdb 	bl	80073d0 <move_window>
 800741a:	bb30      	cbnz	r0, 800746a <check_fs+0x62>
 800741c:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800741e:	f204 2032 	addw	r0, r4, #562	; 0x232
 8007422:	f7ff fcc7 	bl	8006db4 <ld_word>
 8007426:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800742a:	4298      	cmp	r0, r3
 800742c:	d11f      	bne.n	800746e <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800742e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8007432:	2be9      	cmp	r3, #233	; 0xe9
 8007434:	d007      	beq.n	8007446 <check_fs+0x3e>
 8007436:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007438:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800743c:	4a0d      	ldr	r2, [pc, #52]	; (8007474 <check_fs+0x6c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d001      	beq.n	8007446 <check_fs+0x3e>
	return 2;
 8007442:	2502      	movs	r5, #2
 8007444:	e014      	b.n	8007470 <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007446:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 800744a:	f7ff fcb8 	bl	8006dbe <ld_dword>
 800744e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8007452:	4b09      	ldr	r3, [pc, #36]	; (8007478 <check_fs+0x70>)
 8007454:	4298      	cmp	r0, r3
 8007456:	d00b      	beq.n	8007470 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007458:	f104 0086 	add.w	r0, r4, #134	; 0x86
 800745c:	f7ff fcaf 	bl	8006dbe <ld_dword>
 8007460:	4b06      	ldr	r3, [pc, #24]	; (800747c <check_fs+0x74>)
 8007462:	4298      	cmp	r0, r3
 8007464:	d004      	beq.n	8007470 <check_fs+0x68>
	return 2;
 8007466:	2502      	movs	r5, #2
 8007468:	e002      	b.n	8007470 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800746a:	2504      	movs	r5, #4
 800746c:	e000      	b.n	8007470 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800746e:	2503      	movs	r5, #3
}
 8007470:	4628      	mov	r0, r5
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	009000eb 	.word	0x009000eb
 8007478:	00544146 	.word	0x00544146
 800747c:	33544146 	.word	0x33544146

08007480 <find_volume>:
{
 8007480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007484:	b085      	sub	sp, #20
 8007486:	460d      	mov	r5, r1
 8007488:	4616      	mov	r6, r2
	*rfs = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 800748e:	f7ff ff2e 	bl	80072ee <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007492:	1e07      	subs	r7, r0, #0
 8007494:	f2c0 8146 	blt.w	8007724 <find_volume+0x2a4>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007498:	4bb6      	ldr	r3, [pc, #728]	; (8007774 <find_volume+0x2f4>)
 800749a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800749e:	2c00      	cmp	r4, #0
 80074a0:	f000 8145 	beq.w	800772e <find_volume+0x2ae>
	*rfs = fs;							/* Return pointer to the file system object */
 80074a4:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80074a6:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80074aa:	7823      	ldrb	r3, [r4, #0]
 80074ac:	b173      	cbz	r3, 80074cc <find_volume+0x4c>
		stat = disk_status(fs->drv);
 80074ae:	7860      	ldrb	r0, [r4, #1]
 80074b0:	f7ff fc3c 	bl	8006d2c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80074b4:	f010 0501 	ands.w	r5, r0, #1
 80074b8:	d108      	bne.n	80074cc <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80074ba:	2e00      	cmp	r6, #0
 80074bc:	f000 8133 	beq.w	8007726 <find_volume+0x2a6>
 80074c0:	f010 0f04 	tst.w	r0, #4
 80074c4:	f000 812f 	beq.w	8007726 <find_volume+0x2a6>
				return FR_WRITE_PROTECTED;
 80074c8:	250a      	movs	r5, #10
 80074ca:	e12c      	b.n	8007726 <find_volume+0x2a6>
	fs->fs_type = 0;					/* Clear the file system object */
 80074cc:	2300      	movs	r3, #0
 80074ce:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80074d0:	b2f8      	uxtb	r0, r7
 80074d2:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80074d4:	f7ff fc36 	bl	8006d44 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80074d8:	f010 0501 	ands.w	r5, r0, #1
 80074dc:	f040 8129 	bne.w	8007732 <find_volume+0x2b2>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80074e0:	b11e      	cbz	r6, 80074ea <find_volume+0x6a>
 80074e2:	f010 0f04 	tst.w	r0, #4
 80074e6:	f040 8126 	bne.w	8007736 <find_volume+0x2b6>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80074ea:	2100      	movs	r1, #0
 80074ec:	4620      	mov	r0, r4
 80074ee:	f7ff ff8b 	bl	8007408 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80074f2:	2802      	cmp	r0, #2
 80074f4:	f000 80b8 	beq.w	8007668 <find_volume+0x1e8>
	bsect = 0;
 80074f8:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80074fa:	2804      	cmp	r0, #4
 80074fc:	f000 811d 	beq.w	800773a <find_volume+0x2ba>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007500:	2801      	cmp	r0, #1
 8007502:	f200 811c 	bhi.w	800773e <find_volume+0x2be>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007506:	f104 003f 	add.w	r0, r4, #63	; 0x3f
 800750a:	f7ff fc53 	bl	8006db4 <ld_word>
 800750e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007512:	f040 8116 	bne.w	8007742 <find_volume+0x2c2>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007516:	f104 004a 	add.w	r0, r4, #74	; 0x4a
 800751a:	f7ff fc4b 	bl	8006db4 <ld_word>
 800751e:	4606      	mov	r6, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007520:	b920      	cbnz	r0, 800752c <find_volume+0xac>
 8007522:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007526:	f7ff fc4a 	bl	8006dbe <ld_dword>
 800752a:	4606      	mov	r6, r0
		fs->fsize = fasize;
 800752c:	61e6      	str	r6, [r4, #28]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800752e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8007532:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007534:	1e53      	subs	r3, r2, #1
 8007536:	b2db      	uxtb	r3, r3
 8007538:	2b01      	cmp	r3, #1
 800753a:	f200 8104 	bhi.w	8007746 <find_volume+0x2c6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800753e:	fb06 f802 	mul.w	r8, r6, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007542:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
 8007546:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800754a:	f1b9 0f00 	cmp.w	r9, #0
 800754e:	f000 80fc 	beq.w	800774a <find_volume+0x2ca>
 8007552:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8007556:	ea19 0f03 	tst.w	r9, r3
 800755a:	f040 80f8 	bne.w	800774e <find_volume+0x2ce>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800755e:	f104 0045 	add.w	r0, r4, #69	; 0x45
 8007562:	f7ff fc27 	bl	8006db4 <ld_word>
 8007566:	4682      	mov	sl, r0
 8007568:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800756a:	f010 0f0f 	tst.w	r0, #15
 800756e:	f040 80f0 	bne.w	8007752 <find_volume+0x2d2>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007572:	f104 0047 	add.w	r0, r4, #71	; 0x47
 8007576:	f7ff fc1d 	bl	8006db4 <ld_word>
 800757a:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800757c:	b920      	cbnz	r0, 8007588 <find_volume+0x108>
 800757e:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8007582:	f7ff fc1c 	bl	8006dbe <ld_dword>
 8007586:	4683      	mov	fp, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007588:	f104 0042 	add.w	r0, r4, #66	; 0x42
 800758c:	f7ff fc12 	bl	8006db4 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007590:	4602      	mov	r2, r0
 8007592:	2800      	cmp	r0, #0
 8007594:	f000 80df 	beq.w	8007756 <find_volume+0x2d6>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007598:	eb00 0308 	add.w	r3, r0, r8
 800759c:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80075a0:	459b      	cmp	fp, r3
 80075a2:	f0c0 80da 	bcc.w	800775a <find_volume+0x2da>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80075a6:	ebab 0b03 	sub.w	fp, fp, r3
 80075aa:	fbbb f1f9 	udiv	r1, fp, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80075ae:	45cb      	cmp	fp, r9
 80075b0:	f0c0 80d5 	bcc.w	800775e <find_volume+0x2de>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80075b4:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 80075b8:	4281      	cmp	r1, r0
 80075ba:	d96d      	bls.n	8007698 <find_volume+0x218>
		fmt = FS_FAT32;
 80075bc:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80075c0:	f640 70f5 	movw	r0, #4085	; 0xff5
 80075c4:	4281      	cmp	r1, r0
 80075c6:	d801      	bhi.n	80075cc <find_volume+0x14c>
 80075c8:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80075cc:	f101 0902 	add.w	r9, r1, #2
 80075d0:	f8c4 9018 	str.w	r9, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80075d4:	6227      	str	r7, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80075d6:	443a      	add	r2, r7
 80075d8:	6262      	str	r2, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80075da:	443b      	add	r3, r7
 80075dc:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80075de:	f1bb 0f03 	cmp.w	fp, #3
 80075e2:	d05c      	beq.n	800769e <find_volume+0x21e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80075e4:	f1ba 0f00 	cmp.w	sl, #0
 80075e8:	f000 80bf 	beq.w	800776a <find_volume+0x2ea>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80075ec:	4442      	add	r2, r8
 80075ee:	62a2      	str	r2, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80075f0:	f1bb 0f02 	cmp.w	fp, #2
 80075f4:	d064      	beq.n	80076c0 <find_volume+0x240>
 80075f6:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 80075fa:	f009 0901 	and.w	r9, r9, #1
 80075fe:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007602:	f209 19ff 	addw	r9, r9, #511	; 0x1ff
 8007606:	ebb6 2f59 	cmp.w	r6, r9, lsr #9
 800760a:	f0c0 80b0 	bcc.w	800776e <find_volume+0x2ee>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800760e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007612:	6163      	str	r3, [r4, #20]
 8007614:	6123      	str	r3, [r4, #16]
		fs->fsi_flag = 0x80;
 8007616:	2380      	movs	r3, #128	; 0x80
 8007618:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800761a:	f1bb 0f03 	cmp.w	fp, #3
 800761e:	d052      	beq.n	80076c6 <find_volume+0x246>
	fs->fs_type = fmt;		/* FAT sub-type */
 8007620:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8007624:	4a54      	ldr	r2, [pc, #336]	; (8007778 <find_volume+0x2f8>)
 8007626:	8813      	ldrh	r3, [r2, #0]
 8007628:	3301      	adds	r3, #1
 800762a:	b29b      	uxth	r3, r3
 800762c:	8013      	strh	r3, [r2, #0]
 800762e:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007630:	4b52      	ldr	r3, [pc, #328]	; (800777c <find_volume+0x2fc>)
 8007632:	60e3      	str	r3, [r4, #12]
	clear_lock(fs);
 8007634:	4620      	mov	r0, r4
 8007636:	f7ff fcbf 	bl	8006fb8 <clear_lock>
	return FR_OK;
 800763a:	e074      	b.n	8007726 <find_volume+0x2a6>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800763c:	2000      	movs	r0, #0
 800763e:	ab04      	add	r3, sp, #16
 8007640:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8007644:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007648:	3601      	adds	r6, #1
 800764a:	2e03      	cmp	r6, #3
 800764c:	d80e      	bhi.n	800766c <find_volume+0x1ec>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800764e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8007652:	0133      	lsls	r3, r6, #4
 8007654:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007658:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800765a:	7903      	ldrb	r3, [r0, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d0ed      	beq.n	800763c <find_volume+0x1bc>
 8007660:	3008      	adds	r0, #8
 8007662:	f7ff fbac 	bl	8006dbe <ld_dword>
 8007666:	e7ea      	b.n	800763e <find_volume+0x1be>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007668:	2600      	movs	r6, #0
 800766a:	e7ee      	b.n	800764a <find_volume+0x1ca>
 800766c:	2600      	movs	r6, #0
 800766e:	e00a      	b.n	8007686 <find_volume+0x206>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007670:	4639      	mov	r1, r7
 8007672:	4620      	mov	r0, r4
 8007674:	f7ff fec8 	bl	8007408 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007678:	2801      	cmp	r0, #1
 800767a:	f67f af3e 	bls.w	80074fa <find_volume+0x7a>
 800767e:	3601      	adds	r6, #1
 8007680:	2e03      	cmp	r6, #3
 8007682:	f63f af3a 	bhi.w	80074fa <find_volume+0x7a>
			bsect = br[i];
 8007686:	ab04      	add	r3, sp, #16
 8007688:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800768c:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007690:	2f00      	cmp	r7, #0
 8007692:	d1ed      	bne.n	8007670 <find_volume+0x1f0>
 8007694:	2003      	movs	r0, #3
 8007696:	e7f2      	b.n	800767e <find_volume+0x1fe>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007698:	f04f 0b02 	mov.w	fp, #2
 800769c:	e790      	b.n	80075c0 <find_volume+0x140>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800769e:	f104 005e 	add.w	r0, r4, #94	; 0x5e
 80076a2:	f7ff fb87 	bl	8006db4 <ld_word>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	d15b      	bne.n	8007762 <find_volume+0x2e2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80076aa:	f1ba 0f00 	cmp.w	sl, #0
 80076ae:	d15a      	bne.n	8007766 <find_volume+0x2e6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80076b0:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80076b4:	f7ff fb83 	bl	8006dbe <ld_dword>
 80076b8:	62a0      	str	r0, [r4, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80076ba:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80076be:	e7a0      	b.n	8007602 <find_volume+0x182>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80076c0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80076c4:	e79d      	b.n	8007602 <find_volume+0x182>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80076c6:	f104 0064 	add.w	r0, r4, #100	; 0x64
 80076ca:	f7ff fb73 	bl	8006db4 <ld_word>
 80076ce:	2801      	cmp	r0, #1
 80076d0:	d1a6      	bne.n	8007620 <find_volume+0x1a0>
			&& move_window(fs, bsect + 1) == FR_OK)
 80076d2:	1c79      	adds	r1, r7, #1
 80076d4:	4620      	mov	r0, r4
 80076d6:	f7ff fe7b 	bl	80073d0 <move_window>
 80076da:	2800      	cmp	r0, #0
 80076dc:	d1a0      	bne.n	8007620 <find_volume+0x1a0>
			fs->fsi_flag = 0;
 80076de:	2300      	movs	r3, #0
 80076e0:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80076e2:	f204 2032 	addw	r0, r4, #562	; 0x232
 80076e6:	f7ff fb65 	bl	8006db4 <ld_word>
 80076ea:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80076ee:	4298      	cmp	r0, r3
 80076f0:	d196      	bne.n	8007620 <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80076f2:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80076f6:	f7ff fb62 	bl	8006dbe <ld_dword>
 80076fa:	4b21      	ldr	r3, [pc, #132]	; (8007780 <find_volume+0x300>)
 80076fc:	4298      	cmp	r0, r3
 80076fe:	d18f      	bne.n	8007620 <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007700:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8007704:	f7ff fb5b 	bl	8006dbe <ld_dword>
 8007708:	4b1e      	ldr	r3, [pc, #120]	; (8007784 <find_volume+0x304>)
 800770a:	4298      	cmp	r0, r3
 800770c:	d188      	bne.n	8007620 <find_volume+0x1a0>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800770e:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8007712:	f7ff fb54 	bl	8006dbe <ld_dword>
 8007716:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007718:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800771c:	f7ff fb4f 	bl	8006dbe <ld_dword>
 8007720:	6120      	str	r0, [r4, #16]
 8007722:	e77d      	b.n	8007620 <find_volume+0x1a0>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007724:	250b      	movs	r5, #11
}
 8007726:	4628      	mov	r0, r5
 8007728:	b005      	add	sp, #20
 800772a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800772e:	250c      	movs	r5, #12
 8007730:	e7f9      	b.n	8007726 <find_volume+0x2a6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007732:	2503      	movs	r5, #3
 8007734:	e7f7      	b.n	8007726 <find_volume+0x2a6>
		return FR_WRITE_PROTECTED;
 8007736:	250a      	movs	r5, #10
 8007738:	e7f5      	b.n	8007726 <find_volume+0x2a6>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800773a:	2501      	movs	r5, #1
 800773c:	e7f3      	b.n	8007726 <find_volume+0x2a6>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800773e:	250d      	movs	r5, #13
 8007740:	e7f1      	b.n	8007726 <find_volume+0x2a6>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007742:	250d      	movs	r5, #13
 8007744:	e7ef      	b.n	8007726 <find_volume+0x2a6>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007746:	250d      	movs	r5, #13
 8007748:	e7ed      	b.n	8007726 <find_volume+0x2a6>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800774a:	250d      	movs	r5, #13
 800774c:	e7eb      	b.n	8007726 <find_volume+0x2a6>
 800774e:	250d      	movs	r5, #13
 8007750:	e7e9      	b.n	8007726 <find_volume+0x2a6>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007752:	250d      	movs	r5, #13
 8007754:	e7e7      	b.n	8007726 <find_volume+0x2a6>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007756:	250d      	movs	r5, #13
 8007758:	e7e5      	b.n	8007726 <find_volume+0x2a6>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800775a:	250d      	movs	r5, #13
 800775c:	e7e3      	b.n	8007726 <find_volume+0x2a6>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800775e:	250d      	movs	r5, #13
 8007760:	e7e1      	b.n	8007726 <find_volume+0x2a6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007762:	250d      	movs	r5, #13
 8007764:	e7df      	b.n	8007726 <find_volume+0x2a6>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007766:	250d      	movs	r5, #13
 8007768:	e7dd      	b.n	8007726 <find_volume+0x2a6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800776a:	250d      	movs	r5, #13
 800776c:	e7db      	b.n	8007726 <find_volume+0x2a6>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800776e:	250d      	movs	r5, #13
 8007770:	e7d9      	b.n	8007726 <find_volume+0x2a6>
 8007772:	bf00      	nop
 8007774:	2000071c 	.word	0x2000071c
 8007778:	20000740 	.word	0x20000740
 800777c:	20000744 	.word	0x20000744
 8007780:	41615252 	.word	0x41615252
 8007784:	61417272 	.word	0x61417272

08007788 <put_fat>:
{
 8007788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800778c:	2901      	cmp	r1, #1
 800778e:	d97e      	bls.n	800788e <put_fat+0x106>
 8007790:	4607      	mov	r7, r0
 8007792:	460c      	mov	r4, r1
 8007794:	4616      	mov	r6, r2
 8007796:	6983      	ldr	r3, [r0, #24]
 8007798:	428b      	cmp	r3, r1
 800779a:	d97a      	bls.n	8007892 <put_fat+0x10a>
		switch (fs->fs_type) {
 800779c:	7803      	ldrb	r3, [r0, #0]
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d045      	beq.n	800782e <put_fat+0xa6>
 80077a2:	2b03      	cmp	r3, #3
 80077a4:	d057      	beq.n	8007856 <put_fat+0xce>
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d003      	beq.n	80077b2 <put_fat+0x2a>
 80077aa:	2502      	movs	r5, #2
}
 80077ac:	4628      	mov	r0, r5
 80077ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 80077b2:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80077b6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80077b8:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 80077bc:	f7ff fe08 	bl	80073d0 <move_window>
			if (res != FR_OK) break;
 80077c0:	4605      	mov	r5, r0
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d1f2      	bne.n	80077ac <put_fat+0x24>
			p = fs->win + bc++ % SS(fs);
 80077c6:	f107 0a34 	add.w	sl, r7, #52	; 0x34
 80077ca:	f108 0901 	add.w	r9, r8, #1
 80077ce:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80077d2:	f014 0401 	ands.w	r4, r4, #1
 80077d6:	d01f      	beq.n	8007818 <put_fat+0x90>
 80077d8:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 80077dc:	f003 030f 	and.w	r3, r3, #15
 80077e0:	0132      	lsls	r2, r6, #4
 80077e2:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80077e6:	4313      	orrs	r3, r2
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 80077ee:	2301      	movs	r3, #1
 80077f0:	70fb      	strb	r3, [r7, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80077f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077f4:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 80077f8:	4638      	mov	r0, r7
 80077fa:	f7ff fde9 	bl	80073d0 <move_window>
			if (res != FR_OK) break;
 80077fe:	4605      	mov	r5, r0
 8007800:	2800      	cmp	r0, #0
 8007802:	d1d3      	bne.n	80077ac <put_fat+0x24>
			p = fs->win + bc % SS(fs);
 8007804:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007808:	b144      	cbz	r4, 800781c <put_fat+0x94>
 800780a:	f3c6 1207 	ubfx	r2, r6, #4, #8
 800780e:	f80a 2009 	strb.w	r2, [sl, r9]
			fs->wflag = 1;
 8007812:	2301      	movs	r3, #1
 8007814:	70fb      	strb	r3, [r7, #3]
			break;
 8007816:	e7c9      	b.n	80077ac <put_fat+0x24>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007818:	b2f3      	uxtb	r3, r6
 800781a:	e7e6      	b.n	80077ea <put_fat+0x62>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800781c:	f91a 2009 	ldrsb.w	r2, [sl, r9]
 8007820:	f022 020f 	bic.w	r2, r2, #15
 8007824:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8007828:	4332      	orrs	r2, r6
 800782a:	b2d2      	uxtb	r2, r2
 800782c:	e7ef      	b.n	800780e <put_fat+0x86>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800782e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8007830:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8007834:	f7ff fdcc 	bl	80073d0 <move_window>
			if (res != FR_OK) break;
 8007838:	4605      	mov	r5, r0
 800783a:	2800      	cmp	r0, #0
 800783c:	d1b6      	bne.n	80077ac <put_fat+0x24>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800783e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8007842:	0064      	lsls	r4, r4, #1
 8007844:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8007848:	b2b1      	uxth	r1, r6
 800784a:	4420      	add	r0, r4
 800784c:	f7ff fac2 	bl	8006dd4 <st_word>
			fs->wflag = 1;
 8007850:	2301      	movs	r3, #1
 8007852:	70fb      	strb	r3, [r7, #3]
			break;
 8007854:	e7aa      	b.n	80077ac <put_fat+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007856:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8007858:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800785c:	f7ff fdb8 	bl	80073d0 <move_window>
			if (res != FR_OK) break;
 8007860:	4605      	mov	r5, r0
 8007862:	2800      	cmp	r0, #0
 8007864:	d1a2      	bne.n	80077ac <put_fat+0x24>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007866:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 800786a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800786e:	00a4      	lsls	r4, r4, #2
 8007870:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8007874:	441c      	add	r4, r3
 8007876:	4620      	mov	r0, r4
 8007878:	f7ff faa1 	bl	8006dbe <ld_dword>
 800787c:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007880:	4331      	orrs	r1, r6
 8007882:	4620      	mov	r0, r4
 8007884:	f7ff faaa 	bl	8006ddc <st_dword>
			fs->wflag = 1;
 8007888:	2301      	movs	r3, #1
 800788a:	70fb      	strb	r3, [r7, #3]
			break;
 800788c:	e78e      	b.n	80077ac <put_fat+0x24>
	FRESULT res = FR_INT_ERR;
 800788e:	2502      	movs	r5, #2
 8007890:	e78c      	b.n	80077ac <put_fat+0x24>
 8007892:	2502      	movs	r5, #2
 8007894:	e78a      	b.n	80077ac <put_fat+0x24>

08007896 <get_fat>:
{
 8007896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8007898:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800789a:	2901      	cmp	r1, #1
 800789c:	d956      	bls.n	800794c <get_fat+0xb6>
 800789e:	460c      	mov	r4, r1
 80078a0:	69ab      	ldr	r3, [r5, #24]
 80078a2:	428b      	cmp	r3, r1
 80078a4:	d954      	bls.n	8007950 <get_fat+0xba>
		switch (fs->fs_type) {
 80078a6:	782b      	ldrb	r3, [r5, #0]
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d02d      	beq.n	8007908 <get_fat+0x72>
 80078ac:	2b03      	cmp	r3, #3
 80078ae:	d03b      	beq.n	8007928 <get_fat+0x92>
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d001      	beq.n	80078b8 <get_fat+0x22>
 80078b4:	2001      	movs	r0, #1
 80078b6:	e04a      	b.n	800794e <get_fat+0xb8>
			bc = (UINT)clst; bc += bc / 2;
 80078b8:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078bc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80078be:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 80078c2:	4628      	mov	r0, r5
 80078c4:	f7ff fd84 	bl	80073d0 <move_window>
 80078c8:	b110      	cbz	r0, 80078d0 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80078ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078ce:	e03e      	b.n	800794e <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
 80078d0:	1c77      	adds	r7, r6, #1
 80078d2:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80078d6:	442e      	add	r6, r5
 80078d8:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078dc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80078de:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80078e2:	4628      	mov	r0, r5
 80078e4:	f7ff fd74 	bl	80073d0 <move_window>
 80078e8:	bba0      	cbnz	r0, 8007954 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 80078ea:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80078ee:	443d      	add	r5, r7
 80078f0:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 80078f4:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80078f8:	f014 0f01 	tst.w	r4, #1
 80078fc:	d001      	beq.n	8007902 <get_fat+0x6c>
 80078fe:	0900      	lsrs	r0, r0, #4
 8007900:	e025      	b.n	800794e <get_fat+0xb8>
 8007902:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8007906:	e022      	b.n	800794e <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007908:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800790a:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800790e:	4628      	mov	r0, r5
 8007910:	f7ff fd5e 	bl	80073d0 <move_window>
 8007914:	bb08      	cbnz	r0, 800795a <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007916:	f105 0034 	add.w	r0, r5, #52	; 0x34
 800791a:	0064      	lsls	r4, r4, #1
 800791c:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8007920:	4420      	add	r0, r4
 8007922:	f7ff fa47 	bl	8006db4 <ld_word>
			break;
 8007926:	e012      	b.n	800794e <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007928:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800792a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800792e:	4628      	mov	r0, r5
 8007930:	f7ff fd4e 	bl	80073d0 <move_window>
 8007934:	b9a0      	cbnz	r0, 8007960 <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007936:	f105 0034 	add.w	r0, r5, #52	; 0x34
 800793a:	00a4      	lsls	r4, r4, #2
 800793c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8007940:	4420      	add	r0, r4
 8007942:	f7ff fa3c 	bl	8006dbe <ld_dword>
 8007946:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 800794a:	e000      	b.n	800794e <get_fat+0xb8>
		val = 1;	/* Internal error */
 800794c:	2001      	movs	r0, #1
}
 800794e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8007950:	2001      	movs	r0, #1
 8007952:	e7fc      	b.n	800794e <get_fat+0xb8>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007958:	e7f9      	b.n	800794e <get_fat+0xb8>
 800795a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800795e:	e7f6      	b.n	800794e <get_fat+0xb8>
 8007960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return val;
 8007964:	e7f3      	b.n	800794e <get_fat+0xb8>

08007966 <dir_sdi>:
{
 8007966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800796a:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800796e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007972:	d240      	bcs.n	80079f6 <dir_sdi+0x90>
 8007974:	4606      	mov	r6, r0
 8007976:	460f      	mov	r7, r1
 8007978:	f011 0f1f 	tst.w	r1, #31
 800797c:	d13d      	bne.n	80079fa <dir_sdi+0x94>
	dp->dptr = ofs;				/* Set current offset */
 800797e:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007980:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007982:	b92c      	cbnz	r4, 8007990 <dir_sdi+0x2a>
 8007984:	f898 3000 	ldrb.w	r3, [r8]
 8007988:	2b02      	cmp	r3, #2
 800798a:	d901      	bls.n	8007990 <dir_sdi+0x2a>
		clst = fs->dirbase;
 800798c:	f8d8 4028 	ldr.w	r4, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007990:	b9b4      	cbnz	r4, 80079c0 <dir_sdi+0x5a>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007992:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8007996:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 800799a:	d930      	bls.n	80079fe <dir_sdi+0x98>
		dp->sect = fs->dirbase;
 800799c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 80079a0:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 80079a2:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 80079a4:	69f3      	ldr	r3, [r6, #28]
 80079a6:	b393      	cbz	r3, 8007a0e <dir_sdi+0xa8>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80079a8:	eb03 2357 	add.w	r3, r3, r7, lsr #9
 80079ac:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80079ae:	f108 0334 	add.w	r3, r8, #52	; 0x34
 80079b2:	f3c7 0108 	ubfx	r1, r7, #0, #9
 80079b6:	4419      	add	r1, r3
 80079b8:	6231      	str	r1, [r6, #32]
	return FR_OK;
 80079ba:	2000      	movs	r0, #0
}
 80079bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80079c0:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 80079c4:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 80079c6:	42af      	cmp	r7, r5
 80079c8:	d30f      	bcc.n	80079ea <dir_sdi+0x84>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80079ca:	4621      	mov	r1, r4
 80079cc:	4630      	mov	r0, r6
 80079ce:	f7ff ff62 	bl	8007896 <get_fat>
 80079d2:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80079d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80079d8:	d013      	beq.n	8007a02 <dir_sdi+0x9c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80079da:	2801      	cmp	r0, #1
 80079dc:	d913      	bls.n	8007a06 <dir_sdi+0xa0>
 80079de:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80079e2:	4283      	cmp	r3, r0
 80079e4:	d911      	bls.n	8007a0a <dir_sdi+0xa4>
			ofs -= csz;
 80079e6:	1b7f      	subs	r7, r7, r5
 80079e8:	e7ed      	b.n	80079c6 <dir_sdi+0x60>
		dp->sect = clust2sect(fs, clst);
 80079ea:	4621      	mov	r1, r4
 80079ec:	4640      	mov	r0, r8
 80079ee:	f7ff fb01 	bl	8006ff4 <clust2sect>
 80079f2:	61f0      	str	r0, [r6, #28]
 80079f4:	e7d5      	b.n	80079a2 <dir_sdi+0x3c>
		return FR_INT_ERR;
 80079f6:	2002      	movs	r0, #2
 80079f8:	e7e0      	b.n	80079bc <dir_sdi+0x56>
 80079fa:	2002      	movs	r0, #2
 80079fc:	e7de      	b.n	80079bc <dir_sdi+0x56>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80079fe:	2002      	movs	r0, #2
 8007a00:	e7dc      	b.n	80079bc <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007a02:	2001      	movs	r0, #1
 8007a04:	e7da      	b.n	80079bc <dir_sdi+0x56>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007a06:	2002      	movs	r0, #2
 8007a08:	e7d8      	b.n	80079bc <dir_sdi+0x56>
 8007a0a:	2002      	movs	r0, #2
 8007a0c:	e7d6      	b.n	80079bc <dir_sdi+0x56>
	if (!dp->sect) return FR_INT_ERR;
 8007a0e:	2002      	movs	r0, #2
 8007a10:	e7d4      	b.n	80079bc <dir_sdi+0x56>

08007a12 <create_chain>:
{
 8007a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a16:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 8007a18:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8007a1a:	460f      	mov	r7, r1
 8007a1c:	b951      	cbnz	r1, 8007a34 <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007a1e:	f8d6 8010 	ldr.w	r8, [r6, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007a22:	f1b8 0f00 	cmp.w	r8, #0
 8007a26:	d012      	beq.n	8007a4e <create_chain+0x3c>
 8007a28:	69b3      	ldr	r3, [r6, #24]
 8007a2a:	4543      	cmp	r3, r8
 8007a2c:	d811      	bhi.n	8007a52 <create_chain+0x40>
 8007a2e:	f04f 0801 	mov.w	r8, #1
 8007a32:	e00e      	b.n	8007a52 <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007a34:	f7ff ff2f 	bl	8007896 <get_fat>
 8007a38:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007a3a:	2801      	cmp	r0, #1
 8007a3c:	d94c      	bls.n	8007ad8 <create_chain+0xc6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007a3e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007a42:	d04e      	beq.n	8007ae2 <create_chain+0xd0>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007a44:	69b2      	ldr	r2, [r6, #24]
 8007a46:	4282      	cmp	r2, r0
 8007a48:	d84b      	bhi.n	8007ae2 <create_chain+0xd0>
		scl = clst;
 8007a4a:	46b8      	mov	r8, r7
 8007a4c:	e001      	b.n	8007a52 <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007a4e:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 8007a52:	4644      	mov	r4, r8
 8007a54:	e00c      	b.n	8007a70 <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007a56:	4621      	mov	r1, r4
 8007a58:	4628      	mov	r0, r5
 8007a5a:	f7ff ff1c 	bl	8007896 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8007a5e:	4603      	mov	r3, r0
 8007a60:	b178      	cbz	r0, 8007a82 <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007a62:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007a66:	bf18      	it	ne
 8007a68:	2801      	cmpne	r0, #1
 8007a6a:	d03a      	beq.n	8007ae2 <create_chain+0xd0>
			if (ncl == scl) return 0;		/* No free cluster */
 8007a6c:	4544      	cmp	r4, r8
 8007a6e:	d037      	beq.n	8007ae0 <create_chain+0xce>
			ncl++;							/* Next cluster */
 8007a70:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007a72:	69b3      	ldr	r3, [r6, #24]
 8007a74:	42a3      	cmp	r3, r4
 8007a76:	d8ee      	bhi.n	8007a56 <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 8007a78:	f1b8 0f01 	cmp.w	r8, #1
 8007a7c:	d92e      	bls.n	8007adc <create_chain+0xca>
				ncl = 2;
 8007a7e:	2402      	movs	r4, #2
 8007a80:	e7e9      	b.n	8007a56 <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007a82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a86:	4621      	mov	r1, r4
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f7ff fe7d 	bl	8007788 <put_fat>
		if (res == FR_OK && clst != 0) {
 8007a8e:	4603      	mov	r3, r0
 8007a90:	fab0 f080 	clz	r0, r0
 8007a94:	0940      	lsrs	r0, r0, #5
 8007a96:	2f00      	cmp	r7, #0
 8007a98:	bf08      	it	eq
 8007a9a:	2000      	moveq	r0, #0
 8007a9c:	b970      	cbnz	r0, 8007abc <create_chain+0xaa>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007a9e:	b9a3      	cbnz	r3, 8007aca <create_chain+0xb8>
		fs->last_clst = ncl;
 8007aa0:	6134      	str	r4, [r6, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007aa2:	6972      	ldr	r2, [r6, #20]
 8007aa4:	69b3      	ldr	r3, [r6, #24]
 8007aa6:	3b02      	subs	r3, #2
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d801      	bhi.n	8007ab0 <create_chain+0x9e>
 8007aac:	3a01      	subs	r2, #1
 8007aae:	6172      	str	r2, [r6, #20]
		fs->fsi_flag |= 1;
 8007ab0:	7933      	ldrb	r3, [r6, #4]
 8007ab2:	f043 0301 	orr.w	r3, r3, #1
 8007ab6:	7133      	strb	r3, [r6, #4]
 8007ab8:	4623      	mov	r3, r4
 8007aba:	e012      	b.n	8007ae2 <create_chain+0xd0>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007abc:	4622      	mov	r2, r4
 8007abe:	4639      	mov	r1, r7
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	f7ff fe61 	bl	8007788 <put_fat>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	e7e9      	b.n	8007a9e <create_chain+0x8c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d001      	beq.n	8007ad2 <create_chain+0xc0>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e007      	b.n	8007ae2 <create_chain+0xd0>
 8007ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ad6:	e004      	b.n	8007ae2 <create_chain+0xd0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e002      	b.n	8007ae2 <create_chain+0xd0>
				if (ncl > scl) return 0;	/* No free cluster */
 8007adc:	2300      	movs	r3, #0
 8007ade:	e000      	b.n	8007ae2 <create_chain+0xd0>
			if (ncl == scl) return 0;		/* No free cluster */
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007ae8 <remove_chain>:
{
 8007ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aea:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 8007aec:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007aee:	2901      	cmp	r1, #1
 8007af0:	d92e      	bls.n	8007b50 <remove_chain+0x68>
 8007af2:	4606      	mov	r6, r0
 8007af4:	4611      	mov	r1, r2
 8007af6:	69ab      	ldr	r3, [r5, #24]
 8007af8:	42a3      	cmp	r3, r4
 8007afa:	d92b      	bls.n	8007b54 <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007afc:	b14a      	cbz	r2, 8007b12 <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007afe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b02:	4628      	mov	r0, r5
 8007b04:	f7ff fe40 	bl	8007788 <put_fat>
		if (res != FR_OK) return res;
 8007b08:	4607      	mov	r7, r0
 8007b0a:	b110      	cbz	r0, 8007b12 <remove_chain+0x2a>
 8007b0c:	e023      	b.n	8007b56 <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007b0e:	42a2      	cmp	r2, r4
 8007b10:	d921      	bls.n	8007b56 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007b12:	4627      	mov	r7, r4
 8007b14:	4621      	mov	r1, r4
 8007b16:	4630      	mov	r0, r6
 8007b18:	f7ff febd 	bl	8007896 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8007b1c:	4604      	mov	r4, r0
 8007b1e:	b1e0      	cbz	r0, 8007b5a <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007b20:	2801      	cmp	r0, #1
 8007b22:	d01c      	beq.n	8007b5e <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007b24:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007b28:	d01b      	beq.n	8007b62 <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	4639      	mov	r1, r7
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f7ff fe2a 	bl	8007788 <put_fat>
			if (res != FR_OK) return res;
 8007b34:	4607      	mov	r7, r0
 8007b36:	b970      	cbnz	r0, 8007b56 <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007b38:	696b      	ldr	r3, [r5, #20]
 8007b3a:	69aa      	ldr	r2, [r5, #24]
 8007b3c:	1e91      	subs	r1, r2, #2
 8007b3e:	428b      	cmp	r3, r1
 8007b40:	d2e5      	bcs.n	8007b0e <remove_chain+0x26>
			fs->free_clst++;
 8007b42:	3301      	adds	r3, #1
 8007b44:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8007b46:	792b      	ldrb	r3, [r5, #4]
 8007b48:	f043 0301 	orr.w	r3, r3, #1
 8007b4c:	712b      	strb	r3, [r5, #4]
 8007b4e:	e7de      	b.n	8007b0e <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007b50:	2702      	movs	r7, #2
 8007b52:	e000      	b.n	8007b56 <remove_chain+0x6e>
 8007b54:	2702      	movs	r7, #2
}
 8007b56:	4638      	mov	r0, r7
 8007b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 8007b5a:	2700      	movs	r7, #0
 8007b5c:	e7fb      	b.n	8007b56 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007b5e:	2702      	movs	r7, #2
 8007b60:	e7f9      	b.n	8007b56 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007b62:	2701      	movs	r7, #1
 8007b64:	e7f7      	b.n	8007b56 <remove_chain+0x6e>

08007b66 <dir_next>:
{
 8007b66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
 8007b6a:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007b6c:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007b6e:	69c3      	ldr	r3, [r0, #28]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d06c      	beq.n	8007c4e <dir_next+0xe8>
 8007b74:	4604      	mov	r4, r0
 8007b76:	4688      	mov	r8, r1
 8007b78:	3520      	adds	r5, #32
 8007b7a:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8007b7e:	d268      	bcs.n	8007c52 <dir_next+0xec>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007b80:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8007b84:	b93f      	cbnz	r7, 8007b96 <dir_next+0x30>
		dp->sect++;				/* Next sector */
 8007b86:	3301      	adds	r3, #1
 8007b88:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8007b8a:	6981      	ldr	r1, [r0, #24]
 8007b8c:	b979      	cbnz	r1, 8007bae <dir_next+0x48>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007b8e:	8933      	ldrh	r3, [r6, #8]
 8007b90:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8007b94:	d907      	bls.n	8007ba6 <dir_next+0x40>
	dp->dptr = ofs;						/* Current entry */
 8007b96:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007b98:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8007b9c:	443b      	add	r3, r7
 8007b9e:	6223      	str	r3, [r4, #32]
	return FR_OK;
 8007ba0:	2000      	movs	r0, #0
}
 8007ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	61c3      	str	r3, [r0, #28]
 8007baa:	2004      	movs	r0, #4
 8007bac:	e7f9      	b.n	8007ba2 <dir_next+0x3c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007bae:	8973      	ldrh	r3, [r6, #10]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 8007bb6:	d1ee      	bne.n	8007b96 <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007bb8:	f7ff fe6d 	bl	8007896 <get_fat>
 8007bbc:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007bbe:	2801      	cmp	r0, #1
 8007bc0:	d949      	bls.n	8007c56 <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007bc2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007bc6:	d048      	beq.n	8007c5a <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007bc8:	69b3      	ldr	r3, [r6, #24]
 8007bca:	4283      	cmp	r3, r0
 8007bcc:	d837      	bhi.n	8007c3e <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 8007bce:	f1b8 0f00 	cmp.w	r8, #0
 8007bd2:	d011      	beq.n	8007bf8 <dir_next+0x92>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007bd4:	69a1      	ldr	r1, [r4, #24]
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f7ff ff1b 	bl	8007a12 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007bdc:	4682      	mov	sl, r0
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d03d      	beq.n	8007c5e <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007be2:	2801      	cmp	r0, #1
 8007be4:	d03d      	beq.n	8007c62 <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007be6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007bea:	d03c      	beq.n	8007c66 <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007bec:	4630      	mov	r0, r6
 8007bee:	f7ff fbc5 	bl	800737c <sync_window>
 8007bf2:	b128      	cbz	r0, 8007c00 <dir_next+0x9a>
 8007bf4:	2001      	movs	r0, #1
 8007bf6:	e7d4      	b.n	8007ba2 <dir_next+0x3c>
						dp->sect = 0; return FR_NO_FILE;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	61e3      	str	r3, [r4, #28]
 8007bfc:	2004      	movs	r0, #4
 8007bfe:	e7d0      	b.n	8007ba2 <dir_next+0x3c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c04:	2100      	movs	r1, #0
 8007c06:	f106 0034 	add.w	r0, r6, #52	; 0x34
 8007c0a:	f7ff f8fb 	bl	8006e04 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007c0e:	4651      	mov	r1, sl
 8007c10:	4630      	mov	r0, r6
 8007c12:	f7ff f9ef 	bl	8006ff4 <clust2sect>
 8007c16:	6330      	str	r0, [r6, #48]	; 0x30
 8007c18:	8973      	ldrh	r3, [r6, #10]
 8007c1a:	4599      	cmp	r9, r3
 8007c1c:	d20b      	bcs.n	8007c36 <dir_next+0xd0>
						fs->wflag = 1;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007c22:	4630      	mov	r0, r6
 8007c24:	f7ff fbaa 	bl	800737c <sync_window>
 8007c28:	b9f8      	cbnz	r0, 8007c6a <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007c2a:	f109 0901 	add.w	r9, r9, #1
 8007c2e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8007c30:	3301      	adds	r3, #1
 8007c32:	6333      	str	r3, [r6, #48]	; 0x30
 8007c34:	e7f0      	b.n	8007c18 <dir_next+0xb2>
					fs->winsect -= n;							/* Restore window offset */
 8007c36:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8007c38:	eba3 0309 	sub.w	r3, r3, r9
 8007c3c:	6333      	str	r3, [r6, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 8007c3e:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 8007c42:	4651      	mov	r1, sl
 8007c44:	4630      	mov	r0, r6
 8007c46:	f7ff f9d5 	bl	8006ff4 <clust2sect>
 8007c4a:	61e0      	str	r0, [r4, #28]
 8007c4c:	e7a3      	b.n	8007b96 <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007c4e:	2004      	movs	r0, #4
 8007c50:	e7a7      	b.n	8007ba2 <dir_next+0x3c>
 8007c52:	2004      	movs	r0, #4
 8007c54:	e7a5      	b.n	8007ba2 <dir_next+0x3c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007c56:	2002      	movs	r0, #2
 8007c58:	e7a3      	b.n	8007ba2 <dir_next+0x3c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007c5a:	2001      	movs	r0, #1
 8007c5c:	e7a1      	b.n	8007ba2 <dir_next+0x3c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007c5e:	2007      	movs	r0, #7
 8007c60:	e79f      	b.n	8007ba2 <dir_next+0x3c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007c62:	2002      	movs	r0, #2
 8007c64:	e79d      	b.n	8007ba2 <dir_next+0x3c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007c66:	2001      	movs	r0, #1
 8007c68:	e79b      	b.n	8007ba2 <dir_next+0x3c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007c6a:	2001      	movs	r0, #1
 8007c6c:	e799      	b.n	8007ba2 <dir_next+0x3c>

08007c6e <dir_alloc>:
{
 8007c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c70:	4604      	mov	r4, r0
 8007c72:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 8007c74:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 8007c76:	2100      	movs	r1, #0
 8007c78:	f7ff fe75 	bl	8007966 <dir_sdi>
	if (res == FR_OK) {
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	b9b8      	cbnz	r0, 8007cb0 <dir_alloc+0x42>
		n = 0;
 8007c80:	2500      	movs	r5, #0
 8007c82:	e006      	b.n	8007c92 <dir_alloc+0x24>
				n = 0;					/* Not a blank entry. Restart to search */
 8007c84:	2500      	movs	r5, #0
			res = dir_next(dp, 1);
 8007c86:	2101      	movs	r1, #1
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f7ff ff6c 	bl	8007b66 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007c8e:	4602      	mov	r2, r0
 8007c90:	b970      	cbnz	r0, 8007cb0 <dir_alloc+0x42>
			res = move_window(fs, dp->sect);
 8007c92:	69e1      	ldr	r1, [r4, #28]
 8007c94:	4638      	mov	r0, r7
 8007c96:	f7ff fb9b 	bl	80073d0 <move_window>
			if (res != FR_OK) break;
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	b940      	cbnz	r0, 8007cb0 <dir_alloc+0x42>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007c9e:	6a23      	ldr	r3, [r4, #32]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	bf18      	it	ne
 8007ca6:	2be5      	cmpne	r3, #229	; 0xe5
 8007ca8:	d1ec      	bne.n	8007c84 <dir_alloc+0x16>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007caa:	3501      	adds	r5, #1
 8007cac:	42b5      	cmp	r5, r6
 8007cae:	d1ea      	bne.n	8007c86 <dir_alloc+0x18>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007cb0:	2a04      	cmp	r2, #4
 8007cb2:	d001      	beq.n	8007cb8 <dir_alloc+0x4a>
}
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007cb8:	2207      	movs	r2, #7
 8007cba:	e7fb      	b.n	8007cb4 <dir_alloc+0x46>

08007cbc <dir_read>:
{
 8007cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cc0:	4604      	mov	r4, r0
 8007cc2:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
 8007cc4:	6807      	ldr	r7, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 8007cc6:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8007cca:	464e      	mov	r6, r9
	FRESULT res = FR_NO_FILE;
 8007ccc:	2504      	movs	r5, #4
	while (dp->sect) {
 8007cce:	e02c      	b.n	8007d2a <dir_read+0x6e>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8007cd0:	2b0f      	cmp	r3, #15
 8007cd2:	d119      	bne.n	8007d08 <dir_read+0x4c>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8007cd4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007cd8:	d006      	beq.n	8007ce8 <dir_read+0x2c>
						sum = dp->dir[LDIR_Chksum];
 8007cda:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 8007cde:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 8007ce2:	6963      	ldr	r3, [r4, #20]
 8007ce4:	6323      	str	r3, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;
 8007ce6:	4616      	mov	r6, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007ce8:	42b2      	cmp	r2, r6
 8007cea:	d001      	beq.n	8007cf0 <dir_read+0x34>
 8007cec:	26ff      	movs	r6, #255	; 0xff
 8007cee:	e016      	b.n	8007d1e <dir_read+0x62>
 8007cf0:	7b4b      	ldrb	r3, [r1, #13]
 8007cf2:	454b      	cmp	r3, r9
 8007cf4:	d001      	beq.n	8007cfa <dir_read+0x3e>
 8007cf6:	26ff      	movs	r6, #255	; 0xff
 8007cf8:	e011      	b.n	8007d1e <dir_read+0x62>
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f7ff f9ac 	bl	8007058 <pick_lfn>
 8007d00:	b378      	cbz	r0, 8007d62 <dir_read+0xa6>
 8007d02:	3e01      	subs	r6, #1
 8007d04:	b2f6      	uxtb	r6, r6
 8007d06:	e00a      	b.n	8007d1e <dir_read+0x62>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8007d08:	b926      	cbnz	r6, 8007d14 <dir_read+0x58>
 8007d0a:	4608      	mov	r0, r1
 8007d0c:	f7ff fa77 	bl	80071fe <sum_sfn>
 8007d10:	4548      	cmp	r0, r9
 8007d12:	d029      	beq.n	8007d68 <dir_read+0xac>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8007d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d18:	6323      	str	r3, [r4, #48]	; 0x30
 8007d1a:	e025      	b.n	8007d68 <dir_read+0xac>
				ord = 0xFF;
 8007d1c:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 8007d1e:	2100      	movs	r1, #0
 8007d20:	4620      	mov	r0, r4
 8007d22:	f7ff ff20 	bl	8007b66 <dir_next>
		if (res != FR_OK) break;
 8007d26:	4605      	mov	r5, r0
 8007d28:	b9f0      	cbnz	r0, 8007d68 <dir_read+0xac>
	while (dp->sect) {
 8007d2a:	69e1      	ldr	r1, [r4, #28]
 8007d2c:	b1e1      	cbz	r1, 8007d68 <dir_read+0xac>
		res = move_window(fs, dp->sect);
 8007d2e:	4638      	mov	r0, r7
 8007d30:	f7ff fb4e 	bl	80073d0 <move_window>
		if (res != FR_OK) break;
 8007d34:	4605      	mov	r5, r0
 8007d36:	b9b8      	cbnz	r0, 8007d68 <dir_read+0xac>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007d38:	6a21      	ldr	r1, [r4, #32]
 8007d3a:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 8007d3c:	b19a      	cbz	r2, 8007d66 <dir_read+0xaa>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007d3e:	7acb      	ldrb	r3, [r1, #11]
 8007d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d44:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8007d46:	2a2e      	cmp	r2, #46	; 0x2e
 8007d48:	bf18      	it	ne
 8007d4a:	2ae5      	cmpne	r2, #229	; 0xe5
 8007d4c:	d0e6      	beq.n	8007d1c <dir_read+0x60>
 8007d4e:	f023 0020 	bic.w	r0, r3, #32
 8007d52:	2808      	cmp	r0, #8
 8007d54:	bf14      	ite	ne
 8007d56:	2000      	movne	r0, #0
 8007d58:	2001      	moveq	r0, #1
 8007d5a:	4540      	cmp	r0, r8
 8007d5c:	d0b8      	beq.n	8007cd0 <dir_read+0x14>
				ord = 0xFF;
 8007d5e:	26ff      	movs	r6, #255	; 0xff
 8007d60:	e7dd      	b.n	8007d1e <dir_read+0x62>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007d62:	26ff      	movs	r6, #255	; 0xff
 8007d64:	e7db      	b.n	8007d1e <dir_read+0x62>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007d66:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007d68:	b10d      	cbz	r5, 8007d6e <dir_read+0xb2>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	61e3      	str	r3, [r4, #28]
}
 8007d6e:	4628      	mov	r0, r5
 8007d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007d74 <create_name>:
{
 8007d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d78:	b083      	sub	sp, #12
 8007d7a:	4680      	mov	r8, r0
 8007d7c:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007d7e:	f8d1 9000 	ldr.w	r9, [r1]
 8007d82:	6803      	ldr	r3, [r0, #0]
 8007d84:	68dd      	ldr	r5, [r3, #12]
 8007d86:	2400      	movs	r4, #0
 8007d88:	4623      	mov	r3, r4
 8007d8a:	e01d      	b.n	8007dc8 <create_name+0x54>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007d8c:	3701      	adds	r7, #1
 8007d8e:	f819 3007 	ldrb.w	r3, [r9, r7]
 8007d92:	2b5c      	cmp	r3, #92	; 0x5c
 8007d94:	bf18      	it	ne
 8007d96:	2b2f      	cmpne	r3, #47	; 0x2f
 8007d98:	d0f8      	beq.n	8007d8c <create_name+0x18>
	*path = &p[si];						/* Return pointer to the next segment */
 8007d9a:	444f      	add	r7, r9
 8007d9c:	f8ca 7000 	str.w	r7, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007da0:	281f      	cmp	r0, #31
 8007da2:	d82e      	bhi.n	8007e02 <create_name+0x8e>
 8007da4:	f04f 0904 	mov.w	r9, #4
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007da8:	b374      	cbz	r4, 8007e08 <create_name+0x94>
		w = lfn[di - 1];
 8007daa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007dae:	4423      	add	r3, r4
 8007db0:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 8007db4:	2b20      	cmp	r3, #32
 8007db6:	bf18      	it	ne
 8007db8:	2b2e      	cmpne	r3, #46	; 0x2e
 8007dba:	d125      	bne.n	8007e08 <create_name+0x94>
		di--;
 8007dbc:	3c01      	subs	r4, #1
 8007dbe:	e7f3      	b.n	8007da8 <create_name+0x34>
		lfn[di++] = w;					/* Store the Unicode character */
 8007dc0:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
 8007dc4:	3401      	adds	r4, #1
		w = p[si++];					/* Get a character */
 8007dc6:	463b      	mov	r3, r7
 8007dc8:	1c5f      	adds	r7, r3, #1
 8007dca:	f819 0003 	ldrb.w	r0, [r9, r3]
		if (w < ' ') break;				/* Break if end of the path name */
 8007dce:	281f      	cmp	r0, #31
 8007dd0:	d9e3      	bls.n	8007d9a <create_name+0x26>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007dd2:	285c      	cmp	r0, #92	; 0x5c
 8007dd4:	bf18      	it	ne
 8007dd6:	282f      	cmpne	r0, #47	; 0x2f
 8007dd8:	d0d9      	beq.n	8007d8e <create_name+0x1a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007dda:	2cfe      	cmp	r4, #254	; 0xfe
 8007ddc:	f200 80d7 	bhi.w	8007f8e <create_name+0x21a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007de0:	2101      	movs	r1, #1
 8007de2:	f000 fea5 	bl	8008b30 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007de6:	4606      	mov	r6, r0
 8007de8:	2800      	cmp	r0, #0
 8007dea:	f000 80d2 	beq.w	8007f92 <create_name+0x21e>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007dee:	287f      	cmp	r0, #127	; 0x7f
 8007df0:	d8e6      	bhi.n	8007dc0 <create_name+0x4c>
 8007df2:	4601      	mov	r1, r0
 8007df4:	4869      	ldr	r0, [pc, #420]	; (8007f9c <create_name+0x228>)
 8007df6:	f7ff f817 	bl	8006e28 <chk_chr>
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	d0e0      	beq.n	8007dc0 <create_name+0x4c>
 8007dfe:	2006      	movs	r0, #6
 8007e00:	e06f      	b.n	8007ee2 <create_name+0x16e>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007e02:	f04f 0900 	mov.w	r9, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007e06:	e7cf      	b.n	8007da8 <create_name+0x34>
	lfn[di] = 0;						/* LFN is created */
 8007e08:	2300      	movs	r3, #0
 8007e0a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007e0e:	2c00      	cmp	r4, #0
 8007e10:	f000 80c1 	beq.w	8007f96 <create_name+0x222>
	mem_set(dp->fn, ' ', 11);
 8007e14:	220b      	movs	r2, #11
 8007e16:	2120      	movs	r1, #32
 8007e18:	f108 0024 	add.w	r0, r8, #36	; 0x24
 8007e1c:	f7fe fff2 	bl	8006e04 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007e20:	2300      	movs	r3, #0
 8007e22:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 8007e26:	2a2e      	cmp	r2, #46	; 0x2e
 8007e28:	bf18      	it	ne
 8007e2a:	2a20      	cmpne	r2, #32
 8007e2c:	d101      	bne.n	8007e32 <create_name+0xbe>
 8007e2e:	3301      	adds	r3, #1
 8007e30:	e7f7      	b.n	8007e22 <create_name+0xae>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007e32:	b11b      	cbz	r3, 8007e3c <create_name+0xc8>
 8007e34:	f049 0903 	orr.w	r9, r9, #3
 8007e38:	e000      	b.n	8007e3c <create_name+0xc8>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007e3a:	3c01      	subs	r4, #1
 8007e3c:	b16c      	cbz	r4, 8007e5a <create_name+0xe6>
 8007e3e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007e42:	4422      	add	r2, r4
 8007e44:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 8007e48:	2a2e      	cmp	r2, #46	; 0x2e
 8007e4a:	d1f6      	bne.n	8007e3a <create_name+0xc6>
 8007e4c:	f04f 0b08 	mov.w	fp, #8
 8007e50:	f04f 0a00 	mov.w	sl, #0
 8007e54:	f8cd a004 	str.w	sl, [sp, #4]
 8007e58:	e008      	b.n	8007e6c <create_name+0xf8>
 8007e5a:	46a2      	mov	sl, r4
 8007e5c:	f04f 0b08 	mov.w	fp, #8
 8007e60:	2200      	movs	r2, #0
 8007e62:	9201      	str	r2, [sp, #4]
 8007e64:	e002      	b.n	8007e6c <create_name+0xf8>
			cf |= NS_LOSS | NS_LFN; continue;
 8007e66:	f049 0903 	orr.w	r9, r9, #3
		w = lfn[si++];					/* Get an LFN character */
 8007e6a:	463b      	mov	r3, r7
 8007e6c:	1c5f      	adds	r7, r3, #1
 8007e6e:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 8007e72:	b1be      	cbz	r6, 8007ea4 <create_name+0x130>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007e74:	2e20      	cmp	r6, #32
 8007e76:	d0f6      	beq.n	8007e66 <create_name+0xf2>
 8007e78:	2e2e      	cmp	r6, #46	; 0x2e
 8007e7a:	bf14      	ite	ne
 8007e7c:	2300      	movne	r3, #0
 8007e7e:	2301      	moveq	r3, #1
 8007e80:	42bc      	cmp	r4, r7
 8007e82:	bf08      	it	eq
 8007e84:	2300      	moveq	r3, #0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1ed      	bne.n	8007e66 <create_name+0xf2>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007e8a:	42bc      	cmp	r4, r7
 8007e8c:	bf18      	it	ne
 8007e8e:	45da      	cmpne	sl, fp
 8007e90:	d337      	bcc.n	8007f02 <create_name+0x18e>
			if (ni == 11) {				/* Long extension */
 8007e92:	f1bb 0f0b 	cmp.w	fp, #11
 8007e96:	d027      	beq.n	8007ee8 <create_name+0x174>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007e98:	42bc      	cmp	r4, r7
 8007e9a:	d001      	beq.n	8007ea0 <create_name+0x12c>
 8007e9c:	f049 0903 	orr.w	r9, r9, #3
			if (si > di) break;			/* No extension */
 8007ea0:	42bc      	cmp	r4, r7
 8007ea2:	d224      	bcs.n	8007eee <create_name+0x17a>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007ea4:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 8007ea8:	2be5      	cmp	r3, #229	; 0xe5
 8007eaa:	d061      	beq.n	8007f70 <create_name+0x1fc>
	if (ni == 8) b <<= 2;
 8007eac:	f1bb 0f08 	cmp.w	fp, #8
 8007eb0:	d062      	beq.n	8007f78 <create_name+0x204>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007eb2:	9b01      	ldr	r3, [sp, #4]
 8007eb4:	f003 020c 	and.w	r2, r3, #12
 8007eb8:	2a0c      	cmp	r2, #12
 8007eba:	d003      	beq.n	8007ec4 <create_name+0x150>
 8007ebc:	f003 0303 	and.w	r3, r3, #3
 8007ec0:	2b03      	cmp	r3, #3
 8007ec2:	d101      	bne.n	8007ec8 <create_name+0x154>
 8007ec4:	f049 0902 	orr.w	r9, r9, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007ec8:	f019 0f02 	tst.w	r9, #2
 8007ecc:	d106      	bne.n	8007edc <create_name+0x168>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007ece:	9b01      	ldr	r3, [sp, #4]
 8007ed0:	f003 0303 	and.w	r3, r3, #3
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d054      	beq.n	8007f82 <create_name+0x20e>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007ed8:	2a04      	cmp	r2, #4
 8007eda:	d055      	beq.n	8007f88 <create_name+0x214>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007edc:	f888 902f 	strb.w	r9, [r8, #47]	; 0x2f
	return FR_OK;
 8007ee0:	2000      	movs	r0, #0
}
 8007ee2:	b003      	add	sp, #12
 8007ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 8007ee8:	f049 0903 	orr.w	r9, r9, #3
 8007eec:	e7da      	b.n	8007ea4 <create_name+0x130>
			b <<= 2; continue;
 8007eee:	9b01      	ldr	r3, [sp, #4]
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007ef6:	4623      	mov	r3, r4
 8007ef8:	f04f 0b0b 	mov.w	fp, #11
 8007efc:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 8007f00:	e7b4      	b.n	8007e6c <create_name+0xf8>
		if (w >= 0x80) {				/* Non ASCII character */
 8007f02:	2e7f      	cmp	r6, #127	; 0x7f
 8007f04:	d80b      	bhi.n	8007f1e <create_name+0x1aa>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007f06:	b9be      	cbnz	r6, 8007f38 <create_name+0x1c4>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007f08:	f049 0903 	orr.w	r9, r9, #3
 8007f0c:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8007f0e:	eb08 030a 	add.w	r3, r8, sl
 8007f12:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007f16:	463b      	mov	r3, r7
		dp->fn[i++] = (BYTE)w;
 8007f18:	f10a 0a01 	add.w	sl, sl, #1
 8007f1c:	e7a6      	b.n	8007e6c <create_name+0xf8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007f1e:	2100      	movs	r1, #0
 8007f20:	4630      	mov	r0, r6
 8007f22:	f000 fe05 	bl	8008b30 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007f26:	4606      	mov	r6, r0
 8007f28:	b118      	cbz	r0, 8007f32 <create_name+0x1be>
 8007f2a:	f1a0 0680 	sub.w	r6, r0, #128	; 0x80
 8007f2e:	4b1c      	ldr	r3, [pc, #112]	; (8007fa0 <create_name+0x22c>)
 8007f30:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
 8007f32:	f049 0902 	orr.w	r9, r9, #2
 8007f36:	e7e6      	b.n	8007f06 <create_name+0x192>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007f38:	4631      	mov	r1, r6
 8007f3a:	481a      	ldr	r0, [pc, #104]	; (8007fa4 <create_name+0x230>)
 8007f3c:	f7fe ff74 	bl	8006e28 <chk_chr>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d1e1      	bne.n	8007f08 <create_name+0x194>
				if (IsUpper(w)) {		/* ASCII large capital */
 8007f44:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	2b19      	cmp	r3, #25
 8007f4c:	d804      	bhi.n	8007f58 <create_name+0x1e4>
					b |= 2;
 8007f4e:	9b01      	ldr	r3, [sp, #4]
 8007f50:	f043 0302 	orr.w	r3, r3, #2
 8007f54:	9301      	str	r3, [sp, #4]
 8007f56:	e7da      	b.n	8007f0e <create_name+0x19a>
					if (IsLower(w)) {	/* ASCII small capital */
 8007f58:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	2b19      	cmp	r3, #25
 8007f60:	d8d5      	bhi.n	8007f0e <create_name+0x19a>
						b |= 1; w -= 0x20;
 8007f62:	9b01      	ldr	r3, [sp, #4]
 8007f64:	f043 0301 	orr.w	r3, r3, #1
 8007f68:	9301      	str	r3, [sp, #4]
 8007f6a:	3e20      	subs	r6, #32
 8007f6c:	b2b6      	uxth	r6, r6
 8007f6e:	e7ce      	b.n	8007f0e <create_name+0x19a>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007f70:	2305      	movs	r3, #5
 8007f72:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
 8007f76:	e799      	b.n	8007eac <create_name+0x138>
	if (ni == 8) b <<= 2;
 8007f78:	9b01      	ldr	r3, [sp, #4]
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	9301      	str	r3, [sp, #4]
 8007f80:	e797      	b.n	8007eb2 <create_name+0x13e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007f82:	f049 0910 	orr.w	r9, r9, #16
 8007f86:	e7a7      	b.n	8007ed8 <create_name+0x164>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007f88:	f049 0908 	orr.w	r9, r9, #8
 8007f8c:	e7a6      	b.n	8007edc <create_name+0x168>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007f8e:	2006      	movs	r0, #6
 8007f90:	e7a7      	b.n	8007ee2 <create_name+0x16e>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007f92:	2006      	movs	r0, #6
 8007f94:	e7a5      	b.n	8007ee2 <create_name+0x16e>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007f96:	2006      	movs	r0, #6
 8007f98:	e7a3      	b.n	8007ee2 <create_name+0x16e>
 8007f9a:	bf00      	nop
 8007f9c:	08008c8c 	.word	0x08008c8c
 8007fa0:	08008ca0 	.word	0x08008ca0
 8007fa4:	08008c98 	.word	0x08008c98

08007fa8 <get_fileinfo>:
{
 8007fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8007fac:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007fb4:	69c3      	ldr	r3, [r0, #28]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d06b      	beq.n	8008092 <get_fileinfo+0xea>
 8007fba:	4606      	mov	r6, r0
 8007fbc:	460c      	mov	r4, r1
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8007fbe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fc4:	d016      	beq.n	8007ff4 <get_fileinfo+0x4c>
			i = j = 0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	461d      	mov	r5, r3
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007fca:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8007fce:	1c5f      	adds	r7, r3, #1
 8007fd0:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8007fd4:	b158      	cbz	r0, 8007fee <get_fileinfo+0x46>
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	f000 fdaa 	bl	8008b30 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8007fdc:	b130      	cbz	r0, 8007fec <get_fileinfo+0x44>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8007fde:	2dfe      	cmp	r5, #254	; 0xfe
 8007fe0:	d80c      	bhi.n	8007ffc <get_fileinfo+0x54>
				fno->fname[i++] = (TCHAR)w;
 8007fe2:	1962      	adds	r2, r4, r5
 8007fe4:	7590      	strb	r0, [r2, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007fe6:	463b      	mov	r3, r7
				fno->fname[i++] = (TCHAR)w;
 8007fe8:	3501      	adds	r5, #1
 8007fea:	e7ee      	b.n	8007fca <get_fileinfo+0x22>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8007fec:	2500      	movs	r5, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 8007fee:	4425      	add	r5, r4
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	75ab      	strb	r3, [r5, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8007ff4:	7da5      	ldrb	r5, [r4, #22]
	i = j = 0;
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	4613      	mov	r3, r2
	while (i < 11) {		/* Copy name body and extension */
 8007ffa:	e012      	b.n	8008022 <get_fileinfo+0x7a>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8007ffc:	2500      	movs	r5, #0
 8007ffe:	e7f6      	b.n	8007fee <get_fileinfo+0x46>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008000:	23e5      	movs	r3, #229	; 0xe5
 8008002:	e017      	b.n	8008034 <get_fileinfo+0x8c>
			if (!lfv) fno->fname[j] = '.';
 8008004:	b915      	cbnz	r5, 800800c <get_fileinfo+0x64>
 8008006:	18a0      	adds	r0, r4, r2
 8008008:	272e      	movs	r7, #46	; 0x2e
 800800a:	7587      	strb	r7, [r0, #22]
			fno->altname[j++] = '.';
 800800c:	18a0      	adds	r0, r4, r2
 800800e:	272e      	movs	r7, #46	; 0x2e
 8008010:	7247      	strb	r7, [r0, #9]
 8008012:	3201      	adds	r2, #1
 8008014:	e010      	b.n	8008038 <get_fileinfo+0x90>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8008016:	2010      	movs	r0, #16
 8008018:	e01c      	b.n	8008054 <get_fileinfo+0xac>
			fno->fname[j] = c;
 800801a:	18a0      	adds	r0, r4, r2
 800801c:	7583      	strb	r3, [r0, #22]
		j++;
 800801e:	3201      	adds	r2, #1
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8008020:	460b      	mov	r3, r1
	while (i < 11) {		/* Copy name body and extension */
 8008022:	2b0a      	cmp	r3, #10
 8008024:	d81b      	bhi.n	800805e <get_fileinfo+0xb6>
		c = (TCHAR)dp->dir[i++];
 8008026:	6a30      	ldr	r0, [r6, #32]
 8008028:	1c59      	adds	r1, r3, #1
 800802a:	5cc3      	ldrb	r3, [r0, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
 800802c:	2b20      	cmp	r3, #32
 800802e:	d0f7      	beq.n	8008020 <get_fileinfo+0x78>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008030:	2b05      	cmp	r3, #5
 8008032:	d0e5      	beq.n	8008000 <get_fileinfo+0x58>
		if (i == 9) {						/* Insert a . if extension is exist */
 8008034:	2909      	cmp	r1, #9
 8008036:	d0e5      	beq.n	8008004 <get_fileinfo+0x5c>
		fno->altname[j] = c;
 8008038:	18a0      	adds	r0, r4, r2
 800803a:	7243      	strb	r3, [r0, #9]
		if (!lfv) {
 800803c:	2d00      	cmp	r5, #0
 800803e:	d1ee      	bne.n	800801e <get_fileinfo+0x76>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8008040:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 8008044:	b2c0      	uxtb	r0, r0
 8008046:	2819      	cmp	r0, #25
 8008048:	d8e7      	bhi.n	800801a <get_fileinfo+0x72>
 800804a:	6a30      	ldr	r0, [r6, #32]
 800804c:	7b07      	ldrb	r7, [r0, #12]
 800804e:	2908      	cmp	r1, #8
 8008050:	d8e1      	bhi.n	8008016 <get_fileinfo+0x6e>
 8008052:	2008      	movs	r0, #8
 8008054:	4207      	tst	r7, r0
 8008056:	d0e0      	beq.n	800801a <get_fileinfo+0x72>
				c += 0x20;			/* To lower */
 8008058:	3320      	adds	r3, #32
 800805a:	b2db      	uxtb	r3, r3
 800805c:	e7dd      	b.n	800801a <get_fileinfo+0x72>
	if (!lfv) {
 800805e:	b935      	cbnz	r5, 800806e <get_fileinfo+0xc6>
		fno->fname[j] = 0;
 8008060:	18a3      	adds	r3, r4, r2
 8008062:	2100      	movs	r1, #0
 8008064:	7599      	strb	r1, [r3, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8008066:	6a33      	ldr	r3, [r6, #32]
 8008068:	7b1b      	ldrb	r3, [r3, #12]
 800806a:	b903      	cbnz	r3, 800806e <get_fileinfo+0xc6>
 800806c:	460a      	mov	r2, r1
	fno->altname[j] = 0;	/* Terminate the SFN */
 800806e:	4422      	add	r2, r4
 8008070:	2300      	movs	r3, #0
 8008072:	7253      	strb	r3, [r2, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008074:	6a33      	ldr	r3, [r6, #32]
 8008076:	7adb      	ldrb	r3, [r3, #11]
 8008078:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800807a:	6a30      	ldr	r0, [r6, #32]
 800807c:	301c      	adds	r0, #28
 800807e:	f7fe fe9e 	bl	8006dbe <ld_dword>
 8008082:	6020      	str	r0, [r4, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008084:	6a30      	ldr	r0, [r6, #32]
 8008086:	3016      	adds	r0, #22
 8008088:	f7fe fe99 	bl	8006dbe <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800808c:	80e0      	strh	r0, [r4, #6]
 800808e:	0c00      	lsrs	r0, r0, #16
 8008090:	80a0      	strh	r0, [r4, #4]
}
 8008092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008098 <cmp_lfn>:
{
 8008098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800809c:	4681      	mov	r9, r0
 800809e:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80080a0:	f101 001a 	add.w	r0, r1, #26
 80080a4:	f7fe fe86 	bl	8006db4 <ld_word>
 80080a8:	bbc8      	cbnz	r0, 800811e <cmp_lfn+0x86>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80080aa:	783e      	ldrb	r6, [r7, #0]
 80080ac:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 80080b0:	3e01      	subs	r6, #1
 80080b2:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80080b6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80080ba:	f04f 0801 	mov.w	r8, #1
 80080be:	2500      	movs	r5, #0
 80080c0:	e006      	b.n	80080d0 <cmp_lfn+0x38>
				return 0;					/* Not matched */
 80080c2:	2000      	movs	r0, #0
 80080c4:	e02c      	b.n	8008120 <cmp_lfn+0x88>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80080c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080ca:	4298      	cmp	r0, r3
 80080cc:	d12a      	bne.n	8008124 <cmp_lfn+0x8c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80080ce:	3501      	adds	r5, #1
 80080d0:	2d0c      	cmp	r5, #12
 80080d2:	d818      	bhi.n	8008106 <cmp_lfn+0x6e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80080d4:	4b17      	ldr	r3, [pc, #92]	; (8008134 <cmp_lfn+0x9c>)
 80080d6:	5d58      	ldrb	r0, [r3, r5]
 80080d8:	4438      	add	r0, r7
 80080da:	f7fe fe6b 	bl	8006db4 <ld_word>
 80080de:	4604      	mov	r4, r0
		if (wc) {
 80080e0:	f1b8 0f00 	cmp.w	r8, #0
 80080e4:	d0ef      	beq.n	80080c6 <cmp_lfn+0x2e>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80080e6:	2efe      	cmp	r6, #254	; 0xfe
 80080e8:	d8eb      	bhi.n	80080c2 <cmp_lfn+0x2a>
 80080ea:	f000 fd3f 	bl	8008b6c <ff_wtoupper>
 80080ee:	4680      	mov	r8, r0
 80080f0:	f106 0a01 	add.w	sl, r6, #1
 80080f4:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
 80080f8:	f000 fd38 	bl	8008b6c <ff_wtoupper>
 80080fc:	4580      	cmp	r8, r0
 80080fe:	d1e0      	bne.n	80080c2 <cmp_lfn+0x2a>
			wc = uc;
 8008100:	46a0      	mov	r8, r4
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008102:	4656      	mov	r6, sl
 8008104:	e7e3      	b.n	80080ce <cmp_lfn+0x36>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008106:	783b      	ldrb	r3, [r7, #0]
 8008108:	f013 0f40 	tst.w	r3, #64	; 0x40
 800810c:	d00c      	beq.n	8008128 <cmp_lfn+0x90>
 800810e:	f1b8 0f00 	cmp.w	r8, #0
 8008112:	d00b      	beq.n	800812c <cmp_lfn+0x94>
 8008114:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
 8008118:	b953      	cbnz	r3, 8008130 <cmp_lfn+0x98>
	return 1;		/* The part of LFN matched */
 800811a:	2001      	movs	r0, #1
 800811c:	e000      	b.n	8008120 <cmp_lfn+0x88>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800811e:	2000      	movs	r0, #0
}
 8008120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008124:	2000      	movs	r0, #0
 8008126:	e7fb      	b.n	8008120 <cmp_lfn+0x88>
	return 1;		/* The part of LFN matched */
 8008128:	2001      	movs	r0, #1
 800812a:	e7f9      	b.n	8008120 <cmp_lfn+0x88>
 800812c:	2001      	movs	r0, #1
 800812e:	e7f7      	b.n	8008120 <cmp_lfn+0x88>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008130:	2000      	movs	r0, #0
 8008132:	e7f5      	b.n	8008120 <cmp_lfn+0x88>
 8008134:	08008d20 	.word	0x08008d20

08008138 <dir_find>:
{
 8008138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800813c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800813e:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008142:	2100      	movs	r1, #0
 8008144:	f7ff fc0f 	bl	8007966 <dir_sdi>
	if (res != FR_OK) return res;
 8008148:	4606      	mov	r6, r0
 800814a:	2800      	cmp	r0, #0
 800814c:	d164      	bne.n	8008218 <dir_find+0xe0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800814e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008152:	6323      	str	r3, [r4, #48]	; 0x30
 8008154:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8008158:	464f      	mov	r7, r9
 800815a:	e00a      	b.n	8008172 <dir_find+0x3a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800815c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008160:	6323      	str	r3, [r4, #48]	; 0x30
 8008162:	27ff      	movs	r7, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 8008164:	2100      	movs	r1, #0
 8008166:	4620      	mov	r0, r4
 8008168:	f7ff fcfd 	bl	8007b66 <dir_next>
	} while (res == FR_OK);
 800816c:	4606      	mov	r6, r0
 800816e:	2800      	cmp	r0, #0
 8008170:	d152      	bne.n	8008218 <dir_find+0xe0>
		res = move_window(fs, dp->sect);
 8008172:	69e1      	ldr	r1, [r4, #28]
 8008174:	4640      	mov	r0, r8
 8008176:	f7ff f92b 	bl	80073d0 <move_window>
		if (res != FR_OK) break;
 800817a:	4606      	mov	r6, r0
 800817c:	2800      	cmp	r0, #0
 800817e:	d14b      	bne.n	8008218 <dir_find+0xe0>
		c = dp->dir[DIR_Name];
 8008180:	6a25      	ldr	r5, [r4, #32]
 8008182:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008184:	2b00      	cmp	r3, #0
 8008186:	d046      	beq.n	8008216 <dir_find+0xde>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008188:	7ae9      	ldrb	r1, [r5, #11]
 800818a:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 800818e:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008190:	2be5      	cmp	r3, #229	; 0xe5
 8008192:	d0e3      	beq.n	800815c <dir_find+0x24>
 8008194:	f011 0f08 	tst.w	r1, #8
 8008198:	d001      	beq.n	800819e <dir_find+0x66>
 800819a:	2a0f      	cmp	r2, #15
 800819c:	d1de      	bne.n	800815c <dir_find+0x24>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800819e:	2a0f      	cmp	r2, #15
 80081a0:	d016      	beq.n	80081d0 <dir_find+0x98>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80081a2:	b927      	cbnz	r7, 80081ae <dir_find+0x76>
 80081a4:	4628      	mov	r0, r5
 80081a6:	f7ff f82a 	bl	80071fe <sum_sfn>
 80081aa:	4548      	cmp	r0, r9
 80081ac:	d034      	beq.n	8008218 <dir_find+0xe0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80081ae:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80081b2:	f013 0f01 	tst.w	r3, #1
 80081b6:	d106      	bne.n	80081c6 <dir_find+0x8e>
 80081b8:	220b      	movs	r2, #11
 80081ba:	f104 0124 	add.w	r1, r4, #36	; 0x24
 80081be:	4628      	mov	r0, r5
 80081c0:	f7fe fe25 	bl	8006e0e <mem_cmp>
 80081c4:	b340      	cbz	r0, 8008218 <dir_find+0xe0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80081c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081ca:	6323      	str	r3, [r4, #48]	; 0x30
 80081cc:	27ff      	movs	r7, #255	; 0xff
 80081ce:	e7c9      	b.n	8008164 <dir_find+0x2c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80081d0:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 80081d4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80081d8:	d1c4      	bne.n	8008164 <dir_find+0x2c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80081da:	f013 0f40 	tst.w	r3, #64	; 0x40
 80081de:	d006      	beq.n	80081ee <dir_find+0xb6>
						sum = dp->dir[LDIR_Chksum];
 80081e0:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80081e4:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80081e8:	6962      	ldr	r2, [r4, #20]
 80081ea:	6322      	str	r2, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80081ec:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80081ee:	42bb      	cmp	r3, r7
 80081f0:	d001      	beq.n	80081f6 <dir_find+0xbe>
 80081f2:	27ff      	movs	r7, #255	; 0xff
 80081f4:	e7b6      	b.n	8008164 <dir_find+0x2c>
 80081f6:	7b6b      	ldrb	r3, [r5, #13]
 80081f8:	454b      	cmp	r3, r9
 80081fa:	d001      	beq.n	8008200 <dir_find+0xc8>
 80081fc:	27ff      	movs	r7, #255	; 0xff
 80081fe:	e7b1      	b.n	8008164 <dir_find+0x2c>
 8008200:	4629      	mov	r1, r5
 8008202:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8008206:	f7ff ff47 	bl	8008098 <cmp_lfn>
 800820a:	b110      	cbz	r0, 8008212 <dir_find+0xda>
 800820c:	3f01      	subs	r7, #1
 800820e:	b2ff      	uxtb	r7, r7
 8008210:	e7a8      	b.n	8008164 <dir_find+0x2c>
 8008212:	27ff      	movs	r7, #255	; 0xff
 8008214:	e7a6      	b.n	8008164 <dir_find+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008216:	2604      	movs	r6, #4
}
 8008218:	4630      	mov	r0, r6
 800821a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800821e <follow_path>:
{
 800821e:	b530      	push	{r4, r5, lr}
 8008220:	b083      	sub	sp, #12
 8008222:	4604      	mov	r4, r0
 8008224:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8008226:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008228:	e001      	b.n	800822e <follow_path+0x10>
 800822a:	3301      	adds	r3, #1
 800822c:	9301      	str	r3, [sp, #4]
 800822e:	9b01      	ldr	r3, [sp, #4]
 8008230:	781a      	ldrb	r2, [r3, #0]
 8008232:	2a5c      	cmp	r2, #92	; 0x5c
 8008234:	bf18      	it	ne
 8008236:	2a2f      	cmpne	r2, #47	; 0x2f
 8008238:	d0f7      	beq.n	800822a <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 800823a:	2200      	movs	r2, #0
 800823c:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	2b1f      	cmp	r3, #31
 8008242:	d91e      	bls.n	8008282 <follow_path+0x64>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008244:	a901      	add	r1, sp, #4
 8008246:	4620      	mov	r0, r4
 8008248:	f7ff fd94 	bl	8007d74 <create_name>
			if (res != FR_OK) break;
 800824c:	4603      	mov	r3, r0
 800824e:	bb00      	cbnz	r0, 8008292 <follow_path+0x74>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008250:	4620      	mov	r0, r4
 8008252:	f7ff ff71 	bl	8008138 <dir_find>
			ns = dp->fn[NSFLAG];
 8008256:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800825a:	4603      	mov	r3, r0
 800825c:	b9e0      	cbnz	r0, 8008298 <follow_path+0x7a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800825e:	f012 0f04 	tst.w	r2, #4
 8008262:	d116      	bne.n	8008292 <follow_path+0x74>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008264:	79a3      	ldrb	r3, [r4, #6]
 8008266:	f013 0f10 	tst.w	r3, #16
 800826a:	d01c      	beq.n	80082a6 <follow_path+0x88>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800826c:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8008270:	6961      	ldr	r1, [r4, #20]
 8008272:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8008276:	4419      	add	r1, r3
 8008278:	4628      	mov	r0, r5
 800827a:	f7fe fec7 	bl	800700c <ld_clust>
 800827e:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008280:	e7e0      	b.n	8008244 <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
 8008282:	2380      	movs	r3, #128	; 0x80
 8008284:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008288:	4611      	mov	r1, r2
 800828a:	4620      	mov	r0, r4
 800828c:	f7ff fb6b 	bl	8007966 <dir_sdi>
 8008290:	4603      	mov	r3, r0
}
 8008292:	4618      	mov	r0, r3
 8008294:	b003      	add	sp, #12
 8008296:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008298:	2804      	cmp	r0, #4
 800829a:	d1fa      	bne.n	8008292 <follow_path+0x74>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800829c:	f012 0f04 	tst.w	r2, #4
 80082a0:	d1f7      	bne.n	8008292 <follow_path+0x74>
 80082a2:	2305      	movs	r3, #5
 80082a4:	e7f5      	b.n	8008292 <follow_path+0x74>
				res = FR_NO_PATH; break;
 80082a6:	2305      	movs	r3, #5
 80082a8:	e7f3      	b.n	8008292 <follow_path+0x74>
	...

080082ac <dir_register>:
{
 80082ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082b0:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 80082b2:	6806      	ldr	r6, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80082b4:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 80082b8:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 80082bc:	f040 808e 	bne.w	80083dc <dir_register+0x130>
 80082c0:	4607      	mov	r7, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80082c2:	2400      	movs	r4, #0
 80082c4:	e000      	b.n	80082c8 <dir_register+0x1c>
 80082c6:	3401      	adds	r4, #1
 80082c8:	68f3      	ldr	r3, [r6, #12]
 80082ca:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1f9      	bne.n	80082c6 <dir_register+0x1a>
	mem_cpy(sn, dp->fn, 12);
 80082d2:	f107 0824 	add.w	r8, r7, #36	; 0x24
 80082d6:	220c      	movs	r2, #12
 80082d8:	4641      	mov	r1, r8
 80082da:	a801      	add	r0, sp, #4
 80082dc:	f7fe fd88 	bl	8006df0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80082e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80082e4:	f013 0f01 	tst.w	r3, #1
 80082e8:	d01c      	beq.n	8008324 <dir_register+0x78>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80082ea:	2340      	movs	r3, #64	; 0x40
 80082ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80082f0:	2501      	movs	r5, #1
 80082f2:	e000      	b.n	80082f6 <dir_register+0x4a>
 80082f4:	3501      	adds	r5, #1
 80082f6:	2d63      	cmp	r5, #99	; 0x63
 80082f8:	d80b      	bhi.n	8008312 <dir_register+0x66>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80082fa:	462b      	mov	r3, r5
 80082fc:	68f2      	ldr	r2, [r6, #12]
 80082fe:	a901      	add	r1, sp, #4
 8008300:	4640      	mov	r0, r8
 8008302:	f7fe ff27 	bl	8007154 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008306:	4638      	mov	r0, r7
 8008308:	f7ff ff16 	bl	8008138 <dir_find>
			if (res != FR_OK) break;
 800830c:	4681      	mov	r9, r0
 800830e:	2800      	cmp	r0, #0
 8008310:	d0f0      	beq.n	80082f4 <dir_register+0x48>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008312:	2d64      	cmp	r5, #100	; 0x64
 8008314:	d065      	beq.n	80083e2 <dir_register+0x136>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008316:	f1b9 0f04 	cmp.w	r9, #4
 800831a:	d11b      	bne.n	8008354 <dir_register+0xa8>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800831c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008320:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008324:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008328:	f013 0f02 	tst.w	r3, #2
 800832c:	d006      	beq.n	800833c <dir_register+0x90>
 800832e:	340c      	adds	r4, #12
 8008330:	4b2d      	ldr	r3, [pc, #180]	; (80083e8 <dir_register+0x13c>)
 8008332:	fba3 3404 	umull	r3, r4, r3, r4
 8008336:	08a4      	lsrs	r4, r4, #2
 8008338:	3401      	adds	r4, #1
 800833a:	e000      	b.n	800833e <dir_register+0x92>
 800833c:	2401      	movs	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800833e:	4621      	mov	r1, r4
 8008340:	4638      	mov	r0, r7
 8008342:	f7ff fc94 	bl	8007c6e <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008346:	4681      	mov	r9, r0
 8008348:	b908      	cbnz	r0, 800834e <dir_register+0xa2>
 800834a:	3c01      	subs	r4, #1
 800834c:	d106      	bne.n	800835c <dir_register+0xb0>
	if (res == FR_OK) {
 800834e:	f1b9 0f00 	cmp.w	r9, #0
 8008352:	d029      	beq.n	80083a8 <dir_register+0xfc>
}
 8008354:	4648      	mov	r0, r9
 8008356:	b005      	add	sp, #20
 8008358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800835c:	6979      	ldr	r1, [r7, #20]
 800835e:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 8008362:	4638      	mov	r0, r7
 8008364:	f7ff faff 	bl	8007966 <dir_sdi>
		if (res == FR_OK) {
 8008368:	4681      	mov	r9, r0
 800836a:	2800      	cmp	r0, #0
 800836c:	d1ef      	bne.n	800834e <dir_register+0xa2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800836e:	4640      	mov	r0, r8
 8008370:	f7fe ff45 	bl	80071fe <sum_sfn>
 8008374:	4605      	mov	r5, r0
				res = move_window(fs, dp->sect);
 8008376:	69f9      	ldr	r1, [r7, #28]
 8008378:	4630      	mov	r0, r6
 800837a:	f7ff f829 	bl	80073d0 <move_window>
				if (res != FR_OK) break;
 800837e:	4681      	mov	r9, r0
 8008380:	2800      	cmp	r0, #0
 8008382:	d1e4      	bne.n	800834e <dir_register+0xa2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008384:	462b      	mov	r3, r5
 8008386:	b2e2      	uxtb	r2, r4
 8008388:	6a39      	ldr	r1, [r7, #32]
 800838a:	68f0      	ldr	r0, [r6, #12]
 800838c:	f7fe fea6 	bl	80070dc <put_lfn>
				fs->wflag = 1;
 8008390:	2301      	movs	r3, #1
 8008392:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008394:	2100      	movs	r1, #0
 8008396:	4638      	mov	r0, r7
 8008398:	f7ff fbe5 	bl	8007b66 <dir_next>
			} while (res == FR_OK && --nent);
 800839c:	4681      	mov	r9, r0
 800839e:	2800      	cmp	r0, #0
 80083a0:	d1d5      	bne.n	800834e <dir_register+0xa2>
 80083a2:	3c01      	subs	r4, #1
 80083a4:	d1e7      	bne.n	8008376 <dir_register+0xca>
 80083a6:	e7d2      	b.n	800834e <dir_register+0xa2>
		res = move_window(fs, dp->sect);
 80083a8:	69f9      	ldr	r1, [r7, #28]
 80083aa:	4630      	mov	r0, r6
 80083ac:	f7ff f810 	bl	80073d0 <move_window>
		if (res == FR_OK) {
 80083b0:	4681      	mov	r9, r0
 80083b2:	2800      	cmp	r0, #0
 80083b4:	d1ce      	bne.n	8008354 <dir_register+0xa8>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80083b6:	2220      	movs	r2, #32
 80083b8:	2100      	movs	r1, #0
 80083ba:	6a38      	ldr	r0, [r7, #32]
 80083bc:	f7fe fd22 	bl	8006e04 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80083c0:	220b      	movs	r2, #11
 80083c2:	4641      	mov	r1, r8
 80083c4:	6a38      	ldr	r0, [r7, #32]
 80083c6:	f7fe fd13 	bl	8006df0 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80083ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083ce:	6a3a      	ldr	r2, [r7, #32]
 80083d0:	f003 0318 	and.w	r3, r3, #24
 80083d4:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 80083d6:	2301      	movs	r3, #1
 80083d8:	70f3      	strb	r3, [r6, #3]
 80083da:	e7bb      	b.n	8008354 <dir_register+0xa8>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80083dc:	f04f 0906 	mov.w	r9, #6
 80083e0:	e7b8      	b.n	8008354 <dir_register+0xa8>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80083e2:	f04f 0907 	mov.w	r9, #7
 80083e6:	e7b5      	b.n	8008354 <dir_register+0xa8>
 80083e8:	4ec4ec4f 	.word	0x4ec4ec4f

080083ec <sync_fs>:
{
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	4604      	mov	r4, r0
	res = sync_window(fs);
 80083f0:	f7fe ffc4 	bl	800737c <sync_window>
	if (res == FR_OK) {
 80083f4:	4605      	mov	r5, r0
 80083f6:	b948      	cbnz	r0, 800840c <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80083f8:	7823      	ldrb	r3, [r4, #0]
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	d008      	beq.n	8008410 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80083fe:	2200      	movs	r2, #0
 8008400:	4611      	mov	r1, r2
 8008402:	7860      	ldrb	r0, [r4, #1]
 8008404:	f7fe fcca 	bl	8006d9c <disk_ioctl>
 8008408:	b100      	cbz	r0, 800840c <sync_fs+0x20>
 800840a:	2501      	movs	r5, #1
}
 800840c:	4628      	mov	r0, r5
 800840e:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008410:	7923      	ldrb	r3, [r4, #4]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d1f3      	bne.n	80083fe <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 8008416:	f104 0634 	add.w	r6, r4, #52	; 0x34
 800841a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800841e:	2100      	movs	r1, #0
 8008420:	4630      	mov	r0, r6
 8008422:	f7fe fcef 	bl	8006e04 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008426:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800842a:	f204 2032 	addw	r0, r4, #562	; 0x232
 800842e:	f7fe fcd1 	bl	8006dd4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008432:	490f      	ldr	r1, [pc, #60]	; (8008470 <sync_fs+0x84>)
 8008434:	4630      	mov	r0, r6
 8008436:	f7fe fcd1 	bl	8006ddc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800843a:	490e      	ldr	r1, [pc, #56]	; (8008474 <sync_fs+0x88>)
 800843c:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8008440:	f7fe fccc 	bl	8006ddc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008444:	6961      	ldr	r1, [r4, #20]
 8008446:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800844a:	f7fe fcc7 	bl	8006ddc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800844e:	6921      	ldr	r1, [r4, #16]
 8008450:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8008454:	f7fe fcc2 	bl	8006ddc <st_dword>
			fs->winsect = fs->volbase + 1;
 8008458:	6a22      	ldr	r2, [r4, #32]
 800845a:	3201      	adds	r2, #1
 800845c:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800845e:	2301      	movs	r3, #1
 8008460:	4631      	mov	r1, r6
 8008462:	7860      	ldrb	r0, [r4, #1]
 8008464:	f7fe fc8e 	bl	8006d84 <disk_write>
			fs->fsi_flag = 0;
 8008468:	2300      	movs	r3, #0
 800846a:	7123      	strb	r3, [r4, #4]
 800846c:	e7c7      	b.n	80083fe <sync_fs+0x12>
 800846e:	bf00      	nop
 8008470:	41615252 	.word	0x41615252
 8008474:	61417272 	.word	0x61417272

08008478 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008478:	b570      	push	{r4, r5, r6, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	9001      	str	r0, [sp, #4]
 800847e:	9100      	str	r1, [sp, #0]
 8008480:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008482:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008484:	a803      	add	r0, sp, #12
 8008486:	f7fe ff32 	bl	80072ee <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800848a:	1e04      	subs	r4, r0, #0
 800848c:	db20      	blt.n	80084d0 <f_mount+0x58>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800848e:	4b11      	ldr	r3, [pc, #68]	; (80084d4 <f_mount+0x5c>)
 8008490:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]

	if (cfs) {
 8008494:	b125      	cbz	r5, 80084a0 <f_mount+0x28>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008496:	4628      	mov	r0, r5
 8008498:	f7fe fd8e 	bl	8006fb8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800849c:	2300      	movs	r3, #0
 800849e:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
 80084a0:	9b01      	ldr	r3, [sp, #4]
 80084a2:	b10b      	cbz	r3, 80084a8 <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 80084a4:	2200      	movs	r2, #0
 80084a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80084a8:	9b01      	ldr	r3, [sp, #4]
 80084aa:	4a0a      	ldr	r2, [pc, #40]	; (80084d4 <f_mount+0x5c>)
 80084ac:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80084b0:	1e72      	subs	r2, r6, #1
 80084b2:	bf18      	it	ne
 80084b4:	2201      	movne	r2, #1
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	bf08      	it	eq
 80084ba:	f042 0201 	orreq.w	r2, r2, #1
 80084be:	b112      	cbz	r2, 80084c6 <f_mount+0x4e>
 80084c0:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80084c2:	b004      	add	sp, #16
 80084c4:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80084c6:	a901      	add	r1, sp, #4
 80084c8:	4668      	mov	r0, sp
 80084ca:	f7fe ffd9 	bl	8007480 <find_volume>
	LEAVE_FF(fs, res);
 80084ce:	e7f8      	b.n	80084c2 <f_mount+0x4a>
	if (vol < 0) return FR_INVALID_DRIVE;
 80084d0:	200b      	movs	r0, #11
 80084d2:	e7f6      	b.n	80084c2 <f_mount+0x4a>
 80084d4:	2000071c 	.word	0x2000071c

080084d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80084d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084dc:	b093      	sub	sp, #76	; 0x4c
 80084de:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80084e0:	2800      	cmp	r0, #0
 80084e2:	f000 810d 	beq.w	8008700 <f_open+0x228>
 80084e6:	4615      	mov	r5, r2
 80084e8:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80084ea:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 80084ee:	463a      	mov	r2, r7
 80084f0:	a903      	add	r1, sp, #12
 80084f2:	a801      	add	r0, sp, #4
 80084f4:	f7fe ffc4 	bl	8007480 <find_volume>
	if (res == FR_OK) {
 80084f8:	4604      	mov	r4, r0
 80084fa:	b130      	cbz	r0, 800850a <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80084fc:	b10c      	cbz	r4, 8008502 <f_open+0x2a>
 80084fe:	2300      	movs	r3, #0
 8008500:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 8008502:	4620      	mov	r0, r4
 8008504:	b013      	add	sp, #76	; 0x4c
 8008506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 800850a:	9b03      	ldr	r3, [sp, #12]
 800850c:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800850e:	9901      	ldr	r1, [sp, #4]
 8008510:	a804      	add	r0, sp, #16
 8008512:	f7ff fe84 	bl	800821e <follow_path>
		if (res == FR_OK) {
 8008516:	4604      	mov	r4, r0
 8008518:	b960      	cbnz	r0, 8008534 <f_open+0x5c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800851a:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800851e:	2b00      	cmp	r3, #0
 8008520:	db50      	blt.n	80085c4 <f_open+0xec>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008522:	f037 0301 	bics.w	r3, r7, #1
 8008526:	bf14      	ite	ne
 8008528:	2101      	movne	r1, #1
 800852a:	2100      	moveq	r1, #0
 800852c:	a804      	add	r0, sp, #16
 800852e:	f7fe fc83 	bl	8006e38 <chk_lock>
 8008532:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008534:	f015 0f1c 	tst.w	r5, #28
 8008538:	d05a      	beq.n	80085f0 <f_open+0x118>
			if (res != FR_OK) {					/* No file, create new */
 800853a:	2c00      	cmp	r4, #0
 800853c:	d04e      	beq.n	80085dc <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800853e:	2c04      	cmp	r4, #4
 8008540:	d042      	beq.n	80085c8 <f_open+0xf0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008542:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008546:	2c00      	cmp	r4, #0
 8008548:	d161      	bne.n	800860e <f_open+0x136>
 800854a:	f017 0f08 	tst.w	r7, #8
 800854e:	d05e      	beq.n	800860e <f_open+0x136>
				dw = GET_FATTIME();
 8008550:	f7fe fb1a 	bl	8006b88 <get_fattime>
 8008554:	4605      	mov	r5, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008556:	4601      	mov	r1, r0
 8008558:	980c      	ldr	r0, [sp, #48]	; 0x30
 800855a:	300e      	adds	r0, #14
 800855c:	f7fe fc3e 	bl	8006ddc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008560:	4629      	mov	r1, r5
 8008562:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008564:	3016      	adds	r0, #22
 8008566:	f7fe fc39 	bl	8006ddc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800856a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800856c:	2220      	movs	r2, #32
 800856e:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008570:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008574:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8008578:	4649      	mov	r1, r9
 800857a:	4640      	mov	r0, r8
 800857c:	f7fe fd46 	bl	800700c <ld_clust>
 8008580:	4605      	mov	r5, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008582:	2200      	movs	r2, #0
 8008584:	4649      	mov	r1, r9
 8008586:	4640      	mov	r0, r8
 8008588:	f7fe fd53 	bl	8007032 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800858c:	2100      	movs	r1, #0
 800858e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008590:	301c      	adds	r0, #28
 8008592:	f7fe fc23 	bl	8006ddc <st_dword>
					fs->wflag = 1;
 8008596:	9b03      	ldr	r3, [sp, #12]
 8008598:	2201      	movs	r2, #1
 800859a:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800859c:	b3bd      	cbz	r5, 800860e <f_open+0x136>
						dw = fs->winsect;
 800859e:	9b03      	ldr	r3, [sp, #12]
 80085a0:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 80085a4:	2200      	movs	r2, #0
 80085a6:	4629      	mov	r1, r5
 80085a8:	a804      	add	r0, sp, #16
 80085aa:	f7ff fa9d 	bl	8007ae8 <remove_chain>
						if (res == FR_OK) {
 80085ae:	4604      	mov	r4, r0
 80085b0:	bb68      	cbnz	r0, 800860e <f_open+0x136>
							res = move_window(fs, dw);
 80085b2:	4641      	mov	r1, r8
 80085b4:	9803      	ldr	r0, [sp, #12]
 80085b6:	f7fe ff0b 	bl	80073d0 <move_window>
 80085ba:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80085bc:	3d01      	subs	r5, #1
 80085be:	9b03      	ldr	r3, [sp, #12]
 80085c0:	611d      	str	r5, [r3, #16]
 80085c2:	e024      	b.n	800860e <f_open+0x136>
				res = FR_INVALID_NAME;
 80085c4:	2406      	movs	r4, #6
 80085c6:	e7b5      	b.n	8008534 <f_open+0x5c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80085c8:	f7fe fc74 	bl	8006eb4 <enq_lock>
 80085cc:	b908      	cbnz	r0, 80085d2 <f_open+0xfa>
 80085ce:	2412      	movs	r4, #18
 80085d0:	e7b7      	b.n	8008542 <f_open+0x6a>
 80085d2:	a804      	add	r0, sp, #16
 80085d4:	f7ff fe6a 	bl	80082ac <dir_register>
 80085d8:	4604      	mov	r4, r0
 80085da:	e7b2      	b.n	8008542 <f_open+0x6a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80085dc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80085e0:	f013 0f11 	tst.w	r3, #17
 80085e4:	d112      	bne.n	800860c <f_open+0x134>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80085e6:	f015 0f04 	tst.w	r5, #4
 80085ea:	d0ac      	beq.n	8008546 <f_open+0x6e>
 80085ec:	2408      	movs	r4, #8
 80085ee:	e00e      	b.n	800860e <f_open+0x136>
			if (res == FR_OK) {					/* Following succeeded */
 80085f0:	b96c      	cbnz	r4, 800860e <f_open+0x136>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80085f2:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80085f6:	f013 0f10 	tst.w	r3, #16
 80085fa:	d14b      	bne.n	8008694 <f_open+0x1bc>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80085fc:	f015 0f02 	tst.w	r5, #2
 8008600:	d005      	beq.n	800860e <f_open+0x136>
 8008602:	f013 0f01 	tst.w	r3, #1
 8008606:	d002      	beq.n	800860e <f_open+0x136>
						res = FR_DENIED;
 8008608:	2407      	movs	r4, #7
 800860a:	e016      	b.n	800863a <f_open+0x162>
					res = FR_DENIED;
 800860c:	2407      	movs	r4, #7
		if (res == FR_OK) {
 800860e:	b9a4      	cbnz	r4, 800863a <f_open+0x162>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008610:	f017 0f08 	tst.w	r7, #8
 8008614:	d001      	beq.n	800861a <f_open+0x142>
				mode |= FA_MODIFIED;
 8008616:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800861a:	9b03      	ldr	r3, [sp, #12]
 800861c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861e:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008620:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008622:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008624:	f037 0301 	bics.w	r3, r7, #1
 8008628:	bf14      	ite	ne
 800862a:	2101      	movne	r1, #1
 800862c:	2100      	moveq	r1, #0
 800862e:	a804      	add	r0, sp, #16
 8008630:	f7fe fc50 	bl	8006ed4 <inc_lock>
 8008634:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008636:	2800      	cmp	r0, #0
 8008638:	d060      	beq.n	80086fc <f_open+0x224>
		if (res == FR_OK) {
 800863a:	2c00      	cmp	r4, #0
 800863c:	f47f af5e 	bne.w	80084fc <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008640:	9d03      	ldr	r5, [sp, #12]
 8008642:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8008646:	4641      	mov	r1, r8
 8008648:	4628      	mov	r0, r5
 800864a:	f7fe fcdf 	bl	800700c <ld_clust>
 800864e:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008650:	f108 001c 	add.w	r0, r8, #28
 8008654:	f7fe fbb3 	bl	8006dbe <ld_dword>
 8008658:	60f0      	str	r0, [r6, #12]
			fp->obj.fs = fs;	 	/* Validate the file object */
 800865a:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
 800865c:	88eb      	ldrh	r3, [r5, #6]
 800865e:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 8008660:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 8008662:	2100      	movs	r1, #0
 8008664:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008666:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008668:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800866a:	f106 082c 	add.w	r8, r6, #44	; 0x2c
 800866e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008672:	4640      	mov	r0, r8
 8008674:	f7fe fbc6 	bl	8006e04 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008678:	f017 0f20 	tst.w	r7, #32
 800867c:	f43f af3e 	beq.w	80084fc <f_open+0x24>
 8008680:	68f5      	ldr	r5, [r6, #12]
 8008682:	2d00      	cmp	r5, #0
 8008684:	f43f af3a 	beq.w	80084fc <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008688:	61b5      	str	r5, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800868a:	9b03      	ldr	r3, [sp, #12]
 800868c:	895f      	ldrh	r7, [r3, #10]
 800868e:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008690:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008692:	e005      	b.n	80086a0 <f_open+0x1c8>
					res = FR_NO_FILE;
 8008694:	2404      	movs	r4, #4
 8008696:	e7d0      	b.n	800863a <f_open+0x162>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008698:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800869c:	d00f      	beq.n	80086be <f_open+0x1e6>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800869e:	1bed      	subs	r5, r5, r7
 80086a0:	fab4 f384 	clz	r3, r4
 80086a4:	095b      	lsrs	r3, r3, #5
 80086a6:	42bd      	cmp	r5, r7
 80086a8:	bf98      	it	ls
 80086aa:	2300      	movls	r3, #0
 80086ac:	b14b      	cbz	r3, 80086c2 <f_open+0x1ea>
					clst = get_fat(&fp->obj, clst);
 80086ae:	4630      	mov	r0, r6
 80086b0:	f7ff f8f1 	bl	8007896 <get_fat>
 80086b4:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80086b6:	2801      	cmp	r0, #1
 80086b8:	d8ee      	bhi.n	8008698 <f_open+0x1c0>
 80086ba:	2402      	movs	r4, #2
 80086bc:	e7ec      	b.n	8008698 <f_open+0x1c0>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80086be:	2401      	movs	r4, #1
 80086c0:	e7ed      	b.n	800869e <f_open+0x1c6>
				fp->clust = clst;
 80086c2:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80086c4:	2c00      	cmp	r4, #0
 80086c6:	f47f af19 	bne.w	80084fc <f_open+0x24>
 80086ca:	f3c5 0308 	ubfx	r3, r5, #0, #9
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f43f af14 	beq.w	80084fc <f_open+0x24>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80086d4:	9f03      	ldr	r7, [sp, #12]
 80086d6:	4638      	mov	r0, r7
 80086d8:	f7fe fc8c 	bl	8006ff4 <clust2sect>
 80086dc:	b908      	cbnz	r0, 80086e2 <f_open+0x20a>
						res = FR_INT_ERR;
 80086de:	2402      	movs	r4, #2
 80086e0:	e70d      	b.n	80084fe <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80086e2:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 80086e6:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	4641      	mov	r1, r8
 80086ec:	7878      	ldrb	r0, [r7, #1]
 80086ee:	f7fe fb3d 	bl	8006d6c <disk_read>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	f43f af02 	beq.w	80084fc <f_open+0x24>
 80086f8:	2401      	movs	r4, #1
 80086fa:	e700      	b.n	80084fe <f_open+0x26>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80086fc:	2402      	movs	r4, #2
 80086fe:	e6fd      	b.n	80084fc <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8008700:	2409      	movs	r4, #9
 8008702:	e6fe      	b.n	8008502 <f_open+0x2a>

08008704 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008708:	b085      	sub	sp, #20
 800870a:	4604      	mov	r4, r0
 800870c:	460e      	mov	r6, r1
 800870e:	4617      	mov	r7, r2
 8008710:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8008712:	2300      	movs	r3, #0
 8008714:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008718:	a903      	add	r1, sp, #12
 800871a:	f7fe fe0c 	bl	8007336 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800871e:	9001      	str	r0, [sp, #4]
 8008720:	2800      	cmp	r0, #0
 8008722:	f040 80a8 	bne.w	8008876 <f_read+0x172>
 8008726:	7d63      	ldrb	r3, [r4, #21]
 8008728:	9301      	str	r3, [sp, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	f040 80a3 	bne.w	8008876 <f_read+0x172>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008730:	7d23      	ldrb	r3, [r4, #20]
 8008732:	f013 0f01 	tst.w	r3, #1
 8008736:	f000 80bd 	beq.w	80088b4 <f_read+0x1b0>
	remain = fp->obj.objsize - fp->fptr;
 800873a:	68e5      	ldr	r5, [r4, #12]
 800873c:	69a3      	ldr	r3, [r4, #24]
 800873e:	1aed      	subs	r5, r5, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008740:	42bd      	cmp	r5, r7
 8008742:	d35c      	bcc.n	80087fe <f_read+0xfa>
 8008744:	463d      	mov	r5, r7
 8008746:	e05a      	b.n	80087fe <f_read+0xfa>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008748:	69e1      	ldr	r1, [r4, #28]
 800874a:	4620      	mov	r0, r4
 800874c:	f7ff f8a3 	bl	8007896 <get_fat>
 8008750:	e065      	b.n	800881e <f_read+0x11a>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008752:	f04f 0a02 	mov.w	sl, #2
 8008756:	f884 a015 	strb.w	sl, [r4, #21]
 800875a:	f8cd a004 	str.w	sl, [sp, #4]
 800875e:	e08a      	b.n	8008876 <f_read+0x172>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008760:	f04f 0a01 	mov.w	sl, #1
 8008764:	f884 a015 	strb.w	sl, [r4, #21]
 8008768:	f8cd a004 	str.w	sl, [sp, #4]
 800876c:	e083      	b.n	8008876 <f_read+0x172>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 800876e:	f04f 0a02 	mov.w	sl, #2
 8008772:	f884 a015 	strb.w	sl, [r4, #21]
 8008776:	f8cd a004 	str.w	sl, [sp, #4]
 800877a:	e07c      	b.n	8008876 <f_read+0x172>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800877c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8008780:	2b00      	cmp	r3, #0
 8008782:	db02      	blt.n	800878a <f_read+0x86>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008784:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 8008788:	e02f      	b.n	80087ea <f_read+0xe6>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800878a:	6a20      	ldr	r0, [r4, #32]
 800878c:	eba0 0009 	sub.w	r0, r0, r9
 8008790:	4550      	cmp	r0, sl
 8008792:	d2f7      	bcs.n	8008784 <f_read+0x80>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008798:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 800879c:	eb06 2040 	add.w	r0, r6, r0, lsl #9
 80087a0:	f7fe fb26 	bl	8006df0 <mem_cpy>
 80087a4:	e7ee      	b.n	8008784 <f_read+0x80>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80087a6:	6a22      	ldr	r2, [r4, #32]
 80087a8:	454a      	cmp	r2, r9
 80087aa:	d00d      	beq.n	80087c8 <f_read+0xc4>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80087ac:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	db64      	blt.n	800887e <f_read+0x17a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80087b4:	2301      	movs	r3, #1
 80087b6:	464a      	mov	r2, r9
 80087b8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80087bc:	9803      	ldr	r0, [sp, #12]
 80087be:	7840      	ldrb	r0, [r0, #1]
 80087c0:	f7fe fad4 	bl	8006d6c <disk_read>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	d16e      	bne.n	80088a6 <f_read+0x1a2>
			}
#endif
			fp->sect = sect;
 80087c8:	f8c4 9020 	str.w	r9, [r4, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80087cc:	69a3      	ldr	r3, [r4, #24]
 80087ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d2:	f5c3 7700 	rsb	r7, r3, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80087d6:	42bd      	cmp	r5, r7
 80087d8:	d200      	bcs.n	80087dc <f_read+0xd8>
 80087da:	462f      	mov	r7, r5
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80087dc:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80087e0:	463a      	mov	r2, r7
 80087e2:	4419      	add	r1, r3
 80087e4:	4630      	mov	r0, r6
 80087e6:	f7fe fb03 	bl	8006df0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80087ea:	443e      	add	r6, r7
 80087ec:	69a3      	ldr	r3, [r4, #24]
 80087ee:	443b      	add	r3, r7
 80087f0:	61a3      	str	r3, [r4, #24]
 80087f2:	f8d8 3000 	ldr.w	r3, [r8]
 80087f6:	443b      	add	r3, r7
 80087f8:	f8c8 3000 	str.w	r3, [r8]
 80087fc:	1bed      	subs	r5, r5, r7
	for ( ;  btr;								/* Repeat until all data read */
 80087fe:	2d00      	cmp	r5, #0
 8008800:	d039      	beq.n	8008876 <f_read+0x172>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008802:	69a3      	ldr	r3, [r4, #24]
 8008804:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008808:	2a00      	cmp	r2, #0
 800880a:	d1df      	bne.n	80087cc <f_read+0xc8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800880c:	9a03      	ldr	r2, [sp, #12]
 800880e:	8957      	ldrh	r7, [r2, #10]
 8008810:	3f01      	subs	r7, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8008812:	ea17 2753 	ands.w	r7, r7, r3, lsr #9
 8008816:	d108      	bne.n	800882a <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008818:	2b00      	cmp	r3, #0
 800881a:	d195      	bne.n	8008748 <f_read+0x44>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800881c:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800881e:	2801      	cmp	r0, #1
 8008820:	d997      	bls.n	8008752 <f_read+0x4e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008822:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008826:	d09b      	beq.n	8008760 <f_read+0x5c>
				fp->clust = clst;				/* Update current cluster */
 8008828:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800882a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800882e:	69e1      	ldr	r1, [r4, #28]
 8008830:	4658      	mov	r0, fp
 8008832:	f7fe fbdf 	bl	8006ff4 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008836:	4681      	mov	r9, r0
 8008838:	2800      	cmp	r0, #0
 800883a:	d098      	beq.n	800876e <f_read+0x6a>
			sect += csect;
 800883c:	44b9      	add	r9, r7
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800883e:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008842:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8008846:	d3ae      	bcc.n	80087a6 <f_read+0xa2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008848:	eb07 030a 	add.w	r3, r7, sl
 800884c:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8008850:	4293      	cmp	r3, r2
 8008852:	d901      	bls.n	8008858 <f_read+0x154>
					cc = fs->csize - csect;
 8008854:	eba2 0a07 	sub.w	sl, r2, r7
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008858:	4653      	mov	r3, sl
 800885a:	464a      	mov	r2, r9
 800885c:	4631      	mov	r1, r6
 800885e:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8008862:	f7fe fa83 	bl	8006d6c <disk_read>
 8008866:	2800      	cmp	r0, #0
 8008868:	d088      	beq.n	800877c <f_read+0x78>
 800886a:	f04f 0a01 	mov.w	sl, #1
 800886e:	f884 a015 	strb.w	sl, [r4, #21]
 8008872:	f8cd a004 	str.w	sl, [sp, #4]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8008876:	9801      	ldr	r0, [sp, #4]
 8008878:	b005      	add	sp, #20
 800887a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800887e:	2301      	movs	r3, #1
 8008880:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8008884:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8008888:	f7fe fa7c 	bl	8006d84 <disk_write>
 800888c:	b920      	cbnz	r0, 8008898 <f_read+0x194>
					fp->flag &= (BYTE)~FA_DIRTY;
 800888e:	7d23      	ldrb	r3, [r4, #20]
 8008890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008894:	7523      	strb	r3, [r4, #20]
 8008896:	e78d      	b.n	80087b4 <f_read+0xb0>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008898:	f04f 0a01 	mov.w	sl, #1
 800889c:	f884 a015 	strb.w	sl, [r4, #21]
 80088a0:	f8cd a004 	str.w	sl, [sp, #4]
 80088a4:	e7e7      	b.n	8008876 <f_read+0x172>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80088a6:	f04f 0a01 	mov.w	sl, #1
 80088aa:	f884 a015 	strb.w	sl, [r4, #21]
 80088ae:	f8cd a004 	str.w	sl, [sp, #4]
 80088b2:	e7e0      	b.n	8008876 <f_read+0x172>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80088b4:	2307      	movs	r3, #7
 80088b6:	9301      	str	r3, [sp, #4]
 80088b8:	e7dd      	b.n	8008876 <f_read+0x172>

080088ba <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80088ba:	b570      	push	{r4, r5, r6, lr}
 80088bc:	b082      	sub	sp, #8
 80088be:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80088c0:	a901      	add	r1, sp, #4
 80088c2:	f7fe fd38 	bl	8007336 <validate>
	if (res == FR_OK) {
 80088c6:	b970      	cbnz	r0, 80088e6 <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80088c8:	7d23      	ldrb	r3, [r4, #20]
 80088ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 80088ce:	d00a      	beq.n	80088e6 <f_sync+0x2c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80088d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80088d4:	d109      	bne.n	80088ea <f_sync+0x30>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80088d6:	f7fe f957 	bl	8006b88 <get_fattime>
 80088da:	4605      	mov	r5, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80088dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80088de:	9801      	ldr	r0, [sp, #4]
 80088e0:	f7fe fd76 	bl	80073d0 <move_window>
				if (res == FR_OK) {
 80088e4:	b178      	cbz	r0, 8008906 <f_sync+0x4c>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 80088e6:	b002      	add	sp, #8
 80088e8:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80088ea:	2301      	movs	r3, #1
 80088ec:	6a22      	ldr	r2, [r4, #32]
 80088ee:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80088f2:	9801      	ldr	r0, [sp, #4]
 80088f4:	7840      	ldrb	r0, [r0, #1]
 80088f6:	f7fe fa45 	bl	8006d84 <disk_write>
 80088fa:	bb40      	cbnz	r0, 800894e <f_sync+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 80088fc:	7d23      	ldrb	r3, [r4, #20]
 80088fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008902:	7523      	strb	r3, [r4, #20]
 8008904:	e7e7      	b.n	80088d6 <f_sync+0x1c>
					dir = fp->dir_ptr;
 8008906:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008908:	7af3      	ldrb	r3, [r6, #11]
 800890a:	f043 0320 	orr.w	r3, r3, #32
 800890e:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008910:	68a2      	ldr	r2, [r4, #8]
 8008912:	4631      	mov	r1, r6
 8008914:	6820      	ldr	r0, [r4, #0]
 8008916:	f7fe fb8c 	bl	8007032 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800891a:	68e1      	ldr	r1, [r4, #12]
 800891c:	f106 001c 	add.w	r0, r6, #28
 8008920:	f7fe fa5c 	bl	8006ddc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008924:	4629      	mov	r1, r5
 8008926:	f106 0016 	add.w	r0, r6, #22
 800892a:	f7fe fa57 	bl	8006ddc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800892e:	2100      	movs	r1, #0
 8008930:	f106 0012 	add.w	r0, r6, #18
 8008934:	f7fe fa4e 	bl	8006dd4 <st_word>
					fs->wflag = 1;
 8008938:	9b01      	ldr	r3, [sp, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800893e:	9801      	ldr	r0, [sp, #4]
 8008940:	f7ff fd54 	bl	80083ec <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008944:	7d23      	ldrb	r3, [r4, #20]
 8008946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800894a:	7523      	strb	r3, [r4, #20]
 800894c:	e7cb      	b.n	80088e6 <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800894e:	2001      	movs	r0, #1
 8008950:	e7c9      	b.n	80088e6 <f_sync+0x2c>

08008952 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008952:	b510      	push	{r4, lr}
 8008954:	b082      	sub	sp, #8
 8008956:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008958:	f7ff ffaf 	bl	80088ba <f_sync>
	if (res == FR_OK)
 800895c:	b108      	cbz	r0, 8008962 <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800895e:	b002      	add	sp, #8
 8008960:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008962:	a901      	add	r1, sp, #4
 8008964:	4620      	mov	r0, r4
 8008966:	f7fe fce6 	bl	8007336 <validate>
		if (res == FR_OK) {
 800896a:	2800      	cmp	r0, #0
 800896c:	d1f7      	bne.n	800895e <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800896e:	6920      	ldr	r0, [r4, #16]
 8008970:	f7fe fb02 	bl	8006f78 <dec_lock>
			if (res == FR_OK)
 8008974:	2800      	cmp	r0, #0
 8008976:	d1f2      	bne.n	800895e <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 8008978:	6020      	str	r0, [r4, #0]
 800897a:	e7f0      	b.n	800895e <f_close+0xc>

0800897c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800897c:	b530      	push	{r4, r5, lr}
 800897e:	b085      	sub	sp, #20
 8008980:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8008982:	2800      	cmp	r0, #0
 8008984:	d03d      	beq.n	8008a02 <f_opendir+0x86>
 8008986:	4605      	mov	r5, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 8008988:	2200      	movs	r2, #0
 800898a:	a903      	add	r1, sp, #12
 800898c:	a801      	add	r0, sp, #4
 800898e:	f7fe fd77 	bl	8007480 <find_volume>
	if (res == FR_OK) {
 8008992:	4604      	mov	r4, r0
 8008994:	b128      	cbz	r0, 80089a2 <f_opendir+0x26>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008996:	b10c      	cbz	r4, 800899c <f_opendir+0x20>
 8008998:	2300      	movs	r3, #0
 800899a:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 800899c:	4620      	mov	r0, r4
 800899e:	b005      	add	sp, #20
 80089a0:	bd30      	pop	{r4, r5, pc}
		obj->fs = fs;
 80089a2:	9b03      	ldr	r3, [sp, #12]
 80089a4:	602b      	str	r3, [r5, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80089a6:	9901      	ldr	r1, [sp, #4]
 80089a8:	4628      	mov	r0, r5
 80089aa:	f7ff fc38 	bl	800821e <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 80089ae:	4604      	mov	r4, r0
 80089b0:	bb18      	cbnz	r0, 80089fa <f_opendir+0x7e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80089b2:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	db08      	blt.n	80089cc <f_opendir+0x50>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80089ba:	79ab      	ldrb	r3, [r5, #6]
 80089bc:	f013 0f10 	tst.w	r3, #16
 80089c0:	d01a      	beq.n	80089f8 <f_opendir+0x7c>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80089c2:	6a29      	ldr	r1, [r5, #32]
 80089c4:	9803      	ldr	r0, [sp, #12]
 80089c6:	f7fe fb21 	bl	800700c <ld_clust>
 80089ca:	60a8      	str	r0, [r5, #8]
				obj->id = fs->id;
 80089cc:	9b03      	ldr	r3, [sp, #12]
 80089ce:	88db      	ldrh	r3, [r3, #6]
 80089d0:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80089d2:	2100      	movs	r1, #0
 80089d4:	4628      	mov	r0, r5
 80089d6:	f7fe ffc6 	bl	8007966 <dir_sdi>
				if (res == FR_OK) {
 80089da:	4604      	mov	r4, r0
 80089dc:	b968      	cbnz	r0, 80089fa <f_opendir+0x7e>
					if (obj->sclust) {
 80089de:	68ab      	ldr	r3, [r5, #8]
 80089e0:	b913      	cbnz	r3, 80089e8 <f_opendir+0x6c>
						obj->lockid = 0;	/* Root directory need not to be locked */
 80089e2:	2300      	movs	r3, #0
 80089e4:	612b      	str	r3, [r5, #16]
 80089e6:	e008      	b.n	80089fa <f_opendir+0x7e>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80089e8:	2100      	movs	r1, #0
 80089ea:	4628      	mov	r0, r5
 80089ec:	f7fe fa72 	bl	8006ed4 <inc_lock>
 80089f0:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80089f2:	b910      	cbnz	r0, 80089fa <f_opendir+0x7e>
 80089f4:	2412      	movs	r4, #18
 80089f6:	e7ce      	b.n	8008996 <f_opendir+0x1a>
					res = FR_NO_PATH;
 80089f8:	2405      	movs	r4, #5
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80089fa:	2c04      	cmp	r4, #4
 80089fc:	d1cb      	bne.n	8008996 <f_opendir+0x1a>
 80089fe:	2405      	movs	r4, #5
 8008a00:	e7ca      	b.n	8008998 <f_opendir+0x1c>
	if (!dp) return FR_INVALID_OBJECT;
 8008a02:	2409      	movs	r4, #9
 8008a04:	e7ca      	b.n	800899c <f_opendir+0x20>

08008a06 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8008a06:	b510      	push	{r4, lr}
 8008a08:	b082      	sub	sp, #8
 8008a0a:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8008a0c:	a901      	add	r1, sp, #4
 8008a0e:	f7fe fc92 	bl	8007336 <validate>
	if (res == FR_OK) {
 8008a12:	b920      	cbnz	r0, 8008a1e <f_closedir+0x18>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8008a14:	6923      	ldr	r3, [r4, #16]
 8008a16:	b923      	cbnz	r3, 8008a22 <f_closedir+0x1c>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
 8008a18:	b908      	cbnz	r0, 8008a1e <f_closedir+0x18>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	6023      	str	r3, [r4, #0]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 8008a1e:	b002      	add	sp, #8
 8008a20:	bd10      	pop	{r4, pc}
			res = dec_lock(dp->obj.lockid);
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fe faa8 	bl	8006f78 <dec_lock>
 8008a28:	e7f6      	b.n	8008a18 <f_closedir+0x12>

08008a2a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008a2a:	b570      	push	{r4, r5, r6, lr}
 8008a2c:	b082      	sub	sp, #8
 8008a2e:	4604      	mov	r4, r0
 8008a30:	460d      	mov	r5, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8008a32:	a901      	add	r1, sp, #4
 8008a34:	f7fe fc7f 	bl	8007336 <validate>
	if (res == FR_OK) {
 8008a38:	4606      	mov	r6, r0
 8008a3a:	b9c0      	cbnz	r0, 8008a6e <f_readdir+0x44>
		if (!fno) {
 8008a3c:	b195      	cbz	r5, 8008a64 <f_readdir+0x3a>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8008a3e:	2100      	movs	r1, #0
 8008a40:	4620      	mov	r0, r4
 8008a42:	f7ff f93b 	bl	8007cbc <dir_read>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8008a46:	2804      	cmp	r0, #4
 8008a48:	d000      	beq.n	8008a4c <f_readdir+0x22>
			if (res == FR_OK) {				/* A valid entry is found */
 8008a4a:	b998      	cbnz	r0, 8008a74 <f_readdir+0x4a>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008a4c:	4629      	mov	r1, r5
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f7ff faaa 	bl	8007fa8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008a54:	2100      	movs	r1, #0
 8008a56:	4620      	mov	r0, r4
 8008a58:	f7ff f885 	bl	8007b66 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8008a5c:	2804      	cmp	r0, #4
 8008a5e:	d006      	beq.n	8008a6e <f_readdir+0x44>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008a60:	4606      	mov	r6, r0
 8008a62:	e004      	b.n	8008a6e <f_readdir+0x44>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008a64:	2100      	movs	r1, #0
 8008a66:	4620      	mov	r0, r4
 8008a68:	f7fe ff7d 	bl	8007966 <dir_sdi>
 8008a6c:	4606      	mov	r6, r0
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 8008a6e:	4630      	mov	r0, r6
 8008a70:	b002      	add	sp, #8
 8008a72:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_read(dp, 0);			/* Read an item */
 8008a74:	4606      	mov	r6, r0
 8008a76:	e7fa      	b.n	8008a6e <f_readdir+0x44>

08008a78 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8008a78:	b570      	push	{r4, r5, r6, lr}
 8008a7a:	4605      	mov	r5, r0
 8008a7c:	460c      	mov	r4, r1
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8008a7e:	4621      	mov	r1, r4
 8008a80:	4628      	mov	r0, r5
 8008a82:	f7ff ffd2 	bl	8008a2a <f_readdir>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8008a86:	4606      	mov	r6, r0
 8008a88:	fab4 f384 	clz	r3, r4
 8008a8c:	095b      	lsrs	r3, r3, #5
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	bf18      	it	ne
 8008a92:	f043 0301 	orrne.w	r3, r3, #1
 8008a96:	b953      	cbnz	r3, 8008aae <f_findnext+0x36>
 8008a98:	7da3      	ldrb	r3, [r4, #22]
 8008a9a:	b143      	cbz	r3, 8008aae <f_findnext+0x36>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	f104 0116 	add.w	r1, r4, #22
 8008aa4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8008aa6:	f7fe fbcf 	bl	8007248 <pattern_matching>
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	d0e7      	beq.n	8008a7e <f_findnext+0x6>
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 8008aae:	4630      	mov	r0, r6
 8008ab0:	bd70      	pop	{r4, r5, r6, pc}

08008ab2 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8008ab2:	b538      	push	{r3, r4, r5, lr}
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	460d      	mov	r5, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8008ab8:	6343      	str	r3, [r0, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 8008aba:	4611      	mov	r1, r2
 8008abc:	f7ff ff5e 	bl	800897c <f_opendir>
	if (res == FR_OK) {
 8008ac0:	b100      	cbz	r0, 8008ac4 <f_findfirst+0x12>
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 8008ac2:	bd38      	pop	{r3, r4, r5, pc}
		res = f_findnext(dp, fno);	/* Find the first item */
 8008ac4:	4629      	mov	r1, r5
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f7ff ffd6 	bl	8008a78 <f_findnext>
 8008acc:	e7f9      	b.n	8008ac2 <f_findfirst+0x10>
	...

08008ad0 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8008ad0:	4b13      	ldr	r3, [pc, #76]	; (8008b20 <FATFS_LinkDriverEx+0x50>)
 8008ad2:	7a5b      	ldrb	r3, [r3, #9]
 8008ad4:	bb13      	cbnz	r3, 8008b1c <FATFS_LinkDriverEx+0x4c>
{
 8008ad6:	b510      	push	{r4, lr}
 8008ad8:	4604      	mov	r4, r0
 8008ada:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 8008ade:	4b10      	ldr	r3, [pc, #64]	; (8008b20 <FATFS_LinkDriverEx+0x50>)
 8008ae0:	f893 c009 	ldrb.w	ip, [r3, #9]
 8008ae4:	fa5f fc8c 	uxtb.w	ip, ip
 8008ae8:	f04f 0e00 	mov.w	lr, #0
 8008aec:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8008af0:	f893 c009 	ldrb.w	ip, [r3, #9]
 8008af4:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8008af8:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 8008afc:	7a5c      	ldrb	r4, [r3, #9]
 8008afe:	441c      	add	r4, r3
 8008b00:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8008b02:	7a5a      	ldrb	r2, [r3, #9]
 8008b04:	1c54      	adds	r4, r2, #1
 8008b06:	b2e4      	uxtb	r4, r4
 8008b08:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8008b0a:	3230      	adds	r2, #48	; 0x30
 8008b0c:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8008b0e:	233a      	movs	r3, #58	; 0x3a
 8008b10:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8008b12:	232f      	movs	r3, #47	; 0x2f
 8008b14:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8008b16:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8008b1a:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 8008b1c:	2001      	movs	r0, #1
}
 8008b1e:	4770      	bx	lr
 8008b20:	20000944 	.word	0x20000944

08008b24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008b24:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8008b26:	2200      	movs	r2, #0
 8008b28:	f7ff ffd2 	bl	8008ad0 <FATFS_LinkDriverEx>
}
 8008b2c:	bd08      	pop	{r3, pc}
	...

08008b30 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008b30:	287f      	cmp	r0, #127	; 0x7f
 8008b32:	d917      	bls.n	8008b64 <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008b34:	b131      	cbz	r1, 8008b44 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008b36:	28ff      	cmp	r0, #255	; 0xff
 8008b38:	d813      	bhi.n	8008b62 <ff_convert+0x32>
 8008b3a:	3880      	subs	r0, #128	; 0x80
 8008b3c:	4b0a      	ldr	r3, [pc, #40]	; (8008b68 <ff_convert+0x38>)
 8008b3e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8008b42:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008b44:	2300      	movs	r3, #0
 8008b46:	2b7f      	cmp	r3, #127	; 0x7f
 8008b48:	d807      	bhi.n	8008b5a <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 8008b4a:	4a07      	ldr	r2, [pc, #28]	; (8008b68 <ff_convert+0x38>)
 8008b4c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008b50:	4282      	cmp	r2, r0
 8008b52:	d002      	beq.n	8008b5a <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 8008b54:	3301      	adds	r3, #1
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	e7f5      	b.n	8008b46 <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 8008b5a:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8008b5e:	b2c0      	uxtb	r0, r0
 8008b60:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008b62:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	08008d30 	.word	0x08008d30

08008b6c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008b6c:	b510      	push	{r4, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008b6e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8008b72:	d201      	bcs.n	8008b78 <ff_wtoupper+0xc>
 8008b74:	4b22      	ldr	r3, [pc, #136]	; (8008c00 <ff_wtoupper+0x94>)
 8008b76:	e002      	b.n	8008b7e <ff_wtoupper+0x12>
 8008b78:	4b22      	ldr	r3, [pc, #136]	; (8008c04 <ff_wtoupper+0x98>)
 8008b7a:	e000      	b.n	8008b7e <ff_wtoupper+0x12>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008b7c:	4673      	mov	r3, lr
		bc = *p++;								/* Get block base */
 8008b7e:	8819      	ldrh	r1, [r3, #0]
		if (!bc || chr < bc) break;
 8008b80:	4288      	cmp	r0, r1
 8008b82:	bf2c      	ite	cs
 8008b84:	2200      	movcs	r2, #0
 8008b86:	2201      	movcc	r2, #1
 8008b88:	2900      	cmp	r1, #0
 8008b8a:	bf08      	it	eq
 8008b8c:	f042 0201 	orreq.w	r2, r2, #1
 8008b90:	b9ca      	cbnz	r2, 8008bc6 <ff_wtoupper+0x5a>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008b92:	f103 0e04 	add.w	lr, r3, #4
 8008b96:	885b      	ldrh	r3, [r3, #2]
 8008b98:	0a1a      	lsrs	r2, r3, #8
 8008b9a:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 8008b9c:	eb03 0c01 	add.w	ip, r3, r1
 8008ba0:	4560      	cmp	r0, ip
 8008ba2:	db04      	blt.n	8008bae <ff_wtoupper+0x42>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8008ba4:	2a00      	cmp	r2, #0
 8008ba6:	d1e9      	bne.n	8008b7c <ff_wtoupper+0x10>
 8008ba8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008bac:	e7e7      	b.n	8008b7e <ff_wtoupper+0x12>
			switch (cmd) {
 8008bae:	2a08      	cmp	r2, #8
 8008bb0:	d809      	bhi.n	8008bc6 <ff_wtoupper+0x5a>
 8008bb2:	e8df f002 	tbb	[pc, r2]
 8008bb6:	0905      	.short	0x0905
 8008bb8:	1815120f 	.word	0x1815120f
 8008bbc:	1e1b      	.short	0x1e1b
 8008bbe:	21          	.byte	0x21
 8008bbf:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008bc0:	1a41      	subs	r1, r0, r1
 8008bc2:	f83e 0011 	ldrh.w	r0, [lr, r1, lsl #1]
	}

	return chr;
}
 8008bc6:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008bc8:	1a43      	subs	r3, r0, r1
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	1ac0      	subs	r0, r0, r3
 8008bd0:	b280      	uxth	r0, r0
 8008bd2:	e7f8      	b.n	8008bc6 <ff_wtoupper+0x5a>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008bd4:	3810      	subs	r0, #16
 8008bd6:	b280      	uxth	r0, r0
 8008bd8:	e7f5      	b.n	8008bc6 <ff_wtoupper+0x5a>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008bda:	3820      	subs	r0, #32
 8008bdc:	b280      	uxth	r0, r0
 8008bde:	e7f2      	b.n	8008bc6 <ff_wtoupper+0x5a>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008be0:	3830      	subs	r0, #48	; 0x30
 8008be2:	b280      	uxth	r0, r0
 8008be4:	e7ef      	b.n	8008bc6 <ff_wtoupper+0x5a>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008be6:	381a      	subs	r0, #26
 8008be8:	b280      	uxth	r0, r0
 8008bea:	e7ec      	b.n	8008bc6 <ff_wtoupper+0x5a>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008bec:	3008      	adds	r0, #8
 8008bee:	b280      	uxth	r0, r0
 8008bf0:	e7e9      	b.n	8008bc6 <ff_wtoupper+0x5a>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008bf2:	3850      	subs	r0, #80	; 0x50
 8008bf4:	b280      	uxth	r0, r0
 8008bf6:	e7e6      	b.n	8008bc6 <ff_wtoupper+0x5a>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008bf8:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8008bfc:	b280      	uxth	r0, r0
 8008bfe:	e7e2      	b.n	8008bc6 <ff_wtoupper+0x5a>
 8008c00:	08008e30 	.word	0x08008e30
 8008c04:	08009024 	.word	0x08009024

08008c08 <__libc_init_array>:
 8008c08:	b570      	push	{r4, r5, r6, lr}
 8008c0a:	4d0d      	ldr	r5, [pc, #52]	; (8008c40 <__libc_init_array+0x38>)
 8008c0c:	4c0d      	ldr	r4, [pc, #52]	; (8008c44 <__libc_init_array+0x3c>)
 8008c0e:	1b64      	subs	r4, r4, r5
 8008c10:	10a4      	asrs	r4, r4, #2
 8008c12:	2600      	movs	r6, #0
 8008c14:	42a6      	cmp	r6, r4
 8008c16:	d109      	bne.n	8008c2c <__libc_init_array+0x24>
 8008c18:	4d0b      	ldr	r5, [pc, #44]	; (8008c48 <__libc_init_array+0x40>)
 8008c1a:	4c0c      	ldr	r4, [pc, #48]	; (8008c4c <__libc_init_array+0x44>)
 8008c1c:	f000 fa60 	bl	80090e0 <_init>
 8008c20:	1b64      	subs	r4, r4, r5
 8008c22:	10a4      	asrs	r4, r4, #2
 8008c24:	2600      	movs	r6, #0
 8008c26:	42a6      	cmp	r6, r4
 8008c28:	d105      	bne.n	8008c36 <__libc_init_array+0x2e>
 8008c2a:	bd70      	pop	{r4, r5, r6, pc}
 8008c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c30:	4798      	blx	r3
 8008c32:	3601      	adds	r6, #1
 8008c34:	e7ee      	b.n	8008c14 <__libc_init_array+0xc>
 8008c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c3a:	4798      	blx	r3
 8008c3c:	3601      	adds	r6, #1
 8008c3e:	e7f2      	b.n	8008c26 <__libc_init_array+0x1e>
 8008c40:	080090f8 	.word	0x080090f8
 8008c44:	080090f8 	.word	0x080090f8
 8008c48:	080090f8 	.word	0x080090f8
 8008c4c:	080090fc 	.word	0x080090fc

08008c50 <memset>:
 8008c50:	4402      	add	r2, r0
 8008c52:	4603      	mov	r3, r0
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d100      	bne.n	8008c5a <memset+0xa>
 8008c58:	4770      	bx	lr
 8008c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c5e:	e7f9      	b.n	8008c54 <memset+0x4>
 8008c60:	69622e2a 	.word	0x69622e2a
 8008c64:	0000006e 	.word	0x0000006e

08008c68 <D1CorePrescTable>:
 8008c68:	00000000 04030201 04030201 09080706     ................

08008c78 <SD_Driver>:
 8008c78:	08006c5d 08006c85 08006c8d 08006cb1     ]l...l...l...l..
 8008c88:	08006cd5 3c3a2a22 7f7c3f3e 00000000     .l.."*:<>?|.....
 8008c98:	3d3b2c2b 00005d5b                       +,;=[]..

08008ca0 <ExCvt>:
 8008ca0:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
 8008cb0:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
 8008cc0:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
 8008cd0:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
 8008ce0:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
 8008cf0:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
 8008d00:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
 8008d10:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

08008d20 <LfnOfs>:
 8008d20:	07050301 12100e09 1c181614 0000001e     ................

08008d30 <Tbl>:
 8008d30:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
 8008d40:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
 8008d50:	00e600c9 00f400c6 00f200f6 00f900fb     ................
 8008d60:	00d600ff 00f800dc 00d800a3 019200d7     ................
 8008d70:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
 8008d80:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
 8008d90:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
 8008da0:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
 8008db0:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
 8008dc0:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
 8008dd0:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
 8008de0:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
 8008df0:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
 8008e00:	00da00de 00d900db 00dd00fd 00b400af     ................
 8008e10:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
 8008e20:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

08008e30 <cvt1.1>:
 8008e30:	031a0061 031700e0 030700f8 000100ff     a...............
 8008e40:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
 8008e50:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
 8008e60:	01840182 01860184 01870187 018a0189     ................
 8008e70:	018b018b 018e018d 0190018f 01910191     ................
 8008e80:	01940193 019601f6 01980197 023d0198     ..............=.
 8008e90:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
 8008ea0:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
 8008eb0:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
 8008ec0:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
 8008ed0:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
 8008ee0:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
 8008ef0:	01ca01cb 011001cd 000101dd 01de018e     ................
 8008f00:	01f30112 01f10003 01f401f4 012801f8     ..............(.
 8008f10:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
 8008f20:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
 8008f30:	01810040 02550186 018a0189 018f0258     @.....U.....X...
 8008f40:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
 8008f50:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
 8008f60:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
 8008f70:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
 8008f80:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
 8008f90:	01a90282 02850284 02870286 024401ae     ..............D.
 8008fa0:	01b201b1 028d0245 028f028e 02910290     ....E...........
 8008fb0:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
 8008fc0:	03880386 038a0389 031103b1 000203c2     ................
 8008fd0:	03a303a3 030803c4 000303cc 038e038c     ................
 8008fe0:	03d8038f 03f20118 03f9000a 03f403f3     ................
 8008ff0:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
 8009000:	04500320 04600710 048a0122 04c10136      .P...`."...6...
 8009010:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
 8009020:	00000000                                ....

08009024 <cvt2.0>:
 8009024:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
 8009034:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
 8009044:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
 8009054:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
 8009064:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
 8009074:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
 8009084:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
 8009094:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
 80090a4:	1fec0001 00011ff2 214e1ffc 21320001     ..........N!..2!
 80090b4:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
 80090c4:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
 80090d4:	2d000164 ff410826 0000031a              d..-&.A.....

080090e0 <_init>:
 80090e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e2:	bf00      	nop
 80090e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e6:	bc08      	pop	{r3}
 80090e8:	469e      	mov	lr, r3
 80090ea:	4770      	bx	lr

080090ec <_fini>:
 80090ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ee:	bf00      	nop
 80090f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090f2:	bc08      	pop	{r3}
 80090f4:	469e      	mov	lr, r3
 80090f6:	4770      	bx	lr
