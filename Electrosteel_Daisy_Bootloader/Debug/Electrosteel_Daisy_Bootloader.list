
Electrosteel_Daisy_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000dba4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  0800de3c  0800de3c  00020014  2**0
                  CONTENTS
  3 .exidx        00000000  0800de3c  0800de3c  00020014  2**0
                  CONTENTS
  4 .ARM.attributes 0000002e  0800de3c  0800de3c  00020014  2**0
                  CONTENTS, READONLY
  5 .init_array   00000004  0800de3c  0800de3c  0001de3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800de40  0800de40  0001de40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000014  20000000  0800de44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000938  20000014  0800de58  00020014  2**2
                  ALLOC
  9 .dtcmram_bss  00000000  2000094c  2000094c  00020042  2**0
                  CONTENTS
 10 .sram1_bss    00040000  24000000  24000000  00030000  2**5
                  ALLOC
 11 .userflash    00000020  38800000  38800000  00030000  2**5
                  ALLOC
 12 .sdram_bss    00000000  c0000000  c0000000  00020042  2**0
                  CONTENTS
 13 .qspiflash_text 00000000  90000000  90000000  00020042  2**0
                  CONTENTS
 14 .qspiflash_data 00000000  90000000  90000000  00020042  2**0
                  CONTENTS
 15 .qspiflash_bss 00040000  90000000  90000000  00030000  2**5
                  ALLOC
 16 .heap         00000000  2000094c  2000094c  00020042  2**0
                  CONTENTS
 17 .reserved_for_stack 00000000  2000094c  2000094c  00020042  2**0
                  CONTENTS
 18 .debug_info   0001b008  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 000036c7  00000000  00000000  0003b04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00001380  00000000  00000000  0003e711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 000011d0  00000000  00000000  0003fa91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0003972c  00000000  00000000  00040c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   0001c78d  00000000  00000000  0007a38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    0015c32e  00000000  00000000  00096b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      00000050  00000000  00000000  001f2e48  2**0
                  CONTENTS, READONLY
 26 .debug_frame  00004ff8  00000000  00000000  001f2e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000014 	.word	0x20000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800de3c 	.word	0x0800de3c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000018 	.word	0x20000018
 80002d4:	0800de3c 	.word	0x0800de3c

080002d8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08e      	sub	sp, #56	; 0x38
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002ee:	4bb6      	ldr	r3, [pc, #728]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	4ab4      	ldr	r2, [pc, #720]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002fe:	4bb2      	ldr	r3, [pc, #712]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000304:	f003 0310 	and.w	r3, r3, #16
 8000308:	623b      	str	r3, [r7, #32]
 800030a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800030c:	4bae      	ldr	r3, [pc, #696]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	4aad      	ldr	r2, [pc, #692]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 8000314:	f043 0302 	orr.w	r3, r3, #2
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800031c:	4baa      	ldr	r3, [pc, #680]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000322:	f003 0302 	and.w	r3, r3, #2
 8000326:	61fb      	str	r3, [r7, #28]
 8000328:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800032a:	4ba7      	ldr	r3, [pc, #668]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	4aa5      	ldr	r2, [pc, #660]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 8000332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800033a:	4ba3      	ldr	r3, [pc, #652]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 800033c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000344:	61bb      	str	r3, [r7, #24]
 8000346:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000348:	4b9f      	ldr	r3, [pc, #636]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 800034a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800034e:	4a9e      	ldr	r2, [pc, #632]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 8000350:	f043 0308 	orr.w	r3, r3, #8
 8000354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000358:	4b9b      	ldr	r3, [pc, #620]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 800035a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800035e:	f003 0308 	and.w	r3, r3, #8
 8000362:	617b      	str	r3, [r7, #20]
 8000364:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000366:	4b98      	ldr	r3, [pc, #608]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 8000368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800036c:	4a96      	ldr	r2, [pc, #600]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 800036e:	f043 0304 	orr.w	r3, r3, #4
 8000372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000376:	4b94      	ldr	r3, [pc, #592]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 8000378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800037c:	f003 0304 	and.w	r3, r3, #4
 8000380:	613b      	str	r3, [r7, #16]
 8000382:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000384:	4b90      	ldr	r3, [pc, #576]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 8000386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800038a:	4a8f      	ldr	r2, [pc, #572]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000394:	4b8c      	ldr	r3, [pc, #560]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 8000396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80003a2:	4b89      	ldr	r3, [pc, #548]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80003a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003a8:	4a87      	ldr	r2, [pc, #540]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80003aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003b2:	4b85      	ldr	r3, [pc, #532]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80003b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003c0:	4b81      	ldr	r3, [pc, #516]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80003c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003c6:	4a80      	ldr	r2, [pc, #512]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80003c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003d0:	4b7d      	ldr	r3, [pc, #500]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80003d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003de:	4b7a      	ldr	r3, [pc, #488]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80003e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003e4:	4a78      	ldr	r2, [pc, #480]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80003e6:	f043 0320 	orr.w	r3, r3, #32
 80003ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003ee:	4b76      	ldr	r3, [pc, #472]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80003f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003f4:	f003 0320 	and.w	r3, r3, #32
 80003f8:	603b      	str	r3, [r7, #0]
 80003fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2180      	movs	r1, #128	; 0x80
 8000400:	4872      	ldr	r0, [pc, #456]	; (80005cc <MX_GPIO_Init+0x2f4>)
 8000402:	f002 fac1 	bl	8002988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2180      	movs	r1, #128	; 0x80
 800040a:	4871      	ldr	r0, [pc, #452]	; (80005d0 <MX_GPIO_Init+0x2f8>)
 800040c:	f002 fabc 	bl	8002988 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE1 PE0
                           PE4 PE5 PE6 PE13
                           PE8 PE9 PE11 PE14
                           PE7 PE10 PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 8000410:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000414:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_13
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000416:	2303      	movs	r3, #3
 8000418:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800041e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000422:	4619      	mov	r1, r3
 8000424:	486b      	ldr	r0, [pc, #428]	; (80005d4 <MX_GPIO_Init+0x2fc>)
 8000426:	f001 ffdd 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB4 PB2 PB13
                           PB1 PB0 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_13
 800042a:	f642 4337 	movw	r3, #11319	; 0x2c37
 800042e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000430:	2303      	movs	r3, #3
 8000432:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	2300      	movs	r3, #0
 8000436:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800043c:	4619      	mov	r1, r3
 800043e:	4863      	ldr	r0, [pc, #396]	; (80005cc <MX_GPIO_Init+0x2f4>)
 8000440:	f001 ffd0 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG12
                           PG11 PG10 PG9 PG8
                           PG7 PG5 PG4 PG3
                           PG2 PG1 PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12
 8000444:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8000448:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800044a:	2303      	movs	r3, #3
 800044c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000456:	4619      	mov	r1, r3
 8000458:	485f      	ldr	r0, [pc, #380]	; (80005d8 <MX_GPIO_Init+0x300>)
 800045a:	f001 ffc3 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD1 PD4 PD3 PD15
                           PD14 PD13 PD12 PD11
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 800045e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000462:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_15
                          |GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_11
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000464:	2303      	movs	r3, #3
 8000466:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800046c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000470:	4619      	mov	r1, r3
 8000472:	485a      	ldr	r0, [pc, #360]	; (80005dc <MX_GPIO_Init+0x304>)
 8000474:	f001 ffb6 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA9 PA8 PA0 PA4
                           PA6 PA5 PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 8000478:	f649 73f9 	movw	r3, #40953	; 0x9ff9
 800047c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800047e:	2303      	movs	r3, #3
 8000480:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800048a:	4619      	mov	r1, r3
 800048c:	4854      	ldr	r0, [pc, #336]	; (80005e0 <MX_GPIO_Init+0x308>)
 800048e:	f001 ffa9 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000492:	2380      	movs	r3, #128	; 0x80
 8000494:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000496:	2301      	movs	r3, #1
 8000498:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	2300      	movs	r3, #0
 80004a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004a6:	4619      	mov	r1, r3
 80004a8:	4848      	ldr	r0, [pc, #288]	; (80005cc <MX_GPIO_Init+0x2f4>)
 80004aa:	f001 ff9b 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004ae:	2340      	movs	r3, #64	; 0x40
 80004b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b2:	2300      	movs	r3, #0
 80004b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004b6:	2301      	movs	r3, #1
 80004b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004be:	4619      	mov	r1, r3
 80004c0:	4842      	ldr	r0, [pc, #264]	; (80005cc <MX_GPIO_Init+0x2f4>)
 80004c2:	f001 ff8f 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI7 PI6 PI5 PI3
                           PI2 PI8 PI9 PI4
                           PI1 PI10 PI11 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
 80004c6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80004ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4
                          |GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004cc:	2303      	movs	r3, #3
 80004ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80004d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004d8:	4619      	mov	r1, r3
 80004da:	4842      	ldr	r0, [pc, #264]	; (80005e4 <MX_GPIO_Init+0x30c>)
 80004dc:	f001 ff82 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 80004e0:	f24e 037f 	movw	r3, #57471	; 0xe07f
 80004e4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004e6:	2303      	movs	r3, #3
 80004e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f2:	4619      	mov	r1, r3
 80004f4:	4836      	ldr	r0, [pc, #216]	; (80005d0 <MX_GPIO_Init+0x2f8>)
 80004f6:	f001 ff75 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH2
                           PH3 PH4 PH5 PH12
                           PH11 PH10 PH6 PH8
                           PH9 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
 80004fa:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80004fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000500:	2303      	movs	r3, #3
 8000502:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800050c:	4619      	mov	r1, r3
 800050e:	4836      	ldr	r0, [pc, #216]	; (80005e8 <MX_GPIO_Init+0x310>)
 8000510:	f001 ff68 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF2 PF1 PF3
                           PF4 PF5 PF13 PF12
                           PF15 PF11 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 8000514:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000518:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800051a:	2303      	movs	r3, #3
 800051c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000526:	4619      	mov	r1, r3
 8000528:	4830      	ldr	r0, [pc, #192]	; (80005ec <MX_GPIO_Init+0x314>)
 800052a:	f001 ff5b 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800052e:	2380      	movs	r3, #128	; 0x80
 8000530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000532:	2301      	movs	r3, #1
 8000534:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053a:	2300      	movs	r3, #0
 800053c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800053e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000542:	4619      	mov	r1, r3
 8000544:	4822      	ldr	r0, [pc, #136]	; (80005d0 <MX_GPIO_Init+0x2f8>)
 8000546:	f001 ff4d 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800054a:	2302      	movs	r3, #2
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800054e:	2300      	movs	r3, #0
 8000550:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000552:	2301      	movs	r3, #1
 8000554:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055a:	4619      	mov	r1, r3
 800055c:	4820      	ldr	r0, [pc, #128]	; (80005e0 <MX_GPIO_Init+0x308>)
 800055e:	f001 ff41 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000562:	2304      	movs	r3, #4
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000566:	2300      	movs	r3, #0
 8000568:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800056a:	2302      	movs	r3, #2
 800056c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000572:	4619      	mov	r1, r3
 8000574:	481a      	ldr	r0, [pc, #104]	; (80005e0 <MX_GPIO_Init+0x308>)
 8000576:	f001 ff35 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800057a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800057e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000580:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000584:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000586:	2302      	movs	r3, #2
 8000588:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800058e:	4619      	mov	r1, r3
 8000590:	480e      	ldr	r0, [pc, #56]	; (80005cc <MX_GPIO_Init+0x2f4>)
 8000592:	f001 ff27 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000596:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800059a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059c:	2300      	movs	r3, #0
 800059e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005a0:	2302      	movs	r3, #2
 80005a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a8:	4619      	mov	r1, r3
 80005aa:	4808      	ldr	r0, [pc, #32]	; (80005cc <MX_GPIO_Init+0x2f4>)
 80005ac:	f001 ff1a 	bl	80023e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2101      	movs	r1, #1
 80005b4:	2028      	movs	r0, #40	; 0x28
 80005b6:	f001 fe52 	bl	800225e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005ba:	2028      	movs	r0, #40	; 0x28
 80005bc:	f001 fe69 	bl	8002292 <HAL_NVIC_EnableIRQ>

}
 80005c0:	bf00      	nop
 80005c2:	3738      	adds	r7, #56	; 0x38
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	58024400 	.word	0x58024400
 80005cc:	58020400 	.word	0x58020400
 80005d0:	58020800 	.word	0x58020800
 80005d4:	58021000 	.word	0x58021000
 80005d8:	58021800 	.word	0x58021800
 80005dc:	58020c00 	.word	0x58020c00
 80005e0:	58020000 	.word	0x58020000
 80005e4:	58022000 	.word	0x58022000
 80005e8:	58021c00 	.word	0x58021c00
 80005ec:	58021400 	.word	0x58021400

080005f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_I2C1_Init+0x74>)
 80005f6:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <MX_I2C1_Init+0x78>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_I2C1_Init+0x74>)
 80005fc:	4a1b      	ldr	r2, [pc, #108]	; (800066c <MX_I2C1_Init+0x7c>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 68;
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_I2C1_Init+0x74>)
 8000602:	2244      	movs	r2, #68	; 0x44
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_I2C1_Init+0x74>)
 8000608:	2201      	movs	r2, #1
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_I2C1_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_I2C1_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_I2C1_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_I2C1_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_I2C1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062a:	480e      	ldr	r0, [pc, #56]	; (8000664 <MX_I2C1_Init+0x74>)
 800062c:	f002 f9fa 	bl	8002a24 <HAL_I2C_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000636:	f001 f8e6 	bl	8001806 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800063a:	2100      	movs	r1, #0
 800063c:	4809      	ldr	r0, [pc, #36]	; (8000664 <MX_I2C1_Init+0x74>)
 800063e:	f002 ff47 	bl	80034d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000648:	f001 f8dd 	bl	8001806 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800064c:	2100      	movs	r1, #0
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_I2C1_Init+0x74>)
 8000650:	f002 ff89 	bl	8003566 <HAL_I2CEx_ConfigDigitalFilter>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800065a:	f001 f8d4 	bl	8001806 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000030 	.word	0x20000030
 8000668:	40005400 	.word	0x40005400
 800066c:	00b03fdb 	.word	0x00b03fdb

08000670 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b0ba      	sub	sp, #232	; 0xe8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	22c0      	movs	r2, #192	; 0xc0
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f00d f957 	bl	800d944 <memset>
  if(i2cHandle->Instance==I2C1)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a27      	ldr	r2, [pc, #156]	; (8000738 <HAL_I2C_MspInit+0xc8>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d146      	bne.n	800072e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006a0:	f04f 0208 	mov.w	r2, #8
 80006a4:	f04f 0300 	mov.w	r3, #0
 80006a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 fcfe 	bl	80050b8 <HAL_RCCEx_PeriphCLKConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80006c2:	f001 f8a0 	bl	8001806 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <HAL_I2C_MspInit+0xcc>)
 80006c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006cc:	4a1b      	ldr	r2, [pc, #108]	; (800073c <HAL_I2C_MspInit+0xcc>)
 80006ce:	f043 0302 	orr.w	r3, r3, #2
 80006d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <HAL_I2C_MspInit+0xcc>)
 80006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006dc:	f003 0302 	and.w	r3, r3, #2
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ec:	2312      	movs	r3, #18
 80006ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006fe:	2304      	movs	r3, #4
 8000700:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000708:	4619      	mov	r1, r3
 800070a:	480d      	ldr	r0, [pc, #52]	; (8000740 <HAL_I2C_MspInit+0xd0>)
 800070c:	f001 fe6a 	bl	80023e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <HAL_I2C_MspInit+0xcc>)
 8000712:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000716:	4a09      	ldr	r2, [pc, #36]	; (800073c <HAL_I2C_MspInit+0xcc>)
 8000718:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800071c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_I2C_MspInit+0xcc>)
 8000722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800072e:	bf00      	nop
 8000730:	37e8      	adds	r7, #232	; 0xe8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40005400 	.word	0x40005400
 800073c:	58024400 	.word	0x58024400
 8000740:	58020400 	.word	0x58020400

08000744 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <HAL_I2C_MspDeInit+0x40>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d111      	bne.n	800077a <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <HAL_I2C_MspDeInit+0x44>)
 8000758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800075c:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <HAL_I2C_MspDeInit+0x44>)
 800075e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000762:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8000766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076a:	4808      	ldr	r0, [pc, #32]	; (800078c <HAL_I2C_MspDeInit+0x48>)
 800076c:	f001 ffea 	bl	8002744 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8000770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <HAL_I2C_MspDeInit+0x48>)
 8000776:	f001 ffe5 	bl	8002744 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40005400 	.word	0x40005400
 8000788:	58024400 	.word	0x58024400
 800078c:	58020400 	.word	0x58020400

08000790 <BSP_SD_IsDetected>:
	}
}


uint8_t BSP_SD_IsDetected(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8000796:	2301      	movs	r3, #1
 8000798:	71fb      	strb	r3, [r7, #7]
  //if (BSP_PlatformIsDetected() == 0x0)
  {
    //status = SD_NOT_PRESENT;
  }

  return status;
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	b2db      	uxtb	r3, r3
}
 800079e:	4618      	mov	r0, r3
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
	...

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b092      	sub	sp, #72	; 0x48
 80007b0:	af02      	add	r7, sp, #8
	  //SCB_EnableDCache();

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007b2:	f000 fffb 	bl	80017ac <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b6:	f001 fb15 	bl	8001de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ba:	f000 fa67 	bl	8000c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007be:	f7ff fd8b 	bl	80002d8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80007c2:	f001 f825 	bl	8001810 <MX_QUADSPI_Init>
  //MX_FATFS_Init();
  //MX_I2C1_Init();
  /* USER CODE BEGIN 2 */

  /* Enable write access to Backup domain */
     PWR->CR1 |= PWR_CR1_DBP;
 80007c6:	4bab      	ldr	r3, [pc, #684]	; (8000a74 <main+0x2c8>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4aaa      	ldr	r2, [pc, #680]	; (8000a74 <main+0x2c8>)
 80007cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007d0:	6013      	str	r3, [r2, #0]
     while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80007d2:	bf00      	nop
 80007d4:	4ba7      	ldr	r3, [pc, #668]	; (8000a74 <main+0x2c8>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d0f9      	beq.n	80007d4 <main+0x28>
     {
  	   ;
     }
     /*Enable BKPRAM clock*/
     __HAL_RCC_BKPRAM_CLK_ENABLE();
 80007e0:	4ba5      	ldr	r3, [pc, #660]	; (8000a78 <main+0x2cc>)
 80007e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e6:	4aa4      	ldr	r2, [pc, #656]	; (8000a78 <main+0x2cc>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f0:	4ba1      	ldr	r3, [pc, #644]	; (8000a78 <main+0x2cc>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697b      	ldr	r3, [r7, #20]
     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	489e      	ldr	r0, [pc, #632]	; (8000a7c <main+0x2d0>)
 8000804:	f002 f8c0 	bl	8002988 <HAL_GPIO_WritePin>
     HAL_Delay(100);
 8000808:	2064      	movs	r0, #100	; 0x64
 800080a:	f001 fbe3 	bl	8001fd4 <HAL_Delay>
 	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 800080e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000812:	489a      	ldr	r0, [pc, #616]	; (8000a7c <main+0x2d0>)
 8000814:	f002 f8a0 	bl	8002958 <HAL_GPIO_ReadPin>
 8000818:	4603      	mov	r3, r0
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
 	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800081c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000820:	4896      	ldr	r0, [pc, #600]	; (8000a7c <main+0x2d0>)
 8000822:	f002 f899 	bl	8002958 <HAL_GPIO_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
 	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 800082a:	2104      	movs	r1, #4
 800082c:	4894      	ldr	r0, [pc, #592]	; (8000a80 <main+0x2d4>)
 800082e:	f002 f893 	bl	8002958 <HAL_GPIO_ReadPin>
 8000832:	4603      	mov	r3, r0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
 	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 8000836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000838:	b2db      	uxtb	r3, r3
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	b2da      	uxtb	r2, r3
 800083e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000840:	b2db      	uxtb	r3, r3
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4413      	add	r3, r2
 8000848:	b2da      	uxtb	r2, r3
 800084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4413      	add	r3, r2
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b8c      	ldr	r3, [pc, #560]	; (8000a84 <main+0x2d8>)
 8000854:	701a      	strb	r2, [r3, #0]
 	if (boardNumber == 0)
 8000856:	4b8b      	ldr	r3, [pc, #556]	; (8000a84 <main+0x2d8>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d12b      	bne.n	80008b6 <main+0x10a>
 	{
		  //set up the master send control pin to signal other daisies to listen to I2C bus
		  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800085e:	2028      	movs	r0, #40	; 0x28
 8000860:	f001 fd25 	bl	80022ae <HAL_NVIC_DisableIRQ>

 		  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	463b      	mov	r3, r7
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
		  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000876:	603b      	str	r3, [r7, #0]
		  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	607b      	str	r3, [r7, #4]
		  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800087c:	2302      	movs	r3, #2
 800087e:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]

		  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	487c      	ldr	r0, [pc, #496]	; (8000a7c <main+0x2d0>)
 800088a:	f001 fdab 	bl	80023e4 <HAL_GPIO_Init>
 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000894:	4879      	ldr	r0, [pc, #484]	; (8000a7c <main+0x2d0>)
 8000896:	f002 f877 	bl	8002988 <HAL_GPIO_WritePin>


 		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0)
 800089a:	2140      	movs	r1, #64	; 0x40
 800089c:	4877      	ldr	r0, [pc, #476]	; (8000a7c <main+0x2d0>)
 800089e:	f002 f85b 	bl	8002958 <HAL_GPIO_ReadPin>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d103      	bne.n	80008b0 <main+0x104>
 		{
 			bootloader_button_pressed = 1;
 80008a8:	4b77      	ldr	r3, [pc, #476]	; (8000a88 <main+0x2dc>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	e002      	b.n	80008b6 <main+0x10a>
 		}
 		else
 		{
 			bootloader_button_pressed = 0;
 80008b0:	4b75      	ldr	r3, [pc, #468]	; (8000a88 <main+0x2dc>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
 		}
 	}
    //if (*(__IO uint32_t*)(0x38800000+36) != 12345678)

	qspi_initialize(INDIRECT_POLLING);
 80008b6:	2000      	movs	r0, #0
 80008b8:	f000 fc5e 	bl	8001178 <qspi_initialize>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2180      	movs	r1, #128	; 0x80
 80008c0:	486e      	ldr	r0, [pc, #440]	; (8000a7c <main+0x2d0>)
 80008c2:	f002 f861 	bl	8002988 <HAL_GPIO_WritePin>


	if (bootloader_button_pressed == 1)
 80008c6:	4b70      	ldr	r3, [pc, #448]	; (8000a88 <main+0x2dc>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	f040 80b4 	bne.w	8000a38 <main+0x28c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // tell the other ICs
 80008d0:	2201      	movs	r2, #1
 80008d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d6:	4869      	ldr	r0, [pc, #420]	; (8000a7c <main+0x2d0>)
 80008d8:	f002 f856 	bl	8002988 <HAL_GPIO_WritePin>

		MX_I2C1_Init();
 80008dc:	f7ff fe88 	bl	80005f0 <MX_I2C1_Init>
		MX_SDMMC1_SD_Init();
 80008e0:	f001 f89e 	bl	8001a20 <MX_SDMMC1_SD_Init>
		MX_FATFS_Init();
 80008e4:	f009 fcdc 	bl	800a2a0 <MX_FATFS_Init>

		int i = 6;
 80008e8:	2306      	movs	r3, #6
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
		while(i--)
 80008ec:	e006      	b.n	80008fc <main+0x150>
		{
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80008ee:	2180      	movs	r1, #128	; 0x80
 80008f0:	4866      	ldr	r0, [pc, #408]	; (8000a8c <main+0x2e0>)
 80008f2:	f002 f862 	bl	80029ba <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 80008f6:	2064      	movs	r0, #100	; 0x64
 80008f8:	f001 fb6c 	bl	8001fd4 <HAL_Delay>
		while(i--)
 80008fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008fe:	1e5a      	subs	r2, r3, #1
 8000900:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1f3      	bne.n	80008ee <main+0x142>
		}

		FS_FileOperations();
 8000906:	f000 fe33 	bl	8001570 <FS_FileOperations>

		if (!memory_already_mapped)
 800090a:	4b61      	ldr	r3, [pc, #388]	; (8000a90 <main+0x2e4>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	2b00      	cmp	r3, #0
 8000912:	d101      	bne.n	8000918 <main+0x16c>
		{
		  qspi_enable_memory_mapped();
 8000914:	f000 fbf2 	bl	80010fc <qspi_enable_memory_mapped>
		}

		//copy qspi flash code into SRAM location on every boot.
		for (int i = 0; i < 262140; i++)
 8000918:	2300      	movs	r3, #0
 800091a:	63bb      	str	r3, [r7, #56]	; 0x38
 800091c:	e00b      	b.n	8000936 <main+0x18a>
		{
		  tempBinaryBuffer[i] = flash_mem[i];
 800091e:	4a5d      	ldr	r2, [pc, #372]	; (8000a94 <main+0x2e8>)
 8000920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000922:	4413      	add	r3, r2
 8000924:	7819      	ldrb	r1, [r3, #0]
 8000926:	4a5c      	ldr	r2, [pc, #368]	; (8000a98 <main+0x2ec>)
 8000928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800092a:	4413      	add	r3, r2
 800092c:	460a      	mov	r2, r1
 800092e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 262140; i++)
 8000930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000932:	3301      	adds	r3, #1
 8000934:	63bb      	str	r3, [r7, #56]	; 0x38
 8000936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000938:	4a58      	ldr	r2, [pc, #352]	; (8000a9c <main+0x2f0>)
 800093a:	4293      	cmp	r3, r2
 800093c:	ddef      	ble.n	800091e <main+0x172>
		}

		//wait for manual bootloader button to go up (lets us test things by holding the device in this state)
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0)
 800093e:	bf00      	nop
 8000940:	2140      	movs	r1, #64	; 0x40
 8000942:	484e      	ldr	r0, [pc, #312]	; (8000a7c <main+0x2d0>)
 8000944:	f002 f808 	bl	8002958 <HAL_GPIO_ReadPin>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d0f8      	beq.n	8000940 <main+0x194>
		{
		  ;
		}
		//bring signal pin down to tell the other chips we're ready to send firmware over I2C
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000954:	4849      	ldr	r0, [pc, #292]	; (8000a7c <main+0x2d0>)
 8000956:	f002 f817 	bl	8002988 <HAL_GPIO_WritePin>
		HAL_Delay(1); //wait for them to receive and get ready
 800095a:	2001      	movs	r0, #1
 800095c:	f001 fb3a 	bl	8001fd4 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2180      	movs	r1, #128	; 0x80
 8000964:	4849      	ldr	r0, [pc, #292]	; (8000a8c <main+0x2e0>)
 8000966:	f002 f80f 	bl	8002988 <HAL_GPIO_WritePin>
		HAL_I2C_Master_Transmit(&hi2c1, 34<<1, tempBinaryBuffer, 65535,
 800096a:	f242 7310 	movw	r3, #10000	; 0x2710
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000974:	4a48      	ldr	r2, [pc, #288]	; (8000a98 <main+0x2ec>)
 8000976:	2144      	movs	r1, #68	; 0x44
 8000978:	4849      	ldr	r0, [pc, #292]	; (8000aa0 <main+0x2f4>)
 800097a:	f002 f913 	bl	8002ba4 <HAL_I2C_Master_Transmit>
			10000);
		HAL_Delay(200);
 800097e:	20c8      	movs	r0, #200	; 0xc8
 8000980:	f001 fb28 	bl	8001fd4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2180      	movs	r1, #128	; 0x80
 8000988:	4840      	ldr	r0, [pc, #256]	; (8000a8c <main+0x2e0>)
 800098a:	f001 fffd 	bl	8002988 <HAL_GPIO_WritePin>
		HAL_I2C_Master_Transmit(&hi2c1, 34<<1, tempBinaryBuffer+65535, 65535,
 800098e:	4a45      	ldr	r2, [pc, #276]	; (8000aa4 <main+0x2f8>)
 8000990:	f242 7310 	movw	r3, #10000	; 0x2710
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800099a:	2144      	movs	r1, #68	; 0x44
 800099c:	4840      	ldr	r0, [pc, #256]	; (8000aa0 <main+0x2f4>)
 800099e:	f002 f901 	bl	8002ba4 <HAL_I2C_Master_Transmit>
			10000);
		HAL_Delay(200);
 80009a2:	20c8      	movs	r0, #200	; 0xc8
 80009a4:	f001 fb16 	bl	8001fd4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	2180      	movs	r1, #128	; 0x80
 80009ac:	4837      	ldr	r0, [pc, #220]	; (8000a8c <main+0x2e0>)
 80009ae:	f001 ffeb 	bl	8002988 <HAL_GPIO_WritePin>
		HAL_I2C_Master_Transmit(&hi2c1, 34<<1, tempBinaryBuffer+131070, 65535,
 80009b2:	4a3d      	ldr	r2, [pc, #244]	; (8000aa8 <main+0x2fc>)
 80009b4:	f242 7310 	movw	r3, #10000	; 0x2710
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009be:	2144      	movs	r1, #68	; 0x44
 80009c0:	4837      	ldr	r0, [pc, #220]	; (8000aa0 <main+0x2f4>)
 80009c2:	f002 f8ef 	bl	8002ba4 <HAL_I2C_Master_Transmit>
			10000);
		HAL_Delay(200);
 80009c6:	20c8      	movs	r0, #200	; 0xc8
 80009c8:	f001 fb04 	bl	8001fd4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2180      	movs	r1, #128	; 0x80
 80009d0:	482e      	ldr	r0, [pc, #184]	; (8000a8c <main+0x2e0>)
 80009d2:	f001 ffd9 	bl	8002988 <HAL_GPIO_WritePin>
		HAL_I2C_Master_Transmit(&hi2c1, 34<<1, tempBinaryBuffer+196605, 65535,
 80009d6:	4a35      	ldr	r2, [pc, #212]	; (8000aac <main+0x300>)
 80009d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e2:	2144      	movs	r1, #68	; 0x44
 80009e4:	482e      	ldr	r0, [pc, #184]	; (8000aa0 <main+0x2f4>)
 80009e6:	f002 f8dd 	bl	8002ba4 <HAL_I2C_Master_Transmit>
			10000);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	2180      	movs	r1, #128	; 0x80
 80009ee:	4827      	ldr	r0, [pc, #156]	; (8000a8c <main+0x2e0>)
 80009f0:	f001 ffca 	bl	8002988 <HAL_GPIO_WritePin>


		HAL_Delay(6000);
 80009f4:	f241 7070 	movw	r0, #6000	; 0x1770
 80009f8:	f001 faec 	bl	8001fd4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2180      	movs	r1, #128	; 0x80
 8000a00:	4822      	ldr	r0, [pc, #136]	; (8000a8c <main+0x2e0>)
 8000a02:	f001 ffc1 	bl	8002988 <HAL_GPIO_WritePin>
		HAL_QSPI_MspDeInit(&hqspi);
 8000a06:	482a      	ldr	r0, [pc, #168]	; (8000ab0 <main+0x304>)
 8000a08:	f000 ffe4 	bl	80019d4 <HAL_QSPI_MspDeInit>
		HAL_I2C_DeInit(&hi2c1);
 8000a0c:	4824      	ldr	r0, [pc, #144]	; (8000aa0 <main+0x2f4>)
 8000a0e:	f002 f899 	bl	8002b44 <HAL_I2C_DeInit>
		HAL_SD_MspDeInit(&hsd1);
 8000a12:	4828      	ldr	r0, [pc, #160]	; (8000ab4 <main+0x308>)
 8000a14:	f001 f8b8 	bl	8001b88 <HAL_SD_MspDeInit>

		HAL_RCC_DeInit();
 8000a18:	f003 fa54 	bl	8003ec4 <HAL_RCC_DeInit>
		HAL_DeInit();
 8000a1c:	f001 fa1e 	bl	8001e5c <HAL_DeInit>
		SysTick->CTRL = 0;
 8000a20:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <main+0x30c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0;
 8000a26:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <main+0x30c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0;
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <main+0x30c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]

		HAL_NVIC_SystemReset();
 8000a32:	f001 fc4a 	bl	80022ca <HAL_NVIC_SystemReset>
 8000a36:	e110      	b.n	8000c5a <main+0x4ae>

	}

    else
    {
		int i = 6;
 8000a38:	2306      	movs	r3, #6
 8000a3a:	637b      	str	r3, [r7, #52]	; 0x34
		while(i--)
 8000a3c:	e006      	b.n	8000a4c <main+0x2a0>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000a3e:	2180      	movs	r1, #128	; 0x80
 8000a40:	4812      	ldr	r0, [pc, #72]	; (8000a8c <main+0x2e0>)
 8000a42:	f001 ffba 	bl	80029ba <HAL_GPIO_TogglePin>
			HAL_Delay(40);
 8000a46:	2028      	movs	r0, #40	; 0x28
 8000a48:	f001 fac4 	bl	8001fd4 <HAL_Delay>
		while(i--)
 8000a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a4e:	1e5a      	subs	r2, r3, #1
 8000a50:	637a      	str	r2, [r7, #52]	; 0x34
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1f3      	bne.n	8000a3e <main+0x292>
		}
		HAL_Delay(1000);
 8000a56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a5a:	f001 fabb 	bl	8001fd4 <HAL_Delay>
		if (!memory_already_mapped)
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <main+0x2e4>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d101      	bne.n	8000a6c <main+0x2c0>
		{
		 	qspi_enable_memory_mapped();
 8000a68:	f000 fb48 	bl	80010fc <qspi_enable_memory_mapped>

		}
		//copy qspi flash code into SRAM location on every boot.
		for (int i = 0; i < 262140; i++)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8000a70:	e030      	b.n	8000ad4 <main+0x328>
 8000a72:	bf00      	nop
 8000a74:	58024800 	.word	0x58024800
 8000a78:	58024400 	.word	0x58024400
 8000a7c:	58020400 	.word	0x58020400
 8000a80:	58020000 	.word	0x58020000
 8000a84:	20000000 	.word	0x20000000
 8000a88:	200001d8 	.word	0x200001d8
 8000a8c:	58020800 	.word	0x58020800
 8000a90:	200001e0 	.word	0x200001e0
 8000a94:	90000000 	.word	0x90000000
 8000a98:	24000000 	.word	0x24000000
 8000a9c:	0003fffb 	.word	0x0003fffb
 8000aa0:	20000030 	.word	0x20000030
 8000aa4:	2400ffff 	.word	0x2400ffff
 8000aa8:	2401fffe 	.word	0x2401fffe
 8000aac:	2402fffd 	.word	0x2402fffd
 8000ab0:	200001e4 	.word	0x200001e4
 8000ab4:	20000230 	.word	0x20000230
 8000ab8:	e000e010 	.word	0xe000e010
		{
			tempBinaryBuffer[i] = flash_mem[i];
 8000abc:	4a67      	ldr	r2, [pc, #412]	; (8000c5c <main+0x4b0>)
 8000abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac0:	4413      	add	r3, r2
 8000ac2:	7819      	ldrb	r1, [r3, #0]
 8000ac4:	4a66      	ldr	r2, [pc, #408]	; (8000c60 <main+0x4b4>)
 8000ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac8:	4413      	add	r3, r2
 8000aca:	460a      	mov	r2, r1
 8000acc:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 262140; i++)
 8000ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	633b      	str	r3, [r7, #48]	; 0x30
 8000ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad6:	4a63      	ldr	r2, [pc, #396]	; (8000c64 <main+0x4b8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	ddef      	ble.n	8000abc <main+0x310>
		}


		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	4862      	ldr	r0, [pc, #392]	; (8000c68 <main+0x4bc>)
 8000ae0:	f001 ff6b 	bl	80029ba <HAL_GPIO_TogglePin>
		JumpToApplication = (pFunction) (*(__IO uint32_t*) (APPLICATION_ADDRESS+4));
 8000ae4:	4b61      	ldr	r3, [pc, #388]	; (8000c6c <main+0x4c0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b61      	ldr	r3, [pc, #388]	; (8000c70 <main+0x4c4>)
 8000aec:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	4860      	ldr	r0, [pc, #384]	; (8000c74 <main+0x4c8>)
 8000af4:	f001 ff48 	bl	8002988 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f001 fa6b 	bl	8001fd4 <HAL_Delay>
		if (((uint32_t)JumpToApplication > 0x30000000) ||  ((uint32_t)JumpToApplication < 0x24000000) )
 8000afe:	4b5c      	ldr	r3, [pc, #368]	; (8000c70 <main+0x4c4>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8000b06:	d804      	bhi.n	8000b12 <main+0x366>
 8000b08:	4b59      	ldr	r3, [pc, #356]	; (8000c70 <main+0x4c4>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8000b10:	d20f      	bcs.n	8000b32 <main+0x386>
		{
			//out of range, not a valid firmware
			while(1)
			{
				if (memory_already_mapped)
 8000b12:	4b59      	ldr	r3, [pc, #356]	; (8000c78 <main+0x4cc>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d002      	beq.n	8000b22 <main+0x376>
				{
					qspi_initialize(INDIRECT_POLLING);
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f000 fb2b 	bl	8001178 <qspi_initialize>
				}
				HAL_Delay(2);
 8000b22:	2002      	movs	r0, #2
 8000b24:	f001 fa56 	bl	8001fd4 <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	4852      	ldr	r0, [pc, #328]	; (8000c74 <main+0x4c8>)
 8000b2c:	f001 ff45 	bl	80029ba <HAL_GPIO_TogglePin>
				if (memory_already_mapped)
 8000b30:	e7ef      	b.n	8000b12 <main+0x366>
			}
		}
		//otherwise, boot it up!
		HAL_QSPI_MspDeInit(&hqspi);
 8000b32:	4852      	ldr	r0, [pc, #328]	; (8000c7c <main+0x4d0>)
 8000b34:	f000 ff4e 	bl	80019d4 <HAL_QSPI_MspDeInit>

		HAL_RCC_DeInit();
 8000b38:	f003 f9c4 	bl	8003ec4 <HAL_RCC_DeInit>
		HAL_DeInit();
 8000b3c:	f001 f98e 	bl	8001e5c <HAL_DeInit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
		__disable_irq();

		NVIC->ICER[0] = 0xFFFFFFFF;
 8000b44:	4b4e      	ldr	r3, [pc, #312]	; (8000c80 <main+0x4d4>)
 8000b46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		NVIC->ICER[1] = 0xFFFFFFFF;
 8000b4e:	4b4c      	ldr	r3, [pc, #304]	; (8000c80 <main+0x4d4>)
 8000b50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		NVIC->ICER[2] = 0xFFFFFFFF;
 8000b58:	4b49      	ldr	r3, [pc, #292]	; (8000c80 <main+0x4d4>)
 8000b5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		NVIC->ICER[3] = 0xFFFFFFFF;
 8000b62:	4b47      	ldr	r3, [pc, #284]	; (8000c80 <main+0x4d4>)
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		NVIC->ICER[4] = 0xFFFFFFFF;
 8000b6c:	4b44      	ldr	r3, [pc, #272]	; (8000c80 <main+0x4d4>)
 8000b6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		NVIC->ICER[5] = 0xFFFFFFFF;
 8000b76:	4b42      	ldr	r3, [pc, #264]	; (8000c80 <main+0x4d4>)
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		NVIC->ICER[6] = 0xFFFFFFFF;
 8000b80:	4b3f      	ldr	r3, [pc, #252]	; (8000c80 <main+0x4d4>)
 8000b82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b86:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		NVIC->ICER[7] = 0xFFFFFFFF;
 8000b8a:	4b3d      	ldr	r3, [pc, #244]	; (8000c80 <main+0x4d4>)
 8000b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		NVIC->ICPR[0] = 0xFFFFFFFF;
 8000b94:	4b3a      	ldr	r3, [pc, #232]	; (8000c80 <main+0x4d4>)
 8000b96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b9a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		NVIC->ICPR[1] = 0xFFFFFFFF;
 8000b9e:	4b38      	ldr	r3, [pc, #224]	; (8000c80 <main+0x4d4>)
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ba4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		NVIC->ICPR[2] = 0xFFFFFFFF;
 8000ba8:	4b35      	ldr	r3, [pc, #212]	; (8000c80 <main+0x4d4>)
 8000baa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bae:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		NVIC->ICPR[3] = 0xFFFFFFFF;
 8000bb2:	4b33      	ldr	r3, [pc, #204]	; (8000c80 <main+0x4d4>)
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bb8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
		NVIC->ICPR[4] = 0xFFFFFFFF;
 8000bbc:	4b30      	ldr	r3, [pc, #192]	; (8000c80 <main+0x4d4>)
 8000bbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bc2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		NVIC->ICPR[5] = 0xFFFFFFFF;
 8000bc6:	4b2e      	ldr	r3, [pc, #184]	; (8000c80 <main+0x4d4>)
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bcc:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
		NVIC->ICPR[6] = 0xFFFFFFFF;
 8000bd0:	4b2b      	ldr	r3, [pc, #172]	; (8000c80 <main+0x4d4>)
 8000bd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd6:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
		NVIC->ICPR[7] = 0xFFFFFFFF;
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <main+0x4d4>)
 8000bdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000be0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

		SysTick->CTRL = 0;
 8000be4:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <main+0x4d8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0; // Needed?
 8000bea:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <main+0x4d8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;  // Needed?
 8000bf0:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <main+0x4d8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
		SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk;
 8000bf6:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <main+0x4dc>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	4a23      	ldr	r2, [pc, #140]	; (8000c88 <main+0x4dc>)
 8000bfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c00:	6053      	str	r3, [r2, #4]

		SCB->SHCSR &= ~(SCB_SHCSR_USGFAULTENA_Msk | //
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <main+0x4dc>)
 8000c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c06:	4a20      	ldr	r2, [pc, #128]	; (8000c88 <main+0x4dc>)
 8000c08:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8000c0c:	6253      	str	r3, [r2, #36]	; 0x24
						SCB_SHCSR_BUSFAULTENA_Msk | //
						SCB_SHCSR_MEMFAULTENA_Msk);

		__set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000c0e:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	f383 8808 	msr	MSP, r3
}
 8000c1c:	bf00      	nop
		__set_PSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000c1e:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	f383 8809 	msr	PSP, r3
}
 8000c2c:	bf00      	nop
		SCB->VTOR = APPLICATION_ADDRESS;
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <main+0x4dc>)
 8000c30:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	f383 8814 	msr	CONTROL, r3
}
 8000c40:	bf00      	nop
		__set_CONTROL(0);


		SysTick->CTRL = 0;
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <main+0x4d8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0;
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <main+0x4d8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0;
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <main+0x4d8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]

		JumpToApplication();
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <main+0x4c4>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4798      	blx	r3

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000c5a:	e7fe      	b.n	8000c5a <main+0x4ae>
 8000c5c:	90000000 	.word	0x90000000
 8000c60:	24000000 	.word	0x24000000
 8000c64:	0003fffb 	.word	0x0003fffb
 8000c68:	58020800 	.word	0x58020800
 8000c6c:	24000004 	.word	0x24000004
 8000c70:	200001dc 	.word	0x200001dc
 8000c74:	58020400 	.word	0x58020400
 8000c78:	200001e0 	.word	0x200001e0
 8000c7c:	200001e4 	.word	0x200001e4
 8000c80:	e000e100 	.word	0xe000e100
 8000c84:	e000e010 	.word	0xe000e010
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b09e      	sub	sp, #120	; 0x78
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c96:	224c      	movs	r2, #76	; 0x4c
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f00c fe52 	bl	800d944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	2220      	movs	r2, #32
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f00c fe4b 	bl	800d944 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f002 fca6 	bl	8003600 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	4b48      	ldr	r3, [pc, #288]	; (8000ddc <SystemClock_Config+0x150>)
 8000cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbc:	4a47      	ldr	r2, [pc, #284]	; (8000ddc <SystemClock_Config+0x150>)
 8000cbe:	f023 0301 	bic.w	r3, r3, #1
 8000cc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cc4:	4b45      	ldr	r3, [pc, #276]	; (8000ddc <SystemClock_Config+0x150>)
 8000cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	4b44      	ldr	r3, [pc, #272]	; (8000de0 <SystemClock_Config+0x154>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	4a43      	ldr	r2, [pc, #268]	; (8000de0 <SystemClock_Config+0x154>)
 8000cd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cd8:	6193      	str	r3, [r2, #24]
 8000cda:	4b41      	ldr	r3, [pc, #260]	; (8000de0 <SystemClock_Config+0x154>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce6:	bf00      	nop
 8000ce8:	4b3d      	ldr	r3, [pc, #244]	; (8000de0 <SystemClock_Config+0x154>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cf4:	d1f8      	bne.n	8000ce8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	4b3b      	ldr	r3, [pc, #236]	; (8000de4 <SystemClock_Config+0x158>)
 8000cf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cfc:	4a39      	ldr	r2, [pc, #228]	; (8000de4 <SystemClock_Config+0x158>)
 8000cfe:	f043 0302 	orr.w	r3, r3, #2
 8000d02:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d06:	4b37      	ldr	r3, [pc, #220]	; (8000de4 <SystemClock_Config+0x158>)
 8000d08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d14:	2300      	movs	r3, #0
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	4b31      	ldr	r3, [pc, #196]	; (8000de0 <SystemClock_Config+0x154>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a30      	ldr	r2, [pc, #192]	; (8000de0 <SystemClock_Config+0x154>)
 8000d1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b2e      	ldr	r3, [pc, #184]	; (8000de0 <SystemClock_Config+0x154>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <SystemClock_Config+0x150>)
 8000d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d32:	4a2a      	ldr	r2, [pc, #168]	; (8000ddc <SystemClock_Config+0x150>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d3a:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <SystemClock_Config+0x150>)
 8000d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d46:	bf00      	nop
 8000d48:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <SystemClock_Config+0x154>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d54:	d1f8      	bne.n	8000d48 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d56:	2301      	movs	r3, #1
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d60:	2302      	movs	r3, #2
 8000d62:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d64:	2302      	movs	r3, #2
 8000d66:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000d6c:	233c      	movs	r3, #60	; 0x3c
 8000d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000d74:	2306      	movs	r3, #6
 8000d76:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 8;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d7c:	230c      	movs	r3, #12
 8000d7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f003 f9c3 	bl	8004118 <HAL_RCC_OscConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000d98:	f000 fd35 	bl	8001806 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9c:	233f      	movs	r3, #63	; 0x3f
 8000d9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da0:	2303      	movs	r3, #3
 8000da2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000da8:	2308      	movs	r3, #8
 8000daa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dac:	2340      	movs	r3, #64	; 0x40
 8000dae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000db0:	2340      	movs	r3, #64	; 0x40
 8000db2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dba:	2340      	movs	r3, #64	; 0x40
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	2104      	movs	r1, #4
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f003 fe01 	bl	80049cc <HAL_RCC_ClockConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000dd0:	f000 fd19 	bl	8001806 <Error_Handler>
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3778      	adds	r7, #120	; 0x78
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	58000400 	.word	0x58000400
 8000de0:	58024800 	.word	0x58024800
 8000de4:	58024400 	.word	0x58024400

08000de8 <qspi_error>:

/* USER CODE BEGIN 4 */


void qspi_error(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2180      	movs	r1, #128	; 0x80
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <qspi_error+0x14>)
 8000df2:	f001 fdc9 	bl	8002988 <HAL_GPIO_WritePin>
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	58020800 	.word	0x58020800

08000e00 <AutopollingMemReady>:

int AutopollingMemReady(int timeout)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b098      	sub	sp, #96	; 0x60
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	 int ok = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
	QSPI_CommandTypeDef     s_command;
	    QSPI_AutoPollingTypeDef s_config;

	    /* Configure automatic polling mode to wait for memory ready */
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e10:	63fb      	str	r3, [r7, #60]	; 0x3c
	    s_command.Instruction       = READ_STATUS_REG_CMD;
 8000e12:	2305      	movs	r3, #5
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
	    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	643b      	str	r3, [r7, #64]	; 0x40
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	647b      	str	r3, [r7, #68]	; 0x44
	    s_command.DataMode          = QSPI_DATA_1_LINE;
 8000e1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e22:	64bb      	str	r3, [r7, #72]	; 0x48
	    s_command.DummyCycles       = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	63bb      	str	r3, [r7, #56]	; 0x38
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	653b      	str	r3, [r7, #80]	; 0x50
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	657b      	str	r3, [r7, #84]	; 0x54
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000e30:	2300      	movs	r3, #0
 8000e32:	65bb      	str	r3, [r7, #88]	; 0x58

	    s_config.Match         = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
	    s_config.MatchMode     = QSPI_MATCH_MODE_AND;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
	    s_config.Interval      = 0x10;
 8000e3c:	2310      	movs	r3, #16
 8000e3e:	617b      	str	r3, [r7, #20]
	    s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000e40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e44:	623b      	str	r3, [r7, #32]
	    s_config.Mask          = IS25LP064A_SR_WIP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	613b      	str	r3, [r7, #16]
	    //s_config.Mask            = 0;
	    s_config.StatusBytesSize = 1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	61bb      	str	r3, [r7, #24]

	    if(HAL_QSPI_AutoPolling(&hqspi, &s_command, &s_config, timeout)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f107 020c 	add.w	r2, r7, #12
 8000e54:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000e58:	4807      	ldr	r0, [pc, #28]	; (8000e78 <AutopollingMemReady+0x78>)
 8000e5a:	f002 fd8f 	bl	800397c <HAL_QSPI_AutoPolling>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <AutopollingMemReady+0x68>
	       != HAL_OK)
	    {
	    	qspi_error();
 8000e64:	f7ff ffc0 	bl	8000de8 <qspi_error>
	    }

	    ok= 1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
	    return ok;
 8000e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c

}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3760      	adds	r7, #96	; 0x60
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200001e4 	.word	0x200001e4

08000e7c <qspi_WriteEnable>:

int qspi_WriteEnable()
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b096      	sub	sp, #88	; 0x58
 8000e80:	af00      	add	r7, sp, #0
	 int ok = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	657b      	str	r3, [r7, #84]	; 0x54
	QSPI_CommandTypeDef     s_command;
	    QSPI_AutoPollingTypeDef s_config;

	    /* Enable write operations */
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000e86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e8a:	637b      	str	r3, [r7, #52]	; 0x34
	    s_command.Instruction       = WRITE_ENABLE_CMD;
 8000e8c:	2306      	movs	r3, #6
 8000e8e:	61fb      	str	r3, [r7, #28]
	    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	63bb      	str	r3, [r7, #56]	; 0x38
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	63fb      	str	r3, [r7, #60]	; 0x3c
	    s_command.DataMode          = QSPI_DATA_NONE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	643b      	str	r3, [r7, #64]	; 0x40
	    s_command.DummyCycles       = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	64bb      	str	r3, [r7, #72]	; 0x48
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	653b      	str	r3, [r7, #80]	; 0x50

	    //RETURN_IF_ERR(CheckProgramMemory());

	    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4817      	ldr	r0, [pc, #92]	; (8000f14 <qspi_WriteEnable+0x98>)
 8000eb8:	f002 fc70 	bl	800379c <HAL_QSPI_Command>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <qspi_WriteEnable+0x4a>
	       != HAL_OK)
	    {
	    	qspi_error();
 8000ec2:	f7ff ff91 	bl	8000de8 <qspi_error>
	    }

	    /* Configure automatic polling mode to wait for write enabling */
	    //        s_config.Match           = IS25LP080D_SR_WREN | (IS25LP080D_SR_WREN << 8);
	    //        s_config.Mask            = IS25LP080D_SR_WREN | (IS25LP080D_SR_WREN << 8);
	    s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
	    s_config.Match           = IS25LP064A_SR_WREN;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	607b      	str	r3, [r7, #4]
	    s_config.Mask            = IS25LP064A_SR_WREN;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	60bb      	str	r3, [r7, #8]
	    s_config.Interval        = 0x10;
 8000ed2:	2310      	movs	r3, #16
 8000ed4:	60fb      	str	r3, [r7, #12]
	    s_config.StatusBytesSize = 1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	613b      	str	r3, [r7, #16]
	    s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000eda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ede:	61bb      	str	r3, [r7, #24]

	    s_command.Instruction = READ_STATUS_REG_CMD;
 8000ee0:	2305      	movs	r3, #5
 8000ee2:	61fb      	str	r3, [r7, #28]
	    s_command.DataMode    = QSPI_DATA_1_LINE;
 8000ee4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ee8:	643b      	str	r3, [r7, #64]	; 0x40

	    if(HAL_QSPI_AutoPolling(
 8000eea:	1d3a      	adds	r2, r7, #4
 8000eec:	f107 011c 	add.w	r1, r7, #28
 8000ef0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ef4:	4807      	ldr	r0, [pc, #28]	; (8000f14 <qspi_WriteEnable+0x98>)
 8000ef6:	f002 fd41 	bl	800397c <HAL_QSPI_AutoPolling>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <qspi_WriteEnable+0x88>
	           &hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
	       != HAL_OK)
	    {
	    	qspi_error();
 8000f00:	f7ff ff72 	bl	8000de8 <qspi_error>
	    }

	    ok= 1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	657b      	str	r3, [r7, #84]	; 0x54
	    return ok;
 8000f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54

}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3758      	adds	r7, #88	; 0x58
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200001e4 	.word	0x200001e4

08000f18 <qspi_reset_memory>:

void qspi_reset_memory(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08e      	sub	sp, #56	; 0x38
 8000f1c:	af00      	add	r7, sp, #0
	//reset memory
		QSPI_CommandTypeDef s_command;

		    /* Initialize the reset enable command */
		    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f22:	61bb      	str	r3, [r7, #24]
		    s_command.Instruction       = RESET_ENABLE_CMD;
 8000f24:	2366      	movs	r3, #102	; 0x66
 8000f26:	603b      	str	r3, [r7, #0]
		    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
		    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
		    s_command.DataMode          = QSPI_DATA_NONE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
		    s_command.DummyCycles       = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
		    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
		    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	633b      	str	r3, [r7, #48]	; 0x30
		    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000f40:	2300      	movs	r3, #0
 8000f42:	637b      	str	r3, [r7, #52]	; 0x34

		    /* Send the command */
		    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000f44:	463b      	mov	r3, r7
 8000f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4811      	ldr	r0, [pc, #68]	; (8000f94 <qspi_reset_memory+0x7c>)
 8000f4e:	f002 fc25 	bl	800379c <HAL_QSPI_Command>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <qspi_reset_memory+0x44>
		       != HAL_OK)
		    {
		    	qspi_error();
 8000f58:	f7ff ff46 	bl	8000de8 <qspi_error>
		    }

		    /* Send the reset memory command */
		    s_command.Instruction = RESET_MEMORY_CMD;
 8000f5c:	2399      	movs	r3, #153	; 0x99
 8000f5e:	603b      	str	r3, [r7, #0]
		    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000f60:	463b      	mov	r3, r7
 8000f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f66:	4619      	mov	r1, r3
 8000f68:	480a      	ldr	r0, [pc, #40]	; (8000f94 <qspi_reset_memory+0x7c>)
 8000f6a:	f002 fc17 	bl	800379c <HAL_QSPI_Command>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <qspi_reset_memory+0x60>
		       != HAL_OK)
		    {
		    	qspi_error();
 8000f74:	f7ff ff38 	bl	8000de8 <qspi_error>
		    }


		    /* Configure automatic polling mode to wait the memory is ready */
		    if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000f78:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f7c:	f7ff ff40 	bl	8000e00 <AutopollingMemReady>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d001      	beq.n	8000f8a <qspi_reset_memory+0x72>
		       != 1)
		    {
		    	qspi_error();
 8000f86:	f7ff ff2f 	bl	8000de8 <qspi_error>
		    }

}
 8000f8a:	bf00      	nop
 8000f8c:	3738      	adds	r7, #56	; 0x38
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200001e4 	.word	0x200001e4

08000f98 <qspi_dummy_cycles_config>:

void qspi_dummy_cycles_config()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b090      	sub	sp, #64	; 0x40
 8000f9c:	af00      	add	r7, sp, #0
	 QSPI_CommandTypeDef s_command;
	    uint16_t            reg     = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	80fb      	strh	r3, [r7, #6]
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000fa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa6:	623b      	str	r3, [r7, #32]
	    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
	    s_command.DataMode          = QSPI_DATA_1_LINE;
 8000fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	    s_command.DummyCycles       = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
	    s_command.NbData            = 1;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	633b      	str	r3, [r7, #48]	; 0x30
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	63bb      	str	r3, [r7, #56]	; 0x38
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
	           // Dummy Cycles: (Config 3, bits 1 0)
	           // Drive Strength (50%, bits 1 1 1)
	           // Byte to write: 0b11110000 (0xF0)
	           // TODO: Probably expand Burst to maximum if that works out.

	           reg = 0xF0;
 8000fca:	23f0      	movs	r3, #240	; 0xf0
 8000fcc:	80fb      	strh	r3, [r7, #6]
	           /* Update volatile configuration register (with new dummy cycles) */
	             s_command.Instruction = WRITE_READ_PARAM_REG_CMD;
 8000fce:	23c0      	movs	r3, #192	; 0xc0
 8000fd0:	60bb      	str	r3, [r7, #8]
	             /* Configure the write volatile configuration register command */
	             if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4810      	ldr	r0, [pc, #64]	; (8001020 <qspi_dummy_cycles_config+0x88>)
 8000fde:	f002 fbdd 	bl	800379c <HAL_QSPI_Command>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <qspi_dummy_cycles_config+0x54>
	                != HAL_OK)
	             {
	            	 qspi_error();
 8000fe8:	f7ff fefe 	bl	8000de8 <qspi_error>
	             }

	             /* Transmission of the data */
	             if(HAL_QSPI_Transmit(
 8000fec:	1dbb      	adds	r3, r7, #6
 8000fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480a      	ldr	r0, [pc, #40]	; (8001020 <qspi_dummy_cycles_config+0x88>)
 8000ff6:	f002 fc2f 	bl	8003858 <HAL_QSPI_Transmit>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <qspi_dummy_cycles_config+0x6c>
	                    &hqspi, (uint8_t*)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
	                != HAL_OK)
	             {
	            	 qspi_error();
 8001000:	f7ff fef2 	bl	8000de8 <qspi_error>
	             }

	             /* Configure automatic polling mode to wait the memory is ready */
	             if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001004:	f241 3088 	movw	r0, #5000	; 0x1388
 8001008:	f7ff fefa 	bl	8000e00 <AutopollingMemReady>
 800100c:	4603      	mov	r3, r0
 800100e:	2b01      	cmp	r3, #1
 8001010:	d001      	beq.n	8001016 <qspi_dummy_cycles_config+0x7e>
	                != 1)
	             {
	            	 qspi_error();
 8001012:	f7ff fee9 	bl	8000de8 <qspi_error>
	             }
}
 8001016:	bf00      	nop
 8001018:	3740      	adds	r7, #64	; 0x40
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200001e4 	.word	0x200001e4

08001024 <qspi_quad_enable>:

void qspi_quad_enable()
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b096      	sub	sp, #88	; 0x58
 8001028:	af00      	add	r7, sp, #0
	 QSPI_CommandTypeDef     s_command;
	    QSPI_AutoPollingTypeDef s_config;
	    uint8_t                 reg = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	71fb      	strb	r3, [r7, #7]

	    /* Enable write operations */
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800102e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001032:	63bb      	str	r3, [r7, #56]	; 0x38
	    s_command.Instruction       = WRITE_STATUS_REG_CMD;
 8001034:	2301      	movs	r3, #1
 8001036:	623b      	str	r3, [r7, #32]
	    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001038:	2300      	movs	r3, #0
 800103a:	63fb      	str	r3, [r7, #60]	; 0x3c
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800103c:	2300      	movs	r3, #0
 800103e:	643b      	str	r3, [r7, #64]	; 0x40
	    s_command.DataMode          = QSPI_DATA_1_LINE;
 8001040:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001044:	647b      	str	r3, [r7, #68]	; 0x44
	    s_command.DummyCycles       = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
	    s_command.NbData            = 1;
 800104a:	2301      	movs	r3, #1
 800104c:	64bb      	str	r3, [r7, #72]	; 0x48
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	64fb      	str	r3, [r7, #76]	; 0x4c
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001052:	2300      	movs	r3, #0
 8001054:	653b      	str	r3, [r7, #80]	; 0x50
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001056:	2300      	movs	r3, #0
 8001058:	657b      	str	r3, [r7, #84]	; 0x54

	    /* Enable write operations */
	    if(qspi_WriteEnable() != 1)
 800105a:	f7ff ff0f 	bl	8000e7c <qspi_WriteEnable>
 800105e:	4603      	mov	r3, r0
 8001060:	2b01      	cmp	r3, #1
 8001062:	d001      	beq.n	8001068 <qspi_quad_enable+0x44>
	    {
	    	qspi_error();
 8001064:	f7ff fec0 	bl	8000de8 <qspi_error>
	    }

	    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001068:	f107 0320 	add.w	r3, r7, #32
 800106c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001070:	4619      	mov	r1, r3
 8001072:	4821      	ldr	r0, [pc, #132]	; (80010f8 <qspi_quad_enable+0xd4>)
 8001074:	f002 fb92 	bl	800379c <HAL_QSPI_Command>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <qspi_quad_enable+0x5e>
	       != HAL_OK)
	    {
	    	qspi_error();
 800107e:	f7ff feb3 	bl	8000de8 <qspi_error>

	    //    reg = 0;
	    //    MODIFY_REG(reg,
	    //        0xF0,
	    //        (IS25LP08D_SR_QE));
	    reg = IS25LP064A_SR_QE; // Set QE bit  to 1
 8001082:	2340      	movs	r3, #64	; 0x40
 8001084:	71fb      	strb	r3, [r7, #7]
	    /* Transmission of the data */
	    if(HAL_QSPI_Transmit(
 8001086:	1dfb      	adds	r3, r7, #7
 8001088:	f241 3288 	movw	r2, #5000	; 0x1388
 800108c:	4619      	mov	r1, r3
 800108e:	481a      	ldr	r0, [pc, #104]	; (80010f8 <qspi_quad_enable+0xd4>)
 8001090:	f002 fbe2 	bl	8003858 <HAL_QSPI_Transmit>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <qspi_quad_enable+0x7a>
	           &hqspi, (uint8_t*)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
	       != HAL_OK)
	    {
	    	qspi_error();
 800109a:	f7ff fea5 	bl	8000de8 <qspi_error>
	    /* Configure automatic polling mode to wait for write enabling */
	    //    s_config.Match           = IS25LP08D_SR_WREN | (IS25LP08D_SR_WREN << 8);
	    //    s_config.Mask            = IS25LP08D_SR_WREN | (IS25LP08D_SR_WREN << 8);
	    //    s_config.MatchMode       = QSPI_MATCH_MODE_AND;
	    //    s_config.StatusBytesSize = 2;
	    s_config.Match           = IS25LP064A_SR_QE;
 800109e:	2340      	movs	r3, #64	; 0x40
 80010a0:	60bb      	str	r3, [r7, #8]
	    s_config.Mask            = IS25LP064A_SR_QE;
 80010a2:	2340      	movs	r3, #64	; 0x40
 80010a4:	60fb      	str	r3, [r7, #12]
	    s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
	    s_config.StatusBytesSize = 1;
 80010aa:	2301      	movs	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]

	    s_config.Interval      = 0x10;
 80010ae:	2310      	movs	r3, #16
 80010b0:	613b      	str	r3, [r7, #16]
	    s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80010b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010b6:	61fb      	str	r3, [r7, #28]

	    s_command.Instruction = READ_STATUS_REG_CMD;
 80010b8:	2305      	movs	r3, #5
 80010ba:	623b      	str	r3, [r7, #32]
	    s_command.DataMode    = QSPI_DATA_1_LINE;
 80010bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010c0:	647b      	str	r3, [r7, #68]	; 0x44

	    if(HAL_QSPI_AutoPolling(
 80010c2:	f107 0208 	add.w	r2, r7, #8
 80010c6:	f107 0120 	add.w	r1, r7, #32
 80010ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80010ce:	480a      	ldr	r0, [pc, #40]	; (80010f8 <qspi_quad_enable+0xd4>)
 80010d0:	f002 fc54 	bl	800397c <HAL_QSPI_AutoPolling>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <qspi_quad_enable+0xba>
	           &hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
	       != HAL_OK)
	    {
	    	qspi_error();
 80010da:	f7ff fe85 	bl	8000de8 <qspi_error>
	    }

	    /* Configure automatic polling mode to wait the memory is ready */
	    if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80010de:	f241 3088 	movw	r0, #5000	; 0x1388
 80010e2:	f7ff fe8d 	bl	8000e00 <AutopollingMemReady>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d001      	beq.n	80010f0 <qspi_quad_enable+0xcc>
	       != 1)
	    {
	    	qspi_error();
 80010ec:	f7ff fe7c 	bl	8000de8 <qspi_error>
	    }

}
 80010f0:	bf00      	nop
 80010f2:	3758      	adds	r7, #88	; 0x58
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200001e4 	.word	0x200001e4

080010fc <qspi_enable_memory_mapped>:

void qspi_enable_memory_mapped()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b092      	sub	sp, #72	; 0x48
 8001100:	af00      	add	r7, sp, #0
	   QSPI_CommandTypeDef      s_command;
	    QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

	    /* Configure the command for the read instruction */
	    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001102:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
	    s_command.Instruction     = QUAD_INOUT_FAST_READ_CMD;
 8001108:	23eb      	movs	r3, #235	; 0xeb
 800110a:	60fb      	str	r3, [r7, #12]
	    s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 800110c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001110:	62bb      	str	r3, [r7, #40]	; 0x28
	    s_command.AddressSize     = QSPI_ADDRESS_24_BITS;
 8001112:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001116:	61bb      	str	r3, [r7, #24]
	    //    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
	    //s_command.DummyCycles       = IS25LP080D_DUMMY_CYCLES_READ_QUAD;
	    s_command.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 8001118:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
	    s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
	    s_command.AlternateBytes     = 0x000000A0;
 8001122:	23a0      	movs	r3, #160	; 0xa0
 8001124:	617b      	str	r3, [r7, #20]
	    s_command.DummyCycles        = 6;
 8001126:	2306      	movs	r3, #6
 8001128:	623b      	str	r3, [r7, #32]
	    s_command.DdrMode            = QSPI_DDR_MODE_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	63bb      	str	r3, [r7, #56]	; 0x38
	    s_command.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 800112e:	2300      	movs	r3, #0
 8001130:	63fb      	str	r3, [r7, #60]	; 0x3c
	    //s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
	    s_command.SIOOMode = QSPI_SIOO_INST_ONLY_FIRST_CMD;
 8001132:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001136:	643b      	str	r3, [r7, #64]	; 0x40
	    s_command.DataMode = QSPI_DATA_4_LINES;
 8001138:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800113c:	633b      	str	r3, [r7, #48]	; 0x30

	    /* Configure the memory mapped mode */
	    s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
	    s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
	    uint32_t qspiresult = HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg);
 8001146:	1d3a      	adds	r2, r7, #4
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	4619      	mov	r1, r3
 800114e:	4808      	ldr	r0, [pc, #32]	; (8001170 <qspi_enable_memory_mapped+0x74>)
 8001150:	f002 fc8b 	bl	8003a6a <HAL_QSPI_MemoryMapped>
 8001154:	4603      	mov	r3, r0
 8001156:	647b      	str	r3, [r7, #68]	; 0x44
	    if(qspiresult
 8001158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <qspi_enable_memory_mapped+0x66>
	       != HAL_OK)
	    {
	    	qspi_error();
 800115e:	f7ff fe43 	bl	8000de8 <qspi_error>
	    }
	    memory_already_mapped = 1;
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <qspi_enable_memory_mapped+0x78>)
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
}
 8001168:	bf00      	nop
 800116a:	3748      	adds	r7, #72	; 0x48
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200001e4 	.word	0x200001e4
 8001174:	200001e0 	.word	0x200001e0

08001178 <qspi_initialize>:

void qspi_initialize(uint8_t mode)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	HAL_QSPI_DeInit(&hqspi);
 8001182:	480c      	ldr	r0, [pc, #48]	; (80011b4 <qspi_initialize+0x3c>)
 8001184:	f002 faea 	bl	800375c <HAL_QSPI_DeInit>
	HAL_QSPI_Init(&hqspi);
 8001188:	480a      	ldr	r0, [pc, #40]	; (80011b4 <qspi_initialize+0x3c>)
 800118a:	f002 fa73 	bl	8003674 <HAL_QSPI_Init>

	qspi_reset_memory();
 800118e:	f7ff fec3 	bl	8000f18 <qspi_reset_memory>
	qspi_dummy_cycles_config();
 8001192:	f7ff ff01 	bl	8000f98 <qspi_dummy_cycles_config>
	qspi_quad_enable();
 8001196:	f7ff ff45 	bl	8001024 <qspi_quad_enable>
	if (mode == MEMORY_MAPPED)
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d102      	bne.n	80011a6 <qspi_initialize+0x2e>
	{
		qspi_enable_memory_mapped();
 80011a0:	f7ff ffac 	bl	80010fc <qspi_enable_memory_mapped>
	}
	else
	{
		memory_already_mapped = 0;
	}
}
 80011a4:	e002      	b.n	80011ac <qspi_initialize+0x34>
		memory_already_mapped = 0;
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <qspi_initialize+0x40>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200001e4 	.word	0x200001e4
 80011b8:	200001e0 	.word	0x200001e0

080011bc <qspi_SetMode>:

void qspi_SetMode(uint8_t mode)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
	if (mode == INDIRECT_POLLING)
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d004      	beq.n	80011d6 <qspi_SetMode+0x1a>
	{
		//qspi_initialize(INDIRECT_POLLING);
	}
	else if (mode == MEMORY_MAPPED)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d101      	bne.n	80011d6 <qspi_SetMode+0x1a>
	{
		qspi_enable_memory_mapped();
 80011d2:	f7ff ff93 	bl	80010fc <qspi_enable_memory_mapped>
	}

}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <qpsi_EraseSector>:

int qpsi_EraseSector(uint32_t address)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b092      	sub	sp, #72	; 0x48
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
    int ok = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t             use_qpi = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    QSPI_CommandTypeDef s_command;
    if(use_qpi)
 80011f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d008      	beq.n	800120c <qpsi_EraseSector+0x2c>
    {
        s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 80011fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011fe:	623b      	str	r3, [r7, #32]
        s_command.Instruction     = SECTOR_ERASE_QPI_CMD;
 8001200:	2320      	movs	r3, #32
 8001202:	60bb      	str	r3, [r7, #8]
        s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 8001204:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
 800120a:	e007      	b.n	800121c <qpsi_EraseSector+0x3c>
    }
    else
    {
        s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800120c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001210:	623b      	str	r3, [r7, #32]
        s_command.Instruction     = SECTOR_ERASE_CMD;
 8001212:	23d7      	movs	r3, #215	; 0xd7
 8001214:	60bb      	str	r3, [r7, #8]
        s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 8001216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 800121c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001220:	617b      	str	r3, [r7, #20]
    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001222:	2300      	movs	r3, #0
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.DataMode          = QSPI_DATA_NONE;
 8001226:	2300      	movs	r3, #0
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DummyCycles       = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    s_command.NbData            = 1;
 800122e:	2301      	movs	r3, #1
 8001230:	633b      	str	r3, [r7, #48]	; 0x30
    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	637b      	str	r3, [r7, #52]	; 0x34
    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001236:	2300      	movs	r3, #0
 8001238:	63bb      	str	r3, [r7, #56]	; 0x38
    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800123a:	2300      	movs	r3, #0
 800123c:	63fb      	str	r3, [r7, #60]	; 0x3c
    s_command.Address           = address;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	60fb      	str	r3, [r7, #12]


    // Erasing takes a long time anyway, so not much point trying to
    // minimize reinitializations
    qspi_SetMode(INDIRECT_POLLING);
 8001242:	2000      	movs	r0, #0
 8001244:	f7ff ffba 	bl	80011bc <qspi_SetMode>

    if(qspi_WriteEnable() != 1)
 8001248:	f7ff fe18 	bl	8000e7c <qspi_WriteEnable>
 800124c:	4603      	mov	r3, r0
 800124e:	2b01      	cmp	r3, #1
 8001250:	d001      	beq.n	8001256 <qpsi_EraseSector+0x76>
    {
    	qspi_error();
 8001252:	f7ff fdc9 	bl	8000de8 <qspi_error>
    }
    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	f241 3288 	movw	r2, #5000	; 0x1388
 800125e:	4619      	mov	r1, r3
 8001260:	480b      	ldr	r0, [pc, #44]	; (8001290 <qpsi_EraseSector+0xb0>)
 8001262:	f002 fa9b 	bl	800379c <HAL_QSPI_Command>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <qpsi_EraseSector+0x90>
       != HAL_OK)
    {
    	qspi_error();
 800126c:	f7ff fdbc 	bl	8000de8 <qspi_error>
    }
    if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001270:	f241 3088 	movw	r0, #5000	; 0x1388
 8001274:	f7ff fdc4 	bl	8000e00 <AutopollingMemReady>
 8001278:	4603      	mov	r3, r0
 800127a:	2b01      	cmp	r3, #1
 800127c:	d001      	beq.n	8001282 <qpsi_EraseSector+0xa2>
       != 1)
    {
    	qspi_error();
 800127e:	f7ff fdb3 	bl	8000de8 <qspi_error>
    }

    //qspi_SetMode(MEMORY_MAPPED);

    ok= 1;
 8001282:	2301      	movs	r3, #1
 8001284:	647b      	str	r3, [r7, #68]	; 0x44
    return ok;
 8001286:	6c7b      	ldr	r3, [r7, #68]	; 0x44

}
 8001288:	4618      	mov	r0, r3
 800128a:	3748      	adds	r7, #72	; 0x48
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200001e4 	.word	0x200001e4

08001294 <qspi_Erase>:


void qspi_Erase(uint32_t start_addr, uint32_t end_addr)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
    uint32_t block_addr;
    uint32_t block_size = IS25LP064A_SECTOR_SIZE; // 4kB blocks for now.
 800129e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a2:	60fb      	str	r3, [r7, #12]
    // 64kB chunks for now.
    start_addr = start_addr - (start_addr % block_size);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80012ac:	68f9      	ldr	r1, [r7, #12]
 80012ae:	fb01 f202 	mul.w	r2, r1, r2
 80012b2:	1a9b      	subs	r3, r3, r2
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	607b      	str	r3, [r7, #4]
    while(end_addr > start_addr)
 80012ba:	e00f      	b.n	80012dc <qspi_Erase+0x48>
    {
        block_addr = start_addr & 0x0FFFFFFF;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80012c2:	60bb      	str	r3, [r7, #8]
        if(qpsi_EraseSector(block_addr) != 1)
 80012c4:	68b8      	ldr	r0, [r7, #8]
 80012c6:	f7ff ff8b 	bl	80011e0 <qpsi_EraseSector>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d001      	beq.n	80012d4 <qspi_Erase+0x40>
        {
        	qspi_error();
 80012d0:	f7ff fd8a 	bl	8000de8 <qspi_error>
        }
        start_addr += block_size;
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4413      	add	r3, r2
 80012da:	607b      	str	r3, [r7, #4]
    while(end_addr > start_addr)
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d8eb      	bhi.n	80012bc <qspi_Erase+0x28>
    }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <qspi_WritePage>:

int qspi_WritePage(uint32_t address, uint32_t size, uint8_t* buffer, uint8_t     reset_mode)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b094      	sub	sp, #80	; 0x50
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	70fb      	strb	r3, [r7, #3]
	  //RETURN_IF_ERR(CheckProgramMemory());
	int ok = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	64fb      	str	r3, [r7, #76]	; 0x4c

	qspi_SetMode(INDIRECT_POLLING);
 8001302:	2000      	movs	r0, #0
 8001304:	f7ff ff5a 	bl	80011bc <qspi_SetMode>

	    QSPI_CommandTypeDef s_command;
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
	    s_command.Instruction       = PAGE_PROG_CMD;
 800130e:	2302      	movs	r3, #2
 8001310:	617b      	str	r3, [r7, #20]
	    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8001312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001316:	633b      	str	r3, [r7, #48]	; 0x30
	    s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800131c:	623b      	str	r3, [r7, #32]
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800131e:	2300      	movs	r3, #0
 8001320:	637b      	str	r3, [r7, #52]	; 0x34
	    s_command.DataMode          = QSPI_DATA_1_LINE;
 8001322:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001326:	63bb      	str	r3, [r7, #56]	; 0x38
	    s_command.DummyCycles       = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
	    s_command.NbData            = size <= 256 ? size : 256;
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001332:	bf28      	it	cs
 8001334:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8001338:	63fb      	str	r3, [r7, #60]	; 0x3c
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	643b      	str	r3, [r7, #64]	; 0x40
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800133e:	2300      	movs	r3, #0
 8001340:	647b      	str	r3, [r7, #68]	; 0x44
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001342:	2300      	movs	r3, #0
 8001344:	64bb      	str	r3, [r7, #72]	; 0x48
	    s_command.Address           = address;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	61bb      	str	r3, [r7, #24]
	    if(qspi_WriteEnable() != 1)
 800134a:	f7ff fd97 	bl	8000e7c <qspi_WriteEnable>
 800134e:	4603      	mov	r3, r0
 8001350:	2b01      	cmp	r3, #1
 8001352:	d001      	beq.n	8001358 <qspi_WritePage+0x68>
	    {
	    	qspi_error();
 8001354:	f7ff fd48 	bl	8000de8 <qspi_error>
	    }
	    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001360:	4619      	mov	r1, r3
 8001362:	4814      	ldr	r0, [pc, #80]	; (80013b4 <qspi_WritePage+0xc4>)
 8001364:	f002 fa1a 	bl	800379c <HAL_QSPI_Command>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <qspi_WritePage+0x82>
	       != HAL_OK)
	    {
	    	qspi_error();
 800136e:	f7ff fd3b 	bl	8000de8 <qspi_error>
	    }
	    if(HAL_QSPI_Transmit(
 8001372:	f241 3288 	movw	r2, #5000	; 0x1388
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	480e      	ldr	r0, [pc, #56]	; (80013b4 <qspi_WritePage+0xc4>)
 800137a:	f002 fa6d 	bl	8003858 <HAL_QSPI_Transmit>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <qspi_WritePage+0x98>
	           &hqspi, (uint8_t*)buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
	       != HAL_OK)
	    {
	    	qspi_error();
 8001384:	f7ff fd30 	bl	8000de8 <qspi_error>
	    }
	    if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001388:	f241 3088 	movw	r0, #5000	; 0x1388
 800138c:	f7ff fd38 	bl	8000e00 <AutopollingMemReady>
 8001390:	4603      	mov	r3, r0
 8001392:	2b01      	cmp	r3, #1
 8001394:	d001      	beq.n	800139a <qspi_WritePage+0xaa>
	       != 1)
	    {
	    	qspi_error();
 8001396:	f7ff fd27 	bl	8000de8 <qspi_error>
	    }

	    if(reset_mode)
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <qspi_WritePage+0xb6>
	    	qspi_SetMode(MEMORY_MAPPED);
 80013a0:	2001      	movs	r0, #1
 80013a2:	f7ff ff0b 	bl	80011bc <qspi_SetMode>

	    ok= 1;
 80013a6:	2301      	movs	r3, #1
 80013a8:	64fb      	str	r3, [r7, #76]	; 0x4c
	    return ok;
 80013aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3750      	adds	r7, #80	; 0x50
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200001e4 	.word	0x200001e4

080013b8 <qspi_Write>:

void qspi_Write(uint32_t address, uint32_t size, uint8_t* buffer)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	; 0x30
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
	 uint32_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013c8:	2300      	movs	r3, #0
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
	    uint32_t QSPI_DataNum    = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
	    uint32_t flash_page_size = IS25LP064A_PAGE_SIZE;
 80013dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e0:	617b      	str	r3, [r7, #20]
	    address                  = address & 0x0FFFFFFF;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80013e8:	60fb      	str	r3, [r7, #12]
	    Addr                     = address % flash_page_size;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80013f2:	6979      	ldr	r1, [r7, #20]
 80013f4:	fb01 f202 	mul.w	r2, r1, r2
 80013f8:	1a9b      	subs	r3, r3, r2
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
	    count                    = flash_page_size - Addr;
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	623b      	str	r3, [r7, #32]
	    NumOfPage                = size / flash_page_size;
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	fbb2 f3f3 	udiv	r3, r2, r3
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
	    NumOfSingle              = size % flash_page_size;
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	fbb3 f2f2 	udiv	r2, r3, r2
 8001416:	6979      	ldr	r1, [r7, #20]
 8001418:	fb01 f202 	mul.w	r2, r1, r2
 800141c:	1a9b      	subs	r3, r3, r2
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28

	    if(Addr == 0) /*!< Address is QSPI_PAGESIZE aligned  */
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	2b00      	cmp	r3, #0
 8001424:	d12c      	bne.n	8001480 <qspi_Write+0xc8>
	    {
	        if(NumOfPage == 0) /*!< NumByteToWrite < QSPI_PAGESIZE */
 8001426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001428:	2b00      	cmp	r3, #0
 800142a:	d118      	bne.n	800145e <qspi_Write+0xa6>
	        {
	            QSPI_DataNum = size;
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	61bb      	str	r3, [r7, #24]
	            qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8001430:	2300      	movs	r3, #0
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	69b9      	ldr	r1, [r7, #24]
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f7ff ff5a 	bl	80012f0 <qspi_WritePage>
 800143c:	e090      	b.n	8001560 <qspi_Write+0x1a8>
	        }
	        else /*!< Size > QSPI_PAGESIZE */
	        {
	            while(NumOfPage--)
	            {
	                QSPI_DataNum = flash_page_size;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	61bb      	str	r3, [r7, #24]
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8001442:	2300      	movs	r3, #0
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	69b9      	ldr	r1, [r7, #24]
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f7ff ff51 	bl	80012f0 <qspi_WritePage>
	                address += flash_page_size;
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
	                buffer += flash_page_size;
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	4413      	add	r3, r2
 800145c:	607b      	str	r3, [r7, #4]
	            while(NumOfPage--)
 800145e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001460:	1e5a      	subs	r2, r3, #1
 8001462:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1ea      	bne.n	800143e <qspi_Write+0x86>
	            }

	            QSPI_DataNum = NumOfSingle;
 8001468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146a:	61bb      	str	r3, [r7, #24]
	            if(QSPI_DataNum > 0)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d076      	beq.n	8001560 <qspi_Write+0x1a8>
	            	qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8001472:	2300      	movs	r3, #0
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	69b9      	ldr	r1, [r7, #24]
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f7ff ff39 	bl	80012f0 <qspi_WritePage>
 800147e:	e06f      	b.n	8001560 <qspi_Write+0x1a8>
	        }
	    }
	    else /*!< Address is not QSPI_PAGESIZE aligned  */
	    {
	        if(NumOfPage == 0) /*!< Size < QSPI_PAGESIZE */
 8001480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001482:	2b00      	cmp	r3, #0
 8001484:	d129      	bne.n	80014da <qspi_Write+0x122>
	        {
	            if(NumOfSingle > count) /*!< (Size + Address) > QSPI_PAGESIZE */
 8001486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	429a      	cmp	r2, r3
 800148c:	d91c      	bls.n	80014c8 <qspi_Write+0x110>
	            {
	                temp         = NumOfSingle - count;
 800148e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	61fb      	str	r3, [r7, #28]
	                QSPI_DataNum = count;
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	61bb      	str	r3, [r7, #24]
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 800149a:	2300      	movs	r3, #0
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	69b9      	ldr	r1, [r7, #24]
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f7ff ff25 	bl	80012f0 <qspi_WritePage>
	                address += count;
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
	                buffer += count;
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	4413      	add	r3, r2
 80014b4:	607b      	str	r3, [r7, #4]
	                QSPI_DataNum = temp;
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	61bb      	str	r3, [r7, #24]
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 80014ba:	2300      	movs	r3, #0
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	69b9      	ldr	r1, [r7, #24]
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f7ff ff15 	bl	80012f0 <qspi_WritePage>
 80014c6:	e04b      	b.n	8001560 <qspi_Write+0x1a8>
	            }
	            else
	            {
	                QSPI_DataNum = size;
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	61bb      	str	r3, [r7, #24]
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 80014cc:	2300      	movs	r3, #0
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	69b9      	ldr	r1, [r7, #24]
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f7ff ff0c 	bl	80012f0 <qspi_WritePage>
 80014d8:	e042      	b.n	8001560 <qspi_Write+0x1a8>
	            }
	        }
	        else /*!< Size > QSPI_PAGESIZE */
	        {
	            size -= count;
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	60bb      	str	r3, [r7, #8]
	            NumOfPage    = size / flash_page_size;
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	            NumOfSingle  = size % flash_page_size;
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80014f4:	6979      	ldr	r1, [r7, #20]
 80014f6:	fb01 f202 	mul.w	r2, r1, r2
 80014fa:	1a9b      	subs	r3, r3, r2
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
	            QSPI_DataNum = count;
 80014fe:	6a3b      	ldr	r3, [r7, #32]
 8001500:	61bb      	str	r3, [r7, #24]
	            qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8001502:	2300      	movs	r3, #0
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	69b9      	ldr	r1, [r7, #24]
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f7ff fef1 	bl	80012f0 <qspi_WritePage>
	            address += count;
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	6a3b      	ldr	r3, [r7, #32]
 8001512:	4413      	add	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
	            buffer += count;
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	4413      	add	r3, r2
 800151c:	607b      	str	r3, [r7, #4]

	            while(NumOfPage--)
 800151e:	e00f      	b.n	8001540 <qspi_Write+0x188>
	            {
	                QSPI_DataNum = flash_page_size;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	61bb      	str	r3, [r7, #24]
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8001524:	2300      	movs	r3, #0
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	69b9      	ldr	r1, [r7, #24]
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f7ff fee0 	bl	80012f0 <qspi_WritePage>
	                address += flash_page_size;
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	4413      	add	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]
	                buffer += flash_page_size;
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	4413      	add	r3, r2
 800153e:	607b      	str	r3, [r7, #4]
	            while(NumOfPage--)
 8001540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001542:	1e5a      	subs	r2, r3, #1
 8001544:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1ea      	bne.n	8001520 <qspi_Write+0x168>
	            }

	            if(NumOfSingle != 0)
 800154a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154c:	2b00      	cmp	r3, #0
 800154e:	d007      	beq.n	8001560 <qspi_Write+0x1a8>
	            {
	                QSPI_DataNum = NumOfSingle;
 8001550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001552:	61bb      	str	r3, [r7, #24]
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8001554:	2300      	movs	r3, #0
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	69b9      	ldr	r1, [r7, #24]
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f7ff fec8 	bl	80012f0 <qspi_WritePage>
	            }
	        }
	    }

	    qspi_SetMode(MEMORY_MAPPED);
 8001560:	2001      	movs	r0, #1
 8001562:	f7ff fe2b 	bl	80011bc <qspi_SetMode>


}
 8001566:	bf00      	nop
 8001568:	3730      	adds	r7, #48	; 0x30
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <FS_FileOperations>:



static void FS_FileOperations(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8001576:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800157a:	f000 fd2b 	bl	8001fd4 <HAL_Delay>
	disk_initialize(0);
 800157e:	2000      	movs	r0, #0
 8001580:	f009 f848 	bl	800a614 <disk_initialize>
    disk_status(0);
 8001584:	2000      	movs	r0, #0
 8001586:	f009 f82b 	bl	800a5e0 <disk_status>
    //{
      //ShowDiskStatus(status);
    //}


	if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 800158a:	2201      	movs	r2, #1
 800158c:	4924      	ldr	r1, [pc, #144]	; (8001620 <FS_FileOperations+0xb0>)
 800158e:	4825      	ldr	r0, [pc, #148]	; (8001624 <FS_FileOperations+0xb4>)
 8001590:	f00b fb9a 	bl	800ccc8 <f_mount>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d13d      	bne.n	8001616 <FS_FileOperations+0xa6>

		FRESULT res;


		//search for .bin firmware files
		res = f_findfirst(&dir, &fno, SDPath, "Electrosteel_Daisy_Audio.bin");
 800159a:	4b23      	ldr	r3, [pc, #140]	; (8001628 <FS_FileOperations+0xb8>)
 800159c:	4a20      	ldr	r2, [pc, #128]	; (8001620 <FS_FileOperations+0xb0>)
 800159e:	4923      	ldr	r1, [pc, #140]	; (800162c <FS_FileOperations+0xbc>)
 80015a0:	4823      	ldr	r0, [pc, #140]	; (8001630 <FS_FileOperations+0xc0>)
 80015a2:	f00c f86b 	bl	800d67c <f_findfirst>
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]

		/* Repeat while an item is found */
		if (fno.fname[0])
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <FS_FileOperations+0xbc>)
 80015ac:	7d9b      	ldrb	r3, [r3, #22]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d029      	beq.n	8001606 <FS_FileOperations+0x96>
		{
		  if(res == FR_OK)
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d126      	bne.n	8001606 <FS_FileOperations+0x96>
		  {
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 80015b8:	2211      	movs	r2, #17
 80015ba:	491e      	ldr	r1, [pc, #120]	; (8001634 <FS_FileOperations+0xc4>)
 80015bc:	481e      	ldr	r0, [pc, #120]	; (8001638 <FS_FileOperations+0xc8>)
 80015be:	f00b fbc9 	bl	800cd54 <f_open>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d11e      	bne.n	8001606 <FS_FileOperations+0x96>
				{

					//write to local SRAM, then copy that to QSPI flash for more permanent storage
					f_read(&SDFile, &tempBinaryBuffer, f_size(&SDFile), &bytesRead);
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <FS_FileOperations+0xc8>)
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <FS_FileOperations+0xcc>)
 80015ce:	491c      	ldr	r1, [pc, #112]	; (8001640 <FS_FileOperations+0xd0>)
 80015d0:	4819      	ldr	r0, [pc, #100]	; (8001638 <FS_FileOperations+0xc8>)
 80015d2:	f00b fd7a 	bl	800d0ca <f_read>



					if (bytesRead < 262140)
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <FS_FileOperations+0xcc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a1a      	ldr	r2, [pc, #104]	; (8001644 <FS_FileOperations+0xd4>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d80f      	bhi.n	8001600 <FS_FileOperations+0x90>
					{
						qspi_Erase(QSPI_START, QSPI_START+262140);
 80015e0:	4919      	ldr	r1, [pc, #100]	; (8001648 <FS_FileOperations+0xd8>)
 80015e2:	f04f 4010 	mov.w	r0, #2415919104	; 0x90000000
 80015e6:	f7ff fe55 	bl	8001294 <qspi_Erase>
						qspi_Write(QSPI_START, 262140,(uint8_t*)tempBinaryBuffer);
 80015ea:	4a15      	ldr	r2, [pc, #84]	; (8001640 <FS_FileOperations+0xd0>)
 80015ec:	4917      	ldr	r1, [pc, #92]	; (800164c <FS_FileOperations+0xdc>)
 80015ee:	f04f 4010 	mov.w	r0, #2415919104	; 0x90000000
 80015f2:	f7ff fee1 	bl	80013b8 <qspi_Write>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80015f6:	2201      	movs	r2, #1
 80015f8:	2180      	movs	r1, #128	; 0x80
 80015fa:	4815      	ldr	r0, [pc, #84]	; (8001650 <FS_FileOperations+0xe0>)
 80015fc:	f001 f9c4 	bl	8002988 <HAL_GPIO_WritePin>
					}

					f_close(&SDFile);
 8001600:	480d      	ldr	r0, [pc, #52]	; (8001638 <FS_FileOperations+0xc8>)
 8001602:	f00b ff13 	bl	800d42c <f_close>
			}


		  }

		f_closedir(&dir);
 8001606:	480a      	ldr	r0, [pc, #40]	; (8001630 <FS_FileOperations+0xc0>)
 8001608:	f00b ffad 	bl	800d566 <f_closedir>
		f_mount(0, "", 0); //unmount
 800160c:	2200      	movs	r2, #0
 800160e:	4911      	ldr	r1, [pc, #68]	; (8001654 <FS_FileOperations+0xe4>)
 8001610:	2000      	movs	r0, #0
 8001612:	f00b fb59 	bl	800ccc8 <f_mount>
	}


}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200002b4 	.word	0x200002b4
 8001624:	200002b8 	.word	0x200002b8
 8001628:	0800d954 	.word	0x0800d954
 800162c:	20000084 	.word	0x20000084
 8001630:	2000019c 	.word	0x2000019c
 8001634:	2000009a 	.word	0x2000009a
 8001638:	200004ec 	.word	0x200004ec
 800163c:	200001d4 	.word	0x200001d4
 8001640:	24000000 	.word	0x24000000
 8001644:	0003fffb 	.word	0x0003fffb
 8001648:	9003fffc 	.word	0x9003fffc
 800164c:	0003fffc 	.word	0x0003fffc
 8001650:	58020800 	.word	0x58020800
 8001654:	0800d974 	.word	0x0800d974

08001658 <HAL_GPIO_EXTI_Callback>:


// EXTI Line12 External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	80fb      	strh	r3, [r7, #6]
	if (boardNumber != 0)
 8001662:	4b45      	ldr	r3, [pc, #276]	; (8001778 <HAL_GPIO_EXTI_Callback+0x120>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 8082 	beq.w	8001770 <HAL_GPIO_EXTI_Callback+0x118>
	{
		if(GPIO_Pin == GPIO_PIN_12) // If The INT Source Is EXTI Line12
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001672:	d17d      	bne.n	8001770 <HAL_GPIO_EXTI_Callback+0x118>
		{
			MX_I2C1_Init();
 8001674:	f7fe ffbc 	bl	80005f0 <MX_I2C1_Init>
			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) ==  1)
 8001678:	bf00      	nop
 800167a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800167e:	483f      	ldr	r0, [pc, #252]	; (800177c <HAL_GPIO_EXTI_Callback+0x124>)
 8001680:	f001 f96a 	bl	8002958 <HAL_GPIO_ReadPin>
 8001684:	4603      	mov	r3, r0
 8001686:	2b01      	cmp	r3, #1
 8001688:	d0f7      	beq.n	800167a <HAL_GPIO_EXTI_Callback+0x22>
			{
				;//wait for pin to go back low
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800168a:	2201      	movs	r2, #1
 800168c:	2180      	movs	r1, #128	; 0x80
 800168e:	483c      	ldr	r0, [pc, #240]	; (8001780 <HAL_GPIO_EXTI_Callback+0x128>)
 8001690:	f001 f97a 	bl	8002988 <HAL_GPIO_WritePin>
			HAL_I2C_Slave_Receive(&hi2c1, tempBinaryBuffer, 65535,
 8001694:	f242 7310 	movw	r3, #10000	; 0x2710
 8001698:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800169c:	4939      	ldr	r1, [pc, #228]	; (8001784 <HAL_GPIO_EXTI_Callback+0x12c>)
 800169e:	483a      	ldr	r0, [pc, #232]	; (8001788 <HAL_GPIO_EXTI_Callback+0x130>)
 80016a0:	f001 fb74 	bl	8002d8c <HAL_I2C_Slave_Receive>
					10000);
			HAL_Delay(180);
 80016a4:	20b4      	movs	r0, #180	; 0xb4
 80016a6:	f000 fc95 	bl	8001fd4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2180      	movs	r1, #128	; 0x80
 80016ae:	4834      	ldr	r0, [pc, #208]	; (8001780 <HAL_GPIO_EXTI_Callback+0x128>)
 80016b0:	f001 f96a 	bl	8002988 <HAL_GPIO_WritePin>
			HAL_I2C_Slave_Receive(&hi2c1, tempBinaryBuffer+65535, 65535,
 80016b4:	4935      	ldr	r1, [pc, #212]	; (800178c <HAL_GPIO_EXTI_Callback+0x134>)
 80016b6:	f242 7310 	movw	r3, #10000	; 0x2710
 80016ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016be:	4832      	ldr	r0, [pc, #200]	; (8001788 <HAL_GPIO_EXTI_Callback+0x130>)
 80016c0:	f001 fb64 	bl	8002d8c <HAL_I2C_Slave_Receive>
					10000);
			HAL_Delay(180);
 80016c4:	20b4      	movs	r0, #180	; 0xb4
 80016c6:	f000 fc85 	bl	8001fd4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80016ca:	2201      	movs	r2, #1
 80016cc:	2180      	movs	r1, #128	; 0x80
 80016ce:	482c      	ldr	r0, [pc, #176]	; (8001780 <HAL_GPIO_EXTI_Callback+0x128>)
 80016d0:	f001 f95a 	bl	8002988 <HAL_GPIO_WritePin>
			HAL_I2C_Slave_Receive(&hi2c1, tempBinaryBuffer+131070, 65535,
 80016d4:	492e      	ldr	r1, [pc, #184]	; (8001790 <HAL_GPIO_EXTI_Callback+0x138>)
 80016d6:	f242 7310 	movw	r3, #10000	; 0x2710
 80016da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016de:	482a      	ldr	r0, [pc, #168]	; (8001788 <HAL_GPIO_EXTI_Callback+0x130>)
 80016e0:	f001 fb54 	bl	8002d8c <HAL_I2C_Slave_Receive>
					10000);
			HAL_Delay(180);
 80016e4:	20b4      	movs	r0, #180	; 0xb4
 80016e6:	f000 fc75 	bl	8001fd4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2180      	movs	r1, #128	; 0x80
 80016ee:	4824      	ldr	r0, [pc, #144]	; (8001780 <HAL_GPIO_EXTI_Callback+0x128>)
 80016f0:	f001 f94a 	bl	8002988 <HAL_GPIO_WritePin>
			HAL_I2C_Slave_Receive(&hi2c1, tempBinaryBuffer+196605, 65535,
 80016f4:	4927      	ldr	r1, [pc, #156]	; (8001794 <HAL_GPIO_EXTI_Callback+0x13c>)
 80016f6:	f242 7310 	movw	r3, #10000	; 0x2710
 80016fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016fe:	4822      	ldr	r0, [pc, #136]	; (8001788 <HAL_GPIO_EXTI_Callback+0x130>)
 8001700:	f001 fb44 	bl	8002d8c <HAL_I2C_Slave_Receive>
					10000);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001704:	2201      	movs	r2, #1
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	481d      	ldr	r0, [pc, #116]	; (8001780 <HAL_GPIO_EXTI_Callback+0x128>)
 800170a:	f001 f93d 	bl	8002988 <HAL_GPIO_WritePin>


			qspi_Erase(QSPI_START, QSPI_START+262140);
 800170e:	4922      	ldr	r1, [pc, #136]	; (8001798 <HAL_GPIO_EXTI_Callback+0x140>)
 8001710:	f04f 4010 	mov.w	r0, #2415919104	; 0x90000000
 8001714:	f7ff fdbe 	bl	8001294 <qspi_Erase>
			qspi_Write(QSPI_START, 262140,(uint8_t*)tempBinaryBuffer);
 8001718:	4a1a      	ldr	r2, [pc, #104]	; (8001784 <HAL_GPIO_EXTI_Callback+0x12c>)
 800171a:	4920      	ldr	r1, [pc, #128]	; (800179c <HAL_GPIO_EXTI_Callback+0x144>)
 800171c:	f04f 4010 	mov.w	r0, #2415919104	; 0x90000000
 8001720:	f7ff fe4a 	bl	80013b8 <qspi_Write>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	2180      	movs	r1, #128	; 0x80
 8001728:	4815      	ldr	r0, [pc, #84]	; (8001780 <HAL_GPIO_EXTI_Callback+0x128>)
 800172a:	f001 f92d 	bl	8002988 <HAL_GPIO_WritePin>
			  if (!memory_already_mapped)
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x148>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_GPIO_EXTI_Callback+0xe4>
			  {
				  qspi_enable_memory_mapped();
 8001738:	f7ff fce0 	bl	80010fc <qspi_enable_memory_mapped>

			  }
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800173c:	2201      	movs	r2, #1
 800173e:	2180      	movs	r1, #128	; 0x80
 8001740:	480e      	ldr	r0, [pc, #56]	; (800177c <HAL_GPIO_EXTI_Callback+0x124>)
 8001742:	f001 f921 	bl	8002988 <HAL_GPIO_WritePin>

    	  HAL_I2C_DeInit(&hi2c1);
 8001746:	4810      	ldr	r0, [pc, #64]	; (8001788 <HAL_GPIO_EXTI_Callback+0x130>)
 8001748:	f001 f9fc 	bl	8002b44 <HAL_I2C_DeInit>
	 	  HAL_QSPI_MspDeInit(&hqspi);
 800174c:	4815      	ldr	r0, [pc, #84]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x14c>)
 800174e:	f000 f941 	bl	80019d4 <HAL_QSPI_MspDeInit>
		  HAL_RCC_DeInit();
 8001752:	f002 fbb7 	bl	8003ec4 <HAL_RCC_DeInit>
		  HAL_DeInit();
 8001756:	f000 fb81 	bl	8001e5c <HAL_DeInit>
  	 	  SysTick->CTRL = 0;
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x150>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
  	 	  SysTick->LOAD = 0;
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001762:	2200      	movs	r2, #0
 8001764:	605a      	str	r2, [r3, #4]
  	 	  SysTick->VAL  = 0;
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  	 	  HAL_NVIC_SystemReset();
 800176c:	f000 fdad 	bl	80022ca <HAL_NVIC_SystemReset>

		}
	}
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000000 	.word	0x20000000
 800177c:	58020400 	.word	0x58020400
 8001780:	58020800 	.word	0x58020800
 8001784:	24000000 	.word	0x24000000
 8001788:	20000030 	.word	0x20000030
 800178c:	2400ffff 	.word	0x2400ffff
 8001790:	2401fffe 	.word	0x2401fffe
 8001794:	2402fffd 	.word	0x2402fffd
 8001798:	9003fffc 	.word	0x9003fffc
 800179c:	0003fffc 	.word	0x0003fffc
 80017a0:	200001e0 	.word	0x200001e0
 80017a4:	200001e4 	.word	0x200001e4
 80017a8:	e000e010 	.word	0xe000e010

080017ac <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80017b2:	463b      	mov	r3, r7
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80017be:	f000 fd95 	bl	80022ec <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80017c2:	2301      	movs	r3, #1
 80017c4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80017ca:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80017ce:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 80017d0:	2316      	movs	r3, #22
 80017d2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80017d8:	2300      	movs	r3, #0
 80017da:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80017dc:	2303      	movs	r3, #3
 80017de:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80017f0:	463b      	mov	r3, r7
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fdb2 	bl	800235c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80017f8:	2004      	movs	r0, #4
 80017fa:	f000 fd8f 	bl	800231c <HAL_MPU_Enable>

}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800180a:	b672      	cpsid	i
}
 800180c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800180e:	e7fe      	b.n	800180e <Error_Handler+0x8>

08001810 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MX_QUADSPI_Init+0x50>)
 8001816:	4a13      	ldr	r2, [pc, #76]	; (8001864 <MX_QUADSPI_Init+0x54>)
 8001818:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_QUADSPI_Init+0x50>)
 800181c:	2201      	movs	r2, #1
 800181e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_QUADSPI_Init+0x50>)
 8001822:	2201      	movs	r2, #1
 8001824:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_QUADSPI_Init+0x50>)
 8001828:	2200      	movs	r2, #0
 800182a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 19;
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_QUADSPI_Init+0x50>)
 800182e:	2213      	movs	r2, #19
 8001830:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <MX_QUADSPI_Init+0x50>)
 8001834:	2200      	movs	r2, #0
 8001836:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_QUADSPI_Init+0x50>)
 800183a:	2200      	movs	r2, #0
 800183c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <MX_QUADSPI_Init+0x50>)
 8001840:	2200      	movs	r2, #0
 8001842:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_QUADSPI_Init+0x50>)
 8001846:	2200      	movs	r2, #0
 8001848:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_QUADSPI_Init+0x50>)
 800184c:	f001 ff12 	bl	8003674 <HAL_QSPI_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001856:	f7ff ffd6 	bl	8001806 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200001e4 	.word	0x200001e4
 8001864:	52005000 	.word	0x52005000

08001868 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b0bc      	sub	sp, #240	; 0xf0
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001880:	f107 0318 	add.w	r3, r7, #24
 8001884:	22c0      	movs	r2, #192	; 0xc0
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f00c f85b 	bl	800d944 <memset>
  if(qspiHandle->Instance==QUADSPI)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a4c      	ldr	r2, [pc, #304]	; (80019c4 <HAL_QSPI_MspInit+0x15c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	f040 8091 	bne.w	80019bc <HAL_QSPI_MspInit+0x154>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800189a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80018a6:	2301      	movs	r3, #1
 80018a8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 80018aa:	230c      	movs	r3, #12
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 80018ae:	2308      	movs	r3, #8
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80018ba:	23c0      	movs	r3, #192	; 0xc0
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80018be:	2300      	movs	r3, #0
 80018c0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 80018c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL2;
 80018c8:	2320      	movs	r3, #32
 80018ca:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018cc:	f107 0318 	add.w	r3, r7, #24
 80018d0:	4618      	mov	r0, r3
 80018d2:	f003 fbf1 	bl	80050b8 <HAL_RCCEx_PeriphCLKConfig>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <HAL_QSPI_MspInit+0x78>
    {
      Error_Handler();
 80018dc:	f7ff ff93 	bl	8001806 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80018e0:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <HAL_QSPI_MspInit+0x160>)
 80018e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018e6:	4a38      	ldr	r2, [pc, #224]	; (80019c8 <HAL_QSPI_MspInit+0x160>)
 80018e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ec:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80018f0:	4b35      	ldr	r3, [pc, #212]	; (80019c8 <HAL_QSPI_MspInit+0x160>)
 80018f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018fe:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <HAL_QSPI_MspInit+0x160>)
 8001900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001904:	4a30      	ldr	r2, [pc, #192]	; (80019c8 <HAL_QSPI_MspInit+0x160>)
 8001906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800190a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800190e:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <HAL_QSPI_MspInit+0x160>)
 8001910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800191c:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <HAL_QSPI_MspInit+0x160>)
 800191e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001922:	4a29      	ldr	r2, [pc, #164]	; (80019c8 <HAL_QSPI_MspInit+0x160>)
 8001924:	f043 0320 	orr.w	r3, r3, #32
 8001928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800192c:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <HAL_QSPI_MspInit+0x160>)
 800192e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001932:	f003 0320 	and.w	r3, r3, #32
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800193a:	2340      	movs	r3, #64	; 0x40
 800193c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194c:	2303      	movs	r3, #3
 800194e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001952:	230a      	movs	r3, #10
 8001954:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001958:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800195c:	4619      	mov	r1, r3
 800195e:	481b      	ldr	r0, [pc, #108]	; (80019cc <HAL_QSPI_MspInit+0x164>)
 8001960:	f000 fd40 	bl	80023e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
 8001964:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001968:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800197e:	2309      	movs	r3, #9
 8001980:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001984:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001988:	4619      	mov	r1, r3
 800198a:	4811      	ldr	r0, [pc, #68]	; (80019d0 <HAL_QSPI_MspInit+0x168>)
 800198c:	f000 fd2a 	bl	80023e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001990:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001994:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019aa:	230a      	movs	r3, #10
 80019ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019b4:	4619      	mov	r1, r3
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <HAL_QSPI_MspInit+0x168>)
 80019b8:	f000 fd14 	bl	80023e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80019bc:	bf00      	nop
 80019be:	37f0      	adds	r7, #240	; 0xf0
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	52005000 	.word	0x52005000
 80019c8:	58024400 	.word	0x58024400
 80019cc:	58021800 	.word	0x58021800
 80019d0:	58021400 	.word	0x58021400

080019d4 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <HAL_QSPI_MspDeInit+0x3c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d110      	bne.n	8001a08 <HAL_QSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_QSPI_MspDeInit+0x40>)
 80019e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80019ec:	4a09      	ldr	r2, [pc, #36]	; (8001a14 <HAL_QSPI_MspDeInit+0x40>)
 80019ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019f2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_6);
 80019f6:	2140      	movs	r1, #64	; 0x40
 80019f8:	4807      	ldr	r0, [pc, #28]	; (8001a18 <HAL_QSPI_MspDeInit+0x44>)
 80019fa:	f000 fea3 	bl	8002744 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 80019fe:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8001a02:	4806      	ldr	r0, [pc, #24]	; (8001a1c <HAL_QSPI_MspDeInit+0x48>)
 8001a04:	f000 fe9e 	bl	8002744 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	52005000 	.word	0x52005000
 8001a14:	58024400 	.word	0x58024400
 8001a18:	58021800 	.word	0x58021800
 8001a1c:	58021400 	.word	0x58021400

08001a20 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <MX_SDMMC1_SD_Init+0x34>)
 8001a26:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <MX_SDMMC1_SD_Init+0x38>)
 8001a28:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <MX_SDMMC1_SD_Init+0x34>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <MX_SDMMC1_SD_Init+0x34>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <MX_SDMMC1_SD_Init+0x34>)
 8001a38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a3c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <MX_SDMMC1_SD_Init+0x34>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 25;
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <MX_SDMMC1_SD_Init+0x34>)
 8001a46:	2219      	movs	r2, #25
 8001a48:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	20000230 	.word	0x20000230
 8001a58:	52007000 	.word	0x52007000

08001a5c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b0bc      	sub	sp, #240	; 0xf0
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a74:	f107 0318 	add.w	r3, r7, #24
 8001a78:	22c0      	movs	r2, #192	; 0xc0
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f00b ff61 	bl	800d944 <memset>
  if(sdHandle->Instance==SDMMC1)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a3c      	ldr	r2, [pc, #240]	; (8001b78 <HAL_SD_MspInit+0x11c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d171      	bne.n	8001b70 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001a8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a9c:	f107 0318 	add.w	r3, r7, #24
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f003 fb09 	bl	80050b8 <HAL_RCCEx_PeriphCLKConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001aac:	f7ff feab 	bl	8001806 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001ab0:	4b32      	ldr	r3, [pc, #200]	; (8001b7c <HAL_SD_MspInit+0x120>)
 8001ab2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001ab6:	4a31      	ldr	r2, [pc, #196]	; (8001b7c <HAL_SD_MspInit+0x120>)
 8001ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001ac0:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <HAL_SD_MspInit+0x120>)
 8001ac2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ace:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <HAL_SD_MspInit+0x120>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad4:	4a29      	ldr	r2, [pc, #164]	; (8001b7c <HAL_SD_MspInit+0x120>)
 8001ad6:	f043 0304 	orr.w	r3, r3, #4
 8001ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ade:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <HAL_SD_MspInit+0x120>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aec:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <HAL_SD_MspInit+0x120>)
 8001aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af2:	4a22      	ldr	r2, [pc, #136]	; (8001b7c <HAL_SD_MspInit+0x120>)
 8001af4:	f043 0308 	orr.w	r3, r3, #8
 8001af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001afc:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <HAL_SD_MspInit+0x120>)
 8001afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8001b0a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001b0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001b24:	230c      	movs	r3, #12
 8001b26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4813      	ldr	r0, [pc, #76]	; (8001b80 <HAL_SD_MspInit+0x124>)
 8001b32:	f000 fc57 	bl	80023e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b36:	2304      	movs	r3, #4
 8001b38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001b4e:	230c      	movs	r3, #12
 8001b50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b54:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b58:	4619      	mov	r1, r3
 8001b5a:	480a      	ldr	r0, [pc, #40]	; (8001b84 <HAL_SD_MspInit+0x128>)
 8001b5c:	f000 fc42 	bl	80023e4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 2, 0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2102      	movs	r1, #2
 8001b64:	2031      	movs	r0, #49	; 0x31
 8001b66:	f000 fb7a 	bl	800225e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001b6a:	2031      	movs	r0, #49	; 0x31
 8001b6c:	f000 fb91 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001b70:	bf00      	nop
 8001b72:	37f0      	adds	r7, #240	; 0xf0
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	52007000 	.word	0x52007000
 8001b7c:	58024400 	.word	0x58024400
 8001b80:	58020800 	.word	0x58020800
 8001b84:	58020c00 	.word	0x58020c00

08001b88 <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* sdHandle)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  if(sdHandle->Instance==SDMMC1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <HAL_SD_MspDeInit+0x44>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d113      	bne.n	8001bc2 <HAL_SD_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

  /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <HAL_SD_MspDeInit+0x48>)
 8001b9c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001ba0:	4a0b      	ldr	r2, [pc, #44]	; (8001bd0 <HAL_SD_MspDeInit+0x48>)
 8001ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8001baa:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8001bae:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <HAL_SD_MspDeInit+0x4c>)
 8001bb0:	f000 fdc8 	bl	8002744 <HAL_GPIO_DeInit>
                          |GPIO_PIN_8);

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8001bb4:	2104      	movs	r1, #4
 8001bb6:	4808      	ldr	r0, [pc, #32]	; (8001bd8 <HAL_SD_MspDeInit+0x50>)
 8001bb8:	f000 fdc4 	bl	8002744 <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 8001bbc:	2031      	movs	r0, #49	; 0x31
 8001bbe:	f000 fb76 	bl	80022ae <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	52007000 	.word	0x52007000
 8001bd0:	58024400 	.word	0x58024400
 8001bd4:	58020800 	.word	0x58020800
 8001bd8:	58020c00 	.word	0x58020c00

08001bdc <Reset_Handler>:
	#ifdef sram_layout
	asm ("ldr sp, =_estack");
	#endif

	void **pSource, **pDest;
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 8001bdc:	4d0c      	ldr	r5, [pc, #48]	; (8001c10 <Reset_Handler+0x34>)
 8001bde:	4c0d      	ldr	r4, [pc, #52]	; (8001c14 <Reset_Handler+0x38>)
 8001be0:	e003      	b.n	8001bea <Reset_Handler+0xe>
		*pDest = *pSource;
 8001be2:	682b      	ldr	r3, [r5, #0]
 8001be4:	6023      	str	r3, [r4, #0]
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 8001be6:	3504      	adds	r5, #4
 8001be8:	3404      	adds	r4, #4
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <Reset_Handler+0x3c>)
 8001bec:	429c      	cmp	r4, r3
 8001bee:	d1f8      	bne.n	8001be2 <Reset_Handler+0x6>

	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 8001bf0:	4c0a      	ldr	r4, [pc, #40]	; (8001c1c <Reset_Handler+0x40>)
 8001bf2:	e002      	b.n	8001bfa <Reset_Handler+0x1e>
		*pDest = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	6023      	str	r3, [r4, #0]
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 8001bf8:	3404      	adds	r4, #4
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <Reset_Handler+0x44>)
 8001bfc:	429c      	cmp	r4, r3
 8001bfe:	d1f9      	bne.n	8001bf4 <Reset_Handler+0x18>

	#ifndef BOOT_APP
	SystemInit();
 8001c00:	f000 f868 	bl	8001cd4 <SystemInit>
	#endif
	__libc_init_array();
 8001c04:	f00b fe7a 	bl	800d8fc <__libc_init_array>


	(void)main();
 8001c08:	f7fe fdd0 	bl	80007ac <main>
	for (;;) ;
 8001c0c:	e7fe      	b.n	8001c0c <Reset_Handler+0x30>
 8001c0e:	bf00      	nop
 8001c10:	0800de44 	.word	0x0800de44
 8001c14:	20000000 	.word	0x20000000
 8001c18:	20000014 	.word	0x20000014
 8001c1c:	20000014 	.word	0x20000014
 8001c20:	2000094c 	.word	0x2000094c

08001c24 <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
 8001c24:	e7fe      	b.n	8001c24 <Default_Handler>
	...

08001c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <HAL_MspInit+0x30>)
 8001c30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c34:	4a08      	ldr	r2, [pc, #32]	; (8001c58 <HAL_MspInit+0x30>)
 8001c36:	f043 0302 	orr.w	r3, r3, #2
 8001c3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_MspInit+0x30>)
 8001c40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	58024400 	.word	0x58024400

08001c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <NMI_Handler+0x4>

08001c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <HardFault_Handler+0x4>

08001c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <MemManage_Handler+0x4>

08001c6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c72:	e7fe      	b.n	8001c72 <BusFault_Handler+0x4>

08001c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <UsageFault_Handler+0x4>

08001c7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca8:	f000 f974 	bl	8001f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001cb4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001cb8:	f000 fe99 	bl	80029ee <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <SDMMC1_IRQHandler+0x10>)
 8001cc6:	f006 fb2d 	bl	8008324 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000230 	.word	0x20000230

08001cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cd8:	4b37      	ldr	r3, [pc, #220]	; (8001db8 <SystemInit+0xe4>)
 8001cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cde:	4a36      	ldr	r2, [pc, #216]	; (8001db8 <SystemInit+0xe4>)
 8001ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ce8:	4b34      	ldr	r3, [pc, #208]	; (8001dbc <SystemInit+0xe8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	2b06      	cmp	r3, #6
 8001cf2:	d807      	bhi.n	8001d04 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cf4:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <SystemInit+0xe8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f023 030f 	bic.w	r3, r3, #15
 8001cfc:	4a2f      	ldr	r2, [pc, #188]	; (8001dbc <SystemInit+0xe8>)
 8001cfe:	f043 0307 	orr.w	r3, r3, #7
 8001d02:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d04:	4b2e      	ldr	r3, [pc, #184]	; (8001dc0 <SystemInit+0xec>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a2d      	ldr	r2, [pc, #180]	; (8001dc0 <SystemInit+0xec>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d10:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <SystemInit+0xec>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d16:	4b2a      	ldr	r3, [pc, #168]	; (8001dc0 <SystemInit+0xec>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4929      	ldr	r1, [pc, #164]	; (8001dc0 <SystemInit+0xec>)
 8001d1c:	4b29      	ldr	r3, [pc, #164]	; (8001dc4 <SystemInit+0xf0>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d22:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <SystemInit+0xe8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d007      	beq.n	8001d3e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d2e:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <SystemInit+0xe8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 030f 	bic.w	r3, r3, #15
 8001d36:	4a21      	ldr	r2, [pc, #132]	; (8001dbc <SystemInit+0xe8>)
 8001d38:	f043 0307 	orr.w	r3, r3, #7
 8001d3c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d3e:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <SystemInit+0xec>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d44:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <SystemInit+0xec>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <SystemInit+0xec>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <SystemInit+0xec>)
 8001d52:	4a1d      	ldr	r2, [pc, #116]	; (8001dc8 <SystemInit+0xf4>)
 8001d54:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d56:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <SystemInit+0xec>)
 8001d58:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <SystemInit+0xf8>)
 8001d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d5c:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <SystemInit+0xec>)
 8001d5e:	4a1c      	ldr	r2, [pc, #112]	; (8001dd0 <SystemInit+0xfc>)
 8001d60:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d62:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <SystemInit+0xec>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d68:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <SystemInit+0xec>)
 8001d6a:	4a19      	ldr	r2, [pc, #100]	; (8001dd0 <SystemInit+0xfc>)
 8001d6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d6e:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <SystemInit+0xec>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <SystemInit+0xec>)
 8001d76:	4a16      	ldr	r2, [pc, #88]	; (8001dd0 <SystemInit+0xfc>)
 8001d78:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <SystemInit+0xec>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <SystemInit+0xec>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0e      	ldr	r2, [pc, #56]	; (8001dc0 <SystemInit+0xec>)
 8001d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <SystemInit+0xec>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <SystemInit+0x100>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <SystemInit+0x104>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d9e:	d202      	bcs.n	8001da6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001da0:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <SystemInit+0x108>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <SystemInit+0x10c>)
 8001da8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001dac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000ed00 	.word	0xe000ed00
 8001dbc:	52002000 	.word	0x52002000
 8001dc0:	58024400 	.word	0x58024400
 8001dc4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001dc8:	02020200 	.word	0x02020200
 8001dcc:	01ff0000 	.word	0x01ff0000
 8001dd0:	01010280 	.word	0x01010280
 8001dd4:	5c001000 	.word	0x5c001000
 8001dd8:	ffff0000 	.word	0xffff0000
 8001ddc:	51008108 	.word	0x51008108
 8001de0:	52004000 	.word	0x52004000

08001de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dea:	2003      	movs	r0, #3
 8001dec:	f000 fa2c 	bl	8002248 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001df0:	f002 ffa2 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_Init+0x68>)
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	0a1b      	lsrs	r3, r3, #8
 8001dfc:	f003 030f 	and.w	r3, r3, #15
 8001e00:	4913      	ldr	r1, [pc, #76]	; (8001e50 <HAL_Init+0x6c>)
 8001e02:	5ccb      	ldrb	r3, [r1, r3]
 8001e04:	f003 031f 	and.w	r3, r3, #31
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
 8001e0c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <HAL_Init+0x68>)
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	4a0e      	ldr	r2, [pc, #56]	; (8001e50 <HAL_Init+0x6c>)
 8001e18:	5cd3      	ldrb	r3, [r2, r3]
 8001e1a:	f003 031f 	and.w	r3, r3, #31
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	fa22 f303 	lsr.w	r3, r2, r3
 8001e24:	4a0b      	ldr	r2, [pc, #44]	; (8001e54 <HAL_Init+0x70>)
 8001e26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e28:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <HAL_Init+0x74>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f000 f87a 	bl	8001f28 <HAL_InitTick>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e002      	b.n	8001e44 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e3e:	f7ff fef3 	bl	8001c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	58024400 	.word	0x58024400
 8001e50:	0800d9c0 	.word	0x0800d9c0
 8001e54:	20000008 	.word	0x20000008
 8001e58:	20000004 	.word	0x20000004

08001e5c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_AHB3_FORCE_RESET();
 8001e60:	4b26      	ldr	r3, [pc, #152]	; (8001efc <HAL_DeInit+0xa0>)
 8001e62:	4a27      	ldr	r2, [pc, #156]	; (8001f00 <HAL_DeInit+0xa4>)
 8001e64:	67da      	str	r2, [r3, #124]	; 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001e66:	4b25      	ldr	r3, [pc, #148]	; (8001efc <HAL_DeInit+0xa0>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_RCC_AHB1_FORCE_RESET();
 8001e6c:	4b23      	ldr	r3, [pc, #140]	; (8001efc <HAL_DeInit+0xa0>)
 8001e6e:	4a25      	ldr	r2, [pc, #148]	; (8001f04 <HAL_DeInit+0xa8>)
 8001e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001e74:	4b21      	ldr	r3, [pc, #132]	; (8001efc <HAL_DeInit+0xa0>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_RCC_AHB2_FORCE_RESET();
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <HAL_DeInit+0xa0>)
 8001e7e:	f240 2271 	movw	r2, #625	; 0x271
 8001e82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001e86:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <HAL_DeInit+0xa0>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_RCC_AHB4_FORCE_RESET();
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_DeInit+0xa0>)
 8001e90:	4a1d      	ldr	r2, [pc, #116]	; (8001f08 <HAL_DeInit+0xac>)
 8001e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();
 8001e96:	4b19      	ldr	r3, [pc, #100]	; (8001efc <HAL_DeInit+0xa0>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_RCC_APB3_FORCE_RESET();
 8001e9e:	4b17      	ldr	r3, [pc, #92]	; (8001efc <HAL_DeInit+0xa0>)
 8001ea0:	2218      	movs	r2, #24
 8001ea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <HAL_DeInit+0xa0>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  __HAL_RCC_APB1L_FORCE_RESET();
 8001eae:	4b13      	ldr	r3, [pc, #76]	; (8001efc <HAL_DeInit+0xa0>)
 8001eb0:	4a16      	ldr	r2, [pc, #88]	; (8001f0c <HAL_DeInit+0xb0>)
 8001eb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_DeInit+0xa0>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  __HAL_RCC_APB1H_FORCE_RESET();
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_DeInit+0xa0>)
 8001ec0:	f44f 729b 	mov.w	r2, #310	; 0x136
 8001ec4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <HAL_DeInit+0xa0>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

   __HAL_RCC_APB2_FORCE_RESET();
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <HAL_DeInit+0xa0>)
 8001ed2:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <HAL_DeInit+0xb4>)
 8001ed4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   __HAL_RCC_APB2_RELEASE_RESET();
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <HAL_DeInit+0xa0>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  __HAL_RCC_APB4_FORCE_RESET();
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_DeInit+0xa0>)
 8001ee2:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <HAL_DeInit+0xb8>)
 8001ee4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <HAL_DeInit+0xa0>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001ef0:	f000 f812 	bl	8001f18 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	58024400 	.word	0x58024400
 8001f00:	00015031 	.word	0x00015031
 8001f04:	0a00c023 	.word	0x0a00c023
 8001f08:	032807ff 	.word	0x032807ff
 8001f0c:	e8ffc3ff 	.word	0xe8ffc3ff
 8001f10:	31d73033 	.word	0x31d73033
 8001f14:	0020deaa 	.word	0x0020deaa

08001f18 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f30:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <HAL_InitTick+0x60>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e021      	b.n	8001f80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <HAL_InitTick+0x64>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <HAL_InitTick+0x60>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4619      	mov	r1, r3
 8001f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f9bd 	bl	80022d2 <HAL_SYSTICK_Config>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00e      	b.n	8001f80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b0f      	cmp	r3, #15
 8001f66:	d80a      	bhi.n	8001f7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f70:	f000 f975 	bl	800225e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f74:	4a06      	ldr	r2, [pc, #24]	; (8001f90 <HAL_InitTick+0x68>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e000      	b.n	8001f80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000010 	.word	0x20000010
 8001f8c:	20000004 	.word	0x20000004
 8001f90:	2000000c 	.word	0x2000000c

08001f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_IncTick+0x20>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_IncTick+0x24>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <HAL_IncTick+0x24>)
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000010 	.word	0x20000010
 8001fb8:	200002ac 	.word	0x200002ac

08001fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <HAL_GetTick+0x14>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	200002ac 	.word	0x200002ac

08001fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fdc:	f7ff ffee 	bl	8001fbc <HAL_GetTick>
 8001fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fec:	d005      	beq.n	8001ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_Delay+0x44>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ffa:	bf00      	nop
 8001ffc:	f7ff ffde 	bl	8001fbc <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	429a      	cmp	r2, r3
 800200a:	d8f7      	bhi.n	8001ffc <HAL_Delay+0x28>
  {
  }
}
 800200c:	bf00      	nop
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000010 	.word	0x20000010

0800201c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <HAL_GetREVID+0x14>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	0c1b      	lsrs	r3, r3, #16
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	5c001000 	.word	0x5c001000

08002034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <__NVIC_SetPriorityGrouping+0x40>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002050:	4013      	ands	r3, r2
 8002052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <__NVIC_SetPriorityGrouping+0x44>)
 800205e:	4313      	orrs	r3, r2
 8002060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002062:	4a04      	ldr	r2, [pc, #16]	; (8002074 <__NVIC_SetPriorityGrouping+0x40>)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	60d3      	str	r3, [r2, #12]
}
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000ed00 	.word	0xe000ed00
 8002078:	05fa0000 	.word	0x05fa0000

0800207c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <__NVIC_GetPriorityGrouping+0x18>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	f003 0307 	and.w	r3, r3, #7
}
 800208a:	4618      	mov	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	db0b      	blt.n	80020c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020aa:	88fb      	ldrh	r3, [r7, #6]
 80020ac:	f003 021f 	and.w	r2, r3, #31
 80020b0:	4907      	ldr	r1, [pc, #28]	; (80020d0 <__NVIC_EnableIRQ+0x38>)
 80020b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	2001      	movs	r0, #1
 80020ba:	fa00 f202 	lsl.w	r2, r0, r2
 80020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000e100 	.word	0xe000e100

080020d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	db12      	blt.n	800210c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e6:	88fb      	ldrh	r3, [r7, #6]
 80020e8:	f003 021f 	and.w	r2, r3, #31
 80020ec:	490a      	ldr	r1, [pc, #40]	; (8002118 <__NVIC_DisableIRQ+0x44>)
 80020ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	2001      	movs	r0, #1
 80020f6:	fa00 f202 	lsl.w	r2, r0, r2
 80020fa:	3320      	adds	r3, #32
 80020fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002100:	f3bf 8f4f 	dsb	sy
}
 8002104:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002106:	f3bf 8f6f 	isb	sy
}
 800210a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000e100 	.word	0xe000e100

0800211c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800212c:	2b00      	cmp	r3, #0
 800212e:	db0a      	blt.n	8002146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	490c      	ldr	r1, [pc, #48]	; (8002168 <__NVIC_SetPriority+0x4c>)
 8002136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	440b      	add	r3, r1
 8002140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002144:	e00a      	b.n	800215c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4908      	ldr	r1, [pc, #32]	; (800216c <__NVIC_SetPriority+0x50>)
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	3b04      	subs	r3, #4
 8002154:	0112      	lsls	r2, r2, #4
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	440b      	add	r3, r1
 800215a:	761a      	strb	r2, [r3, #24]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000e100 	.word	0xe000e100
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	; 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f1c3 0307 	rsb	r3, r3, #7
 800218a:	2b04      	cmp	r3, #4
 800218c:	bf28      	it	cs
 800218e:	2304      	movcs	r3, #4
 8002190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3304      	adds	r3, #4
 8002196:	2b06      	cmp	r3, #6
 8002198:	d902      	bls.n	80021a0 <NVIC_EncodePriority+0x30>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3b03      	subs	r3, #3
 800219e:	e000      	b.n	80021a2 <NVIC_EncodePriority+0x32>
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	401a      	ands	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	43d9      	mvns	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	4313      	orrs	r3, r2
         );
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3724      	adds	r7, #36	; 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80021dc:	f3bf 8f4f 	dsb	sy
}
 80021e0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <__NVIC_SystemReset+0x24>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80021ea:	4904      	ldr	r1, [pc, #16]	; (80021fc <__NVIC_SystemReset+0x24>)
 80021ec:	4b04      	ldr	r3, [pc, #16]	; (8002200 <__NVIC_SystemReset+0x28>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80021f2:	f3bf 8f4f 	dsb	sy
}
 80021f6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <__NVIC_SystemReset+0x20>
 80021fc:	e000ed00 	.word	0xe000ed00
 8002200:	05fa0004 	.word	0x05fa0004

08002204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002214:	d301      	bcc.n	800221a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002216:	2301      	movs	r3, #1
 8002218:	e00f      	b.n	800223a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <SysTick_Config+0x40>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002222:	210f      	movs	r1, #15
 8002224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002228:	f7ff ff78 	bl	800211c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <SysTick_Config+0x40>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002232:	4b04      	ldr	r3, [pc, #16]	; (8002244 <SysTick_Config+0x40>)
 8002234:	2207      	movs	r2, #7
 8002236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	e000e010 	.word	0xe000e010

08002248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff feef 	bl	8002034 <__NVIC_SetPriorityGrouping>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800226c:	f7ff ff06 	bl	800207c <__NVIC_GetPriorityGrouping>
 8002270:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	6978      	ldr	r0, [r7, #20]
 8002278:	f7ff ff7a 	bl	8002170 <NVIC_EncodePriority>
 800227c:	4602      	mov	r2, r0
 800227e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff49 	bl	800211c <__NVIC_SetPriority>
}
 800228a:	bf00      	nop
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800229c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fef9 	bl	8002098 <__NVIC_EnableIRQ>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80022b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff09 	bl	80020d4 <__NVIC_DisableIRQ>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80022ce:	f7ff ff83 	bl	80021d8 <__NVIC_SystemReset>

080022d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff ff92 	bl	8002204 <SysTick_Config>
 80022e0:	4603      	mov	r3, r0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80022f0:	f3bf 8f5f 	dmb	sy
}
 80022f4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <HAL_MPU_Disable+0x28>)
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	4a06      	ldr	r2, [pc, #24]	; (8002314 <HAL_MPU_Disable+0x28>)
 80022fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002300:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_MPU_Disable+0x2c>)
 8002304:	2200      	movs	r2, #0
 8002306:	605a      	str	r2, [r3, #4]
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000ed00 	.word	0xe000ed00
 8002318:	e000ed90 	.word	0xe000ed90

0800231c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002324:	4a0b      	ldr	r2, [pc, #44]	; (8002354 <HAL_MPU_Enable+0x38>)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <HAL_MPU_Enable+0x3c>)
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	4a09      	ldr	r2, [pc, #36]	; (8002358 <HAL_MPU_Enable+0x3c>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002338:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800233a:	f3bf 8f4f 	dsb	sy
}
 800233e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002340:	f3bf 8f6f 	isb	sy
}
 8002344:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000ed90 	.word	0xe000ed90
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	785a      	ldrb	r2, [r3, #1]
 8002368:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <HAL_MPU_ConfigRegion+0x84>)
 800236a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d029      	beq.n	80023c8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002374:	4a1a      	ldr	r2, [pc, #104]	; (80023e0 <HAL_MPU_ConfigRegion+0x84>)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	7b1b      	ldrb	r3, [r3, #12]
 8002380:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7adb      	ldrb	r3, [r3, #11]
 8002386:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002388:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	7a9b      	ldrb	r3, [r3, #10]
 800238e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002390:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	7b5b      	ldrb	r3, [r3, #13]
 8002396:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002398:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	7b9b      	ldrb	r3, [r3, #14]
 800239e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80023a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	7bdb      	ldrb	r3, [r3, #15]
 80023a6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80023a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	7a5b      	ldrb	r3, [r3, #9]
 80023ae:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80023b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	7a1b      	ldrb	r3, [r3, #8]
 80023b6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80023b8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	7812      	ldrb	r2, [r2, #0]
 80023be:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023c0:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80023c2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023c4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80023c6:	e005      	b.n	80023d4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_MPU_ConfigRegion+0x84>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80023ce:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <HAL_MPU_ConfigRegion+0x84>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000ed90 	.word	0xe000ed90

080023e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b089      	sub	sp, #36	; 0x24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80023f2:	4b89      	ldr	r3, [pc, #548]	; (8002618 <HAL_GPIO_Init+0x234>)
 80023f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023f6:	e194      	b.n	8002722 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	2101      	movs	r1, #1
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 8186 	beq.w	800271c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b01      	cmp	r3, #1
 800241a:	d005      	beq.n	8002428 <HAL_GPIO_Init+0x44>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d130      	bne.n	800248a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2203      	movs	r2, #3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800245e:	2201      	movs	r2, #1
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	091b      	lsrs	r3, r3, #4
 8002474:	f003 0201 	and.w	r2, r3, #1
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b03      	cmp	r3, #3
 8002494:	d017      	beq.n	80024c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	2203      	movs	r2, #3
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d123      	bne.n	800251a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	08da      	lsrs	r2, r3, #3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3208      	adds	r2, #8
 80024da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	220f      	movs	r2, #15
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	08da      	lsrs	r2, r3, #3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3208      	adds	r2, #8
 8002514:	69b9      	ldr	r1, [r7, #24]
 8002516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	2203      	movs	r2, #3
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0203 	and.w	r2, r3, #3
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 80e0 	beq.w	800271c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255c:	4b2f      	ldr	r3, [pc, #188]	; (800261c <HAL_GPIO_Init+0x238>)
 800255e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002562:	4a2e      	ldr	r2, [pc, #184]	; (800261c <HAL_GPIO_Init+0x238>)
 8002564:	f043 0302 	orr.w	r3, r3, #2
 8002568:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800256c:	4b2b      	ldr	r3, [pc, #172]	; (800261c <HAL_GPIO_Init+0x238>)
 800256e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800257a:	4a29      	ldr	r2, [pc, #164]	; (8002620 <HAL_GPIO_Init+0x23c>)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	089b      	lsrs	r3, r3, #2
 8002580:	3302      	adds	r3, #2
 8002582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	220f      	movs	r2, #15
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a20      	ldr	r2, [pc, #128]	; (8002624 <HAL_GPIO_Init+0x240>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d052      	beq.n	800264c <HAL_GPIO_Init+0x268>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a1f      	ldr	r2, [pc, #124]	; (8002628 <HAL_GPIO_Init+0x244>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d031      	beq.n	8002612 <HAL_GPIO_Init+0x22e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a1e      	ldr	r2, [pc, #120]	; (800262c <HAL_GPIO_Init+0x248>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d02b      	beq.n	800260e <HAL_GPIO_Init+0x22a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a1d      	ldr	r2, [pc, #116]	; (8002630 <HAL_GPIO_Init+0x24c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d025      	beq.n	800260a <HAL_GPIO_Init+0x226>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a1c      	ldr	r2, [pc, #112]	; (8002634 <HAL_GPIO_Init+0x250>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d01f      	beq.n	8002606 <HAL_GPIO_Init+0x222>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a1b      	ldr	r2, [pc, #108]	; (8002638 <HAL_GPIO_Init+0x254>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d019      	beq.n	8002602 <HAL_GPIO_Init+0x21e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a1a      	ldr	r2, [pc, #104]	; (800263c <HAL_GPIO_Init+0x258>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d013      	beq.n	80025fe <HAL_GPIO_Init+0x21a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a19      	ldr	r2, [pc, #100]	; (8002640 <HAL_GPIO_Init+0x25c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00d      	beq.n	80025fa <HAL_GPIO_Init+0x216>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a18      	ldr	r2, [pc, #96]	; (8002644 <HAL_GPIO_Init+0x260>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d007      	beq.n	80025f6 <HAL_GPIO_Init+0x212>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a17      	ldr	r2, [pc, #92]	; (8002648 <HAL_GPIO_Init+0x264>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d101      	bne.n	80025f2 <HAL_GPIO_Init+0x20e>
 80025ee:	2309      	movs	r3, #9
 80025f0:	e02d      	b.n	800264e <HAL_GPIO_Init+0x26a>
 80025f2:	230a      	movs	r3, #10
 80025f4:	e02b      	b.n	800264e <HAL_GPIO_Init+0x26a>
 80025f6:	2308      	movs	r3, #8
 80025f8:	e029      	b.n	800264e <HAL_GPIO_Init+0x26a>
 80025fa:	2307      	movs	r3, #7
 80025fc:	e027      	b.n	800264e <HAL_GPIO_Init+0x26a>
 80025fe:	2306      	movs	r3, #6
 8002600:	e025      	b.n	800264e <HAL_GPIO_Init+0x26a>
 8002602:	2305      	movs	r3, #5
 8002604:	e023      	b.n	800264e <HAL_GPIO_Init+0x26a>
 8002606:	2304      	movs	r3, #4
 8002608:	e021      	b.n	800264e <HAL_GPIO_Init+0x26a>
 800260a:	2303      	movs	r3, #3
 800260c:	e01f      	b.n	800264e <HAL_GPIO_Init+0x26a>
 800260e:	2302      	movs	r3, #2
 8002610:	e01d      	b.n	800264e <HAL_GPIO_Init+0x26a>
 8002612:	2301      	movs	r3, #1
 8002614:	e01b      	b.n	800264e <HAL_GPIO_Init+0x26a>
 8002616:	bf00      	nop
 8002618:	58000080 	.word	0x58000080
 800261c:	58024400 	.word	0x58024400
 8002620:	58000400 	.word	0x58000400
 8002624:	58020000 	.word	0x58020000
 8002628:	58020400 	.word	0x58020400
 800262c:	58020800 	.word	0x58020800
 8002630:	58020c00 	.word	0x58020c00
 8002634:	58021000 	.word	0x58021000
 8002638:	58021400 	.word	0x58021400
 800263c:	58021800 	.word	0x58021800
 8002640:	58021c00 	.word	0x58021c00
 8002644:	58022000 	.word	0x58022000
 8002648:	58022400 	.word	0x58022400
 800264c:	2300      	movs	r3, #0
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	f002 0203 	and.w	r2, r2, #3
 8002654:	0092      	lsls	r2, r2, #2
 8002656:	4093      	lsls	r3, r2
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800265e:	4938      	ldr	r1, [pc, #224]	; (8002740 <HAL_GPIO_Init+0x35c>)
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	089b      	lsrs	r3, r3, #2
 8002664:	3302      	adds	r3, #2
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800266c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800269a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80026c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	3301      	adds	r3, #1
 8002720:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	f47f ae63 	bne.w	80023f8 <HAL_GPIO_Init+0x14>
  }
}
 8002732:	bf00      	nop
 8002734:	bf00      	nop
 8002736:	3724      	adds	r7, #36	; 0x24
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	58000400 	.word	0x58000400

08002744 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002744:	b480      	push	{r7}
 8002746:	b087      	sub	sp, #28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002752:	4b75      	ldr	r3, [pc, #468]	; (8002928 <HAL_GPIO_DeInit+0x1e4>)
 8002754:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8002756:	e0d9      	b.n	800290c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8002758:	2201      	movs	r2, #1
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	4013      	ands	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80cc 	beq.w	8002906 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800276e:	4a6f      	ldr	r2, [pc, #444]	; (800292c <HAL_GPIO_DeInit+0x1e8>)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	089b      	lsrs	r3, r3, #2
 8002774:	3302      	adds	r3, #2
 8002776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	220f      	movs	r2, #15
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	4013      	ands	r3, r2
 800278e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a67      	ldr	r2, [pc, #412]	; (8002930 <HAL_GPIO_DeInit+0x1ec>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d037      	beq.n	8002808 <HAL_GPIO_DeInit+0xc4>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a66      	ldr	r2, [pc, #408]	; (8002934 <HAL_GPIO_DeInit+0x1f0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d031      	beq.n	8002804 <HAL_GPIO_DeInit+0xc0>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a65      	ldr	r2, [pc, #404]	; (8002938 <HAL_GPIO_DeInit+0x1f4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d02b      	beq.n	8002800 <HAL_GPIO_DeInit+0xbc>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a64      	ldr	r2, [pc, #400]	; (800293c <HAL_GPIO_DeInit+0x1f8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d025      	beq.n	80027fc <HAL_GPIO_DeInit+0xb8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a63      	ldr	r2, [pc, #396]	; (8002940 <HAL_GPIO_DeInit+0x1fc>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d01f      	beq.n	80027f8 <HAL_GPIO_DeInit+0xb4>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a62      	ldr	r2, [pc, #392]	; (8002944 <HAL_GPIO_DeInit+0x200>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d019      	beq.n	80027f4 <HAL_GPIO_DeInit+0xb0>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a61      	ldr	r2, [pc, #388]	; (8002948 <HAL_GPIO_DeInit+0x204>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d013      	beq.n	80027f0 <HAL_GPIO_DeInit+0xac>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a60      	ldr	r2, [pc, #384]	; (800294c <HAL_GPIO_DeInit+0x208>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d00d      	beq.n	80027ec <HAL_GPIO_DeInit+0xa8>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a5f      	ldr	r2, [pc, #380]	; (8002950 <HAL_GPIO_DeInit+0x20c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d007      	beq.n	80027e8 <HAL_GPIO_DeInit+0xa4>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a5e      	ldr	r2, [pc, #376]	; (8002954 <HAL_GPIO_DeInit+0x210>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d101      	bne.n	80027e4 <HAL_GPIO_DeInit+0xa0>
 80027e0:	2309      	movs	r3, #9
 80027e2:	e012      	b.n	800280a <HAL_GPIO_DeInit+0xc6>
 80027e4:	230a      	movs	r3, #10
 80027e6:	e010      	b.n	800280a <HAL_GPIO_DeInit+0xc6>
 80027e8:	2308      	movs	r3, #8
 80027ea:	e00e      	b.n	800280a <HAL_GPIO_DeInit+0xc6>
 80027ec:	2307      	movs	r3, #7
 80027ee:	e00c      	b.n	800280a <HAL_GPIO_DeInit+0xc6>
 80027f0:	2306      	movs	r3, #6
 80027f2:	e00a      	b.n	800280a <HAL_GPIO_DeInit+0xc6>
 80027f4:	2305      	movs	r3, #5
 80027f6:	e008      	b.n	800280a <HAL_GPIO_DeInit+0xc6>
 80027f8:	2304      	movs	r3, #4
 80027fa:	e006      	b.n	800280a <HAL_GPIO_DeInit+0xc6>
 80027fc:	2303      	movs	r3, #3
 80027fe:	e004      	b.n	800280a <HAL_GPIO_DeInit+0xc6>
 8002800:	2302      	movs	r3, #2
 8002802:	e002      	b.n	800280a <HAL_GPIO_DeInit+0xc6>
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <HAL_GPIO_DeInit+0xc6>
 8002808:	2300      	movs	r3, #0
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	f002 0203 	and.w	r2, r2, #3
 8002810:	0092      	lsls	r2, r2, #2
 8002812:	4093      	lsls	r3, r2
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	429a      	cmp	r2, r3
 8002818:	d136      	bne.n	8002888 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	43db      	mvns	r3, r3
 8002822:	401a      	ands	r2, r3
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	43db      	mvns	r3, r3
 8002830:	401a      	ands	r2, r3
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	43db      	mvns	r3, r3
 8002840:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002844:	4013      	ands	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	43db      	mvns	r3, r3
 8002852:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002856:	4013      	ands	r3, r2
 8002858:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	220f      	movs	r2, #15
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800286a:	4a30      	ldr	r2, [pc, #192]	; (800292c <HAL_GPIO_DeInit+0x1e8>)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	089b      	lsrs	r3, r3, #2
 8002870:	3302      	adds	r3, #2
 8002872:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	43da      	mvns	r2, r3
 800287a:	482c      	ldr	r0, [pc, #176]	; (800292c <HAL_GPIO_DeInit+0x1e8>)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	089b      	lsrs	r3, r3, #2
 8002880:	400a      	ands	r2, r1
 8002882:	3302      	adds	r3, #2
 8002884:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	2103      	movs	r1, #3
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	08da      	lsrs	r2, r3, #3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3208      	adds	r2, #8
 80028a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	220f      	movs	r2, #15
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	08d2      	lsrs	r2, r2, #3
 80028bc:	4019      	ands	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3208      	adds	r2, #8
 80028c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	2103      	movs	r1, #3
 80028d0:	fa01 f303 	lsl.w	r3, r1, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	401a      	ands	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	2101      	movs	r1, #1
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	fa01 f303 	lsl.w	r3, r1, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	401a      	ands	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	2103      	movs	r1, #3
 80028fa:	fa01 f303 	lsl.w	r3, r1, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	401a      	ands	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	3301      	adds	r3, #1
 800290a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	f47f af1f 	bne.w	8002758 <HAL_GPIO_DeInit+0x14>
  }
}
 800291a:	bf00      	nop
 800291c:	bf00      	nop
 800291e:	371c      	adds	r7, #28
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	58000080 	.word	0x58000080
 800292c:	58000400 	.word	0x58000400
 8002930:	58020000 	.word	0x58020000
 8002934:	58020400 	.word	0x58020400
 8002938:	58020800 	.word	0x58020800
 800293c:	58020c00 	.word	0x58020c00
 8002940:	58021000 	.word	0x58021000
 8002944:	58021400 	.word	0x58021400
 8002948:	58021800 	.word	0x58021800
 800294c:	58021c00 	.word	0x58021c00
 8002950:	58022000 	.word	0x58022000
 8002954:	58022400 	.word	0x58022400

08002958 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	887b      	ldrh	r3, [r7, #2]
 800296a:	4013      	ands	r3, r2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002970:	2301      	movs	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
 8002974:	e001      	b.n	800297a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002976:	2300      	movs	r3, #0
 8002978:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800297a:	7bfb      	ldrb	r3, [r7, #15]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	807b      	strh	r3, [r7, #2]
 8002994:	4613      	mov	r3, r2
 8002996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002998:	787b      	ldrb	r3, [r7, #1]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800299e:	887a      	ldrh	r2, [r7, #2]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80029a4:	e003      	b.n	80029ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80029a6:	887b      	ldrh	r3, [r7, #2]
 80029a8:	041a      	lsls	r2, r3, #16
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	619a      	str	r2, [r3, #24]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029cc:	887a      	ldrh	r2, [r7, #2]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4013      	ands	r3, r2
 80029d2:	041a      	lsls	r2, r3, #16
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	43d9      	mvns	r1, r3
 80029d8:	887b      	ldrh	r3, [r7, #2]
 80029da:	400b      	ands	r3, r1
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	619a      	str	r2, [r3, #24]
}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80029f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fe fe1f 	bl	8001658 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e07f      	b.n	8002b36 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7fd fe10 	bl	8000670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2224      	movs	r2, #36	; 0x24
 8002a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d107      	bne.n	8002a9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	e006      	b.n	8002aac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002aaa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d104      	bne.n	8002abe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002abc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <HAL_I2C_Init+0x11c>)
 8002aca:	430b      	orrs	r3, r1
 8002acc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002adc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691a      	ldr	r2, [r3, #16]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69d9      	ldr	r1, [r3, #28]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1a      	ldr	r2, [r3, #32]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	02008000 	.word	0x02008000

08002b44 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e021      	b.n	8002b9a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2224      	movs	r2, #36	; 0x24
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0201 	bic.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fd fde8 	bl	8000744 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	607a      	str	r2, [r7, #4]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	817b      	strh	r3, [r7, #10]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	f040 80da 	bne.w	8002d7a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_I2C_Master_Transmit+0x30>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e0d3      	b.n	8002d7c <HAL_I2C_Master_Transmit+0x1d8>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bdc:	f7ff f9ee 	bl	8001fbc <HAL_GetTick>
 8002be0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	2319      	movs	r3, #25
 8002be8:	2201      	movs	r2, #1
 8002bea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 fa00 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e0be      	b.n	8002d7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2221      	movs	r2, #33	; 0x21
 8002c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2210      	movs	r2, #16
 8002c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	893a      	ldrh	r2, [r7, #8]
 8002c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2bff      	cmp	r3, #255	; 0xff
 8002c2e:	d90e      	bls.n	8002c4e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	22ff      	movs	r2, #255	; 0xff
 8002c34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	8979      	ldrh	r1, [r7, #10]
 8002c3e:	4b51      	ldr	r3, [pc, #324]	; (8002d84 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fc10 	bl	800346c <I2C_TransferConfig>
 8002c4c:	e06c      	b.n	8002d28 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	8979      	ldrh	r1, [r7, #10]
 8002c60:	4b48      	ldr	r3, [pc, #288]	; (8002d84 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 fbff 	bl	800346c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002c6e:	e05b      	b.n	8002d28 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	6a39      	ldr	r1, [r7, #32]
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 fa0c 	bl	8003092 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e07b      	b.n	8002d7c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	781a      	ldrb	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d034      	beq.n	8002d28 <HAL_I2C_Master_Transmit+0x184>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d130      	bne.n	8002d28 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2180      	movs	r1, #128	; 0x80
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 f98f 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e04d      	b.n	8002d7c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2bff      	cmp	r3, #255	; 0xff
 8002ce8:	d90e      	bls.n	8002d08 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	22ff      	movs	r2, #255	; 0xff
 8002cee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	8979      	ldrh	r1, [r7, #10]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fbb3 	bl	800346c <I2C_TransferConfig>
 8002d06:	e00f      	b.n	8002d28 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	8979      	ldrh	r1, [r7, #10]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fba2 	bl	800346c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d19e      	bne.n	8002c70 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	6a39      	ldr	r1, [r7, #32]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f9f2 	bl	8003120 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e01a      	b.n	8002d7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6859      	ldr	r1, [r3, #4]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_I2C_Master_Transmit+0x1e4>)
 8002d5a:	400b      	ands	r3, r1
 8002d5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	e000      	b.n	8002d7c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002d7a:	2302      	movs	r3, #2
  }
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	80002000 	.word	0x80002000
 8002d88:	fe00e800 	.word	0xfe00e800

08002d8c <HAL_I2C_Slave_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                        uint32_t Timeout)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	f040 80fc 	bne.w	8002fa2 <HAL_I2C_Slave_Receive+0x216>
  {
    if ((pData == NULL) || (Size == 0U))
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <HAL_I2C_Slave_Receive+0x2a>
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d105      	bne.n	8002dc2 <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dbc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e0f0      	b.n	8002fa4 <HAL_I2C_Slave_Receive+0x218>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_I2C_Slave_Receive+0x44>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e0e9      	b.n	8002fa4 <HAL_I2C_Slave_Receive+0x218>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dd8:	f7ff f8f0 	bl	8001fbc <HAL_GetTick>
 8002ddc:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2222      	movs	r2, #34	; 0x22
 8002de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	88fa      	ldrh	r2, [r7, #6]
 8002dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize = hi2c->XferCount;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferISR   = NULL;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e1e:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2200      	movs	r2, #0
 8002e28:	2108      	movs	r1, #8
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 f8e2 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d009      	beq.n	8002e4a <HAL_I2C_Slave_Receive+0xbe>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e44:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e0ac      	b.n	8002fa4 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2208      	movs	r2, #8
 8002e50:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f8c8 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d054      	beq.n	8002f14 <HAL_I2C_Slave_Receive+0x188>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e78:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e092      	b.n	8002fa4 <HAL_I2C_Slave_Receive+0x218>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	6839      	ldr	r1, [r7, #0]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f990 	bl	80031a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d029      	beq.n	8002ee2 <HAL_I2C_Slave_Receive+0x156>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e9c:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d118      	bne.n	8002ede <HAL_I2C_Slave_Receive+0x152>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
          hi2c->XferSize--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	851a      	strh	r2, [r3, #40]	; 0x28
        }

        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e060      	b.n	8002fa4 <HAL_I2C_Slave_Receive+0x218>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1af      	bne.n	8002e7e <HAL_I2C_Slave_Receive+0xf2>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	6839      	ldr	r1, [r7, #0]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f8fc 	bl	8003120 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f3c:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e030      	b.n	8002fa4 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2220      	movs	r2, #32
 8002f48:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f84c 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <HAL_I2C_Slave_Receive+0x1ea>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f70:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e016      	b.n	8002fa4 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f84:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e000      	b.n	8002fa4 <HAL_I2C_Slave_Receive+0x218>
  }
  else
  {
    return HAL_BUSY;
 8002fa2:	2302      	movs	r3, #2
  }
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d103      	bne.n	8002fca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d007      	beq.n	8002fe8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699a      	ldr	r2, [r3, #24]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	619a      	str	r2, [r3, #24]
  }
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	4613      	mov	r3, r2
 8003002:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003004:	e031      	b.n	800306a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800300c:	d02d      	beq.n	800306a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800300e:	f7fe ffd5 	bl	8001fbc <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d302      	bcc.n	8003024 <I2C_WaitOnFlagUntilTimeout+0x30>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d122      	bne.n	800306a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	4013      	ands	r3, r2
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	429a      	cmp	r2, r3
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	429a      	cmp	r2, r3
 8003040:	d113      	bne.n	800306a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	f043 0220 	orr.w	r2, r3, #32
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e00f      	b.n	800308a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699a      	ldr	r2, [r3, #24]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4013      	ands	r3, r2
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	429a      	cmp	r2, r3
 8003078:	bf0c      	ite	eq
 800307a:	2301      	moveq	r3, #1
 800307c:	2300      	movne	r3, #0
 800307e:	b2db      	uxtb	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	429a      	cmp	r2, r3
 8003086:	d0be      	beq.n	8003006 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800309e:	e033      	b.n	8003108 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f901 	bl	80032ac <I2C_IsErrorOccurred>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e031      	b.n	8003118 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ba:	d025      	beq.n	8003108 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030bc:	f7fe ff7e 	bl	8001fbc <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d302      	bcc.n	80030d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d11a      	bne.n	8003108 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d013      	beq.n	8003108 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e4:	f043 0220 	orr.w	r2, r3, #32
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e007      	b.n	8003118 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	d1c4      	bne.n	80030a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800312c:	e02f      	b.n	800318e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f8ba 	bl	80032ac <I2C_IsErrorOccurred>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e02d      	b.n	800319e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003142:	f7fe ff3b 	bl	8001fbc <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	429a      	cmp	r2, r3
 8003150:	d302      	bcc.n	8003158 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d11a      	bne.n	800318e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b20      	cmp	r3, #32
 8003164:	d013      	beq.n	800318e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	f043 0220 	orr.w	r2, r3, #32
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e007      	b.n	800319e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b20      	cmp	r3, #32
 800319a:	d1c8      	bne.n	800312e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031b4:	e06b      	b.n	800328e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f876 	bl	80032ac <I2C_IsErrorOccurred>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e069      	b.n	800329e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d138      	bne.n	800324a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d105      	bne.n	80031f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	e055      	b.n	800329e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	2b10      	cmp	r3, #16
 80031fe:	d107      	bne.n	8003210 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2210      	movs	r2, #16
 8003206:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2204      	movs	r2, #4
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
 800320e:	e002      	b.n	8003216 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2220      	movs	r2, #32
 800321c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6859      	ldr	r1, [r3, #4]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b1f      	ldr	r3, [pc, #124]	; (80032a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800322a:	400b      	ands	r3, r1
 800322c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e029      	b.n	800329e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324a:	f7fe feb7 	bl	8001fbc <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	429a      	cmp	r2, r3
 8003258:	d302      	bcc.n	8003260 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d116      	bne.n	800328e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b04      	cmp	r3, #4
 800326c:	d00f      	beq.n	800328e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	f043 0220 	orr.w	r2, r3, #32
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e007      	b.n	800329e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b04      	cmp	r3, #4
 800329a:	d18c      	bne.n	80031b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	fe00e800 	.word	0xfe00e800

080032ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08a      	sub	sp, #40	; 0x28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	f003 0310 	and.w	r3, r3, #16
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d068      	beq.n	80033aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2210      	movs	r2, #16
 80032de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032e0:	e049      	b.n	8003376 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032e8:	d045      	beq.n	8003376 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032ea:	f7fe fe67 	bl	8001fbc <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d302      	bcc.n	8003300 <I2C_IsErrorOccurred+0x54>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d13a      	bne.n	8003376 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003312:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800331e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003322:	d121      	bne.n	8003368 <I2C_IsErrorOccurred+0xbc>
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800332a:	d01d      	beq.n	8003368 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800332c:	7cfb      	ldrb	r3, [r7, #19]
 800332e:	2b20      	cmp	r3, #32
 8003330:	d01a      	beq.n	8003368 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003340:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003342:	f7fe fe3b 	bl	8001fbc <HAL_GetTick>
 8003346:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003348:	e00e      	b.n	8003368 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800334a:	f7fe fe37 	bl	8001fbc <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b19      	cmp	r3, #25
 8003356:	d907      	bls.n	8003368 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	f043 0320 	orr.w	r3, r3, #32
 800335e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003366:	e006      	b.n	8003376 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f003 0320 	and.w	r3, r3, #32
 8003372:	2b20      	cmp	r3, #32
 8003374:	d1e9      	bne.n	800334a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b20      	cmp	r3, #32
 8003382:	d003      	beq.n	800338c <I2C_IsErrorOccurred+0xe0>
 8003384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0aa      	beq.n	80032e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800338c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003390:	2b00      	cmp	r3, #0
 8003392:	d103      	bne.n	800339c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2220      	movs	r2, #32
 800339a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	f043 0304 	orr.w	r3, r3, #4
 80033a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00b      	beq.n	80033d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00b      	beq.n	80033f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	f043 0308 	orr.w	r3, r3, #8
 80033e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00b      	beq.n	8003418 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	f043 0302 	orr.w	r3, r3, #2
 8003406:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003410:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800341c:	2b00      	cmp	r3, #0
 800341e:	d01c      	beq.n	800345a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f7ff fdc3 	bl	8002fac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <I2C_IsErrorOccurred+0x1bc>)
 8003432:	400b      	ands	r3, r1
 8003434:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	431a      	orrs	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2220      	movs	r2, #32
 8003446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800345a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800345e:	4618      	mov	r0, r3
 8003460:	3728      	adds	r7, #40	; 0x28
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	fe00e800 	.word	0xfe00e800

0800346c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	607b      	str	r3, [r7, #4]
 8003476:	460b      	mov	r3, r1
 8003478:	817b      	strh	r3, [r7, #10]
 800347a:	4613      	mov	r3, r2
 800347c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800347e:	897b      	ldrh	r3, [r7, #10]
 8003480:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003484:	7a7b      	ldrb	r3, [r7, #9]
 8003486:	041b      	lsls	r3, r3, #16
 8003488:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800348c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	4313      	orrs	r3, r2
 8003496:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800349a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	0d5b      	lsrs	r3, r3, #21
 80034a6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80034aa:	4b08      	ldr	r3, [pc, #32]	; (80034cc <I2C_TransferConfig+0x60>)
 80034ac:	430b      	orrs	r3, r1
 80034ae:	43db      	mvns	r3, r3
 80034b0:	ea02 0103 	and.w	r1, r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80034be:	bf00      	nop
 80034c0:	371c      	adds	r7, #28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	03ff63ff 	.word	0x03ff63ff

080034d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d138      	bne.n	8003558 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e032      	b.n	800355a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2224      	movs	r2, #36	; 0x24
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0201 	bic.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003522:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6819      	ldr	r1, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	e000      	b.n	800355a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003558:	2302      	movs	r3, #2
  }
}
 800355a:	4618      	mov	r0, r3
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003566:	b480      	push	{r7}
 8003568:	b085      	sub	sp, #20
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b20      	cmp	r3, #32
 800357a:	d139      	bne.n	80035f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003586:	2302      	movs	r3, #2
 8003588:	e033      	b.n	80035f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2224      	movs	r2, #36	; 0x24
 8003596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	021b      	lsls	r3, r3, #8
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	e000      	b.n	80035f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035f0:	2302      	movs	r3, #2
  }
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
	...

08003600 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003608:	4b19      	ldr	r3, [pc, #100]	; (8003670 <HAL_PWREx_ConfigSupply+0x70>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b04      	cmp	r3, #4
 8003612:	d00a      	beq.n	800362a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003614:	4b16      	ldr	r3, [pc, #88]	; (8003670 <HAL_PWREx_ConfigSupply+0x70>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	429a      	cmp	r2, r3
 8003620:	d001      	beq.n	8003626 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e01f      	b.n	8003666 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	e01d      	b.n	8003666 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800362a:	4b11      	ldr	r3, [pc, #68]	; (8003670 <HAL_PWREx_ConfigSupply+0x70>)
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f023 0207 	bic.w	r2, r3, #7
 8003632:	490f      	ldr	r1, [pc, #60]	; (8003670 <HAL_PWREx_ConfigSupply+0x70>)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4313      	orrs	r3, r2
 8003638:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800363a:	f7fe fcbf 	bl	8001fbc <HAL_GetTick>
 800363e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003640:	e009      	b.n	8003656 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003642:	f7fe fcbb 	bl	8001fbc <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003650:	d901      	bls.n	8003656 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e007      	b.n	8003666 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <HAL_PWREx_ConfigSupply+0x70>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800365e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003662:	d1ee      	bne.n	8003642 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	58024800 	.word	0x58024800

08003674 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af02      	add	r7, sp, #8
 800367a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800367c:	f7fe fc9e 	bl	8001fbc <HAL_GetTick>
 8003680:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e05f      	b.n	800374c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d107      	bne.n	80036a8 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7fe f8e5 	bl	8001868 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800369e:	f241 3188 	movw	r1, #5000	; 0x1388
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fa43 	bl	8003b2e <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	021a      	lsls	r2, r3, #8
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	2120      	movs	r1, #32
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fa3b 	bl	8003b4a <QSPI_WaitFlagStateUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80036d8:	7afb      	ldrb	r3, [r7, #11]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d135      	bne.n	800374a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <HAL_QSPI_Init+0xe0>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6852      	ldr	r2, [r2, #4]
 80036ec:	0611      	lsls	r1, r2, #24
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68d2      	ldr	r2, [r2, #12]
 80036f2:	4311      	orrs	r1, r2
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	69d2      	ldr	r2, [r2, #28]
 80036f8:	4311      	orrs	r1, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6a12      	ldr	r2, [r2, #32]
 80036fe:	4311      	orrs	r1, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	430b      	orrs	r3, r1
 8003706:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	4b12      	ldr	r3, [pc, #72]	; (8003758 <HAL_QSPI_Init+0xe4>)
 8003710:	4013      	ands	r3, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6912      	ldr	r2, [r2, #16]
 8003716:	0411      	lsls	r1, r2, #16
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6952      	ldr	r2, [r2, #20]
 800371c:	4311      	orrs	r1, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6992      	ldr	r2, [r2, #24]
 8003722:	4311      	orrs	r1, r2
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	430b      	orrs	r3, r1
 800372a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800374a:	7afb      	ldrb	r3, [r7, #11]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	00ffff2f 	.word	0x00ffff2f
 8003758:	ffe0f8fe 	.word	0xffe0f8fe

0800375c <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e012      	b.n	8003794 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0201 	bic.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fe f928 	bl	80019d4 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b088      	sub	sp, #32
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80037a8:	f7fe fc08 	bl	8001fbc <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_QSPI_Command+0x22>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e048      	b.n	8003850 <HAL_QSPI_Command+0xb4>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d137      	bne.n	8003842 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	2200      	movs	r2, #0
 80037e8:	2120      	movs	r1, #32
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 f9ad 	bl	8003b4a <QSPI_WaitFlagStateUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80037f4:	7dfb      	ldrb	r3, [r7, #23]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d125      	bne.n	8003846 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80037fa:	2200      	movs	r2, #0
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f9da 	bl	8003bb8 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	2b00      	cmp	r3, #0
 800380a:	d115      	bne.n	8003838 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2201      	movs	r2, #1
 8003814:	2102      	movs	r1, #2
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 f997 	bl	8003b4a <QSPI_WaitFlagStateUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003820:	7dfb      	ldrb	r3, [r7, #23]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10f      	bne.n	8003846 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2202      	movs	r2, #2
 800382c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003836:	e006      	b.n	8003846 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003840:	e001      	b.n	8003846 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003842:	2302      	movs	r3, #2
 8003844:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800384e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08a      	sub	sp, #40	; 0x28
 800385c:	af02      	add	r7, sp, #8
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003868:	f7fe fba8 	bl	8001fbc <HAL_GetTick>
 800386c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3320      	adds	r3, #32
 8003874:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_QSPI_Transmit+0x2e>
 8003882:	2302      	movs	r3, #2
 8003884:	e076      	b.n	8003974 <HAL_QSPI_Transmit+0x11c>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b01      	cmp	r3, #1
 8003898:	d165      	bne.n	8003966 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d056      	beq.n	8003954 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2212      	movs	r2, #18
 80038aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80038da:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80038dc:	e01b      	b.n	8003916 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	2201      	movs	r2, #1
 80038e6:	2104      	movs	r1, #4
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f92e 	bl	8003b4a <QSPI_WaitFlagStateUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80038f2:	7ffb      	ldrb	r3, [r7, #31]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d113      	bne.n	8003920 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	781a      	ldrb	r2, [r3, #0]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	1e5a      	subs	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1df      	bne.n	80038de <HAL_QSPI_Transmit+0x86>
 800391e:	e000      	b.n	8003922 <HAL_QSPI_Transmit+0xca>
          break;
 8003920:	bf00      	nop
      }

      if (status == HAL_OK)
 8003922:	7ffb      	ldrb	r3, [r7, #31]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d110      	bne.n	800394a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2201      	movs	r2, #1
 8003930:	2102      	movs	r1, #2
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f909 	bl	8003b4a <QSPI_WaitFlagStateUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800393c:	7ffb      	ldrb	r3, [r7, #31]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d103      	bne.n	800394a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2202      	movs	r2, #2
 8003948:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003952:	e00a      	b.n	800396a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003958:	f043 0208 	orr.w	r2, r3, #8
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	77fb      	strb	r3, [r7, #31]
 8003964:	e001      	b.n	800396a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003966:	2302      	movs	r3, #2
 8003968:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8003972:	7ffb      	ldrb	r3, [r7, #31]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3720      	adds	r7, #32
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af02      	add	r7, sp, #8
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800398a:	f7fe fb17 	bl	8001fbc <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_QSPI_AutoPolling+0x24>
 800399c:	2302      	movs	r3, #2
 800399e:	e060      	b.n	8003a62 <HAL_QSPI_AutoPolling+0xe6>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d14f      	bne.n	8003a54 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2242      	movs	r2, #66	; 0x42
 80039be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2200      	movs	r2, #0
 80039ca:	2120      	movs	r1, #32
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 f8bc 	bl	8003b4a <QSPI_WaitFlagStateUntilTimeout>
 80039d2:	4603      	mov	r3, r0
 80039d4:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80039d6:	7dfb      	ldrb	r3, [r7, #23]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d13d      	bne.n	8003a58 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6852      	ldr	r2, [r2, #4]
 80039ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6892      	ldr	r2, [r2, #8]
 80039f8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003a12:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003a1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f8c8 	bl	8003bb8 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	2108      	movs	r1, #8
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f889 	bl	8003b4a <QSPI_WaitFlagStateUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2208      	movs	r2, #8
 8003a48:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a52:	e001      	b.n	8003a58 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003a54:	2302      	movs	r3, #2
 8003a56:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b088      	sub	sp, #32
 8003a6e:	af02      	add	r7, sp, #8
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003a76:	f7fe faa1 	bl	8001fbc <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_QSPI_MemoryMapped+0x22>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e04c      	b.n	8003b26 <HAL_QSPI_MemoryMapped+0xbc>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d13b      	bne.n	8003b18 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2282      	movs	r2, #130	; 0x82
 8003aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2120      	movs	r1, #32
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f845 	bl	8003b4a <QSPI_WaitFlagStateUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d128      	bne.n	8003b1c <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f023 0108 	bic.w	r1, r3, #8
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d110      	bne.n	8003b0a <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6812      	ldr	r2, [r2, #0]
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2210      	movs	r2, #16
 8003af8:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003b08:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8003b0a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f851 	bl	8003bb8 <QSPI_Config>
 8003b16:	e001      	b.n	8003b1c <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	603b      	str	r3, [r7, #0]
 8003b56:	4613      	mov	r3, r2
 8003b58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003b5a:	e01a      	b.n	8003b92 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b62:	d016      	beq.n	8003b92 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b64:	f7fe fa2a 	bl	8001fbc <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d302      	bcc.n	8003b7a <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10b      	bne.n	8003b92 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	f043 0201 	orr.w	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e00e      	b.n	8003bb0 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d1d6      	bne.n	8003b5c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d009      	beq.n	8003be0 <QSPI_Config+0x28>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003bd2:	d005      	beq.n	8003be0 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3a01      	subs	r2, #1
 8003bde:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80b9 	beq.w	8003d5c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d05f      	beq.n	8003cb2 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	6892      	ldr	r2, [r2, #8]
 8003bfa:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d031      	beq.n	8003c68 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c12:	431a      	orrs	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	049b      	lsls	r3, r3, #18
 8003c20:	431a      	orrs	r2, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	ea42 0103 	orr.w	r1, r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003c58:	f000 812e 	beq.w	8003eb8 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	6852      	ldr	r2, [r2, #4]
 8003c64:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8003c66:	e127      	b.n	8003eb8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	431a      	orrs	r2, r3
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c76:	431a      	orrs	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	049b      	lsls	r3, r3, #18
 8003c84:	431a      	orrs	r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	431a      	orrs	r2, r3
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	ea42 0103 	orr.w	r1, r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	615a      	str	r2, [r3, #20]
}
 8003cb0:	e102      	b.n	8003eb8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d02e      	beq.n	8003d18 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	049b      	lsls	r3, r3, #18
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	ea42 0103 	orr.w	r1, r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003d08:	f000 80d6 	beq.w	8003eb8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	6852      	ldr	r2, [r2, #4]
 8003d14:	619a      	str	r2, [r3, #24]
}
 8003d16:	e0cf      	b.n	8003eb8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	431a      	orrs	r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d26:	431a      	orrs	r2, r3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	049b      	lsls	r3, r3, #18
 8003d34:	431a      	orrs	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	ea42 0103 	orr.w	r1, r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	615a      	str	r2, [r3, #20]
}
 8003d5a:	e0ad      	b.n	8003eb8 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d058      	beq.n	8003e16 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	6892      	ldr	r2, [r2, #8]
 8003d6c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d02d      	beq.n	8003dd2 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d84:	431a      	orrs	r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	049b      	lsls	r3, r3, #18
 8003d92:	431a      	orrs	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	431a      	orrs	r2, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	ea42 0103 	orr.w	r1, r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003dc4:	d078      	beq.n	8003eb8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	6852      	ldr	r2, [r2, #4]
 8003dce:	619a      	str	r2, [r3, #24]
}
 8003dd0:	e072      	b.n	8003eb8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de0:	431a      	orrs	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	431a      	orrs	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	049b      	lsls	r3, r3, #18
 8003dee:	431a      	orrs	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	431a      	orrs	r2, r3
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	431a      	orrs	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	ea42 0103 	orr.w	r1, r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	615a      	str	r2, [r3, #20]
}
 8003e14:	e050      	b.n	8003eb8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d02a      	beq.n	8003e74 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	431a      	orrs	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	431a      	orrs	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	049b      	lsls	r3, r3, #18
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	431a      	orrs	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	ea42 0103 	orr.w	r1, r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003e66:	d027      	beq.n	8003eb8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	6852      	ldr	r2, [r2, #4]
 8003e70:	619a      	str	r2, [r3, #24]
}
 8003e72:	e021      	b.n	8003eb8 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d01d      	beq.n	8003eb8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	431a      	orrs	r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	431a      	orrs	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	049b      	lsls	r3, r3, #18
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	ea42 0103 	orr.w	r1, r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	615a      	str	r2, [r3, #20]
}
 8003eb8:	bf00      	nop
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 8003eca:	4b89      	ldr	r3, [pc, #548]	; (80040f0 <HAL_RCC_DeInit+0x22c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	2b06      	cmp	r3, #6
 8003ed4:	d80f      	bhi.n	8003ef6 <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8003ed6:	4b86      	ldr	r3, [pc, #536]	; (80040f0 <HAL_RCC_DeInit+0x22c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f023 030f 	bic.w	r3, r3, #15
 8003ede:	4a84      	ldr	r2, [pc, #528]	; (80040f0 <HAL_RCC_DeInit+0x22c>)
 8003ee0:	f043 0307 	orr.w	r3, r3, #7
 8003ee4:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8003ee6:	4b82      	ldr	r3, [pc, #520]	; (80040f0 <HAL_RCC_DeInit+0x22c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	2b07      	cmp	r3, #7
 8003ef0:	d001      	beq.n	8003ef6 <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e0f7      	b.n	80040e6 <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003ef6:	f7fe f861 	bl	8001fbc <HAL_GetTick>
 8003efa:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003efc:	4b7d      	ldr	r3, [pc, #500]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a7c      	ldr	r2, [pc, #496]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f0a:	f7fe f857 	bl	8001fbc <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e0e4      	b.n	80040e6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f1c:	4b75      	ldr	r3, [pc, #468]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0f0      	beq.n	8003f0a <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 8003f28:	4b72      	ldr	r3, [pc, #456]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	4a71      	ldr	r2, [pc, #452]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8003f2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f32:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003f34:	4b6f      	ldr	r3, [pc, #444]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 8003f3a:	4b6f      	ldr	r3, [pc, #444]	; (80040f8 <HAL_RCC_DeInit+0x234>)
 8003f3c:	4a6f      	ldr	r2, [pc, #444]	; (80040fc <HAL_RCC_DeInit+0x238>)
 8003f3e:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
 8003f40:	4b6f      	ldr	r3, [pc, #444]	; (8004100 <HAL_RCC_DeInit+0x23c>)
 8003f42:	4a6e      	ldr	r2, [pc, #440]	; (80040fc <HAL_RCC_DeInit+0x238>)
 8003f44:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f46:	4b6f      	ldr	r3, [pc, #444]	; (8004104 <HAL_RCC_DeInit+0x240>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fd ffec 	bl	8001f28 <HAL_InitTick>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e0c5      	b.n	80040e6 <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003f5a:	f7fe f82f 	bl	8001fbc <HAL_GetTick>
 8003f5e:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8003f60:	e00a      	b.n	8003f78 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f62:	f7fe f82b 	bl	8001fbc <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e0b6      	b.n	80040e6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8003f78:	4b5e      	ldr	r3, [pc, #376]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1ee      	bne.n	8003f62 <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003f84:	f7fe f81a 	bl	8001fbc <HAL_GetTick>
 8003f88:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON | RCC_CR_HSIDIV | RCC_CR_HSIDIVF | RCC_CR_CSION | RCC_CR_CSIKERON  \
 8003f8a:	4b5a      	ldr	r3, [pc, #360]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4959      	ldr	r1, [pc, #356]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8003f90:	4b5d      	ldr	r3, [pc, #372]	; (8004108 <HAL_RCC_DeInit+0x244>)
 8003f92:	4013      	ands	r3, r2
 8003f94:	600b      	str	r3, [r1, #0]
            | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f98:	f7fe f810 	bl	8001fbc <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b64      	cmp	r3, #100	; 0x64
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e09d      	b.n	80040e6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003faa:	4b52      	ldr	r3, [pc, #328]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003fb6:	f7fe f801 	bl	8001fbc <HAL_GetTick>
 8003fba:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8003fbc:	4b4d      	ldr	r3, [pc, #308]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a4c      	ldr	r2, [pc, #304]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8003fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fc6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fca:	f7fd fff7 	bl	8001fbc <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e084      	b.n	80040e6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003fdc:	4b45      	ldr	r3, [pc, #276]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f0      	bne.n	8003fca <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003fe8:	f7fd ffe8 	bl	8001fbc <HAL_GetTick>
 8003fec:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 8003fee:	4b41      	ldr	r3, [pc, #260]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a40      	ldr	r2, [pc, #256]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8003ff4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ff8:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ffc:	f7fd ffde 	bl	8001fbc <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e06b      	b.n	80040e6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 800400e:	4b39      	ldr	r3, [pc, #228]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800401a:	f7fd ffcf 	bl	8001fbc <HAL_GetTick>
 800401e:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 8004020:	4b34      	ldr	r3, [pc, #208]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a33      	ldr	r2, [pc, #204]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8004026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800402a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 800402c:	e008      	b.n	8004040 <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402e:	f7fd ffc5 	bl	8001fbc <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e052      	b.n	80040e6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8004040:	4b2c      	ldr	r3, [pc, #176]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f0      	bne.n	800402e <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 800404c:	4b29      	ldr	r3, [pc, #164]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 800404e:	2200      	movs	r2, #0
 8004050:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 8004052:	4b28      	ldr	r3, [pc, #160]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8004054:	2200      	movs	r2, #0
 8004056:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 8004058:	4b26      	ldr	r3, [pc, #152]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 800405a:	2200      	movs	r2, #0
 800405c:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM1_5 | RCC_PLLCKSELR_DIVM2_5 | RCC_PLLCKSELR_DIVM3_5;
 800405e:	4b25      	ldr	r3, [pc, #148]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8004060:	4a2a      	ldr	r2, [pc, #168]	; (800410c <HAL_RCC_DeInit+0x248>)
 8004062:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 8004064:	4b23      	ldr	r3, [pc, #140]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8004066:	4a2a      	ldr	r2, [pc, #168]	; (8004110 <HAL_RCC_DeInit+0x24c>)
 8004068:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 800406a:	4b22      	ldr	r3, [pc, #136]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 800406c:	4a29      	ldr	r2, [pc, #164]	; (8004114 <HAL_RCC_DeInit+0x250>)
 800406e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 8004070:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8004072:	2200      	movs	r2, #0
 8004074:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 8004076:	4b1f      	ldr	r3, [pc, #124]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8004078:	4a26      	ldr	r2, [pc, #152]	; (8004114 <HAL_RCC_DeInit+0x250>)
 800407a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 800407c:	4b1d      	ldr	r3, [pc, #116]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 800407e:	2200      	movs	r2, #0
 8004080:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 8004082:	4b1c      	ldr	r3, [pc, #112]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8004084:	4a23      	ldr	r2, [pc, #140]	; (8004114 <HAL_RCC_DeInit+0x250>)
 8004086:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 8004088:	4b1a      	ldr	r3, [pc, #104]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 800408a:	2200      	movs	r2, #0
 800408c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800408e:	4b19      	ldr	r3, [pc, #100]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a18      	ldr	r2, [pc, #96]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 8004094:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004098:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 800409a:	4b16      	ldr	r3, [pc, #88]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 800409c:	2200      	movs	r2, #0
 800409e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 80040a0:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 80040a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040a6:	669a      	str	r2, [r3, #104]	; 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 80040a8:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 80040aa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80040ae:	4a11      	ldr	r2, [pc, #68]	; (80040f4 <HAL_RCC_DeInit+0x230>)
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b4:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 80040b8:	4b0d      	ldr	r3, [pc, #52]	; (80040f0 <HAL_RCC_DeInit+0x22c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00f      	beq.n	80040e4 <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 80040c4:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <HAL_RCC_DeInit+0x22c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f023 030f 	bic.w	r3, r3, #15
 80040cc:	4a08      	ldr	r2, [pc, #32]	; (80040f0 <HAL_RCC_DeInit+0x22c>)
 80040ce:	f043 0307 	orr.w	r3, r3, #7
 80040d2:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 80040d4:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <HAL_RCC_DeInit+0x22c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	2b07      	cmp	r3, #7
 80040de:	d001      	beq.n	80040e4 <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <HAL_RCC_DeInit+0x222>
    }

  }

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	52002000 	.word	0x52002000
 80040f4:	58024400 	.word	0x58024400
 80040f8:	20000004 	.word	0x20000004
 80040fc:	03d09000 	.word	0x03d09000
 8004100:	20000008 	.word	0x20000008
 8004104:	2000000c 	.word	0x2000000c
 8004108:	fff6ed45 	.word	0xfff6ed45
 800410c:	02020200 	.word	0x02020200
 8004110:	01ff0000 	.word	0x01ff0000
 8004114:	01010280 	.word	0x01010280

08004118 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08c      	sub	sp, #48	; 0x30
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d102      	bne.n	800412c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f000 bc48 	b.w	80049bc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 8088 	beq.w	800424a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800413a:	4b99      	ldr	r3, [pc, #612]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004142:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004144:	4b96      	ldr	r3, [pc, #600]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 8004146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004148:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800414a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414c:	2b10      	cmp	r3, #16
 800414e:	d007      	beq.n	8004160 <HAL_RCC_OscConfig+0x48>
 8004150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004152:	2b18      	cmp	r3, #24
 8004154:	d111      	bne.n	800417a <HAL_RCC_OscConfig+0x62>
 8004156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004158:	f003 0303 	and.w	r3, r3, #3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d10c      	bne.n	800417a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004160:	4b8f      	ldr	r3, [pc, #572]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d06d      	beq.n	8004248 <HAL_RCC_OscConfig+0x130>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d169      	bne.n	8004248 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	f000 bc21 	b.w	80049bc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004182:	d106      	bne.n	8004192 <HAL_RCC_OscConfig+0x7a>
 8004184:	4b86      	ldr	r3, [pc, #536]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a85      	ldr	r2, [pc, #532]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 800418a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	e02e      	b.n	80041f0 <HAL_RCC_OscConfig+0xd8>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10c      	bne.n	80041b4 <HAL_RCC_OscConfig+0x9c>
 800419a:	4b81      	ldr	r3, [pc, #516]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a80      	ldr	r2, [pc, #512]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 80041a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	4b7e      	ldr	r3, [pc, #504]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a7d      	ldr	r2, [pc, #500]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 80041ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	e01d      	b.n	80041f0 <HAL_RCC_OscConfig+0xd8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041bc:	d10c      	bne.n	80041d8 <HAL_RCC_OscConfig+0xc0>
 80041be:	4b78      	ldr	r3, [pc, #480]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a77      	ldr	r2, [pc, #476]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 80041c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	4b75      	ldr	r3, [pc, #468]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a74      	ldr	r2, [pc, #464]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 80041d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	e00b      	b.n	80041f0 <HAL_RCC_OscConfig+0xd8>
 80041d8:	4b71      	ldr	r3, [pc, #452]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a70      	ldr	r2, [pc, #448]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 80041de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	4b6e      	ldr	r3, [pc, #440]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a6d      	ldr	r2, [pc, #436]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 80041ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d013      	beq.n	8004220 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f8:	f7fd fee0 	bl	8001fbc <HAL_GetTick>
 80041fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004200:	f7fd fedc 	bl	8001fbc <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	; 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e3d4      	b.n	80049bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004212:	4b63      	ldr	r3, [pc, #396]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0xe8>
 800421e:	e014      	b.n	800424a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fd fecc 	bl	8001fbc <HAL_GetTick>
 8004224:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004228:	f7fd fec8 	bl	8001fbc <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	; 0x64
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e3c0      	b.n	80049bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800423a:	4b59      	ldr	r3, [pc, #356]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x110>
 8004246:	e000      	b.n	800424a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 80ca 	beq.w	80043ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004258:	4b51      	ldr	r3, [pc, #324]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004260:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004262:	4b4f      	ldr	r3, [pc, #316]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d007      	beq.n	800427e <HAL_RCC_OscConfig+0x166>
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	2b18      	cmp	r3, #24
 8004272:	d156      	bne.n	8004322 <HAL_RCC_OscConfig+0x20a>
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d151      	bne.n	8004322 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800427e:	4b48      	ldr	r3, [pc, #288]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	d005      	beq.n	8004296 <HAL_RCC_OscConfig+0x17e>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e392      	b.n	80049bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004296:	4b42      	ldr	r3, [pc, #264]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f023 0219 	bic.w	r2, r3, #25
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	493f      	ldr	r1, [pc, #252]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a8:	f7fd fe88 	bl	8001fbc <HAL_GetTick>
 80042ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b0:	f7fd fe84 	bl	8001fbc <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e37c      	b.n	80049bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042c2:	4b37      	ldr	r3, [pc, #220]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0f0      	beq.n	80042b0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ce:	f7fd fea5 	bl	800201c <HAL_GetREVID>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80042d8:	4293      	cmp	r3, r2
 80042da:	d817      	bhi.n	800430c <HAL_RCC_OscConfig+0x1f4>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	2b40      	cmp	r3, #64	; 0x40
 80042e2:	d108      	bne.n	80042f6 <HAL_RCC_OscConfig+0x1de>
 80042e4:	4b2e      	ldr	r3, [pc, #184]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80042ec:	4a2c      	ldr	r2, [pc, #176]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 80042ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042f4:	e07a      	b.n	80043ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f6:	4b2a      	ldr	r3, [pc, #168]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	031b      	lsls	r3, r3, #12
 8004304:	4926      	ldr	r1, [pc, #152]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 8004306:	4313      	orrs	r3, r2
 8004308:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800430a:	e06f      	b.n	80043ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800430c:	4b24      	ldr	r3, [pc, #144]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	061b      	lsls	r3, r3, #24
 800431a:	4921      	ldr	r1, [pc, #132]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 800431c:	4313      	orrs	r3, r2
 800431e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004320:	e064      	b.n	80043ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d047      	beq.n	80043ba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800432a:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f023 0219 	bic.w	r2, r3, #25
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	491a      	ldr	r1, [pc, #104]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 8004338:	4313      	orrs	r3, r2
 800433a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fd fe3e 	bl	8001fbc <HAL_GetTick>
 8004340:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004344:	f7fd fe3a 	bl	8001fbc <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e332      	b.n	80049bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004356:	4b12      	ldr	r3, [pc, #72]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004362:	f7fd fe5b 	bl	800201c <HAL_GetREVID>
 8004366:	4603      	mov	r3, r0
 8004368:	f241 0203 	movw	r2, #4099	; 0x1003
 800436c:	4293      	cmp	r3, r2
 800436e:	d819      	bhi.n	80043a4 <HAL_RCC_OscConfig+0x28c>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	2b40      	cmp	r3, #64	; 0x40
 8004376:	d108      	bne.n	800438a <HAL_RCC_OscConfig+0x272>
 8004378:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004380:	4a07      	ldr	r2, [pc, #28]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 8004382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004386:	6053      	str	r3, [r2, #4]
 8004388:	e030      	b.n	80043ec <HAL_RCC_OscConfig+0x2d4>
 800438a:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	031b      	lsls	r3, r3, #12
 8004398:	4901      	ldr	r1, [pc, #4]	; (80043a0 <HAL_RCC_OscConfig+0x288>)
 800439a:	4313      	orrs	r3, r2
 800439c:	604b      	str	r3, [r1, #4]
 800439e:	e025      	b.n	80043ec <HAL_RCC_OscConfig+0x2d4>
 80043a0:	58024400 	.word	0x58024400
 80043a4:	4b9a      	ldr	r3, [pc, #616]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	061b      	lsls	r3, r3, #24
 80043b2:	4997      	ldr	r1, [pc, #604]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	604b      	str	r3, [r1, #4]
 80043b8:	e018      	b.n	80043ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ba:	4b95      	ldr	r3, [pc, #596]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a94      	ldr	r2, [pc, #592]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c6:	f7fd fdf9 	bl	8001fbc <HAL_GetTick>
 80043ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ce:	f7fd fdf5 	bl	8001fbc <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e2ed      	b.n	80049bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043e0:	4b8b      	ldr	r3, [pc, #556]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1f0      	bne.n	80043ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 80a9 	beq.w	800454c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043fa:	4b85      	ldr	r3, [pc, #532]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004402:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004404:	4b82      	ldr	r3, [pc, #520]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 8004406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004408:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	2b08      	cmp	r3, #8
 800440e:	d007      	beq.n	8004420 <HAL_RCC_OscConfig+0x308>
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	2b18      	cmp	r3, #24
 8004414:	d13a      	bne.n	800448c <HAL_RCC_OscConfig+0x374>
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	2b01      	cmp	r3, #1
 800441e:	d135      	bne.n	800448c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004420:	4b7b      	ldr	r3, [pc, #492]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <HAL_RCC_OscConfig+0x320>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	2b80      	cmp	r3, #128	; 0x80
 8004432:	d001      	beq.n	8004438 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e2c1      	b.n	80049bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004438:	f7fd fdf0 	bl	800201c <HAL_GetREVID>
 800443c:	4603      	mov	r3, r0
 800443e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004442:	4293      	cmp	r3, r2
 8004444:	d817      	bhi.n	8004476 <HAL_RCC_OscConfig+0x35e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	2b20      	cmp	r3, #32
 800444c:	d108      	bne.n	8004460 <HAL_RCC_OscConfig+0x348>
 800444e:	4b70      	ldr	r3, [pc, #448]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004456:	4a6e      	ldr	r2, [pc, #440]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 8004458:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800445c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800445e:	e075      	b.n	800454c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004460:	4b6b      	ldr	r3, [pc, #428]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	069b      	lsls	r3, r3, #26
 800446e:	4968      	ldr	r1, [pc, #416]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 8004470:	4313      	orrs	r3, r2
 8004472:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004474:	e06a      	b.n	800454c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004476:	4b66      	ldr	r3, [pc, #408]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	061b      	lsls	r3, r3, #24
 8004484:	4962      	ldr	r1, [pc, #392]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 8004486:	4313      	orrs	r3, r2
 8004488:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800448a:	e05f      	b.n	800454c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d042      	beq.n	800451a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004494:	4b5e      	ldr	r3, [pc, #376]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a5d      	ldr	r2, [pc, #372]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 800449a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800449e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a0:	f7fd fd8c 	bl	8001fbc <HAL_GetTick>
 80044a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80044a8:	f7fd fd88 	bl	8001fbc <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e280      	b.n	80049bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044ba:	4b55      	ldr	r3, [pc, #340]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044c6:	f7fd fda9 	bl	800201c <HAL_GetREVID>
 80044ca:	4603      	mov	r3, r0
 80044cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d817      	bhi.n	8004504 <HAL_RCC_OscConfig+0x3ec>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	2b20      	cmp	r3, #32
 80044da:	d108      	bne.n	80044ee <HAL_RCC_OscConfig+0x3d6>
 80044dc:	4b4c      	ldr	r3, [pc, #304]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80044e4:	4a4a      	ldr	r2, [pc, #296]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 80044e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044ea:	6053      	str	r3, [r2, #4]
 80044ec:	e02e      	b.n	800454c <HAL_RCC_OscConfig+0x434>
 80044ee:	4b48      	ldr	r3, [pc, #288]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	069b      	lsls	r3, r3, #26
 80044fc:	4944      	ldr	r1, [pc, #272]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	604b      	str	r3, [r1, #4]
 8004502:	e023      	b.n	800454c <HAL_RCC_OscConfig+0x434>
 8004504:	4b42      	ldr	r3, [pc, #264]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	061b      	lsls	r3, r3, #24
 8004512:	493f      	ldr	r1, [pc, #252]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 8004514:	4313      	orrs	r3, r2
 8004516:	60cb      	str	r3, [r1, #12]
 8004518:	e018      	b.n	800454c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800451a:	4b3d      	ldr	r3, [pc, #244]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a3c      	ldr	r2, [pc, #240]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 8004520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004526:	f7fd fd49 	bl	8001fbc <HAL_GetTick>
 800452a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800452e:	f7fd fd45 	bl	8001fbc <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e23d      	b.n	80049bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004540:	4b33      	ldr	r3, [pc, #204]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f0      	bne.n	800452e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d036      	beq.n	80045c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d019      	beq.n	8004594 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004560:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 8004562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004564:	4a2a      	ldr	r2, [pc, #168]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456c:	f7fd fd26 	bl	8001fbc <HAL_GetTick>
 8004570:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004574:	f7fd fd22 	bl	8001fbc <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e21a      	b.n	80049bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004586:	4b22      	ldr	r3, [pc, #136]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 8004588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0x45c>
 8004592:	e018      	b.n	80045c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004594:	4b1e      	ldr	r3, [pc, #120]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 8004596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004598:	4a1d      	ldr	r2, [pc, #116]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a0:	f7fd fd0c 	bl	8001fbc <HAL_GetTick>
 80045a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a8:	f7fd fd08 	bl	8001fbc <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e200      	b.n	80049bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045ba:	4b15      	ldr	r3, [pc, #84]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 80045bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d039      	beq.n	8004646 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d01c      	beq.n	8004614 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045da:	4b0d      	ldr	r3, [pc, #52]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a0c      	ldr	r2, [pc, #48]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 80045e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045e6:	f7fd fce9 	bl	8001fbc <HAL_GetTick>
 80045ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045ee:	f7fd fce5 	bl	8001fbc <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e1dd      	b.n	80049bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <HAL_RCC_OscConfig+0x4f8>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x4d6>
 800460c:	e01b      	b.n	8004646 <HAL_RCC_OscConfig+0x52e>
 800460e:	bf00      	nop
 8004610:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004614:	4b9b      	ldr	r3, [pc, #620]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a9a      	ldr	r2, [pc, #616]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 800461a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800461e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004620:	f7fd fccc 	bl	8001fbc <HAL_GetTick>
 8004624:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004628:	f7fd fcc8 	bl	8001fbc <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e1c0      	b.n	80049bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800463a:	4b92      	ldr	r3, [pc, #584]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 8081 	beq.w	8004756 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004654:	4b8c      	ldr	r3, [pc, #560]	; (8004888 <HAL_RCC_OscConfig+0x770>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a8b      	ldr	r2, [pc, #556]	; (8004888 <HAL_RCC_OscConfig+0x770>)
 800465a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004660:	f7fd fcac 	bl	8001fbc <HAL_GetTick>
 8004664:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004668:	f7fd fca8 	bl	8001fbc <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b64      	cmp	r3, #100	; 0x64
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e1a0      	b.n	80049bc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800467a:	4b83      	ldr	r3, [pc, #524]	; (8004888 <HAL_RCC_OscConfig+0x770>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0f0      	beq.n	8004668 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d106      	bne.n	800469c <HAL_RCC_OscConfig+0x584>
 800468e:	4b7d      	ldr	r3, [pc, #500]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	4a7c      	ldr	r2, [pc, #496]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	6713      	str	r3, [r2, #112]	; 0x70
 800469a:	e02d      	b.n	80046f8 <HAL_RCC_OscConfig+0x5e0>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10c      	bne.n	80046be <HAL_RCC_OscConfig+0x5a6>
 80046a4:	4b77      	ldr	r3, [pc, #476]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 80046a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a8:	4a76      	ldr	r2, [pc, #472]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 80046aa:	f023 0301 	bic.w	r3, r3, #1
 80046ae:	6713      	str	r3, [r2, #112]	; 0x70
 80046b0:	4b74      	ldr	r3, [pc, #464]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	4a73      	ldr	r2, [pc, #460]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 80046b6:	f023 0304 	bic.w	r3, r3, #4
 80046ba:	6713      	str	r3, [r2, #112]	; 0x70
 80046bc:	e01c      	b.n	80046f8 <HAL_RCC_OscConfig+0x5e0>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b05      	cmp	r3, #5
 80046c4:	d10c      	bne.n	80046e0 <HAL_RCC_OscConfig+0x5c8>
 80046c6:	4b6f      	ldr	r3, [pc, #444]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 80046c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ca:	4a6e      	ldr	r2, [pc, #440]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 80046cc:	f043 0304 	orr.w	r3, r3, #4
 80046d0:	6713      	str	r3, [r2, #112]	; 0x70
 80046d2:	4b6c      	ldr	r3, [pc, #432]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d6:	4a6b      	ldr	r2, [pc, #428]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 80046d8:	f043 0301 	orr.w	r3, r3, #1
 80046dc:	6713      	str	r3, [r2, #112]	; 0x70
 80046de:	e00b      	b.n	80046f8 <HAL_RCC_OscConfig+0x5e0>
 80046e0:	4b68      	ldr	r3, [pc, #416]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 80046e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e4:	4a67      	ldr	r2, [pc, #412]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 80046e6:	f023 0301 	bic.w	r3, r3, #1
 80046ea:	6713      	str	r3, [r2, #112]	; 0x70
 80046ec:	4b65      	ldr	r3, [pc, #404]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 80046ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f0:	4a64      	ldr	r2, [pc, #400]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 80046f2:	f023 0304 	bic.w	r3, r3, #4
 80046f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d015      	beq.n	800472c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004700:	f7fd fc5c 	bl	8001fbc <HAL_GetTick>
 8004704:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004706:	e00a      	b.n	800471e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004708:	f7fd fc58 	bl	8001fbc <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f241 3288 	movw	r2, #5000	; 0x1388
 8004716:	4293      	cmp	r3, r2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e14e      	b.n	80049bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800471e:	4b59      	ldr	r3, [pc, #356]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 8004720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0ee      	beq.n	8004708 <HAL_RCC_OscConfig+0x5f0>
 800472a:	e014      	b.n	8004756 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472c:	f7fd fc46 	bl	8001fbc <HAL_GetTick>
 8004730:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004732:	e00a      	b.n	800474a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004734:	f7fd fc42 	bl	8001fbc <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004742:	4293      	cmp	r3, r2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e138      	b.n	80049bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800474a:	4b4e      	ldr	r3, [pc, #312]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1ee      	bne.n	8004734 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 812d 	beq.w	80049ba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004760:	4b48      	ldr	r3, [pc, #288]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004768:	2b18      	cmp	r3, #24
 800476a:	f000 80bd 	beq.w	80048e8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	2b02      	cmp	r3, #2
 8004774:	f040 809e 	bne.w	80048b4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004778:	4b42      	ldr	r3, [pc, #264]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a41      	ldr	r2, [pc, #260]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 800477e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fd fc1a 	bl	8001fbc <HAL_GetTick>
 8004788:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478c:	f7fd fc16 	bl	8001fbc <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e10e      	b.n	80049bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800479e:	4b39      	ldr	r3, [pc, #228]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047aa:	4b36      	ldr	r3, [pc, #216]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 80047ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047ae:	4b37      	ldr	r3, [pc, #220]	; (800488c <HAL_RCC_OscConfig+0x774>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80047ba:	0112      	lsls	r2, r2, #4
 80047bc:	430a      	orrs	r2, r1
 80047be:	4931      	ldr	r1, [pc, #196]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	628b      	str	r3, [r1, #40]	; 0x28
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c8:	3b01      	subs	r3, #1
 80047ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d2:	3b01      	subs	r3, #1
 80047d4:	025b      	lsls	r3, r3, #9
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	431a      	orrs	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	3b01      	subs	r3, #1
 80047e0:	041b      	lsls	r3, r3, #16
 80047e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ec:	3b01      	subs	r3, #1
 80047ee:	061b      	lsls	r3, r3, #24
 80047f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047f4:	4923      	ldr	r1, [pc, #140]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80047fa:	4b22      	ldr	r3, [pc, #136]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fe:	4a21      	ldr	r2, [pc, #132]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 8004800:	f023 0301 	bic.w	r3, r3, #1
 8004804:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004806:	4b1f      	ldr	r3, [pc, #124]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 8004808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800480a:	4b21      	ldr	r3, [pc, #132]	; (8004890 <HAL_RCC_OscConfig+0x778>)
 800480c:	4013      	ands	r3, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004812:	00d2      	lsls	r2, r2, #3
 8004814:	491b      	ldr	r1, [pc, #108]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 8004816:	4313      	orrs	r3, r2
 8004818:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800481a:	4b1a      	ldr	r3, [pc, #104]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 800481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481e:	f023 020c 	bic.w	r2, r3, #12
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	4917      	ldr	r1, [pc, #92]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 8004828:	4313      	orrs	r3, r2
 800482a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800482c:	4b15      	ldr	r3, [pc, #84]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	f023 0202 	bic.w	r2, r3, #2
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004838:	4912      	ldr	r1, [pc, #72]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 800483a:	4313      	orrs	r3, r2
 800483c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800483e:	4b11      	ldr	r3, [pc, #68]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	4a10      	ldr	r2, [pc, #64]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 8004844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004848:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800484a:	4b0e      	ldr	r3, [pc, #56]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	4a0d      	ldr	r2, [pc, #52]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 8004850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004854:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004856:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485a:	4a0a      	ldr	r2, [pc, #40]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 800485c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004860:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004862:	4b08      	ldr	r3, [pc, #32]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	4a07      	ldr	r2, [pc, #28]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800486e:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a04      	ldr	r2, [pc, #16]	; (8004884 <HAL_RCC_OscConfig+0x76c>)
 8004874:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487a:	f7fd fb9f 	bl	8001fbc <HAL_GetTick>
 800487e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004880:	e011      	b.n	80048a6 <HAL_RCC_OscConfig+0x78e>
 8004882:	bf00      	nop
 8004884:	58024400 	.word	0x58024400
 8004888:	58024800 	.word	0x58024800
 800488c:	fffffc0c 	.word	0xfffffc0c
 8004890:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004894:	f7fd fb92 	bl	8001fbc <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e08a      	b.n	80049bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048a6:	4b47      	ldr	r3, [pc, #284]	; (80049c4 <HAL_RCC_OscConfig+0x8ac>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0x77c>
 80048b2:	e082      	b.n	80049ba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b4:	4b43      	ldr	r3, [pc, #268]	; (80049c4 <HAL_RCC_OscConfig+0x8ac>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a42      	ldr	r2, [pc, #264]	; (80049c4 <HAL_RCC_OscConfig+0x8ac>)
 80048ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c0:	f7fd fb7c 	bl	8001fbc <HAL_GetTick>
 80048c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c8:	f7fd fb78 	bl	8001fbc <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e070      	b.n	80049bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048da:	4b3a      	ldr	r3, [pc, #232]	; (80049c4 <HAL_RCC_OscConfig+0x8ac>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x7b0>
 80048e6:	e068      	b.n	80049ba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80048e8:	4b36      	ldr	r3, [pc, #216]	; (80049c4 <HAL_RCC_OscConfig+0x8ac>)
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80048ee:	4b35      	ldr	r3, [pc, #212]	; (80049c4 <HAL_RCC_OscConfig+0x8ac>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d031      	beq.n	8004960 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f003 0203 	and.w	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004906:	429a      	cmp	r2, r3
 8004908:	d12a      	bne.n	8004960 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	091b      	lsrs	r3, r3, #4
 800490e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004916:	429a      	cmp	r2, r3
 8004918:	d122      	bne.n	8004960 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004926:	429a      	cmp	r2, r3
 8004928:	d11a      	bne.n	8004960 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	0a5b      	lsrs	r3, r3, #9
 800492e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004936:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004938:	429a      	cmp	r2, r3
 800493a:	d111      	bne.n	8004960 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	0c1b      	lsrs	r3, r3, #16
 8004940:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004948:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800494a:	429a      	cmp	r2, r3
 800494c:	d108      	bne.n	8004960 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	0e1b      	lsrs	r3, r3, #24
 8004952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800495c:	429a      	cmp	r2, r3
 800495e:	d001      	beq.n	8004964 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e02b      	b.n	80049bc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004964:	4b17      	ldr	r3, [pc, #92]	; (80049c4 <HAL_RCC_OscConfig+0x8ac>)
 8004966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004968:	08db      	lsrs	r3, r3, #3
 800496a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800496e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	429a      	cmp	r2, r3
 8004978:	d01f      	beq.n	80049ba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800497a:	4b12      	ldr	r3, [pc, #72]	; (80049c4 <HAL_RCC_OscConfig+0x8ac>)
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	4a11      	ldr	r2, [pc, #68]	; (80049c4 <HAL_RCC_OscConfig+0x8ac>)
 8004980:	f023 0301 	bic.w	r3, r3, #1
 8004984:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004986:	f7fd fb19 	bl	8001fbc <HAL_GetTick>
 800498a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800498c:	bf00      	nop
 800498e:	f7fd fb15 	bl	8001fbc <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	4293      	cmp	r3, r2
 8004998:	d0f9      	beq.n	800498e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800499a:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <HAL_RCC_OscConfig+0x8ac>)
 800499c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800499e:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <HAL_RCC_OscConfig+0x8b0>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80049a6:	00d2      	lsls	r2, r2, #3
 80049a8:	4906      	ldr	r1, [pc, #24]	; (80049c4 <HAL_RCC_OscConfig+0x8ac>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80049ae:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <HAL_RCC_OscConfig+0x8ac>)
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	4a04      	ldr	r2, [pc, #16]	; (80049c4 <HAL_RCC_OscConfig+0x8ac>)
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3730      	adds	r7, #48	; 0x30
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	58024400 	.word	0x58024400
 80049c8:	ffff0007 	.word	0xffff0007

080049cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e19c      	b.n	8004d1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049e0:	4b8a      	ldr	r3, [pc, #552]	; (8004c0c <HAL_RCC_ClockConfig+0x240>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d910      	bls.n	8004a10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ee:	4b87      	ldr	r3, [pc, #540]	; (8004c0c <HAL_RCC_ClockConfig+0x240>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f023 020f 	bic.w	r2, r3, #15
 80049f6:	4985      	ldr	r1, [pc, #532]	; (8004c0c <HAL_RCC_ClockConfig+0x240>)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fe:	4b83      	ldr	r3, [pc, #524]	; (8004c0c <HAL_RCC_ClockConfig+0x240>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d001      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e184      	b.n	8004d1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d010      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	4b7b      	ldr	r3, [pc, #492]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d908      	bls.n	8004a3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a2c:	4b78      	ldr	r3, [pc, #480]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	4975      	ldr	r1, [pc, #468]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d010      	beq.n	8004a6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695a      	ldr	r2, [r3, #20]
 8004a4e:	4b70      	ldr	r3, [pc, #448]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d908      	bls.n	8004a6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a5a:	4b6d      	ldr	r3, [pc, #436]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	496a      	ldr	r1, [pc, #424]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0310 	and.w	r3, r3, #16
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d010      	beq.n	8004a9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699a      	ldr	r2, [r3, #24]
 8004a7c:	4b64      	ldr	r3, [pc, #400]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d908      	bls.n	8004a9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a88:	4b61      	ldr	r3, [pc, #388]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	495e      	ldr	r1, [pc, #376]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d010      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69da      	ldr	r2, [r3, #28]
 8004aaa:	4b59      	ldr	r3, [pc, #356]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d908      	bls.n	8004ac8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ab6:	4b56      	ldr	r3, [pc, #344]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	4953      	ldr	r1, [pc, #332]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d010      	beq.n	8004af6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	4b4d      	ldr	r3, [pc, #308]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	f003 030f 	and.w	r3, r3, #15
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d908      	bls.n	8004af6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae4:	4b4a      	ldr	r3, [pc, #296]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	f023 020f 	bic.w	r2, r3, #15
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4947      	ldr	r1, [pc, #284]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d055      	beq.n	8004bae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004b02:	4b43      	ldr	r3, [pc, #268]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	4940      	ldr	r1, [pc, #256]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d107      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b1c:	4b3c      	ldr	r3, [pc, #240]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d121      	bne.n	8004b6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e0f6      	b.n	8004d1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d107      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b34:	4b36      	ldr	r3, [pc, #216]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d115      	bne.n	8004b6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0ea      	b.n	8004d1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d107      	bne.n	8004b5c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b4c:	4b30      	ldr	r3, [pc, #192]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d109      	bne.n	8004b6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e0de      	b.n	8004d1a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b5c:	4b2c      	ldr	r3, [pc, #176]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0d6      	b.n	8004d1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b6c:	4b28      	ldr	r3, [pc, #160]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	f023 0207 	bic.w	r2, r3, #7
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	4925      	ldr	r1, [pc, #148]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b7e:	f7fd fa1d 	bl	8001fbc <HAL_GetTick>
 8004b82:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b84:	e00a      	b.n	8004b9c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b86:	f7fd fa19 	bl	8001fbc <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e0be      	b.n	8004d1a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9c:	4b1c      	ldr	r3, [pc, #112]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d1eb      	bne.n	8004b86 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d010      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	4b14      	ldr	r3, [pc, #80]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d208      	bcs.n	8004bdc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bca:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	f023 020f 	bic.w	r2, r3, #15
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	490e      	ldr	r1, [pc, #56]	; (8004c10 <HAL_RCC_ClockConfig+0x244>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bdc:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <HAL_RCC_ClockConfig+0x240>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d214      	bcs.n	8004c14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bea:	4b08      	ldr	r3, [pc, #32]	; (8004c0c <HAL_RCC_ClockConfig+0x240>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f023 020f 	bic.w	r2, r3, #15
 8004bf2:	4906      	ldr	r1, [pc, #24]	; (8004c0c <HAL_RCC_ClockConfig+0x240>)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfa:	4b04      	ldr	r3, [pc, #16]	; (8004c0c <HAL_RCC_ClockConfig+0x240>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d005      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e086      	b.n	8004d1a <HAL_RCC_ClockConfig+0x34e>
 8004c0c:	52002000 	.word	0x52002000
 8004c10:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d010      	beq.n	8004c42 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	4b3f      	ldr	r3, [pc, #252]	; (8004d24 <HAL_RCC_ClockConfig+0x358>)
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d208      	bcs.n	8004c42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c30:	4b3c      	ldr	r3, [pc, #240]	; (8004d24 <HAL_RCC_ClockConfig+0x358>)
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	4939      	ldr	r1, [pc, #228]	; (8004d24 <HAL_RCC_ClockConfig+0x358>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0308 	and.w	r3, r3, #8
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d010      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695a      	ldr	r2, [r3, #20]
 8004c52:	4b34      	ldr	r3, [pc, #208]	; (8004d24 <HAL_RCC_ClockConfig+0x358>)
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d208      	bcs.n	8004c70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c5e:	4b31      	ldr	r3, [pc, #196]	; (8004d24 <HAL_RCC_ClockConfig+0x358>)
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	492e      	ldr	r1, [pc, #184]	; (8004d24 <HAL_RCC_ClockConfig+0x358>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d010      	beq.n	8004c9e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699a      	ldr	r2, [r3, #24]
 8004c80:	4b28      	ldr	r3, [pc, #160]	; (8004d24 <HAL_RCC_ClockConfig+0x358>)
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d208      	bcs.n	8004c9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c8c:	4b25      	ldr	r3, [pc, #148]	; (8004d24 <HAL_RCC_ClockConfig+0x358>)
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	4922      	ldr	r1, [pc, #136]	; (8004d24 <HAL_RCC_ClockConfig+0x358>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0320 	and.w	r3, r3, #32
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d010      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69da      	ldr	r2, [r3, #28]
 8004cae:	4b1d      	ldr	r3, [pc, #116]	; (8004d24 <HAL_RCC_ClockConfig+0x358>)
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d208      	bcs.n	8004ccc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004cba:	4b1a      	ldr	r3, [pc, #104]	; (8004d24 <HAL_RCC_ClockConfig+0x358>)
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	4917      	ldr	r1, [pc, #92]	; (8004d24 <HAL_RCC_ClockConfig+0x358>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ccc:	f000 f834 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	4b14      	ldr	r3, [pc, #80]	; (8004d24 <HAL_RCC_ClockConfig+0x358>)
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	0a1b      	lsrs	r3, r3, #8
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	4912      	ldr	r1, [pc, #72]	; (8004d28 <HAL_RCC_ClockConfig+0x35c>)
 8004cde:	5ccb      	ldrb	r3, [r1, r3]
 8004ce0:	f003 031f 	and.w	r3, r3, #31
 8004ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cea:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <HAL_RCC_ClockConfig+0x358>)
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	4a0d      	ldr	r2, [pc, #52]	; (8004d28 <HAL_RCC_ClockConfig+0x35c>)
 8004cf4:	5cd3      	ldrb	r3, [r2, r3]
 8004cf6:	f003 031f 	and.w	r3, r3, #31
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004d00:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <HAL_RCC_ClockConfig+0x360>)
 8004d02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d04:	4a0a      	ldr	r2, [pc, #40]	; (8004d30 <HAL_RCC_ClockConfig+0x364>)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004d0a:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <HAL_RCC_ClockConfig+0x368>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fd f90a 	bl	8001f28 <HAL_InitTick>
 8004d14:	4603      	mov	r3, r0
 8004d16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	58024400 	.word	0x58024400
 8004d28:	0800d9c0 	.word	0x0800d9c0
 8004d2c:	20000008 	.word	0x20000008
 8004d30:	20000004 	.word	0x20000004
 8004d34:	2000000c 	.word	0x2000000c

08004d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b089      	sub	sp, #36	; 0x24
 8004d3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d3e:	4bb3      	ldr	r3, [pc, #716]	; (800500c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d46:	2b18      	cmp	r3, #24
 8004d48:	f200 8155 	bhi.w	8004ff6 <HAL_RCC_GetSysClockFreq+0x2be>
 8004d4c:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d52:	bf00      	nop
 8004d54:	08004db9 	.word	0x08004db9
 8004d58:	08004ff7 	.word	0x08004ff7
 8004d5c:	08004ff7 	.word	0x08004ff7
 8004d60:	08004ff7 	.word	0x08004ff7
 8004d64:	08004ff7 	.word	0x08004ff7
 8004d68:	08004ff7 	.word	0x08004ff7
 8004d6c:	08004ff7 	.word	0x08004ff7
 8004d70:	08004ff7 	.word	0x08004ff7
 8004d74:	08004ddf 	.word	0x08004ddf
 8004d78:	08004ff7 	.word	0x08004ff7
 8004d7c:	08004ff7 	.word	0x08004ff7
 8004d80:	08004ff7 	.word	0x08004ff7
 8004d84:	08004ff7 	.word	0x08004ff7
 8004d88:	08004ff7 	.word	0x08004ff7
 8004d8c:	08004ff7 	.word	0x08004ff7
 8004d90:	08004ff7 	.word	0x08004ff7
 8004d94:	08004de5 	.word	0x08004de5
 8004d98:	08004ff7 	.word	0x08004ff7
 8004d9c:	08004ff7 	.word	0x08004ff7
 8004da0:	08004ff7 	.word	0x08004ff7
 8004da4:	08004ff7 	.word	0x08004ff7
 8004da8:	08004ff7 	.word	0x08004ff7
 8004dac:	08004ff7 	.word	0x08004ff7
 8004db0:	08004ff7 	.word	0x08004ff7
 8004db4:	08004deb 	.word	0x08004deb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004db8:	4b94      	ldr	r3, [pc, #592]	; (800500c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d009      	beq.n	8004dd8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004dc4:	4b91      	ldr	r3, [pc, #580]	; (800500c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	08db      	lsrs	r3, r3, #3
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	4a90      	ldr	r2, [pc, #576]	; (8005010 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004dd6:	e111      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004dd8:	4b8d      	ldr	r3, [pc, #564]	; (8005010 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004dda:	61bb      	str	r3, [r7, #24]
      break;
 8004ddc:	e10e      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004dde:	4b8d      	ldr	r3, [pc, #564]	; (8005014 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004de0:	61bb      	str	r3, [r7, #24]
      break;
 8004de2:	e10b      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004de4:	4b8c      	ldr	r3, [pc, #560]	; (8005018 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004de6:	61bb      	str	r3, [r7, #24]
      break;
 8004de8:	e108      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dea:	4b88      	ldr	r3, [pc, #544]	; (800500c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004df4:	4b85      	ldr	r3, [pc, #532]	; (800500c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df8:	091b      	lsrs	r3, r3, #4
 8004dfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dfe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004e00:	4b82      	ldr	r3, [pc, #520]	; (800500c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004e0a:	4b80      	ldr	r3, [pc, #512]	; (800500c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0e:	08db      	lsrs	r3, r3, #3
 8004e10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	fb02 f303 	mul.w	r3, r2, r3
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e22:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 80e1 	beq.w	8004ff0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	f000 8083 	beq.w	8004f3c <HAL_RCC_GetSysClockFreq+0x204>
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	f200 80a1 	bhi.w	8004f80 <HAL_RCC_GetSysClockFreq+0x248>
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_RCC_GetSysClockFreq+0x114>
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d056      	beq.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004e4a:	e099      	b.n	8004f80 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e4c:	4b6f      	ldr	r3, [pc, #444]	; (800500c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d02d      	beq.n	8004eb4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e58:	4b6c      	ldr	r3, [pc, #432]	; (800500c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	08db      	lsrs	r3, r3, #3
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	4a6b      	ldr	r2, [pc, #428]	; (8005010 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e64:	fa22 f303 	lsr.w	r3, r2, r3
 8004e68:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	ee07 3a90 	vmov	s15, r3
 8004e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e82:	4b62      	ldr	r3, [pc, #392]	; (800500c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e92:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e96:	eddf 5a61 	vldr	s11, [pc, #388]	; 800501c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004eb2:	e087      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ebe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005020 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec6:	4b51      	ldr	r3, [pc, #324]	; (800500c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eda:	eddf 5a50 	vldr	s11, [pc, #320]	; 800501c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ef6:	e065      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f02:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005024 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f0a:	4b40      	ldr	r3, [pc, #256]	; (800500c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f1e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800501c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f3a:	e043      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f46:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005028 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f4e:	4b2f      	ldr	r3, [pc, #188]	; (800500c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f62:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800501c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f7e:	e021      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005024 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f92:	4b1e      	ldr	r3, [pc, #120]	; (800500c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fa6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800501c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004fc2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004fc4:	4b11      	ldr	r3, [pc, #68]	; (800500c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	0a5b      	lsrs	r3, r3, #9
 8004fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fce:	3301      	adds	r3, #1
 8004fd0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	ee07 3a90 	vmov	s15, r3
 8004fd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fe8:	ee17 3a90 	vmov	r3, s15
 8004fec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004fee:	e005      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	61bb      	str	r3, [r7, #24]
      break;
 8004ff4:	e002      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004ff6:	4b07      	ldr	r3, [pc, #28]	; (8005014 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ff8:	61bb      	str	r3, [r7, #24]
      break;
 8004ffa:	bf00      	nop
  }

  return sysclockfreq;
 8004ffc:	69bb      	ldr	r3, [r7, #24]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3724      	adds	r7, #36	; 0x24
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	58024400 	.word	0x58024400
 8005010:	03d09000 	.word	0x03d09000
 8005014:	003d0900 	.word	0x003d0900
 8005018:	00f42400 	.word	0x00f42400
 800501c:	46000000 	.word	0x46000000
 8005020:	4c742400 	.word	0x4c742400
 8005024:	4a742400 	.word	0x4a742400
 8005028:	4b742400 	.word	0x4b742400

0800502c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005032:	f7ff fe81 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8005036:	4602      	mov	r2, r0
 8005038:	4b10      	ldr	r3, [pc, #64]	; (800507c <HAL_RCC_GetHCLKFreq+0x50>)
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	0a1b      	lsrs	r3, r3, #8
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	490f      	ldr	r1, [pc, #60]	; (8005080 <HAL_RCC_GetHCLKFreq+0x54>)
 8005044:	5ccb      	ldrb	r3, [r1, r3]
 8005046:	f003 031f 	and.w	r3, r3, #31
 800504a:	fa22 f303 	lsr.w	r3, r2, r3
 800504e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005050:	4b0a      	ldr	r3, [pc, #40]	; (800507c <HAL_RCC_GetHCLKFreq+0x50>)
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	f003 030f 	and.w	r3, r3, #15
 8005058:	4a09      	ldr	r2, [pc, #36]	; (8005080 <HAL_RCC_GetHCLKFreq+0x54>)
 800505a:	5cd3      	ldrb	r3, [r2, r3]
 800505c:	f003 031f 	and.w	r3, r3, #31
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	fa22 f303 	lsr.w	r3, r2, r3
 8005066:	4a07      	ldr	r2, [pc, #28]	; (8005084 <HAL_RCC_GetHCLKFreq+0x58>)
 8005068:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800506a:	4a07      	ldr	r2, [pc, #28]	; (8005088 <HAL_RCC_GetHCLKFreq+0x5c>)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005070:	4b04      	ldr	r3, [pc, #16]	; (8005084 <HAL_RCC_GetHCLKFreq+0x58>)
 8005072:	681b      	ldr	r3, [r3, #0]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	58024400 	.word	0x58024400
 8005080:	0800d9c0 	.word	0x0800d9c0
 8005084:	20000008 	.word	0x20000008
 8005088:	20000004 	.word	0x20000004

0800508c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005090:	f7ff ffcc 	bl	800502c <HAL_RCC_GetHCLKFreq>
 8005094:	4602      	mov	r2, r0
 8005096:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	091b      	lsrs	r3, r3, #4
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	4904      	ldr	r1, [pc, #16]	; (80050b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80050a2:	5ccb      	ldrb	r3, [r1, r3]
 80050a4:	f003 031f 	and.w	r3, r3, #31
 80050a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	58024400 	.word	0x58024400
 80050b4:	0800d9c0 	.word	0x0800d9c0

080050b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050bc:	b0ca      	sub	sp, #296	; 0x128
 80050be:	af00      	add	r7, sp, #0
 80050c0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050c4:	2300      	movs	r3, #0
 80050c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050ca:	2300      	movs	r3, #0
 80050cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80050dc:	2500      	movs	r5, #0
 80050de:	ea54 0305 	orrs.w	r3, r4, r5
 80050e2:	d049      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80050e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050ee:	d02f      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80050f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050f4:	d828      	bhi.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80050f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050fa:	d01a      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80050fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005100:	d822      	bhi.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800510a:	d007      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800510c:	e01c      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800510e:	4bb8      	ldr	r3, [pc, #736]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	4ab7      	ldr	r2, [pc, #732]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005118:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800511a:	e01a      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800511c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005120:	3308      	adds	r3, #8
 8005122:	2102      	movs	r1, #2
 8005124:	4618      	mov	r0, r3
 8005126:	f002 fb61 	bl	80077ec <RCCEx_PLL2_Config>
 800512a:	4603      	mov	r3, r0
 800512c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005130:	e00f      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005136:	3328      	adds	r3, #40	; 0x28
 8005138:	2102      	movs	r1, #2
 800513a:	4618      	mov	r0, r3
 800513c:	f002 fc08 	bl	8007950 <RCCEx_PLL3_Config>
 8005140:	4603      	mov	r3, r0
 8005142:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005146:	e004      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800514e:	e000      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005152:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10a      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800515a:	4ba5      	ldr	r3, [pc, #660]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800515c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800515e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005168:	4aa1      	ldr	r2, [pc, #644]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800516a:	430b      	orrs	r3, r1
 800516c:	6513      	str	r3, [r2, #80]	; 0x50
 800516e:	e003      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005170:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005174:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800517c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005180:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005184:	f04f 0900 	mov.w	r9, #0
 8005188:	ea58 0309 	orrs.w	r3, r8, r9
 800518c:	d047      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800518e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005194:	2b04      	cmp	r3, #4
 8005196:	d82a      	bhi.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005198:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800519a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519e:	bf00      	nop
 80051a0:	080051b5 	.word	0x080051b5
 80051a4:	080051c3 	.word	0x080051c3
 80051a8:	080051d9 	.word	0x080051d9
 80051ac:	080051f7 	.word	0x080051f7
 80051b0:	080051f7 	.word	0x080051f7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b4:	4b8e      	ldr	r3, [pc, #568]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	4a8d      	ldr	r2, [pc, #564]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051c0:	e01a      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c6:	3308      	adds	r3, #8
 80051c8:	2100      	movs	r1, #0
 80051ca:	4618      	mov	r0, r3
 80051cc:	f002 fb0e 	bl	80077ec <RCCEx_PLL2_Config>
 80051d0:	4603      	mov	r3, r0
 80051d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051d6:	e00f      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051dc:	3328      	adds	r3, #40	; 0x28
 80051de:	2100      	movs	r1, #0
 80051e0:	4618      	mov	r0, r3
 80051e2:	f002 fbb5 	bl	8007950 <RCCEx_PLL3_Config>
 80051e6:	4603      	mov	r3, r0
 80051e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051ec:	e004      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051f4:	e000      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80051f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10a      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005200:	4b7b      	ldr	r3, [pc, #492]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005204:	f023 0107 	bic.w	r1, r3, #7
 8005208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800520c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520e:	4a78      	ldr	r2, [pc, #480]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005210:	430b      	orrs	r3, r1
 8005212:	6513      	str	r3, [r2, #80]	; 0x50
 8005214:	e003      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005216:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800521a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800521e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005226:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800522a:	f04f 0b00 	mov.w	fp, #0
 800522e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005232:	d04c      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800523e:	d030      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005244:	d829      	bhi.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005246:	2bc0      	cmp	r3, #192	; 0xc0
 8005248:	d02d      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800524a:	2bc0      	cmp	r3, #192	; 0xc0
 800524c:	d825      	bhi.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800524e:	2b80      	cmp	r3, #128	; 0x80
 8005250:	d018      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005252:	2b80      	cmp	r3, #128	; 0x80
 8005254:	d821      	bhi.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800525a:	2b40      	cmp	r3, #64	; 0x40
 800525c:	d007      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800525e:	e01c      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005260:	4b63      	ldr	r3, [pc, #396]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	4a62      	ldr	r2, [pc, #392]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800526a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800526c:	e01c      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800526e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005272:	3308      	adds	r3, #8
 8005274:	2100      	movs	r1, #0
 8005276:	4618      	mov	r0, r3
 8005278:	f002 fab8 	bl	80077ec <RCCEx_PLL2_Config>
 800527c:	4603      	mov	r3, r0
 800527e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005282:	e011      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005288:	3328      	adds	r3, #40	; 0x28
 800528a:	2100      	movs	r1, #0
 800528c:	4618      	mov	r0, r3
 800528e:	f002 fb5f 	bl	8007950 <RCCEx_PLL3_Config>
 8005292:	4603      	mov	r3, r0
 8005294:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005298:	e006      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052a0:	e002      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80052a2:	bf00      	nop
 80052a4:	e000      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80052a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10a      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80052b0:	4b4f      	ldr	r3, [pc, #316]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80052b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052be:	4a4c      	ldr	r2, [pc, #304]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052c0:	430b      	orrs	r3, r1
 80052c2:	6513      	str	r3, [r2, #80]	; 0x50
 80052c4:	e003      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80052ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80052da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80052de:	2300      	movs	r3, #0
 80052e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80052e4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80052e8:	460b      	mov	r3, r1
 80052ea:	4313      	orrs	r3, r2
 80052ec:	d053      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80052ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80052f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052fa:	d035      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80052fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005300:	d82e      	bhi.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005302:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005306:	d031      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005308:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800530c:	d828      	bhi.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800530e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005312:	d01a      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005314:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005318:	d822      	bhi.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800531e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005322:	d007      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005324:	e01c      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005326:	4b32      	ldr	r3, [pc, #200]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532a:	4a31      	ldr	r2, [pc, #196]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800532c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005330:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005332:	e01c      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005338:	3308      	adds	r3, #8
 800533a:	2100      	movs	r1, #0
 800533c:	4618      	mov	r0, r3
 800533e:	f002 fa55 	bl	80077ec <RCCEx_PLL2_Config>
 8005342:	4603      	mov	r3, r0
 8005344:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005348:	e011      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800534a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800534e:	3328      	adds	r3, #40	; 0x28
 8005350:	2100      	movs	r1, #0
 8005352:	4618      	mov	r0, r3
 8005354:	f002 fafc 	bl	8007950 <RCCEx_PLL3_Config>
 8005358:	4603      	mov	r3, r0
 800535a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800535e:	e006      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005366:	e002      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005368:	bf00      	nop
 800536a:	e000      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800536c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800536e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10b      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005376:	4b1e      	ldr	r3, [pc, #120]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800537e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005382:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005386:	4a1a      	ldr	r2, [pc, #104]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005388:	430b      	orrs	r3, r1
 800538a:	6593      	str	r3, [r2, #88]	; 0x58
 800538c:	e003      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005392:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80053a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80053a6:	2300      	movs	r3, #0
 80053a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80053ac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80053b0:	460b      	mov	r3, r1
 80053b2:	4313      	orrs	r3, r2
 80053b4:	d056      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80053b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80053be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053c2:	d038      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80053c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053c8:	d831      	bhi.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80053ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053ce:	d034      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80053d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053d4:	d82b      	bhi.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80053d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053da:	d01d      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80053dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053e0:	d825      	bhi.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d006      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80053e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053ea:	d00a      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80053ec:	e01f      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80053ee:	bf00      	nop
 80053f0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053f4:	4ba2      	ldr	r3, [pc, #648]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f8:	4aa1      	ldr	r2, [pc, #644]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005400:	e01c      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005406:	3308      	adds	r3, #8
 8005408:	2100      	movs	r1, #0
 800540a:	4618      	mov	r0, r3
 800540c:	f002 f9ee 	bl	80077ec <RCCEx_PLL2_Config>
 8005410:	4603      	mov	r3, r0
 8005412:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005416:	e011      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800541c:	3328      	adds	r3, #40	; 0x28
 800541e:	2100      	movs	r1, #0
 8005420:	4618      	mov	r0, r3
 8005422:	f002 fa95 	bl	8007950 <RCCEx_PLL3_Config>
 8005426:	4603      	mov	r3, r0
 8005428:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800542c:	e006      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005434:	e002      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005436:	bf00      	nop
 8005438:	e000      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800543a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800543c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10b      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005444:	4b8e      	ldr	r3, [pc, #568]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005448:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800544c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005450:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005454:	4a8a      	ldr	r2, [pc, #552]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005456:	430b      	orrs	r3, r1
 8005458:	6593      	str	r3, [r2, #88]	; 0x58
 800545a:	e003      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800545c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005460:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005470:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005474:	2300      	movs	r3, #0
 8005476:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800547a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800547e:	460b      	mov	r3, r1
 8005480:	4313      	orrs	r3, r2
 8005482:	d03a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548a:	2b30      	cmp	r3, #48	; 0x30
 800548c:	d01f      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x416>
 800548e:	2b30      	cmp	r3, #48	; 0x30
 8005490:	d819      	bhi.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005492:	2b20      	cmp	r3, #32
 8005494:	d00c      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005496:	2b20      	cmp	r3, #32
 8005498:	d815      	bhi.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800549a:	2b00      	cmp	r3, #0
 800549c:	d019      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800549e:	2b10      	cmp	r3, #16
 80054a0:	d111      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054a2:	4b77      	ldr	r3, [pc, #476]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a6:	4a76      	ldr	r2, [pc, #472]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80054ae:	e011      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054b4:	3308      	adds	r3, #8
 80054b6:	2102      	movs	r1, #2
 80054b8:	4618      	mov	r0, r3
 80054ba:	f002 f997 	bl	80077ec <RCCEx_PLL2_Config>
 80054be:	4603      	mov	r3, r0
 80054c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80054c4:	e006      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054cc:	e002      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80054ce:	bf00      	nop
 80054d0:	e000      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80054d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10a      	bne.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80054dc:	4b68      	ldr	r3, [pc, #416]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80054e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ea:	4a65      	ldr	r2, [pc, #404]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054ec:	430b      	orrs	r3, r1
 80054ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054f0:	e003      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80054fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005502:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005506:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800550a:	2300      	movs	r3, #0
 800550c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005510:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005514:	460b      	mov	r3, r1
 8005516:	4313      	orrs	r3, r2
 8005518:	d051      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800551a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800551e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005520:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005524:	d035      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005526:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800552a:	d82e      	bhi.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800552c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005530:	d031      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005532:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005536:	d828      	bhi.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800553c:	d01a      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800553e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005542:	d822      	bhi.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800554c:	d007      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800554e:	e01c      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005550:	4b4b      	ldr	r3, [pc, #300]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	4a4a      	ldr	r2, [pc, #296]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800555a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800555c:	e01c      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800555e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005562:	3308      	adds	r3, #8
 8005564:	2100      	movs	r1, #0
 8005566:	4618      	mov	r0, r3
 8005568:	f002 f940 	bl	80077ec <RCCEx_PLL2_Config>
 800556c:	4603      	mov	r3, r0
 800556e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005572:	e011      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005578:	3328      	adds	r3, #40	; 0x28
 800557a:	2100      	movs	r1, #0
 800557c:	4618      	mov	r0, r3
 800557e:	f002 f9e7 	bl	8007950 <RCCEx_PLL3_Config>
 8005582:	4603      	mov	r3, r0
 8005584:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005588:	e006      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005590:	e002      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005592:	bf00      	nop
 8005594:	e000      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005596:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005598:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10a      	bne.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80055a0:	4b37      	ldr	r3, [pc, #220]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80055a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ae:	4a34      	ldr	r2, [pc, #208]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055b0:	430b      	orrs	r3, r1
 80055b2:	6513      	str	r3, [r2, #80]	; 0x50
 80055b4:	e003      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80055be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80055ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055ce:	2300      	movs	r3, #0
 80055d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80055d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80055d8:	460b      	mov	r3, r1
 80055da:	4313      	orrs	r3, r2
 80055dc:	d056      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80055de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055e8:	d033      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80055ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055ee:	d82c      	bhi.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80055f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055f4:	d02f      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80055f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055fa:	d826      	bhi.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80055fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005600:	d02b      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005602:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005606:	d820      	bhi.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005608:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800560c:	d012      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800560e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005612:	d81a      	bhi.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d022      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800561c:	d115      	bne.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800561e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005622:	3308      	adds	r3, #8
 8005624:	2101      	movs	r1, #1
 8005626:	4618      	mov	r0, r3
 8005628:	f002 f8e0 	bl	80077ec <RCCEx_PLL2_Config>
 800562c:	4603      	mov	r3, r0
 800562e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005632:	e015      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005638:	3328      	adds	r3, #40	; 0x28
 800563a:	2101      	movs	r1, #1
 800563c:	4618      	mov	r0, r3
 800563e:	f002 f987 	bl	8007950 <RCCEx_PLL3_Config>
 8005642:	4603      	mov	r3, r0
 8005644:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005648:	e00a      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005650:	e006      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005652:	bf00      	nop
 8005654:	e004      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005656:	bf00      	nop
 8005658:	e002      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800565a:	bf00      	nop
 800565c:	e000      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800565e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005660:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10d      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005668:	4b05      	ldr	r3, [pc, #20]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800566a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800566c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005676:	4a02      	ldr	r2, [pc, #8]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005678:	430b      	orrs	r3, r1
 800567a:	6513      	str	r3, [r2, #80]	; 0x50
 800567c:	e006      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800567e:	bf00      	nop
 8005680:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005684:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005688:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800568c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005694:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005698:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800569c:	2300      	movs	r3, #0
 800569e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056a2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4313      	orrs	r3, r2
 80056aa:	d055      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80056ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056b8:	d033      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80056ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056be:	d82c      	bhi.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80056c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c4:	d02f      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ca:	d826      	bhi.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80056cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056d0:	d02b      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80056d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056d6:	d820      	bhi.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80056d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056dc:	d012      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80056de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056e2:	d81a      	bhi.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d022      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80056e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056ec:	d115      	bne.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f2:	3308      	adds	r3, #8
 80056f4:	2101      	movs	r1, #1
 80056f6:	4618      	mov	r0, r3
 80056f8:	f002 f878 	bl	80077ec <RCCEx_PLL2_Config>
 80056fc:	4603      	mov	r3, r0
 80056fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005702:	e015      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005708:	3328      	adds	r3, #40	; 0x28
 800570a:	2101      	movs	r1, #1
 800570c:	4618      	mov	r0, r3
 800570e:	f002 f91f 	bl	8007950 <RCCEx_PLL3_Config>
 8005712:	4603      	mov	r3, r0
 8005714:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005718:	e00a      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005720:	e006      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005722:	bf00      	nop
 8005724:	e004      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005726:	bf00      	nop
 8005728:	e002      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800572a:	bf00      	nop
 800572c:	e000      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800572e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005730:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10b      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005738:	4ba3      	ldr	r3, [pc, #652]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800573a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005744:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005748:	4a9f      	ldr	r2, [pc, #636]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800574a:	430b      	orrs	r3, r1
 800574c:	6593      	str	r3, [r2, #88]	; 0x58
 800574e:	e003      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005750:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005754:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800575c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005760:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005764:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005768:	2300      	movs	r3, #0
 800576a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800576e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005772:	460b      	mov	r3, r1
 8005774:	4313      	orrs	r3, r2
 8005776:	d037      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800577c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005782:	d00e      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005788:	d816      	bhi.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800578a:	2b00      	cmp	r3, #0
 800578c:	d018      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800578e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005792:	d111      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005794:	4b8c      	ldr	r3, [pc, #560]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005798:	4a8b      	ldr	r2, [pc, #556]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800579a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800579e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80057a0:	e00f      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057a6:	3308      	adds	r3, #8
 80057a8:	2101      	movs	r1, #1
 80057aa:	4618      	mov	r0, r3
 80057ac:	f002 f81e 	bl	80077ec <RCCEx_PLL2_Config>
 80057b0:	4603      	mov	r3, r0
 80057b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80057b6:	e004      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057be:	e000      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80057c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10a      	bne.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80057ca:	4b7f      	ldr	r3, [pc, #508]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ce:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80057d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d8:	4a7b      	ldr	r2, [pc, #492]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057da:	430b      	orrs	r3, r1
 80057dc:	6513      	str	r3, [r2, #80]	; 0x50
 80057de:	e003      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80057e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80057f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057f8:	2300      	movs	r3, #0
 80057fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80057fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005802:	460b      	mov	r3, r1
 8005804:	4313      	orrs	r3, r2
 8005806:	d039      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800580c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800580e:	2b03      	cmp	r3, #3
 8005810:	d81c      	bhi.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005812:	a201      	add	r2, pc, #4	; (adr r2, 8005818 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005818:	08005855 	.word	0x08005855
 800581c:	08005829 	.word	0x08005829
 8005820:	08005837 	.word	0x08005837
 8005824:	08005855 	.word	0x08005855
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005828:	4b67      	ldr	r3, [pc, #412]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	4a66      	ldr	r2, [pc, #408]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800582e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005834:	e00f      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800583a:	3308      	adds	r3, #8
 800583c:	2102      	movs	r1, #2
 800583e:	4618      	mov	r0, r3
 8005840:	f001 ffd4 	bl	80077ec <RCCEx_PLL2_Config>
 8005844:	4603      	mov	r3, r0
 8005846:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800584a:	e004      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005852:	e000      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005856:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10a      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800585e:	4b5a      	ldr	r3, [pc, #360]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005862:	f023 0103 	bic.w	r1, r3, #3
 8005866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800586a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800586c:	4a56      	ldr	r2, [pc, #344]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800586e:	430b      	orrs	r3, r1
 8005870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005872:	e003      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005874:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005878:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005884:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005888:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800588c:	2300      	movs	r3, #0
 800588e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005892:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005896:	460b      	mov	r3, r1
 8005898:	4313      	orrs	r3, r2
 800589a:	f000 809f 	beq.w	80059dc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800589e:	4b4b      	ldr	r3, [pc, #300]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a4a      	ldr	r2, [pc, #296]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80058a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058aa:	f7fc fb87 	bl	8001fbc <HAL_GetTick>
 80058ae:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058b2:	e00b      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058b4:	f7fc fb82 	bl	8001fbc <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b64      	cmp	r3, #100	; 0x64
 80058c2:	d903      	bls.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058ca:	e005      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058cc:	4b3f      	ldr	r3, [pc, #252]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0ed      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80058d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d179      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80058e0:	4b39      	ldr	r3, [pc, #228]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80058ec:	4053      	eors	r3, r2
 80058ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d015      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058f6:	4b34      	ldr	r3, [pc, #208]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005902:	4b31      	ldr	r3, [pc, #196]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005906:	4a30      	ldr	r2, [pc, #192]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800590c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800590e:	4b2e      	ldr	r3, [pc, #184]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005912:	4a2d      	ldr	r2, [pc, #180]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005918:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800591a:	4a2b      	ldr	r2, [pc, #172]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800591c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005920:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005926:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800592a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800592e:	d118      	bne.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005930:	f7fc fb44 	bl	8001fbc <HAL_GetTick>
 8005934:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005938:	e00d      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800593a:	f7fc fb3f 	bl	8001fbc <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005944:	1ad2      	subs	r2, r2, r3
 8005946:	f241 3388 	movw	r3, #5000	; 0x1388
 800594a:	429a      	cmp	r2, r3
 800594c:	d903      	bls.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005954:	e005      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005956:	4b1c      	ldr	r3, [pc, #112]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0eb      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005966:	2b00      	cmp	r3, #0
 8005968:	d129      	bne.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800596a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800596e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800597a:	d10e      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800597c:	4b12      	ldr	r3, [pc, #72]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005988:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800598c:	091a      	lsrs	r2, r3, #4
 800598e:	4b10      	ldr	r3, [pc, #64]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005990:	4013      	ands	r3, r2
 8005992:	4a0d      	ldr	r2, [pc, #52]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005994:	430b      	orrs	r3, r1
 8005996:	6113      	str	r3, [r2, #16]
 8005998:	e005      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800599a:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	4a0a      	ldr	r2, [pc, #40]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80059a4:	6113      	str	r3, [r2, #16]
 80059a6:	4b08      	ldr	r3, [pc, #32]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80059aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059b6:	4a04      	ldr	r2, [pc, #16]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059b8:	430b      	orrs	r3, r1
 80059ba:	6713      	str	r3, [r2, #112]	; 0x70
 80059bc:	e00e      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80059c6:	e009      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80059c8:	58024400 	.word	0x58024400
 80059cc:	58024800 	.word	0x58024800
 80059d0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80059dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e4:	f002 0301 	and.w	r3, r2, #1
 80059e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059ec:	2300      	movs	r3, #0
 80059ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059f6:	460b      	mov	r3, r1
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f000 8089 	beq.w	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80059fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a04:	2b28      	cmp	r3, #40	; 0x28
 8005a06:	d86b      	bhi.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005a08:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0e:	bf00      	nop
 8005a10:	08005ae9 	.word	0x08005ae9
 8005a14:	08005ae1 	.word	0x08005ae1
 8005a18:	08005ae1 	.word	0x08005ae1
 8005a1c:	08005ae1 	.word	0x08005ae1
 8005a20:	08005ae1 	.word	0x08005ae1
 8005a24:	08005ae1 	.word	0x08005ae1
 8005a28:	08005ae1 	.word	0x08005ae1
 8005a2c:	08005ae1 	.word	0x08005ae1
 8005a30:	08005ab5 	.word	0x08005ab5
 8005a34:	08005ae1 	.word	0x08005ae1
 8005a38:	08005ae1 	.word	0x08005ae1
 8005a3c:	08005ae1 	.word	0x08005ae1
 8005a40:	08005ae1 	.word	0x08005ae1
 8005a44:	08005ae1 	.word	0x08005ae1
 8005a48:	08005ae1 	.word	0x08005ae1
 8005a4c:	08005ae1 	.word	0x08005ae1
 8005a50:	08005acb 	.word	0x08005acb
 8005a54:	08005ae1 	.word	0x08005ae1
 8005a58:	08005ae1 	.word	0x08005ae1
 8005a5c:	08005ae1 	.word	0x08005ae1
 8005a60:	08005ae1 	.word	0x08005ae1
 8005a64:	08005ae1 	.word	0x08005ae1
 8005a68:	08005ae1 	.word	0x08005ae1
 8005a6c:	08005ae1 	.word	0x08005ae1
 8005a70:	08005ae9 	.word	0x08005ae9
 8005a74:	08005ae1 	.word	0x08005ae1
 8005a78:	08005ae1 	.word	0x08005ae1
 8005a7c:	08005ae1 	.word	0x08005ae1
 8005a80:	08005ae1 	.word	0x08005ae1
 8005a84:	08005ae1 	.word	0x08005ae1
 8005a88:	08005ae1 	.word	0x08005ae1
 8005a8c:	08005ae1 	.word	0x08005ae1
 8005a90:	08005ae9 	.word	0x08005ae9
 8005a94:	08005ae1 	.word	0x08005ae1
 8005a98:	08005ae1 	.word	0x08005ae1
 8005a9c:	08005ae1 	.word	0x08005ae1
 8005aa0:	08005ae1 	.word	0x08005ae1
 8005aa4:	08005ae1 	.word	0x08005ae1
 8005aa8:	08005ae1 	.word	0x08005ae1
 8005aac:	08005ae1 	.word	0x08005ae1
 8005ab0:	08005ae9 	.word	0x08005ae9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ab8:	3308      	adds	r3, #8
 8005aba:	2101      	movs	r1, #1
 8005abc:	4618      	mov	r0, r3
 8005abe:	f001 fe95 	bl	80077ec <RCCEx_PLL2_Config>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ac8:	e00f      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ace:	3328      	adds	r3, #40	; 0x28
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f001 ff3c 	bl	8007950 <RCCEx_PLL3_Config>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ade:	e004      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ae6:	e000      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10a      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005af2:	4bbf      	ldr	r3, [pc, #764]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005afe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b00:	4abb      	ldr	r2, [pc, #748]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b02:	430b      	orrs	r3, r1
 8005b04:	6553      	str	r3, [r2, #84]	; 0x54
 8005b06:	e003      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b18:	f002 0302 	and.w	r3, r2, #2
 8005b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b20:	2300      	movs	r3, #0
 8005b22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005b26:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	d041      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b36:	2b05      	cmp	r3, #5
 8005b38:	d824      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005b3a:	a201      	add	r2, pc, #4	; (adr r2, 8005b40 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b8d 	.word	0x08005b8d
 8005b44:	08005b59 	.word	0x08005b59
 8005b48:	08005b6f 	.word	0x08005b6f
 8005b4c:	08005b8d 	.word	0x08005b8d
 8005b50:	08005b8d 	.word	0x08005b8d
 8005b54:	08005b8d 	.word	0x08005b8d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	2101      	movs	r1, #1
 8005b60:	4618      	mov	r0, r3
 8005b62:	f001 fe43 	bl	80077ec <RCCEx_PLL2_Config>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b6c:	e00f      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b72:	3328      	adds	r3, #40	; 0x28
 8005b74:	2101      	movs	r1, #1
 8005b76:	4618      	mov	r0, r3
 8005b78:	f001 feea 	bl	8007950 <RCCEx_PLL3_Config>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b82:	e004      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b8a:	e000      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10a      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005b96:	4b96      	ldr	r3, [pc, #600]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9a:	f023 0107 	bic.w	r1, r3, #7
 8005b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ba2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ba4:	4a92      	ldr	r2, [pc, #584]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ba6:	430b      	orrs	r3, r1
 8005ba8:	6553      	str	r3, [r2, #84]	; 0x54
 8005baa:	e003      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbc:	f002 0304 	and.w	r3, r2, #4
 8005bc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	d044      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bdc:	2b05      	cmp	r3, #5
 8005bde:	d825      	bhi.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005be0:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be6:	bf00      	nop
 8005be8:	08005c35 	.word	0x08005c35
 8005bec:	08005c01 	.word	0x08005c01
 8005bf0:	08005c17 	.word	0x08005c17
 8005bf4:	08005c35 	.word	0x08005c35
 8005bf8:	08005c35 	.word	0x08005c35
 8005bfc:	08005c35 	.word	0x08005c35
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c04:	3308      	adds	r3, #8
 8005c06:	2101      	movs	r1, #1
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f001 fdef 	bl	80077ec <RCCEx_PLL2_Config>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005c14:	e00f      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c1a:	3328      	adds	r3, #40	; 0x28
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f001 fe96 	bl	8007950 <RCCEx_PLL3_Config>
 8005c24:	4603      	mov	r3, r0
 8005c26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005c2a:	e004      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c32:	e000      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10b      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c3e:	4b6c      	ldr	r3, [pc, #432]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c42:	f023 0107 	bic.w	r1, r3, #7
 8005c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c4e:	4a68      	ldr	r2, [pc, #416]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c50:	430b      	orrs	r3, r1
 8005c52:	6593      	str	r3, [r2, #88]	; 0x58
 8005c54:	e003      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c66:	f002 0320 	and.w	r3, r2, #32
 8005c6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	d055      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c8a:	d033      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005c8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c90:	d82c      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c96:	d02f      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9c:	d826      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ca2:	d02b      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005ca4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ca8:	d820      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005caa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cae:	d012      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005cb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cb4:	d81a      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d022      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005cba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cbe:	d115      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f001 fd8f 	bl	80077ec <RCCEx_PLL2_Config>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005cd4:	e015      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cda:	3328      	adds	r3, #40	; 0x28
 8005cdc:	2102      	movs	r1, #2
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 fe36 	bl	8007950 <RCCEx_PLL3_Config>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005cea:	e00a      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005cf2:	e006      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005cf4:	bf00      	nop
 8005cf6:	e004      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005cf8:	bf00      	nop
 8005cfa:	e002      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005cfc:	bf00      	nop
 8005cfe:	e000      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10b      	bne.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d0a:	4b39      	ldr	r3, [pc, #228]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d1a:	4a35      	ldr	r2, [pc, #212]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d1c:	430b      	orrs	r3, r1
 8005d1e:	6553      	str	r3, [r2, #84]	; 0x54
 8005d20:	e003      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d32:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d40:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4313      	orrs	r3, r2
 8005d48:	d058      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d52:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d56:	d033      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005d58:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d5c:	d82c      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d62:	d02f      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d68:	d826      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d6e:	d02b      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005d70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d74:	d820      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d7a:	d012      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d80:	d81a      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d022      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d8a:	d115      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d90:	3308      	adds	r3, #8
 8005d92:	2100      	movs	r1, #0
 8005d94:	4618      	mov	r0, r3
 8005d96:	f001 fd29 	bl	80077ec <RCCEx_PLL2_Config>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005da0:	e015      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005da6:	3328      	adds	r3, #40	; 0x28
 8005da8:	2102      	movs	r1, #2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f001 fdd0 	bl	8007950 <RCCEx_PLL3_Config>
 8005db0:	4603      	mov	r3, r0
 8005db2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005db6:	e00a      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005dbe:	e006      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005dc0:	bf00      	nop
 8005dc2:	e004      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005dc4:	bf00      	nop
 8005dc6:	e002      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005dc8:	bf00      	nop
 8005dca:	e000      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10e      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005dd6:	4b06      	ldr	r3, [pc, #24]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dda:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005de2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005de6:	4a02      	ldr	r2, [pc, #8]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005de8:	430b      	orrs	r3, r1
 8005dea:	6593      	str	r3, [r2, #88]	; 0x58
 8005dec:	e006      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005dee:	bf00      	nop
 8005df0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005df8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005e08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e12:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005e16:	460b      	mov	r3, r1
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	d055      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e24:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005e28:	d033      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005e2a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005e2e:	d82c      	bhi.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e34:	d02f      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e3a:	d826      	bhi.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005e3c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005e40:	d02b      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005e42:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005e46:	d820      	bhi.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005e48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e4c:	d012      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005e4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e52:	d81a      	bhi.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d022      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e5c:	d115      	bne.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e62:	3308      	adds	r3, #8
 8005e64:	2100      	movs	r1, #0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f001 fcc0 	bl	80077ec <RCCEx_PLL2_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e72:	e015      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e78:	3328      	adds	r3, #40	; 0x28
 8005e7a:	2102      	movs	r1, #2
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f001 fd67 	bl	8007950 <RCCEx_PLL3_Config>
 8005e82:	4603      	mov	r3, r0
 8005e84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e88:	e00a      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e90:	e006      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e92:	bf00      	nop
 8005e94:	e004      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e96:	bf00      	nop
 8005e98:	e002      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e9a:	bf00      	nop
 8005e9c:	e000      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10b      	bne.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005ea8:	4ba1      	ldr	r3, [pc, #644]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eac:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005eb8:	4a9d      	ldr	r2, [pc, #628]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005eba:	430b      	orrs	r3, r1
 8005ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8005ebe:	e003      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ec4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	f002 0308 	and.w	r3, r2, #8
 8005ed4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ed8:	2300      	movs	r3, #0
 8005eda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ede:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	d01e      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef4:	d10c      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005efa:	3328      	adds	r3, #40	; 0x28
 8005efc:	2102      	movs	r1, #2
 8005efe:	4618      	mov	r0, r3
 8005f00:	f001 fd26 	bl	8007950 <RCCEx_PLL3_Config>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d002      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005f10:	4b87      	ldr	r3, [pc, #540]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f20:	4a83      	ldr	r2, [pc, #524]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f22:	430b      	orrs	r3, r1
 8005f24:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2e:	f002 0310 	and.w	r3, r2, #16
 8005f32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f36:	2300      	movs	r3, #0
 8005f38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f3c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005f40:	460b      	mov	r3, r1
 8005f42:	4313      	orrs	r3, r2
 8005f44:	d01e      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f52:	d10c      	bne.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f58:	3328      	adds	r3, #40	; 0x28
 8005f5a:	2102      	movs	r1, #2
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f001 fcf7 	bl	8007950 <RCCEx_PLL3_Config>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f6e:	4b70      	ldr	r3, [pc, #448]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f7e:	4a6c      	ldr	r2, [pc, #432]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f80:	430b      	orrs	r3, r1
 8005f82:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005f90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f94:	2300      	movs	r3, #0
 8005f96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f9a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	d03e      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005fac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fb0:	d022      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005fb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fb6:	d81b      	bhi.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc0:	d00b      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005fc2:	e015      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fc8:	3308      	adds	r3, #8
 8005fca:	2100      	movs	r1, #0
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f001 fc0d 	bl	80077ec <RCCEx_PLL2_Config>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005fd8:	e00f      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fde:	3328      	adds	r3, #40	; 0x28
 8005fe0:	2102      	movs	r1, #2
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f001 fcb4 	bl	8007950 <RCCEx_PLL3_Config>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005fee:	e004      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ff6:	e000      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10b      	bne.n	800601a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006002:	4b4b      	ldr	r3, [pc, #300]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006006:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800600a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800600e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006012:	4a47      	ldr	r2, [pc, #284]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006014:	430b      	orrs	r3, r1
 8006016:	6593      	str	r3, [r2, #88]	; 0x58
 8006018:	e003      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800601a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800601e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800602e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006030:	2300      	movs	r3, #0
 8006032:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006034:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006038:	460b      	mov	r3, r1
 800603a:	4313      	orrs	r3, r2
 800603c:	d03b      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800603e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006046:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800604a:	d01f      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800604c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006050:	d818      	bhi.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006056:	d003      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006058:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800605c:	d007      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800605e:	e011      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006060:	4b33      	ldr	r3, [pc, #204]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	4a32      	ldr	r2, [pc, #200]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800606a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800606c:	e00f      	b.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800606e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006072:	3328      	adds	r3, #40	; 0x28
 8006074:	2101      	movs	r1, #1
 8006076:	4618      	mov	r0, r3
 8006078:	f001 fc6a 	bl	8007950 <RCCEx_PLL3_Config>
 800607c:	4603      	mov	r3, r0
 800607e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006082:	e004      	b.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800608a:	e000      	b.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800608c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800608e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10b      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006096:	4b26      	ldr	r3, [pc, #152]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800609e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a6:	4a22      	ldr	r2, [pc, #136]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060a8:	430b      	orrs	r3, r1
 80060aa:	6553      	str	r3, [r2, #84]	; 0x54
 80060ac:	e003      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80060b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060be:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80060c2:	673b      	str	r3, [r7, #112]	; 0x70
 80060c4:	2300      	movs	r3, #0
 80060c6:	677b      	str	r3, [r7, #116]	; 0x74
 80060c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80060cc:	460b      	mov	r3, r1
 80060ce:	4313      	orrs	r3, r2
 80060d0:	d034      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80060d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80060dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060e0:	d007      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80060e2:	e011      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060e4:	4b12      	ldr	r3, [pc, #72]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	4a11      	ldr	r2, [pc, #68]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80060f0:	e00e      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060f6:	3308      	adds	r3, #8
 80060f8:	2102      	movs	r1, #2
 80060fa:	4618      	mov	r0, r3
 80060fc:	f001 fb76 	bl	80077ec <RCCEx_PLL2_Config>
 8006100:	4603      	mov	r3, r0
 8006102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006106:	e003      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800610e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006110:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10d      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006118:	4b05      	ldr	r3, [pc, #20]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800611a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800611c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006126:	4a02      	ldr	r2, [pc, #8]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006128:	430b      	orrs	r3, r1
 800612a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800612c:	e006      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800612e:	bf00      	nop
 8006130:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006134:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006138:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800613c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006148:	66bb      	str	r3, [r7, #104]	; 0x68
 800614a:	2300      	movs	r3, #0
 800614c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800614e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006152:	460b      	mov	r3, r1
 8006154:	4313      	orrs	r3, r2
 8006156:	d00c      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800615c:	3328      	adds	r3, #40	; 0x28
 800615e:	2102      	movs	r1, #2
 8006160:	4618      	mov	r0, r3
 8006162:	f001 fbf5 	bl	8007950 <RCCEx_PLL3_Config>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800617e:	663b      	str	r3, [r7, #96]	; 0x60
 8006180:	2300      	movs	r3, #0
 8006182:	667b      	str	r3, [r7, #100]	; 0x64
 8006184:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006188:	460b      	mov	r3, r1
 800618a:	4313      	orrs	r3, r2
 800618c:	d038      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800618e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800619a:	d018      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800619c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061a0:	d811      	bhi.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80061a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061a6:	d014      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80061a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ac:	d80b      	bhi.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d011      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80061b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b6:	d106      	bne.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061b8:	4bc3      	ldr	r3, [pc, #780]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	4ac2      	ldr	r2, [pc, #776]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80061c4:	e008      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061cc:	e004      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80061ce:	bf00      	nop
 80061d0:	e002      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80061d2:	bf00      	nop
 80061d4:	e000      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80061d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10b      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061e0:	4bb9      	ldr	r3, [pc, #740]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80061e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061f0:	4ab5      	ldr	r2, [pc, #724]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061f2:	430b      	orrs	r3, r1
 80061f4:	6553      	str	r3, [r2, #84]	; 0x54
 80061f6:	e003      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800620c:	65bb      	str	r3, [r7, #88]	; 0x58
 800620e:	2300      	movs	r3, #0
 8006210:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006212:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006216:	460b      	mov	r3, r1
 8006218:	4313      	orrs	r3, r2
 800621a:	d009      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800621c:	4baa      	ldr	r3, [pc, #680]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800621e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006220:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800622a:	4aa7      	ldr	r2, [pc, #668]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800622c:	430b      	orrs	r3, r1
 800622e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800623c:	653b      	str	r3, [r7, #80]	; 0x50
 800623e:	2300      	movs	r3, #0
 8006240:	657b      	str	r3, [r7, #84]	; 0x54
 8006242:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006246:	460b      	mov	r3, r1
 8006248:	4313      	orrs	r3, r2
 800624a:	d00a      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800624c:	4b9e      	ldr	r3, [pc, #632]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006258:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800625c:	4a9a      	ldr	r2, [pc, #616]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800625e:	430b      	orrs	r3, r1
 8006260:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800626e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006270:	2300      	movs	r3, #0
 8006272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006274:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006278:	460b      	mov	r3, r1
 800627a:	4313      	orrs	r3, r2
 800627c:	d009      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800627e:	4b92      	ldr	r3, [pc, #584]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006282:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800628a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800628c:	4a8e      	ldr	r2, [pc, #568]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800628e:	430b      	orrs	r3, r1
 8006290:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800629e:	643b      	str	r3, [r7, #64]	; 0x40
 80062a0:	2300      	movs	r3, #0
 80062a2:	647b      	str	r3, [r7, #68]	; 0x44
 80062a4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80062a8:	460b      	mov	r3, r1
 80062aa:	4313      	orrs	r3, r2
 80062ac:	d00e      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062ae:	4b86      	ldr	r3, [pc, #536]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	4a85      	ldr	r2, [pc, #532]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062b8:	6113      	str	r3, [r2, #16]
 80062ba:	4b83      	ldr	r3, [pc, #524]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062bc:	6919      	ldr	r1, [r3, #16]
 80062be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80062c6:	4a80      	ldr	r2, [pc, #512]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062c8:	430b      	orrs	r3, r1
 80062ca:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80062cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80062d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80062da:	2300      	movs	r3, #0
 80062dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062de:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80062e2:	460b      	mov	r3, r1
 80062e4:	4313      	orrs	r3, r2
 80062e6:	d009      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80062e8:	4b77      	ldr	r3, [pc, #476]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ec:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80062f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f6:	4a74      	ldr	r2, [pc, #464]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062f8:	430b      	orrs	r3, r1
 80062fa:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006308:	633b      	str	r3, [r7, #48]	; 0x30
 800630a:	2300      	movs	r3, #0
 800630c:	637b      	str	r3, [r7, #52]	; 0x34
 800630e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006312:	460b      	mov	r3, r1
 8006314:	4313      	orrs	r3, r2
 8006316:	d00a      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006318:	4b6b      	ldr	r3, [pc, #428]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800631a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800631c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006328:	4a67      	ldr	r2, [pc, #412]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800632a:	430b      	orrs	r3, r1
 800632c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800632e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006336:	2100      	movs	r1, #0
 8006338:	62b9      	str	r1, [r7, #40]	; 0x28
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006340:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006344:	460b      	mov	r3, r1
 8006346:	4313      	orrs	r3, r2
 8006348:	d011      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800634a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800634e:	3308      	adds	r3, #8
 8006350:	2100      	movs	r1, #0
 8006352:	4618      	mov	r0, r3
 8006354:	f001 fa4a 	bl	80077ec <RCCEx_PLL2_Config>
 8006358:	4603      	mov	r3, r0
 800635a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800635e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800636a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800636e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	2100      	movs	r1, #0
 8006378:	6239      	str	r1, [r7, #32]
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	627b      	str	r3, [r7, #36]	; 0x24
 8006380:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006384:	460b      	mov	r3, r1
 8006386:	4313      	orrs	r3, r2
 8006388:	d011      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800638a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800638e:	3308      	adds	r3, #8
 8006390:	2101      	movs	r1, #1
 8006392:	4618      	mov	r0, r3
 8006394:	f001 fa2a 	bl	80077ec <RCCEx_PLL2_Config>
 8006398:	4603      	mov	r3, r0
 800639a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800639e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80063ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b6:	2100      	movs	r1, #0
 80063b8:	61b9      	str	r1, [r7, #24]
 80063ba:	f003 0304 	and.w	r3, r3, #4
 80063be:	61fb      	str	r3, [r7, #28]
 80063c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80063c4:	460b      	mov	r3, r1
 80063c6:	4313      	orrs	r3, r2
 80063c8:	d011      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ce:	3308      	adds	r3, #8
 80063d0:	2102      	movs	r1, #2
 80063d2:	4618      	mov	r0, r3
 80063d4:	f001 fa0a 	bl	80077ec <RCCEx_PLL2_Config>
 80063d8:	4603      	mov	r3, r0
 80063da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80063de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80063ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	2100      	movs	r1, #0
 80063f8:	6139      	str	r1, [r7, #16]
 80063fa:	f003 0308 	and.w	r3, r3, #8
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006404:	460b      	mov	r3, r1
 8006406:	4313      	orrs	r3, r2
 8006408:	d011      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800640a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800640e:	3328      	adds	r3, #40	; 0x28
 8006410:	2100      	movs	r1, #0
 8006412:	4618      	mov	r0, r3
 8006414:	f001 fa9c 	bl	8007950 <RCCEx_PLL3_Config>
 8006418:	4603      	mov	r3, r0
 800641a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800641e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006426:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800642a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800642e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	2100      	movs	r1, #0
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	f003 0310 	and.w	r3, r3, #16
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006444:	460b      	mov	r3, r1
 8006446:	4313      	orrs	r3, r2
 8006448:	d011      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800644a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800644e:	3328      	adds	r3, #40	; 0x28
 8006450:	2101      	movs	r1, #1
 8006452:	4618      	mov	r0, r3
 8006454:	f001 fa7c 	bl	8007950 <RCCEx_PLL3_Config>
 8006458:	4603      	mov	r3, r0
 800645a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800645e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006466:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800646a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800646e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006476:	2100      	movs	r1, #0
 8006478:	6039      	str	r1, [r7, #0]
 800647a:	f003 0320 	and.w	r3, r3, #32
 800647e:	607b      	str	r3, [r7, #4]
 8006480:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006484:	460b      	mov	r3, r1
 8006486:	4313      	orrs	r3, r2
 8006488:	d011      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800648a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800648e:	3328      	adds	r3, #40	; 0x28
 8006490:	2102      	movs	r1, #2
 8006492:	4618      	mov	r0, r3
 8006494:	f001 fa5c 	bl	8007950 <RCCEx_PLL3_Config>
 8006498:	4603      	mov	r3, r0
 800649a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800649e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80064ae:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	e000      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
}
 80064bc:	4618      	mov	r0, r3
 80064be:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80064c2:	46bd      	mov	sp, r7
 80064c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064c8:	58024400 	.word	0x58024400

080064cc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b090      	sub	sp, #64	; 0x40
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80064d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064da:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80064de:	430b      	orrs	r3, r1
 80064e0:	f040 8094 	bne.w	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80064e4:	4b9e      	ldr	r3, [pc, #632]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	f200 8087 	bhi.w	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80064f6:	a201      	add	r2, pc, #4	; (adr r2, 80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80064f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fc:	08006511 	.word	0x08006511
 8006500:	08006539 	.word	0x08006539
 8006504:	08006561 	.word	0x08006561
 8006508:	080065fd 	.word	0x080065fd
 800650c:	08006589 	.word	0x08006589
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006510:	4b93      	ldr	r3, [pc, #588]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006518:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800651c:	d108      	bne.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800651e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006522:	4618      	mov	r0, r3
 8006524:	f001 f810 	bl	8007548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800652c:	f000 bd45 	b.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006530:	2300      	movs	r3, #0
 8006532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006534:	f000 bd41 	b.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006538:	4b89      	ldr	r3, [pc, #548]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006544:	d108      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006546:	f107 0318 	add.w	r3, r7, #24
 800654a:	4618      	mov	r0, r3
 800654c:	f000 fd54 	bl	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006554:	f000 bd31 	b.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800655c:	f000 bd2d 	b.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006560:	4b7f      	ldr	r3, [pc, #508]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800656c:	d108      	bne.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800656e:	f107 030c 	add.w	r3, r7, #12
 8006572:	4618      	mov	r0, r3
 8006574:	f000 fe94 	bl	80072a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800657c:	f000 bd1d 	b.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006580:	2300      	movs	r3, #0
 8006582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006584:	f000 bd19 	b.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006588:	4b75      	ldr	r3, [pc, #468]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800658a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006590:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006592:	4b73      	ldr	r3, [pc, #460]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0304 	and.w	r3, r3, #4
 800659a:	2b04      	cmp	r3, #4
 800659c:	d10c      	bne.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800659e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d109      	bne.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065a4:	4b6e      	ldr	r3, [pc, #440]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	08db      	lsrs	r3, r3, #3
 80065aa:	f003 0303 	and.w	r3, r3, #3
 80065ae:	4a6d      	ldr	r2, [pc, #436]	; (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80065b0:	fa22 f303 	lsr.w	r3, r2, r3
 80065b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065b6:	e01f      	b.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80065b8:	4b69      	ldr	r3, [pc, #420]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065c4:	d106      	bne.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80065c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065cc:	d102      	bne.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80065ce:	4b66      	ldr	r3, [pc, #408]	; (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80065d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065d2:	e011      	b.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065d4:	4b62      	ldr	r3, [pc, #392]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065e0:	d106      	bne.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80065e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065e8:	d102      	bne.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80065ea:	4b60      	ldr	r3, [pc, #384]	; (800676c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80065ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065ee:	e003      	b.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80065f0:	2300      	movs	r3, #0
 80065f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80065f4:	f000 bce1 	b.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80065f8:	f000 bcdf 	b.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80065fc:	4b5c      	ldr	r3, [pc, #368]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80065fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006600:	f000 bcdb 	b.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006604:	2300      	movs	r3, #0
 8006606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006608:	f000 bcd7 	b.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800660c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006610:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006614:	430b      	orrs	r3, r1
 8006616:	f040 80ad 	bne.w	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800661a:	4b51      	ldr	r3, [pc, #324]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800661c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006622:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800662a:	d056      	beq.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006632:	f200 8090 	bhi.w	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	2bc0      	cmp	r3, #192	; 0xc0
 800663a:	f000 8088 	beq.w	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006640:	2bc0      	cmp	r3, #192	; 0xc0
 8006642:	f200 8088 	bhi.w	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	2b80      	cmp	r3, #128	; 0x80
 800664a:	d032      	beq.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	2b80      	cmp	r3, #128	; 0x80
 8006650:	f200 8081 	bhi.w	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	2b40      	cmp	r3, #64	; 0x40
 800665e:	d014      	beq.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006660:	e079      	b.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006662:	4b3f      	ldr	r3, [pc, #252]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800666a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800666e:	d108      	bne.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006674:	4618      	mov	r0, r3
 8006676:	f000 ff67 	bl	8007548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800667e:	f000 bc9c 	b.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006682:	2300      	movs	r3, #0
 8006684:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006686:	f000 bc98 	b.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800668a:	4b35      	ldr	r3, [pc, #212]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006696:	d108      	bne.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006698:	f107 0318 	add.w	r3, r7, #24
 800669c:	4618      	mov	r0, r3
 800669e:	f000 fcab 	bl	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066a6:	f000 bc88 	b.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066aa:	2300      	movs	r3, #0
 80066ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066ae:	f000 bc84 	b.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066b2:	4b2b      	ldr	r3, [pc, #172]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066be:	d108      	bne.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066c0:	f107 030c 	add.w	r3, r7, #12
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 fdeb 	bl	80072a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066ce:	f000 bc74 	b.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066d2:	2300      	movs	r3, #0
 80066d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066d6:	f000 bc70 	b.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066da:	4b21      	ldr	r3, [pc, #132]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066e2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066e4:	4b1e      	ldr	r3, [pc, #120]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d10c      	bne.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80066f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d109      	bne.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066f6:	4b1a      	ldr	r3, [pc, #104]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	08db      	lsrs	r3, r3, #3
 80066fc:	f003 0303 	and.w	r3, r3, #3
 8006700:	4a18      	ldr	r2, [pc, #96]	; (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006702:	fa22 f303 	lsr.w	r3, r2, r3
 8006706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006708:	e01f      	b.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800670a:	4b15      	ldr	r3, [pc, #84]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006716:	d106      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800671e:	d102      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006720:	4b11      	ldr	r3, [pc, #68]	; (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006724:	e011      	b.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006726:	4b0e      	ldr	r3, [pc, #56]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006732:	d106      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800673a:	d102      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800673c:	4b0b      	ldr	r3, [pc, #44]	; (800676c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800673e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006740:	e003      	b.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006746:	f000 bc38 	b.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800674a:	f000 bc36 	b.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800674e:	4b08      	ldr	r3, [pc, #32]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006750:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006752:	f000 bc32 	b.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800675a:	f000 bc2e 	b.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800675e:	bf00      	nop
 8006760:	58024400 	.word	0x58024400
 8006764:	03d09000 	.word	0x03d09000
 8006768:	003d0900 	.word	0x003d0900
 800676c:	00f42400 	.word	0x00f42400
 8006770:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006774:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006778:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800677c:	430b      	orrs	r3, r1
 800677e:	f040 809c 	bne.w	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006782:	4b9e      	ldr	r3, [pc, #632]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006786:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800678a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800678c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006792:	d054      	beq.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800679a:	f200 808b 	bhi.w	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800679e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80067a4:	f000 8083 	beq.w	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80067a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80067ae:	f200 8081 	bhi.w	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067b8:	d02f      	beq.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067c0:	d878      	bhi.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d004      	beq.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80067c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067ce:	d012      	beq.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80067d0:	e070      	b.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067d2:	4b8a      	ldr	r3, [pc, #552]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067de:	d107      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 feaf 	bl	8007548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067ee:	e3e4      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067f0:	2300      	movs	r3, #0
 80067f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067f4:	e3e1      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067f6:	4b81      	ldr	r3, [pc, #516]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006802:	d107      	bne.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006804:	f107 0318 	add.w	r3, r7, #24
 8006808:	4618      	mov	r0, r3
 800680a:	f000 fbf5 	bl	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006812:	e3d2      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006814:	2300      	movs	r3, #0
 8006816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006818:	e3cf      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800681a:	4b78      	ldr	r3, [pc, #480]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006822:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006826:	d107      	bne.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006828:	f107 030c 	add.w	r3, r7, #12
 800682c:	4618      	mov	r0, r3
 800682e:	f000 fd37 	bl	80072a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006836:	e3c0      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006838:	2300      	movs	r3, #0
 800683a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800683c:	e3bd      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800683e:	4b6f      	ldr	r3, [pc, #444]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006842:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006846:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006848:	4b6c      	ldr	r3, [pc, #432]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b04      	cmp	r3, #4
 8006852:	d10c      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006856:	2b00      	cmp	r3, #0
 8006858:	d109      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800685a:	4b68      	ldr	r3, [pc, #416]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	08db      	lsrs	r3, r3, #3
 8006860:	f003 0303 	and.w	r3, r3, #3
 8006864:	4a66      	ldr	r2, [pc, #408]	; (8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006866:	fa22 f303 	lsr.w	r3, r2, r3
 800686a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800686c:	e01e      	b.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800686e:	4b63      	ldr	r3, [pc, #396]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800687a:	d106      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800687c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800687e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006882:	d102      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006884:	4b5f      	ldr	r3, [pc, #380]	; (8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006888:	e010      	b.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800688a:	4b5c      	ldr	r3, [pc, #368]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006896:	d106      	bne.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800689e:	d102      	bne.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80068a0:	4b59      	ldr	r3, [pc, #356]	; (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80068a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068a4:	e002      	b.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80068a6:	2300      	movs	r3, #0
 80068a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80068aa:	e386      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80068ac:	e385      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80068ae:	4b57      	ldr	r3, [pc, #348]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80068b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068b2:	e382      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068b8:	e37f      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80068ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068be:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80068c2:	430b      	orrs	r3, r1
 80068c4:	f040 80a7 	bne.w	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80068c8:	4b4c      	ldr	r3, [pc, #304]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068cc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80068d0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80068d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068d8:	d055      	beq.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80068da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068e0:	f200 8096 	bhi.w	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068ea:	f000 8084 	beq.w	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068f4:	f200 808c 	bhi.w	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068fe:	d030      	beq.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006906:	f200 8083 	bhi.w	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	2b00      	cmp	r3, #0
 800690e:	d004      	beq.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006916:	d012      	beq.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006918:	e07a      	b.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800691a:	4b38      	ldr	r3, [pc, #224]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006922:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006926:	d107      	bne.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800692c:	4618      	mov	r0, r3
 800692e:	f000 fe0b 	bl	8007548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006936:	e340      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006938:	2300      	movs	r3, #0
 800693a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800693c:	e33d      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800693e:	4b2f      	ldr	r3, [pc, #188]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006946:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800694a:	d107      	bne.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800694c:	f107 0318 	add.w	r3, r7, #24
 8006950:	4618      	mov	r0, r3
 8006952:	f000 fb51 	bl	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800695a:	e32e      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800695c:	2300      	movs	r3, #0
 800695e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006960:	e32b      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006962:	4b26      	ldr	r3, [pc, #152]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800696a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800696e:	d107      	bne.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006970:	f107 030c 	add.w	r3, r7, #12
 8006974:	4618      	mov	r0, r3
 8006976:	f000 fc93 	bl	80072a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800697e:	e31c      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006980:	2300      	movs	r3, #0
 8006982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006984:	e319      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006986:	4b1d      	ldr	r3, [pc, #116]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800698a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800698e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006990:	4b1a      	ldr	r3, [pc, #104]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b04      	cmp	r3, #4
 800699a:	d10c      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800699c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d109      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069a2:	4b16      	ldr	r3, [pc, #88]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	08db      	lsrs	r3, r3, #3
 80069a8:	f003 0303 	and.w	r3, r3, #3
 80069ac:	4a14      	ldr	r2, [pc, #80]	; (8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80069ae:	fa22 f303 	lsr.w	r3, r2, r3
 80069b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b4:	e01e      	b.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069b6:	4b11      	ldr	r3, [pc, #68]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069c2:	d106      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80069c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069ca:	d102      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80069cc:	4b0d      	ldr	r3, [pc, #52]	; (8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80069ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069d0:	e010      	b.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069d2:	4b0a      	ldr	r3, [pc, #40]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069de:	d106      	bne.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80069e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069e6:	d102      	bne.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80069e8:	4b07      	ldr	r3, [pc, #28]	; (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80069ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069ec:	e002      	b.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80069ee:	2300      	movs	r3, #0
 80069f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80069f2:	e2e2      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069f4:	e2e1      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80069f6:	4b05      	ldr	r3, [pc, #20]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80069f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069fa:	e2de      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069fc:	58024400 	.word	0x58024400
 8006a00:	03d09000 	.word	0x03d09000
 8006a04:	003d0900 	.word	0x003d0900
 8006a08:	00f42400 	.word	0x00f42400
 8006a0c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006a10:	2300      	movs	r3, #0
 8006a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a14:	e2d1      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a1a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006a1e:	430b      	orrs	r3, r1
 8006a20:	f040 809c 	bne.w	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006a24:	4b93      	ldr	r3, [pc, #588]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a28:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006a2c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a34:	d054      	beq.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a3c:	f200 808b 	bhi.w	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a46:	f000 8083 	beq.w	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a50:	f200 8081 	bhi.w	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a5a:	d02f      	beq.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a62:	d878      	bhi.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d004      	beq.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a70:	d012      	beq.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006a72:	e070      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a74:	4b7f      	ldr	r3, [pc, #508]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a80:	d107      	bne.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 fd5e 	bl	8007548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a90:	e293      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a96:	e290      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a98:	4b76      	ldr	r3, [pc, #472]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006aa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006aa4:	d107      	bne.n	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aa6:	f107 0318 	add.w	r3, r7, #24
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 faa4 	bl	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ab4:	e281      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aba:	e27e      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006abc:	4b6d      	ldr	r3, [pc, #436]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ac8:	d107      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aca:	f107 030c 	add.w	r3, r7, #12
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 fbe6 	bl	80072a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ad8:	e26f      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ada:	2300      	movs	r3, #0
 8006adc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ade:	e26c      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ae0:	4b64      	ldr	r3, [pc, #400]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ae8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006aea:	4b62      	ldr	r3, [pc, #392]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0304 	and.w	r3, r3, #4
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d10c      	bne.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d109      	bne.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006afc:	4b5d      	ldr	r3, [pc, #372]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	08db      	lsrs	r3, r3, #3
 8006b02:	f003 0303 	and.w	r3, r3, #3
 8006b06:	4a5c      	ldr	r2, [pc, #368]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006b08:	fa22 f303 	lsr.w	r3, r2, r3
 8006b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b0e:	e01e      	b.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b10:	4b58      	ldr	r3, [pc, #352]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b1c:	d106      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b24:	d102      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b26:	4b55      	ldr	r3, [pc, #340]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006b28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b2a:	e010      	b.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b2c:	4b51      	ldr	r3, [pc, #324]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b38:	d106      	bne.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b40:	d102      	bne.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b42:	4b4f      	ldr	r3, [pc, #316]	; (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006b44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b46:	e002      	b.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006b4c:	e235      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b4e:	e234      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b50:	4b4c      	ldr	r3, [pc, #304]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b54:	e231      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006b56:	2300      	movs	r3, #0
 8006b58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b5a:	e22e      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b60:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006b64:	430b      	orrs	r3, r1
 8006b66:	f040 808f 	bne.w	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006b6a:	4b42      	ldr	r3, [pc, #264]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b6e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006b72:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b7a:	d06b      	beq.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b82:	d874      	bhi.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b8a:	d056      	beq.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b92:	d86c      	bhi.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b9a:	d03b      	beq.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ba2:	d864      	bhi.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006baa:	d021      	beq.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bb2:	d85c      	bhi.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d004      	beq.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bc0:	d004      	beq.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006bc2:	e054      	b.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006bc4:	f7fe fa62 	bl	800508c <HAL_RCC_GetPCLK1Freq>
 8006bc8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006bca:	e1f6      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bcc:	4b29      	ldr	r3, [pc, #164]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bd8:	d107      	bne.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bda:	f107 0318 	add.w	r3, r7, #24
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 fa0a 	bl	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006be8:	e1e7      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bea:	2300      	movs	r3, #0
 8006bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bee:	e1e4      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006bf0:	4b20      	ldr	r3, [pc, #128]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bfc:	d107      	bne.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bfe:	f107 030c 	add.w	r3, r7, #12
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 fb4c 	bl	80072a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c0c:	e1d5      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c12:	e1d2      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c14:	4b17      	ldr	r3, [pc, #92]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0304 	and.w	r3, r3, #4
 8006c1c:	2b04      	cmp	r3, #4
 8006c1e:	d109      	bne.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c20:	4b14      	ldr	r3, [pc, #80]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	08db      	lsrs	r3, r3, #3
 8006c26:	f003 0303 	and.w	r3, r3, #3
 8006c2a:	4a13      	ldr	r2, [pc, #76]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c32:	e1c2      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c34:	2300      	movs	r3, #0
 8006c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c38:	e1bf      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006c3a:	4b0e      	ldr	r3, [pc, #56]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c46:	d102      	bne.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006c48:	4b0c      	ldr	r3, [pc, #48]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c4c:	e1b5      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c52:	e1b2      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006c54:	4b07      	ldr	r3, [pc, #28]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c60:	d102      	bne.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006c62:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006c64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c66:	e1a8      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c6c:	e1a5      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c72:	e1a2      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c74:	58024400 	.word	0x58024400
 8006c78:	03d09000 	.word	0x03d09000
 8006c7c:	003d0900 	.word	0x003d0900
 8006c80:	00f42400 	.word	0x00f42400
 8006c84:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c8c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006c90:	430b      	orrs	r3, r1
 8006c92:	d173      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006c94:	4b9c      	ldr	r3, [pc, #624]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c9c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ca4:	d02f      	beq.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cac:	d863      	bhi.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d004      	beq.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cba:	d012      	beq.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006cbc:	e05b      	b.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cbe:	4b92      	ldr	r3, [pc, #584]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cca:	d107      	bne.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ccc:	f107 0318 	add.w	r3, r7, #24
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 f991 	bl	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cda:	e16e      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ce0:	e16b      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ce2:	4b89      	ldr	r3, [pc, #548]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cee:	d107      	bne.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cf0:	f107 030c 	add.w	r3, r7, #12
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f000 fad3 	bl	80072a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cfe:	e15c      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d00:	2300      	movs	r3, #0
 8006d02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d04:	e159      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d06:	4b80      	ldr	r3, [pc, #512]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d0e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d10:	4b7d      	ldr	r3, [pc, #500]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b04      	cmp	r3, #4
 8006d1a:	d10c      	bne.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d22:	4b79      	ldr	r3, [pc, #484]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	08db      	lsrs	r3, r3, #3
 8006d28:	f003 0303 	and.w	r3, r3, #3
 8006d2c:	4a77      	ldr	r2, [pc, #476]	; (8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d34:	e01e      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d36:	4b74      	ldr	r3, [pc, #464]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d42:	d106      	bne.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d4a:	d102      	bne.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d4c:	4b70      	ldr	r3, [pc, #448]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d50:	e010      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d52:	4b6d      	ldr	r3, [pc, #436]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d5e:	d106      	bne.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d66:	d102      	bne.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d68:	4b6a      	ldr	r3, [pc, #424]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d6c:	e002      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006d72:	e122      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d74:	e121      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006d76:	2300      	movs	r3, #0
 8006d78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d7a:	e11e      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006d7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d80:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006d84:	430b      	orrs	r3, r1
 8006d86:	d133      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006d88:	4b5f      	ldr	r3, [pc, #380]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d90:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d004      	beq.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d9e:	d012      	beq.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006da0:	e023      	b.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006da2:	4b59      	ldr	r3, [pc, #356]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006daa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dae:	d107      	bne.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 fbc7 	bl	8007548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dbe:	e0fc      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dc4:	e0f9      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006dc6:	4b50      	ldr	r3, [pc, #320]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dd2:	d107      	bne.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dd4:	f107 0318 	add.w	r3, r7, #24
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 f90d 	bl	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006de2:	e0ea      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006de8:	e0e7      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006dea:	2300      	movs	r3, #0
 8006dec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dee:	e0e4      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006df4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006df8:	430b      	orrs	r3, r1
 8006dfa:	f040 808d 	bne.w	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006dfe:	4b42      	ldr	r3, [pc, #264]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e02:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006e06:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e0e:	d06b      	beq.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e16:	d874      	bhi.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e1e:	d056      	beq.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e26:	d86c      	bhi.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e2e:	d03b      	beq.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e36:	d864      	bhi.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e3e:	d021      	beq.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e46:	d85c      	bhi.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d004      	beq.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e54:	d004      	beq.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006e56:	e054      	b.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006e58:	f000 f8b8 	bl	8006fcc <HAL_RCCEx_GetD3PCLK1Freq>
 8006e5c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006e5e:	e0ac      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e60:	4b29      	ldr	r3, [pc, #164]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e6c:	d107      	bne.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e6e:	f107 0318 	add.w	r3, r7, #24
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 f8c0 	bl	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e7c:	e09d      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e82:	e09a      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e84:	4b20      	ldr	r3, [pc, #128]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e90:	d107      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e92:	f107 030c 	add.w	r3, r7, #12
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 fa02 	bl	80072a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ea0:	e08b      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ea6:	e088      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ea8:	4b17      	ldr	r3, [pc, #92]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b04      	cmp	r3, #4
 8006eb2:	d109      	bne.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006eb4:	4b14      	ldr	r3, [pc, #80]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	08db      	lsrs	r3, r3, #3
 8006eba:	f003 0303 	and.w	r3, r3, #3
 8006ebe:	4a13      	ldr	r2, [pc, #76]	; (8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ec6:	e078      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ecc:	e075      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006ece:	4b0e      	ldr	r3, [pc, #56]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eda:	d102      	bne.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006edc:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006ede:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ee0:	e06b      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ee6:	e068      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ee8:	4b07      	ldr	r3, [pc, #28]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ef4:	d102      	bne.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006ef6:	4b07      	ldr	r3, [pc, #28]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006efa:	e05e      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f00:	e05b      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f06:	e058      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f08:	58024400 	.word	0x58024400
 8006f0c:	03d09000 	.word	0x03d09000
 8006f10:	003d0900 	.word	0x003d0900
 8006f14:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f1c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006f20:	430b      	orrs	r3, r1
 8006f22:	d148      	bne.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006f24:	4b27      	ldr	r3, [pc, #156]	; (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f2c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f34:	d02a      	beq.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f3c:	d838      	bhi.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d004      	beq.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f4a:	d00d      	beq.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006f4c:	e030      	b.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f4e:	4b1d      	ldr	r3, [pc, #116]	; (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f5a:	d102      	bne.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006f5c:	4b1a      	ldr	r3, [pc, #104]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f60:	e02b      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f66:	e028      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f68:	4b16      	ldr	r3, [pc, #88]	; (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f74:	d107      	bne.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fae4 	bl	8007548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f84:	e019      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f86:	2300      	movs	r3, #0
 8006f88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f8a:	e016      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f8c:	4b0d      	ldr	r3, [pc, #52]	; (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f98:	d107      	bne.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f9a:	f107 0318 	add.w	r3, r7, #24
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 f82a 	bl	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fa8:	e007      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fae:	e004      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fb4:	e001      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3740      	adds	r7, #64	; 0x40
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	58024400 	.word	0x58024400
 8006fc8:	00f42400 	.word	0x00f42400

08006fcc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006fd0:	f7fe f82c 	bl	800502c <HAL_RCC_GetHCLKFreq>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	4b06      	ldr	r3, [pc, #24]	; (8006ff0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	091b      	lsrs	r3, r3, #4
 8006fdc:	f003 0307 	and.w	r3, r3, #7
 8006fe0:	4904      	ldr	r1, [pc, #16]	; (8006ff4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006fe2:	5ccb      	ldrb	r3, [r1, r3]
 8006fe4:	f003 031f 	and.w	r3, r3, #31
 8006fe8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	58024400 	.word	0x58024400
 8006ff4:	0800d9c0 	.word	0x0800d9c0

08006ff8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b089      	sub	sp, #36	; 0x24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007000:	4ba1      	ldr	r3, [pc, #644]	; (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800700a:	4b9f      	ldr	r3, [pc, #636]	; (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	0b1b      	lsrs	r3, r3, #12
 8007010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007014:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007016:	4b9c      	ldr	r3, [pc, #624]	; (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701a:	091b      	lsrs	r3, r3, #4
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007022:	4b99      	ldr	r3, [pc, #612]	; (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007026:	08db      	lsrs	r3, r3, #3
 8007028:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	fb02 f303 	mul.w	r3, r2, r3
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 8111 	beq.w	8007268 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	2b02      	cmp	r3, #2
 800704a:	f000 8083 	beq.w	8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	2b02      	cmp	r3, #2
 8007052:	f200 80a1 	bhi.w	8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d003      	beq.n	8007064 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d056      	beq.n	8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007062:	e099      	b.n	8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007064:	4b88      	ldr	r3, [pc, #544]	; (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0320 	and.w	r3, r3, #32
 800706c:	2b00      	cmp	r3, #0
 800706e:	d02d      	beq.n	80070cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007070:	4b85      	ldr	r3, [pc, #532]	; (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	08db      	lsrs	r3, r3, #3
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	4a84      	ldr	r2, [pc, #528]	; (800728c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800707c:	fa22 f303 	lsr.w	r3, r2, r3
 8007080:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	ee07 3a90 	vmov	s15, r3
 8007088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800709a:	4b7b      	ldr	r3, [pc, #492]	; (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800709c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80070ca:	e087      	b.n	80071dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007294 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80070da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070de:	4b6a      	ldr	r3, [pc, #424]	; (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e6:	ee07 3a90 	vmov	s15, r3
 80070ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80070f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800710e:	e065      	b.n	80071dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800711e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007122:	4b59      	ldr	r3, [pc, #356]	; (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007132:	ed97 6a03 	vldr	s12, [r7, #12]
 8007136:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800713a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800713e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800714a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007152:	e043      	b.n	80071dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800729c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007166:	4b48      	ldr	r3, [pc, #288]	; (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007176:	ed97 6a03 	vldr	s12, [r7, #12]
 800717a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800717e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800718a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800718e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007196:	e021      	b.n	80071dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071aa:	4b37      	ldr	r3, [pc, #220]	; (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80071be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80071dc:	4b2a      	ldr	r3, [pc, #168]	; (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e0:	0a5b      	lsrs	r3, r3, #9
 80071e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80071fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007202:	ee17 2a90 	vmov	r2, s15
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800720a:	4b1f      	ldr	r3, [pc, #124]	; (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800720c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720e:	0c1b      	lsrs	r3, r3, #16
 8007210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007214:	ee07 3a90 	vmov	s15, r3
 8007218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007220:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007224:	edd7 6a07 	vldr	s13, [r7, #28]
 8007228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800722c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007230:	ee17 2a90 	vmov	r2, s15
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007238:	4b13      	ldr	r3, [pc, #76]	; (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800723a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723c:	0e1b      	lsrs	r3, r3, #24
 800723e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007242:	ee07 3a90 	vmov	s15, r3
 8007246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800724e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007252:	edd7 6a07 	vldr	s13, [r7, #28]
 8007256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800725a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800725e:	ee17 2a90 	vmov	r2, s15
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007266:	e008      	b.n	800727a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	609a      	str	r2, [r3, #8]
}
 800727a:	bf00      	nop
 800727c:	3724      	adds	r7, #36	; 0x24
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	58024400 	.word	0x58024400
 800728c:	03d09000 	.word	0x03d09000
 8007290:	46000000 	.word	0x46000000
 8007294:	4c742400 	.word	0x4c742400
 8007298:	4a742400 	.word	0x4a742400
 800729c:	4b742400 	.word	0x4b742400

080072a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b089      	sub	sp, #36	; 0x24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072a8:	4ba1      	ldr	r3, [pc, #644]	; (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ac:	f003 0303 	and.w	r3, r3, #3
 80072b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80072b2:	4b9f      	ldr	r3, [pc, #636]	; (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b6:	0d1b      	lsrs	r3, r3, #20
 80072b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80072be:	4b9c      	ldr	r3, [pc, #624]	; (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c2:	0a1b      	lsrs	r3, r3, #8
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80072ca:	4b99      	ldr	r3, [pc, #612]	; (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ce:	08db      	lsrs	r3, r3, #3
 80072d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	fb02 f303 	mul.w	r3, r2, r3
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 8111 	beq.w	8007510 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	f000 8083 	beq.w	80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	f200 80a1 	bhi.w	8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d056      	beq.n	80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800730a:	e099      	b.n	8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800730c:	4b88      	ldr	r3, [pc, #544]	; (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0320 	and.w	r3, r3, #32
 8007314:	2b00      	cmp	r3, #0
 8007316:	d02d      	beq.n	8007374 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007318:	4b85      	ldr	r3, [pc, #532]	; (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	08db      	lsrs	r3, r3, #3
 800731e:	f003 0303 	and.w	r3, r3, #3
 8007322:	4a84      	ldr	r2, [pc, #528]	; (8007534 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007324:	fa22 f303 	lsr.w	r3, r2, r3
 8007328:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	ee07 3a90 	vmov	s15, r3
 8007330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007342:	4b7b      	ldr	r3, [pc, #492]	; (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007352:	ed97 6a03 	vldr	s12, [r7, #12]
 8007356:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800735a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800735e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800736a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007372:	e087      	b.n	8007484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800753c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007386:	4b6a      	ldr	r3, [pc, #424]	; (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007396:	ed97 6a03 	vldr	s12, [r7, #12]
 800739a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800739e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073b6:	e065      	b.n	8007484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	ee07 3a90 	vmov	s15, r3
 80073be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ca:	4b59      	ldr	r3, [pc, #356]	; (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d2:	ee07 3a90 	vmov	s15, r3
 80073d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073da:	ed97 6a03 	vldr	s12, [r7, #12]
 80073de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073fa:	e043      	b.n	8007484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007406:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800740a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800740e:	4b48      	ldr	r3, [pc, #288]	; (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007416:	ee07 3a90 	vmov	s15, r3
 800741a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007422:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800742a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800742e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800743a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800743e:	e021      	b.n	8007484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	ee07 3a90 	vmov	s15, r3
 8007446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800744e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007452:	4b37      	ldr	r3, [pc, #220]	; (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800745a:	ee07 3a90 	vmov	s15, r3
 800745e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007462:	ed97 6a03 	vldr	s12, [r7, #12]
 8007466:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800746a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800746e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800747a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800747e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007482:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007484:	4b2a      	ldr	r3, [pc, #168]	; (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007488:	0a5b      	lsrs	r3, r3, #9
 800748a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007496:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800749a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800749e:	edd7 6a07 	vldr	s13, [r7, #28]
 80074a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074aa:	ee17 2a90 	vmov	r2, s15
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80074b2:	4b1f      	ldr	r3, [pc, #124]	; (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b6:	0c1b      	lsrs	r3, r3, #16
 80074b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074bc:	ee07 3a90 	vmov	s15, r3
 80074c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80074d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074d8:	ee17 2a90 	vmov	r2, s15
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80074e0:	4b13      	ldr	r3, [pc, #76]	; (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e4:	0e1b      	lsrs	r3, r3, #24
 80074e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80074fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007506:	ee17 2a90 	vmov	r2, s15
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800750e:	e008      	b.n	8007522 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	609a      	str	r2, [r3, #8]
}
 8007522:	bf00      	nop
 8007524:	3724      	adds	r7, #36	; 0x24
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	58024400 	.word	0x58024400
 8007534:	03d09000 	.word	0x03d09000
 8007538:	46000000 	.word	0x46000000
 800753c:	4c742400 	.word	0x4c742400
 8007540:	4a742400 	.word	0x4a742400
 8007544:	4b742400 	.word	0x4b742400

08007548 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007548:	b480      	push	{r7}
 800754a:	b089      	sub	sp, #36	; 0x24
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007550:	4ba0      	ldr	r3, [pc, #640]	; (80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007554:	f003 0303 	and.w	r3, r3, #3
 8007558:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800755a:	4b9e      	ldr	r3, [pc, #632]	; (80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800755c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755e:	091b      	lsrs	r3, r3, #4
 8007560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007564:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007566:	4b9b      	ldr	r3, [pc, #620]	; (80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007570:	4b98      	ldr	r3, [pc, #608]	; (80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007574:	08db      	lsrs	r3, r3, #3
 8007576:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	fb02 f303 	mul.w	r3, r2, r3
 8007580:	ee07 3a90 	vmov	s15, r3
 8007584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007588:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 8111 	beq.w	80077b6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	2b02      	cmp	r3, #2
 8007598:	f000 8083 	beq.w	80076a2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	2b02      	cmp	r3, #2
 80075a0:	f200 80a1 	bhi.w	80076e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d003      	beq.n	80075b2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d056      	beq.n	800765e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80075b0:	e099      	b.n	80076e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075b2:	4b88      	ldr	r3, [pc, #544]	; (80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0320 	and.w	r3, r3, #32
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d02d      	beq.n	800761a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075be:	4b85      	ldr	r3, [pc, #532]	; (80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	08db      	lsrs	r3, r3, #3
 80075c4:	f003 0303 	and.w	r3, r3, #3
 80075c8:	4a83      	ldr	r2, [pc, #524]	; (80077d8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80075ca:	fa22 f303 	lsr.w	r3, r2, r3
 80075ce:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	ee07 3a90 	vmov	s15, r3
 80075e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e8:	4b7a      	ldr	r3, [pc, #488]	; (80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f0:	ee07 3a90 	vmov	s15, r3
 80075f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80075fc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80077dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800760c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007614:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007618:	e087      	b.n	800772a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	ee07 3a90 	vmov	s15, r3
 8007620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007624:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80077e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800762c:	4b69      	ldr	r3, [pc, #420]	; (80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800762e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007634:	ee07 3a90 	vmov	s15, r3
 8007638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800763c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007640:	eddf 5a66 	vldr	s11, [pc, #408]	; 80077dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800764c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007658:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800765c:	e065      	b.n	800772a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	ee07 3a90 	vmov	s15, r3
 8007664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007668:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80077e4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800766c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007670:	4b58      	ldr	r3, [pc, #352]	; (80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007678:	ee07 3a90 	vmov	s15, r3
 800767c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007680:	ed97 6a03 	vldr	s12, [r7, #12]
 8007684:	eddf 5a55 	vldr	s11, [pc, #340]	; 80077dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800768c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076a0:	e043      	b.n	800772a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	ee07 3a90 	vmov	s15, r3
 80076a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ac:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80077e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80076b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b4:	4b47      	ldr	r3, [pc, #284]	; (80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076bc:	ee07 3a90 	vmov	s15, r3
 80076c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80076c8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80077dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076e4:	e021      	b.n	800772a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	ee07 3a90 	vmov	s15, r3
 80076ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80077e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80076f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f8:	4b36      	ldr	r3, [pc, #216]	; (80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007700:	ee07 3a90 	vmov	s15, r3
 8007704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007708:	ed97 6a03 	vldr	s12, [r7, #12]
 800770c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80077dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800771c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007724:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007728:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800772a:	4b2a      	ldr	r3, [pc, #168]	; (80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800772c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772e:	0a5b      	lsrs	r3, r3, #9
 8007730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007734:	ee07 3a90 	vmov	s15, r3
 8007738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007740:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007744:	edd7 6a07 	vldr	s13, [r7, #28]
 8007748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800774c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007750:	ee17 2a90 	vmov	r2, s15
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007758:	4b1e      	ldr	r3, [pc, #120]	; (80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800775a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775c:	0c1b      	lsrs	r3, r3, #16
 800775e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007762:	ee07 3a90 	vmov	s15, r3
 8007766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800776e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007772:	edd7 6a07 	vldr	s13, [r7, #28]
 8007776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800777a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800777e:	ee17 2a90 	vmov	r2, s15
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007786:	4b13      	ldr	r3, [pc, #76]	; (80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778a:	0e1b      	lsrs	r3, r3, #24
 800778c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007790:	ee07 3a90 	vmov	s15, r3
 8007794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800779c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80077a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ac:	ee17 2a90 	vmov	r2, s15
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80077b4:	e008      	b.n	80077c8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	609a      	str	r2, [r3, #8]
}
 80077c8:	bf00      	nop
 80077ca:	3724      	adds	r7, #36	; 0x24
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	58024400 	.word	0x58024400
 80077d8:	03d09000 	.word	0x03d09000
 80077dc:	46000000 	.word	0x46000000
 80077e0:	4c742400 	.word	0x4c742400
 80077e4:	4a742400 	.word	0x4a742400
 80077e8:	4b742400 	.word	0x4b742400

080077ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077fa:	4b53      	ldr	r3, [pc, #332]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 80077fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fe:	f003 0303 	and.w	r3, r3, #3
 8007802:	2b03      	cmp	r3, #3
 8007804:	d101      	bne.n	800780a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e099      	b.n	800793e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800780a:	4b4f      	ldr	r3, [pc, #316]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a4e      	ldr	r2, [pc, #312]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 8007810:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007816:	f7fa fbd1 	bl	8001fbc <HAL_GetTick>
 800781a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800781c:	e008      	b.n	8007830 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800781e:	f7fa fbcd 	bl	8001fbc <HAL_GetTick>
 8007822:	4602      	mov	r2, r0
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	2b02      	cmp	r3, #2
 800782a:	d901      	bls.n	8007830 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e086      	b.n	800793e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007830:	4b45      	ldr	r3, [pc, #276]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1f0      	bne.n	800781e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800783c:	4b42      	ldr	r3, [pc, #264]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 800783e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007840:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	031b      	lsls	r3, r3, #12
 800784a:	493f      	ldr	r1, [pc, #252]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 800784c:	4313      	orrs	r3, r2
 800784e:	628b      	str	r3, [r1, #40]	; 0x28
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	3b01      	subs	r3, #1
 8007856:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	3b01      	subs	r3, #1
 8007860:	025b      	lsls	r3, r3, #9
 8007862:	b29b      	uxth	r3, r3
 8007864:	431a      	orrs	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	3b01      	subs	r3, #1
 800786c:	041b      	lsls	r3, r3, #16
 800786e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007872:	431a      	orrs	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	3b01      	subs	r3, #1
 800787a:	061b      	lsls	r3, r3, #24
 800787c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007880:	4931      	ldr	r1, [pc, #196]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 8007882:	4313      	orrs	r3, r2
 8007884:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007886:	4b30      	ldr	r3, [pc, #192]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 8007888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	492d      	ldr	r1, [pc, #180]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 8007894:	4313      	orrs	r3, r2
 8007896:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007898:	4b2b      	ldr	r3, [pc, #172]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 800789a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789c:	f023 0220 	bic.w	r2, r3, #32
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	4928      	ldr	r1, [pc, #160]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80078aa:	4b27      	ldr	r3, [pc, #156]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 80078ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ae:	4a26      	ldr	r2, [pc, #152]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 80078b0:	f023 0310 	bic.w	r3, r3, #16
 80078b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80078b6:	4b24      	ldr	r3, [pc, #144]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 80078b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078ba:	4b24      	ldr	r3, [pc, #144]	; (800794c <RCCEx_PLL2_Config+0x160>)
 80078bc:	4013      	ands	r3, r2
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	69d2      	ldr	r2, [r2, #28]
 80078c2:	00d2      	lsls	r2, r2, #3
 80078c4:	4920      	ldr	r1, [pc, #128]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80078ca:	4b1f      	ldr	r3, [pc, #124]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 80078cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ce:	4a1e      	ldr	r2, [pc, #120]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 80078d0:	f043 0310 	orr.w	r3, r3, #16
 80078d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d106      	bne.n	80078ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80078dc:	4b1a      	ldr	r3, [pc, #104]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 80078de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e0:	4a19      	ldr	r2, [pc, #100]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 80078e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078e8:	e00f      	b.n	800790a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d106      	bne.n	80078fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80078f0:	4b15      	ldr	r3, [pc, #84]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 80078f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f4:	4a14      	ldr	r2, [pc, #80]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 80078f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078fc:	e005      	b.n	800790a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80078fe:	4b12      	ldr	r3, [pc, #72]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 8007900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007902:	4a11      	ldr	r2, [pc, #68]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 8007904:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007908:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800790a:	4b0f      	ldr	r3, [pc, #60]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a0e      	ldr	r2, [pc, #56]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 8007910:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007914:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007916:	f7fa fb51 	bl	8001fbc <HAL_GetTick>
 800791a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800791c:	e008      	b.n	8007930 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800791e:	f7fa fb4d 	bl	8001fbc <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	2b02      	cmp	r3, #2
 800792a:	d901      	bls.n	8007930 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e006      	b.n	800793e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007930:	4b05      	ldr	r3, [pc, #20]	; (8007948 <RCCEx_PLL2_Config+0x15c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d0f0      	beq.n	800791e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800793c:	7bfb      	ldrb	r3, [r7, #15]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	58024400 	.word	0x58024400
 800794c:	ffff0007 	.word	0xffff0007

08007950 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800795e:	4b53      	ldr	r3, [pc, #332]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 8007960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007962:	f003 0303 	and.w	r3, r3, #3
 8007966:	2b03      	cmp	r3, #3
 8007968:	d101      	bne.n	800796e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e099      	b.n	8007aa2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800796e:	4b4f      	ldr	r3, [pc, #316]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a4e      	ldr	r2, [pc, #312]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 8007974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007978:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800797a:	f7fa fb1f 	bl	8001fbc <HAL_GetTick>
 800797e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007980:	e008      	b.n	8007994 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007982:	f7fa fb1b 	bl	8001fbc <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	2b02      	cmp	r3, #2
 800798e:	d901      	bls.n	8007994 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e086      	b.n	8007aa2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007994:	4b45      	ldr	r3, [pc, #276]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1f0      	bne.n	8007982 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80079a0:	4b42      	ldr	r3, [pc, #264]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 80079a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	051b      	lsls	r3, r3, #20
 80079ae:	493f      	ldr	r1, [pc, #252]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	628b      	str	r3, [r1, #40]	; 0x28
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	3b01      	subs	r3, #1
 80079ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	025b      	lsls	r3, r3, #9
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	431a      	orrs	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	3b01      	subs	r3, #1
 80079d0:	041b      	lsls	r3, r3, #16
 80079d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80079d6:	431a      	orrs	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	3b01      	subs	r3, #1
 80079de:	061b      	lsls	r3, r3, #24
 80079e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079e4:	4931      	ldr	r1, [pc, #196]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80079ea:	4b30      	ldr	r3, [pc, #192]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 80079ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	492d      	ldr	r1, [pc, #180]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 80079f8:	4313      	orrs	r3, r2
 80079fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80079fc:	4b2b      	ldr	r3, [pc, #172]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 80079fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	4928      	ldr	r1, [pc, #160]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007a0e:	4b27      	ldr	r3, [pc, #156]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 8007a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a12:	4a26      	ldr	r2, [pc, #152]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 8007a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007a1a:	4b24      	ldr	r3, [pc, #144]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 8007a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a1e:	4b24      	ldr	r3, [pc, #144]	; (8007ab0 <RCCEx_PLL3_Config+0x160>)
 8007a20:	4013      	ands	r3, r2
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	69d2      	ldr	r2, [r2, #28]
 8007a26:	00d2      	lsls	r2, r2, #3
 8007a28:	4920      	ldr	r1, [pc, #128]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007a2e:	4b1f      	ldr	r3, [pc, #124]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 8007a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a32:	4a1e      	ldr	r2, [pc, #120]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 8007a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d106      	bne.n	8007a4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007a40:	4b1a      	ldr	r3, [pc, #104]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 8007a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a44:	4a19      	ldr	r2, [pc, #100]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 8007a46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007a4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a4c:	e00f      	b.n	8007a6e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d106      	bne.n	8007a62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007a54:	4b15      	ldr	r3, [pc, #84]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	4a14      	ldr	r2, [pc, #80]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 8007a5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a60:	e005      	b.n	8007a6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007a62:	4b12      	ldr	r3, [pc, #72]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 8007a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a66:	4a11      	ldr	r2, [pc, #68]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 8007a68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a6e:	4b0f      	ldr	r3, [pc, #60]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a0e      	ldr	r2, [pc, #56]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 8007a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a7a:	f7fa fa9f 	bl	8001fbc <HAL_GetTick>
 8007a7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a80:	e008      	b.n	8007a94 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a82:	f7fa fa9b 	bl	8001fbc <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d901      	bls.n	8007a94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e006      	b.n	8007aa2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a94:	4b05      	ldr	r3, [pc, #20]	; (8007aac <RCCEx_PLL3_Config+0x15c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0f0      	beq.n	8007a82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	58024400 	.word	0x58024400
 8007ab0:	ffff0007 	.word	0xffff0007

08007ab4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08a      	sub	sp, #40	; 0x28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e075      	b.n	8007bb2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d105      	bne.n	8007ade <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7f9 ffbf 	bl	8001a5c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2204      	movs	r2, #4
 8007ae2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f868 	bl	8007bbc <HAL_SD_InitCard>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e05d      	b.n	8007bb2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007af6:	f107 0308 	add.w	r3, r7, #8
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 ff77 	bl	80089f0 <HAL_SD_GetCardStatus>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e052      	b.n	8007bb2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007b0c:	7e3b      	ldrb	r3, [r7, #24]
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007b12:	7e7b      	ldrb	r3, [r7, #25]
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d10a      	bne.n	8007b36 <HAL_SD_Init+0x82>
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d102      	bne.n	8007b2c <HAL_SD_Init+0x78>
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d004      	beq.n	8007b36 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b32:	659a      	str	r2, [r3, #88]	; 0x58
 8007b34:	e00b      	b.n	8007b4e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d104      	bne.n	8007b48 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b44:	659a      	str	r2, [r3, #88]	; 0x58
 8007b46:	e002      	b.n	8007b4e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f001 f835 	bl	8008bc4 <HAL_SD_ConfigWideBusOperation>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e026      	b.n	8007bb2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007b64:	f7fa fa2a 	bl	8001fbc <HAL_GetTick>
 8007b68:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007b6a:	e011      	b.n	8007b90 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007b6c:	f7fa fa26 	bl	8001fbc <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b7a:	d109      	bne.n	8007b90 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b82:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e010      	b.n	8007bb2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f001 f929 	bl	8008de8 <HAL_SD_GetCardState>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b04      	cmp	r3, #4
 8007b9a:	d1e7      	bne.n	8007b6c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3728      	adds	r7, #40	; 0x28
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
	...

08007bbc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007bbc:	b590      	push	{r4, r7, lr}
 8007bbe:	b08d      	sub	sp, #52	; 0x34
 8007bc0:	af02      	add	r7, sp, #8
 8007bc2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007bd4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007bd8:	f04f 0100 	mov.w	r1, #0
 8007bdc:	f7fe fc76 	bl	80064cc <HAL_RCCEx_GetPeriphCLKFreq>
 8007be0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d109      	bne.n	8007bfc <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007bf6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e070      	b.n	8007cde <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfe:	0a1b      	lsrs	r3, r3, #8
 8007c00:	4a39      	ldr	r2, [pc, #228]	; (8007ce8 <HAL_SD_InitCard+0x12c>)
 8007c02:	fba2 2303 	umull	r2, r3, r2, r3
 8007c06:	091b      	lsrs	r3, r3, #4
 8007c08:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681c      	ldr	r4, [r3, #0]
 8007c0e:	466a      	mov	r2, sp
 8007c10:	f107 0318 	add.w	r3, r7, #24
 8007c14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007c18:	e882 0003 	stmia.w	r2, {r0, r1}
 8007c1c:	f107 030c 	add.w	r3, r7, #12
 8007c20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c22:	4620      	mov	r0, r4
 8007c24:	f001 fd72 	bl	800970c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f001 fdb5 	bl	800979c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d005      	beq.n	8007c44 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c42:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d007      	beq.n	8007c5a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007c4a:	4a28      	ldr	r2, [pc, #160]	; (8007cec <HAL_SD_InitCard+0x130>)
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c52:	3301      	adds	r3, #1
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fa f9bd 	bl	8001fd4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f001 f9b2 	bl	8008fc4 <SD_PowerON>
 8007c60:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c62:	6a3b      	ldr	r3, [r7, #32]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00b      	beq.n	8007c80 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	431a      	orrs	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e02e      	b.n	8007cde <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 f8d1 	bl	8008e28 <SD_InitCard>
 8007c86:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00b      	beq.n	8007ca6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	431a      	orrs	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e01b      	b.n	8007cde <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f001 fe0a 	bl	80098c8 <SDMMC_CmdBlockLength>
 8007cb4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00f      	beq.n	8007cdc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a0b      	ldr	r2, [pc, #44]	; (8007cf0 <HAL_SD_InitCard+0x134>)
 8007cc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cc8:	6a3b      	ldr	r3, [r7, #32]
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e000      	b.n	8007cde <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	372c      	adds	r7, #44	; 0x2c
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd90      	pop	{r4, r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	014f8b59 	.word	0x014f8b59
 8007cec:	00012110 	.word	0x00012110
 8007cf0:	1fe00fff 	.word	0x1fe00fff

08007cf4 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b092      	sub	sp, #72	; 0x48
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
 8007d00:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007d02:	f7fa f95b 	bl	8001fbc <HAL_GetTick>
 8007d06:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d107      	bne.n	8007d26 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e167      	b.n	8007ff6 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	f040 815a 	bne.w	8007fe8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007d3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	441a      	add	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d907      	bls.n	8007d58 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e14e      	b.n	8007ff6 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2203      	movs	r2, #3
 8007d5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2200      	movs	r2, #0
 8007d66:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d002      	beq.n	8007d76 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d72:	025b      	lsls	r3, r3, #9
 8007d74:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d7a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	025b      	lsls	r3, r3, #9
 8007d80:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007d82:	2390      	movs	r3, #144	; 0x90
 8007d84:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007d86:	2302      	movs	r3, #2
 8007d88:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f107 0214 	add.w	r2, r7, #20
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f001 fd67 	bl	8009870 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68da      	ldr	r2, [r3, #12]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007db0:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d90a      	bls.n	8007dce <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f001 fdc5 	bl	8009954 <SDMMC_CmdReadMultiBlock>
 8007dca:	6478      	str	r0, [r7, #68]	; 0x44
 8007dcc:	e009      	b.n	8007de2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f001 fd97 	bl	800990e <SDMMC_CmdReadSingleBlock>
 8007de0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d012      	beq.n	8007e0e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a84      	ldr	r2, [pc, #528]	; (8008000 <HAL_SD_ReadBlocks+0x30c>)
 8007dee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007df6:	431a      	orrs	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e0f3      	b.n	8007ff6 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007e12:	e058      	b.n	8007ec6 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d033      	beq.n	8007e8a <HAL_SD_ReadBlocks+0x196>
 8007e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e24:	2b1f      	cmp	r3, #31
 8007e26:	d930      	bls.n	8007e8a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8007e28:	2300      	movs	r3, #0
 8007e2a:	643b      	str	r3, [r7, #64]	; 0x40
 8007e2c:	e027      	b.n	8007e7e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f001 fc94 	bl	8009760 <SDMMC_ReadFIFO>
 8007e38:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e40:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e44:	3301      	adds	r3, #1
 8007e46:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4a:	0a1b      	lsrs	r3, r3, #8
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e50:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e54:	3301      	adds	r3, #1
 8007e56:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5a:	0c1b      	lsrs	r3, r3, #16
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e60:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e64:	3301      	adds	r3, #1
 8007e66:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	0e1b      	lsrs	r3, r3, #24
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e70:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e74:	3301      	adds	r3, #1
 8007e76:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8007e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	643b      	str	r3, [r7, #64]	; 0x40
 8007e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e80:	2b07      	cmp	r3, #7
 8007e82:	d9d4      	bls.n	8007e2e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e86:	3b20      	subs	r3, #32
 8007e88:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007e8a:	f7fa f897 	bl	8001fbc <HAL_GetTick>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d902      	bls.n	8007ea0 <HAL_SD_ReadBlocks+0x1ac>
 8007e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d112      	bne.n	8007ec6 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a56      	ldr	r2, [pc, #344]	; (8008000 <HAL_SD_ReadBlocks+0x30c>)
 8007ea6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e097      	b.n	8007ff6 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ecc:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d09f      	beq.n	8007e14 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68da      	ldr	r2, [r3, #12]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ee2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d022      	beq.n	8007f38 <HAL_SD_ReadBlocks+0x244>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d91f      	bls.n	8007f38 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efc:	2b03      	cmp	r3, #3
 8007efe:	d01b      	beq.n	8007f38 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f001 fd8f 	bl	8009a28 <SDMMC_CmdStopTransfer>
 8007f0a:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8007f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d012      	beq.n	8007f38 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a3a      	ldr	r2, [pc, #232]	; (8008000 <HAL_SD_ReadBlocks+0x30c>)
 8007f18:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f20:	431a      	orrs	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e05e      	b.n	8007ff6 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d012      	beq.n	8007f6c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a2d      	ldr	r2, [pc, #180]	; (8008000 <HAL_SD_ReadBlocks+0x30c>)
 8007f4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f52:	f043 0208 	orr.w	r2, r3, #8
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e044      	b.n	8007ff6 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f72:	f003 0302 	and.w	r3, r3, #2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d012      	beq.n	8007fa0 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a20      	ldr	r2, [pc, #128]	; (8008000 <HAL_SD_ReadBlocks+0x30c>)
 8007f80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f86:	f043 0202 	orr.w	r2, r3, #2
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e02a      	b.n	8007ff6 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa6:	f003 0320 	and.w	r3, r3, #32
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d012      	beq.n	8007fd4 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a13      	ldr	r2, [pc, #76]	; (8008000 <HAL_SD_ReadBlocks+0x30c>)
 8007fb4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fba:	f043 0220 	orr.w	r2, r3, #32
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e010      	b.n	8007ff6 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a0a      	ldr	r2, [pc, #40]	; (8008004 <HAL_SD_ReadBlocks+0x310>)
 8007fda:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	e006      	b.n	8007ff6 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
  }
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3748      	adds	r7, #72	; 0x48
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	1fe00fff 	.word	0x1fe00fff
 8008004:	18000f3a 	.word	0x18000f3a

08008008 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b092      	sub	sp, #72	; 0x48
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
 8008014:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008016:	f7f9 ffd1 	bl	8001fbc <HAL_GetTick>
 800801a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d107      	bne.n	800803a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800802e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e16b      	b.n	8008312 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b01      	cmp	r3, #1
 8008044:	f040 815e 	bne.w	8008304 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800804e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	441a      	add	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008058:	429a      	cmp	r2, r3
 800805a:	d907      	bls.n	800806c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008060:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	e152      	b.n	8008312 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2203      	movs	r2, #3
 8008070:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2200      	movs	r2, #0
 800807a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	2b01      	cmp	r3, #1
 8008082:	d002      	beq.n	800808a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008086:	025b      	lsls	r3, r3, #9
 8008088:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800808a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800808e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	025b      	lsls	r3, r3, #9
 8008094:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008096:	2390      	movs	r3, #144	; 0x90
 8008098:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800809a:	2300      	movs	r3, #0
 800809c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800809e:	2300      	movs	r3, #0
 80080a0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80080a2:	2300      	movs	r3, #0
 80080a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f107 0218 	add.w	r2, r7, #24
 80080ae:	4611      	mov	r1, r2
 80080b0:	4618      	mov	r0, r3
 80080b2:	f001 fbdd 	bl	8009870 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68da      	ldr	r2, [r3, #12]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080c4:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d90a      	bls.n	80080e2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2220      	movs	r2, #32
 80080d0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080d8:	4618      	mov	r0, r3
 80080da:	f001 fc81 	bl	80099e0 <SDMMC_CmdWriteMultiBlock>
 80080de:	6478      	str	r0, [r7, #68]	; 0x44
 80080e0:	e009      	b.n	80080f6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2210      	movs	r2, #16
 80080e6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080ee:	4618      	mov	r0, r3
 80080f0:	f001 fc53 	bl	800999a <SDMMC_CmdWriteSingleBlock>
 80080f4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80080f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d012      	beq.n	8008122 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a86      	ldr	r2, [pc, #536]	; (800831c <HAL_SD_WriteBlocks+0x314>)
 8008102:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800810a:	431a      	orrs	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e0f7      	b.n	8008312 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008126:	e05c      	b.n	80081e2 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800812e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d037      	beq.n	80081a6 <HAL_SD_WriteBlocks+0x19e>
 8008136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008138:	2b1f      	cmp	r3, #31
 800813a:	d934      	bls.n	80081a6 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800813c:	2300      	movs	r3, #0
 800813e:	643b      	str	r3, [r7, #64]	; 0x40
 8008140:	e02b      	b.n	800819a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8008142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800814a:	3301      	adds	r3, #1
 800814c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800814e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	021a      	lsls	r2, r3, #8
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	4313      	orrs	r3, r2
 8008158:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800815a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800815c:	3301      	adds	r3, #1
 800815e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	041a      	lsls	r2, r3, #16
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	4313      	orrs	r3, r2
 800816a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800816c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800816e:	3301      	adds	r3, #1
 8008170:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	061a      	lsls	r2, r3, #24
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	4313      	orrs	r3, r2
 800817c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800817e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008180:	3301      	adds	r3, #1
 8008182:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f107 0214 	add.w	r2, r7, #20
 800818c:	4611      	mov	r1, r2
 800818e:	4618      	mov	r0, r3
 8008190:	f001 faf3 	bl	800977a <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8008194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008196:	3301      	adds	r3, #1
 8008198:	643b      	str	r3, [r7, #64]	; 0x40
 800819a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800819c:	2b07      	cmp	r3, #7
 800819e:	d9d0      	bls.n	8008142 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80081a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a2:	3b20      	subs	r3, #32
 80081a4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80081a6:	f7f9 ff09 	bl	8001fbc <HAL_GetTick>
 80081aa:	4602      	mov	r2, r0
 80081ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d902      	bls.n	80081bc <HAL_SD_WriteBlocks+0x1b4>
 80081b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d112      	bne.n	80081e2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a56      	ldr	r2, [pc, #344]	; (800831c <HAL_SD_WriteBlocks+0x314>)
 80081c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081ca:	431a      	orrs	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e097      	b.n	8008312 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081e8:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d09b      	beq.n	8008128 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68da      	ldr	r2, [r3, #12]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081fe:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800820a:	2b00      	cmp	r3, #0
 800820c:	d022      	beq.n	8008254 <HAL_SD_WriteBlocks+0x24c>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d91f      	bls.n	8008254 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008218:	2b03      	cmp	r3, #3
 800821a:	d01b      	beq.n	8008254 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4618      	mov	r0, r3
 8008222:	f001 fc01 	bl	8009a28 <SDMMC_CmdStopTransfer>
 8008226:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800822a:	2b00      	cmp	r3, #0
 800822c:	d012      	beq.n	8008254 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a3a      	ldr	r2, [pc, #232]	; (800831c <HAL_SD_WriteBlocks+0x314>)
 8008234:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800823a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800823c:	431a      	orrs	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e05e      	b.n	8008312 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800825a:	f003 0308 	and.w	r3, r3, #8
 800825e:	2b00      	cmp	r3, #0
 8008260:	d012      	beq.n	8008288 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a2d      	ldr	r2, [pc, #180]	; (800831c <HAL_SD_WriteBlocks+0x314>)
 8008268:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800826e:	f043 0208 	orr.w	r2, r3, #8
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e044      	b.n	8008312 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800828e:	f003 0302 	and.w	r3, r3, #2
 8008292:	2b00      	cmp	r3, #0
 8008294:	d012      	beq.n	80082bc <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a20      	ldr	r2, [pc, #128]	; (800831c <HAL_SD_WriteBlocks+0x314>)
 800829c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a2:	f043 0202 	orr.w	r2, r3, #2
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e02a      	b.n	8008312 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c2:	f003 0310 	and.w	r3, r3, #16
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d012      	beq.n	80082f0 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a13      	ldr	r2, [pc, #76]	; (800831c <HAL_SD_WriteBlocks+0x314>)
 80082d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d6:	f043 0210 	orr.w	r2, r3, #16
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e010      	b.n	8008312 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a0a      	ldr	r2, [pc, #40]	; (8008320 <HAL_SD_WriteBlocks+0x318>)
 80082f6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	e006      	b.n	8008312 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008308:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
  }
}
 8008312:	4618      	mov	r0, r3
 8008314:	3748      	adds	r7, #72	; 0x48
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	1fe00fff 	.word	0x1fe00fff
 8008320:	18000f3a 	.word	0x18000f3a

08008324 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008330:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d008      	beq.n	8008352 <HAL_SD_IRQHandler+0x2e>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f003 0308 	and.w	r3, r3, #8
 8008346:	2b00      	cmp	r3, #0
 8008348:	d003      	beq.n	8008352 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f001 f926 	bl	800959c <SD_Read_IT>
 8008350:	e19a      	b.n	8008688 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 80ac 	beq.w	80084ba <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800836a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	4b59      	ldr	r3, [pc, #356]	; (80084dc <HAL_SD_IRQHandler+0x1b8>)
 8008378:	400b      	ands	r3, r1
 800837a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800838a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68da      	ldr	r2, [r3, #12]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800839a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f003 0308 	and.w	r3, r3, #8
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d038      	beq.n	8008418 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f003 0302 	and.w	r3, r3, #2
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d104      	bne.n	80083ba <HAL_SD_IRQHandler+0x96>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f003 0320 	and.w	r3, r3, #32
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d011      	beq.n	80083de <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4618      	mov	r0, r3
 80083c0:	f001 fb32 	bl	8009a28 <SDMMC_CmdStopTransfer>
 80083c4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d008      	beq.n	80083de <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	431a      	orrs	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f95b 	bl	8008694 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a3f      	ldr	r2, [pc, #252]	; (80084e0 <HAL_SD_IRQHandler+0x1bc>)
 80083e4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d104      	bne.n	8008408 <HAL_SD_IRQHandler+0xe4>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f003 0302 	and.w	r3, r3, #2
 8008404:	2b00      	cmp	r3, #0
 8008406:	d003      	beq.n	8008410 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f001 ffed 	bl	800a3e8 <HAL_SD_RxCpltCallback>
 800840e:	e13b      	b.n	8008688 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f001 ffdf 	bl	800a3d4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008416:	e137      	b.n	8008688 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 8132 	beq.w	8008688 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2200      	movs	r2, #0
 800842a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2200      	movs	r2, #0
 8008432:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2200      	movs	r2, #0
 800843a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	2b00      	cmp	r3, #0
 8008444:	d104      	bne.n	8008450 <HAL_SD_IRQHandler+0x12c>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f003 0320 	and.w	r3, r3, #32
 800844c:	2b00      	cmp	r3, #0
 800844e:	d011      	beq.n	8008474 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4618      	mov	r0, r3
 8008456:	f001 fae7 	bl	8009a28 <SDMMC_CmdStopTransfer>
 800845a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d008      	beq.n	8008474 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	431a      	orrs	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f910 	bl	8008694 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f003 0310 	and.w	r3, r3, #16
 8008488:	2b00      	cmp	r3, #0
 800848a:	d104      	bne.n	8008496 <HAL_SD_IRQHandler+0x172>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f003 0320 	and.w	r3, r3, #32
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f001 ff9c 	bl	800a3d4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d105      	bne.n	80084b2 <HAL_SD_IRQHandler+0x18e>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f003 0302 	and.w	r3, r3, #2
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 80eb 	beq.w	8008688 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f001 ff98 	bl	800a3e8 <HAL_SD_RxCpltCallback>
}
 80084b8:	e0e6      	b.n	8008688 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00d      	beq.n	80084e4 <HAL_SD_IRQHandler+0x1c0>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f003 0308 	and.w	r3, r3, #8
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d008      	beq.n	80084e4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f001 f8a8 	bl	8009628 <SD_Write_IT>
 80084d8:	e0d6      	b.n	8008688 <HAL_SD_IRQHandler+0x364>
 80084da:	bf00      	nop
 80084dc:	ffff3ec5 	.word	0xffff3ec5
 80084e0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ea:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f000 809d 	beq.w	800862e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fa:	f003 0302 	and.w	r3, r3, #2
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d005      	beq.n	800850e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008506:	f043 0202 	orr.w	r2, r3, #2
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008514:	f003 0308 	and.w	r3, r3, #8
 8008518:	2b00      	cmp	r3, #0
 800851a:	d005      	beq.n	8008528 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008520:	f043 0208 	orr.w	r2, r3, #8
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800852e:	f003 0320 	and.w	r3, r3, #32
 8008532:	2b00      	cmp	r3, #0
 8008534:	d005      	beq.n	8008542 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800853a:	f043 0220 	orr.w	r2, r3, #32
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008548:	f003 0310 	and.w	r3, r3, #16
 800854c:	2b00      	cmp	r3, #0
 800854e:	d005      	beq.n	800855c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008554:	f043 0210 	orr.w	r2, r3, #16
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a4b      	ldr	r2, [pc, #300]	; (8008690 <HAL_SD_IRQHandler+0x36c>)
 8008562:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008572:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68da      	ldr	r2, [r3, #12]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008582:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008592:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68da      	ldr	r2, [r3, #12]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80085a2:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f001 fa3d 	bl	8009a28 <SDMMC_CmdStopTransfer>
 80085ae:	4602      	mov	r2, r0
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b4:	431a      	orrs	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68da      	ldr	r2, [r3, #12]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085c8:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085d2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f003 0308 	and.w	r3, r3, #8
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00a      	beq.n	80085f4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f851 	bl	8008694 <HAL_SD_ErrorCallback>
}
 80085f2:	e049      	b.n	8008688 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d044      	beq.n	8008688 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008602:	2b00      	cmp	r3, #0
 8008604:	d040      	beq.n	8008688 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008614:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2200      	movs	r2, #0
 800861c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f834 	bl	8008694 <HAL_SD_ErrorCallback>
}
 800862c:	e02c      	b.n	8008688 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d025      	beq.n	8008688 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008644:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800864c:	f003 0304 	and.w	r3, r3, #4
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10c      	bne.n	800866e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f003 0320 	and.w	r3, r3, #32
 800865a:	2b00      	cmp	r3, #0
 800865c:	d003      	beq.n	8008666 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f001 f84a 	bl	80096f8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8008664:	e010      	b.n	8008688 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f001 f832 	bl	80096d0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800866c:	e00c      	b.n	8008688 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f003 0320 	and.w	r3, r3, #32
 8008674:	2b00      	cmp	r3, #0
 8008676:	d003      	beq.n	8008680 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 f833 	bl	80096e4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800867e:	e003      	b.n	8008688 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f001 f81b 	bl	80096bc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8008686:	e7ff      	b.n	8008688 <HAL_SD_IRQHandler+0x364>
 8008688:	bf00      	nop
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	18000f3a 	.word	0x18000f3a

08008694 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086b6:	0f9b      	lsrs	r3, r3, #30
 80086b8:	b2da      	uxtb	r2, r3
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086c2:	0e9b      	lsrs	r3, r3, #26
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	f003 030f 	and.w	r3, r3, #15
 80086ca:	b2da      	uxtb	r2, r3
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086d4:	0e1b      	lsrs	r3, r3, #24
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	f003 0303 	and.w	r3, r3, #3
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086e6:	0c1b      	lsrs	r3, r3, #16
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086f2:	0a1b      	lsrs	r3, r3, #8
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008708:	0d1b      	lsrs	r3, r3, #20
 800870a:	b29a      	uxth	r2, r3
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008714:	0c1b      	lsrs	r3, r3, #16
 8008716:	b2db      	uxtb	r3, r3
 8008718:	f003 030f 	and.w	r3, r3, #15
 800871c:	b2da      	uxtb	r2, r3
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008726:	0bdb      	lsrs	r3, r3, #15
 8008728:	b2db      	uxtb	r3, r3
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	b2da      	uxtb	r2, r3
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008738:	0b9b      	lsrs	r3, r3, #14
 800873a:	b2db      	uxtb	r3, r3
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	b2da      	uxtb	r2, r3
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800874a:	0b5b      	lsrs	r3, r3, #13
 800874c:	b2db      	uxtb	r3, r3
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	b2da      	uxtb	r2, r3
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800875c:	0b1b      	lsrs	r3, r3, #12
 800875e:	b2db      	uxtb	r3, r3
 8008760:	f003 0301 	and.w	r3, r3, #1
 8008764:	b2da      	uxtb	r2, r3
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	2200      	movs	r2, #0
 800876e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008774:	2b00      	cmp	r3, #0
 8008776:	d163      	bne.n	8008840 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800877c:	009a      	lsls	r2, r3, #2
 800877e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008782:	4013      	ands	r3, r2
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008788:	0f92      	lsrs	r2, r2, #30
 800878a:	431a      	orrs	r2, r3
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008794:	0edb      	lsrs	r3, r3, #27
 8008796:	b2db      	uxtb	r3, r3
 8008798:	f003 0307 	and.w	r3, r3, #7
 800879c:	b2da      	uxtb	r2, r3
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087a6:	0e1b      	lsrs	r3, r3, #24
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	f003 0307 	and.w	r3, r3, #7
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087b8:	0d5b      	lsrs	r3, r3, #21
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	f003 0307 	and.w	r3, r3, #7
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087ca:	0c9b      	lsrs	r3, r3, #18
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	f003 0307 	and.w	r3, r3, #7
 80087d2:	b2da      	uxtb	r2, r3
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087dc:	0bdb      	lsrs	r3, r3, #15
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	f003 0307 	and.w	r3, r3, #7
 80087e4:	b2da      	uxtb	r2, r3
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	1c5a      	adds	r2, r3, #1
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	7e1b      	ldrb	r3, [r3, #24]
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	f003 0307 	and.w	r3, r3, #7
 80087fe:	3302      	adds	r3, #2
 8008800:	2201      	movs	r2, #1
 8008802:	fa02 f303 	lsl.w	r3, r2, r3
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800880a:	fb03 f202 	mul.w	r2, r3, r2
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	7a1b      	ldrb	r3, [r3, #8]
 8008816:	b2db      	uxtb	r3, r3
 8008818:	f003 030f 	and.w	r3, r3, #15
 800881c:	2201      	movs	r2, #1
 800881e:	409a      	lsls	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800882c:	0a52      	lsrs	r2, r2, #9
 800882e:	fb03 f202 	mul.w	r2, r3, r2
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800883c:	655a      	str	r2, [r3, #84]	; 0x54
 800883e:	e031      	b.n	80088a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008844:	2b01      	cmp	r3, #1
 8008846:	d11d      	bne.n	8008884 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800884c:	041b      	lsls	r3, r3, #16
 800884e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008856:	0c1b      	lsrs	r3, r3, #16
 8008858:	431a      	orrs	r2, r3
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	3301      	adds	r3, #1
 8008864:	029a      	lsls	r2, r3, #10
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008878:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	655a      	str	r2, [r3, #84]	; 0x54
 8008882:	e00f      	b.n	80088a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a58      	ldr	r2, [pc, #352]	; (80089ec <HAL_SD_GetCardCSD+0x344>)
 800888a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008890:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e09d      	b.n	80089e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088a8:	0b9b      	lsrs	r3, r3, #14
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	f003 0301 	and.w	r3, r3, #1
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088ba:	09db      	lsrs	r3, r3, #7
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088c2:	b2da      	uxtb	r2, r3
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088d2:	b2da      	uxtb	r2, r3
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088dc:	0fdb      	lsrs	r3, r3, #31
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088e8:	0f5b      	lsrs	r3, r3, #29
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	f003 0303 	and.w	r3, r3, #3
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088fa:	0e9b      	lsrs	r3, r3, #26
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	f003 0307 	and.w	r3, r3, #7
 8008902:	b2da      	uxtb	r2, r3
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800890c:	0d9b      	lsrs	r3, r3, #22
 800890e:	b2db      	uxtb	r3, r3
 8008910:	f003 030f 	and.w	r3, r3, #15
 8008914:	b2da      	uxtb	r2, r3
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800891e:	0d5b      	lsrs	r3, r3, #21
 8008920:	b2db      	uxtb	r3, r3
 8008922:	f003 0301 	and.w	r3, r3, #1
 8008926:	b2da      	uxtb	r2, r3
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800893a:	0c1b      	lsrs	r3, r3, #16
 800893c:	b2db      	uxtb	r3, r3
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	b2da      	uxtb	r2, r3
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800894e:	0bdb      	lsrs	r3, r3, #15
 8008950:	b2db      	uxtb	r3, r3
 8008952:	f003 0301 	and.w	r3, r3, #1
 8008956:	b2da      	uxtb	r2, r3
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008962:	0b9b      	lsrs	r3, r3, #14
 8008964:	b2db      	uxtb	r3, r3
 8008966:	f003 0301 	and.w	r3, r3, #1
 800896a:	b2da      	uxtb	r2, r3
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008976:	0b5b      	lsrs	r3, r3, #13
 8008978:	b2db      	uxtb	r3, r3
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	b2da      	uxtb	r2, r3
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800898a:	0b1b      	lsrs	r3, r3, #12
 800898c:	b2db      	uxtb	r3, r3
 800898e:	f003 0301 	and.w	r3, r3, #1
 8008992:	b2da      	uxtb	r2, r3
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800899e:	0a9b      	lsrs	r3, r3, #10
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	f003 0303 	and.w	r3, r3, #3
 80089a6:	b2da      	uxtb	r2, r3
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089b2:	0a1b      	lsrs	r3, r3, #8
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	f003 0303 	and.w	r3, r3, #3
 80089ba:	b2da      	uxtb	r2, r3
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089c6:	085b      	lsrs	r3, r3, #1
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ce:	b2da      	uxtb	r2, r3
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	2201      	movs	r2, #1
 80089da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr
 80089ec:	1fe00fff 	.word	0x1fe00fff

080089f0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b094      	sub	sp, #80	; 0x50
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b03      	cmp	r3, #3
 8008a0a:	d101      	bne.n	8008a10 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e0a7      	b.n	8008b60 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008a10:	f107 0308 	add.w	r3, r7, #8
 8008a14:	4619      	mov	r1, r3
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 fb62 	bl	80090e0 <SD_SendSDStatus>
 8008a1c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d011      	beq.n	8008a48 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a4f      	ldr	r2, [pc, #316]	; (8008b68 <HAL_SD_GetCardStatus+0x178>)
 8008a2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a32:	431a      	orrs	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008a46:	e070      	b.n	8008b2a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	099b      	lsrs	r3, r3, #6
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	f003 0303 	and.w	r3, r3, #3
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	095b      	lsrs	r3, r3, #5
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	f003 0301 	and.w	r3, r3, #1
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	0a1b      	lsrs	r3, r3, #8
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	0e1b      	lsrs	r3, r3, #24
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	061a      	lsls	r2, r3, #24
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	021b      	lsls	r3, r3, #8
 8008a8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a8e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	0a1b      	lsrs	r3, r3, #8
 8008a94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008a98:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	0e1b      	lsrs	r3, r3, #24
 8008a9e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	0a1b      	lsrs	r3, r3, #8
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	0d1b      	lsrs	r3, r3, #20
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	f003 030f 	and.w	r3, r3, #15
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	0c1b      	lsrs	r3, r3, #16
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	4313      	orrs	r3, r2
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	0a9b      	lsrs	r3, r3, #10
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	0a1b      	lsrs	r3, r3, #8
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	f003 0303 	and.w	r3, r3, #3
 8008afc:	b2da      	uxtb	r2, r3
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	091b      	lsrs	r3, r3, #4
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	f003 030f 	and.w	r3, r3, #15
 8008b0c:	b2da      	uxtb	r2, r3
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	f003 030f 	and.w	r3, r3, #15
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	0e1b      	lsrs	r3, r3, #24
 8008b24:	b2da      	uxtb	r2, r3
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 fec8 	bl	80098c8 <SDMMC_CmdBlockLength>
 8008b38:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00d      	beq.n	8008b5c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a08      	ldr	r2, [pc, #32]	; (8008b68 <HAL_SD_GetCardStatus+0x178>)
 8008b46:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b4c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8008b5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3750      	adds	r7, #80	; 0x50
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	1fe00fff 	.word	0x1fe00fff

08008b6c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008bc4:	b590      	push	{r4, r7, lr}
 8008bc6:	b08d      	sub	sp, #52	; 0x34
 8008bc8:	af02      	add	r7, sp, #8
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2203      	movs	r2, #3
 8008bd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d02e      	beq.n	8008c42 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bea:	d106      	bne.n	8008bfa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	635a      	str	r2, [r3, #52]	; 0x34
 8008bf8:	e029      	b.n	8008c4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c00:	d10a      	bne.n	8008c18 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fb64 	bl	80092d0 <SD_WideBus_Enable>
 8008c08:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c0e:	6a3b      	ldr	r3, [r7, #32]
 8008c10:	431a      	orrs	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	635a      	str	r2, [r3, #52]	; 0x34
 8008c16:	e01a      	b.n	8008c4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10a      	bne.n	8008c34 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fba1 	bl	8009366 <SD_WideBus_Disable>
 8008c24:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c2a:	6a3b      	ldr	r3, [r7, #32]
 8008c2c:	431a      	orrs	r2, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	635a      	str	r2, [r3, #52]	; 0x34
 8008c32:	e00c      	b.n	8008c4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c38:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	635a      	str	r2, [r3, #52]	; 0x34
 8008c40:	e005      	b.n	8008c4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c46:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d007      	beq.n	8008c66 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a5f      	ldr	r2, [pc, #380]	; (8008dd8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008c5c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c64:	e096      	b.n	8008d94 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008c66:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008c6a:	f04f 0100 	mov.w	r1, #0
 8008c6e:	f7fd fc2d 	bl	80064cc <HAL_RCCEx_GetPeriphCLKFreq>
 8008c72:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f000 8083 	beq.w	8008d82 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	695a      	ldr	r2, [r3, #20]
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	4950      	ldr	r1, [pc, #320]	; (8008ddc <HAL_SD_ConfigWideBusOperation+0x218>)
 8008c9a:	fba1 1303 	umull	r1, r3, r1, r3
 8008c9e:	0e1b      	lsrs	r3, r3, #24
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d303      	bcc.n	8008cac <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	695b      	ldr	r3, [r3, #20]
 8008ca8:	61bb      	str	r3, [r7, #24]
 8008caa:	e05a      	b.n	8008d62 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cb4:	d103      	bne.n	8008cbe <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	61bb      	str	r3, [r7, #24]
 8008cbc:	e051      	b.n	8008d62 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cc6:	d126      	bne.n	8008d16 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	695b      	ldr	r3, [r3, #20]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10e      	bne.n	8008cee <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	4a43      	ldr	r2, [pc, #268]	; (8008de0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d906      	bls.n	8008ce6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	4a40      	ldr	r2, [pc, #256]	; (8008ddc <HAL_SD_ConfigWideBusOperation+0x218>)
 8008cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce0:	0e5b      	lsrs	r3, r3, #25
 8008ce2:	61bb      	str	r3, [r7, #24]
 8008ce4:	e03d      	b.n	8008d62 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	695b      	ldr	r3, [r3, #20]
 8008cea:	61bb      	str	r3, [r7, #24]
 8008cec:	e039      	b.n	8008d62 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	005b      	lsls	r3, r3, #1
 8008cf4:	69fa      	ldr	r2, [r7, #28]
 8008cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cfa:	4a39      	ldr	r2, [pc, #228]	; (8008de0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d906      	bls.n	8008d0e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	4a36      	ldr	r2, [pc, #216]	; (8008ddc <HAL_SD_ConfigWideBusOperation+0x218>)
 8008d04:	fba2 2303 	umull	r2, r3, r2, r3
 8008d08:	0e5b      	lsrs	r3, r3, #25
 8008d0a:	61bb      	str	r3, [r7, #24]
 8008d0c:	e029      	b.n	8008d62 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	61bb      	str	r3, [r7, #24]
 8008d14:	e025      	b.n	8008d62 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d10e      	bne.n	8008d3c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	4a30      	ldr	r2, [pc, #192]	; (8008de4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d906      	bls.n	8008d34 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	4a2c      	ldr	r2, [pc, #176]	; (8008ddc <HAL_SD_ConfigWideBusOperation+0x218>)
 8008d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d2e:	0e1b      	lsrs	r3, r3, #24
 8008d30:	61bb      	str	r3, [r7, #24]
 8008d32:	e016      	b.n	8008d62 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	61bb      	str	r3, [r7, #24]
 8008d3a:	e012      	b.n	8008d62 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	005b      	lsls	r3, r3, #1
 8008d42:	69fa      	ldr	r2, [r7, #28]
 8008d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d48:	4a26      	ldr	r2, [pc, #152]	; (8008de4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d906      	bls.n	8008d5c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	4a22      	ldr	r2, [pc, #136]	; (8008ddc <HAL_SD_ConfigWideBusOperation+0x218>)
 8008d52:	fba2 2303 	umull	r2, r3, r2, r3
 8008d56:	0e1b      	lsrs	r3, r3, #24
 8008d58:	61bb      	str	r3, [r7, #24]
 8008d5a:	e002      	b.n	8008d62 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681c      	ldr	r4, [r3, #0]
 8008d66:	466a      	mov	r2, sp
 8008d68:	f107 0314 	add.w	r3, r7, #20
 8008d6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008d70:	e882 0003 	stmia.w	r2, {r0, r1}
 8008d74:	f107 0308 	add.w	r3, r7, #8
 8008d78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f000 fcc6 	bl	800970c <SDMMC_Init>
 8008d80:	e008      	b.n	8008d94 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f000 fd93 	bl	80098c8 <SDMMC_CmdBlockLength>
 8008da2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008da4:	6a3b      	ldr	r3, [r7, #32]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00c      	beq.n	8008dc4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a0a      	ldr	r2, [pc, #40]	; (8008dd8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008db0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	431a      	orrs	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8008dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	372c      	adds	r7, #44	; 0x2c
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd90      	pop	{r4, r7, pc}
 8008dd8:	1fe00fff 	.word	0x1fe00fff
 8008ddc:	55e63b89 	.word	0x55e63b89
 8008de0:	02faf080 	.word	0x02faf080
 8008de4:	017d7840 	.word	0x017d7840

08008de8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008df4:	f107 030c 	add.w	r3, r7, #12
 8008df8:	4619      	mov	r1, r3
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fa40 	bl	8009280 <SD_SendStatus>
 8008e00:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d005      	beq.n	8008e14 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	431a      	orrs	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	0a5b      	lsrs	r3, r3, #9
 8008e18:	f003 030f 	and.w	r3, r3, #15
 8008e1c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008e1e:	693b      	ldr	r3, [r7, #16]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3718      	adds	r7, #24
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b090      	sub	sp, #64	; 0x40
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008e30:	2300      	movs	r3, #0
 8008e32:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008e34:	f7f9 f8c2 	bl	8001fbc <HAL_GetTick>
 8008e38:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 fcbd 	bl	80097be <SDMMC_GetPowerState>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d102      	bne.n	8008e50 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008e4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008e4e:	e0b5      	b.n	8008fbc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e54:	2b03      	cmp	r3, #3
 8008e56:	d02e      	beq.n	8008eb6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f000 ff08 	bl	8009c72 <SDMMC_CmdSendCID>
 8008e62:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <SD_InitCard+0x46>
    {
      return errorstate;
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6c:	e0a6      	b.n	8008fbc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2100      	movs	r1, #0
 8008e74:	4618      	mov	r0, r3
 8008e76:	f000 fce8 	bl	800984a <SDMMC_GetResponse>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2104      	movs	r1, #4
 8008e86:	4618      	mov	r0, r3
 8008e88:	f000 fcdf 	bl	800984a <SDMMC_GetResponse>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2108      	movs	r1, #8
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f000 fcd6 	bl	800984a <SDMMC_GetResponse>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	210c      	movs	r1, #12
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 fccd 	bl	800984a <SDMMC_GetResponse>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d01d      	beq.n	8008efa <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008ebe:	e019      	b.n	8008ef4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f107 020a 	add.w	r2, r7, #10
 8008ec8:	4611      	mov	r1, r2
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f000 ff10 	bl	8009cf0 <SDMMC_CmdSetRelAdd>
 8008ed0:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <SD_InitCard+0xb4>
      {
        return errorstate;
 8008ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eda:	e06f      	b.n	8008fbc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008edc:	f7f9 f86e 	bl	8001fbc <HAL_GetTick>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	f241 3287 	movw	r2, #4999	; 0x1387
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d902      	bls.n	8008ef4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8008eee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ef2:	e063      	b.n	8008fbc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008ef4:	897b      	ldrh	r3, [r7, #10]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d0e2      	beq.n	8008ec0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d036      	beq.n	8008f70 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008f02:	897b      	ldrh	r3, [r7, #10]
 8008f04:	461a      	mov	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f12:	041b      	lsls	r3, r3, #16
 8008f14:	4619      	mov	r1, r3
 8008f16:	4610      	mov	r0, r2
 8008f18:	f000 feca 	bl	8009cb0 <SDMMC_CmdSendCSD>
 8008f1c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <SD_InitCard+0x100>
    {
      return errorstate;
 8008f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f26:	e049      	b.n	8008fbc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 fc8b 	bl	800984a <SDMMC_GetResponse>
 8008f34:	4602      	mov	r2, r0
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2104      	movs	r1, #4
 8008f40:	4618      	mov	r0, r3
 8008f42:	f000 fc82 	bl	800984a <SDMMC_GetResponse>
 8008f46:	4602      	mov	r2, r0
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2108      	movs	r1, #8
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 fc79 	bl	800984a <SDMMC_GetResponse>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	210c      	movs	r1, #12
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 fc70 	bl	800984a <SDMMC_GetResponse>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2104      	movs	r1, #4
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 fc67 	bl	800984a <SDMMC_GetResponse>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	0d1a      	lsrs	r2, r3, #20
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008f84:	f107 030c 	add.w	r3, r7, #12
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7ff fb8c 	bl	80086a8 <HAL_SD_GetCardCSD>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d002      	beq.n	8008f9c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f9a:	e00f      	b.n	8008fbc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fa4:	041b      	lsls	r3, r3, #16
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	4610      	mov	r0, r2
 8008faa:	f000 fd79 	bl	8009aa0 <SDMMC_CmdSelDesel>
 8008fae:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d001      	beq.n	8008fba <SD_InitCard+0x192>
  {
    return errorstate;
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb8:	e000      	b.n	8008fbc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3740      	adds	r7, #64	; 0x40
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 fd82 	bl	8009ae6 <SDMMC_CmdGoIdleState>
 8008fe2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <SD_PowerON+0x2a>
  {
    return errorstate;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	e072      	b.n	80090d4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 fd95 	bl	8009b22 <SDMMC_CmdOperCond>
 8008ff8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009000:	d10d      	bne.n	800901e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4618      	mov	r0, r3
 800900e:	f000 fd6a 	bl	8009ae6 <SDMMC_CmdGoIdleState>
 8009012:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d004      	beq.n	8009024 <SD_PowerON+0x60>
    {
      return errorstate;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	e05a      	b.n	80090d4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2201      	movs	r2, #1
 8009022:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009028:	2b01      	cmp	r3, #1
 800902a:	d137      	bne.n	800909c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2100      	movs	r1, #0
 8009032:	4618      	mov	r0, r3
 8009034:	f000 fd95 	bl	8009b62 <SDMMC_CmdAppCommand>
 8009038:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d02d      	beq.n	800909c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009040:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009044:	e046      	b.n	80090d4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2100      	movs	r1, #0
 800904c:	4618      	mov	r0, r3
 800904e:	f000 fd88 	bl	8009b62 <SDMMC_CmdAppCommand>
 8009052:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d001      	beq.n	800905e <SD_PowerON+0x9a>
    {
      return errorstate;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	e03a      	b.n	80090d4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	491e      	ldr	r1, [pc, #120]	; (80090dc <SD_PowerON+0x118>)
 8009064:	4618      	mov	r0, r3
 8009066:	f000 fd9f 	bl	8009ba8 <SDMMC_CmdAppOperCommand>
 800906a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d002      	beq.n	8009078 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009072:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009076:	e02d      	b.n	80090d4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2100      	movs	r1, #0
 800907e:	4618      	mov	r0, r3
 8009080:	f000 fbe3 	bl	800984a <SDMMC_GetResponse>
 8009084:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	0fdb      	lsrs	r3, r3, #31
 800908a:	2b01      	cmp	r3, #1
 800908c:	d101      	bne.n	8009092 <SD_PowerON+0xce>
 800908e:	2301      	movs	r3, #1
 8009090:	e000      	b.n	8009094 <SD_PowerON+0xd0>
 8009092:	2300      	movs	r3, #0
 8009094:	613b      	str	r3, [r7, #16]

    count++;
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	3301      	adds	r3, #1
 800909a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d802      	bhi.n	80090ac <SD_PowerON+0xe8>
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d0cc      	beq.n	8009046 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d902      	bls.n	80090bc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80090b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090ba:	e00b      	b.n	80090d4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d002      	beq.n	80090d2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3718      	adds	r7, #24
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	c1100000 	.word	0xc1100000

080090e0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b08c      	sub	sp, #48	; 0x30
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80090ea:	f7f8 ff67 	bl	8001fbc <HAL_GetTick>
 80090ee:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2100      	movs	r1, #0
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 fba5 	bl	800984a <SDMMC_GetResponse>
 8009100:	4603      	mov	r3, r0
 8009102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009106:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800910a:	d102      	bne.n	8009112 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800910c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009110:	e0b0      	b.n	8009274 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2140      	movs	r1, #64	; 0x40
 8009118:	4618      	mov	r0, r3
 800911a:	f000 fbd5 	bl	80098c8 <SDMMC_CmdBlockLength>
 800911e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009120:	6a3b      	ldr	r3, [r7, #32]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d005      	beq.n	8009132 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800912e:	6a3b      	ldr	r3, [r7, #32]
 8009130:	e0a0      	b.n	8009274 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800913a:	041b      	lsls	r3, r3, #16
 800913c:	4619      	mov	r1, r3
 800913e:	4610      	mov	r0, r2
 8009140:	f000 fd0f 	bl	8009b62 <SDMMC_CmdAppCommand>
 8009144:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009146:	6a3b      	ldr	r3, [r7, #32]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d005      	beq.n	8009158 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009154:	6a3b      	ldr	r3, [r7, #32]
 8009156:	e08d      	b.n	8009274 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800915c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800915e:	2340      	movs	r3, #64	; 0x40
 8009160:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009162:	2360      	movs	r3, #96	; 0x60
 8009164:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009166:	2302      	movs	r3, #2
 8009168:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800916a:	2300      	movs	r3, #0
 800916c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800916e:	2301      	movs	r3, #1
 8009170:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f107 0208 	add.w	r2, r7, #8
 800917a:	4611      	mov	r1, r2
 800917c:	4618      	mov	r0, r3
 800917e:	f000 fb77 	bl	8009870 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4618      	mov	r0, r3
 8009188:	f000 fdf7 	bl	8009d7a <SDMMC_CmdStatusRegister>
 800918c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800918e:	6a3b      	ldr	r3, [r7, #32]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d02b      	beq.n	80091ec <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	e069      	b.n	8009274 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d013      	beq.n	80091d6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80091ae:	2300      	movs	r3, #0
 80091b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091b2:	e00d      	b.n	80091d0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 fad1 	bl	8009760 <SDMMC_ReadFIFO>
 80091be:	4602      	mov	r2, r0
 80091c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c2:	601a      	str	r2, [r3, #0]
        pData++;
 80091c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c6:	3304      	adds	r3, #4
 80091c8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80091ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091cc:	3301      	adds	r3, #1
 80091ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d2:	2b07      	cmp	r3, #7
 80091d4:	d9ee      	bls.n	80091b4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80091d6:	f7f8 fef1 	bl	8001fbc <HAL_GetTick>
 80091da:	4602      	mov	r2, r0
 80091dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091e4:	d102      	bne.n	80091ec <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80091e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091ea:	e043      	b.n	8009274 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d0d2      	beq.n	80091a0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009200:	f003 0308 	and.w	r3, r3, #8
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009208:	2308      	movs	r3, #8
 800920a:	e033      	b.n	8009274 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009212:	f003 0302 	and.w	r3, r3, #2
 8009216:	2b00      	cmp	r3, #0
 8009218:	d001      	beq.n	800921e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800921a:	2302      	movs	r3, #2
 800921c:	e02a      	b.n	8009274 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009224:	f003 0320 	and.w	r3, r3, #32
 8009228:	2b00      	cmp	r3, #0
 800922a:	d017      	beq.n	800925c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800922c:	2320      	movs	r3, #32
 800922e:	e021      	b.n	8009274 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4618      	mov	r0, r3
 8009236:	f000 fa93 	bl	8009760 <SDMMC_ReadFIFO>
 800923a:	4602      	mov	r2, r0
 800923c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923e:	601a      	str	r2, [r3, #0]
    pData++;
 8009240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009242:	3304      	adds	r3, #4
 8009244:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009246:	f7f8 feb9 	bl	8001fbc <HAL_GetTick>
 800924a:	4602      	mov	r2, r0
 800924c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009254:	d102      	bne.n	800925c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009256:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800925a:	e00b      	b.n	8009274 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009262:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1e2      	bne.n	8009230 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a03      	ldr	r2, [pc, #12]	; (800927c <SD_SendSDStatus+0x19c>)
 8009270:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3730      	adds	r7, #48	; 0x30
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	18000f3a 	.word	0x18000f3a

08009280 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d102      	bne.n	8009296 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009290:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009294:	e018      	b.n	80092c8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800929e:	041b      	lsls	r3, r3, #16
 80092a0:	4619      	mov	r1, r3
 80092a2:	4610      	mov	r0, r2
 80092a4:	f000 fd46 	bl	8009d34 <SDMMC_CmdSendStatus>
 80092a8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d001      	beq.n	80092b4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	e009      	b.n	80092c8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2100      	movs	r1, #0
 80092ba:	4618      	mov	r0, r3
 80092bc:	f000 fac5 	bl	800984a <SDMMC_GetResponse>
 80092c0:	4602      	mov	r2, r0
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80092d8:	2300      	movs	r3, #0
 80092da:	60fb      	str	r3, [r7, #12]
 80092dc:	2300      	movs	r3, #0
 80092de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2100      	movs	r1, #0
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 faaf 	bl	800984a <SDMMC_GetResponse>
 80092ec:	4603      	mov	r3, r0
 80092ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092f6:	d102      	bne.n	80092fe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80092f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092fc:	e02f      	b.n	800935e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80092fe:	f107 030c 	add.w	r3, r7, #12
 8009302:	4619      	mov	r1, r3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f879 	bl	80093fc <SD_FindSCR>
 800930a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d001      	beq.n	8009316 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	e023      	b.n	800935e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d01c      	beq.n	800935a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009328:	041b      	lsls	r3, r3, #16
 800932a:	4619      	mov	r1, r3
 800932c:	4610      	mov	r0, r2
 800932e:	f000 fc18 	bl	8009b62 <SDMMC_CmdAppCommand>
 8009332:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d001      	beq.n	800933e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	e00f      	b.n	800935e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2102      	movs	r1, #2
 8009344:	4618      	mov	r0, r3
 8009346:	f000 fc4f 	bl	8009be8 <SDMMC_CmdBusWidth>
 800934a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	e003      	b.n	800935e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009356:	2300      	movs	r3, #0
 8009358:	e001      	b.n	800935e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800935a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800935e:	4618      	mov	r0, r3
 8009360:	3718      	adds	r7, #24
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b086      	sub	sp, #24
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800936e:	2300      	movs	r3, #0
 8009370:	60fb      	str	r3, [r7, #12]
 8009372:	2300      	movs	r3, #0
 8009374:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2100      	movs	r1, #0
 800937c:	4618      	mov	r0, r3
 800937e:	f000 fa64 	bl	800984a <SDMMC_GetResponse>
 8009382:	4603      	mov	r3, r0
 8009384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009388:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800938c:	d102      	bne.n	8009394 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800938e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009392:	e02f      	b.n	80093f4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009394:	f107 030c 	add.w	r3, r7, #12
 8009398:	4619      	mov	r1, r3
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f82e 	bl	80093fc <SD_FindSCR>
 80093a0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d001      	beq.n	80093ac <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	e023      	b.n	80093f4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d01c      	beq.n	80093f0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093be:	041b      	lsls	r3, r3, #16
 80093c0:	4619      	mov	r1, r3
 80093c2:	4610      	mov	r0, r2
 80093c4:	f000 fbcd 	bl	8009b62 <SDMMC_CmdAppCommand>
 80093c8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d001      	beq.n	80093d4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	e00f      	b.n	80093f4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2100      	movs	r1, #0
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 fc04 	bl	8009be8 <SDMMC_CmdBusWidth>
 80093e0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	e003      	b.n	80093f4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80093ec:	2300      	movs	r3, #0
 80093ee:	e001      	b.n	80093f4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3718      	adds	r7, #24
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b08e      	sub	sp, #56	; 0x38
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009406:	f7f8 fdd9 	bl	8001fbc <HAL_GetTick>
 800940a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800940c:	2300      	movs	r3, #0
 800940e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009410:	2300      	movs	r3, #0
 8009412:	60bb      	str	r3, [r7, #8]
 8009414:	2300      	movs	r3, #0
 8009416:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2108      	movs	r1, #8
 8009422:	4618      	mov	r0, r3
 8009424:	f000 fa50 	bl	80098c8 <SDMMC_CmdBlockLength>
 8009428:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800942a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942c:	2b00      	cmp	r3, #0
 800942e:	d001      	beq.n	8009434 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009432:	e0ad      	b.n	8009590 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800943c:	041b      	lsls	r3, r3, #16
 800943e:	4619      	mov	r1, r3
 8009440:	4610      	mov	r0, r2
 8009442:	f000 fb8e 	bl	8009b62 <SDMMC_CmdAppCommand>
 8009446:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944a:	2b00      	cmp	r3, #0
 800944c:	d001      	beq.n	8009452 <SD_FindSCR+0x56>
  {
    return errorstate;
 800944e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009450:	e09e      	b.n	8009590 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009456:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009458:	2308      	movs	r3, #8
 800945a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800945c:	2330      	movs	r3, #48	; 0x30
 800945e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009460:	2302      	movs	r3, #2
 8009462:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009464:	2300      	movs	r3, #0
 8009466:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009468:	2301      	movs	r3, #1
 800946a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f107 0210 	add.w	r2, r7, #16
 8009474:	4611      	mov	r1, r2
 8009476:	4618      	mov	r0, r3
 8009478:	f000 f9fa 	bl	8009870 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4618      	mov	r0, r3
 8009482:	f000 fbd4 	bl	8009c2e <SDMMC_CmdSendSCR>
 8009486:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948a:	2b00      	cmp	r3, #0
 800948c:	d027      	beq.n	80094de <SD_FindSCR+0xe2>
  {
    return errorstate;
 800948e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009490:	e07e      	b.n	8009590 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009498:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800949c:	2b00      	cmp	r3, #0
 800949e:	d113      	bne.n	80094c8 <SD_FindSCR+0xcc>
 80094a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d110      	bne.n	80094c8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 f958 	bl	8009760 <SDMMC_ReadFIFO>
 80094b0:	4603      	mov	r3, r0
 80094b2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4618      	mov	r0, r3
 80094ba:	f000 f951 	bl	8009760 <SDMMC_ReadFIFO>
 80094be:	4603      	mov	r3, r0
 80094c0:	60fb      	str	r3, [r7, #12]
      index++;
 80094c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c4:	3301      	adds	r3, #1
 80094c6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80094c8:	f7f8 fd78 	bl	8001fbc <HAL_GetTick>
 80094cc:	4602      	mov	r2, r0
 80094ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094d6:	d102      	bne.n	80094de <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80094d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094dc:	e058      	b.n	8009590 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094e4:	f240 532a 	movw	r3, #1322	; 0x52a
 80094e8:	4013      	ands	r3, r2
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d0d1      	beq.n	8009492 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f4:	f003 0308 	and.w	r3, r3, #8
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d005      	beq.n	8009508 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2208      	movs	r2, #8
 8009502:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009504:	2308      	movs	r3, #8
 8009506:	e043      	b.n	8009590 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800950e:	f003 0302 	and.w	r3, r3, #2
 8009512:	2b00      	cmp	r3, #0
 8009514:	d005      	beq.n	8009522 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2202      	movs	r2, #2
 800951c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800951e:	2302      	movs	r3, #2
 8009520:	e036      	b.n	8009590 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009528:	f003 0320 	and.w	r3, r3, #32
 800952c:	2b00      	cmp	r3, #0
 800952e:	d005      	beq.n	800953c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2220      	movs	r2, #32
 8009536:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009538:	2320      	movs	r3, #32
 800953a:	e029      	b.n	8009590 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a15      	ldr	r2, [pc, #84]	; (8009598 <SD_FindSCR+0x19c>)
 8009542:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	061a      	lsls	r2, r3, #24
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	021b      	lsls	r3, r3, #8
 800954c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009550:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	0a1b      	lsrs	r3, r3, #8
 8009556:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800955a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	0e1b      	lsrs	r3, r3, #24
 8009560:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009564:	601a      	str	r2, [r3, #0]
    scr++;
 8009566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009568:	3304      	adds	r3, #4
 800956a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	061a      	lsls	r2, r3, #24
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	021b      	lsls	r3, r3, #8
 8009574:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009578:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	0a1b      	lsrs	r3, r3, #8
 800957e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009582:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	0e1b      	lsrs	r3, r3, #24
 8009588:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800958a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3738      	adds	r7, #56	; 0x38
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	18000f3a 	.word	0x18000f3a

0800959c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b086      	sub	sp, #24
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ae:	2b1f      	cmp	r3, #31
 80095b0:	d936      	bls.n	8009620 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80095b2:	2300      	movs	r3, #0
 80095b4:	617b      	str	r3, [r7, #20]
 80095b6:	e027      	b.n	8009608 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4618      	mov	r0, r3
 80095be:	f000 f8cf 	bl	8009760 <SDMMC_ReadFIFO>
 80095c2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	3301      	adds	r3, #1
 80095d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	0a1b      	lsrs	r3, r3, #8
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	701a      	strb	r2, [r3, #0]
      tmp++;
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	3301      	adds	r3, #1
 80095e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	0c1b      	lsrs	r3, r3, #16
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	3301      	adds	r3, #1
 80095f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	0e1b      	lsrs	r3, r3, #24
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	3301      	adds	r3, #1
 8009600:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	3301      	adds	r3, #1
 8009606:	617b      	str	r3, [r7, #20]
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	2b07      	cmp	r3, #7
 800960c:	d9d4      	bls.n	80095b8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009618:	f1a3 0220 	sub.w	r2, r3, #32
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8009620:	bf00      	nop
 8009622:	3718      	adds	r7, #24
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b086      	sub	sp, #24
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	69db      	ldr	r3, [r3, #28]
 8009634:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	2b1f      	cmp	r3, #31
 800963c:	d93a      	bls.n	80096b4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800963e:	2300      	movs	r3, #0
 8009640:	617b      	str	r3, [r7, #20]
 8009642:	e02b      	b.n	800969c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	60fb      	str	r3, [r7, #12]
      tmp++;
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	3301      	adds	r3, #1
 800964e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	021a      	lsls	r2, r3, #8
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	4313      	orrs	r3, r2
 800965a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	3301      	adds	r3, #1
 8009660:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	041a      	lsls	r2, r3, #16
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	4313      	orrs	r3, r2
 800966c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	3301      	adds	r3, #1
 8009672:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	061a      	lsls	r2, r3, #24
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	4313      	orrs	r3, r2
 800967e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	3301      	adds	r3, #1
 8009684:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f107 020c 	add.w	r2, r7, #12
 800968e:	4611      	mov	r1, r2
 8009690:	4618      	mov	r0, r3
 8009692:	f000 f872 	bl	800977a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	3301      	adds	r3, #1
 800969a:	617b      	str	r3, [r7, #20]
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	2b07      	cmp	r3, #7
 80096a0:	d9d0      	bls.n	8009644 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	693a      	ldr	r2, [r7, #16]
 80096a6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6a1b      	ldr	r3, [r3, #32]
 80096ac:	f1a3 0220 	sub.w	r2, r3, #32
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	621a      	str	r2, [r3, #32]
  }
}
 80096b4:	bf00      	nop
 80096b6:	3718      	adds	r7, #24
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800970c:	b084      	sub	sp, #16
 800970e:	b480      	push	{r7}
 8009710:	b085      	sub	sp, #20
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
 8009716:	f107 001c 	add.w	r0, r7, #28
 800971a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800971e:	2300      	movs	r3, #0
 8009720:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009722:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009724:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8009726:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800972a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800972c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800972e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8009732:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	4313      	orrs	r3, r2
 8009738:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685a      	ldr	r2, [r3, #4]
 800973e:	4b07      	ldr	r3, [pc, #28]	; (800975c <SDMMC_Init+0x50>)
 8009740:	4013      	ands	r3, r2
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	431a      	orrs	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3714      	adds	r7, #20
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	b004      	add	sp, #16
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	ffc02c00 	.word	0xffc02c00

08009760 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800976e:	4618      	mov	r0, r3
 8009770:	370c      	adds	r7, #12
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800977a:	b480      	push	{r7}
 800977c:	b083      	sub	sp, #12
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f043 0203 	orr.w	r2, r3, #3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	370c      	adds	r7, #12
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80097be:	b480      	push	{r7}
 80097c0:	b083      	sub	sp, #12
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f003 0303 	and.w	r3, r3, #3
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
	...

080097dc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80097e6:	2300      	movs	r3, #0
 80097e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80097fa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009800:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8009806:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009808:	68fa      	ldr	r2, [r7, #12]
 800980a:	4313      	orrs	r3, r2
 800980c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68da      	ldr	r2, [r3, #12]
 8009812:	4b06      	ldr	r3, [pc, #24]	; (800982c <SDMMC_SendCommand+0x50>)
 8009814:	4013      	ands	r3, r2
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	431a      	orrs	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr
 800982c:	fffee0c0 	.word	0xfffee0c0

08009830 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	b2db      	uxtb	r3, r3
}
 800983e:	4618      	mov	r0, r3
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800984a:	b480      	push	{r7}
 800984c:	b085      	sub	sp, #20
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	3314      	adds	r3, #20
 8009858:	461a      	mov	r2, r3
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	4413      	add	r3, r2
 800985e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3714      	adds	r7, #20
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800987a:	2300      	movs	r3, #0
 800987c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	685a      	ldr	r2, [r3, #4]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009896:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800989c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80098a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	431a      	orrs	r2, r3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80098ba:	2300      	movs	r3, #0

}
 80098bc:	4618      	mov	r0, r3
 80098be:	3714      	adds	r7, #20
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b088      	sub	sp, #32
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80098d6:	2310      	movs	r3, #16
 80098d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098e0:	2300      	movs	r3, #0
 80098e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098ea:	f107 0308 	add.w	r3, r7, #8
 80098ee:	4619      	mov	r1, r3
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f7ff ff73 	bl	80097dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80098f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80098fa:	2110      	movs	r1, #16
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fa5f 	bl	8009dc0 <SDMMC_GetCmdResp1>
 8009902:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009904:	69fb      	ldr	r3, [r7, #28]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3720      	adds	r7, #32
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b088      	sub	sp, #32
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800991c:	2311      	movs	r3, #17
 800991e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009924:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009926:	2300      	movs	r3, #0
 8009928:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800992a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800992e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009930:	f107 0308 	add.w	r3, r7, #8
 8009934:	4619      	mov	r1, r3
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f7ff ff50 	bl	80097dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800993c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009940:	2111      	movs	r1, #17
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fa3c 	bl	8009dc0 <SDMMC_GetCmdResp1>
 8009948:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800994a:	69fb      	ldr	r3, [r7, #28]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3720      	adds	r7, #32
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b088      	sub	sp, #32
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009962:	2312      	movs	r3, #18
 8009964:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800996a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800996c:	2300      	movs	r3, #0
 800996e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009974:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009976:	f107 0308 	add.w	r3, r7, #8
 800997a:	4619      	mov	r1, r3
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7ff ff2d 	bl	80097dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009982:	f241 3288 	movw	r2, #5000	; 0x1388
 8009986:	2112      	movs	r1, #18
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fa19 	bl	8009dc0 <SDMMC_GetCmdResp1>
 800998e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009990:	69fb      	ldr	r3, [r7, #28]
}
 8009992:	4618      	mov	r0, r3
 8009994:	3720      	adds	r7, #32
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b088      	sub	sp, #32
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
 80099a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80099a8:	2318      	movs	r3, #24
 80099aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099b2:	2300      	movs	r3, #0
 80099b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099bc:	f107 0308 	add.w	r3, r7, #8
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f7ff ff0a 	bl	80097dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80099c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80099cc:	2118      	movs	r1, #24
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f9f6 	bl	8009dc0 <SDMMC_GetCmdResp1>
 80099d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099d6:	69fb      	ldr	r3, [r7, #28]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3720      	adds	r7, #32
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80099ee:	2319      	movs	r3, #25
 80099f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099f8:	2300      	movs	r3, #0
 80099fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a02:	f107 0308 	add.w	r3, r7, #8
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7ff fee7 	bl	80097dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a12:	2119      	movs	r1, #25
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 f9d3 	bl	8009dc0 <SDMMC_GetCmdResp1>
 8009a1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a1c:	69fb      	ldr	r3, [r7, #28]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3720      	adds	r7, #32
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
	...

08009a28 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b088      	sub	sp, #32
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009a30:	2300      	movs	r3, #0
 8009a32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009a34:	230c      	movs	r3, #12
 8009a36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a46:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a60:	f107 0308 	add.w	r3, r7, #8
 8009a64:	4619      	mov	r1, r3
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f7ff feb8 	bl	80097dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009a6c:	4a0b      	ldr	r2, [pc, #44]	; (8009a9c <SDMMC_CmdStopTransfer+0x74>)
 8009a6e:	210c      	movs	r1, #12
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f9a5 	bl	8009dc0 <SDMMC_GetCmdResp1>
 8009a76:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a8a:	d101      	bne.n	8009a90 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8009a90:	69fb      	ldr	r3, [r7, #28]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3720      	adds	r7, #32
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	05f5e100 	.word	0x05f5e100

08009aa0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b088      	sub	sp, #32
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009aae:	2307      	movs	r3, #7
 8009ab0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ab6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ac0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ac2:	f107 0308 	add.w	r3, r7, #8
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f7ff fe87 	bl	80097dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ad2:	2107      	movs	r1, #7
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f973 	bl	8009dc0 <SDMMC_GetCmdResp1>
 8009ada:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009adc:	69fb      	ldr	r3, [r7, #28]
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3720      	adds	r7, #32
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b088      	sub	sp, #32
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009aee:	2300      	movs	r3, #0
 8009af0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009af2:	2300      	movs	r3, #0
 8009af4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009af6:	2300      	movs	r3, #0
 8009af8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009afa:	2300      	movs	r3, #0
 8009afc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b04:	f107 0308 	add.w	r3, r7, #8
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7ff fe66 	bl	80097dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fb97 	bl	800a244 <SDMMC_GetCmdError>
 8009b16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b18:	69fb      	ldr	r3, [r7, #28]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3720      	adds	r7, #32
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b088      	sub	sp, #32
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009b2a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009b2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009b30:	2308      	movs	r3, #8
 8009b32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b44:	f107 0308 	add.w	r3, r7, #8
 8009b48:	4619      	mov	r1, r3
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7ff fe46 	bl	80097dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 fb29 	bl	800a1a8 <SDMMC_GetCmdResp7>
 8009b56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b58:	69fb      	ldr	r3, [r7, #28]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3720      	adds	r7, #32
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b088      	sub	sp, #32
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009b70:	2337      	movs	r3, #55	; 0x37
 8009b72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b84:	f107 0308 	add.w	r3, r7, #8
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7ff fe26 	bl	80097dc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b94:	2137      	movs	r1, #55	; 0x37
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f912 	bl	8009dc0 <SDMMC_GetCmdResp1>
 8009b9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b9e:	69fb      	ldr	r3, [r7, #28]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3720      	adds	r7, #32
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b088      	sub	sp, #32
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009bb6:	2329      	movs	r3, #41	; 0x29
 8009bb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bca:	f107 0308 	add.w	r3, r7, #8
 8009bce:	4619      	mov	r1, r3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7ff fe03 	bl	80097dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fa2e 	bl	800a038 <SDMMC_GetCmdResp3>
 8009bdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bde:	69fb      	ldr	r3, [r7, #28]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3720      	adds	r7, #32
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b088      	sub	sp, #32
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009bf6:	2306      	movs	r3, #6
 8009bf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c00:	2300      	movs	r3, #0
 8009c02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c0a:	f107 0308 	add.w	r3, r7, #8
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7ff fde3 	bl	80097dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c1a:	2106      	movs	r1, #6
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f8cf 	bl	8009dc0 <SDMMC_GetCmdResp1>
 8009c22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c24:	69fb      	ldr	r3, [r7, #28]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3720      	adds	r7, #32
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b088      	sub	sp, #32
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009c36:	2300      	movs	r3, #0
 8009c38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009c3a:	2333      	movs	r3, #51	; 0x33
 8009c3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c44:	2300      	movs	r3, #0
 8009c46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c4e:	f107 0308 	add.w	r3, r7, #8
 8009c52:	4619      	mov	r1, r3
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f7ff fdc1 	bl	80097dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c5e:	2133      	movs	r1, #51	; 0x33
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 f8ad 	bl	8009dc0 <SDMMC_GetCmdResp1>
 8009c66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c68:	69fb      	ldr	r3, [r7, #28]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3720      	adds	r7, #32
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b088      	sub	sp, #32
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009c7e:	2302      	movs	r3, #2
 8009c80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009c82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009c86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c92:	f107 0308 	add.w	r3, r7, #8
 8009c96:	4619      	mov	r1, r3
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f7ff fd9f 	bl	80097dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 f980 	bl	8009fa4 <SDMMC_GetCmdResp2>
 8009ca4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ca6:	69fb      	ldr	r3, [r7, #28]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3720      	adds	r7, #32
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b088      	sub	sp, #32
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009cbe:	2309      	movs	r3, #9
 8009cc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009cc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009cc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cd2:	f107 0308 	add.w	r3, r7, #8
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f7ff fd7f 	bl	80097dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f960 	bl	8009fa4 <SDMMC_GetCmdResp2>
 8009ce4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ce6:	69fb      	ldr	r3, [r7, #28]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3720      	adds	r7, #32
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b088      	sub	sp, #32
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d12:	f107 0308 	add.w	r3, r7, #8
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f7ff fd5f 	bl	80097dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009d1e:	683a      	ldr	r2, [r7, #0]
 8009d20:	2103      	movs	r1, #3
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f9c8 	bl	800a0b8 <SDMMC_GetCmdResp6>
 8009d28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d2a:	69fb      	ldr	r3, [r7, #28]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3720      	adds	r7, #32
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b088      	sub	sp, #32
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009d42:	230d      	movs	r3, #13
 8009d44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d56:	f107 0308 	add.w	r3, r7, #8
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7ff fd3d 	bl	80097dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d66:	210d      	movs	r1, #13
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f829 	bl	8009dc0 <SDMMC_GetCmdResp1>
 8009d6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d70:	69fb      	ldr	r3, [r7, #28]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3720      	adds	r7, #32
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b088      	sub	sp, #32
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009d82:	2300      	movs	r3, #0
 8009d84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009d86:	230d      	movs	r3, #13
 8009d88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d90:	2300      	movs	r3, #0
 8009d92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d9a:	f107 0308 	add.w	r3, r7, #8
 8009d9e:	4619      	mov	r1, r3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f7ff fd1b 	bl	80097dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009daa:	210d      	movs	r1, #13
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 f807 	bl	8009dc0 <SDMMC_GetCmdResp1>
 8009db2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009db4:	69fb      	ldr	r3, [r7, #28]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3720      	adds	r7, #32
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
	...

08009dc0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b088      	sub	sp, #32
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	607a      	str	r2, [r7, #4]
 8009dcc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009dce:	4b70      	ldr	r3, [pc, #448]	; (8009f90 <SDMMC_GetCmdResp1+0x1d0>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a70      	ldr	r2, [pc, #448]	; (8009f94 <SDMMC_GetCmdResp1+0x1d4>)
 8009dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8009dd8:	0a5a      	lsrs	r2, r3, #9
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	fb02 f303 	mul.w	r3, r2, r3
 8009de0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	1e5a      	subs	r2, r3, #1
 8009de6:	61fa      	str	r2, [r7, #28]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d102      	bne.n	8009df2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009dec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009df0:	e0c9      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009df8:	69ba      	ldr	r2, [r7, #24]
 8009dfa:	4b67      	ldr	r3, [pc, #412]	; (8009f98 <SDMMC_GetCmdResp1+0x1d8>)
 8009dfc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d0ef      	beq.n	8009de2 <SDMMC_GetCmdResp1+0x22>
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1ea      	bne.n	8009de2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e10:	f003 0304 	and.w	r3, r3, #4
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d004      	beq.n	8009e22 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2204      	movs	r2, #4
 8009e1c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e1e:	2304      	movs	r3, #4
 8009e20:	e0b1      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e26:	f003 0301 	and.w	r3, r3, #1
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d004      	beq.n	8009e38 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2201      	movs	r2, #1
 8009e32:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e34:	2301      	movs	r3, #1
 8009e36:	e0a6      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	4a58      	ldr	r2, [pc, #352]	; (8009f9c <SDMMC_GetCmdResp1+0x1dc>)
 8009e3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f7ff fcf6 	bl	8009830 <SDMMC_GetCommandResponse>
 8009e44:	4603      	mov	r3, r0
 8009e46:	461a      	mov	r2, r3
 8009e48:	7afb      	ldrb	r3, [r7, #11]
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d001      	beq.n	8009e52 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e099      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009e52:	2100      	movs	r1, #0
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f7ff fcf8 	bl	800984a <SDMMC_GetResponse>
 8009e5a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009e5c:	697a      	ldr	r2, [r7, #20]
 8009e5e:	4b50      	ldr	r3, [pc, #320]	; (8009fa0 <SDMMC_GetCmdResp1+0x1e0>)
 8009e60:	4013      	ands	r3, r2
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d101      	bne.n	8009e6a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009e66:	2300      	movs	r3, #0
 8009e68:	e08d      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	da02      	bge.n	8009e76 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009e70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e74:	e087      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d001      	beq.n	8009e84 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009e80:	2340      	movs	r3, #64	; 0x40
 8009e82:	e080      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d001      	beq.n	8009e92 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009e8e:	2380      	movs	r3, #128	; 0x80
 8009e90:	e079      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009e9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ea0:	e071      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d002      	beq.n	8009eb2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009eb0:	e069      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d002      	beq.n	8009ec2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ec0:	e061      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d002      	beq.n	8009ed2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009ecc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ed0:	e059      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d002      	beq.n	8009ee2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ee0:	e051      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d002      	beq.n	8009ef2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009eec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ef0:	e049      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009efc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009f00:	e041      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d002      	beq.n	8009f12 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009f0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f10:	e039      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009f20:	e031      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d002      	beq.n	8009f32 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009f2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009f30:	e029      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009f3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009f40:	e021      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009f4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009f50:	e019      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d002      	beq.n	8009f62 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009f5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009f60:	e011      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009f6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009f70:	e009      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f003 0308 	and.w	r3, r3, #8
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d002      	beq.n	8009f82 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009f7c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009f80:	e001      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009f82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3720      	adds	r7, #32
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	20000004 	.word	0x20000004
 8009f94:	10624dd3 	.word	0x10624dd3
 8009f98:	00200045 	.word	0x00200045
 8009f9c:	002000c5 	.word	0x002000c5
 8009fa0:	fdffe008 	.word	0xfdffe008

08009fa4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b085      	sub	sp, #20
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009fac:	4b1f      	ldr	r3, [pc, #124]	; (800a02c <SDMMC_GetCmdResp2+0x88>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a1f      	ldr	r2, [pc, #124]	; (800a030 <SDMMC_GetCmdResp2+0x8c>)
 8009fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fb6:	0a5b      	lsrs	r3, r3, #9
 8009fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fbc:	fb02 f303 	mul.w	r3, r2, r3
 8009fc0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	1e5a      	subs	r2, r3, #1
 8009fc6:	60fa      	str	r2, [r7, #12]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d102      	bne.n	8009fd2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fd0:	e026      	b.n	800a020 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d0ef      	beq.n	8009fc2 <SDMMC_GetCmdResp2+0x1e>
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d1ea      	bne.n	8009fc2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff0:	f003 0304 	and.w	r3, r3, #4
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d004      	beq.n	800a002 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2204      	movs	r2, #4
 8009ffc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ffe:	2304      	movs	r3, #4
 800a000:	e00e      	b.n	800a020 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a006:	f003 0301 	and.w	r3, r3, #1
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d004      	beq.n	800a018 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2201      	movs	r2, #1
 800a012:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a014:	2301      	movs	r3, #1
 800a016:	e003      	b.n	800a020 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a06      	ldr	r2, [pc, #24]	; (800a034 <SDMMC_GetCmdResp2+0x90>)
 800a01c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3714      	adds	r7, #20
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	20000004 	.word	0x20000004
 800a030:	10624dd3 	.word	0x10624dd3
 800a034:	002000c5 	.word	0x002000c5

0800a038 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a040:	4b1a      	ldr	r3, [pc, #104]	; (800a0ac <SDMMC_GetCmdResp3+0x74>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a1a      	ldr	r2, [pc, #104]	; (800a0b0 <SDMMC_GetCmdResp3+0x78>)
 800a046:	fba2 2303 	umull	r2, r3, r2, r3
 800a04a:	0a5b      	lsrs	r3, r3, #9
 800a04c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a050:	fb02 f303 	mul.w	r3, r2, r3
 800a054:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	1e5a      	subs	r2, r3, #1
 800a05a:	60fa      	str	r2, [r7, #12]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d102      	bne.n	800a066 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a060:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a064:	e01b      	b.n	800a09e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a06a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a072:	2b00      	cmp	r3, #0
 800a074:	d0ef      	beq.n	800a056 <SDMMC_GetCmdResp3+0x1e>
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1ea      	bne.n	800a056 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a084:	f003 0304 	and.w	r3, r3, #4
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d004      	beq.n	800a096 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2204      	movs	r2, #4
 800a090:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a092:	2304      	movs	r3, #4
 800a094:	e003      	b.n	800a09e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4a06      	ldr	r2, [pc, #24]	; (800a0b4 <SDMMC_GetCmdResp3+0x7c>)
 800a09a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3714      	adds	r7, #20
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	20000004 	.word	0x20000004
 800a0b0:	10624dd3 	.word	0x10624dd3
 800a0b4:	002000c5 	.word	0x002000c5

0800a0b8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b088      	sub	sp, #32
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	607a      	str	r2, [r7, #4]
 800a0c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a0c6:	4b35      	ldr	r3, [pc, #212]	; (800a19c <SDMMC_GetCmdResp6+0xe4>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a35      	ldr	r2, [pc, #212]	; (800a1a0 <SDMMC_GetCmdResp6+0xe8>)
 800a0cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a0d0:	0a5b      	lsrs	r3, r3, #9
 800a0d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0d6:	fb02 f303 	mul.w	r3, r2, r3
 800a0da:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	1e5a      	subs	r2, r3, #1
 800a0e0:	61fa      	str	r2, [r7, #28]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d102      	bne.n	800a0ec <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0ea:	e052      	b.n	800a192 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d0ef      	beq.n	800a0dc <SDMMC_GetCmdResp6+0x24>
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1ea      	bne.n	800a0dc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a10a:	f003 0304 	and.w	r3, r3, #4
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d004      	beq.n	800a11c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2204      	movs	r2, #4
 800a116:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a118:	2304      	movs	r3, #4
 800a11a:	e03a      	b.n	800a192 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a120:	f003 0301 	and.w	r3, r3, #1
 800a124:	2b00      	cmp	r3, #0
 800a126:	d004      	beq.n	800a132 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2201      	movs	r2, #1
 800a12c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a12e:	2301      	movs	r3, #1
 800a130:	e02f      	b.n	800a192 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f7ff fb7c 	bl	8009830 <SDMMC_GetCommandResponse>
 800a138:	4603      	mov	r3, r0
 800a13a:	461a      	mov	r2, r3
 800a13c:	7afb      	ldrb	r3, [r7, #11]
 800a13e:	4293      	cmp	r3, r2
 800a140:	d001      	beq.n	800a146 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a142:	2301      	movs	r3, #1
 800a144:	e025      	b.n	800a192 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	4a16      	ldr	r2, [pc, #88]	; (800a1a4 <SDMMC_GetCmdResp6+0xec>)
 800a14a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a14c:	2100      	movs	r1, #0
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f7ff fb7b 	bl	800984a <SDMMC_GetResponse>
 800a154:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d106      	bne.n	800a16e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	0c1b      	lsrs	r3, r3, #16
 800a164:	b29a      	uxth	r2, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a16a:	2300      	movs	r3, #0
 800a16c:	e011      	b.n	800a192 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a174:	2b00      	cmp	r3, #0
 800a176:	d002      	beq.n	800a17e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a17c:	e009      	b.n	800a192 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a184:	2b00      	cmp	r3, #0
 800a186:	d002      	beq.n	800a18e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a18c:	e001      	b.n	800a192 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a18e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a192:	4618      	mov	r0, r3
 800a194:	3720      	adds	r7, #32
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20000004 	.word	0x20000004
 800a1a0:	10624dd3 	.word	0x10624dd3
 800a1a4:	002000c5 	.word	0x002000c5

0800a1a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a1b0:	4b22      	ldr	r3, [pc, #136]	; (800a23c <SDMMC_GetCmdResp7+0x94>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a22      	ldr	r2, [pc, #136]	; (800a240 <SDMMC_GetCmdResp7+0x98>)
 800a1b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ba:	0a5b      	lsrs	r3, r3, #9
 800a1bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1c0:	fb02 f303 	mul.w	r3, r2, r3
 800a1c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	1e5a      	subs	r2, r3, #1
 800a1ca:	60fa      	str	r2, [r7, #12]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d102      	bne.n	800a1d6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1d4:	e02c      	b.n	800a230 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1da:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d0ef      	beq.n	800a1c6 <SDMMC_GetCmdResp7+0x1e>
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d1ea      	bne.n	800a1c6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f4:	f003 0304 	and.w	r3, r3, #4
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d004      	beq.n	800a206 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2204      	movs	r2, #4
 800a200:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a202:	2304      	movs	r3, #4
 800a204:	e014      	b.n	800a230 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a20a:	f003 0301 	and.w	r3, r3, #1
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d004      	beq.n	800a21c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2201      	movs	r2, #1
 800a216:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a218:	2301      	movs	r3, #1
 800a21a:	e009      	b.n	800a230 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a224:	2b00      	cmp	r3, #0
 800a226:	d002      	beq.n	800a22e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2240      	movs	r2, #64	; 0x40
 800a22c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a22e:	2300      	movs	r3, #0

}
 800a230:	4618      	mov	r0, r3
 800a232:	3714      	adds	r7, #20
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	20000004 	.word	0x20000004
 800a240:	10624dd3 	.word	0x10624dd3

0800a244 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a24c:	4b11      	ldr	r3, [pc, #68]	; (800a294 <SDMMC_GetCmdError+0x50>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a11      	ldr	r2, [pc, #68]	; (800a298 <SDMMC_GetCmdError+0x54>)
 800a252:	fba2 2303 	umull	r2, r3, r2, r3
 800a256:	0a5b      	lsrs	r3, r3, #9
 800a258:	f241 3288 	movw	r2, #5000	; 0x1388
 800a25c:	fb02 f303 	mul.w	r3, r2, r3
 800a260:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	1e5a      	subs	r2, r3, #1
 800a266:	60fa      	str	r2, [r7, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d102      	bne.n	800a272 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a26c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a270:	e009      	b.n	800a286 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d0f1      	beq.n	800a262 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4a06      	ldr	r2, [pc, #24]	; (800a29c <SDMMC_GetCmdError+0x58>)
 800a282:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	3714      	adds	r7, #20
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	20000004 	.word	0x20000004
 800a298:	10624dd3 	.word	0x10624dd3
 800a29c:	002000c5 	.word	0x002000c5

0800a2a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a2a4:	4904      	ldr	r1, [pc, #16]	; (800a2b8 <MX_FATFS_Init+0x18>)
 800a2a6:	4805      	ldr	r0, [pc, #20]	; (800a2bc <MX_FATFS_Init+0x1c>)
 800a2a8:	f003 fa52 	bl	800d750 <FATFS_LinkDriver>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	4b03      	ldr	r3, [pc, #12]	; (800a2c0 <MX_FATFS_Init+0x20>)
 800a2b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a2b4:	bf00      	nop
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	200002b4 	.word	0x200002b4
 800a2bc:	0800d9d0 	.word	0x0800d9d0
 800a2c0:	200002b0 	.word	0x200002b0

0800a2c4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a2c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a2de:	f7f6 fa57 	bl	8000790 <BSP_SD_IsDetected>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d001      	beq.n	800a2ec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a2e8:	2302      	movs	r3, #2
 800a2ea:	e012      	b.n	800a312 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a2ec:	480b      	ldr	r0, [pc, #44]	; (800a31c <BSP_SD_Init+0x48>)
 800a2ee:	f7fd fbe1 	bl	8007ab4 <HAL_SD_Init>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a2f6:	79fb      	ldrb	r3, [r7, #7]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d109      	bne.n	800a310 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a2fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a300:	4806      	ldr	r0, [pc, #24]	; (800a31c <BSP_SD_Init+0x48>)
 800a302:	f7fe fc5f 	bl	8008bc4 <HAL_SD_ConfigWideBusOperation>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d001      	beq.n	800a310 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a310:	79fb      	ldrb	r3, [r7, #7]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	20000230 	.word	0x20000230

0800a320 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b088      	sub	sp, #32
 800a324:	af02      	add	r7, sp, #8
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
 800a32c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	68f9      	ldr	r1, [r7, #12]
 800a33c:	4806      	ldr	r0, [pc, #24]	; (800a358 <BSP_SD_ReadBlocks+0x38>)
 800a33e:	f7fd fcd9 	bl	8007cf4 <HAL_SD_ReadBlocks>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d001      	beq.n	800a34c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a34c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3718      	adds	r7, #24
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	20000230 	.word	0x20000230

0800a35c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b088      	sub	sp, #32
 800a360:	af02      	add	r7, sp, #8
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
 800a368:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	9300      	str	r3, [sp, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	68f9      	ldr	r1, [r7, #12]
 800a378:	4806      	ldr	r0, [pc, #24]	; (800a394 <BSP_SD_WriteBlocks+0x38>)
 800a37a:	f7fd fe45 	bl	8008008 <HAL_SD_WriteBlocks>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d001      	beq.n	800a388 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a388:	7dfb      	ldrb	r3, [r7, #23]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3718      	adds	r7, #24
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	20000230 	.word	0x20000230

0800a398 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a39c:	4805      	ldr	r0, [pc, #20]	; (800a3b4 <BSP_SD_GetCardState+0x1c>)
 800a39e:	f7fe fd23 	bl	8008de8 <HAL_SD_GetCardState>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b04      	cmp	r3, #4
 800a3a6:	bf14      	ite	ne
 800a3a8:	2301      	movne	r3, #1
 800a3aa:	2300      	moveq	r3, #0
 800a3ac:	b2db      	uxtb	r3, r3
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	20000230 	.word	0x20000230

0800a3b8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a3c0:	6879      	ldr	r1, [r7, #4]
 800a3c2:	4803      	ldr	r0, [pc, #12]	; (800a3d0 <BSP_SD_GetCardInfo+0x18>)
 800a3c4:	f7fe fbd2 	bl	8008b6c <HAL_SD_GetCardInfo>
}
 800a3c8:	bf00      	nop
 800a3ca:	3708      	adds	r7, #8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	20000230 	.word	0x20000230

0800a3d4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a3dc:	f000 f80e 	bl	800a3fc <BSP_SD_WriteCpltCallback>
}
 800a3e0:	bf00      	nop
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a3f0:	f000 f80b 	bl	800a40a <BSP_SD_ReadCpltCallback>
}
 800a3f4:	bf00      	nop
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	af00      	add	r7, sp, #0

}
 800a400:	bf00      	nop
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr

0800a40a <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800a40a:	b480      	push	{r7}
 800a40c:	af00      	add	r7, sp, #0

}
 800a40e:	bf00      	nop
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	4603      	mov	r3, r0
 800a420:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a422:	4b0b      	ldr	r3, [pc, #44]	; (800a450 <SD_CheckStatus+0x38>)
 800a424:	2201      	movs	r2, #1
 800a426:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a428:	f7ff ffb6 	bl	800a398 <BSP_SD_GetCardState>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d107      	bne.n	800a442 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a432:	4b07      	ldr	r3, [pc, #28]	; (800a450 <SD_CheckStatus+0x38>)
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	b2db      	uxtb	r3, r3
 800a438:	f023 0301 	bic.w	r3, r3, #1
 800a43c:	b2da      	uxtb	r2, r3
 800a43e:	4b04      	ldr	r3, [pc, #16]	; (800a450 <SD_CheckStatus+0x38>)
 800a440:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a442:	4b03      	ldr	r3, [pc, #12]	; (800a450 <SD_CheckStatus+0x38>)
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	b2db      	uxtb	r3, r3
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3708      	adds	r7, #8
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	20000011 	.word	0x20000011

0800a454 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	4603      	mov	r3, r0
 800a45c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a45e:	4b0b      	ldr	r3, [pc, #44]	; (800a48c <SD_initialize+0x38>)
 800a460:	2201      	movs	r2, #1
 800a462:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a464:	f7ff ff36 	bl	800a2d4 <BSP_SD_Init>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d107      	bne.n	800a47e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a46e:	79fb      	ldrb	r3, [r7, #7]
 800a470:	4618      	mov	r0, r3
 800a472:	f7ff ffd1 	bl	800a418 <SD_CheckStatus>
 800a476:	4603      	mov	r3, r0
 800a478:	461a      	mov	r2, r3
 800a47a:	4b04      	ldr	r3, [pc, #16]	; (800a48c <SD_initialize+0x38>)
 800a47c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a47e:	4b03      	ldr	r3, [pc, #12]	; (800a48c <SD_initialize+0x38>)
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	b2db      	uxtb	r3, r3
}
 800a484:	4618      	mov	r0, r3
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	20000011 	.word	0x20000011

0800a490 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	4603      	mov	r3, r0
 800a498:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a49a:	79fb      	ldrb	r3, [r7, #7]
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7ff ffbb 	bl	800a418 <SD_CheckStatus>
 800a4a2:	4603      	mov	r3, r0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3708      	adds	r7, #8
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60b9      	str	r1, [r7, #8]
 800a4b4:	607a      	str	r2, [r7, #4]
 800a4b6:	603b      	str	r3, [r7, #0]
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a4c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	6879      	ldr	r1, [r7, #4]
 800a4c8:	68b8      	ldr	r0, [r7, #8]
 800a4ca:	f7ff ff29 	bl	800a320 <BSP_SD_ReadBlocks>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d107      	bne.n	800a4e4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a4d4:	bf00      	nop
 800a4d6:	f7ff ff5f 	bl	800a398 <BSP_SD_GetCardState>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d1fa      	bne.n	800a4d6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a4e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3718      	adds	r7, #24
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b086      	sub	sp, #24
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
 800a4f8:	603b      	str	r3, [r7, #0]
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	6879      	ldr	r1, [r7, #4]
 800a50a:	68b8      	ldr	r0, [r7, #8]
 800a50c:	f7ff ff26 	bl	800a35c <BSP_SD_WriteBlocks>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d107      	bne.n	800a526 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a516:	bf00      	nop
 800a518:	f7ff ff3e 	bl	800a398 <BSP_SD_GetCardState>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1fa      	bne.n	800a518 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a522:	2300      	movs	r3, #0
 800a524:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a526:	7dfb      	ldrb	r3, [r7, #23]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3718      	adds	r7, #24
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b08c      	sub	sp, #48	; 0x30
 800a534:	af00      	add	r7, sp, #0
 800a536:	4603      	mov	r3, r0
 800a538:	603a      	str	r2, [r7, #0]
 800a53a:	71fb      	strb	r3, [r7, #7]
 800a53c:	460b      	mov	r3, r1
 800a53e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a546:	4b25      	ldr	r3, [pc, #148]	; (800a5dc <SD_ioctl+0xac>)
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	f003 0301 	and.w	r3, r3, #1
 800a550:	2b00      	cmp	r3, #0
 800a552:	d001      	beq.n	800a558 <SD_ioctl+0x28>
 800a554:	2303      	movs	r3, #3
 800a556:	e03c      	b.n	800a5d2 <SD_ioctl+0xa2>

  switch (cmd)
 800a558:	79bb      	ldrb	r3, [r7, #6]
 800a55a:	2b03      	cmp	r3, #3
 800a55c:	d834      	bhi.n	800a5c8 <SD_ioctl+0x98>
 800a55e:	a201      	add	r2, pc, #4	; (adr r2, 800a564 <SD_ioctl+0x34>)
 800a560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a564:	0800a575 	.word	0x0800a575
 800a568:	0800a57d 	.word	0x0800a57d
 800a56c:	0800a595 	.word	0x0800a595
 800a570:	0800a5af 	.word	0x0800a5af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a574:	2300      	movs	r3, #0
 800a576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a57a:	e028      	b.n	800a5ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a57c:	f107 0308 	add.w	r3, r7, #8
 800a580:	4618      	mov	r0, r3
 800a582:	f7ff ff19 	bl	800a3b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a586:	6a3a      	ldr	r2, [r7, #32]
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a58c:	2300      	movs	r3, #0
 800a58e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a592:	e01c      	b.n	800a5ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a594:	f107 0308 	add.w	r3, r7, #8
 800a598:	4618      	mov	r0, r3
 800a59a:	f7ff ff0d 	bl	800a3b8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a5ac:	e00f      	b.n	800a5ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a5ae:	f107 0308 	add.w	r3, r7, #8
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7ff ff00 	bl	800a3b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ba:	0a5a      	lsrs	r2, r3, #9
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a5c6:	e002      	b.n	800a5ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a5c8:	2304      	movs	r3, #4
 800a5ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a5ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3730      	adds	r7, #48	; 0x30
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	20000011 	.word	0x20000011

0800a5e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a5ea:	79fb      	ldrb	r3, [r7, #7]
 800a5ec:	4a08      	ldr	r2, [pc, #32]	; (800a610 <disk_status+0x30>)
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	4413      	add	r3, r2
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	79fa      	ldrb	r2, [r7, #7]
 800a5f8:	4905      	ldr	r1, [pc, #20]	; (800a610 <disk_status+0x30>)
 800a5fa:	440a      	add	r2, r1
 800a5fc:	7a12      	ldrb	r2, [r2, #8]
 800a5fe:	4610      	mov	r0, r2
 800a600:	4798      	blx	r3
 800a602:	4603      	mov	r3, r0
 800a604:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a606:	7bfb      	ldrb	r3, [r7, #15]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	20000940 	.word	0x20000940

0800a614 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	4603      	mov	r3, r0
 800a61c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a61e:	2300      	movs	r3, #0
 800a620:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a622:	79fb      	ldrb	r3, [r7, #7]
 800a624:	4a0d      	ldr	r2, [pc, #52]	; (800a65c <disk_initialize+0x48>)
 800a626:	5cd3      	ldrb	r3, [r2, r3]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d111      	bne.n	800a650 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a62c:	79fb      	ldrb	r3, [r7, #7]
 800a62e:	4a0b      	ldr	r2, [pc, #44]	; (800a65c <disk_initialize+0x48>)
 800a630:	2101      	movs	r1, #1
 800a632:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a634:	79fb      	ldrb	r3, [r7, #7]
 800a636:	4a09      	ldr	r2, [pc, #36]	; (800a65c <disk_initialize+0x48>)
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	4413      	add	r3, r2
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	79fa      	ldrb	r2, [r7, #7]
 800a642:	4906      	ldr	r1, [pc, #24]	; (800a65c <disk_initialize+0x48>)
 800a644:	440a      	add	r2, r1
 800a646:	7a12      	ldrb	r2, [r2, #8]
 800a648:	4610      	mov	r0, r2
 800a64a:	4798      	blx	r3
 800a64c:	4603      	mov	r3, r0
 800a64e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a650:	7bfb      	ldrb	r3, [r7, #15]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	20000940 	.word	0x20000940

0800a660 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a660:	b590      	push	{r4, r7, lr}
 800a662:	b087      	sub	sp, #28
 800a664:	af00      	add	r7, sp, #0
 800a666:	60b9      	str	r1, [r7, #8]
 800a668:	607a      	str	r2, [r7, #4]
 800a66a:	603b      	str	r3, [r7, #0]
 800a66c:	4603      	mov	r3, r0
 800a66e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a670:	7bfb      	ldrb	r3, [r7, #15]
 800a672:	4a0a      	ldr	r2, [pc, #40]	; (800a69c <disk_read+0x3c>)
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4413      	add	r3, r2
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	689c      	ldr	r4, [r3, #8]
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
 800a67e:	4a07      	ldr	r2, [pc, #28]	; (800a69c <disk_read+0x3c>)
 800a680:	4413      	add	r3, r2
 800a682:	7a18      	ldrb	r0, [r3, #8]
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	68b9      	ldr	r1, [r7, #8]
 800a68a:	47a0      	blx	r4
 800a68c:	4603      	mov	r3, r0
 800a68e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a690:	7dfb      	ldrb	r3, [r7, #23]
}
 800a692:	4618      	mov	r0, r3
 800a694:	371c      	adds	r7, #28
 800a696:	46bd      	mov	sp, r7
 800a698:	bd90      	pop	{r4, r7, pc}
 800a69a:	bf00      	nop
 800a69c:	20000940 	.word	0x20000940

0800a6a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a6a0:	b590      	push	{r4, r7, lr}
 800a6a2:	b087      	sub	sp, #28
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60b9      	str	r1, [r7, #8]
 800a6a8:	607a      	str	r2, [r7, #4]
 800a6aa:	603b      	str	r3, [r7, #0]
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
 800a6b2:	4a0a      	ldr	r2, [pc, #40]	; (800a6dc <disk_write+0x3c>)
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	4413      	add	r3, r2
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	68dc      	ldr	r4, [r3, #12]
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
 800a6be:	4a07      	ldr	r2, [pc, #28]	; (800a6dc <disk_write+0x3c>)
 800a6c0:	4413      	add	r3, r2
 800a6c2:	7a18      	ldrb	r0, [r3, #8]
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	68b9      	ldr	r1, [r7, #8]
 800a6ca:	47a0      	blx	r4
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	75fb      	strb	r3, [r7, #23]
  return res;
 800a6d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	371c      	adds	r7, #28
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd90      	pop	{r4, r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	20000940 	.word	0x20000940

0800a6e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	603a      	str	r2, [r7, #0]
 800a6ea:	71fb      	strb	r3, [r7, #7]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a6f0:	79fb      	ldrb	r3, [r7, #7]
 800a6f2:	4a09      	ldr	r2, [pc, #36]	; (800a718 <disk_ioctl+0x38>)
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	79fa      	ldrb	r2, [r7, #7]
 800a6fe:	4906      	ldr	r1, [pc, #24]	; (800a718 <disk_ioctl+0x38>)
 800a700:	440a      	add	r2, r1
 800a702:	7a10      	ldrb	r0, [r2, #8]
 800a704:	79b9      	ldrb	r1, [r7, #6]
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	4798      	blx	r3
 800a70a:	4603      	mov	r3, r0
 800a70c:	73fb      	strb	r3, [r7, #15]
  return res;
 800a70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	20000940 	.word	0x20000940

0800a71c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a71c:	b480      	push	{r7}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	3301      	adds	r3, #1
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a72c:	89fb      	ldrh	r3, [r7, #14]
 800a72e:	021b      	lsls	r3, r3, #8
 800a730:	b21a      	sxth	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	b21b      	sxth	r3, r3
 800a738:	4313      	orrs	r3, r2
 800a73a:	b21b      	sxth	r3, r3
 800a73c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a73e:	89fb      	ldrh	r3, [r7, #14]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3714      	adds	r7, #20
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	3303      	adds	r3, #3
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	021b      	lsls	r3, r3, #8
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	3202      	adds	r2, #2
 800a764:	7812      	ldrb	r2, [r2, #0]
 800a766:	4313      	orrs	r3, r2
 800a768:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	021b      	lsls	r3, r3, #8
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	3201      	adds	r2, #1
 800a772:	7812      	ldrb	r2, [r2, #0]
 800a774:	4313      	orrs	r3, r2
 800a776:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	021b      	lsls	r3, r3, #8
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	7812      	ldrb	r2, [r2, #0]
 800a780:	4313      	orrs	r3, r2
 800a782:	60fb      	str	r3, [r7, #12]
	return rv;
 800a784:	68fb      	ldr	r3, [r7, #12]
}
 800a786:	4618      	mov	r0, r3
 800a788:	3714      	adds	r7, #20
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr

0800a792 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a792:	b480      	push	{r7}
 800a794:	b083      	sub	sp, #12
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	460b      	mov	r3, r1
 800a79c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	1c5a      	adds	r2, r3, #1
 800a7a2:	607a      	str	r2, [r7, #4]
 800a7a4:	887a      	ldrh	r2, [r7, #2]
 800a7a6:	b2d2      	uxtb	r2, r2
 800a7a8:	701a      	strb	r2, [r3, #0]
 800a7aa:	887b      	ldrh	r3, [r7, #2]
 800a7ac:	0a1b      	lsrs	r3, r3, #8
 800a7ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	1c5a      	adds	r2, r3, #1
 800a7b4:	607a      	str	r2, [r7, #4]
 800a7b6:	887a      	ldrh	r2, [r7, #2]
 800a7b8:	b2d2      	uxtb	r2, r2
 800a7ba:	701a      	strb	r2, [r3, #0]
}
 800a7bc:	bf00      	nop
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	1c5a      	adds	r2, r3, #1
 800a7d6:	607a      	str	r2, [r7, #4]
 800a7d8:	683a      	ldr	r2, [r7, #0]
 800a7da:	b2d2      	uxtb	r2, r2
 800a7dc:	701a      	strb	r2, [r3, #0]
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	0a1b      	lsrs	r3, r3, #8
 800a7e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	1c5a      	adds	r2, r3, #1
 800a7e8:	607a      	str	r2, [r7, #4]
 800a7ea:	683a      	ldr	r2, [r7, #0]
 800a7ec:	b2d2      	uxtb	r2, r2
 800a7ee:	701a      	strb	r2, [r3, #0]
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	0a1b      	lsrs	r3, r3, #8
 800a7f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	1c5a      	adds	r2, r3, #1
 800a7fa:	607a      	str	r2, [r7, #4]
 800a7fc:	683a      	ldr	r2, [r7, #0]
 800a7fe:	b2d2      	uxtb	r2, r2
 800a800:	701a      	strb	r2, [r3, #0]
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	0a1b      	lsrs	r3, r3, #8
 800a806:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	1c5a      	adds	r2, r3, #1
 800a80c:	607a      	str	r2, [r7, #4]
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	b2d2      	uxtb	r2, r2
 800a812:	701a      	strb	r2, [r3, #0]
}
 800a814:	bf00      	nop
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a820:	b480      	push	{r7}
 800a822:	b087      	sub	sp, #28
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00d      	beq.n	800a856 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a83a:	693a      	ldr	r2, [r7, #16]
 800a83c:	1c53      	adds	r3, r2, #1
 800a83e:	613b      	str	r3, [r7, #16]
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	1c59      	adds	r1, r3, #1
 800a844:	6179      	str	r1, [r7, #20]
 800a846:	7812      	ldrb	r2, [r2, #0]
 800a848:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	3b01      	subs	r3, #1
 800a84e:	607b      	str	r3, [r7, #4]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1f1      	bne.n	800a83a <mem_cpy+0x1a>
	}
}
 800a856:	bf00      	nop
 800a858:	371c      	adds	r7, #28
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a862:	b480      	push	{r7}
 800a864:	b087      	sub	sp, #28
 800a866:	af00      	add	r7, sp, #0
 800a868:	60f8      	str	r0, [r7, #12]
 800a86a:	60b9      	str	r1, [r7, #8]
 800a86c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	1c5a      	adds	r2, r3, #1
 800a876:	617a      	str	r2, [r7, #20]
 800a878:	68ba      	ldr	r2, [r7, #8]
 800a87a:	b2d2      	uxtb	r2, r2
 800a87c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	3b01      	subs	r3, #1
 800a882:	607b      	str	r3, [r7, #4]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1f3      	bne.n	800a872 <mem_set+0x10>
}
 800a88a:	bf00      	nop
 800a88c:	bf00      	nop
 800a88e:	371c      	adds	r7, #28
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a898:	b480      	push	{r7}
 800a89a:	b089      	sub	sp, #36	; 0x24
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	61fb      	str	r3, [r7, #28]
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	1c5a      	adds	r2, r3, #1
 800a8b4:	61fa      	str	r2, [r7, #28]
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	69bb      	ldr	r3, [r7, #24]
 800a8bc:	1c5a      	adds	r2, r3, #1
 800a8be:	61ba      	str	r2, [r7, #24]
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	1acb      	subs	r3, r1, r3
 800a8c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	607b      	str	r3, [r7, #4]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d002      	beq.n	800a8d8 <mem_cmp+0x40>
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d0eb      	beq.n	800a8b0 <mem_cmp+0x18>

	return r;
 800a8d8:	697b      	ldr	r3, [r7, #20]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3724      	adds	r7, #36	; 0x24
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a8e6:	b480      	push	{r7}
 800a8e8:	b083      	sub	sp, #12
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a8f0:	e002      	b.n	800a8f8 <chk_chr+0x12>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	607b      	str	r3, [r7, #4]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d005      	beq.n	800a90c <chk_chr+0x26>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	461a      	mov	r2, r3
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	4293      	cmp	r3, r2
 800a90a:	d1f2      	bne.n	800a8f2 <chk_chr+0xc>
	return *str;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	781b      	ldrb	r3, [r3, #0]
}
 800a910:	4618      	mov	r0, r3
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b085      	sub	sp, #20
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a926:	2300      	movs	r3, #0
 800a928:	60bb      	str	r3, [r7, #8]
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	60fb      	str	r3, [r7, #12]
 800a92e:	e029      	b.n	800a984 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a930:	4a27      	ldr	r2, [pc, #156]	; (800a9d0 <chk_lock+0xb4>)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	011b      	lsls	r3, r3, #4
 800a936:	4413      	add	r3, r2
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d01d      	beq.n	800a97a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a93e:	4a24      	ldr	r2, [pc, #144]	; (800a9d0 <chk_lock+0xb4>)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	011b      	lsls	r3, r3, #4
 800a944:	4413      	add	r3, r2
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d116      	bne.n	800a97e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a950:	4a1f      	ldr	r2, [pc, #124]	; (800a9d0 <chk_lock+0xb4>)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	011b      	lsls	r3, r3, #4
 800a956:	4413      	add	r3, r2
 800a958:	3304      	adds	r3, #4
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a960:	429a      	cmp	r2, r3
 800a962:	d10c      	bne.n	800a97e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a964:	4a1a      	ldr	r2, [pc, #104]	; (800a9d0 <chk_lock+0xb4>)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	011b      	lsls	r3, r3, #4
 800a96a:	4413      	add	r3, r2
 800a96c:	3308      	adds	r3, #8
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a974:	429a      	cmp	r2, r3
 800a976:	d102      	bne.n	800a97e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a978:	e007      	b.n	800a98a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a97a:	2301      	movs	r3, #1
 800a97c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	3301      	adds	r3, #1
 800a982:	60fb      	str	r3, [r7, #12]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2b01      	cmp	r3, #1
 800a988:	d9d2      	bls.n	800a930 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	d109      	bne.n	800a9a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d102      	bne.n	800a99c <chk_lock+0x80>
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d101      	bne.n	800a9a0 <chk_lock+0x84>
 800a99c:	2300      	movs	r3, #0
 800a99e:	e010      	b.n	800a9c2 <chk_lock+0xa6>
 800a9a0:	2312      	movs	r3, #18
 800a9a2:	e00e      	b.n	800a9c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d108      	bne.n	800a9bc <chk_lock+0xa0>
 800a9aa:	4a09      	ldr	r2, [pc, #36]	; (800a9d0 <chk_lock+0xb4>)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	011b      	lsls	r3, r3, #4
 800a9b0:	4413      	add	r3, r2
 800a9b2:	330c      	adds	r3, #12
 800a9b4:	881b      	ldrh	r3, [r3, #0]
 800a9b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9ba:	d101      	bne.n	800a9c0 <chk_lock+0xa4>
 800a9bc:	2310      	movs	r3, #16
 800a9be:	e000      	b.n	800a9c2 <chk_lock+0xa6>
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3714      	adds	r7, #20
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	20000720 	.word	0x20000720

0800a9d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	607b      	str	r3, [r7, #4]
 800a9de:	e002      	b.n	800a9e6 <enq_lock+0x12>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	607b      	str	r3, [r7, #4]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d806      	bhi.n	800a9fa <enq_lock+0x26>
 800a9ec:	4a09      	ldr	r2, [pc, #36]	; (800aa14 <enq_lock+0x40>)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	011b      	lsls	r3, r3, #4
 800a9f2:	4413      	add	r3, r2
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1f2      	bne.n	800a9e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	bf14      	ite	ne
 800aa00:	2301      	movne	r3, #1
 800aa02:	2300      	moveq	r3, #0
 800aa04:	b2db      	uxtb	r3, r3
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	370c      	adds	r7, #12
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	20000720 	.word	0x20000720

0800aa18 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aa22:	2300      	movs	r3, #0
 800aa24:	60fb      	str	r3, [r7, #12]
 800aa26:	e01f      	b.n	800aa68 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800aa28:	4a41      	ldr	r2, [pc, #260]	; (800ab30 <inc_lock+0x118>)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	011b      	lsls	r3, r3, #4
 800aa2e:	4413      	add	r3, r2
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d113      	bne.n	800aa62 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800aa3a:	4a3d      	ldr	r2, [pc, #244]	; (800ab30 <inc_lock+0x118>)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	011b      	lsls	r3, r3, #4
 800aa40:	4413      	add	r3, r2
 800aa42:	3304      	adds	r3, #4
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d109      	bne.n	800aa62 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800aa4e:	4a38      	ldr	r2, [pc, #224]	; (800ab30 <inc_lock+0x118>)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	011b      	lsls	r3, r3, #4
 800aa54:	4413      	add	r3, r2
 800aa56:	3308      	adds	r3, #8
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d006      	beq.n	800aa70 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	3301      	adds	r3, #1
 800aa66:	60fb      	str	r3, [r7, #12]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d9dc      	bls.n	800aa28 <inc_lock+0x10>
 800aa6e:	e000      	b.n	800aa72 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800aa70:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	d132      	bne.n	800aade <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	60fb      	str	r3, [r7, #12]
 800aa7c:	e002      	b.n	800aa84 <inc_lock+0x6c>
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	3301      	adds	r3, #1
 800aa82:	60fb      	str	r3, [r7, #12]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d806      	bhi.n	800aa98 <inc_lock+0x80>
 800aa8a:	4a29      	ldr	r2, [pc, #164]	; (800ab30 <inc_lock+0x118>)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	011b      	lsls	r3, r3, #4
 800aa90:	4413      	add	r3, r2
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d1f2      	bne.n	800aa7e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d101      	bne.n	800aaa2 <inc_lock+0x8a>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	e040      	b.n	800ab24 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	4922      	ldr	r1, [pc, #136]	; (800ab30 <inc_lock+0x118>)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	011b      	lsls	r3, r3, #4
 800aaac:	440b      	add	r3, r1
 800aaae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	689a      	ldr	r2, [r3, #8]
 800aab4:	491e      	ldr	r1, [pc, #120]	; (800ab30 <inc_lock+0x118>)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	011b      	lsls	r3, r3, #4
 800aaba:	440b      	add	r3, r1
 800aabc:	3304      	adds	r3, #4
 800aabe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	695a      	ldr	r2, [r3, #20]
 800aac4:	491a      	ldr	r1, [pc, #104]	; (800ab30 <inc_lock+0x118>)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	011b      	lsls	r3, r3, #4
 800aaca:	440b      	add	r3, r1
 800aacc:	3308      	adds	r3, #8
 800aace:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800aad0:	4a17      	ldr	r2, [pc, #92]	; (800ab30 <inc_lock+0x118>)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	011b      	lsls	r3, r3, #4
 800aad6:	4413      	add	r3, r2
 800aad8:	330c      	adds	r3, #12
 800aada:	2200      	movs	r2, #0
 800aadc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d009      	beq.n	800aaf8 <inc_lock+0xe0>
 800aae4:	4a12      	ldr	r2, [pc, #72]	; (800ab30 <inc_lock+0x118>)
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	011b      	lsls	r3, r3, #4
 800aaea:	4413      	add	r3, r2
 800aaec:	330c      	adds	r3, #12
 800aaee:	881b      	ldrh	r3, [r3, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d001      	beq.n	800aaf8 <inc_lock+0xe0>
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	e015      	b.n	800ab24 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d108      	bne.n	800ab10 <inc_lock+0xf8>
 800aafe:	4a0c      	ldr	r2, [pc, #48]	; (800ab30 <inc_lock+0x118>)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	011b      	lsls	r3, r3, #4
 800ab04:	4413      	add	r3, r2
 800ab06:	330c      	adds	r3, #12
 800ab08:	881b      	ldrh	r3, [r3, #0]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	b29a      	uxth	r2, r3
 800ab0e:	e001      	b.n	800ab14 <inc_lock+0xfc>
 800ab10:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab14:	4906      	ldr	r1, [pc, #24]	; (800ab30 <inc_lock+0x118>)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	011b      	lsls	r3, r3, #4
 800ab1a:	440b      	add	r3, r1
 800ab1c:	330c      	adds	r3, #12
 800ab1e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	3301      	adds	r3, #1
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr
 800ab30:	20000720 	.word	0x20000720

0800ab34 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b085      	sub	sp, #20
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	607b      	str	r3, [r7, #4]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d825      	bhi.n	800ab94 <dec_lock+0x60>
		n = Files[i].ctr;
 800ab48:	4a17      	ldr	r2, [pc, #92]	; (800aba8 <dec_lock+0x74>)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	011b      	lsls	r3, r3, #4
 800ab4e:	4413      	add	r3, r2
 800ab50:	330c      	adds	r3, #12
 800ab52:	881b      	ldrh	r3, [r3, #0]
 800ab54:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ab56:	89fb      	ldrh	r3, [r7, #14]
 800ab58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab5c:	d101      	bne.n	800ab62 <dec_lock+0x2e>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ab62:	89fb      	ldrh	r3, [r7, #14]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d002      	beq.n	800ab6e <dec_lock+0x3a>
 800ab68:	89fb      	ldrh	r3, [r7, #14]
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ab6e:	4a0e      	ldr	r2, [pc, #56]	; (800aba8 <dec_lock+0x74>)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	011b      	lsls	r3, r3, #4
 800ab74:	4413      	add	r3, r2
 800ab76:	330c      	adds	r3, #12
 800ab78:	89fa      	ldrh	r2, [r7, #14]
 800ab7a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ab7c:	89fb      	ldrh	r3, [r7, #14]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d105      	bne.n	800ab8e <dec_lock+0x5a>
 800ab82:	4a09      	ldr	r2, [pc, #36]	; (800aba8 <dec_lock+0x74>)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	011b      	lsls	r3, r3, #4
 800ab88:	4413      	add	r3, r2
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	737b      	strb	r3, [r7, #13]
 800ab92:	e001      	b.n	800ab98 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ab94:	2302      	movs	r3, #2
 800ab96:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ab98:	7b7b      	ldrb	r3, [r7, #13]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3714      	adds	r7, #20
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	20000720 	.word	0x20000720

0800abac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800abb4:	2300      	movs	r3, #0
 800abb6:	60fb      	str	r3, [r7, #12]
 800abb8:	e010      	b.n	800abdc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800abba:	4a0d      	ldr	r2, [pc, #52]	; (800abf0 <clear_lock+0x44>)
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	011b      	lsls	r3, r3, #4
 800abc0:	4413      	add	r3, r2
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d105      	bne.n	800abd6 <clear_lock+0x2a>
 800abca:	4a09      	ldr	r2, [pc, #36]	; (800abf0 <clear_lock+0x44>)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	011b      	lsls	r3, r3, #4
 800abd0:	4413      	add	r3, r2
 800abd2:	2200      	movs	r2, #0
 800abd4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	3301      	adds	r3, #1
 800abda:	60fb      	str	r3, [r7, #12]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d9eb      	bls.n	800abba <clear_lock+0xe>
	}
}
 800abe2:	bf00      	nop
 800abe4:	bf00      	nop
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr
 800abf0:	20000720 	.word	0x20000720

0800abf4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b086      	sub	sp, #24
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800abfc:	2300      	movs	r3, #0
 800abfe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	78db      	ldrb	r3, [r3, #3]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d034      	beq.n	800ac72 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac0c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	7858      	ldrb	r0, [r3, #1]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ac18:	2301      	movs	r3, #1
 800ac1a:	697a      	ldr	r2, [r7, #20]
 800ac1c:	f7ff fd40 	bl	800a6a0 <disk_write>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d002      	beq.n	800ac2c <sync_window+0x38>
			res = FR_DISK_ERR;
 800ac26:	2301      	movs	r3, #1
 800ac28:	73fb      	strb	r3, [r7, #15]
 800ac2a:	e022      	b.n	800ac72 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac36:	697a      	ldr	r2, [r7, #20]
 800ac38:	1ad2      	subs	r2, r2, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	69db      	ldr	r3, [r3, #28]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d217      	bcs.n	800ac72 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	789b      	ldrb	r3, [r3, #2]
 800ac46:	613b      	str	r3, [r7, #16]
 800ac48:	e010      	b.n	800ac6c <sync_window+0x78>
					wsect += fs->fsize;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	69db      	ldr	r3, [r3, #28]
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	4413      	add	r3, r2
 800ac52:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	7858      	ldrb	r0, [r3, #1]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ac5e:	2301      	movs	r3, #1
 800ac60:	697a      	ldr	r2, [r7, #20]
 800ac62:	f7ff fd1d 	bl	800a6a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	613b      	str	r3, [r7, #16]
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d8eb      	bhi.n	800ac4a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ac72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3718      	adds	r7, #24
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ac86:	2300      	movs	r3, #0
 800ac88:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d01b      	beq.n	800accc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f7ff ffad 	bl	800abf4 <sync_window>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ac9e:	7bfb      	ldrb	r3, [r7, #15]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d113      	bne.n	800accc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	7858      	ldrb	r0, [r3, #1]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800acae:	2301      	movs	r3, #1
 800acb0:	683a      	ldr	r2, [r7, #0]
 800acb2:	f7ff fcd5 	bl	800a660 <disk_read>
 800acb6:	4603      	mov	r3, r0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d004      	beq.n	800acc6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800acbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acc0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800acc2:	2301      	movs	r3, #1
 800acc4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	683a      	ldr	r2, [r7, #0]
 800acca:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800accc:	7bfb      	ldrb	r3, [r7, #15]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3710      	adds	r7, #16
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
	...

0800acd8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f7ff ff87 	bl	800abf4 <sync_window>
 800ace6:	4603      	mov	r3, r0
 800ace8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800acea:	7bfb      	ldrb	r3, [r7, #15]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d158      	bne.n	800ada2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	2b03      	cmp	r3, #3
 800acf6:	d148      	bne.n	800ad8a <sync_fs+0xb2>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	791b      	ldrb	r3, [r3, #4]
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d144      	bne.n	800ad8a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	3334      	adds	r3, #52	; 0x34
 800ad04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad08:	2100      	movs	r1, #0
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7ff fda9 	bl	800a862 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	3334      	adds	r3, #52	; 0x34
 800ad14:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ad18:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7ff fd38 	bl	800a792 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	3334      	adds	r3, #52	; 0x34
 800ad26:	4921      	ldr	r1, [pc, #132]	; (800adac <sync_fs+0xd4>)
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7ff fd4d 	bl	800a7c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	3334      	adds	r3, #52	; 0x34
 800ad32:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ad36:	491e      	ldr	r1, [pc, #120]	; (800adb0 <sync_fs+0xd8>)
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7ff fd45 	bl	800a7c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	3334      	adds	r3, #52	; 0x34
 800ad42:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	695b      	ldr	r3, [r3, #20]
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	4610      	mov	r0, r2
 800ad4e:	f7ff fd3b 	bl	800a7c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	3334      	adds	r3, #52	; 0x34
 800ad56:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	4619      	mov	r1, r3
 800ad60:	4610      	mov	r0, r2
 800ad62:	f7ff fd31 	bl	800a7c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	1c5a      	adds	r2, r3, #1
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	7858      	ldrb	r0, [r3, #1]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad7e:	2301      	movs	r3, #1
 800ad80:	f7ff fc8e 	bl	800a6a0 <disk_write>
			fs->fsi_flag = 0;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	785b      	ldrb	r3, [r3, #1]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	2100      	movs	r1, #0
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7ff fca4 	bl	800a6e0 <disk_ioctl>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d001      	beq.n	800ada2 <sync_fs+0xca>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ada2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3710      	adds	r7, #16
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	41615252 	.word	0x41615252
 800adb0:	61417272 	.word	0x61417272

0800adb4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	3b02      	subs	r3, #2
 800adc2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	699b      	ldr	r3, [r3, #24]
 800adc8:	3b02      	subs	r3, #2
 800adca:	683a      	ldr	r2, [r7, #0]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d301      	bcc.n	800add4 <clust2sect+0x20>
 800add0:	2300      	movs	r3, #0
 800add2:	e008      	b.n	800ade6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	895b      	ldrh	r3, [r3, #10]
 800add8:	461a      	mov	r2, r3
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	fb03 f202 	mul.w	r2, r3, r2
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade4:	4413      	add	r3, r2
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	370c      	adds	r7, #12
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr

0800adf2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b086      	sub	sp, #24
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
 800adfa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d904      	bls.n	800ae12 <get_fat+0x20>
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	699b      	ldr	r3, [r3, #24]
 800ae0c:	683a      	ldr	r2, [r7, #0]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d302      	bcc.n	800ae18 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ae12:	2301      	movs	r3, #1
 800ae14:	617b      	str	r3, [r7, #20]
 800ae16:	e08f      	b.n	800af38 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ae18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae1c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	2b03      	cmp	r3, #3
 800ae24:	d062      	beq.n	800aeec <get_fat+0xfa>
 800ae26:	2b03      	cmp	r3, #3
 800ae28:	dc7c      	bgt.n	800af24 <get_fat+0x132>
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d002      	beq.n	800ae34 <get_fat+0x42>
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d042      	beq.n	800aeb8 <get_fat+0xc6>
 800ae32:	e077      	b.n	800af24 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	60fb      	str	r3, [r7, #12]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	085b      	lsrs	r3, r3, #1
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	4413      	add	r3, r2
 800ae40:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	0a5b      	lsrs	r3, r3, #9
 800ae4a:	4413      	add	r3, r2
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	6938      	ldr	r0, [r7, #16]
 800ae50:	f7ff ff14 	bl	800ac7c <move_window>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d167      	bne.n	800af2a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	1c5a      	adds	r2, r3, #1
 800ae5e:	60fa      	str	r2, [r7, #12]
 800ae60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae64:	693a      	ldr	r2, [r7, #16]
 800ae66:	4413      	add	r3, r2
 800ae68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ae6c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	0a5b      	lsrs	r3, r3, #9
 800ae76:	4413      	add	r3, r2
 800ae78:	4619      	mov	r1, r3
 800ae7a:	6938      	ldr	r0, [r7, #16]
 800ae7c:	f7ff fefe 	bl	800ac7c <move_window>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d153      	bne.n	800af2e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	4413      	add	r3, r2
 800ae90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ae94:	021b      	lsls	r3, r3, #8
 800ae96:	461a      	mov	r2, r3
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	f003 0301 	and.w	r3, r3, #1
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d002      	beq.n	800aeae <get_fat+0xbc>
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	091b      	lsrs	r3, r3, #4
 800aeac:	e002      	b.n	800aeb4 <get_fat+0xc2>
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aeb4:	617b      	str	r3, [r7, #20]
			break;
 800aeb6:	e03f      	b.n	800af38 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	0a1b      	lsrs	r3, r3, #8
 800aec0:	4413      	add	r3, r2
 800aec2:	4619      	mov	r1, r3
 800aec4:	6938      	ldr	r0, [r7, #16]
 800aec6:	f7ff fed9 	bl	800ac7c <move_window>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d130      	bne.n	800af32 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	005b      	lsls	r3, r3, #1
 800aeda:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800aede:	4413      	add	r3, r2
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7ff fc1b 	bl	800a71c <ld_word>
 800aee6:	4603      	mov	r3, r0
 800aee8:	617b      	str	r3, [r7, #20]
			break;
 800aeea:	e025      	b.n	800af38 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	09db      	lsrs	r3, r3, #7
 800aef4:	4413      	add	r3, r2
 800aef6:	4619      	mov	r1, r3
 800aef8:	6938      	ldr	r0, [r7, #16]
 800aefa:	f7ff febf 	bl	800ac7c <move_window>
 800aefe:	4603      	mov	r3, r0
 800af00:	2b00      	cmp	r3, #0
 800af02:	d118      	bne.n	800af36 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800af12:	4413      	add	r3, r2
 800af14:	4618      	mov	r0, r3
 800af16:	f7ff fc19 	bl	800a74c <ld_dword>
 800af1a:	4603      	mov	r3, r0
 800af1c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800af20:	617b      	str	r3, [r7, #20]
			break;
 800af22:	e009      	b.n	800af38 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800af24:	2301      	movs	r3, #1
 800af26:	617b      	str	r3, [r7, #20]
 800af28:	e006      	b.n	800af38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800af2a:	bf00      	nop
 800af2c:	e004      	b.n	800af38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800af2e:	bf00      	nop
 800af30:	e002      	b.n	800af38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800af32:	bf00      	nop
 800af34:	e000      	b.n	800af38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800af36:	bf00      	nop
		}
	}

	return val;
 800af38:	697b      	ldr	r3, [r7, #20]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3718      	adds	r7, #24
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800af42:	b590      	push	{r4, r7, lr}
 800af44:	b089      	sub	sp, #36	; 0x24
 800af46:	af00      	add	r7, sp, #0
 800af48:	60f8      	str	r0, [r7, #12]
 800af4a:	60b9      	str	r1, [r7, #8]
 800af4c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800af4e:	2302      	movs	r3, #2
 800af50:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	2b01      	cmp	r3, #1
 800af56:	f240 80d2 	bls.w	800b0fe <put_fat+0x1bc>
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	699b      	ldr	r3, [r3, #24]
 800af5e:	68ba      	ldr	r2, [r7, #8]
 800af60:	429a      	cmp	r2, r3
 800af62:	f080 80cc 	bcs.w	800b0fe <put_fat+0x1bc>
		switch (fs->fs_type) {
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	2b03      	cmp	r3, #3
 800af6c:	f000 8096 	beq.w	800b09c <put_fat+0x15a>
 800af70:	2b03      	cmp	r3, #3
 800af72:	f300 80cd 	bgt.w	800b110 <put_fat+0x1ce>
 800af76:	2b01      	cmp	r3, #1
 800af78:	d002      	beq.n	800af80 <put_fat+0x3e>
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	d06e      	beq.n	800b05c <put_fat+0x11a>
 800af7e:	e0c7      	b.n	800b110 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	61bb      	str	r3, [r7, #24]
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	085b      	lsrs	r3, r3, #1
 800af88:	69ba      	ldr	r2, [r7, #24]
 800af8a:	4413      	add	r3, r2
 800af8c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	0a5b      	lsrs	r3, r3, #9
 800af96:	4413      	add	r3, r2
 800af98:	4619      	mov	r1, r3
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f7ff fe6e 	bl	800ac7c <move_window>
 800afa0:	4603      	mov	r3, r0
 800afa2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800afa4:	7ffb      	ldrb	r3, [r7, #31]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f040 80ab 	bne.w	800b102 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	1c59      	adds	r1, r3, #1
 800afb6:	61b9      	str	r1, [r7, #24]
 800afb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afbc:	4413      	add	r3, r2
 800afbe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	f003 0301 	and.w	r3, r3, #1
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00d      	beq.n	800afe6 <put_fat+0xa4>
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	b25b      	sxtb	r3, r3
 800afd0:	f003 030f 	and.w	r3, r3, #15
 800afd4:	b25a      	sxtb	r2, r3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	011b      	lsls	r3, r3, #4
 800afdc:	b25b      	sxtb	r3, r3
 800afde:	4313      	orrs	r3, r2
 800afe0:	b25b      	sxtb	r3, r3
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	e001      	b.n	800afea <put_fat+0xa8>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	697a      	ldr	r2, [r7, #20]
 800afec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2201      	movs	r2, #1
 800aff2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	0a5b      	lsrs	r3, r3, #9
 800affc:	4413      	add	r3, r2
 800affe:	4619      	mov	r1, r3
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f7ff fe3b 	bl	800ac7c <move_window>
 800b006:	4603      	mov	r3, r0
 800b008:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b00a:	7ffb      	ldrb	r3, [r7, #31]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d17a      	bne.n	800b106 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b01c:	4413      	add	r3, r2
 800b01e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	f003 0301 	and.w	r3, r3, #1
 800b026:	2b00      	cmp	r3, #0
 800b028:	d003      	beq.n	800b032 <put_fat+0xf0>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	091b      	lsrs	r3, r3, #4
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	e00e      	b.n	800b050 <put_fat+0x10e>
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	b25b      	sxtb	r3, r3
 800b038:	f023 030f 	bic.w	r3, r3, #15
 800b03c:	b25a      	sxtb	r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	0a1b      	lsrs	r3, r3, #8
 800b042:	b25b      	sxtb	r3, r3
 800b044:	f003 030f 	and.w	r3, r3, #15
 800b048:	b25b      	sxtb	r3, r3
 800b04a:	4313      	orrs	r3, r2
 800b04c:	b25b      	sxtb	r3, r3
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	697a      	ldr	r2, [r7, #20]
 800b052:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2201      	movs	r2, #1
 800b058:	70da      	strb	r2, [r3, #3]
			break;
 800b05a:	e059      	b.n	800b110 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	0a1b      	lsrs	r3, r3, #8
 800b064:	4413      	add	r3, r2
 800b066:	4619      	mov	r1, r3
 800b068:	68f8      	ldr	r0, [r7, #12]
 800b06a:	f7ff fe07 	bl	800ac7c <move_window>
 800b06e:	4603      	mov	r3, r0
 800b070:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b072:	7ffb      	ldrb	r3, [r7, #31]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d148      	bne.n	800b10a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	005b      	lsls	r3, r3, #1
 800b082:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b086:	4413      	add	r3, r2
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	b292      	uxth	r2, r2
 800b08c:	4611      	mov	r1, r2
 800b08e:	4618      	mov	r0, r3
 800b090:	f7ff fb7f 	bl	800a792 <st_word>
			fs->wflag = 1;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2201      	movs	r2, #1
 800b098:	70da      	strb	r2, [r3, #3]
			break;
 800b09a:	e039      	b.n	800b110 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	09db      	lsrs	r3, r3, #7
 800b0a4:	4413      	add	r3, r2
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	68f8      	ldr	r0, [r7, #12]
 800b0aa:	f7ff fde7 	bl	800ac7c <move_window>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b0b2:	7ffb      	ldrb	r3, [r7, #31]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d12a      	bne.n	800b10e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b0cc:	4413      	add	r3, r2
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7ff fb3c 	bl	800a74c <ld_dword>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b0da:	4323      	orrs	r3, r4
 800b0dc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b0ec:	4413      	add	r3, r2
 800b0ee:	6879      	ldr	r1, [r7, #4]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7ff fb69 	bl	800a7c8 <st_dword>
			fs->wflag = 1;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	70da      	strb	r2, [r3, #3]
			break;
 800b0fc:	e008      	b.n	800b110 <put_fat+0x1ce>
		}
	}
 800b0fe:	bf00      	nop
 800b100:	e006      	b.n	800b110 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b102:	bf00      	nop
 800b104:	e004      	b.n	800b110 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b106:	bf00      	nop
 800b108:	e002      	b.n	800b110 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b10a:	bf00      	nop
 800b10c:	e000      	b.n	800b110 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b10e:	bf00      	nop
	return res;
 800b110:	7ffb      	ldrb	r3, [r7, #31]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3724      	adds	r7, #36	; 0x24
 800b116:	46bd      	mov	sp, r7
 800b118:	bd90      	pop	{r4, r7, pc}

0800b11a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b088      	sub	sp, #32
 800b11e:	af00      	add	r7, sp, #0
 800b120:	60f8      	str	r0, [r7, #12]
 800b122:	60b9      	str	r1, [r7, #8]
 800b124:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b126:	2300      	movs	r3, #0
 800b128:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	2b01      	cmp	r3, #1
 800b134:	d904      	bls.n	800b140 <remove_chain+0x26>
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	699b      	ldr	r3, [r3, #24]
 800b13a:	68ba      	ldr	r2, [r7, #8]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d301      	bcc.n	800b144 <remove_chain+0x2a>
 800b140:	2302      	movs	r3, #2
 800b142:	e04b      	b.n	800b1dc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d00c      	beq.n	800b164 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b14a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b14e:	6879      	ldr	r1, [r7, #4]
 800b150:	69b8      	ldr	r0, [r7, #24]
 800b152:	f7ff fef6 	bl	800af42 <put_fat>
 800b156:	4603      	mov	r3, r0
 800b158:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b15a:	7ffb      	ldrb	r3, [r7, #31]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d001      	beq.n	800b164 <remove_chain+0x4a>
 800b160:	7ffb      	ldrb	r3, [r7, #31]
 800b162:	e03b      	b.n	800b1dc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b164:	68b9      	ldr	r1, [r7, #8]
 800b166:	68f8      	ldr	r0, [r7, #12]
 800b168:	f7ff fe43 	bl	800adf2 <get_fat>
 800b16c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d031      	beq.n	800b1d8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	2b01      	cmp	r3, #1
 800b178:	d101      	bne.n	800b17e <remove_chain+0x64>
 800b17a:	2302      	movs	r3, #2
 800b17c:	e02e      	b.n	800b1dc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b184:	d101      	bne.n	800b18a <remove_chain+0x70>
 800b186:	2301      	movs	r3, #1
 800b188:	e028      	b.n	800b1dc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b18a:	2200      	movs	r2, #0
 800b18c:	68b9      	ldr	r1, [r7, #8]
 800b18e:	69b8      	ldr	r0, [r7, #24]
 800b190:	f7ff fed7 	bl	800af42 <put_fat>
 800b194:	4603      	mov	r3, r0
 800b196:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b198:	7ffb      	ldrb	r3, [r7, #31]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d001      	beq.n	800b1a2 <remove_chain+0x88>
 800b19e:	7ffb      	ldrb	r3, [r7, #31]
 800b1a0:	e01c      	b.n	800b1dc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b1a2:	69bb      	ldr	r3, [r7, #24]
 800b1a4:	695a      	ldr	r2, [r3, #20]
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	699b      	ldr	r3, [r3, #24]
 800b1aa:	3b02      	subs	r3, #2
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d20b      	bcs.n	800b1c8 <remove_chain+0xae>
			fs->free_clst++;
 800b1b0:	69bb      	ldr	r3, [r7, #24]
 800b1b2:	695b      	ldr	r3, [r3, #20]
 800b1b4:	1c5a      	adds	r2, r3, #1
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	791b      	ldrb	r3, [r3, #4]
 800b1be:	f043 0301 	orr.w	r3, r3, #1
 800b1c2:	b2da      	uxtb	r2, r3
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	699b      	ldr	r3, [r3, #24]
 800b1d0:	68ba      	ldr	r2, [r7, #8]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d3c6      	bcc.n	800b164 <remove_chain+0x4a>
 800b1d6:	e000      	b.n	800b1da <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b1d8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b1da:	2300      	movs	r3, #0
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3720      	adds	r7, #32
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b088      	sub	sp, #32
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d10d      	bne.n	800b216 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d004      	beq.n	800b210 <create_chain+0x2c>
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	699b      	ldr	r3, [r3, #24]
 800b20a:	69ba      	ldr	r2, [r7, #24]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d31b      	bcc.n	800b248 <create_chain+0x64>
 800b210:	2301      	movs	r3, #1
 800b212:	61bb      	str	r3, [r7, #24]
 800b214:	e018      	b.n	800b248 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b216:	6839      	ldr	r1, [r7, #0]
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f7ff fdea 	bl	800adf2 <get_fat>
 800b21e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2b01      	cmp	r3, #1
 800b224:	d801      	bhi.n	800b22a <create_chain+0x46>
 800b226:	2301      	movs	r3, #1
 800b228:	e070      	b.n	800b30c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b230:	d101      	bne.n	800b236 <create_chain+0x52>
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	e06a      	b.n	800b30c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	699b      	ldr	r3, [r3, #24]
 800b23a:	68fa      	ldr	r2, [r7, #12]
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d201      	bcs.n	800b244 <create_chain+0x60>
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	e063      	b.n	800b30c <create_chain+0x128>
		scl = clst;
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b248:	69bb      	ldr	r3, [r7, #24]
 800b24a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	3301      	adds	r3, #1
 800b250:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	699b      	ldr	r3, [r3, #24]
 800b256:	69fa      	ldr	r2, [r7, #28]
 800b258:	429a      	cmp	r2, r3
 800b25a:	d307      	bcc.n	800b26c <create_chain+0x88>
				ncl = 2;
 800b25c:	2302      	movs	r3, #2
 800b25e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b260:	69fa      	ldr	r2, [r7, #28]
 800b262:	69bb      	ldr	r3, [r7, #24]
 800b264:	429a      	cmp	r2, r3
 800b266:	d901      	bls.n	800b26c <create_chain+0x88>
 800b268:	2300      	movs	r3, #0
 800b26a:	e04f      	b.n	800b30c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b26c:	69f9      	ldr	r1, [r7, #28]
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f7ff fdbf 	bl	800adf2 <get_fat>
 800b274:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00e      	beq.n	800b29a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d003      	beq.n	800b28a <create_chain+0xa6>
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b288:	d101      	bne.n	800b28e <create_chain+0xaa>
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	e03e      	b.n	800b30c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b28e:	69fa      	ldr	r2, [r7, #28]
 800b290:	69bb      	ldr	r3, [r7, #24]
 800b292:	429a      	cmp	r2, r3
 800b294:	d1da      	bne.n	800b24c <create_chain+0x68>
 800b296:	2300      	movs	r3, #0
 800b298:	e038      	b.n	800b30c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b29a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b29c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2a0:	69f9      	ldr	r1, [r7, #28]
 800b2a2:	6938      	ldr	r0, [r7, #16]
 800b2a4:	f7ff fe4d 	bl	800af42 <put_fat>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b2ac:	7dfb      	ldrb	r3, [r7, #23]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d109      	bne.n	800b2c6 <create_chain+0xe2>
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d006      	beq.n	800b2c6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b2b8:	69fa      	ldr	r2, [r7, #28]
 800b2ba:	6839      	ldr	r1, [r7, #0]
 800b2bc:	6938      	ldr	r0, [r7, #16]
 800b2be:	f7ff fe40 	bl	800af42 <put_fat>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b2c6:	7dfb      	ldrb	r3, [r7, #23]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d116      	bne.n	800b2fa <create_chain+0x116>
		fs->last_clst = ncl;
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	69fa      	ldr	r2, [r7, #28]
 800b2d0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	695a      	ldr	r2, [r3, #20]
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	699b      	ldr	r3, [r3, #24]
 800b2da:	3b02      	subs	r3, #2
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d804      	bhi.n	800b2ea <create_chain+0x106>
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	695b      	ldr	r3, [r3, #20]
 800b2e4:	1e5a      	subs	r2, r3, #1
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	791b      	ldrb	r3, [r3, #4]
 800b2ee:	f043 0301 	orr.w	r3, r3, #1
 800b2f2:	b2da      	uxtb	r2, r3
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	711a      	strb	r2, [r3, #4]
 800b2f8:	e007      	b.n	800b30a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b2fa:	7dfb      	ldrb	r3, [r7, #23]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d102      	bne.n	800b306 <create_chain+0x122>
 800b300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b304:	e000      	b.n	800b308 <create_chain+0x124>
 800b306:	2301      	movs	r3, #1
 800b308:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b30a:	69fb      	ldr	r3, [r7, #28]
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3720      	adds	r7, #32
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b086      	sub	sp, #24
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b32a:	d204      	bcs.n	800b336 <dir_sdi+0x22>
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	f003 031f 	and.w	r3, r3, #31
 800b332:	2b00      	cmp	r3, #0
 800b334:	d001      	beq.n	800b33a <dir_sdi+0x26>
		return FR_INT_ERR;
 800b336:	2302      	movs	r3, #2
 800b338:	e063      	b.n	800b402 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	683a      	ldr	r2, [r7, #0]
 800b33e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d106      	bne.n	800b35a <dir_sdi+0x46>
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	2b02      	cmp	r3, #2
 800b352:	d902      	bls.n	800b35a <dir_sdi+0x46>
		clst = fs->dirbase;
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b358:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d10c      	bne.n	800b37a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	095b      	lsrs	r3, r3, #5
 800b364:	693a      	ldr	r2, [r7, #16]
 800b366:	8912      	ldrh	r2, [r2, #8]
 800b368:	4293      	cmp	r3, r2
 800b36a:	d301      	bcc.n	800b370 <dir_sdi+0x5c>
 800b36c:	2302      	movs	r3, #2
 800b36e:	e048      	b.n	800b402 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	61da      	str	r2, [r3, #28]
 800b378:	e029      	b.n	800b3ce <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	895b      	ldrh	r3, [r3, #10]
 800b37e:	025b      	lsls	r3, r3, #9
 800b380:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b382:	e019      	b.n	800b3b8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6979      	ldr	r1, [r7, #20]
 800b388:	4618      	mov	r0, r3
 800b38a:	f7ff fd32 	bl	800adf2 <get_fat>
 800b38e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b396:	d101      	bne.n	800b39c <dir_sdi+0x88>
 800b398:	2301      	movs	r3, #1
 800b39a:	e032      	b.n	800b402 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d904      	bls.n	800b3ac <dir_sdi+0x98>
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	699b      	ldr	r3, [r3, #24]
 800b3a6:	697a      	ldr	r2, [r7, #20]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d301      	bcc.n	800b3b0 <dir_sdi+0x9c>
 800b3ac:	2302      	movs	r3, #2
 800b3ae:	e028      	b.n	800b402 <dir_sdi+0xee>
			ofs -= csz;
 800b3b0:	683a      	ldr	r2, [r7, #0]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	1ad3      	subs	r3, r2, r3
 800b3b6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b3b8:	683a      	ldr	r2, [r7, #0]
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d2e1      	bcs.n	800b384 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b3c0:	6979      	ldr	r1, [r7, #20]
 800b3c2:	6938      	ldr	r0, [r7, #16]
 800b3c4:	f7ff fcf6 	bl	800adb4 <clust2sect>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	697a      	ldr	r2, [r7, #20]
 800b3d2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	69db      	ldr	r3, [r3, #28]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d101      	bne.n	800b3e0 <dir_sdi+0xcc>
 800b3dc:	2302      	movs	r3, #2
 800b3de:	e010      	b.n	800b402 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	69da      	ldr	r2, [r3, #28]
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	0a5b      	lsrs	r3, r3, #9
 800b3e8:	441a      	add	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3fa:	441a      	add	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b400:	2300      	movs	r3, #0
}
 800b402:	4618      	mov	r0, r3
 800b404:	3718      	adds	r7, #24
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b086      	sub	sp, #24
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
 800b412:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	695b      	ldr	r3, [r3, #20]
 800b41e:	3320      	adds	r3, #32
 800b420:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	69db      	ldr	r3, [r3, #28]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d003      	beq.n	800b432 <dir_next+0x28>
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b430:	d301      	bcc.n	800b436 <dir_next+0x2c>
 800b432:	2304      	movs	r3, #4
 800b434:	e0aa      	b.n	800b58c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f040 8098 	bne.w	800b572 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	69db      	ldr	r3, [r3, #28]
 800b446:	1c5a      	adds	r2, r3, #1
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	699b      	ldr	r3, [r3, #24]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d10b      	bne.n	800b46c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	095b      	lsrs	r3, r3, #5
 800b458:	68fa      	ldr	r2, [r7, #12]
 800b45a:	8912      	ldrh	r2, [r2, #8]
 800b45c:	4293      	cmp	r3, r2
 800b45e:	f0c0 8088 	bcc.w	800b572 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	61da      	str	r2, [r3, #28]
 800b468:	2304      	movs	r3, #4
 800b46a:	e08f      	b.n	800b58c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	0a5b      	lsrs	r3, r3, #9
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	8952      	ldrh	r2, [r2, #10]
 800b474:	3a01      	subs	r2, #1
 800b476:	4013      	ands	r3, r2
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d17a      	bne.n	800b572 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	699b      	ldr	r3, [r3, #24]
 800b482:	4619      	mov	r1, r3
 800b484:	4610      	mov	r0, r2
 800b486:	f7ff fcb4 	bl	800adf2 <get_fat>
 800b48a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d801      	bhi.n	800b496 <dir_next+0x8c>
 800b492:	2302      	movs	r3, #2
 800b494:	e07a      	b.n	800b58c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b49c:	d101      	bne.n	800b4a2 <dir_next+0x98>
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e074      	b.n	800b58c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	699b      	ldr	r3, [r3, #24]
 800b4a6:	697a      	ldr	r2, [r7, #20]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d358      	bcc.n	800b55e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d104      	bne.n	800b4bc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	61da      	str	r2, [r3, #28]
 800b4b8:	2304      	movs	r3, #4
 800b4ba:	e067      	b.n	800b58c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	699b      	ldr	r3, [r3, #24]
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	4610      	mov	r0, r2
 800b4c6:	f7ff fe8d 	bl	800b1e4 <create_chain>
 800b4ca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d101      	bne.n	800b4d6 <dir_next+0xcc>
 800b4d2:	2307      	movs	r3, #7
 800b4d4:	e05a      	b.n	800b58c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d101      	bne.n	800b4e0 <dir_next+0xd6>
 800b4dc:	2302      	movs	r3, #2
 800b4de:	e055      	b.n	800b58c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4e6:	d101      	bne.n	800b4ec <dir_next+0xe2>
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e04f      	b.n	800b58c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b4ec:	68f8      	ldr	r0, [r7, #12]
 800b4ee:	f7ff fb81 	bl	800abf4 <sync_window>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d001      	beq.n	800b4fc <dir_next+0xf2>
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e047      	b.n	800b58c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	3334      	adds	r3, #52	; 0x34
 800b500:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b504:	2100      	movs	r1, #0
 800b506:	4618      	mov	r0, r3
 800b508:	f7ff f9ab 	bl	800a862 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b50c:	2300      	movs	r3, #0
 800b50e:	613b      	str	r3, [r7, #16]
 800b510:	6979      	ldr	r1, [r7, #20]
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	f7ff fc4e 	bl	800adb4 <clust2sect>
 800b518:	4602      	mov	r2, r0
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	631a      	str	r2, [r3, #48]	; 0x30
 800b51e:	e012      	b.n	800b546 <dir_next+0x13c>
						fs->wflag = 1;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2201      	movs	r2, #1
 800b524:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f7ff fb64 	bl	800abf4 <sync_window>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d001      	beq.n	800b536 <dir_next+0x12c>
 800b532:	2301      	movs	r3, #1
 800b534:	e02a      	b.n	800b58c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	3301      	adds	r3, #1
 800b53a:	613b      	str	r3, [r7, #16]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b540:	1c5a      	adds	r2, r3, #1
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	631a      	str	r2, [r3, #48]	; 0x30
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	895b      	ldrh	r3, [r3, #10]
 800b54a:	461a      	mov	r2, r3
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	4293      	cmp	r3, r2
 800b550:	d3e6      	bcc.n	800b520 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	1ad2      	subs	r2, r2, r3
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	697a      	ldr	r2, [r7, #20]
 800b562:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b564:	6979      	ldr	r1, [r7, #20]
 800b566:	68f8      	ldr	r0, [r7, #12]
 800b568:	f7ff fc24 	bl	800adb4 <clust2sect>
 800b56c:	4602      	mov	r2, r0
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b584:	441a      	add	r2, r3
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b58a:	2300      	movs	r3, #0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3718      	adds	r7, #24
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b086      	sub	sp, #24
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b5a4:	2100      	movs	r1, #0
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f7ff feb4 	bl	800b314 <dir_sdi>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b5b0:	7dfb      	ldrb	r3, [r7, #23]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d12b      	bne.n	800b60e <dir_alloc+0x7a>
		n = 0;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	69db      	ldr	r3, [r3, #28]
 800b5be:	4619      	mov	r1, r3
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	f7ff fb5b 	bl	800ac7c <move_window>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b5ca:	7dfb      	ldrb	r3, [r7, #23]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d11d      	bne.n	800b60c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6a1b      	ldr	r3, [r3, #32]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	2be5      	cmp	r3, #229	; 0xe5
 800b5d8:	d004      	beq.n	800b5e4 <dir_alloc+0x50>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6a1b      	ldr	r3, [r3, #32]
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d107      	bne.n	800b5f4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	613b      	str	r3, [r7, #16]
 800b5ea:	693a      	ldr	r2, [r7, #16]
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d102      	bne.n	800b5f8 <dir_alloc+0x64>
 800b5f2:	e00c      	b.n	800b60e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b5f8:	2101      	movs	r1, #1
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f7ff ff05 	bl	800b40a <dir_next>
 800b600:	4603      	mov	r3, r0
 800b602:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b604:	7dfb      	ldrb	r3, [r7, #23]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d0d7      	beq.n	800b5ba <dir_alloc+0x26>
 800b60a:	e000      	b.n	800b60e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b60c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b60e:	7dfb      	ldrb	r3, [r7, #23]
 800b610:	2b04      	cmp	r3, #4
 800b612:	d101      	bne.n	800b618 <dir_alloc+0x84>
 800b614:	2307      	movs	r3, #7
 800b616:	75fb      	strb	r3, [r7, #23]
	return res;
 800b618:	7dfb      	ldrb	r3, [r7, #23]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3718      	adds	r7, #24
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b084      	sub	sp, #16
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
 800b62a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	331a      	adds	r3, #26
 800b630:	4618      	mov	r0, r3
 800b632:	f7ff f873 	bl	800a71c <ld_word>
 800b636:	4603      	mov	r3, r0
 800b638:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	2b03      	cmp	r3, #3
 800b640:	d109      	bne.n	800b656 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	3314      	adds	r3, #20
 800b646:	4618      	mov	r0, r3
 800b648:	f7ff f868 	bl	800a71c <ld_word>
 800b64c:	4603      	mov	r3, r0
 800b64e:	041b      	lsls	r3, r3, #16
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	4313      	orrs	r3, r2
 800b654:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b656:	68fb      	ldr	r3, [r7, #12]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	331a      	adds	r3, #26
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	b292      	uxth	r2, r2
 800b674:	4611      	mov	r1, r2
 800b676:	4618      	mov	r0, r3
 800b678:	f7ff f88b 	bl	800a792 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	2b03      	cmp	r3, #3
 800b682:	d109      	bne.n	800b698 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	f103 0214 	add.w	r2, r3, #20
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	0c1b      	lsrs	r3, r3, #16
 800b68e:	b29b      	uxth	r3, r3
 800b690:	4619      	mov	r1, r3
 800b692:	4610      	mov	r0, r2
 800b694:	f7ff f87d 	bl	800a792 <st_word>
	}
}
 800b698:	bf00      	nop
 800b69a:	3710      	adds	r7, #16
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b6a0:	b590      	push	{r4, r7, lr}
 800b6a2:	b087      	sub	sp, #28
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	331a      	adds	r3, #26
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7ff f834 	bl	800a71c <ld_word>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d001      	beq.n	800b6be <cmp_lfn+0x1e>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	e059      	b.n	800b772 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6c6:	1e5a      	subs	r2, r3, #1
 800b6c8:	4613      	mov	r3, r2
 800b6ca:	005b      	lsls	r3, r3, #1
 800b6cc:	4413      	add	r3, r2
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	4413      	add	r3, r2
 800b6d2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	81fb      	strh	r3, [r7, #14]
 800b6d8:	2300      	movs	r3, #0
 800b6da:	613b      	str	r3, [r7, #16]
 800b6dc:	e033      	b.n	800b746 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b6de:	4a27      	ldr	r2, [pc, #156]	; (800b77c <cmp_lfn+0xdc>)
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	4413      	add	r3, r2
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	4413      	add	r3, r2
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7ff f815 	bl	800a71c <ld_word>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b6f6:	89fb      	ldrh	r3, [r7, #14]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d01a      	beq.n	800b732 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	2bfe      	cmp	r3, #254	; 0xfe
 800b700:	d812      	bhi.n	800b728 <cmp_lfn+0x88>
 800b702:	89bb      	ldrh	r3, [r7, #12]
 800b704:	4618      	mov	r0, r3
 800b706:	f002 f86f 	bl	800d7e8 <ff_wtoupper>
 800b70a:	4603      	mov	r3, r0
 800b70c:	461c      	mov	r4, r3
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	1c5a      	adds	r2, r3, #1
 800b712:	617a      	str	r2, [r7, #20]
 800b714:	005b      	lsls	r3, r3, #1
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	4413      	add	r3, r2
 800b71a:	881b      	ldrh	r3, [r3, #0]
 800b71c:	4618      	mov	r0, r3
 800b71e:	f002 f863 	bl	800d7e8 <ff_wtoupper>
 800b722:	4603      	mov	r3, r0
 800b724:	429c      	cmp	r4, r3
 800b726:	d001      	beq.n	800b72c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b728:	2300      	movs	r3, #0
 800b72a:	e022      	b.n	800b772 <cmp_lfn+0xd2>
			}
			wc = uc;
 800b72c:	89bb      	ldrh	r3, [r7, #12]
 800b72e:	81fb      	strh	r3, [r7, #14]
 800b730:	e006      	b.n	800b740 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b732:	89bb      	ldrh	r3, [r7, #12]
 800b734:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b738:	4293      	cmp	r3, r2
 800b73a:	d001      	beq.n	800b740 <cmp_lfn+0xa0>
 800b73c:	2300      	movs	r3, #0
 800b73e:	e018      	b.n	800b772 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	3301      	adds	r3, #1
 800b744:	613b      	str	r3, [r7, #16]
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	2b0c      	cmp	r3, #12
 800b74a:	d9c8      	bls.n	800b6de <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b754:	2b00      	cmp	r3, #0
 800b756:	d00b      	beq.n	800b770 <cmp_lfn+0xd0>
 800b758:	89fb      	ldrh	r3, [r7, #14]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d008      	beq.n	800b770 <cmp_lfn+0xd0>
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	005b      	lsls	r3, r3, #1
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	4413      	add	r3, r2
 800b766:	881b      	ldrh	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d001      	beq.n	800b770 <cmp_lfn+0xd0>
 800b76c:	2300      	movs	r3, #0
 800b76e:	e000      	b.n	800b772 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b770:	2301      	movs	r3, #1
}
 800b772:	4618      	mov	r0, r3
 800b774:	371c      	adds	r7, #28
 800b776:	46bd      	mov	sp, r7
 800b778:	bd90      	pop	{r4, r7, pc}
 800b77a:	bf00      	nop
 800b77c:	0800da64 	.word	0x0800da64

0800b780 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b086      	sub	sp, #24
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	331a      	adds	r3, #26
 800b78e:	4618      	mov	r0, r3
 800b790:	f7fe ffc4 	bl	800a71c <ld_word>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d001      	beq.n	800b79e <pick_lfn+0x1e>
 800b79a:	2300      	movs	r3, #0
 800b79c:	e04d      	b.n	800b83a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7a6:	1e5a      	subs	r2, r3, #1
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	005b      	lsls	r3, r3, #1
 800b7ac:	4413      	add	r3, r2
 800b7ae:	009b      	lsls	r3, r3, #2
 800b7b0:	4413      	add	r3, r2
 800b7b2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	81fb      	strh	r3, [r7, #14]
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	613b      	str	r3, [r7, #16]
 800b7bc:	e028      	b.n	800b810 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b7be:	4a21      	ldr	r2, [pc, #132]	; (800b844 <pick_lfn+0xc4>)
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7fe ffa5 	bl	800a71c <ld_word>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b7d6:	89fb      	ldrh	r3, [r7, #14]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d00f      	beq.n	800b7fc <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	2bfe      	cmp	r3, #254	; 0xfe
 800b7e0:	d901      	bls.n	800b7e6 <pick_lfn+0x66>
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	e029      	b.n	800b83a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b7e6:	89bb      	ldrh	r3, [r7, #12]
 800b7e8:	81fb      	strh	r3, [r7, #14]
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	1c5a      	adds	r2, r3, #1
 800b7ee:	617a      	str	r2, [r7, #20]
 800b7f0:	005b      	lsls	r3, r3, #1
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	4413      	add	r3, r2
 800b7f6:	89fa      	ldrh	r2, [r7, #14]
 800b7f8:	801a      	strh	r2, [r3, #0]
 800b7fa:	e006      	b.n	800b80a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b7fc:	89bb      	ldrh	r3, [r7, #12]
 800b7fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b802:	4293      	cmp	r3, r2
 800b804:	d001      	beq.n	800b80a <pick_lfn+0x8a>
 800b806:	2300      	movs	r3, #0
 800b808:	e017      	b.n	800b83a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	3301      	adds	r3, #1
 800b80e:	613b      	str	r3, [r7, #16]
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	2b0c      	cmp	r3, #12
 800b814:	d9d3      	bls.n	800b7be <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d00a      	beq.n	800b838 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	2bfe      	cmp	r3, #254	; 0xfe
 800b826:	d901      	bls.n	800b82c <pick_lfn+0xac>
 800b828:	2300      	movs	r3, #0
 800b82a:	e006      	b.n	800b83a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	005b      	lsls	r3, r3, #1
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	4413      	add	r3, r2
 800b834:	2200      	movs	r2, #0
 800b836:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b838:	2301      	movs	r3, #1
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3718      	adds	r7, #24
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	0800da64 	.word	0x0800da64

0800b848 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b088      	sub	sp, #32
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	4611      	mov	r1, r2
 800b854:	461a      	mov	r2, r3
 800b856:	460b      	mov	r3, r1
 800b858:	71fb      	strb	r3, [r7, #7]
 800b85a:	4613      	mov	r3, r2
 800b85c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	330d      	adds	r3, #13
 800b862:	79ba      	ldrb	r2, [r7, #6]
 800b864:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	330b      	adds	r3, #11
 800b86a:	220f      	movs	r2, #15
 800b86c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	330c      	adds	r3, #12
 800b872:	2200      	movs	r2, #0
 800b874:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	331a      	adds	r3, #26
 800b87a:	2100      	movs	r1, #0
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7fe ff88 	bl	800a792 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b882:	79fb      	ldrb	r3, [r7, #7]
 800b884:	1e5a      	subs	r2, r3, #1
 800b886:	4613      	mov	r3, r2
 800b888:	005b      	lsls	r3, r3, #1
 800b88a:	4413      	add	r3, r2
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	4413      	add	r3, r2
 800b890:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b892:	2300      	movs	r3, #0
 800b894:	82fb      	strh	r3, [r7, #22]
 800b896:	2300      	movs	r3, #0
 800b898:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b89a:	8afb      	ldrh	r3, [r7, #22]
 800b89c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d007      	beq.n	800b8b4 <put_lfn+0x6c>
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	1c5a      	adds	r2, r3, #1
 800b8a8:	61fa      	str	r2, [r7, #28]
 800b8aa:	005b      	lsls	r3, r3, #1
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	881b      	ldrh	r3, [r3, #0]
 800b8b2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b8b4:	4a17      	ldr	r2, [pc, #92]	; (800b914 <put_lfn+0xcc>)
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	4413      	add	r3, r2
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	461a      	mov	r2, r3
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	4413      	add	r3, r2
 800b8c2:	8afa      	ldrh	r2, [r7, #22]
 800b8c4:	4611      	mov	r1, r2
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fe ff63 	bl	800a792 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b8cc:	8afb      	ldrh	r3, [r7, #22]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d102      	bne.n	800b8d8 <put_lfn+0x90>
 800b8d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b8d6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	61bb      	str	r3, [r7, #24]
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	2b0c      	cmp	r3, #12
 800b8e2:	d9da      	bls.n	800b89a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b8e4:	8afb      	ldrh	r3, [r7, #22]
 800b8e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d006      	beq.n	800b8fc <put_lfn+0xb4>
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	005b      	lsls	r3, r3, #1
 800b8f2:	68fa      	ldr	r2, [r7, #12]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	881b      	ldrh	r3, [r3, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d103      	bne.n	800b904 <put_lfn+0xbc>
 800b8fc:	79fb      	ldrb	r3, [r7, #7]
 800b8fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b902:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	79fa      	ldrb	r2, [r7, #7]
 800b908:	701a      	strb	r2, [r3, #0]
}
 800b90a:	bf00      	nop
 800b90c:	3720      	adds	r7, #32
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	0800da64 	.word	0x0800da64

0800b918 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b08c      	sub	sp, #48	; 0x30
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
 800b924:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b926:	220b      	movs	r2, #11
 800b928:	68b9      	ldr	r1, [r7, #8]
 800b92a:	68f8      	ldr	r0, [r7, #12]
 800b92c:	f7fe ff78 	bl	800a820 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	2b05      	cmp	r3, #5
 800b934:	d929      	bls.n	800b98a <gen_numname+0x72>
		sr = seq;
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b93a:	e020      	b.n	800b97e <gen_numname+0x66>
			wc = *lfn++;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	1c9a      	adds	r2, r3, #2
 800b940:	607a      	str	r2, [r7, #4]
 800b942:	881b      	ldrh	r3, [r3, #0]
 800b944:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b946:	2300      	movs	r3, #0
 800b948:	62bb      	str	r3, [r7, #40]	; 0x28
 800b94a:	e015      	b.n	800b978 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	005a      	lsls	r2, r3, #1
 800b950:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b952:	f003 0301 	and.w	r3, r3, #1
 800b956:	4413      	add	r3, r2
 800b958:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b95a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b95c:	085b      	lsrs	r3, r3, #1
 800b95e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b966:	2b00      	cmp	r3, #0
 800b968:	d003      	beq.n	800b972 <gen_numname+0x5a>
 800b96a:	69fa      	ldr	r2, [r7, #28]
 800b96c:	4b30      	ldr	r3, [pc, #192]	; (800ba30 <gen_numname+0x118>)
 800b96e:	4053      	eors	r3, r2
 800b970:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b974:	3301      	adds	r3, #1
 800b976:	62bb      	str	r3, [r7, #40]	; 0x28
 800b978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97a:	2b0f      	cmp	r3, #15
 800b97c:	d9e6      	bls.n	800b94c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	881b      	ldrh	r3, [r3, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d1da      	bne.n	800b93c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b98a:	2307      	movs	r3, #7
 800b98c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	b2db      	uxtb	r3, r3
 800b992:	f003 030f 	and.w	r3, r3, #15
 800b996:	b2db      	uxtb	r3, r3
 800b998:	3330      	adds	r3, #48	; 0x30
 800b99a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b99e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9a2:	2b39      	cmp	r3, #57	; 0x39
 800b9a4:	d904      	bls.n	800b9b0 <gen_numname+0x98>
 800b9a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9aa:	3307      	adds	r3, #7
 800b9ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b2:	1e5a      	subs	r2, r3, #1
 800b9b4:	62ba      	str	r2, [r7, #40]	; 0x28
 800b9b6:	3330      	adds	r3, #48	; 0x30
 800b9b8:	443b      	add	r3, r7
 800b9ba:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b9be:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	091b      	lsrs	r3, r3, #4
 800b9c6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d1df      	bne.n	800b98e <gen_numname+0x76>
	ns[i] = '~';
 800b9ce:	f107 0214 	add.w	r2, r7, #20
 800b9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d4:	4413      	add	r3, r2
 800b9d6:	227e      	movs	r2, #126	; 0x7e
 800b9d8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b9da:	2300      	movs	r3, #0
 800b9dc:	627b      	str	r3, [r7, #36]	; 0x24
 800b9de:	e002      	b.n	800b9e6 <gen_numname+0xce>
 800b9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	627b      	str	r3, [r7, #36]	; 0x24
 800b9e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d205      	bcs.n	800b9fa <gen_numname+0xe2>
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f2:	4413      	add	r3, r2
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	2b20      	cmp	r3, #32
 800b9f8:	d1f2      	bne.n	800b9e0 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fc:	2b07      	cmp	r3, #7
 800b9fe:	d807      	bhi.n	800ba10 <gen_numname+0xf8>
 800ba00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba02:	1c5a      	adds	r2, r3, #1
 800ba04:	62ba      	str	r2, [r7, #40]	; 0x28
 800ba06:	3330      	adds	r3, #48	; 0x30
 800ba08:	443b      	add	r3, r7
 800ba0a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ba0e:	e000      	b.n	800ba12 <gen_numname+0xfa>
 800ba10:	2120      	movs	r1, #32
 800ba12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba14:	1c5a      	adds	r2, r3, #1
 800ba16:	627a      	str	r2, [r7, #36]	; 0x24
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	460a      	mov	r2, r1
 800ba1e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ba20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba22:	2b07      	cmp	r3, #7
 800ba24:	d9e9      	bls.n	800b9fa <gen_numname+0xe2>
}
 800ba26:	bf00      	nop
 800ba28:	bf00      	nop
 800ba2a:	3730      	adds	r7, #48	; 0x30
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	00011021 	.word	0x00011021

0800ba34 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ba40:	230b      	movs	r3, #11
 800ba42:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ba44:	7bfb      	ldrb	r3, [r7, #15]
 800ba46:	b2da      	uxtb	r2, r3
 800ba48:	0852      	lsrs	r2, r2, #1
 800ba4a:	01db      	lsls	r3, r3, #7
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	b2da      	uxtb	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	1c59      	adds	r1, r3, #1
 800ba54:	6079      	str	r1, [r7, #4]
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	4413      	add	r3, r2
 800ba5a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	60bb      	str	r3, [r7, #8]
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d1ed      	bne.n	800ba44 <sum_sfn+0x10>
	return sum;
 800ba68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3714      	adds	r7, #20
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b086      	sub	sp, #24
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ba80:	2304      	movs	r3, #4
 800ba82:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800ba8a:	23ff      	movs	r3, #255	; 0xff
 800ba8c:	757b      	strb	r3, [r7, #21]
 800ba8e:	23ff      	movs	r3, #255	; 0xff
 800ba90:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800ba92:	e081      	b.n	800bb98 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	69db      	ldr	r3, [r3, #28]
 800ba98:	4619      	mov	r1, r3
 800ba9a:	6938      	ldr	r0, [r7, #16]
 800ba9c:	f7ff f8ee 	bl	800ac7c <move_window>
 800baa0:	4603      	mov	r3, r0
 800baa2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800baa4:	7dfb      	ldrb	r3, [r7, #23]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d17c      	bne.n	800bba4 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6a1b      	ldr	r3, [r3, #32]
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800bab2:	7dbb      	ldrb	r3, [r7, #22]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d102      	bne.n	800babe <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800bab8:	2304      	movs	r3, #4
 800baba:	75fb      	strb	r3, [r7, #23]
 800babc:	e077      	b.n	800bbae <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6a1b      	ldr	r3, [r3, #32]
 800bac2:	330b      	adds	r3, #11
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800baca:	73fb      	strb	r3, [r7, #15]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	7bfa      	ldrb	r2, [r7, #15]
 800bad0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800bad2:	7dbb      	ldrb	r3, [r7, #22]
 800bad4:	2be5      	cmp	r3, #229	; 0xe5
 800bad6:	d00e      	beq.n	800baf6 <dir_read+0x80>
 800bad8:	7dbb      	ldrb	r3, [r7, #22]
 800bada:	2b2e      	cmp	r3, #46	; 0x2e
 800badc:	d00b      	beq.n	800baf6 <dir_read+0x80>
 800bade:	7bfb      	ldrb	r3, [r7, #15]
 800bae0:	f023 0320 	bic.w	r3, r3, #32
 800bae4:	2b08      	cmp	r3, #8
 800bae6:	bf0c      	ite	eq
 800bae8:	2301      	moveq	r3, #1
 800baea:	2300      	movne	r3, #0
 800baec:	b2db      	uxtb	r3, r3
 800baee:	461a      	mov	r2, r3
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d002      	beq.n	800bafc <dir_read+0x86>
				ord = 0xFF;
 800baf6:	23ff      	movs	r3, #255	; 0xff
 800baf8:	757b      	strb	r3, [r7, #21]
 800bafa:	e044      	b.n	800bb86 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800bafc:	7bfb      	ldrb	r3, [r7, #15]
 800bafe:	2b0f      	cmp	r3, #15
 800bb00:	d12f      	bne.n	800bb62 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800bb02:	7dbb      	ldrb	r3, [r7, #22]
 800bb04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00d      	beq.n	800bb28 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6a1b      	ldr	r3, [r3, #32]
 800bb10:	7b5b      	ldrb	r3, [r3, #13]
 800bb12:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800bb14:	7dbb      	ldrb	r3, [r7, #22]
 800bb16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb1a:	75bb      	strb	r3, [r7, #22]
 800bb1c:	7dbb      	ldrb	r3, [r7, #22]
 800bb1e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	695a      	ldr	r2, [r3, #20]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bb28:	7dba      	ldrb	r2, [r7, #22]
 800bb2a:	7d7b      	ldrb	r3, [r7, #21]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d115      	bne.n	800bb5c <dir_read+0xe6>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6a1b      	ldr	r3, [r3, #32]
 800bb34:	330d      	adds	r3, #13
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	7d3a      	ldrb	r2, [r7, #20]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d10e      	bne.n	800bb5c <dir_read+0xe6>
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	68da      	ldr	r2, [r3, #12]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6a1b      	ldr	r3, [r3, #32]
 800bb46:	4619      	mov	r1, r3
 800bb48:	4610      	mov	r0, r2
 800bb4a:	f7ff fe19 	bl	800b780 <pick_lfn>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d003      	beq.n	800bb5c <dir_read+0xe6>
 800bb54:	7d7b      	ldrb	r3, [r7, #21]
 800bb56:	3b01      	subs	r3, #1
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	e000      	b.n	800bb5e <dir_read+0xe8>
 800bb5c:	23ff      	movs	r3, #255	; 0xff
 800bb5e:	757b      	strb	r3, [r7, #21]
 800bb60:	e011      	b.n	800bb86 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800bb62:	7d7b      	ldrb	r3, [r7, #21]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d109      	bne.n	800bb7c <dir_read+0x106>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6a1b      	ldr	r3, [r3, #32]
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7ff ff61 	bl	800ba34 <sum_sfn>
 800bb72:	4603      	mov	r3, r0
 800bb74:	461a      	mov	r2, r3
 800bb76:	7d3b      	ldrb	r3, [r7, #20]
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d015      	beq.n	800bba8 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb82:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800bb84:	e010      	b.n	800bba8 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800bb86:	2100      	movs	r1, #0
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f7ff fc3e 	bl	800b40a <dir_next>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bb92:	7dfb      	ldrb	r3, [r7, #23]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d109      	bne.n	800bbac <dir_read+0x136>
	while (dp->sect) {
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	69db      	ldr	r3, [r3, #28]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f47f af79 	bne.w	800ba94 <dir_read+0x1e>
 800bba2:	e004      	b.n	800bbae <dir_read+0x138>
		if (res != FR_OK) break;
 800bba4:	bf00      	nop
 800bba6:	e002      	b.n	800bbae <dir_read+0x138>
					break;
 800bba8:	bf00      	nop
 800bbaa:	e000      	b.n	800bbae <dir_read+0x138>
		if (res != FR_OK) break;
 800bbac:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800bbae:	7dfb      	ldrb	r3, [r7, #23]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d002      	beq.n	800bbba <dir_read+0x144>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	61da      	str	r2, [r3, #28]
	return res;
 800bbba:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3718      	adds	r7, #24
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b086      	sub	sp, #24
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f7ff fb9d 	bl	800b314 <dir_sdi>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bbde:	7dfb      	ldrb	r3, [r7, #23]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d001      	beq.n	800bbe8 <dir_find+0x24>
 800bbe4:	7dfb      	ldrb	r3, [r7, #23]
 800bbe6:	e0a9      	b.n	800bd3c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bbe8:	23ff      	movs	r3, #255	; 0xff
 800bbea:	753b      	strb	r3, [r7, #20]
 800bbec:	7d3b      	ldrb	r3, [r7, #20]
 800bbee:	757b      	strb	r3, [r7, #21]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbf6:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	69db      	ldr	r3, [r3, #28]
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	6938      	ldr	r0, [r7, #16]
 800bc00:	f7ff f83c 	bl	800ac7c <move_window>
 800bc04:	4603      	mov	r3, r0
 800bc06:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bc08:	7dfb      	ldrb	r3, [r7, #23]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f040 8090 	bne.w	800bd30 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6a1b      	ldr	r3, [r3, #32]
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bc18:	7dbb      	ldrb	r3, [r7, #22]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d102      	bne.n	800bc24 <dir_find+0x60>
 800bc1e:	2304      	movs	r3, #4
 800bc20:	75fb      	strb	r3, [r7, #23]
 800bc22:	e08a      	b.n	800bd3a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6a1b      	ldr	r3, [r3, #32]
 800bc28:	330b      	adds	r3, #11
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc30:	73fb      	strb	r3, [r7, #15]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	7bfa      	ldrb	r2, [r7, #15]
 800bc36:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bc38:	7dbb      	ldrb	r3, [r7, #22]
 800bc3a:	2be5      	cmp	r3, #229	; 0xe5
 800bc3c:	d007      	beq.n	800bc4e <dir_find+0x8a>
 800bc3e:	7bfb      	ldrb	r3, [r7, #15]
 800bc40:	f003 0308 	and.w	r3, r3, #8
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d009      	beq.n	800bc5c <dir_find+0x98>
 800bc48:	7bfb      	ldrb	r3, [r7, #15]
 800bc4a:	2b0f      	cmp	r3, #15
 800bc4c:	d006      	beq.n	800bc5c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bc4e:	23ff      	movs	r3, #255	; 0xff
 800bc50:	757b      	strb	r3, [r7, #21]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc58:	631a      	str	r2, [r3, #48]	; 0x30
 800bc5a:	e05e      	b.n	800bd1a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bc5c:	7bfb      	ldrb	r3, [r7, #15]
 800bc5e:	2b0f      	cmp	r3, #15
 800bc60:	d136      	bne.n	800bcd0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bc68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d154      	bne.n	800bd1a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bc70:	7dbb      	ldrb	r3, [r7, #22]
 800bc72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d00d      	beq.n	800bc96 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6a1b      	ldr	r3, [r3, #32]
 800bc7e:	7b5b      	ldrb	r3, [r3, #13]
 800bc80:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bc82:	7dbb      	ldrb	r3, [r7, #22]
 800bc84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc88:	75bb      	strb	r3, [r7, #22]
 800bc8a:	7dbb      	ldrb	r3, [r7, #22]
 800bc8c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	695a      	ldr	r2, [r3, #20]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bc96:	7dba      	ldrb	r2, [r7, #22]
 800bc98:	7d7b      	ldrb	r3, [r7, #21]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d115      	bne.n	800bcca <dir_find+0x106>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6a1b      	ldr	r3, [r3, #32]
 800bca2:	330d      	adds	r3, #13
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	7d3a      	ldrb	r2, [r7, #20]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d10e      	bne.n	800bcca <dir_find+0x106>
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	68da      	ldr	r2, [r3, #12]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6a1b      	ldr	r3, [r3, #32]
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	4610      	mov	r0, r2
 800bcb8:	f7ff fcf2 	bl	800b6a0 <cmp_lfn>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d003      	beq.n	800bcca <dir_find+0x106>
 800bcc2:	7d7b      	ldrb	r3, [r7, #21]
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	e000      	b.n	800bccc <dir_find+0x108>
 800bcca:	23ff      	movs	r3, #255	; 0xff
 800bccc:	757b      	strb	r3, [r7, #21]
 800bcce:	e024      	b.n	800bd1a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bcd0:	7d7b      	ldrb	r3, [r7, #21]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d109      	bne.n	800bcea <dir_find+0x126>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6a1b      	ldr	r3, [r3, #32]
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7ff feaa 	bl	800ba34 <sum_sfn>
 800bce0:	4603      	mov	r3, r0
 800bce2:	461a      	mov	r2, r3
 800bce4:	7d3b      	ldrb	r3, [r7, #20]
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d024      	beq.n	800bd34 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bcf0:	f003 0301 	and.w	r3, r3, #1
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d10a      	bne.n	800bd0e <dir_find+0x14a>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6a18      	ldr	r0, [r3, #32]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	3324      	adds	r3, #36	; 0x24
 800bd00:	220b      	movs	r2, #11
 800bd02:	4619      	mov	r1, r3
 800bd04:	f7fe fdc8 	bl	800a898 <mem_cmp>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d014      	beq.n	800bd38 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bd0e:	23ff      	movs	r3, #255	; 0xff
 800bd10:	757b      	strb	r3, [r7, #21]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd18:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f7ff fb74 	bl	800b40a <dir_next>
 800bd22:	4603      	mov	r3, r0
 800bd24:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bd26:	7dfb      	ldrb	r3, [r7, #23]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	f43f af65 	beq.w	800bbf8 <dir_find+0x34>
 800bd2e:	e004      	b.n	800bd3a <dir_find+0x176>
		if (res != FR_OK) break;
 800bd30:	bf00      	nop
 800bd32:	e002      	b.n	800bd3a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bd34:	bf00      	nop
 800bd36:	e000      	b.n	800bd3a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bd38:	bf00      	nop

	return res;
 800bd3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3718      	adds	r7, #24
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b08c      	sub	sp, #48	; 0x30
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bd58:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d001      	beq.n	800bd64 <dir_register+0x20>
 800bd60:	2306      	movs	r3, #6
 800bd62:	e0e0      	b.n	800bf26 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800bd64:	2300      	movs	r3, #0
 800bd66:	627b      	str	r3, [r7, #36]	; 0x24
 800bd68:	e002      	b.n	800bd70 <dir_register+0x2c>
 800bd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	627b      	str	r3, [r7, #36]	; 0x24
 800bd70:	69fb      	ldr	r3, [r7, #28]
 800bd72:	68da      	ldr	r2, [r3, #12]
 800bd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd76:	005b      	lsls	r3, r3, #1
 800bd78:	4413      	add	r3, r2
 800bd7a:	881b      	ldrh	r3, [r3, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d1f4      	bne.n	800bd6a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800bd86:	f107 030c 	add.w	r3, r7, #12
 800bd8a:	220c      	movs	r2, #12
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7fe fd47 	bl	800a820 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800bd92:	7dfb      	ldrb	r3, [r7, #23]
 800bd94:	f003 0301 	and.w	r3, r3, #1
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d032      	beq.n	800be02 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2240      	movs	r2, #64	; 0x40
 800bda0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800bda4:	2301      	movs	r3, #1
 800bda6:	62bb      	str	r3, [r7, #40]	; 0x28
 800bda8:	e016      	b.n	800bdd8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	68da      	ldr	r2, [r3, #12]
 800bdb4:	f107 010c 	add.w	r1, r7, #12
 800bdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdba:	f7ff fdad 	bl	800b918 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f7ff ff00 	bl	800bbc4 <dir_find>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800bdca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d106      	bne.n	800bde0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800bdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdda:	2b63      	cmp	r3, #99	; 0x63
 800bddc:	d9e5      	bls.n	800bdaa <dir_register+0x66>
 800bdde:	e000      	b.n	800bde2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800bde0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde4:	2b64      	cmp	r3, #100	; 0x64
 800bde6:	d101      	bne.n	800bdec <dir_register+0xa8>
 800bde8:	2307      	movs	r3, #7
 800bdea:	e09c      	b.n	800bf26 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bdec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdf0:	2b04      	cmp	r3, #4
 800bdf2:	d002      	beq.n	800bdfa <dir_register+0xb6>
 800bdf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdf8:	e095      	b.n	800bf26 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bdfa:	7dfa      	ldrb	r2, [r7, #23]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800be02:	7dfb      	ldrb	r3, [r7, #23]
 800be04:	f003 0302 	and.w	r3, r3, #2
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d007      	beq.n	800be1c <dir_register+0xd8>
 800be0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0e:	330c      	adds	r3, #12
 800be10:	4a47      	ldr	r2, [pc, #284]	; (800bf30 <dir_register+0x1ec>)
 800be12:	fba2 2303 	umull	r2, r3, r2, r3
 800be16:	089b      	lsrs	r3, r3, #2
 800be18:	3301      	adds	r3, #1
 800be1a:	e000      	b.n	800be1e <dir_register+0xda>
 800be1c:	2301      	movs	r3, #1
 800be1e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800be20:	6a39      	ldr	r1, [r7, #32]
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f7ff fbb6 	bl	800b594 <dir_alloc>
 800be28:	4603      	mov	r3, r0
 800be2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800be2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be32:	2b00      	cmp	r3, #0
 800be34:	d148      	bne.n	800bec8 <dir_register+0x184>
 800be36:	6a3b      	ldr	r3, [r7, #32]
 800be38:	3b01      	subs	r3, #1
 800be3a:	623b      	str	r3, [r7, #32]
 800be3c:	6a3b      	ldr	r3, [r7, #32]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d042      	beq.n	800bec8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	695a      	ldr	r2, [r3, #20]
 800be46:	6a3b      	ldr	r3, [r7, #32]
 800be48:	015b      	lsls	r3, r3, #5
 800be4a:	1ad3      	subs	r3, r2, r3
 800be4c:	4619      	mov	r1, r3
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f7ff fa60 	bl	800b314 <dir_sdi>
 800be54:	4603      	mov	r3, r0
 800be56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800be5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d132      	bne.n	800bec8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	3324      	adds	r3, #36	; 0x24
 800be66:	4618      	mov	r0, r3
 800be68:	f7ff fde4 	bl	800ba34 <sum_sfn>
 800be6c:	4603      	mov	r3, r0
 800be6e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	69db      	ldr	r3, [r3, #28]
 800be74:	4619      	mov	r1, r3
 800be76:	69f8      	ldr	r0, [r7, #28]
 800be78:	f7fe ff00 	bl	800ac7c <move_window>
 800be7c:	4603      	mov	r3, r0
 800be7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800be82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be86:	2b00      	cmp	r3, #0
 800be88:	d11d      	bne.n	800bec6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	68d8      	ldr	r0, [r3, #12]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6a19      	ldr	r1, [r3, #32]
 800be92:	6a3b      	ldr	r3, [r7, #32]
 800be94:	b2da      	uxtb	r2, r3
 800be96:	7efb      	ldrb	r3, [r7, #27]
 800be98:	f7ff fcd6 	bl	800b848 <put_lfn>
				fs->wflag = 1;
 800be9c:	69fb      	ldr	r3, [r7, #28]
 800be9e:	2201      	movs	r2, #1
 800bea0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800bea2:	2100      	movs	r1, #0
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f7ff fab0 	bl	800b40a <dir_next>
 800beaa:	4603      	mov	r3, r0
 800beac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800beb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d107      	bne.n	800bec8 <dir_register+0x184>
 800beb8:	6a3b      	ldr	r3, [r7, #32]
 800beba:	3b01      	subs	r3, #1
 800bebc:	623b      	str	r3, [r7, #32]
 800bebe:	6a3b      	ldr	r3, [r7, #32]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1d5      	bne.n	800be70 <dir_register+0x12c>
 800bec4:	e000      	b.n	800bec8 <dir_register+0x184>
				if (res != FR_OK) break;
 800bec6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bec8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800becc:	2b00      	cmp	r3, #0
 800bece:	d128      	bne.n	800bf22 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	69db      	ldr	r3, [r3, #28]
 800bed4:	4619      	mov	r1, r3
 800bed6:	69f8      	ldr	r0, [r7, #28]
 800bed8:	f7fe fed0 	bl	800ac7c <move_window>
 800bedc:	4603      	mov	r3, r0
 800bede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bee2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d11b      	bne.n	800bf22 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a1b      	ldr	r3, [r3, #32]
 800beee:	2220      	movs	r2, #32
 800bef0:	2100      	movs	r1, #0
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7fe fcb5 	bl	800a862 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6a18      	ldr	r0, [r3, #32]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	3324      	adds	r3, #36	; 0x24
 800bf00:	220b      	movs	r2, #11
 800bf02:	4619      	mov	r1, r3
 800bf04:	f7fe fc8c 	bl	800a820 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a1b      	ldr	r3, [r3, #32]
 800bf12:	330c      	adds	r3, #12
 800bf14:	f002 0218 	and.w	r2, r2, #24
 800bf18:	b2d2      	uxtb	r2, r2
 800bf1a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bf22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3730      	adds	r7, #48	; 0x30
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	4ec4ec4f 	.word	0x4ec4ec4f

0800bf34 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b088      	sub	sp, #32
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	2200      	movs	r2, #0
 800bf48:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	69db      	ldr	r3, [r3, #28]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	f000 80c9 	beq.w	800c0e6 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf5c:	d032      	beq.n	800bfc4 <get_fileinfo+0x90>
			i = j = 0;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	61bb      	str	r3, [r7, #24]
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800bf66:	e01b      	b.n	800bfa0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800bf68:	89fb      	ldrh	r3, [r7, #14]
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f001 fbff 	bl	800d770 <ff_convert>
 800bf72:	4603      	mov	r3, r0
 800bf74:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800bf76:	89fb      	ldrh	r3, [r7, #14]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d102      	bne.n	800bf82 <get_fileinfo+0x4e>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	61fb      	str	r3, [r7, #28]
 800bf80:	e01a      	b.n	800bfb8 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	2bfe      	cmp	r3, #254	; 0xfe
 800bf86:	d902      	bls.n	800bf8e <get_fileinfo+0x5a>
 800bf88:	2300      	movs	r3, #0
 800bf8a:	61fb      	str	r3, [r7, #28]
 800bf8c:	e014      	b.n	800bfb8 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800bf8e:	69fb      	ldr	r3, [r7, #28]
 800bf90:	1c5a      	adds	r2, r3, #1
 800bf92:	61fa      	str	r2, [r7, #28]
 800bf94:	89fa      	ldrh	r2, [r7, #14]
 800bf96:	b2d1      	uxtb	r1, r2
 800bf98:	683a      	ldr	r2, [r7, #0]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	460a      	mov	r2, r1
 800bf9e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	68da      	ldr	r2, [r3, #12]
 800bfa4:	69bb      	ldr	r3, [r7, #24]
 800bfa6:	1c59      	adds	r1, r3, #1
 800bfa8:	61b9      	str	r1, [r7, #24]
 800bfaa:	005b      	lsls	r3, r3, #1
 800bfac:	4413      	add	r3, r2
 800bfae:	881b      	ldrh	r3, [r3, #0]
 800bfb0:	81fb      	strh	r3, [r7, #14]
 800bfb2:	89fb      	ldrh	r3, [r7, #14]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1d7      	bne.n	800bf68 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800bfb8:	683a      	ldr	r2, [r7, #0]
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	3316      	adds	r3, #22
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	61bb      	str	r3, [r7, #24]
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800bfcc:	683a      	ldr	r2, [r7, #0]
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	3316      	adds	r3, #22
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800bfd8:	e04c      	b.n	800c074 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6a1a      	ldr	r2, [r3, #32]
 800bfde:	69fb      	ldr	r3, [r7, #28]
 800bfe0:	1c59      	adds	r1, r3, #1
 800bfe2:	61f9      	str	r1, [r7, #28]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800bfea:	7dfb      	ldrb	r3, [r7, #23]
 800bfec:	2b20      	cmp	r3, #32
 800bfee:	d100      	bne.n	800bff2 <get_fileinfo+0xbe>
 800bff0:	e040      	b.n	800c074 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800bff2:	7dfb      	ldrb	r3, [r7, #23]
 800bff4:	2b05      	cmp	r3, #5
 800bff6:	d101      	bne.n	800bffc <get_fileinfo+0xc8>
 800bff8:	23e5      	movs	r3, #229	; 0xe5
 800bffa:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	2b09      	cmp	r3, #9
 800c000:	d10f      	bne.n	800c022 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800c002:	89bb      	ldrh	r3, [r7, #12]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d105      	bne.n	800c014 <get_fileinfo+0xe0>
 800c008:	683a      	ldr	r2, [r7, #0]
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	4413      	add	r3, r2
 800c00e:	3316      	adds	r3, #22
 800c010:	222e      	movs	r2, #46	; 0x2e
 800c012:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800c014:	69bb      	ldr	r3, [r7, #24]
 800c016:	1c5a      	adds	r2, r3, #1
 800c018:	61ba      	str	r2, [r7, #24]
 800c01a:	683a      	ldr	r2, [r7, #0]
 800c01c:	4413      	add	r3, r2
 800c01e:	222e      	movs	r2, #46	; 0x2e
 800c020:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800c022:	683a      	ldr	r2, [r7, #0]
 800c024:	69bb      	ldr	r3, [r7, #24]
 800c026:	4413      	add	r3, r2
 800c028:	3309      	adds	r3, #9
 800c02a:	7dfa      	ldrb	r2, [r7, #23]
 800c02c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800c02e:	89bb      	ldrh	r3, [r7, #12]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d11c      	bne.n	800c06e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c034:	7dfb      	ldrb	r3, [r7, #23]
 800c036:	2b40      	cmp	r3, #64	; 0x40
 800c038:	d913      	bls.n	800c062 <get_fileinfo+0x12e>
 800c03a:	7dfb      	ldrb	r3, [r7, #23]
 800c03c:	2b5a      	cmp	r3, #90	; 0x5a
 800c03e:	d810      	bhi.n	800c062 <get_fileinfo+0x12e>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6a1b      	ldr	r3, [r3, #32]
 800c044:	330c      	adds	r3, #12
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	461a      	mov	r2, r3
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	2b08      	cmp	r3, #8
 800c04e:	d901      	bls.n	800c054 <get_fileinfo+0x120>
 800c050:	2310      	movs	r3, #16
 800c052:	e000      	b.n	800c056 <get_fileinfo+0x122>
 800c054:	2308      	movs	r3, #8
 800c056:	4013      	ands	r3, r2
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d002      	beq.n	800c062 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800c05c:	7dfb      	ldrb	r3, [r7, #23]
 800c05e:	3320      	adds	r3, #32
 800c060:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800c062:	683a      	ldr	r2, [r7, #0]
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	4413      	add	r3, r2
 800c068:	3316      	adds	r3, #22
 800c06a:	7dfa      	ldrb	r2, [r7, #23]
 800c06c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800c06e:	69bb      	ldr	r3, [r7, #24]
 800c070:	3301      	adds	r3, #1
 800c072:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	2b0a      	cmp	r3, #10
 800c078:	d9af      	bls.n	800bfda <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800c07a:	89bb      	ldrh	r3, [r7, #12]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d10d      	bne.n	800c09c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800c080:	683a      	ldr	r2, [r7, #0]
 800c082:	69bb      	ldr	r3, [r7, #24]
 800c084:	4413      	add	r3, r2
 800c086:	3316      	adds	r3, #22
 800c088:	2200      	movs	r2, #0
 800c08a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6a1b      	ldr	r3, [r3, #32]
 800c090:	330c      	adds	r3, #12
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d101      	bne.n	800c09c <get_fileinfo+0x168>
 800c098:	2300      	movs	r3, #0
 800c09a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800c09c:	683a      	ldr	r2, [r7, #0]
 800c09e:	69bb      	ldr	r3, [r7, #24]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	3309      	adds	r3, #9
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6a1b      	ldr	r3, [r3, #32]
 800c0ac:	7ada      	ldrb	r2, [r3, #11]
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6a1b      	ldr	r3, [r3, #32]
 800c0b6:	331c      	adds	r3, #28
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7fe fb47 	bl	800a74c <ld_dword>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6a1b      	ldr	r3, [r3, #32]
 800c0c8:	3316      	adds	r3, #22
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fe fb3e 	bl	800a74c <ld_dword>
 800c0d0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	80da      	strh	r2, [r3, #6]
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	0c1b      	lsrs	r3, r3, #16
 800c0de:	b29a      	uxth	r2, r3
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	809a      	strh	r2, [r3, #4]
 800c0e4:	e000      	b.n	800c0e8 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c0e6:	bf00      	nop
}
 800c0e8:	3720      	adds	r7, #32
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
	...

0800c0f0 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b085      	sub	sp, #20
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	1c59      	adds	r1, r3, #1
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	6011      	str	r1, [r2, #0]
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800c106:	89fb      	ldrh	r3, [r7, #14]
 800c108:	2b60      	cmp	r3, #96	; 0x60
 800c10a:	d905      	bls.n	800c118 <get_achar+0x28>
 800c10c:	89fb      	ldrh	r3, [r7, #14]
 800c10e:	2b7a      	cmp	r3, #122	; 0x7a
 800c110:	d802      	bhi.n	800c118 <get_achar+0x28>
 800c112:	89fb      	ldrh	r3, [r7, #14]
 800c114:	3b20      	subs	r3, #32
 800c116:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800c118:	89fb      	ldrh	r3, [r7, #14]
 800c11a:	2b7f      	cmp	r3, #127	; 0x7f
 800c11c:	d904      	bls.n	800c128 <get_achar+0x38>
 800c11e:	89fb      	ldrh	r3, [r7, #14]
 800c120:	3b80      	subs	r3, #128	; 0x80
 800c122:	4a05      	ldr	r2, [pc, #20]	; (800c138 <get_achar+0x48>)
 800c124:	5cd3      	ldrb	r3, [r2, r3]
 800c126:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800c128:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3714      	adds	r7, #20
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	0800d9e4 	.word	0x0800d9e4

0800c13c <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b08a      	sub	sp, #40	; 0x28
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	607a      	str	r2, [r7, #4]
 800c148:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800c14a:	e009      	b.n	800c160 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800c14c:	f107 0308 	add.w	r3, r7, #8
 800c150:	4618      	mov	r0, r3
 800c152:	f7ff ffcd 	bl	800c0f0 <get_achar>
 800c156:	4603      	mov	r3, r0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d101      	bne.n	800c160 <pattern_matching+0x24>
 800c15c:	2300      	movs	r3, #0
 800c15e:	e064      	b.n	800c22a <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	1e5a      	subs	r2, r3, #1
 800c164:	607a      	str	r2, [r7, #4]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d1f0      	bne.n	800c14c <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d104      	bne.n	800c17c <pattern_matching+0x40>
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d001      	beq.n	800c17c <pattern_matching+0x40>
 800c178:	2301      	movs	r3, #1
 800c17a:	e056      	b.n	800c22a <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	617b      	str	r3, [r7, #20]
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	2b3f      	cmp	r3, #63	; 0x3f
 800c18a:	d003      	beq.n	800c194 <pattern_matching+0x58>
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	2b2a      	cmp	r3, #42	; 0x2a
 800c192:	d126      	bne.n	800c1e2 <pattern_matching+0xa6>
				nm = nx = 0;
 800c194:	2300      	movs	r3, #0
 800c196:	61fb      	str	r3, [r7, #28]
 800c198:	69fb      	ldr	r3, [r7, #28]
 800c19a:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	1c5a      	adds	r2, r3, #1
 800c1a0:	617a      	str	r2, [r7, #20]
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	2b3f      	cmp	r3, #63	; 0x3f
 800c1a6:	d103      	bne.n	800c1b0 <pattern_matching+0x74>
 800c1a8:	6a3b      	ldr	r3, [r7, #32]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	623b      	str	r3, [r7, #32]
 800c1ae:	e001      	b.n	800c1b4 <pattern_matching+0x78>
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	2b3f      	cmp	r3, #63	; 0x3f
 800c1ba:	d0ef      	beq.n	800c19c <pattern_matching+0x60>
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	2b2a      	cmp	r3, #42	; 0x2a
 800c1c2:	d0eb      	beq.n	800c19c <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800c1c4:	6978      	ldr	r0, [r7, #20]
 800c1c6:	6939      	ldr	r1, [r7, #16]
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	6a3a      	ldr	r2, [r7, #32]
 800c1cc:	f7ff ffb6 	bl	800c13c <pattern_matching>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d001      	beq.n	800c1da <pattern_matching+0x9e>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	e027      	b.n	800c22a <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c1e0:	e017      	b.n	800c212 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800c1e2:	f107 0314 	add.w	r3, r7, #20
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7ff ff82 	bl	800c0f0 <get_achar>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800c1f0:	f107 0310 	add.w	r3, r7, #16
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7ff ff7b 	bl	800c0f0 <get_achar>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800c1fe:	8b7a      	ldrh	r2, [r7, #26]
 800c200:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c202:	429a      	cmp	r2, r3
 800c204:	d104      	bne.n	800c210 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800c206:	8b7b      	ldrh	r3, [r7, #26]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1bb      	bne.n	800c184 <pattern_matching+0x48>
 800c20c:	2301      	movs	r3, #1
 800c20e:	e00c      	b.n	800c22a <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 800c210:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800c212:	f107 0308 	add.w	r3, r7, #8
 800c216:	4618      	mov	r0, r3
 800c218:	f7ff ff6a 	bl	800c0f0 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d002      	beq.n	800c228 <pattern_matching+0xec>
 800c222:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c224:	2b00      	cmp	r3, #0
 800c226:	d1a9      	bne.n	800c17c <pattern_matching+0x40>

	return 0;
 800c228:	2300      	movs	r3, #0
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3728      	adds	r7, #40	; 0x28
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
	...

0800c234 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b08a      	sub	sp, #40	; 0x28
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	613b      	str	r3, [r7, #16]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	60fb      	str	r3, [r7, #12]
 800c24c:	2300      	movs	r3, #0
 800c24e:	617b      	str	r3, [r7, #20]
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c254:	69bb      	ldr	r3, [r7, #24]
 800c256:	1c5a      	adds	r2, r3, #1
 800c258:	61ba      	str	r2, [r7, #24]
 800c25a:	693a      	ldr	r2, [r7, #16]
 800c25c:	4413      	add	r3, r2
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c264:	2b1f      	cmp	r3, #31
 800c266:	d940      	bls.n	800c2ea <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c268:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c26a:	2b2f      	cmp	r3, #47	; 0x2f
 800c26c:	d006      	beq.n	800c27c <create_name+0x48>
 800c26e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c270:	2b5c      	cmp	r3, #92	; 0x5c
 800c272:	d110      	bne.n	800c296 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c274:	e002      	b.n	800c27c <create_name+0x48>
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	3301      	adds	r3, #1
 800c27a:	61bb      	str	r3, [r7, #24]
 800c27c:	693a      	ldr	r2, [r7, #16]
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	4413      	add	r3, r2
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	2b2f      	cmp	r3, #47	; 0x2f
 800c286:	d0f6      	beq.n	800c276 <create_name+0x42>
 800c288:	693a      	ldr	r2, [r7, #16]
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	4413      	add	r3, r2
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	2b5c      	cmp	r3, #92	; 0x5c
 800c292:	d0f0      	beq.n	800c276 <create_name+0x42>
			break;
 800c294:	e02a      	b.n	800c2ec <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	2bfe      	cmp	r3, #254	; 0xfe
 800c29a:	d901      	bls.n	800c2a0 <create_name+0x6c>
 800c29c:	2306      	movs	r3, #6
 800c29e:	e17d      	b.n	800c59c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c2a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c2a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2a8:	2101      	movs	r1, #1
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f001 fa60 	bl	800d770 <ff_convert>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c2b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d101      	bne.n	800c2be <create_name+0x8a>
 800c2ba:	2306      	movs	r3, #6
 800c2bc:	e16e      	b.n	800c59c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c2be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2c0:	2b7f      	cmp	r3, #127	; 0x7f
 800c2c2:	d809      	bhi.n	800c2d8 <create_name+0xa4>
 800c2c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	488d      	ldr	r0, [pc, #564]	; (800c500 <create_name+0x2cc>)
 800c2ca:	f7fe fb0c 	bl	800a8e6 <chk_chr>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d001      	beq.n	800c2d8 <create_name+0xa4>
 800c2d4:	2306      	movs	r3, #6
 800c2d6:	e161      	b.n	800c59c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	1c5a      	adds	r2, r3, #1
 800c2dc:	617a      	str	r2, [r7, #20]
 800c2de:	005b      	lsls	r3, r3, #1
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c2e6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c2e8:	e7b4      	b.n	800c254 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c2ea:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c2ec:	693a      	ldr	r2, [r7, #16]
 800c2ee:	69bb      	ldr	r3, [r7, #24]
 800c2f0:	441a      	add	r2, r3
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c2f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2f8:	2b1f      	cmp	r3, #31
 800c2fa:	d801      	bhi.n	800c300 <create_name+0xcc>
 800c2fc:	2304      	movs	r3, #4
 800c2fe:	e000      	b.n	800c302 <create_name+0xce>
 800c300:	2300      	movs	r3, #0
 800c302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c306:	e011      	b.n	800c32c <create_name+0xf8>
		w = lfn[di - 1];
 800c308:	697a      	ldr	r2, [r7, #20]
 800c30a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c30e:	4413      	add	r3, r2
 800c310:	005b      	lsls	r3, r3, #1
 800c312:	68fa      	ldr	r2, [r7, #12]
 800c314:	4413      	add	r3, r2
 800c316:	881b      	ldrh	r3, [r3, #0]
 800c318:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c31a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c31c:	2b20      	cmp	r3, #32
 800c31e:	d002      	beq.n	800c326 <create_name+0xf2>
 800c320:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c322:	2b2e      	cmp	r3, #46	; 0x2e
 800c324:	d106      	bne.n	800c334 <create_name+0x100>
		di--;
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	3b01      	subs	r3, #1
 800c32a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d1ea      	bne.n	800c308 <create_name+0xd4>
 800c332:	e000      	b.n	800c336 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c334:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	005b      	lsls	r3, r3, #1
 800c33a:	68fa      	ldr	r2, [r7, #12]
 800c33c:	4413      	add	r3, r2
 800c33e:	2200      	movs	r2, #0
 800c340:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d101      	bne.n	800c34c <create_name+0x118>
 800c348:	2306      	movs	r3, #6
 800c34a:	e127      	b.n	800c59c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	3324      	adds	r3, #36	; 0x24
 800c350:	220b      	movs	r2, #11
 800c352:	2120      	movs	r1, #32
 800c354:	4618      	mov	r0, r3
 800c356:	f7fe fa84 	bl	800a862 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c35a:	2300      	movs	r3, #0
 800c35c:	61bb      	str	r3, [r7, #24]
 800c35e:	e002      	b.n	800c366 <create_name+0x132>
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	3301      	adds	r3, #1
 800c364:	61bb      	str	r3, [r7, #24]
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	005b      	lsls	r3, r3, #1
 800c36a:	68fa      	ldr	r2, [r7, #12]
 800c36c:	4413      	add	r3, r2
 800c36e:	881b      	ldrh	r3, [r3, #0]
 800c370:	2b20      	cmp	r3, #32
 800c372:	d0f5      	beq.n	800c360 <create_name+0x12c>
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	005b      	lsls	r3, r3, #1
 800c378:	68fa      	ldr	r2, [r7, #12]
 800c37a:	4413      	add	r3, r2
 800c37c:	881b      	ldrh	r3, [r3, #0]
 800c37e:	2b2e      	cmp	r3, #46	; 0x2e
 800c380:	d0ee      	beq.n	800c360 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d009      	beq.n	800c39c <create_name+0x168>
 800c388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c38c:	f043 0303 	orr.w	r3, r3, #3
 800c390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c394:	e002      	b.n	800c39c <create_name+0x168>
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	3b01      	subs	r3, #1
 800c39a:	617b      	str	r3, [r7, #20]
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d009      	beq.n	800c3b6 <create_name+0x182>
 800c3a2:	697a      	ldr	r2, [r7, #20]
 800c3a4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c3a8:	4413      	add	r3, r2
 800c3aa:	005b      	lsls	r3, r3, #1
 800c3ac:	68fa      	ldr	r2, [r7, #12]
 800c3ae:	4413      	add	r3, r2
 800c3b0:	881b      	ldrh	r3, [r3, #0]
 800c3b2:	2b2e      	cmp	r3, #46	; 0x2e
 800c3b4:	d1ef      	bne.n	800c396 <create_name+0x162>

	i = b = 0; ni = 8;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c3bc:	2300      	movs	r3, #0
 800c3be:	623b      	str	r3, [r7, #32]
 800c3c0:	2308      	movs	r3, #8
 800c3c2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	1c5a      	adds	r2, r3, #1
 800c3c8:	61ba      	str	r2, [r7, #24]
 800c3ca:	005b      	lsls	r3, r3, #1
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	881b      	ldrh	r3, [r3, #0]
 800c3d2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c3d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	f000 8090 	beq.w	800c4fc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c3dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3de:	2b20      	cmp	r3, #32
 800c3e0:	d006      	beq.n	800c3f0 <create_name+0x1bc>
 800c3e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3e4:	2b2e      	cmp	r3, #46	; 0x2e
 800c3e6:	d10a      	bne.n	800c3fe <create_name+0x1ca>
 800c3e8:	69ba      	ldr	r2, [r7, #24]
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d006      	beq.n	800c3fe <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3f4:	f043 0303 	orr.w	r3, r3, #3
 800c3f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c3fc:	e07d      	b.n	800c4fa <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c3fe:	6a3a      	ldr	r2, [r7, #32]
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	429a      	cmp	r2, r3
 800c404:	d203      	bcs.n	800c40e <create_name+0x1da>
 800c406:	69ba      	ldr	r2, [r7, #24]
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d123      	bne.n	800c456 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c40e:	69fb      	ldr	r3, [r7, #28]
 800c410:	2b0b      	cmp	r3, #11
 800c412:	d106      	bne.n	800c422 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c418:	f043 0303 	orr.w	r3, r3, #3
 800c41c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c420:	e075      	b.n	800c50e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c422:	69ba      	ldr	r2, [r7, #24]
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	429a      	cmp	r2, r3
 800c428:	d005      	beq.n	800c436 <create_name+0x202>
 800c42a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c42e:	f043 0303 	orr.w	r3, r3, #3
 800c432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c436:	69ba      	ldr	r2, [r7, #24]
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d866      	bhi.n	800c50c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	61bb      	str	r3, [r7, #24]
 800c442:	2308      	movs	r3, #8
 800c444:	623b      	str	r3, [r7, #32]
 800c446:	230b      	movs	r3, #11
 800c448:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c44a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c44e:	009b      	lsls	r3, r3, #2
 800c450:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c454:	e051      	b.n	800c4fa <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c456:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c458:	2b7f      	cmp	r3, #127	; 0x7f
 800c45a:	d914      	bls.n	800c486 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c45c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c45e:	2100      	movs	r1, #0
 800c460:	4618      	mov	r0, r3
 800c462:	f001 f985 	bl	800d770 <ff_convert>
 800c466:	4603      	mov	r3, r0
 800c468:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c46a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d004      	beq.n	800c47a <create_name+0x246>
 800c470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c472:	3b80      	subs	r3, #128	; 0x80
 800c474:	4a23      	ldr	r2, [pc, #140]	; (800c504 <create_name+0x2d0>)
 800c476:	5cd3      	ldrb	r3, [r2, r3]
 800c478:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c47a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c47e:	f043 0302 	orr.w	r3, r3, #2
 800c482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c486:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d007      	beq.n	800c49c <create_name+0x268>
 800c48c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c48e:	4619      	mov	r1, r3
 800c490:	481d      	ldr	r0, [pc, #116]	; (800c508 <create_name+0x2d4>)
 800c492:	f7fe fa28 	bl	800a8e6 <chk_chr>
 800c496:	4603      	mov	r3, r0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d008      	beq.n	800c4ae <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c49c:	235f      	movs	r3, #95	; 0x5f
 800c49e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c4a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4a4:	f043 0303 	orr.w	r3, r3, #3
 800c4a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c4ac:	e01b      	b.n	800c4e6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c4ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4b0:	2b40      	cmp	r3, #64	; 0x40
 800c4b2:	d909      	bls.n	800c4c8 <create_name+0x294>
 800c4b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4b6:	2b5a      	cmp	r3, #90	; 0x5a
 800c4b8:	d806      	bhi.n	800c4c8 <create_name+0x294>
					b |= 2;
 800c4ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c4be:	f043 0302 	orr.w	r3, r3, #2
 800c4c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c4c6:	e00e      	b.n	800c4e6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c4c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4ca:	2b60      	cmp	r3, #96	; 0x60
 800c4cc:	d90b      	bls.n	800c4e6 <create_name+0x2b2>
 800c4ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4d0:	2b7a      	cmp	r3, #122	; 0x7a
 800c4d2:	d808      	bhi.n	800c4e6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c4d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c4d8:	f043 0301 	orr.w	r3, r3, #1
 800c4dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c4e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4e2:	3b20      	subs	r3, #32
 800c4e4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c4e6:	6a3b      	ldr	r3, [r7, #32]
 800c4e8:	1c5a      	adds	r2, r3, #1
 800c4ea:	623a      	str	r2, [r7, #32]
 800c4ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c4ee:	b2d1      	uxtb	r1, r2
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	460a      	mov	r2, r1
 800c4f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c4fa:	e763      	b.n	800c3c4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c4fc:	bf00      	nop
 800c4fe:	e006      	b.n	800c50e <create_name+0x2da>
 800c500:	0800d978 	.word	0x0800d978
 800c504:	0800d9e4 	.word	0x0800d9e4
 800c508:	0800d984 	.word	0x0800d984
			if (si > di) break;			/* No extension */
 800c50c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c514:	2be5      	cmp	r3, #229	; 0xe5
 800c516:	d103      	bne.n	800c520 <create_name+0x2ec>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2205      	movs	r2, #5
 800c51c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c520:	69fb      	ldr	r3, [r7, #28]
 800c522:	2b08      	cmp	r3, #8
 800c524:	d104      	bne.n	800c530 <create_name+0x2fc>
 800c526:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c530:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c534:	f003 030c 	and.w	r3, r3, #12
 800c538:	2b0c      	cmp	r3, #12
 800c53a:	d005      	beq.n	800c548 <create_name+0x314>
 800c53c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c540:	f003 0303 	and.w	r3, r3, #3
 800c544:	2b03      	cmp	r3, #3
 800c546:	d105      	bne.n	800c554 <create_name+0x320>
 800c548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c54c:	f043 0302 	orr.w	r3, r3, #2
 800c550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c558:	f003 0302 	and.w	r3, r3, #2
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d117      	bne.n	800c590 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c560:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c564:	f003 0303 	and.w	r3, r3, #3
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d105      	bne.n	800c578 <create_name+0x344>
 800c56c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c570:	f043 0310 	orr.w	r3, r3, #16
 800c574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c578:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c57c:	f003 030c 	and.w	r3, r3, #12
 800c580:	2b04      	cmp	r3, #4
 800c582:	d105      	bne.n	800c590 <create_name+0x35c>
 800c584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c588:	f043 0308 	orr.w	r3, r3, #8
 800c58c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c596:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c59a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3728      	adds	r7, #40	; 0x28
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b086      	sub	sp, #24
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c5b8:	e002      	b.n	800c5c0 <follow_path+0x1c>
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	3301      	adds	r3, #1
 800c5be:	603b      	str	r3, [r7, #0]
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	2b2f      	cmp	r3, #47	; 0x2f
 800c5c6:	d0f8      	beq.n	800c5ba <follow_path+0x16>
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	2b5c      	cmp	r3, #92	; 0x5c
 800c5ce:	d0f4      	beq.n	800c5ba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	2b1f      	cmp	r3, #31
 800c5dc:	d80a      	bhi.n	800c5f4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2280      	movs	r2, #128	; 0x80
 800c5e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c5e6:	2100      	movs	r1, #0
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f7fe fe93 	bl	800b314 <dir_sdi>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	75fb      	strb	r3, [r7, #23]
 800c5f2:	e043      	b.n	800c67c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c5f4:	463b      	mov	r3, r7
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f7ff fe1b 	bl	800c234 <create_name>
 800c5fe:	4603      	mov	r3, r0
 800c600:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c602:	7dfb      	ldrb	r3, [r7, #23]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d134      	bne.n	800c672 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f7ff fadb 	bl	800bbc4 <dir_find>
 800c60e:	4603      	mov	r3, r0
 800c610:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c618:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c61a:	7dfb      	ldrb	r3, [r7, #23]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d00a      	beq.n	800c636 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c620:	7dfb      	ldrb	r3, [r7, #23]
 800c622:	2b04      	cmp	r3, #4
 800c624:	d127      	bne.n	800c676 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c626:	7afb      	ldrb	r3, [r7, #11]
 800c628:	f003 0304 	and.w	r3, r3, #4
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d122      	bne.n	800c676 <follow_path+0xd2>
 800c630:	2305      	movs	r3, #5
 800c632:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c634:	e01f      	b.n	800c676 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c636:	7afb      	ldrb	r3, [r7, #11]
 800c638:	f003 0304 	and.w	r3, r3, #4
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d11c      	bne.n	800c67a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	799b      	ldrb	r3, [r3, #6]
 800c644:	f003 0310 	and.w	r3, r3, #16
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d102      	bne.n	800c652 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c64c:	2305      	movs	r3, #5
 800c64e:	75fb      	strb	r3, [r7, #23]
 800c650:	e014      	b.n	800c67c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	695b      	ldr	r3, [r3, #20]
 800c65c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c660:	4413      	add	r3, r2
 800c662:	4619      	mov	r1, r3
 800c664:	68f8      	ldr	r0, [r7, #12]
 800c666:	f7fe ffdc 	bl	800b622 <ld_clust>
 800c66a:	4602      	mov	r2, r0
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c670:	e7c0      	b.n	800c5f4 <follow_path+0x50>
			if (res != FR_OK) break;
 800c672:	bf00      	nop
 800c674:	e002      	b.n	800c67c <follow_path+0xd8>
				break;
 800c676:	bf00      	nop
 800c678:	e000      	b.n	800c67c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c67a:	bf00      	nop
			}
		}
	}

	return res;
 800c67c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3718      	adds	r7, #24
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c686:	b480      	push	{r7}
 800c688:	b087      	sub	sp, #28
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c68e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c692:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d031      	beq.n	800c700 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	617b      	str	r3, [r7, #20]
 800c6a2:	e002      	b.n	800c6aa <get_ldnumber+0x24>
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	617b      	str	r3, [r7, #20]
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	2b1f      	cmp	r3, #31
 800c6b0:	d903      	bls.n	800c6ba <get_ldnumber+0x34>
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	2b3a      	cmp	r3, #58	; 0x3a
 800c6b8:	d1f4      	bne.n	800c6a4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	2b3a      	cmp	r3, #58	; 0x3a
 800c6c0:	d11c      	bne.n	800c6fc <get_ldnumber+0x76>
			tp = *path;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	1c5a      	adds	r2, r3, #1
 800c6cc:	60fa      	str	r2, [r7, #12]
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	3b30      	subs	r3, #48	; 0x30
 800c6d2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	2b09      	cmp	r3, #9
 800c6d8:	d80e      	bhi.n	800c6f8 <get_ldnumber+0x72>
 800c6da:	68fa      	ldr	r2, [r7, #12]
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d10a      	bne.n	800c6f8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d107      	bne.n	800c6f8 <get_ldnumber+0x72>
					vol = (int)i;
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	617b      	str	r3, [r7, #20]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	697a      	ldr	r2, [r7, #20]
 800c6f6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	e002      	b.n	800c702 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c700:	693b      	ldr	r3, [r7, #16]
}
 800c702:	4618      	mov	r0, r3
 800c704:	371c      	adds	r7, #28
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr
	...

0800c710 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2200      	movs	r2, #0
 800c71e:	70da      	strb	r2, [r3, #3]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c726:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c728:	6839      	ldr	r1, [r7, #0]
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f7fe faa6 	bl	800ac7c <move_window>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d001      	beq.n	800c73a <check_fs+0x2a>
 800c736:	2304      	movs	r3, #4
 800c738:	e038      	b.n	800c7ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	3334      	adds	r3, #52	; 0x34
 800c73e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c742:	4618      	mov	r0, r3
 800c744:	f7fd ffea 	bl	800a71c <ld_word>
 800c748:	4603      	mov	r3, r0
 800c74a:	461a      	mov	r2, r3
 800c74c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c750:	429a      	cmp	r2, r3
 800c752:	d001      	beq.n	800c758 <check_fs+0x48>
 800c754:	2303      	movs	r3, #3
 800c756:	e029      	b.n	800c7ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c75e:	2be9      	cmp	r3, #233	; 0xe9
 800c760:	d009      	beq.n	800c776 <check_fs+0x66>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c768:	2beb      	cmp	r3, #235	; 0xeb
 800c76a:	d11e      	bne.n	800c7aa <check_fs+0x9a>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c772:	2b90      	cmp	r3, #144	; 0x90
 800c774:	d119      	bne.n	800c7aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	3334      	adds	r3, #52	; 0x34
 800c77a:	3336      	adds	r3, #54	; 0x36
 800c77c:	4618      	mov	r0, r3
 800c77e:	f7fd ffe5 	bl	800a74c <ld_dword>
 800c782:	4603      	mov	r3, r0
 800c784:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c788:	4a0a      	ldr	r2, [pc, #40]	; (800c7b4 <check_fs+0xa4>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d101      	bne.n	800c792 <check_fs+0x82>
 800c78e:	2300      	movs	r3, #0
 800c790:	e00c      	b.n	800c7ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	3334      	adds	r3, #52	; 0x34
 800c796:	3352      	adds	r3, #82	; 0x52
 800c798:	4618      	mov	r0, r3
 800c79a:	f7fd ffd7 	bl	800a74c <ld_dword>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	4a05      	ldr	r2, [pc, #20]	; (800c7b8 <check_fs+0xa8>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d101      	bne.n	800c7aa <check_fs+0x9a>
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	e000      	b.n	800c7ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c7aa:	2302      	movs	r3, #2
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3708      	adds	r7, #8
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	00544146 	.word	0x00544146
 800c7b8:	33544146 	.word	0x33544146

0800c7bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b096      	sub	sp, #88	; 0x58
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	4613      	mov	r3, r2
 800c7c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c7d0:	68f8      	ldr	r0, [r7, #12]
 800c7d2:	f7ff ff58 	bl	800c686 <get_ldnumber>
 800c7d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c7d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	da01      	bge.n	800c7e2 <find_volume+0x26>
 800c7de:	230b      	movs	r3, #11
 800c7e0:	e230      	b.n	800cc44 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c7e2:	4aa1      	ldr	r2, [pc, #644]	; (800ca68 <find_volume+0x2ac>)
 800c7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d101      	bne.n	800c7f6 <find_volume+0x3a>
 800c7f2:	230c      	movs	r3, #12
 800c7f4:	e226      	b.n	800cc44 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c7fc:	79fb      	ldrb	r3, [r7, #7]
 800c7fe:	f023 0301 	bic.w	r3, r3, #1
 800c802:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d01a      	beq.n	800c842 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80e:	785b      	ldrb	r3, [r3, #1]
 800c810:	4618      	mov	r0, r3
 800c812:	f7fd fee5 	bl	800a5e0 <disk_status>
 800c816:	4603      	mov	r3, r0
 800c818:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c81c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c820:	f003 0301 	and.w	r3, r3, #1
 800c824:	2b00      	cmp	r3, #0
 800c826:	d10c      	bne.n	800c842 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c828:	79fb      	ldrb	r3, [r7, #7]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d007      	beq.n	800c83e <find_volume+0x82>
 800c82e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c832:	f003 0304 	and.w	r3, r3, #4
 800c836:	2b00      	cmp	r3, #0
 800c838:	d001      	beq.n	800c83e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c83a:	230a      	movs	r3, #10
 800c83c:	e202      	b.n	800cc44 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800c83e:	2300      	movs	r3, #0
 800c840:	e200      	b.n	800cc44 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c844:	2200      	movs	r2, #0
 800c846:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c84a:	b2da      	uxtb	r2, r3
 800c84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c852:	785b      	ldrb	r3, [r3, #1]
 800c854:	4618      	mov	r0, r3
 800c856:	f7fd fedd 	bl	800a614 <disk_initialize>
 800c85a:	4603      	mov	r3, r0
 800c85c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c860:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c864:	f003 0301 	and.w	r3, r3, #1
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d001      	beq.n	800c870 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c86c:	2303      	movs	r3, #3
 800c86e:	e1e9      	b.n	800cc44 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c870:	79fb      	ldrb	r3, [r7, #7]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d007      	beq.n	800c886 <find_volume+0xca>
 800c876:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c87a:	f003 0304 	and.w	r3, r3, #4
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d001      	beq.n	800c886 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c882:	230a      	movs	r3, #10
 800c884:	e1de      	b.n	800cc44 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c886:	2300      	movs	r3, #0
 800c888:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c88a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c88c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c88e:	f7ff ff3f 	bl	800c710 <check_fs>
 800c892:	4603      	mov	r3, r0
 800c894:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c898:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c89c:	2b02      	cmp	r3, #2
 800c89e:	d149      	bne.n	800c934 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	643b      	str	r3, [r7, #64]	; 0x40
 800c8a4:	e01e      	b.n	800c8e4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c8ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8ae:	011b      	lsls	r3, r3, #4
 800c8b0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c8b4:	4413      	add	r3, r2
 800c8b6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ba:	3304      	adds	r3, #4
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d006      	beq.n	800c8d0 <find_volume+0x114>
 800c8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c4:	3308      	adds	r3, #8
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7fd ff40 	bl	800a74c <ld_dword>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	e000      	b.n	800c8d2 <find_volume+0x116>
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	3358      	adds	r3, #88	; 0x58
 800c8d8:	443b      	add	r3, r7
 800c8da:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c8de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	643b      	str	r3, [r7, #64]	; 0x40
 800c8e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8e6:	2b03      	cmp	r3, #3
 800c8e8:	d9dd      	bls.n	800c8a6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c8ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d002      	beq.n	800c8fa <find_volume+0x13e>
 800c8f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c8fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8fc:	009b      	lsls	r3, r3, #2
 800c8fe:	3358      	adds	r3, #88	; 0x58
 800c900:	443b      	add	r3, r7
 800c902:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c906:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d005      	beq.n	800c91a <find_volume+0x15e>
 800c90e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c910:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c912:	f7ff fefd 	bl	800c710 <check_fs>
 800c916:	4603      	mov	r3, r0
 800c918:	e000      	b.n	800c91c <find_volume+0x160>
 800c91a:	2303      	movs	r3, #3
 800c91c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c920:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c924:	2b01      	cmp	r3, #1
 800c926:	d905      	bls.n	800c934 <find_volume+0x178>
 800c928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c92a:	3301      	adds	r3, #1
 800c92c:	643b      	str	r3, [r7, #64]	; 0x40
 800c92e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c930:	2b03      	cmp	r3, #3
 800c932:	d9e2      	bls.n	800c8fa <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c934:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c938:	2b04      	cmp	r3, #4
 800c93a:	d101      	bne.n	800c940 <find_volume+0x184>
 800c93c:	2301      	movs	r3, #1
 800c93e:	e181      	b.n	800cc44 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c940:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c944:	2b01      	cmp	r3, #1
 800c946:	d901      	bls.n	800c94c <find_volume+0x190>
 800c948:	230d      	movs	r3, #13
 800c94a:	e17b      	b.n	800cc44 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94e:	3334      	adds	r3, #52	; 0x34
 800c950:	330b      	adds	r3, #11
 800c952:	4618      	mov	r0, r3
 800c954:	f7fd fee2 	bl	800a71c <ld_word>
 800c958:	4603      	mov	r3, r0
 800c95a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c95e:	d001      	beq.n	800c964 <find_volume+0x1a8>
 800c960:	230d      	movs	r3, #13
 800c962:	e16f      	b.n	800cc44 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c966:	3334      	adds	r3, #52	; 0x34
 800c968:	3316      	adds	r3, #22
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7fd fed6 	bl	800a71c <ld_word>
 800c970:	4603      	mov	r3, r0
 800c972:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c976:	2b00      	cmp	r3, #0
 800c978:	d106      	bne.n	800c988 <find_volume+0x1cc>
 800c97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97c:	3334      	adds	r3, #52	; 0x34
 800c97e:	3324      	adds	r3, #36	; 0x24
 800c980:	4618      	mov	r0, r3
 800c982:	f7fd fee3 	bl	800a74c <ld_dword>
 800c986:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c98a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c98c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c990:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c996:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99a:	789b      	ldrb	r3, [r3, #2]
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d005      	beq.n	800c9ac <find_volume+0x1f0>
 800c9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a2:	789b      	ldrb	r3, [r3, #2]
 800c9a4:	2b02      	cmp	r3, #2
 800c9a6:	d001      	beq.n	800c9ac <find_volume+0x1f0>
 800c9a8:	230d      	movs	r3, #13
 800c9aa:	e14b      	b.n	800cc44 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ae:	789b      	ldrb	r3, [r3, #2]
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9b4:	fb02 f303 	mul.w	r3, r2, r3
 800c9b8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9c0:	b29a      	uxth	r2, r3
 800c9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c8:	895b      	ldrh	r3, [r3, #10]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d008      	beq.n	800c9e0 <find_volume+0x224>
 800c9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d0:	895b      	ldrh	r3, [r3, #10]
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d6:	895b      	ldrh	r3, [r3, #10]
 800c9d8:	3b01      	subs	r3, #1
 800c9da:	4013      	ands	r3, r2
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d001      	beq.n	800c9e4 <find_volume+0x228>
 800c9e0:	230d      	movs	r3, #13
 800c9e2:	e12f      	b.n	800cc44 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e6:	3334      	adds	r3, #52	; 0x34
 800c9e8:	3311      	adds	r3, #17
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7fd fe96 	bl	800a71c <ld_word>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fa:	891b      	ldrh	r3, [r3, #8]
 800c9fc:	f003 030f 	and.w	r3, r3, #15
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d001      	beq.n	800ca0a <find_volume+0x24e>
 800ca06:	230d      	movs	r3, #13
 800ca08:	e11c      	b.n	800cc44 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ca0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0c:	3334      	adds	r3, #52	; 0x34
 800ca0e:	3313      	adds	r3, #19
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7fd fe83 	bl	800a71c <ld_word>
 800ca16:	4603      	mov	r3, r0
 800ca18:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ca1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d106      	bne.n	800ca2e <find_volume+0x272>
 800ca20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca22:	3334      	adds	r3, #52	; 0x34
 800ca24:	3320      	adds	r3, #32
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7fd fe90 	bl	800a74c <ld_dword>
 800ca2c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ca2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca30:	3334      	adds	r3, #52	; 0x34
 800ca32:	330e      	adds	r3, #14
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7fd fe71 	bl	800a71c <ld_word>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ca3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d101      	bne.n	800ca48 <find_volume+0x28c>
 800ca44:	230d      	movs	r3, #13
 800ca46:	e0fd      	b.n	800cc44 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ca48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ca4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca4c:	4413      	add	r3, r2
 800ca4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca50:	8912      	ldrh	r2, [r2, #8]
 800ca52:	0912      	lsrs	r2, r2, #4
 800ca54:	b292      	uxth	r2, r2
 800ca56:	4413      	add	r3, r2
 800ca58:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ca5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d204      	bcs.n	800ca6c <find_volume+0x2b0>
 800ca62:	230d      	movs	r3, #13
 800ca64:	e0ee      	b.n	800cc44 <find_volume+0x488>
 800ca66:	bf00      	nop
 800ca68:	20000718 	.word	0x20000718
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ca6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca70:	1ad3      	subs	r3, r2, r3
 800ca72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca74:	8952      	ldrh	r2, [r2, #10]
 800ca76:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca7a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ca7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d101      	bne.n	800ca86 <find_volume+0x2ca>
 800ca82:	230d      	movs	r3, #13
 800ca84:	e0de      	b.n	800cc44 <find_volume+0x488>
		fmt = FS_FAT32;
 800ca86:	2303      	movs	r3, #3
 800ca88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d802      	bhi.n	800ca9c <find_volume+0x2e0>
 800ca96:	2302      	movs	r3, #2
 800ca98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ca9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d802      	bhi.n	800caac <find_volume+0x2f0>
 800caa6:	2301      	movs	r3, #1
 800caa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800caac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caae:	1c9a      	adds	r2, r3, #2
 800cab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800cab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cab8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800caba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cabc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cabe:	441a      	add	r2, r3
 800cac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800cac4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac8:	441a      	add	r2, r3
 800caca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cacc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800cace:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cad2:	2b03      	cmp	r3, #3
 800cad4:	d11e      	bne.n	800cb14 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad8:	3334      	adds	r3, #52	; 0x34
 800cada:	332a      	adds	r3, #42	; 0x2a
 800cadc:	4618      	mov	r0, r3
 800cade:	f7fd fe1d 	bl	800a71c <ld_word>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d001      	beq.n	800caec <find_volume+0x330>
 800cae8:	230d      	movs	r3, #13
 800caea:	e0ab      	b.n	800cc44 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800caec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caee:	891b      	ldrh	r3, [r3, #8]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d001      	beq.n	800caf8 <find_volume+0x33c>
 800caf4:	230d      	movs	r3, #13
 800caf6:	e0a5      	b.n	800cc44 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800caf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafa:	3334      	adds	r3, #52	; 0x34
 800cafc:	332c      	adds	r3, #44	; 0x2c
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7fd fe24 	bl	800a74c <ld_dword>
 800cb04:	4602      	mov	r2, r0
 800cb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb08:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0c:	699b      	ldr	r3, [r3, #24]
 800cb0e:	009b      	lsls	r3, r3, #2
 800cb10:	647b      	str	r3, [r7, #68]	; 0x44
 800cb12:	e01f      	b.n	800cb54 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb16:	891b      	ldrh	r3, [r3, #8]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d101      	bne.n	800cb20 <find_volume+0x364>
 800cb1c:	230d      	movs	r3, #13
 800cb1e:	e091      	b.n	800cc44 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb26:	441a      	add	r2, r3
 800cb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cb2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb30:	2b02      	cmp	r3, #2
 800cb32:	d103      	bne.n	800cb3c <find_volume+0x380>
 800cb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb36:	699b      	ldr	r3, [r3, #24]
 800cb38:	005b      	lsls	r3, r3, #1
 800cb3a:	e00a      	b.n	800cb52 <find_volume+0x396>
 800cb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3e:	699a      	ldr	r2, [r3, #24]
 800cb40:	4613      	mov	r3, r2
 800cb42:	005b      	lsls	r3, r3, #1
 800cb44:	4413      	add	r3, r2
 800cb46:	085a      	lsrs	r2, r3, #1
 800cb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4a:	699b      	ldr	r3, [r3, #24]
 800cb4c:	f003 0301 	and.w	r3, r3, #1
 800cb50:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cb52:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb56:	69da      	ldr	r2, [r3, #28]
 800cb58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb5a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cb5e:	0a5b      	lsrs	r3, r3, #9
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d201      	bcs.n	800cb68 <find_volume+0x3ac>
 800cb64:	230d      	movs	r3, #13
 800cb66:	e06d      	b.n	800cc44 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb6e:	615a      	str	r2, [r3, #20]
 800cb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb72:	695a      	ldr	r2, [r3, #20]
 800cb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb76:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800cb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7a:	2280      	movs	r2, #128	; 0x80
 800cb7c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cb7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb82:	2b03      	cmp	r3, #3
 800cb84:	d149      	bne.n	800cc1a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb88:	3334      	adds	r3, #52	; 0x34
 800cb8a:	3330      	adds	r3, #48	; 0x30
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7fd fdc5 	bl	800a71c <ld_word>
 800cb92:	4603      	mov	r3, r0
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d140      	bne.n	800cc1a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cb98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cba0:	f7fe f86c 	bl	800ac7c <move_window>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d137      	bne.n	800cc1a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800cbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbac:	2200      	movs	r2, #0
 800cbae:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb2:	3334      	adds	r3, #52	; 0x34
 800cbb4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f7fd fdaf 	bl	800a71c <ld_word>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d127      	bne.n	800cc1a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbcc:	3334      	adds	r3, #52	; 0x34
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7fd fdbc 	bl	800a74c <ld_dword>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	4a1d      	ldr	r2, [pc, #116]	; (800cc4c <find_volume+0x490>)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d11e      	bne.n	800cc1a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbde:	3334      	adds	r3, #52	; 0x34
 800cbe0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f7fd fdb1 	bl	800a74c <ld_dword>
 800cbea:	4603      	mov	r3, r0
 800cbec:	4a18      	ldr	r2, [pc, #96]	; (800cc50 <find_volume+0x494>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d113      	bne.n	800cc1a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf4:	3334      	adds	r3, #52	; 0x34
 800cbf6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7fd fda6 	bl	800a74c <ld_dword>
 800cc00:	4602      	mov	r2, r0
 800cc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc04:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc08:	3334      	adds	r3, #52	; 0x34
 800cc0a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7fd fd9c 	bl	800a74c <ld_dword>
 800cc14:	4602      	mov	r2, r0
 800cc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc18:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cc20:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cc22:	4b0c      	ldr	r3, [pc, #48]	; (800cc54 <find_volume+0x498>)
 800cc24:	881b      	ldrh	r3, [r3, #0]
 800cc26:	3301      	adds	r3, #1
 800cc28:	b29a      	uxth	r2, r3
 800cc2a:	4b0a      	ldr	r3, [pc, #40]	; (800cc54 <find_volume+0x498>)
 800cc2c:	801a      	strh	r2, [r3, #0]
 800cc2e:	4b09      	ldr	r3, [pc, #36]	; (800cc54 <find_volume+0x498>)
 800cc30:	881a      	ldrh	r2, [r3, #0]
 800cc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc34:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800cc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc38:	4a07      	ldr	r2, [pc, #28]	; (800cc58 <find_volume+0x49c>)
 800cc3a:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cc3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc3e:	f7fd ffb5 	bl	800abac <clear_lock>
#endif
	return FR_OK;
 800cc42:	2300      	movs	r3, #0
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3758      	adds	r7, #88	; 0x58
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	41615252 	.word	0x41615252
 800cc50:	61417272 	.word	0x61417272
 800cc54:	2000071c 	.word	0x2000071c
 800cc58:	20000740 	.word	0x20000740

0800cc5c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cc66:	2309      	movs	r3, #9
 800cc68:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d01c      	beq.n	800ccaa <validate+0x4e>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d018      	beq.n	800ccaa <validate+0x4e>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d013      	beq.n	800ccaa <validate+0x4e>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	889a      	ldrh	r2, [r3, #4]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	88db      	ldrh	r3, [r3, #6]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d10c      	bne.n	800ccaa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	785b      	ldrb	r3, [r3, #1]
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fd fca2 	bl	800a5e0 <disk_status>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	f003 0301 	and.w	r3, r3, #1
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d101      	bne.n	800ccaa <validate+0x4e>
			res = FR_OK;
 800cca6:	2300      	movs	r3, #0
 800cca8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ccaa:	7bfb      	ldrb	r3, [r7, #15]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d102      	bne.n	800ccb6 <validate+0x5a>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	e000      	b.n	800ccb8 <validate+0x5c>
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	683a      	ldr	r2, [r7, #0]
 800ccba:	6013      	str	r3, [r2, #0]
	return res;
 800ccbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3710      	adds	r7, #16
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
	...

0800ccc8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b088      	sub	sp, #32
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	4613      	mov	r3, r2
 800ccd4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ccda:	f107 0310 	add.w	r3, r7, #16
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7ff fcd1 	bl	800c686 <get_ldnumber>
 800cce4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	da01      	bge.n	800ccf0 <f_mount+0x28>
 800ccec:	230b      	movs	r3, #11
 800ccee:	e02b      	b.n	800cd48 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ccf0:	4a17      	ldr	r2, [pc, #92]	; (800cd50 <f_mount+0x88>)
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccf8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ccfa:	69bb      	ldr	r3, [r7, #24]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d005      	beq.n	800cd0c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cd00:	69b8      	ldr	r0, [r7, #24]
 800cd02:	f7fd ff53 	bl	800abac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d002      	beq.n	800cd18 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2200      	movs	r2, #0
 800cd16:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cd18:	68fa      	ldr	r2, [r7, #12]
 800cd1a:	490d      	ldr	r1, [pc, #52]	; (800cd50 <f_mount+0x88>)
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d002      	beq.n	800cd2e <f_mount+0x66>
 800cd28:	79fb      	ldrb	r3, [r7, #7]
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d001      	beq.n	800cd32 <f_mount+0x6a>
 800cd2e:	2300      	movs	r3, #0
 800cd30:	e00a      	b.n	800cd48 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cd32:	f107 010c 	add.w	r1, r7, #12
 800cd36:	f107 0308 	add.w	r3, r7, #8
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7ff fd3d 	bl	800c7bc <find_volume>
 800cd42:	4603      	mov	r3, r0
 800cd44:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cd46:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3720      	adds	r7, #32
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}
 800cd50:	20000718 	.word	0x20000718

0800cd54 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b09a      	sub	sp, #104	; 0x68
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	4613      	mov	r3, r2
 800cd60:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d101      	bne.n	800cd6c <f_open+0x18>
 800cd68:	2309      	movs	r3, #9
 800cd6a:	e1aa      	b.n	800d0c2 <f_open+0x36e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cd6c:	79fb      	ldrb	r3, [r7, #7]
 800cd6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd72:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cd74:	79fa      	ldrb	r2, [r7, #7]
 800cd76:	f107 0110 	add.w	r1, r7, #16
 800cd7a:	f107 0308 	add.w	r3, r7, #8
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7ff fd1c 	bl	800c7bc <find_volume>
 800cd84:	4603      	mov	r3, r0
 800cd86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800cd8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	f040 818e 	bne.w	800d0b0 <f_open+0x35c>
		dj.obj.fs = fs;
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cd98:	68ba      	ldr	r2, [r7, #8]
 800cd9a:	f107 0314 	add.w	r3, r7, #20
 800cd9e:	4611      	mov	r1, r2
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7ff fbff 	bl	800c5a4 <follow_path>
 800cda6:	4603      	mov	r3, r0
 800cda8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cdac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d11a      	bne.n	800cdea <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cdb4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cdb8:	b25b      	sxtb	r3, r3
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	da03      	bge.n	800cdc6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800cdbe:	2306      	movs	r3, #6
 800cdc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cdc4:	e011      	b.n	800cdea <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cdc6:	79fb      	ldrb	r3, [r7, #7]
 800cdc8:	f023 0301 	bic.w	r3, r3, #1
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	bf14      	ite	ne
 800cdd0:	2301      	movne	r3, #1
 800cdd2:	2300      	moveq	r3, #0
 800cdd4:	b2db      	uxtb	r3, r3
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	f107 0314 	add.w	r3, r7, #20
 800cddc:	4611      	mov	r1, r2
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7fd fd9c 	bl	800a91c <chk_lock>
 800cde4:	4603      	mov	r3, r0
 800cde6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cdea:	79fb      	ldrb	r3, [r7, #7]
 800cdec:	f003 031c 	and.w	r3, r3, #28
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d07f      	beq.n	800cef4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800cdf4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d017      	beq.n	800ce2c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cdfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce00:	2b04      	cmp	r3, #4
 800ce02:	d10e      	bne.n	800ce22 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ce04:	f7fd fde6 	bl	800a9d4 <enq_lock>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d006      	beq.n	800ce1c <f_open+0xc8>
 800ce0e:	f107 0314 	add.w	r3, r7, #20
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7fe ff96 	bl	800bd44 <dir_register>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	e000      	b.n	800ce1e <f_open+0xca>
 800ce1c:	2312      	movs	r3, #18
 800ce1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ce22:	79fb      	ldrb	r3, [r7, #7]
 800ce24:	f043 0308 	orr.w	r3, r3, #8
 800ce28:	71fb      	strb	r3, [r7, #7]
 800ce2a:	e010      	b.n	800ce4e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ce2c:	7ebb      	ldrb	r3, [r7, #26]
 800ce2e:	f003 0311 	and.w	r3, r3, #17
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d003      	beq.n	800ce3e <f_open+0xea>
					res = FR_DENIED;
 800ce36:	2307      	movs	r3, #7
 800ce38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ce3c:	e007      	b.n	800ce4e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ce3e:	79fb      	ldrb	r3, [r7, #7]
 800ce40:	f003 0304 	and.w	r3, r3, #4
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d002      	beq.n	800ce4e <f_open+0xfa>
 800ce48:	2308      	movs	r3, #8
 800ce4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ce4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d168      	bne.n	800cf28 <f_open+0x1d4>
 800ce56:	79fb      	ldrb	r3, [r7, #7]
 800ce58:	f003 0308 	and.w	r3, r3, #8
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d063      	beq.n	800cf28 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ce60:	f7fd fa30 	bl	800a2c4 <get_fattime>
 800ce64:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ce66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce68:	330e      	adds	r3, #14
 800ce6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7fd fcab 	bl	800a7c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ce72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce74:	3316      	adds	r3, #22
 800ce76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7fd fca5 	bl	800a7c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ce7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce80:	330b      	adds	r3, #11
 800ce82:	2220      	movs	r2, #32
 800ce84:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce8a:	4611      	mov	r1, r2
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7fe fbc8 	bl	800b622 <ld_clust>
 800ce92:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ce98:	2200      	movs	r2, #0
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7fe fbe0 	bl	800b660 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cea2:	331c      	adds	r3, #28
 800cea4:	2100      	movs	r1, #0
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7fd fc8e 	bl	800a7c8 <st_dword>
					fs->wflag = 1;
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ceb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d037      	beq.n	800cf28 <f_open+0x1d4>
						dw = fs->winsect;
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cebc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800cebe:	f107 0314 	add.w	r3, r7, #20
 800cec2:	2200      	movs	r2, #0
 800cec4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fe f927 	bl	800b11a <remove_chain>
 800cecc:	4603      	mov	r3, r0
 800cece:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ced2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d126      	bne.n	800cf28 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cede:	4618      	mov	r0, r3
 800cee0:	f7fd fecc 	bl	800ac7c <move_window>
 800cee4:	4603      	mov	r3, r0
 800cee6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ceee:	3a01      	subs	r2, #1
 800cef0:	611a      	str	r2, [r3, #16]
 800cef2:	e019      	b.n	800cf28 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cef4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d115      	bne.n	800cf28 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cefc:	7ebb      	ldrb	r3, [r7, #26]
 800cefe:	f003 0310 	and.w	r3, r3, #16
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d003      	beq.n	800cf0e <f_open+0x1ba>
					res = FR_NO_FILE;
 800cf06:	2304      	movs	r3, #4
 800cf08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cf0c:	e00c      	b.n	800cf28 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cf0e:	79fb      	ldrb	r3, [r7, #7]
 800cf10:	f003 0302 	and.w	r3, r3, #2
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d007      	beq.n	800cf28 <f_open+0x1d4>
 800cf18:	7ebb      	ldrb	r3, [r7, #26]
 800cf1a:	f003 0301 	and.w	r3, r3, #1
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d002      	beq.n	800cf28 <f_open+0x1d4>
						res = FR_DENIED;
 800cf22:	2307      	movs	r3, #7
 800cf24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800cf28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d128      	bne.n	800cf82 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cf30:	79fb      	ldrb	r3, [r7, #7]
 800cf32:	f003 0308 	and.w	r3, r3, #8
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d003      	beq.n	800cf42 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800cf3a:	79fb      	ldrb	r3, [r7, #7]
 800cf3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf40:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cf4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cf50:	79fb      	ldrb	r3, [r7, #7]
 800cf52:	f023 0301 	bic.w	r3, r3, #1
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	bf14      	ite	ne
 800cf5a:	2301      	movne	r3, #1
 800cf5c:	2300      	moveq	r3, #0
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	461a      	mov	r2, r3
 800cf62:	f107 0314 	add.w	r3, r7, #20
 800cf66:	4611      	mov	r1, r2
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7fd fd55 	bl	800aa18 <inc_lock>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	691b      	ldr	r3, [r3, #16]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d102      	bne.n	800cf82 <f_open+0x22e>
 800cf7c:	2302      	movs	r3, #2
 800cf7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cf82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	f040 8092 	bne.w	800d0b0 <f_open+0x35c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf90:	4611      	mov	r1, r2
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7fe fb45 	bl	800b622 <ld_clust>
 800cf98:	4602      	mov	r2, r0
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cf9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfa0:	331c      	adds	r3, #28
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7fd fbd2 	bl	800a74c <ld_dword>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cfae:	693a      	ldr	r2, [r7, #16]
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	88da      	ldrh	r2, [r3, #6]
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	79fa      	ldrb	r2, [r7, #7]
 800cfc0:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	332c      	adds	r3, #44	; 0x2c
 800cfd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfdc:	2100      	movs	r1, #0
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7fd fc3f 	bl	800a862 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cfe4:	79fb      	ldrb	r3, [r7, #7]
 800cfe6:	f003 0320 	and.w	r3, r3, #32
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d060      	beq.n	800d0b0 <f_open+0x35c>
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	68db      	ldr	r3, [r3, #12]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d05c      	beq.n	800d0b0 <f_open+0x35c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	68da      	ldr	r2, [r3, #12]
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	895b      	ldrh	r3, [r3, #10]
 800d002:	025b      	lsls	r3, r3, #9
 800d004:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	689b      	ldr	r3, [r3, #8]
 800d00a:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d012:	e016      	b.n	800d042 <f_open+0x2ee>
					clst = get_fat(&fp->obj, clst);
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d018:	4618      	mov	r0, r3
 800d01a:	f7fd feea 	bl	800adf2 <get_fat>
 800d01e:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d022:	2b01      	cmp	r3, #1
 800d024:	d802      	bhi.n	800d02c <f_open+0x2d8>
 800d026:	2302      	movs	r3, #2
 800d028:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d02c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d02e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d032:	d102      	bne.n	800d03a <f_open+0x2e6>
 800d034:	2301      	movs	r3, #1
 800d036:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d03a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d03c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d03e:	1ad3      	subs	r3, r2, r3
 800d040:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d042:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d046:	2b00      	cmp	r3, #0
 800d048:	d103      	bne.n	800d052 <f_open+0x2fe>
 800d04a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d04c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d04e:	429a      	cmp	r2, r3
 800d050:	d8e0      	bhi.n	800d014 <f_open+0x2c0>
				}
				fp->clust = clst;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d056:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d058:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d127      	bne.n	800d0b0 <f_open+0x35c>
 800d060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d066:	2b00      	cmp	r3, #0
 800d068:	d022      	beq.n	800d0b0 <f_open+0x35c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d06e:	4618      	mov	r0, r3
 800d070:	f7fd fea0 	bl	800adb4 <clust2sect>
 800d074:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d103      	bne.n	800d084 <f_open+0x330>
						res = FR_INT_ERR;
 800d07c:	2302      	movs	r3, #2
 800d07e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d082:	e015      	b.n	800d0b0 <f_open+0x35c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d084:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d086:	0a5a      	lsrs	r2, r3, #9
 800d088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d08a:	441a      	add	r2, r3
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	7858      	ldrb	r0, [r3, #1]
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	6a1a      	ldr	r2, [r3, #32]
 800d09e:	2301      	movs	r3, #1
 800d0a0:	f7fd fade 	bl	800a660 <disk_read>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d002      	beq.n	800d0b0 <f_open+0x35c>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d0b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d002      	beq.n	800d0be <f_open+0x36a>
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d0be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3768      	adds	r7, #104	; 0x68
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}

0800d0ca <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d0ca:	b580      	push	{r7, lr}
 800d0cc:	b08e      	sub	sp, #56	; 0x38
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	60f8      	str	r0, [r7, #12]
 800d0d2:	60b9      	str	r1, [r7, #8]
 800d0d4:	607a      	str	r2, [r7, #4]
 800d0d6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f107 0214 	add.w	r2, r7, #20
 800d0e8:	4611      	mov	r1, r2
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7ff fdb6 	bl	800cc5c <validate>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d0f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d107      	bne.n	800d10e <f_read+0x44>
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	7d5b      	ldrb	r3, [r3, #21]
 800d102:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d106:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d002      	beq.n	800d114 <f_read+0x4a>
 800d10e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d112:	e109      	b.n	800d328 <f_read+0x25e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	7d1b      	ldrb	r3, [r3, #20]
 800d118:	f003 0301 	and.w	r3, r3, #1
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d101      	bne.n	800d124 <f_read+0x5a>
 800d120:	2307      	movs	r3, #7
 800d122:	e101      	b.n	800d328 <f_read+0x25e>
	remain = fp->obj.objsize - fp->fptr;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	68da      	ldr	r2, [r3, #12]
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	699b      	ldr	r3, [r3, #24]
 800d12c:	1ad3      	subs	r3, r2, r3
 800d12e:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	6a3b      	ldr	r3, [r7, #32]
 800d134:	429a      	cmp	r2, r3
 800d136:	f240 80f2 	bls.w	800d31e <f_read+0x254>
 800d13a:	6a3b      	ldr	r3, [r7, #32]
 800d13c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d13e:	e0ee      	b.n	800d31e <f_read+0x254>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	699b      	ldr	r3, [r3, #24]
 800d144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d148:	2b00      	cmp	r3, #0
 800d14a:	f040 80ba 	bne.w	800d2c2 <f_read+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	699b      	ldr	r3, [r3, #24]
 800d152:	0a5b      	lsrs	r3, r3, #9
 800d154:	697a      	ldr	r2, [r7, #20]
 800d156:	8952      	ldrh	r2, [r2, #10]
 800d158:	3a01      	subs	r2, #1
 800d15a:	4013      	ands	r3, r2
 800d15c:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d15e:	69fb      	ldr	r3, [r7, #28]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d123      	bne.n	800d1ac <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	699b      	ldr	r3, [r3, #24]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d103      	bne.n	800d174 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	689b      	ldr	r3, [r3, #8]
 800d170:	633b      	str	r3, [r7, #48]	; 0x30
 800d172:	e007      	b.n	800d184 <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d174:	68fa      	ldr	r2, [r7, #12]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	69db      	ldr	r3, [r3, #28]
 800d17a:	4619      	mov	r1, r3
 800d17c:	4610      	mov	r0, r2
 800d17e:	f7fd fe38 	bl	800adf2 <get_fat>
 800d182:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d186:	2b01      	cmp	r3, #1
 800d188:	d804      	bhi.n	800d194 <f_read+0xca>
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2202      	movs	r2, #2
 800d18e:	755a      	strb	r2, [r3, #21]
 800d190:	2302      	movs	r3, #2
 800d192:	e0c9      	b.n	800d328 <f_read+0x25e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d19a:	d104      	bne.n	800d1a6 <f_read+0xdc>
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	755a      	strb	r2, [r3, #21]
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	e0c0      	b.n	800d328 <f_read+0x25e>
				fp->clust = clst;				/* Update current cluster */
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1aa:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d1ac:	697a      	ldr	r2, [r7, #20]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	69db      	ldr	r3, [r3, #28]
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	4610      	mov	r0, r2
 800d1b6:	f7fd fdfd 	bl	800adb4 <clust2sect>
 800d1ba:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d1bc:	69bb      	ldr	r3, [r7, #24]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d104      	bne.n	800d1cc <f_read+0x102>
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	2202      	movs	r2, #2
 800d1c6:	755a      	strb	r2, [r3, #21]
 800d1c8:	2302      	movs	r3, #2
 800d1ca:	e0ad      	b.n	800d328 <f_read+0x25e>
			sect += csect;
 800d1cc:	69ba      	ldr	r2, [r7, #24]
 800d1ce:	69fb      	ldr	r3, [r7, #28]
 800d1d0:	4413      	add	r3, r2
 800d1d2:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	0a5b      	lsrs	r3, r3, #9
 800d1d8:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d039      	beq.n	800d254 <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d1e0:	69fa      	ldr	r2, [r7, #28]
 800d1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e4:	4413      	add	r3, r2
 800d1e6:	697a      	ldr	r2, [r7, #20]
 800d1e8:	8952      	ldrh	r2, [r2, #10]
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d905      	bls.n	800d1fa <f_read+0x130>
					cc = fs->csize - csect;
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	895b      	ldrh	r3, [r3, #10]
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	69fb      	ldr	r3, [r7, #28]
 800d1f6:	1ad3      	subs	r3, r2, r3
 800d1f8:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	7858      	ldrb	r0, [r3, #1]
 800d1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d200:	69ba      	ldr	r2, [r7, #24]
 800d202:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d204:	f7fd fa2c 	bl	800a660 <disk_read>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d004      	beq.n	800d218 <f_read+0x14e>
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2201      	movs	r2, #1
 800d212:	755a      	strb	r2, [r3, #21]
 800d214:	2301      	movs	r3, #1
 800d216:	e087      	b.n	800d328 <f_read+0x25e>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	7d1b      	ldrb	r3, [r3, #20]
 800d21c:	b25b      	sxtb	r3, r3
 800d21e:	2b00      	cmp	r3, #0
 800d220:	da14      	bge.n	800d24c <f_read+0x182>
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	6a1a      	ldr	r2, [r3, #32]
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	1ad3      	subs	r3, r2, r3
 800d22a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d90d      	bls.n	800d24c <f_read+0x182>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	6a1a      	ldr	r2, [r3, #32]
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	1ad3      	subs	r3, r2, r3
 800d238:	025b      	lsls	r3, r3, #9
 800d23a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d23c:	18d0      	adds	r0, r2, r3
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	332c      	adds	r3, #44	; 0x2c
 800d242:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d246:	4619      	mov	r1, r3
 800d248:	f7fd faea 	bl	800a820 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24e:	025b      	lsls	r3, r3, #9
 800d250:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d252:	e050      	b.n	800d2f6 <f_read+0x22c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	6a1b      	ldr	r3, [r3, #32]
 800d258:	69ba      	ldr	r2, [r7, #24]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d02e      	beq.n	800d2bc <f_read+0x1f2>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	7d1b      	ldrb	r3, [r3, #20]
 800d262:	b25b      	sxtb	r3, r3
 800d264:	2b00      	cmp	r3, #0
 800d266:	da18      	bge.n	800d29a <f_read+0x1d0>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	7858      	ldrb	r0, [r3, #1]
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	6a1a      	ldr	r2, [r3, #32]
 800d276:	2301      	movs	r3, #1
 800d278:	f7fd fa12 	bl	800a6a0 <disk_write>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d004      	beq.n	800d28c <f_read+0x1c2>
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2201      	movs	r2, #1
 800d286:	755a      	strb	r2, [r3, #21]
 800d288:	2301      	movs	r3, #1
 800d28a:	e04d      	b.n	800d328 <f_read+0x25e>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	7d1b      	ldrb	r3, [r3, #20]
 800d290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d294:	b2da      	uxtb	r2, r3
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	7858      	ldrb	r0, [r3, #1]
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	69ba      	ldr	r2, [r7, #24]
 800d2a8:	f7fd f9da 	bl	800a660 <disk_read>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d004      	beq.n	800d2bc <f_read+0x1f2>
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	755a      	strb	r2, [r3, #21]
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	e035      	b.n	800d328 <f_read+0x25e>
			}
#endif
			fp->sect = sect;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	69ba      	ldr	r2, [r7, #24]
 800d2c0:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	699b      	ldr	r3, [r3, #24]
 800d2c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2ca:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d2d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d901      	bls.n	800d2dc <f_read+0x212>
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	699b      	ldr	r3, [r3, #24]
 800d2e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2ea:	4413      	add	r3, r2
 800d2ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2f2:	f7fd fa95 	bl	800a820 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d2f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fa:	4413      	add	r3, r2
 800d2fc:	627b      	str	r3, [r7, #36]	; 0x24
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	699a      	ldr	r2, [r3, #24]
 800d302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d304:	441a      	add	r2, r3
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	619a      	str	r2, [r3, #24]
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	681a      	ldr	r2, [r3, #0]
 800d30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d310:	441a      	add	r2, r3
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	601a      	str	r2, [r3, #0]
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31a:	1ad3      	subs	r3, r2, r3
 800d31c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2b00      	cmp	r3, #0
 800d322:	f47f af0d 	bne.w	800d140 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d326:	2300      	movs	r3, #0
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3738      	adds	r7, #56	; 0x38
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b086      	sub	sp, #24
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f107 0208 	add.w	r2, r7, #8
 800d33e:	4611      	mov	r1, r2
 800d340:	4618      	mov	r0, r3
 800d342:	f7ff fc8b 	bl	800cc5c <validate>
 800d346:	4603      	mov	r3, r0
 800d348:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d34a:	7dfb      	ldrb	r3, [r7, #23]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d168      	bne.n	800d422 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	7d1b      	ldrb	r3, [r3, #20]
 800d354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d062      	beq.n	800d422 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	7d1b      	ldrb	r3, [r3, #20]
 800d360:	b25b      	sxtb	r3, r3
 800d362:	2b00      	cmp	r3, #0
 800d364:	da15      	bge.n	800d392 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	7858      	ldrb	r0, [r3, #1]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6a1a      	ldr	r2, [r3, #32]
 800d374:	2301      	movs	r3, #1
 800d376:	f7fd f993 	bl	800a6a0 <disk_write>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d001      	beq.n	800d384 <f_sync+0x54>
 800d380:	2301      	movs	r3, #1
 800d382:	e04f      	b.n	800d424 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	7d1b      	ldrb	r3, [r3, #20]
 800d388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d38c:	b2da      	uxtb	r2, r3
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d392:	f7fc ff97 	bl	800a2c4 <get_fattime>
 800d396:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d398:	68ba      	ldr	r2, [r7, #8]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d39e:	4619      	mov	r1, r3
 800d3a0:	4610      	mov	r0, r2
 800d3a2:	f7fd fc6b 	bl	800ac7c <move_window>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d3aa:	7dfb      	ldrb	r3, [r7, #23]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d138      	bne.n	800d422 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3b4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	330b      	adds	r3, #11
 800d3ba:	781a      	ldrb	r2, [r3, #0]
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	330b      	adds	r3, #11
 800d3c0:	f042 0220 	orr.w	r2, r2, #32
 800d3c4:	b2d2      	uxtb	r2, r2
 800d3c6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6818      	ldr	r0, [r3, #0]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	689b      	ldr	r3, [r3, #8]
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	68f9      	ldr	r1, [r7, #12]
 800d3d4:	f7fe f944 	bl	800b660 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f103 021c 	add.w	r2, r3, #28
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	68db      	ldr	r3, [r3, #12]
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	4610      	mov	r0, r2
 800d3e6:	f7fd f9ef 	bl	800a7c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	3316      	adds	r3, #22
 800d3ee:	6939      	ldr	r1, [r7, #16]
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7fd f9e9 	bl	800a7c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	3312      	adds	r3, #18
 800d3fa:	2100      	movs	r1, #0
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7fd f9c8 	bl	800a792 <st_word>
					fs->wflag = 1;
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	2201      	movs	r2, #1
 800d406:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7fd fc64 	bl	800acd8 <sync_fs>
 800d410:	4603      	mov	r3, r0
 800d412:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	7d1b      	ldrb	r3, [r3, #20]
 800d418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d41c:	b2da      	uxtb	r2, r3
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d422:	7dfb      	ldrb	r3, [r7, #23]
}
 800d424:	4618      	mov	r0, r3
 800d426:	3718      	adds	r7, #24
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f7ff ff7b 	bl	800d330 <f_sync>
 800d43a:	4603      	mov	r3, r0
 800d43c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d43e:	7bfb      	ldrb	r3, [r7, #15]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d118      	bne.n	800d476 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f107 0208 	add.w	r2, r7, #8
 800d44a:	4611      	mov	r1, r2
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7ff fc05 	bl	800cc5c <validate>
 800d452:	4603      	mov	r3, r0
 800d454:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d456:	7bfb      	ldrb	r3, [r7, #15]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d10c      	bne.n	800d476 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	691b      	ldr	r3, [r3, #16]
 800d460:	4618      	mov	r0, r3
 800d462:	f7fd fb67 	bl	800ab34 <dec_lock>
 800d466:	4603      	mov	r3, r0
 800d468:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d46a:	7bfb      	ldrb	r3, [r7, #15]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d102      	bne.n	800d476 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2200      	movs	r2, #0
 800d474:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d476:	7bfb      	ldrb	r3, [r7, #15]
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3710      	adds	r7, #16
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b086      	sub	sp, #24
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d101      	bne.n	800d494 <f_opendir+0x14>
 800d490:	2309      	movs	r3, #9
 800d492:	e064      	b.n	800d55e <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800d498:	f107 010c 	add.w	r1, r7, #12
 800d49c:	463b      	mov	r3, r7
 800d49e:	2200      	movs	r2, #0
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7ff f98b 	bl	800c7bc <find_volume>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d4aa:	7dfb      	ldrb	r3, [r7, #23]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d14f      	bne.n	800d550 <f_opendir+0xd0>
		obj->fs = fs;
 800d4b0:	68fa      	ldr	r2, [r7, #12]
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f7ff f872 	bl	800c5a4 <follow_path>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800d4c4:	7dfb      	ldrb	r3, [r7, #23]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d13d      	bne.n	800d546 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d4d0:	b25b      	sxtb	r3, r3
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	db12      	blt.n	800d4fc <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	799b      	ldrb	r3, [r3, #6]
 800d4da:	f003 0310 	and.w	r3, r3, #16
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d00a      	beq.n	800d4f8 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d4e2:	68fa      	ldr	r2, [r7, #12]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6a1b      	ldr	r3, [r3, #32]
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	4610      	mov	r0, r2
 800d4ec:	f7fe f899 	bl	800b622 <ld_clust>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	609a      	str	r2, [r3, #8]
 800d4f6:	e001      	b.n	800d4fc <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800d4f8:	2305      	movs	r3, #5
 800d4fa:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800d4fc:	7dfb      	ldrb	r3, [r7, #23]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d121      	bne.n	800d546 <f_opendir+0xc6>
				obj->id = fs->id;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	88da      	ldrh	r2, [r3, #6]
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d50a:	2100      	movs	r1, #0
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f7fd ff01 	bl	800b314 <dir_sdi>
 800d512:	4603      	mov	r3, r0
 800d514:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800d516:	7dfb      	ldrb	r3, [r7, #23]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d114      	bne.n	800d546 <f_opendir+0xc6>
					if (obj->sclust) {
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	689b      	ldr	r3, [r3, #8]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d00d      	beq.n	800d540 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d524:	2100      	movs	r1, #0
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f7fd fa76 	bl	800aa18 <inc_lock>
 800d52c:	4602      	mov	r2, r0
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	691b      	ldr	r3, [r3, #16]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d105      	bne.n	800d546 <f_opendir+0xc6>
 800d53a:	2312      	movs	r3, #18
 800d53c:	75fb      	strb	r3, [r7, #23]
 800d53e:	e002      	b.n	800d546 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	2200      	movs	r2, #0
 800d544:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d546:	7dfb      	ldrb	r3, [r7, #23]
 800d548:	2b04      	cmp	r3, #4
 800d54a:	d101      	bne.n	800d550 <f_opendir+0xd0>
 800d54c:	2305      	movs	r3, #5
 800d54e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d550:	7dfb      	ldrb	r3, [r7, #23]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d002      	beq.n	800d55c <f_opendir+0xdc>
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	2200      	movs	r2, #0
 800d55a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d55c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3718      	adds	r7, #24
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}

0800d566 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b084      	sub	sp, #16
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f107 0208 	add.w	r2, r7, #8
 800d574:	4611      	mov	r1, r2
 800d576:	4618      	mov	r0, r3
 800d578:	f7ff fb70 	bl	800cc5c <validate>
 800d57c:	4603      	mov	r3, r0
 800d57e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d580:	7bfb      	ldrb	r3, [r7, #15]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d110      	bne.n	800d5a8 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	691b      	ldr	r3, [r3, #16]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d006      	beq.n	800d59c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	691b      	ldr	r3, [r3, #16]
 800d592:	4618      	mov	r0, r3
 800d594:	f7fd face 	bl	800ab34 <dec_lock>
 800d598:	4603      	mov	r3, r0
 800d59a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800d59c:	7bfb      	ldrb	r3, [r7, #15]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d102      	bne.n	800d5a8 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800d5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3710      	adds	r7, #16
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}

0800d5b2 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d5b2:	b580      	push	{r7, lr}
 800d5b4:	b084      	sub	sp, #16
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	6078      	str	r0, [r7, #4]
 800d5ba:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f107 0208 	add.w	r2, r7, #8
 800d5c2:	4611      	mov	r1, r2
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7ff fb49 	bl	800cc5c <validate>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d5ce:	7bfb      	ldrb	r3, [r7, #15]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d126      	bne.n	800d622 <f_readdir+0x70>
		if (!fno) {
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d106      	bne.n	800d5e8 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d5da:	2100      	movs	r1, #0
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f7fd fe99 	bl	800b314 <dir_sdi>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	73fb      	strb	r3, [r7, #15]
 800d5e6:	e01c      	b.n	800d622 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800d5e8:	2100      	movs	r1, #0
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f7fe fa43 	bl	800ba76 <dir_read>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800d5f4:	7bfb      	ldrb	r3, [r7, #15]
 800d5f6:	2b04      	cmp	r3, #4
 800d5f8:	d101      	bne.n	800d5fe <f_readdir+0x4c>
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800d5fe:	7bfb      	ldrb	r3, [r7, #15]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d10e      	bne.n	800d622 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d604:	6839      	ldr	r1, [r7, #0]
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f7fe fc94 	bl	800bf34 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d60c:	2100      	movs	r1, #0
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f7fd fefb 	bl	800b40a <dir_next>
 800d614:	4603      	mov	r3, r0
 800d616:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d618:	7bfb      	ldrb	r3, [r7, #15]
 800d61a:	2b04      	cmp	r3, #4
 800d61c:	d101      	bne.n	800d622 <f_readdir+0x70>
 800d61e:	2300      	movs	r3, #0
 800d620:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800d622:	7bfb      	ldrb	r3, [r7, #15]
}
 800d624:	4618      	mov	r0, r3
 800d626:	3710      	adds	r7, #16
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b084      	sub	sp, #16
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800d636:	6839      	ldr	r1, [r7, #0]
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f7ff ffba 	bl	800d5b2 <f_readdir>
 800d63e:	4603      	mov	r3, r0
 800d640:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800d642:	7bfb      	ldrb	r3, [r7, #15]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d114      	bne.n	800d672 <f_findnext+0x46>
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d011      	beq.n	800d672 <f_findnext+0x46>
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	7d9b      	ldrb	r3, [r3, #22]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d00d      	beq.n	800d672 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	f103 0116 	add.w	r1, r3, #22
 800d660:	2300      	movs	r3, #0
 800d662:	2200      	movs	r2, #0
 800d664:	f7fe fd6a 	bl	800c13c <pattern_matching>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d100      	bne.n	800d670 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 800d66e:	e7e2      	b.n	800d636 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800d670:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 800d672:	7bfb      	ldrb	r3, [r7, #15]
}
 800d674:	4618      	mov	r0, r3
 800d676:	3710      	adds	r7, #16
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b086      	sub	sp, #24
 800d680:	af00      	add	r7, sp, #0
 800d682:	60f8      	str	r0, [r7, #12]
 800d684:	60b9      	str	r1, [r7, #8]
 800d686:	607a      	str	r2, [r7, #4]
 800d688:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	683a      	ldr	r2, [r7, #0]
 800d68e:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 800d690:	6879      	ldr	r1, [r7, #4]
 800d692:	68f8      	ldr	r0, [r7, #12]
 800d694:	f7ff fef4 	bl	800d480 <f_opendir>
 800d698:	4603      	mov	r3, r0
 800d69a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d69c:	7dfb      	ldrb	r3, [r7, #23]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d105      	bne.n	800d6ae <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 800d6a2:	68b9      	ldr	r1, [r7, #8]
 800d6a4:	68f8      	ldr	r0, [r7, #12]
 800d6a6:	f7ff ffc1 	bl	800d62c <f_findnext>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 800d6ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3718      	adds	r7, #24
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b087      	sub	sp, #28
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d6ce:	4b1f      	ldr	r3, [pc, #124]	; (800d74c <FATFS_LinkDriverEx+0x94>)
 800d6d0:	7a5b      	ldrb	r3, [r3, #9]
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d131      	bne.n	800d73c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d6d8:	4b1c      	ldr	r3, [pc, #112]	; (800d74c <FATFS_LinkDriverEx+0x94>)
 800d6da:	7a5b      	ldrb	r3, [r3, #9]
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	461a      	mov	r2, r3
 800d6e0:	4b1a      	ldr	r3, [pc, #104]	; (800d74c <FATFS_LinkDriverEx+0x94>)
 800d6e2:	2100      	movs	r1, #0
 800d6e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d6e6:	4b19      	ldr	r3, [pc, #100]	; (800d74c <FATFS_LinkDriverEx+0x94>)
 800d6e8:	7a5b      	ldrb	r3, [r3, #9]
 800d6ea:	b2db      	uxtb	r3, r3
 800d6ec:	4a17      	ldr	r2, [pc, #92]	; (800d74c <FATFS_LinkDriverEx+0x94>)
 800d6ee:	009b      	lsls	r3, r3, #2
 800d6f0:	4413      	add	r3, r2
 800d6f2:	68fa      	ldr	r2, [r7, #12]
 800d6f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d6f6:	4b15      	ldr	r3, [pc, #84]	; (800d74c <FATFS_LinkDriverEx+0x94>)
 800d6f8:	7a5b      	ldrb	r3, [r3, #9]
 800d6fa:	b2db      	uxtb	r3, r3
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	4b13      	ldr	r3, [pc, #76]	; (800d74c <FATFS_LinkDriverEx+0x94>)
 800d700:	4413      	add	r3, r2
 800d702:	79fa      	ldrb	r2, [r7, #7]
 800d704:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d706:	4b11      	ldr	r3, [pc, #68]	; (800d74c <FATFS_LinkDriverEx+0x94>)
 800d708:	7a5b      	ldrb	r3, [r3, #9]
 800d70a:	b2db      	uxtb	r3, r3
 800d70c:	1c5a      	adds	r2, r3, #1
 800d70e:	b2d1      	uxtb	r1, r2
 800d710:	4a0e      	ldr	r2, [pc, #56]	; (800d74c <FATFS_LinkDriverEx+0x94>)
 800d712:	7251      	strb	r1, [r2, #9]
 800d714:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d716:	7dbb      	ldrb	r3, [r7, #22]
 800d718:	3330      	adds	r3, #48	; 0x30
 800d71a:	b2da      	uxtb	r2, r3
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	3301      	adds	r3, #1
 800d724:	223a      	movs	r2, #58	; 0x3a
 800d726:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	3302      	adds	r3, #2
 800d72c:	222f      	movs	r2, #47	; 0x2f
 800d72e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	3303      	adds	r3, #3
 800d734:	2200      	movs	r2, #0
 800d736:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d738:	2300      	movs	r3, #0
 800d73a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d73c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d73e:	4618      	mov	r0, r3
 800d740:	371c      	adds	r7, #28
 800d742:	46bd      	mov	sp, r7
 800d744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d748:	4770      	bx	lr
 800d74a:	bf00      	nop
 800d74c:	20000940 	.word	0x20000940

0800d750 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d75a:	2200      	movs	r2, #0
 800d75c:	6839      	ldr	r1, [r7, #0]
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f7ff ffaa 	bl	800d6b8 <FATFS_LinkDriverEx>
 800d764:	4603      	mov	r3, r0
}
 800d766:	4618      	mov	r0, r3
 800d768:	3708      	adds	r7, #8
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
	...

0800d770 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d770:	b480      	push	{r7}
 800d772:	b085      	sub	sp, #20
 800d774:	af00      	add	r7, sp, #0
 800d776:	4603      	mov	r3, r0
 800d778:	6039      	str	r1, [r7, #0]
 800d77a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d77c:	88fb      	ldrh	r3, [r7, #6]
 800d77e:	2b7f      	cmp	r3, #127	; 0x7f
 800d780:	d802      	bhi.n	800d788 <ff_convert+0x18>
		c = chr;
 800d782:	88fb      	ldrh	r3, [r7, #6]
 800d784:	81fb      	strh	r3, [r7, #14]
 800d786:	e025      	b.n	800d7d4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d00b      	beq.n	800d7a6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d78e:	88fb      	ldrh	r3, [r7, #6]
 800d790:	2bff      	cmp	r3, #255	; 0xff
 800d792:	d805      	bhi.n	800d7a0 <ff_convert+0x30>
 800d794:	88fb      	ldrh	r3, [r7, #6]
 800d796:	3b80      	subs	r3, #128	; 0x80
 800d798:	4a12      	ldr	r2, [pc, #72]	; (800d7e4 <ff_convert+0x74>)
 800d79a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d79e:	e000      	b.n	800d7a2 <ff_convert+0x32>
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	81fb      	strh	r3, [r7, #14]
 800d7a4:	e016      	b.n	800d7d4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	81fb      	strh	r3, [r7, #14]
 800d7aa:	e009      	b.n	800d7c0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d7ac:	89fb      	ldrh	r3, [r7, #14]
 800d7ae:	4a0d      	ldr	r2, [pc, #52]	; (800d7e4 <ff_convert+0x74>)
 800d7b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7b4:	88fa      	ldrh	r2, [r7, #6]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d006      	beq.n	800d7c8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d7ba:	89fb      	ldrh	r3, [r7, #14]
 800d7bc:	3301      	adds	r3, #1
 800d7be:	81fb      	strh	r3, [r7, #14]
 800d7c0:	89fb      	ldrh	r3, [r7, #14]
 800d7c2:	2b7f      	cmp	r3, #127	; 0x7f
 800d7c4:	d9f2      	bls.n	800d7ac <ff_convert+0x3c>
 800d7c6:	e000      	b.n	800d7ca <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d7c8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d7ca:	89fb      	ldrh	r3, [r7, #14]
 800d7cc:	3380      	adds	r3, #128	; 0x80
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	b2db      	uxtb	r3, r3
 800d7d2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d7d4:	89fb      	ldrh	r3, [r7, #14]
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3714      	adds	r7, #20
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e0:	4770      	bx	lr
 800d7e2:	bf00      	nop
 800d7e4:	0800da74 	.word	0x0800da74

0800d7e8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b087      	sub	sp, #28
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d7f2:	88fb      	ldrh	r3, [r7, #6]
 800d7f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7f8:	d201      	bcs.n	800d7fe <ff_wtoupper+0x16>
 800d7fa:	4b3e      	ldr	r3, [pc, #248]	; (800d8f4 <ff_wtoupper+0x10c>)
 800d7fc:	e000      	b.n	800d800 <ff_wtoupper+0x18>
 800d7fe:	4b3e      	ldr	r3, [pc, #248]	; (800d8f8 <ff_wtoupper+0x110>)
 800d800:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	1c9a      	adds	r2, r3, #2
 800d806:	617a      	str	r2, [r7, #20]
 800d808:	881b      	ldrh	r3, [r3, #0]
 800d80a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d80c:	8a7b      	ldrh	r3, [r7, #18]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d068      	beq.n	800d8e4 <ff_wtoupper+0xfc>
 800d812:	88fa      	ldrh	r2, [r7, #6]
 800d814:	8a7b      	ldrh	r3, [r7, #18]
 800d816:	429a      	cmp	r2, r3
 800d818:	d364      	bcc.n	800d8e4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	1c9a      	adds	r2, r3, #2
 800d81e:	617a      	str	r2, [r7, #20]
 800d820:	881b      	ldrh	r3, [r3, #0]
 800d822:	823b      	strh	r3, [r7, #16]
 800d824:	8a3b      	ldrh	r3, [r7, #16]
 800d826:	0a1b      	lsrs	r3, r3, #8
 800d828:	81fb      	strh	r3, [r7, #14]
 800d82a:	8a3b      	ldrh	r3, [r7, #16]
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d830:	88fa      	ldrh	r2, [r7, #6]
 800d832:	8a79      	ldrh	r1, [r7, #18]
 800d834:	8a3b      	ldrh	r3, [r7, #16]
 800d836:	440b      	add	r3, r1
 800d838:	429a      	cmp	r2, r3
 800d83a:	da49      	bge.n	800d8d0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d83c:	89fb      	ldrh	r3, [r7, #14]
 800d83e:	2b08      	cmp	r3, #8
 800d840:	d84f      	bhi.n	800d8e2 <ff_wtoupper+0xfa>
 800d842:	a201      	add	r2, pc, #4	; (adr r2, 800d848 <ff_wtoupper+0x60>)
 800d844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d848:	0800d86d 	.word	0x0800d86d
 800d84c:	0800d87f 	.word	0x0800d87f
 800d850:	0800d895 	.word	0x0800d895
 800d854:	0800d89d 	.word	0x0800d89d
 800d858:	0800d8a5 	.word	0x0800d8a5
 800d85c:	0800d8ad 	.word	0x0800d8ad
 800d860:	0800d8b5 	.word	0x0800d8b5
 800d864:	0800d8bd 	.word	0x0800d8bd
 800d868:	0800d8c5 	.word	0x0800d8c5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d86c:	88fa      	ldrh	r2, [r7, #6]
 800d86e:	8a7b      	ldrh	r3, [r7, #18]
 800d870:	1ad3      	subs	r3, r2, r3
 800d872:	005b      	lsls	r3, r3, #1
 800d874:	697a      	ldr	r2, [r7, #20]
 800d876:	4413      	add	r3, r2
 800d878:	881b      	ldrh	r3, [r3, #0]
 800d87a:	80fb      	strh	r3, [r7, #6]
 800d87c:	e027      	b.n	800d8ce <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d87e:	88fa      	ldrh	r2, [r7, #6]
 800d880:	8a7b      	ldrh	r3, [r7, #18]
 800d882:	1ad3      	subs	r3, r2, r3
 800d884:	b29b      	uxth	r3, r3
 800d886:	f003 0301 	and.w	r3, r3, #1
 800d88a:	b29b      	uxth	r3, r3
 800d88c:	88fa      	ldrh	r2, [r7, #6]
 800d88e:	1ad3      	subs	r3, r2, r3
 800d890:	80fb      	strh	r3, [r7, #6]
 800d892:	e01c      	b.n	800d8ce <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d894:	88fb      	ldrh	r3, [r7, #6]
 800d896:	3b10      	subs	r3, #16
 800d898:	80fb      	strh	r3, [r7, #6]
 800d89a:	e018      	b.n	800d8ce <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d89c:	88fb      	ldrh	r3, [r7, #6]
 800d89e:	3b20      	subs	r3, #32
 800d8a0:	80fb      	strh	r3, [r7, #6]
 800d8a2:	e014      	b.n	800d8ce <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d8a4:	88fb      	ldrh	r3, [r7, #6]
 800d8a6:	3b30      	subs	r3, #48	; 0x30
 800d8a8:	80fb      	strh	r3, [r7, #6]
 800d8aa:	e010      	b.n	800d8ce <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d8ac:	88fb      	ldrh	r3, [r7, #6]
 800d8ae:	3b1a      	subs	r3, #26
 800d8b0:	80fb      	strh	r3, [r7, #6]
 800d8b2:	e00c      	b.n	800d8ce <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d8b4:	88fb      	ldrh	r3, [r7, #6]
 800d8b6:	3308      	adds	r3, #8
 800d8b8:	80fb      	strh	r3, [r7, #6]
 800d8ba:	e008      	b.n	800d8ce <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d8bc:	88fb      	ldrh	r3, [r7, #6]
 800d8be:	3b50      	subs	r3, #80	; 0x50
 800d8c0:	80fb      	strh	r3, [r7, #6]
 800d8c2:	e004      	b.n	800d8ce <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d8c4:	88fb      	ldrh	r3, [r7, #6]
 800d8c6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d8ca:	80fb      	strh	r3, [r7, #6]
 800d8cc:	bf00      	nop
			}
			break;
 800d8ce:	e008      	b.n	800d8e2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d8d0:	89fb      	ldrh	r3, [r7, #14]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d195      	bne.n	800d802 <ff_wtoupper+0x1a>
 800d8d6:	8a3b      	ldrh	r3, [r7, #16]
 800d8d8:	005b      	lsls	r3, r3, #1
 800d8da:	697a      	ldr	r2, [r7, #20]
 800d8dc:	4413      	add	r3, r2
 800d8de:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d8e0:	e78f      	b.n	800d802 <ff_wtoupper+0x1a>
			break;
 800d8e2:	bf00      	nop
	}

	return chr;
 800d8e4:	88fb      	ldrh	r3, [r7, #6]
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	371c      	adds	r7, #28
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr
 800d8f2:	bf00      	nop
 800d8f4:	0800db74 	.word	0x0800db74
 800d8f8:	0800dd68 	.word	0x0800dd68

0800d8fc <__libc_init_array>:
 800d8fc:	b570      	push	{r4, r5, r6, lr}
 800d8fe:	4d0d      	ldr	r5, [pc, #52]	; (800d934 <__libc_init_array+0x38>)
 800d900:	4c0d      	ldr	r4, [pc, #52]	; (800d938 <__libc_init_array+0x3c>)
 800d902:	1b64      	subs	r4, r4, r5
 800d904:	10a4      	asrs	r4, r4, #2
 800d906:	2600      	movs	r6, #0
 800d908:	42a6      	cmp	r6, r4
 800d90a:	d109      	bne.n	800d920 <__libc_init_array+0x24>
 800d90c:	4d0b      	ldr	r5, [pc, #44]	; (800d93c <__libc_init_array+0x40>)
 800d90e:	4c0c      	ldr	r4, [pc, #48]	; (800d940 <__libc_init_array+0x44>)
 800d910:	f000 fa88 	bl	800de24 <_init>
 800d914:	1b64      	subs	r4, r4, r5
 800d916:	10a4      	asrs	r4, r4, #2
 800d918:	2600      	movs	r6, #0
 800d91a:	42a6      	cmp	r6, r4
 800d91c:	d105      	bne.n	800d92a <__libc_init_array+0x2e>
 800d91e:	bd70      	pop	{r4, r5, r6, pc}
 800d920:	f855 3b04 	ldr.w	r3, [r5], #4
 800d924:	4798      	blx	r3
 800d926:	3601      	adds	r6, #1
 800d928:	e7ee      	b.n	800d908 <__libc_init_array+0xc>
 800d92a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d92e:	4798      	blx	r3
 800d930:	3601      	adds	r6, #1
 800d932:	e7f2      	b.n	800d91a <__libc_init_array+0x1e>
 800d934:	0800de3c 	.word	0x0800de3c
 800d938:	0800de3c 	.word	0x0800de3c
 800d93c:	0800de3c 	.word	0x0800de3c
 800d940:	0800de40 	.word	0x0800de40

0800d944 <memset>:
 800d944:	4402      	add	r2, r0
 800d946:	4603      	mov	r3, r0
 800d948:	4293      	cmp	r3, r2
 800d94a:	d100      	bne.n	800d94e <memset+0xa>
 800d94c:	4770      	bx	lr
 800d94e:	f803 1b01 	strb.w	r1, [r3], #1
 800d952:	e7f9      	b.n	800d948 <memset+0x4>
 800d954:	63656c45 	.word	0x63656c45
 800d958:	736f7274 	.word	0x736f7274
 800d95c:	6c656574 	.word	0x6c656574
 800d960:	6961445f 	.word	0x6961445f
 800d964:	415f7973 	.word	0x415f7973
 800d968:	6f696475 	.word	0x6f696475
 800d96c:	6e69622e 	.word	0x6e69622e
	...
 800d978:	3c3a2a22 	.word	0x3c3a2a22
 800d97c:	7f7c3f3e 	.word	0x7f7c3f3e
 800d980:	00000000 	.word	0x00000000
 800d984:	3d3b2c2b 	.word	0x3d3b2c2b
 800d988:	00005d5b 	.word	0x00005d5b
 800d98c:	4d90feeb 	.word	0x4d90feeb
 800d990:	534f4453 	.word	0x534f4453
 800d994:	00302e35 	.word	0x00302e35
 800d998:	4e204f4e 	.word	0x4e204f4e
 800d99c:	20454d41 	.word	0x20454d41
 800d9a0:	46202020 	.word	0x46202020
 800d9a4:	32335441 	.word	0x32335441
 800d9a8:	00202020 	.word	0x00202020
 800d9ac:	4e204f4e 	.word	0x4e204f4e
 800d9b0:	20454d41 	.word	0x20454d41
 800d9b4:	46202020 	.word	0x46202020
 800d9b8:	20205441 	.word	0x20205441
 800d9bc:	00202020 	.word	0x00202020

0800d9c0 <D1CorePrescTable>:
 800d9c0:	00000000 04030201 04030201 09080706     ................

0800d9d0 <SD_Driver>:
 800d9d0:	0800a455 0800a491 0800a4ad 0800a4ef     U...............
 800d9e0:	0800a531                                1...

0800d9e4 <ExCvt>:
 800d9e4:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
 800d9f4:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
 800da04:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
 800da14:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
 800da24:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
 800da34:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
 800da44:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
 800da54:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0800da64 <LfnOfs>:
 800da64:	07050301 12100e09 1c181614 0000001e     ................

0800da74 <Tbl>:
 800da74:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
 800da84:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
 800da94:	00e600c9 00f400c6 00f200f6 00f900fb     ................
 800daa4:	00d600ff 00f800dc 00d800a3 019200d7     ................
 800dab4:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
 800dac4:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
 800dad4:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
 800dae4:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
 800daf4:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
 800db04:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
 800db14:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
 800db24:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
 800db34:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
 800db44:	00da00de 00d900db 00dd00fd 00b400af     ................
 800db54:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
 800db64:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0800db74 <cvt1.1>:
 800db74:	031a0061 031700e0 030700f8 000100ff     a...............
 800db84:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
 800db94:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
 800dba4:	01840182 01860184 01870187 018a0189     ................
 800dbb4:	018b018b 018e018d 0190018f 01910191     ................
 800dbc4:	01940193 019601f6 01980197 023d0198     ..............=.
 800dbd4:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
 800dbe4:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
 800dbf4:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
 800dc04:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
 800dc14:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
 800dc24:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
 800dc34:	01ca01cb 011001cd 000101dd 01de018e     ................
 800dc44:	01f30112 01f10003 01f401f4 012801f8     ..............(.
 800dc54:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
 800dc64:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
 800dc74:	01810040 02550186 018a0189 018f0258     @.....U.....X...
 800dc84:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
 800dc94:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
 800dca4:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
 800dcb4:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
 800dcc4:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
 800dcd4:	01a90282 02850284 02870286 024401ae     ..............D.
 800dce4:	01b201b1 028d0245 028f028e 02910290     ....E...........
 800dcf4:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
 800dd04:	03880386 038a0389 031103b1 000203c2     ................
 800dd14:	03a303a3 030803c4 000303cc 038e038c     ................
 800dd24:	03d8038f 03f20118 03f9000a 03f403f3     ................
 800dd34:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
 800dd44:	04500320 04600710 048a0122 04c10136      .P...`."...6...
 800dd54:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
 800dd64:	00000000                                ....

0800dd68 <cvt2.0>:
 800dd68:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
 800dd78:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
 800dd88:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
 800dd98:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
 800dda8:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
 800ddb8:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
 800ddc8:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
 800ddd8:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
 800dde8:	1fec0001 00011ff2 214e1ffc 21320001     ..........N!..2!
 800ddf8:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
 800de08:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
 800de18:	2d000164 ff410826 0000031a              d..-&.A.....

0800de24 <_init>:
 800de24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de26:	bf00      	nop
 800de28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de2a:	bc08      	pop	{r3}
 800de2c:	469e      	mov	lr, r3
 800de2e:	4770      	bx	lr

0800de30 <_fini>:
 800de30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de32:	bf00      	nop
 800de34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de36:	bc08      	pop	{r3}
 800de38:	469e      	mov	lr, r3
 800de3a:	4770      	bx	lr
