
Electrosteel_Daisy_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000dc40  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  0800ded8  0800ded8  00020014  2**0
                  CONTENTS
  3 .exidx        00000000  0800ded8  0800ded8  00020014  2**0
                  CONTENTS
  4 .ARM.attributes 0000002e  0800ded8  0800ded8  00020014  2**0
                  CONTENTS, READONLY
  5 .init_array   00000004  0800ded8  0800ded8  0001ded8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800dedc  0800dedc  0001dedc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000014  20000000  0800dee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000938  20000014  0800def4  00020014  2**2
                  ALLOC
  9 .dtcmram_bss  00000000  2000094c  2000094c  00020042  2**0
                  CONTENTS
 10 .sram1_bss    00040000  24000000  24000000  00030000  2**5
                  ALLOC
 11 .userflash    00000020  38800000  38800000  00030000  2**5
                  ALLOC
 12 .sdram_bss    00000000  c0000000  c0000000  00020042  2**0
                  CONTENTS
 13 .qspiflash_text 00000000  90000000  90000000  00020042  2**0
                  CONTENTS
 14 .qspiflash_data 00000000  90000000  90000000  00020042  2**0
                  CONTENTS
 15 .qspiflash_bss 00040000  90000000  90000000  00030000  2**5
                  ALLOC
 16 .heap         00000000  2000094c  2000094c  00020042  2**0
                  CONTENTS
 17 .reserved_for_stack 00000000  2000094c  2000094c  00020042  2**0
                  CONTENTS
 18 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 19 .debug_info   00019e8e  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00003816  00000000  00000000  00039f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00001380  00000000  00000000  0003d729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00000edf  00000000  00000000  0003eaa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  00039810  00000000  00000000  0003f988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   0001c5c0  00000000  00000000  00079198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    0015c722  00000000  00000000  00095758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_frame  00004ff8  00000000  00000000  001f1e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000014 	.word	0x20000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ded8 	.word	0x0800ded8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000018 	.word	0x20000018
 80002d4:	0800ded8 	.word	0x0800ded8

080002d8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08e      	sub	sp, #56	; 0x38
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002ee:	4bb6      	ldr	r3, [pc, #728]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	4ab4      	ldr	r2, [pc, #720]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002fe:	4bb2      	ldr	r3, [pc, #712]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000304:	f003 0310 	and.w	r3, r3, #16
 8000308:	623b      	str	r3, [r7, #32]
 800030a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800030c:	4bae      	ldr	r3, [pc, #696]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	4aad      	ldr	r2, [pc, #692]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 8000314:	f043 0302 	orr.w	r3, r3, #2
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800031c:	4baa      	ldr	r3, [pc, #680]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000322:	f003 0302 	and.w	r3, r3, #2
 8000326:	61fb      	str	r3, [r7, #28]
 8000328:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800032a:	4ba7      	ldr	r3, [pc, #668]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	4aa5      	ldr	r2, [pc, #660]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 8000332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800033a:	4ba3      	ldr	r3, [pc, #652]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 800033c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000344:	61bb      	str	r3, [r7, #24]
 8000346:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000348:	4b9f      	ldr	r3, [pc, #636]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 800034a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800034e:	4a9e      	ldr	r2, [pc, #632]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 8000350:	f043 0308 	orr.w	r3, r3, #8
 8000354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000358:	4b9b      	ldr	r3, [pc, #620]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 800035a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800035e:	f003 0308 	and.w	r3, r3, #8
 8000362:	617b      	str	r3, [r7, #20]
 8000364:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000366:	4b98      	ldr	r3, [pc, #608]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 8000368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800036c:	4a96      	ldr	r2, [pc, #600]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 800036e:	f043 0304 	orr.w	r3, r3, #4
 8000372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000376:	4b94      	ldr	r3, [pc, #592]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 8000378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800037c:	f003 0304 	and.w	r3, r3, #4
 8000380:	613b      	str	r3, [r7, #16]
 8000382:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000384:	4b90      	ldr	r3, [pc, #576]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 8000386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800038a:	4a8f      	ldr	r2, [pc, #572]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000394:	4b8c      	ldr	r3, [pc, #560]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 8000396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80003a2:	4b89      	ldr	r3, [pc, #548]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80003a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003a8:	4a87      	ldr	r2, [pc, #540]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80003aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003b2:	4b85      	ldr	r3, [pc, #532]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80003b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003c0:	4b81      	ldr	r3, [pc, #516]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80003c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003c6:	4a80      	ldr	r2, [pc, #512]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80003c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003d0:	4b7d      	ldr	r3, [pc, #500]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80003d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003de:	4b7a      	ldr	r3, [pc, #488]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80003e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003e4:	4a78      	ldr	r2, [pc, #480]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80003e6:	f043 0320 	orr.w	r3, r3, #32
 80003ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003ee:	4b76      	ldr	r3, [pc, #472]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 80003f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003f4:	f003 0320 	and.w	r3, r3, #32
 80003f8:	603b      	str	r3, [r7, #0]
 80003fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2180      	movs	r1, #128	; 0x80
 8000400:	4872      	ldr	r0, [pc, #456]	; (80005cc <MX_GPIO_Init+0x2f4>)
 8000402:	f002 fb11 	bl	8002a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2180      	movs	r1, #128	; 0x80
 800040a:	4871      	ldr	r0, [pc, #452]	; (80005d0 <MX_GPIO_Init+0x2f8>)
 800040c:	f002 fb0c 	bl	8002a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE1 PE0
                           PE4 PE5 PE6 PE13
                           PE8 PE9 PE11 PE14
                           PE7 PE10 PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 8000410:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000414:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_13
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000416:	2303      	movs	r3, #3
 8000418:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800041e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000422:	4619      	mov	r1, r3
 8000424:	486b      	ldr	r0, [pc, #428]	; (80005d4 <MX_GPIO_Init+0x2fc>)
 8000426:	f002 f82d 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB4 PB2 PB13
                           PB1 PB0 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_13
 800042a:	f642 4337 	movw	r3, #11319	; 0x2c37
 800042e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000430:	2303      	movs	r3, #3
 8000432:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	2300      	movs	r3, #0
 8000436:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800043c:	4619      	mov	r1, r3
 800043e:	4863      	ldr	r0, [pc, #396]	; (80005cc <MX_GPIO_Init+0x2f4>)
 8000440:	f002 f820 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG12
                           PG11 PG10 PG9 PG8
                           PG7 PG5 PG4 PG3
                           PG2 PG1 PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12
 8000444:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8000448:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800044a:	2303      	movs	r3, #3
 800044c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000456:	4619      	mov	r1, r3
 8000458:	485f      	ldr	r0, [pc, #380]	; (80005d8 <MX_GPIO_Init+0x300>)
 800045a:	f002 f813 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD1 PD4 PD3 PD15
                           PD14 PD13 PD12 PD11
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 800045e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000462:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_15
                          |GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_11
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000464:	2303      	movs	r3, #3
 8000466:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800046c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000470:	4619      	mov	r1, r3
 8000472:	485a      	ldr	r0, [pc, #360]	; (80005dc <MX_GPIO_Init+0x304>)
 8000474:	f002 f806 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA9 PA8 PA0 PA4
                           PA6 PA5 PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 8000478:	f649 73f9 	movw	r3, #40953	; 0x9ff9
 800047c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800047e:	2303      	movs	r3, #3
 8000480:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800048a:	4619      	mov	r1, r3
 800048c:	4854      	ldr	r0, [pc, #336]	; (80005e0 <MX_GPIO_Init+0x308>)
 800048e:	f001 fff9 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000492:	2380      	movs	r3, #128	; 0x80
 8000494:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000496:	2301      	movs	r3, #1
 8000498:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	2300      	movs	r3, #0
 80004a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004a6:	4619      	mov	r1, r3
 80004a8:	4848      	ldr	r0, [pc, #288]	; (80005cc <MX_GPIO_Init+0x2f4>)
 80004aa:	f001 ffeb 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004ae:	2340      	movs	r3, #64	; 0x40
 80004b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b2:	2300      	movs	r3, #0
 80004b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004b6:	2301      	movs	r3, #1
 80004b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004be:	4619      	mov	r1, r3
 80004c0:	4842      	ldr	r0, [pc, #264]	; (80005cc <MX_GPIO_Init+0x2f4>)
 80004c2:	f001 ffdf 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI7 PI6 PI5 PI3
                           PI2 PI8 PI9 PI4
                           PI1 PI10 PI11 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
 80004c6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80004ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4
                          |GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004cc:	2303      	movs	r3, #3
 80004ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80004d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004d8:	4619      	mov	r1, r3
 80004da:	4842      	ldr	r0, [pc, #264]	; (80005e4 <MX_GPIO_Init+0x30c>)
 80004dc:	f001 ffd2 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 80004e0:	f24e 037f 	movw	r3, #57471	; 0xe07f
 80004e4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004e6:	2303      	movs	r3, #3
 80004e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f2:	4619      	mov	r1, r3
 80004f4:	4836      	ldr	r0, [pc, #216]	; (80005d0 <MX_GPIO_Init+0x2f8>)
 80004f6:	f001 ffc5 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH2
                           PH3 PH4 PH5 PH12
                           PH11 PH10 PH6 PH8
                           PH9 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
 80004fa:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80004fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000500:	2303      	movs	r3, #3
 8000502:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800050c:	4619      	mov	r1, r3
 800050e:	4836      	ldr	r0, [pc, #216]	; (80005e8 <MX_GPIO_Init+0x310>)
 8000510:	f001 ffb8 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF2 PF1 PF3
                           PF4 PF5 PF13 PF12
                           PF15 PF11 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 8000514:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000518:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800051a:	2303      	movs	r3, #3
 800051c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000526:	4619      	mov	r1, r3
 8000528:	4830      	ldr	r0, [pc, #192]	; (80005ec <MX_GPIO_Init+0x314>)
 800052a:	f001 ffab 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800052e:	2380      	movs	r3, #128	; 0x80
 8000530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000532:	2301      	movs	r3, #1
 8000534:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053a:	2300      	movs	r3, #0
 800053c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800053e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000542:	4619      	mov	r1, r3
 8000544:	4822      	ldr	r0, [pc, #136]	; (80005d0 <MX_GPIO_Init+0x2f8>)
 8000546:	f001 ff9d 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800054a:	2302      	movs	r3, #2
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800054e:	2300      	movs	r3, #0
 8000550:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000552:	2301      	movs	r3, #1
 8000554:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055a:	4619      	mov	r1, r3
 800055c:	4820      	ldr	r0, [pc, #128]	; (80005e0 <MX_GPIO_Init+0x308>)
 800055e:	f001 ff91 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000562:	2304      	movs	r3, #4
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000566:	2300      	movs	r3, #0
 8000568:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800056a:	2302      	movs	r3, #2
 800056c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000572:	4619      	mov	r1, r3
 8000574:	481a      	ldr	r0, [pc, #104]	; (80005e0 <MX_GPIO_Init+0x308>)
 8000576:	f001 ff85 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800057a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800057e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000580:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000584:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000586:	2302      	movs	r3, #2
 8000588:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800058e:	4619      	mov	r1, r3
 8000590:	480e      	ldr	r0, [pc, #56]	; (80005cc <MX_GPIO_Init+0x2f4>)
 8000592:	f001 ff77 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000596:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800059a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059c:	2300      	movs	r3, #0
 800059e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005a0:	2302      	movs	r3, #2
 80005a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a8:	4619      	mov	r1, r3
 80005aa:	4808      	ldr	r0, [pc, #32]	; (80005cc <MX_GPIO_Init+0x2f4>)
 80005ac:	f001 ff6a 	bl	8002484 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2101      	movs	r1, #1
 80005b4:	2028      	movs	r0, #40	; 0x28
 80005b6:	f001 fea2 	bl	80022fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005ba:	2028      	movs	r0, #40	; 0x28
 80005bc:	f001 feb9 	bl	8002332 <HAL_NVIC_EnableIRQ>

}
 80005c0:	bf00      	nop
 80005c2:	3738      	adds	r7, #56	; 0x38
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	58024400 	.word	0x58024400
 80005cc:	58020400 	.word	0x58020400
 80005d0:	58020800 	.word	0x58020800
 80005d4:	58021000 	.word	0x58021000
 80005d8:	58021800 	.word	0x58021800
 80005dc:	58020c00 	.word	0x58020c00
 80005e0:	58020000 	.word	0x58020000
 80005e4:	58022000 	.word	0x58022000
 80005e8:	58021c00 	.word	0x58021c00
 80005ec:	58021400 	.word	0x58021400

080005f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_I2C1_Init+0x74>)
 80005f6:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <MX_I2C1_Init+0x78>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_I2C1_Init+0x74>)
 80005fc:	4a1b      	ldr	r2, [pc, #108]	; (800066c <MX_I2C1_Init+0x7c>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 68;
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_I2C1_Init+0x74>)
 8000602:	2244      	movs	r2, #68	; 0x44
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_I2C1_Init+0x74>)
 8000608:	2201      	movs	r2, #1
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_I2C1_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_I2C1_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_I2C1_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_I2C1_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_I2C1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062a:	480e      	ldr	r0, [pc, #56]	; (8000664 <MX_I2C1_Init+0x74>)
 800062c:	f002 fa4a 	bl	8002ac4 <HAL_I2C_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000636:	f001 f936 	bl	80018a6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800063a:	2100      	movs	r1, #0
 800063c:	4809      	ldr	r0, [pc, #36]	; (8000664 <MX_I2C1_Init+0x74>)
 800063e:	f002 ff97 	bl	8003570 <HAL_I2CEx_ConfigAnalogFilter>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000648:	f001 f92d 	bl	80018a6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800064c:	2100      	movs	r1, #0
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_I2C1_Init+0x74>)
 8000650:	f002 ffd9 	bl	8003606 <HAL_I2CEx_ConfigDigitalFilter>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800065a:	f001 f924 	bl	80018a6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000030 	.word	0x20000030
 8000668:	40005400 	.word	0x40005400
 800066c:	00b03fdb 	.word	0x00b03fdb

08000670 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b0ba      	sub	sp, #232	; 0xe8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	22c0      	movs	r2, #192	; 0xc0
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f00d f981 	bl	800d998 <memset>
  if(i2cHandle->Instance==I2C1)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a27      	ldr	r2, [pc, #156]	; (8000738 <HAL_I2C_MspInit+0xc8>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d146      	bne.n	800072e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006a0:	f04f 0208 	mov.w	r2, #8
 80006a4:	f04f 0300 	mov.w	r3, #0
 80006a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 fd4e 	bl	8005158 <HAL_RCCEx_PeriphCLKConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80006c2:	f001 f8f0 	bl	80018a6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <HAL_I2C_MspInit+0xcc>)
 80006c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006cc:	4a1b      	ldr	r2, [pc, #108]	; (800073c <HAL_I2C_MspInit+0xcc>)
 80006ce:	f043 0302 	orr.w	r3, r3, #2
 80006d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <HAL_I2C_MspInit+0xcc>)
 80006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006dc:	f003 0302 	and.w	r3, r3, #2
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ec:	2312      	movs	r3, #18
 80006ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006fe:	2304      	movs	r3, #4
 8000700:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000708:	4619      	mov	r1, r3
 800070a:	480d      	ldr	r0, [pc, #52]	; (8000740 <HAL_I2C_MspInit+0xd0>)
 800070c:	f001 feba 	bl	8002484 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <HAL_I2C_MspInit+0xcc>)
 8000712:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000716:	4a09      	ldr	r2, [pc, #36]	; (800073c <HAL_I2C_MspInit+0xcc>)
 8000718:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800071c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_I2C_MspInit+0xcc>)
 8000722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800072e:	bf00      	nop
 8000730:	37e8      	adds	r7, #232	; 0xe8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40005400 	.word	0x40005400
 800073c:	58024400 	.word	0x58024400
 8000740:	58020400 	.word	0x58020400

08000744 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <HAL_I2C_MspDeInit+0x40>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d111      	bne.n	800077a <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <HAL_I2C_MspDeInit+0x44>)
 8000758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800075c:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <HAL_I2C_MspDeInit+0x44>)
 800075e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000762:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8000766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076a:	4808      	ldr	r0, [pc, #32]	; (800078c <HAL_I2C_MspDeInit+0x48>)
 800076c:	f002 f83a 	bl	80027e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8000770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <HAL_I2C_MspDeInit+0x48>)
 8000776:	f002 f835 	bl	80027e4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40005400 	.word	0x40005400
 8000788:	58024400 	.word	0x58024400
 800078c:	58020400 	.word	0x58020400

08000790 <BSP_SD_IsDetected>:
	}
}


uint8_t BSP_SD_IsDetected(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8000796:	2301      	movs	r3, #1
 8000798:	71fb      	strb	r3, [r7, #7]
  //if (BSP_PlatformIsDetected() == 0x0)
  {
    //status = SD_NOT_PRESENT;
  }

  return status;
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	b2db      	uxtb	r3, r3
}
 800079e:	4618      	mov	r0, r3
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
	...

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b092      	sub	sp, #72	; 0x48
 80007b0:	af02      	add	r7, sp, #8
	  //SCB_EnableDCache();

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007b2:	f001 f84b 	bl	800184c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b6:	f001 fb65 	bl	8001e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ba:	f000 fa6d 	bl	8000c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007be:	f7ff fd8b 	bl	80002d8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80007c2:	f001 f875 	bl	80018b0 <MX_QUADSPI_Init>
  //MX_FATFS_Init();
  //MX_I2C1_Init();
  /* USER CODE BEGIN 2 */

  /* Enable write access to Backup domain */
     PWR->CR1 |= PWR_CR1_DBP;
 80007c6:	4bae      	ldr	r3, [pc, #696]	; (8000a80 <main+0x2d4>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4aad      	ldr	r2, [pc, #692]	; (8000a80 <main+0x2d4>)
 80007cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007d0:	6013      	str	r3, [r2, #0]
     while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80007d2:	bf00      	nop
 80007d4:	4baa      	ldr	r3, [pc, #680]	; (8000a80 <main+0x2d4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d0f9      	beq.n	80007d4 <main+0x28>
     {
  	   ;
     }
     /*Enable BKPRAM clock*/
     __HAL_RCC_BKPRAM_CLK_ENABLE();
 80007e0:	4ba8      	ldr	r3, [pc, #672]	; (8000a84 <main+0x2d8>)
 80007e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e6:	4aa7      	ldr	r2, [pc, #668]	; (8000a84 <main+0x2d8>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f0:	4ba4      	ldr	r3, [pc, #656]	; (8000a84 <main+0x2d8>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697b      	ldr	r3, [r7, #20]
     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	48a1      	ldr	r0, [pc, #644]	; (8000a88 <main+0x2dc>)
 8000804:	f002 f910 	bl	8002a28 <HAL_GPIO_WritePin>
     HAL_Delay(100);
 8000808:	2064      	movs	r0, #100	; 0x64
 800080a:	f001 fc33 	bl	8002074 <HAL_Delay>
 	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 800080e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000812:	489d      	ldr	r0, [pc, #628]	; (8000a88 <main+0x2dc>)
 8000814:	f002 f8f0 	bl	80029f8 <HAL_GPIO_ReadPin>
 8000818:	4603      	mov	r3, r0
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
 	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800081c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000820:	4899      	ldr	r0, [pc, #612]	; (8000a88 <main+0x2dc>)
 8000822:	f002 f8e9 	bl	80029f8 <HAL_GPIO_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
 	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 800082a:	2104      	movs	r1, #4
 800082c:	4897      	ldr	r0, [pc, #604]	; (8000a8c <main+0x2e0>)
 800082e:	f002 f8e3 	bl	80029f8 <HAL_GPIO_ReadPin>
 8000832:	4603      	mov	r3, r0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
 	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 8000836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000838:	b2db      	uxtb	r3, r3
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	b2da      	uxtb	r2, r3
 800083e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000840:	b2db      	uxtb	r3, r3
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4413      	add	r3, r2
 8000848:	b2da      	uxtb	r2, r3
 800084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4413      	add	r3, r2
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b8f      	ldr	r3, [pc, #572]	; (8000a90 <main+0x2e4>)
 8000854:	701a      	strb	r2, [r3, #0]
 	if (boardNumber == 0)
 8000856:	4b8e      	ldr	r3, [pc, #568]	; (8000a90 <main+0x2e4>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d12b      	bne.n	80008b6 <main+0x10a>
 	{
		  //set up the master send control pin to signal other daisies to listen to I2C bus
		  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800085e:	2028      	movs	r0, #40	; 0x28
 8000860:	f001 fd75 	bl	800234e <HAL_NVIC_DisableIRQ>

 		  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	463b      	mov	r3, r7
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
		  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000876:	603b      	str	r3, [r7, #0]
		  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	607b      	str	r3, [r7, #4]
		  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800087c:	2302      	movs	r3, #2
 800087e:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]

		  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	487f      	ldr	r0, [pc, #508]	; (8000a88 <main+0x2dc>)
 800088a:	f001 fdfb 	bl	8002484 <HAL_GPIO_Init>
 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000894:	487c      	ldr	r0, [pc, #496]	; (8000a88 <main+0x2dc>)
 8000896:	f002 f8c7 	bl	8002a28 <HAL_GPIO_WritePin>


 		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0)
 800089a:	2140      	movs	r1, #64	; 0x40
 800089c:	487a      	ldr	r0, [pc, #488]	; (8000a88 <main+0x2dc>)
 800089e:	f002 f8ab 	bl	80029f8 <HAL_GPIO_ReadPin>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d103      	bne.n	80008b0 <main+0x104>
 		{
 			bootloader_button_pressed = 1;
 80008a8:	4b7a      	ldr	r3, [pc, #488]	; (8000a94 <main+0x2e8>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	e002      	b.n	80008b6 <main+0x10a>
 		}
 		else
 		{
 			bootloader_button_pressed = 0;
 80008b0:	4b78      	ldr	r3, [pc, #480]	; (8000a94 <main+0x2e8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
 		}
 	}
    //if (*(__IO uint32_t*)(0x38800000+36) != 12345678)

	qspi_initialize(INDIRECT_POLLING);
 80008b6:	2000      	movs	r0, #0
 80008b8:	f000 fc64 	bl	8001184 <qspi_initialize>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2180      	movs	r1, #128	; 0x80
 80008c0:	4871      	ldr	r0, [pc, #452]	; (8000a88 <main+0x2dc>)
 80008c2:	f002 f8b1 	bl	8002a28 <HAL_GPIO_WritePin>


	if (bootloader_button_pressed == 1)
 80008c6:	4b73      	ldr	r3, [pc, #460]	; (8000a94 <main+0x2e8>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	f040 80b7 	bne.w	8000a3e <main+0x292>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // tell the other ICs
 80008d0:	2201      	movs	r2, #1
 80008d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d6:	486c      	ldr	r0, [pc, #432]	; (8000a88 <main+0x2dc>)
 80008d8:	f002 f8a6 	bl	8002a28 <HAL_GPIO_WritePin>

		MX_I2C1_Init();
 80008dc:	f7ff fe88 	bl	80005f0 <MX_I2C1_Init>
		MX_SDMMC1_SD_Init();
 80008e0:	f001 f8ee 	bl	8001ac0 <MX_SDMMC1_SD_Init>
		MX_FATFS_Init();
 80008e4:	f009 fd2c 	bl	800a340 <MX_FATFS_Init>

		int i = 6;
 80008e8:	2306      	movs	r3, #6
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
		while(i--)
 80008ec:	e006      	b.n	80008fc <main+0x150>
		{
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80008ee:	2180      	movs	r1, #128	; 0x80
 80008f0:	4869      	ldr	r0, [pc, #420]	; (8000a98 <main+0x2ec>)
 80008f2:	f002 f8b2 	bl	8002a5a <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 80008f6:	2064      	movs	r0, #100	; 0x64
 80008f8:	f001 fbbc 	bl	8002074 <HAL_Delay>
		while(i--)
 80008fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008fe:	1e5a      	subs	r2, r3, #1
 8000900:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1f3      	bne.n	80008ee <main+0x142>
		}

		FS_FileOperations();
 8000906:	f000 fe39 	bl	800157c <FS_FileOperations>

		if (!memory_already_mapped)
 800090a:	4b64      	ldr	r3, [pc, #400]	; (8000a9c <main+0x2f0>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	2b00      	cmp	r3, #0
 8000912:	d101      	bne.n	8000918 <main+0x16c>
		{
		  qspi_enable_memory_mapped();
 8000914:	f000 fbf8 	bl	8001108 <qspi_enable_memory_mapped>
		}

		//copy qspi flash code into SRAM location on every boot.
		for (int i = 0; i < 262140; i++)
 8000918:	2300      	movs	r3, #0
 800091a:	63bb      	str	r3, [r7, #56]	; 0x38
 800091c:	e00b      	b.n	8000936 <main+0x18a>
		{
		  tempBinaryBuffer[i] = flash_mem[i];
 800091e:	4a60      	ldr	r2, [pc, #384]	; (8000aa0 <main+0x2f4>)
 8000920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000922:	4413      	add	r3, r2
 8000924:	7819      	ldrb	r1, [r3, #0]
 8000926:	4a5f      	ldr	r2, [pc, #380]	; (8000aa4 <main+0x2f8>)
 8000928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800092a:	4413      	add	r3, r2
 800092c:	460a      	mov	r2, r1
 800092e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 262140; i++)
 8000930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000932:	3301      	adds	r3, #1
 8000934:	63bb      	str	r3, [r7, #56]	; 0x38
 8000936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000938:	4a5b      	ldr	r2, [pc, #364]	; (8000aa8 <main+0x2fc>)
 800093a:	4293      	cmp	r3, r2
 800093c:	ddef      	ble.n	800091e <main+0x172>
		}

		//wait for manual bootloader button to go up (lets us test things by holding the device in this state)
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0)
 800093e:	bf00      	nop
 8000940:	2140      	movs	r1, #64	; 0x40
 8000942:	4851      	ldr	r0, [pc, #324]	; (8000a88 <main+0x2dc>)
 8000944:	f002 f858 	bl	80029f8 <HAL_GPIO_ReadPin>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d0f8      	beq.n	8000940 <main+0x194>
		{
		  ;
		}
		//bring signal pin down to tell the other chips we're ready to send firmware over I2C
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000954:	484c      	ldr	r0, [pc, #304]	; (8000a88 <main+0x2dc>)
 8000956:	f002 f867 	bl	8002a28 <HAL_GPIO_WritePin>
		HAL_Delay(100); //wait for them to receive and get ready
 800095a:	2064      	movs	r0, #100	; 0x64
 800095c:	f001 fb8a 	bl	8002074 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2180      	movs	r1, #128	; 0x80
 8000964:	484c      	ldr	r0, [pc, #304]	; (8000a98 <main+0x2ec>)
 8000966:	f002 f85f 	bl	8002a28 <HAL_GPIO_WritePin>
		HAL_I2C_Master_Transmit(&hi2c1, 34<<1, tempBinaryBuffer, 65535,
 800096a:	f242 7310 	movw	r3, #10000	; 0x2710
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000974:	4a4b      	ldr	r2, [pc, #300]	; (8000aa4 <main+0x2f8>)
 8000976:	2144      	movs	r1, #68	; 0x44
 8000978:	484c      	ldr	r0, [pc, #304]	; (8000aac <main+0x300>)
 800097a:	f002 f963 	bl	8002c44 <HAL_I2C_Master_Transmit>
			10000);
		HAL_Delay(500);
 800097e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000982:	f001 fb77 	bl	8002074 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	4843      	ldr	r0, [pc, #268]	; (8000a98 <main+0x2ec>)
 800098c:	f002 f84c 	bl	8002a28 <HAL_GPIO_WritePin>
		HAL_I2C_Master_Transmit(&hi2c1, 34<<1, tempBinaryBuffer+65535, 65535,
 8000990:	4a47      	ldr	r2, [pc, #284]	; (8000ab0 <main+0x304>)
 8000992:	f242 7310 	movw	r3, #10000	; 0x2710
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800099c:	2144      	movs	r1, #68	; 0x44
 800099e:	4843      	ldr	r0, [pc, #268]	; (8000aac <main+0x300>)
 80009a0:	f002 f950 	bl	8002c44 <HAL_I2C_Master_Transmit>
			10000);
		HAL_Delay(500);
 80009a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a8:	f001 fb64 	bl	8002074 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2180      	movs	r1, #128	; 0x80
 80009b0:	4839      	ldr	r0, [pc, #228]	; (8000a98 <main+0x2ec>)
 80009b2:	f002 f839 	bl	8002a28 <HAL_GPIO_WritePin>
		HAL_I2C_Master_Transmit(&hi2c1, 34<<1, tempBinaryBuffer+131070, 65535,
 80009b6:	4a3f      	ldr	r2, [pc, #252]	; (8000ab4 <main+0x308>)
 80009b8:	f242 7310 	movw	r3, #10000	; 0x2710
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009c2:	2144      	movs	r1, #68	; 0x44
 80009c4:	4839      	ldr	r0, [pc, #228]	; (8000aac <main+0x300>)
 80009c6:	f002 f93d 	bl	8002c44 <HAL_I2C_Master_Transmit>
			10000);
		HAL_Delay(500);
 80009ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ce:	f001 fb51 	bl	8002074 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	4830      	ldr	r0, [pc, #192]	; (8000a98 <main+0x2ec>)
 80009d8:	f002 f826 	bl	8002a28 <HAL_GPIO_WritePin>
		HAL_I2C_Master_Transmit(&hi2c1, 34<<1, tempBinaryBuffer+196605, 65535,
 80009dc:	4a36      	ldr	r2, [pc, #216]	; (8000ab8 <main+0x30c>)
 80009de:	f242 7310 	movw	r3, #10000	; 0x2710
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e8:	2144      	movs	r1, #68	; 0x44
 80009ea:	4830      	ldr	r0, [pc, #192]	; (8000aac <main+0x300>)
 80009ec:	f002 f92a 	bl	8002c44 <HAL_I2C_Master_Transmit>
			10000);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2180      	movs	r1, #128	; 0x80
 80009f4:	4828      	ldr	r0, [pc, #160]	; (8000a98 <main+0x2ec>)
 80009f6:	f002 f817 	bl	8002a28 <HAL_GPIO_WritePin>


		HAL_Delay(6000);
 80009fa:	f241 7070 	movw	r0, #6000	; 0x1770
 80009fe:	f001 fb39 	bl	8002074 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	4824      	ldr	r0, [pc, #144]	; (8000a98 <main+0x2ec>)
 8000a08:	f002 f80e 	bl	8002a28 <HAL_GPIO_WritePin>
		HAL_QSPI_MspDeInit(&hqspi);
 8000a0c:	482b      	ldr	r0, [pc, #172]	; (8000abc <main+0x310>)
 8000a0e:	f001 f831 	bl	8001a74 <HAL_QSPI_MspDeInit>
		HAL_I2C_DeInit(&hi2c1);
 8000a12:	4826      	ldr	r0, [pc, #152]	; (8000aac <main+0x300>)
 8000a14:	f002 f8e6 	bl	8002be4 <HAL_I2C_DeInit>
		HAL_SD_MspDeInit(&hsd1);
 8000a18:	4829      	ldr	r0, [pc, #164]	; (8000ac0 <main+0x314>)
 8000a1a:	f001 f905 	bl	8001c28 <HAL_SD_MspDeInit>

		HAL_RCC_DeInit();
 8000a1e:	f003 faa1 	bl	8003f64 <HAL_RCC_DeInit>
		HAL_DeInit();
 8000a22:	f001 fa6b 	bl	8001efc <HAL_DeInit>
		SysTick->CTRL = 0;
 8000a26:	4b27      	ldr	r3, [pc, #156]	; (8000ac4 <main+0x318>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0;
 8000a2c:	4b25      	ldr	r3, [pc, #148]	; (8000ac4 <main+0x318>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0;
 8000a32:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <main+0x318>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]

		HAL_NVIC_SystemReset();
 8000a38:	f001 fc97 	bl	800236a <HAL_NVIC_SystemReset>
 8000a3c:	e113      	b.n	8000c66 <main+0x4ba>

	}

    else
    {
		int i = 6;
 8000a3e:	2306      	movs	r3, #6
 8000a40:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_Delay(10);
 8000a42:	200a      	movs	r0, #10
 8000a44:	f001 fb16 	bl	8002074 <HAL_Delay>
		while(i--)
 8000a48:	e006      	b.n	8000a58 <main+0x2ac>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000a4a:	2180      	movs	r1, #128	; 0x80
 8000a4c:	4812      	ldr	r0, [pc, #72]	; (8000a98 <main+0x2ec>)
 8000a4e:	f002 f804 	bl	8002a5a <HAL_GPIO_TogglePin>
			HAL_Delay(60);
 8000a52:	203c      	movs	r0, #60	; 0x3c
 8000a54:	f001 fb0e 	bl	8002074 <HAL_Delay>
		while(i--)
 8000a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a5a:	1e5a      	subs	r2, r3, #1
 8000a5c:	637a      	str	r2, [r7, #52]	; 0x34
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d1f3      	bne.n	8000a4a <main+0x29e>
		}
		HAL_Delay(1000);
 8000a62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a66:	f001 fb05 	bl	8002074 <HAL_Delay>
		if (!memory_already_mapped)
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <main+0x2f0>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d101      	bne.n	8000a78 <main+0x2cc>
		{
		 	qspi_enable_memory_mapped();
 8000a74:	f000 fb48 	bl	8001108 <qspi_enable_memory_mapped>

		}
		//copy qspi flash code into SRAM location on every boot.
		for (int i = 0; i < 262140; i++)
 8000a78:	2300      	movs	r3, #0
 8000a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8000a7c:	e030      	b.n	8000ae0 <main+0x334>
 8000a7e:	bf00      	nop
 8000a80:	58024800 	.word	0x58024800
 8000a84:	58024400 	.word	0x58024400
 8000a88:	58020400 	.word	0x58020400
 8000a8c:	58020000 	.word	0x58020000
 8000a90:	20000000 	.word	0x20000000
 8000a94:	200001d8 	.word	0x200001d8
 8000a98:	58020800 	.word	0x58020800
 8000a9c:	200001e0 	.word	0x200001e0
 8000aa0:	90000000 	.word	0x90000000
 8000aa4:	24000000 	.word	0x24000000
 8000aa8:	0003fffb 	.word	0x0003fffb
 8000aac:	20000030 	.word	0x20000030
 8000ab0:	2400ffff 	.word	0x2400ffff
 8000ab4:	2401fffe 	.word	0x2401fffe
 8000ab8:	2402fffd 	.word	0x2402fffd
 8000abc:	200001e4 	.word	0x200001e4
 8000ac0:	20000230 	.word	0x20000230
 8000ac4:	e000e010 	.word	0xe000e010
		{
			tempBinaryBuffer[i] = flash_mem[i];
 8000ac8:	4a67      	ldr	r2, [pc, #412]	; (8000c68 <main+0x4bc>)
 8000aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000acc:	4413      	add	r3, r2
 8000ace:	7819      	ldrb	r1, [r3, #0]
 8000ad0:	4a66      	ldr	r2, [pc, #408]	; (8000c6c <main+0x4c0>)
 8000ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad4:	4413      	add	r3, r2
 8000ad6:	460a      	mov	r2, r1
 8000ad8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 262140; i++)
 8000ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000adc:	3301      	adds	r3, #1
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
 8000ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ae2:	4a63      	ldr	r2, [pc, #396]	; (8000c70 <main+0x4c4>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	ddef      	ble.n	8000ac8 <main+0x31c>
		}


		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000ae8:	2180      	movs	r1, #128	; 0x80
 8000aea:	4862      	ldr	r0, [pc, #392]	; (8000c74 <main+0x4c8>)
 8000aec:	f001 ffb5 	bl	8002a5a <HAL_GPIO_TogglePin>
		JumpToApplication = (pFunction) (*(__IO uint32_t*) (APPLICATION_ADDRESS+4));
 8000af0:	4b61      	ldr	r3, [pc, #388]	; (8000c78 <main+0x4cc>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b61      	ldr	r3, [pc, #388]	; (8000c7c <main+0x4d0>)
 8000af8:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000afa:	2201      	movs	r2, #1
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	4860      	ldr	r0, [pc, #384]	; (8000c80 <main+0x4d4>)
 8000b00:	f001 ff92 	bl	8002a28 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000b04:	2001      	movs	r0, #1
 8000b06:	f001 fab5 	bl	8002074 <HAL_Delay>
		if (((uint32_t)JumpToApplication > 0x30000000) ||  ((uint32_t)JumpToApplication < 0x24000000) )
 8000b0a:	4b5c      	ldr	r3, [pc, #368]	; (8000c7c <main+0x4d0>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8000b12:	d804      	bhi.n	8000b1e <main+0x372>
 8000b14:	4b59      	ldr	r3, [pc, #356]	; (8000c7c <main+0x4d0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8000b1c:	d20f      	bcs.n	8000b3e <main+0x392>
		{
			//out of range, not a valid firmware
			while(1)
			{
				if (memory_already_mapped)
 8000b1e:	4b59      	ldr	r3, [pc, #356]	; (8000c84 <main+0x4d8>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d002      	beq.n	8000b2e <main+0x382>
				{
					qspi_initialize(INDIRECT_POLLING);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f000 fb2b 	bl	8001184 <qspi_initialize>
				}
				HAL_Delay(1);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f001 faa0 	bl	8002074 <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	484f      	ldr	r0, [pc, #316]	; (8000c74 <main+0x4c8>)
 8000b38:	f001 ff8f 	bl	8002a5a <HAL_GPIO_TogglePin>
				if (memory_already_mapped)
 8000b3c:	e7ef      	b.n	8000b1e <main+0x372>
			}
		}
		//otherwise, boot it up!
		HAL_QSPI_MspDeInit(&hqspi);
 8000b3e:	4852      	ldr	r0, [pc, #328]	; (8000c88 <main+0x4dc>)
 8000b40:	f000 ff98 	bl	8001a74 <HAL_QSPI_MspDeInit>

		HAL_RCC_DeInit();
 8000b44:	f003 fa0e 	bl	8003f64 <HAL_RCC_DeInit>
		HAL_DeInit();
 8000b48:	f001 f9d8 	bl	8001efc <HAL_DeInit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
		__disable_irq();

		NVIC->ICER[0] = 0xFFFFFFFF;
 8000b50:	4b4e      	ldr	r3, [pc, #312]	; (8000c8c <main+0x4e0>)
 8000b52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		NVIC->ICER[1] = 0xFFFFFFFF;
 8000b5a:	4b4c      	ldr	r3, [pc, #304]	; (8000c8c <main+0x4e0>)
 8000b5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		NVIC->ICER[2] = 0xFFFFFFFF;
 8000b64:	4b49      	ldr	r3, [pc, #292]	; (8000c8c <main+0x4e0>)
 8000b66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		NVIC->ICER[3] = 0xFFFFFFFF;
 8000b6e:	4b47      	ldr	r3, [pc, #284]	; (8000c8c <main+0x4e0>)
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		NVIC->ICER[4] = 0xFFFFFFFF;
 8000b78:	4b44      	ldr	r3, [pc, #272]	; (8000c8c <main+0x4e0>)
 8000b7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		NVIC->ICER[5] = 0xFFFFFFFF;
 8000b82:	4b42      	ldr	r3, [pc, #264]	; (8000c8c <main+0x4e0>)
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		NVIC->ICER[6] = 0xFFFFFFFF;
 8000b8c:	4b3f      	ldr	r3, [pc, #252]	; (8000c8c <main+0x4e0>)
 8000b8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b92:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		NVIC->ICER[7] = 0xFFFFFFFF;
 8000b96:	4b3d      	ldr	r3, [pc, #244]	; (8000c8c <main+0x4e0>)
 8000b98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b9c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		NVIC->ICPR[0] = 0xFFFFFFFF;
 8000ba0:	4b3a      	ldr	r3, [pc, #232]	; (8000c8c <main+0x4e0>)
 8000ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ba6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		NVIC->ICPR[1] = 0xFFFFFFFF;
 8000baa:	4b38      	ldr	r3, [pc, #224]	; (8000c8c <main+0x4e0>)
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bb0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		NVIC->ICPR[2] = 0xFFFFFFFF;
 8000bb4:	4b35      	ldr	r3, [pc, #212]	; (8000c8c <main+0x4e0>)
 8000bb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bba:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		NVIC->ICPR[3] = 0xFFFFFFFF;
 8000bbe:	4b33      	ldr	r3, [pc, #204]	; (8000c8c <main+0x4e0>)
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bc4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
		NVIC->ICPR[4] = 0xFFFFFFFF;
 8000bc8:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <main+0x4e0>)
 8000bca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bce:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		NVIC->ICPR[5] = 0xFFFFFFFF;
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <main+0x4e0>)
 8000bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
		NVIC->ICPR[6] = 0xFFFFFFFF;
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <main+0x4e0>)
 8000bde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000be2:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
		NVIC->ICPR[7] = 0xFFFFFFFF;
 8000be6:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <main+0x4e0>)
 8000be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bec:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

		SysTick->CTRL = 0;
 8000bf0:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <main+0x4e4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0; // Needed?
 8000bf6:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <main+0x4e4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;  // Needed?
 8000bfc:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <main+0x4e4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
		SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk;
 8000c02:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <main+0x4e8>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	4a23      	ldr	r2, [pc, #140]	; (8000c94 <main+0x4e8>)
 8000c08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c0c:	6053      	str	r3, [r2, #4]

		SCB->SHCSR &= ~(SCB_SHCSR_USGFAULTENA_Msk | //
 8000c0e:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <main+0x4e8>)
 8000c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c12:	4a20      	ldr	r2, [pc, #128]	; (8000c94 <main+0x4e8>)
 8000c14:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8000c18:	6253      	str	r3, [r2, #36]	; 0x24
						SCB_SHCSR_BUSFAULTENA_Msk | //
						SCB_SHCSR_MEMFAULTENA_Msk);

		__set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000c1a:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	f383 8808 	msr	MSP, r3
}
 8000c28:	bf00      	nop
		__set_PSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000c2a:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	f383 8809 	msr	PSP, r3
}
 8000c38:	bf00      	nop
		SCB->VTOR = APPLICATION_ADDRESS;
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <main+0x4e8>)
 8000c3c:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000c46:	6a3b      	ldr	r3, [r7, #32]
 8000c48:	f383 8814 	msr	CONTROL, r3
}
 8000c4c:	bf00      	nop
		__set_CONTROL(0);


		SysTick->CTRL = 0;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <main+0x4e4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0;
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <main+0x4e4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0;
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <main+0x4e4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]

		JumpToApplication();
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <main+0x4d0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4798      	blx	r3

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000c66:	e7fe      	b.n	8000c66 <main+0x4ba>
 8000c68:	90000000 	.word	0x90000000
 8000c6c:	24000000 	.word	0x24000000
 8000c70:	0003fffb 	.word	0x0003fffb
 8000c74:	58020800 	.word	0x58020800
 8000c78:	24000004 	.word	0x24000004
 8000c7c:	200001dc 	.word	0x200001dc
 8000c80:	58020400 	.word	0x58020400
 8000c84:	200001e0 	.word	0x200001e0
 8000c88:	200001e4 	.word	0x200001e4
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000e010 	.word	0xe000e010
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b09e      	sub	sp, #120	; 0x78
 8000c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ca2:	224c      	movs	r2, #76	; 0x4c
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f00c fe76 	bl	800d998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	2220      	movs	r2, #32
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f00c fe6f 	bl	800d998 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cba:	2002      	movs	r0, #2
 8000cbc:	f002 fcf0 	bl	80036a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	4b48      	ldr	r3, [pc, #288]	; (8000de8 <SystemClock_Config+0x150>)
 8000cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc8:	4a47      	ldr	r2, [pc, #284]	; (8000de8 <SystemClock_Config+0x150>)
 8000cca:	f023 0301 	bic.w	r3, r3, #1
 8000cce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cd0:	4b45      	ldr	r3, [pc, #276]	; (8000de8 <SystemClock_Config+0x150>)
 8000cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	4b44      	ldr	r3, [pc, #272]	; (8000dec <SystemClock_Config+0x154>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	4a43      	ldr	r2, [pc, #268]	; (8000dec <SystemClock_Config+0x154>)
 8000ce0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ce4:	6193      	str	r3, [r2, #24]
 8000ce6:	4b41      	ldr	r3, [pc, #260]	; (8000dec <SystemClock_Config+0x154>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cf2:	bf00      	nop
 8000cf4:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <SystemClock_Config+0x154>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d00:	d1f8      	bne.n	8000cf4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	4b3b      	ldr	r3, [pc, #236]	; (8000df0 <SystemClock_Config+0x158>)
 8000d04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d08:	4a39      	ldr	r2, [pc, #228]	; (8000df0 <SystemClock_Config+0x158>)
 8000d0a:	f043 0302 	orr.w	r3, r3, #2
 8000d0e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d12:	4b37      	ldr	r3, [pc, #220]	; (8000df0 <SystemClock_Config+0x158>)
 8000d14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d20:	2300      	movs	r3, #0
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	4b31      	ldr	r3, [pc, #196]	; (8000dec <SystemClock_Config+0x154>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a30      	ldr	r2, [pc, #192]	; (8000dec <SystemClock_Config+0x154>)
 8000d2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <SystemClock_Config+0x154>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <SystemClock_Config+0x150>)
 8000d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3e:	4a2a      	ldr	r2, [pc, #168]	; (8000de8 <SystemClock_Config+0x150>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d46:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <SystemClock_Config+0x150>)
 8000d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d52:	bf00      	nop
 8000d54:	4b25      	ldr	r3, [pc, #148]	; (8000dec <SystemClock_Config+0x154>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d60:	d1f8      	bne.n	8000d54 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d62:	2301      	movs	r3, #1
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d6a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d70:	2302      	movs	r3, #2
 8000d72:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d74:	2301      	movs	r3, #1
 8000d76:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000d78:	233c      	movs	r3, #60	; 0x3c
 8000d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000d80:	2306      	movs	r3, #6
 8000d82:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 8;
 8000d84:	2308      	movs	r3, #8
 8000d86:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d88:	230c      	movs	r3, #12
 8000d8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f003 fa0d 	bl	80041b8 <HAL_RCC_OscConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000da4:	f000 fd7f 	bl	80018a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da8:	233f      	movs	r3, #63	; 0x3f
 8000daa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dac:	2303      	movs	r3, #3
 8000dae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000db4:	2308      	movs	r3, #8
 8000db6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000db8:	2340      	movs	r3, #64	; 0x40
 8000dba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dbc:	2340      	movs	r3, #64	; 0x40
 8000dbe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dc6:	2340      	movs	r3, #64	; 0x40
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dca:	f107 030c 	add.w	r3, r7, #12
 8000dce:	2104      	movs	r1, #4
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f003 fe4b 	bl	8004a6c <HAL_RCC_ClockConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000ddc:	f000 fd63 	bl	80018a6 <Error_Handler>
  }
}
 8000de0:	bf00      	nop
 8000de2:	3778      	adds	r7, #120	; 0x78
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	58000400 	.word	0x58000400
 8000dec:	58024800 	.word	0x58024800
 8000df0:	58024400 	.word	0x58024400

08000df4 <qspi_error>:

/* USER CODE BEGIN 4 */


void qspi_error(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2180      	movs	r1, #128	; 0x80
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <qspi_error+0x14>)
 8000dfe:	f001 fe13 	bl	8002a28 <HAL_GPIO_WritePin>
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	58020800 	.word	0x58020800

08000e0c <AutopollingMemReady>:

int AutopollingMemReady(int timeout)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b098      	sub	sp, #96	; 0x60
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	 int ok = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	65fb      	str	r3, [r7, #92]	; 0x5c
	QSPI_CommandTypeDef     s_command;
	    QSPI_AutoPollingTypeDef s_config;

	    /* Configure automatic polling mode to wait for memory ready */
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
	    s_command.Instruction       = READ_STATUS_REG_CMD;
 8000e1e:	2305      	movs	r3, #5
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
	    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	643b      	str	r3, [r7, #64]	; 0x40
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	647b      	str	r3, [r7, #68]	; 0x44
	    s_command.DataMode          = QSPI_DATA_1_LINE;
 8000e2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e2e:	64bb      	str	r3, [r7, #72]	; 0x48
	    s_command.DummyCycles       = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	63bb      	str	r3, [r7, #56]	; 0x38
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	653b      	str	r3, [r7, #80]	; 0x50
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	657b      	str	r3, [r7, #84]	; 0x54
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	65bb      	str	r3, [r7, #88]	; 0x58

	    s_config.Match         = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
	    s_config.MatchMode     = QSPI_MATCH_MODE_AND;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
	    s_config.Interval      = 0x10;
 8000e48:	2310      	movs	r3, #16
 8000e4a:	617b      	str	r3, [r7, #20]
	    s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000e4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e50:	623b      	str	r3, [r7, #32]
	    s_config.Mask          = IS25LP064A_SR_WIP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	613b      	str	r3, [r7, #16]
	    //s_config.Mask            = 0;
	    s_config.StatusBytesSize = 1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	61bb      	str	r3, [r7, #24]

	    if(HAL_QSPI_AutoPolling(&hqspi, &s_command, &s_config, timeout)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f107 020c 	add.w	r2, r7, #12
 8000e60:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000e64:	4807      	ldr	r0, [pc, #28]	; (8000e84 <AutopollingMemReady+0x78>)
 8000e66:	f002 fdd9 	bl	8003a1c <HAL_QSPI_AutoPolling>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <AutopollingMemReady+0x68>
	       != HAL_OK)
	    {
	    	qspi_error();
 8000e70:	f7ff ffc0 	bl	8000df4 <qspi_error>
	    }

	    ok= 1;
 8000e74:	2301      	movs	r3, #1
 8000e76:	65fb      	str	r3, [r7, #92]	; 0x5c
	    return ok;
 8000e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c

}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3760      	adds	r7, #96	; 0x60
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200001e4 	.word	0x200001e4

08000e88 <qspi_WriteEnable>:

int qspi_WriteEnable()
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b096      	sub	sp, #88	; 0x58
 8000e8c:	af00      	add	r7, sp, #0
	 int ok = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	657b      	str	r3, [r7, #84]	; 0x54
	QSPI_CommandTypeDef     s_command;
	    QSPI_AutoPollingTypeDef s_config;

	    /* Enable write operations */
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
	    s_command.Instruction       = WRITE_ENABLE_CMD;
 8000e98:	2306      	movs	r3, #6
 8000e9a:	61fb      	str	r3, [r7, #28]
	    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	63bb      	str	r3, [r7, #56]	; 0x38
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
	    s_command.DataMode          = QSPI_DATA_NONE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	643b      	str	r3, [r7, #64]	; 0x40
	    s_command.DummyCycles       = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	633b      	str	r3, [r7, #48]	; 0x30
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	64bb      	str	r3, [r7, #72]	; 0x48
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	653b      	str	r3, [r7, #80]	; 0x50

	    //RETURN_IF_ERR(CheckProgramMemory());

	    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4817      	ldr	r0, [pc, #92]	; (8000f20 <qspi_WriteEnable+0x98>)
 8000ec4:	f002 fcba 	bl	800383c <HAL_QSPI_Command>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <qspi_WriteEnable+0x4a>
	       != HAL_OK)
	    {
	    	qspi_error();
 8000ece:	f7ff ff91 	bl	8000df4 <qspi_error>
	    }

	    /* Configure automatic polling mode to wait for write enabling */
	    //        s_config.Match           = IS25LP080D_SR_WREN | (IS25LP080D_SR_WREN << 8);
	    //        s_config.Mask            = IS25LP080D_SR_WREN | (IS25LP080D_SR_WREN << 8);
	    s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
	    s_config.Match           = IS25LP064A_SR_WREN;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	607b      	str	r3, [r7, #4]
	    s_config.Mask            = IS25LP064A_SR_WREN;
 8000eda:	2302      	movs	r3, #2
 8000edc:	60bb      	str	r3, [r7, #8]
	    s_config.Interval        = 0x10;
 8000ede:	2310      	movs	r3, #16
 8000ee0:	60fb      	str	r3, [r7, #12]
	    s_config.StatusBytesSize = 1;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	613b      	str	r3, [r7, #16]
	    s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000ee6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eea:	61bb      	str	r3, [r7, #24]

	    s_command.Instruction = READ_STATUS_REG_CMD;
 8000eec:	2305      	movs	r3, #5
 8000eee:	61fb      	str	r3, [r7, #28]
	    s_command.DataMode    = QSPI_DATA_1_LINE;
 8000ef0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ef4:	643b      	str	r3, [r7, #64]	; 0x40

	    if(HAL_QSPI_AutoPolling(
 8000ef6:	1d3a      	adds	r2, r7, #4
 8000ef8:	f107 011c 	add.w	r1, r7, #28
 8000efc:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f00:	4807      	ldr	r0, [pc, #28]	; (8000f20 <qspi_WriteEnable+0x98>)
 8000f02:	f002 fd8b 	bl	8003a1c <HAL_QSPI_AutoPolling>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <qspi_WriteEnable+0x88>
	           &hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
	       != HAL_OK)
	    {
	    	qspi_error();
 8000f0c:	f7ff ff72 	bl	8000df4 <qspi_error>
	    }

	    ok= 1;
 8000f10:	2301      	movs	r3, #1
 8000f12:	657b      	str	r3, [r7, #84]	; 0x54
	    return ok;
 8000f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54

}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3758      	adds	r7, #88	; 0x58
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200001e4 	.word	0x200001e4

08000f24 <qspi_reset_memory>:

void qspi_reset_memory(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08e      	sub	sp, #56	; 0x38
 8000f28:	af00      	add	r7, sp, #0
	//reset memory
		QSPI_CommandTypeDef s_command;

		    /* Initialize the reset enable command */
		    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000f2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f2e:	61bb      	str	r3, [r7, #24]
		    s_command.Instruction       = RESET_ENABLE_CMD;
 8000f30:	2366      	movs	r3, #102	; 0x66
 8000f32:	603b      	str	r3, [r7, #0]
		    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
		    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
		    s_command.DataMode          = QSPI_DATA_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
		    s_command.DummyCycles       = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
		    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
		    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	633b      	str	r3, [r7, #48]	; 0x30
		    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34

		    /* Send the command */
		    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000f50:	463b      	mov	r3, r7
 8000f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f56:	4619      	mov	r1, r3
 8000f58:	4811      	ldr	r0, [pc, #68]	; (8000fa0 <qspi_reset_memory+0x7c>)
 8000f5a:	f002 fc6f 	bl	800383c <HAL_QSPI_Command>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <qspi_reset_memory+0x44>
		       != HAL_OK)
		    {
		    	qspi_error();
 8000f64:	f7ff ff46 	bl	8000df4 <qspi_error>
		    }

		    /* Send the reset memory command */
		    s_command.Instruction = RESET_MEMORY_CMD;
 8000f68:	2399      	movs	r3, #153	; 0x99
 8000f6a:	603b      	str	r3, [r7, #0]
		    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f72:	4619      	mov	r1, r3
 8000f74:	480a      	ldr	r0, [pc, #40]	; (8000fa0 <qspi_reset_memory+0x7c>)
 8000f76:	f002 fc61 	bl	800383c <HAL_QSPI_Command>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <qspi_reset_memory+0x60>
		       != HAL_OK)
		    {
		    	qspi_error();
 8000f80:	f7ff ff38 	bl	8000df4 <qspi_error>
		    }


		    /* Configure automatic polling mode to wait the memory is ready */
		    if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000f84:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f88:	f7ff ff40 	bl	8000e0c <AutopollingMemReady>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d001      	beq.n	8000f96 <qspi_reset_memory+0x72>
		       != 1)
		    {
		    	qspi_error();
 8000f92:	f7ff ff2f 	bl	8000df4 <qspi_error>
		    }

}
 8000f96:	bf00      	nop
 8000f98:	3738      	adds	r7, #56	; 0x38
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200001e4 	.word	0x200001e4

08000fa4 <qspi_dummy_cycles_config>:

void qspi_dummy_cycles_config()
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b090      	sub	sp, #64	; 0x40
 8000fa8:	af00      	add	r7, sp, #0
	 QSPI_CommandTypeDef s_command;
	    uint16_t            reg     = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	80fb      	strh	r3, [r7, #6]
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb2:	623b      	str	r3, [r7, #32]
	    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
	    s_command.DataMode          = QSPI_DATA_1_LINE;
 8000fbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	    s_command.DummyCycles       = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
	    s_command.NbData            = 1;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	633b      	str	r3, [r7, #48]	; 0x30
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	637b      	str	r3, [r7, #52]	; 0x34
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	63bb      	str	r3, [r7, #56]	; 0x38
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
	           // Dummy Cycles: (Config 3, bits 1 0)
	           // Drive Strength (50%, bits 1 1 1)
	           // Byte to write: 0b11110000 (0xF0)
	           // TODO: Probably expand Burst to maximum if that works out.

	           reg = 0xF0;
 8000fd6:	23f0      	movs	r3, #240	; 0xf0
 8000fd8:	80fb      	strh	r3, [r7, #6]
	           /* Update volatile configuration register (with new dummy cycles) */
	             s_command.Instruction = WRITE_READ_PARAM_REG_CMD;
 8000fda:	23c0      	movs	r3, #192	; 0xc0
 8000fdc:	60bb      	str	r3, [r7, #8]
	             /* Configure the write volatile configuration register command */
	             if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4810      	ldr	r0, [pc, #64]	; (800102c <qspi_dummy_cycles_config+0x88>)
 8000fea:	f002 fc27 	bl	800383c <HAL_QSPI_Command>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <qspi_dummy_cycles_config+0x54>
	                != HAL_OK)
	             {
	            	 qspi_error();
 8000ff4:	f7ff fefe 	bl	8000df4 <qspi_error>
	             }

	             /* Transmission of the data */
	             if(HAL_QSPI_Transmit(
 8000ff8:	1dbb      	adds	r3, r7, #6
 8000ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ffe:	4619      	mov	r1, r3
 8001000:	480a      	ldr	r0, [pc, #40]	; (800102c <qspi_dummy_cycles_config+0x88>)
 8001002:	f002 fc79 	bl	80038f8 <HAL_QSPI_Transmit>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <qspi_dummy_cycles_config+0x6c>
	                    &hqspi, (uint8_t*)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
	                != HAL_OK)
	             {
	            	 qspi_error();
 800100c:	f7ff fef2 	bl	8000df4 <qspi_error>
	             }

	             /* Configure automatic polling mode to wait the memory is ready */
	             if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001010:	f241 3088 	movw	r0, #5000	; 0x1388
 8001014:	f7ff fefa 	bl	8000e0c <AutopollingMemReady>
 8001018:	4603      	mov	r3, r0
 800101a:	2b01      	cmp	r3, #1
 800101c:	d001      	beq.n	8001022 <qspi_dummy_cycles_config+0x7e>
	                != 1)
	             {
	            	 qspi_error();
 800101e:	f7ff fee9 	bl	8000df4 <qspi_error>
	             }
}
 8001022:	bf00      	nop
 8001024:	3740      	adds	r7, #64	; 0x40
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200001e4 	.word	0x200001e4

08001030 <qspi_quad_enable>:

void qspi_quad_enable()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b096      	sub	sp, #88	; 0x58
 8001034:	af00      	add	r7, sp, #0
	 QSPI_CommandTypeDef     s_command;
	    QSPI_AutoPollingTypeDef s_config;
	    uint8_t                 reg = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	71fb      	strb	r3, [r7, #7]

	    /* Enable write operations */
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800103a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800103e:	63bb      	str	r3, [r7, #56]	; 0x38
	    s_command.Instruction       = WRITE_STATUS_REG_CMD;
 8001040:	2301      	movs	r3, #1
 8001042:	623b      	str	r3, [r7, #32]
	    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001044:	2300      	movs	r3, #0
 8001046:	63fb      	str	r3, [r7, #60]	; 0x3c
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001048:	2300      	movs	r3, #0
 800104a:	643b      	str	r3, [r7, #64]	; 0x40
	    s_command.DataMode          = QSPI_DATA_1_LINE;
 800104c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001050:	647b      	str	r3, [r7, #68]	; 0x44
	    s_command.DummyCycles       = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
	    s_command.NbData            = 1;
 8001056:	2301      	movs	r3, #1
 8001058:	64bb      	str	r3, [r7, #72]	; 0x48
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	64fb      	str	r3, [r7, #76]	; 0x4c
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800105e:	2300      	movs	r3, #0
 8001060:	653b      	str	r3, [r7, #80]	; 0x50
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001062:	2300      	movs	r3, #0
 8001064:	657b      	str	r3, [r7, #84]	; 0x54

	    /* Enable write operations */
	    if(qspi_WriteEnable() != 1)
 8001066:	f7ff ff0f 	bl	8000e88 <qspi_WriteEnable>
 800106a:	4603      	mov	r3, r0
 800106c:	2b01      	cmp	r3, #1
 800106e:	d001      	beq.n	8001074 <qspi_quad_enable+0x44>
	    {
	    	qspi_error();
 8001070:	f7ff fec0 	bl	8000df4 <qspi_error>
	    }

	    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001074:	f107 0320 	add.w	r3, r7, #32
 8001078:	f241 3288 	movw	r2, #5000	; 0x1388
 800107c:	4619      	mov	r1, r3
 800107e:	4821      	ldr	r0, [pc, #132]	; (8001104 <qspi_quad_enable+0xd4>)
 8001080:	f002 fbdc 	bl	800383c <HAL_QSPI_Command>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <qspi_quad_enable+0x5e>
	       != HAL_OK)
	    {
	    	qspi_error();
 800108a:	f7ff feb3 	bl	8000df4 <qspi_error>

	    //    reg = 0;
	    //    MODIFY_REG(reg,
	    //        0xF0,
	    //        (IS25LP08D_SR_QE));
	    reg = IS25LP064A_SR_QE; // Set QE bit  to 1
 800108e:	2340      	movs	r3, #64	; 0x40
 8001090:	71fb      	strb	r3, [r7, #7]
	    /* Transmission of the data */
	    if(HAL_QSPI_Transmit(
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	f241 3288 	movw	r2, #5000	; 0x1388
 8001098:	4619      	mov	r1, r3
 800109a:	481a      	ldr	r0, [pc, #104]	; (8001104 <qspi_quad_enable+0xd4>)
 800109c:	f002 fc2c 	bl	80038f8 <HAL_QSPI_Transmit>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <qspi_quad_enable+0x7a>
	           &hqspi, (uint8_t*)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
	       != HAL_OK)
	    {
	    	qspi_error();
 80010a6:	f7ff fea5 	bl	8000df4 <qspi_error>
	    /* Configure automatic polling mode to wait for write enabling */
	    //    s_config.Match           = IS25LP08D_SR_WREN | (IS25LP08D_SR_WREN << 8);
	    //    s_config.Mask            = IS25LP08D_SR_WREN | (IS25LP08D_SR_WREN << 8);
	    //    s_config.MatchMode       = QSPI_MATCH_MODE_AND;
	    //    s_config.StatusBytesSize = 2;
	    s_config.Match           = IS25LP064A_SR_QE;
 80010aa:	2340      	movs	r3, #64	; 0x40
 80010ac:	60bb      	str	r3, [r7, #8]
	    s_config.Mask            = IS25LP064A_SR_QE;
 80010ae:	2340      	movs	r3, #64	; 0x40
 80010b0:	60fb      	str	r3, [r7, #12]
	    s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
	    s_config.StatusBytesSize = 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	617b      	str	r3, [r7, #20]

	    s_config.Interval      = 0x10;
 80010ba:	2310      	movs	r3, #16
 80010bc:	613b      	str	r3, [r7, #16]
	    s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80010be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010c2:	61fb      	str	r3, [r7, #28]

	    s_command.Instruction = READ_STATUS_REG_CMD;
 80010c4:	2305      	movs	r3, #5
 80010c6:	623b      	str	r3, [r7, #32]
	    s_command.DataMode    = QSPI_DATA_1_LINE;
 80010c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010cc:	647b      	str	r3, [r7, #68]	; 0x44

	    if(HAL_QSPI_AutoPolling(
 80010ce:	f107 0208 	add.w	r2, r7, #8
 80010d2:	f107 0120 	add.w	r1, r7, #32
 80010d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80010da:	480a      	ldr	r0, [pc, #40]	; (8001104 <qspi_quad_enable+0xd4>)
 80010dc:	f002 fc9e 	bl	8003a1c <HAL_QSPI_AutoPolling>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <qspi_quad_enable+0xba>
	           &hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
	       != HAL_OK)
	    {
	    	qspi_error();
 80010e6:	f7ff fe85 	bl	8000df4 <qspi_error>
	    }

	    /* Configure automatic polling mode to wait the memory is ready */
	    if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80010ea:	f241 3088 	movw	r0, #5000	; 0x1388
 80010ee:	f7ff fe8d 	bl	8000e0c <AutopollingMemReady>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d001      	beq.n	80010fc <qspi_quad_enable+0xcc>
	       != 1)
	    {
	    	qspi_error();
 80010f8:	f7ff fe7c 	bl	8000df4 <qspi_error>
	    }

}
 80010fc:	bf00      	nop
 80010fe:	3758      	adds	r7, #88	; 0x58
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200001e4 	.word	0x200001e4

08001108 <qspi_enable_memory_mapped>:

void qspi_enable_memory_mapped()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b092      	sub	sp, #72	; 0x48
 800110c:	af00      	add	r7, sp, #0
	   QSPI_CommandTypeDef      s_command;
	    QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

	    /* Configure the command for the read instruction */
	    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800110e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
	    s_command.Instruction     = QUAD_INOUT_FAST_READ_CMD;
 8001114:	23eb      	movs	r3, #235	; 0xeb
 8001116:	60fb      	str	r3, [r7, #12]
	    s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 8001118:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
	    s_command.AddressSize     = QSPI_ADDRESS_24_BITS;
 800111e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001122:	61bb      	str	r3, [r7, #24]
	    //    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
	    //s_command.DummyCycles       = IS25LP080D_DUMMY_CYCLES_READ_QUAD;
	    s_command.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 8001124:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
	    s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
	    s_command.AlternateBytes     = 0x000000A0;
 800112e:	23a0      	movs	r3, #160	; 0xa0
 8001130:	617b      	str	r3, [r7, #20]
	    s_command.DummyCycles        = 6;
 8001132:	2306      	movs	r3, #6
 8001134:	623b      	str	r3, [r7, #32]
	    s_command.DdrMode            = QSPI_DDR_MODE_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	63bb      	str	r3, [r7, #56]	; 0x38
	    s_command.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 800113a:	2300      	movs	r3, #0
 800113c:	63fb      	str	r3, [r7, #60]	; 0x3c
	    //s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
	    s_command.SIOOMode = QSPI_SIOO_INST_ONLY_FIRST_CMD;
 800113e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001142:	643b      	str	r3, [r7, #64]	; 0x40
	    s_command.DataMode = QSPI_DATA_4_LINES;
 8001144:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001148:	633b      	str	r3, [r7, #48]	; 0x30

	    /* Configure the memory mapped mode */
	    s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
	    s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
	    uint32_t qspiresult = HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg);
 8001152:	1d3a      	adds	r2, r7, #4
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	4619      	mov	r1, r3
 800115a:	4808      	ldr	r0, [pc, #32]	; (800117c <qspi_enable_memory_mapped+0x74>)
 800115c:	f002 fcd5 	bl	8003b0a <HAL_QSPI_MemoryMapped>
 8001160:	4603      	mov	r3, r0
 8001162:	647b      	str	r3, [r7, #68]	; 0x44
	    if(qspiresult
 8001164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <qspi_enable_memory_mapped+0x66>
	       != HAL_OK)
	    {
	    	qspi_error();
 800116a:	f7ff fe43 	bl	8000df4 <qspi_error>
	    }
	    memory_already_mapped = 1;
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <qspi_enable_memory_mapped+0x78>)
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
}
 8001174:	bf00      	nop
 8001176:	3748      	adds	r7, #72	; 0x48
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200001e4 	.word	0x200001e4
 8001180:	200001e0 	.word	0x200001e0

08001184 <qspi_initialize>:

void qspi_initialize(uint8_t mode)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	HAL_QSPI_DeInit(&hqspi);
 800118e:	480c      	ldr	r0, [pc, #48]	; (80011c0 <qspi_initialize+0x3c>)
 8001190:	f002 fb34 	bl	80037fc <HAL_QSPI_DeInit>
	HAL_QSPI_Init(&hqspi);
 8001194:	480a      	ldr	r0, [pc, #40]	; (80011c0 <qspi_initialize+0x3c>)
 8001196:	f002 fabd 	bl	8003714 <HAL_QSPI_Init>

	qspi_reset_memory();
 800119a:	f7ff fec3 	bl	8000f24 <qspi_reset_memory>
	qspi_dummy_cycles_config();
 800119e:	f7ff ff01 	bl	8000fa4 <qspi_dummy_cycles_config>
	qspi_quad_enable();
 80011a2:	f7ff ff45 	bl	8001030 <qspi_quad_enable>
	if (mode == MEMORY_MAPPED)
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d102      	bne.n	80011b2 <qspi_initialize+0x2e>
	{
		qspi_enable_memory_mapped();
 80011ac:	f7ff ffac 	bl	8001108 <qspi_enable_memory_mapped>
	}
	else
	{
		memory_already_mapped = 0;
	}
}
 80011b0:	e002      	b.n	80011b8 <qspi_initialize+0x34>
		memory_already_mapped = 0;
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <qspi_initialize+0x40>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200001e4 	.word	0x200001e4
 80011c4:	200001e0 	.word	0x200001e0

080011c8 <qspi_SetMode>:

void qspi_SetMode(uint8_t mode)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	if (mode == INDIRECT_POLLING)
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d004      	beq.n	80011e2 <qspi_SetMode+0x1a>
	{
		//qspi_initialize(INDIRECT_POLLING);
	}
	else if (mode == MEMORY_MAPPED)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d101      	bne.n	80011e2 <qspi_SetMode+0x1a>
	{
		qspi_enable_memory_mapped();
 80011de:	f7ff ff93 	bl	8001108 <qspi_enable_memory_mapped>
	}

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <qpsi_EraseSector>:

int qpsi_EraseSector(uint32_t address)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b092      	sub	sp, #72	; 0x48
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
    int ok = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t             use_qpi = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    QSPI_CommandTypeDef s_command;
    if(use_qpi)
 80011fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001202:	2b00      	cmp	r3, #0
 8001204:	d008      	beq.n	8001218 <qpsi_EraseSector+0x2c>
    {
        s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8001206:	f44f 7340 	mov.w	r3, #768	; 0x300
 800120a:	623b      	str	r3, [r7, #32]
        s_command.Instruction     = SECTOR_ERASE_QPI_CMD;
 800120c:	2320      	movs	r3, #32
 800120e:	60bb      	str	r3, [r7, #8]
        s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 8001210:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
 8001216:	e007      	b.n	8001228 <qpsi_EraseSector+0x3c>
    }
    else
    {
        s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800121c:	623b      	str	r3, [r7, #32]
        s_command.Instruction     = SECTOR_ERASE_CMD;
 800121e:	23d7      	movs	r3, #215	; 0xd7
 8001220:	60bb      	str	r3, [r7, #8]
        s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 8001222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
    }
    s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800122c:	617b      	str	r3, [r7, #20]
    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800122e:	2300      	movs	r3, #0
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.DataMode          = QSPI_DATA_NONE;
 8001232:	2300      	movs	r3, #0
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DummyCycles       = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    s_command.NbData            = 1;
 800123a:	2301      	movs	r3, #1
 800123c:	633b      	str	r3, [r7, #48]	; 0x30
    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	637b      	str	r3, [r7, #52]	; 0x34
    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001242:	2300      	movs	r3, #0
 8001244:	63bb      	str	r3, [r7, #56]	; 0x38
    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001246:	2300      	movs	r3, #0
 8001248:	63fb      	str	r3, [r7, #60]	; 0x3c
    s_command.Address           = address;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60fb      	str	r3, [r7, #12]


    // Erasing takes a long time anyway, so not much point trying to
    // minimize reinitializations
    qspi_SetMode(INDIRECT_POLLING);
 800124e:	2000      	movs	r0, #0
 8001250:	f7ff ffba 	bl	80011c8 <qspi_SetMode>

    if(qspi_WriteEnable() != 1)
 8001254:	f7ff fe18 	bl	8000e88 <qspi_WriteEnable>
 8001258:	4603      	mov	r3, r0
 800125a:	2b01      	cmp	r3, #1
 800125c:	d001      	beq.n	8001262 <qpsi_EraseSector+0x76>
    {
    	qspi_error();
 800125e:	f7ff fdc9 	bl	8000df4 <qspi_error>
    }
    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	f241 3288 	movw	r2, #5000	; 0x1388
 800126a:	4619      	mov	r1, r3
 800126c:	480b      	ldr	r0, [pc, #44]	; (800129c <qpsi_EraseSector+0xb0>)
 800126e:	f002 fae5 	bl	800383c <HAL_QSPI_Command>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <qpsi_EraseSector+0x90>
       != HAL_OK)
    {
    	qspi_error();
 8001278:	f7ff fdbc 	bl	8000df4 <qspi_error>
    }
    if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800127c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001280:	f7ff fdc4 	bl	8000e0c <AutopollingMemReady>
 8001284:	4603      	mov	r3, r0
 8001286:	2b01      	cmp	r3, #1
 8001288:	d001      	beq.n	800128e <qpsi_EraseSector+0xa2>
       != 1)
    {
    	qspi_error();
 800128a:	f7ff fdb3 	bl	8000df4 <qspi_error>
    }

    //qspi_SetMode(MEMORY_MAPPED);

    ok= 1;
 800128e:	2301      	movs	r3, #1
 8001290:	647b      	str	r3, [r7, #68]	; 0x44
    return ok;
 8001292:	6c7b      	ldr	r3, [r7, #68]	; 0x44

}
 8001294:	4618      	mov	r0, r3
 8001296:	3748      	adds	r7, #72	; 0x48
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200001e4 	.word	0x200001e4

080012a0 <qspi_Erase>:


void qspi_Erase(uint32_t start_addr, uint32_t end_addr)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
    uint32_t block_addr;
    uint32_t block_size = IS25LP064A_SECTOR_SIZE; // 4kB blocks for now.
 80012aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ae:	60fb      	str	r3, [r7, #12]
    // 64kB chunks for now.
    start_addr = start_addr - (start_addr % block_size);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80012b8:	68f9      	ldr	r1, [r7, #12]
 80012ba:	fb01 f202 	mul.w	r2, r1, r2
 80012be:	1a9b      	subs	r3, r3, r2
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	607b      	str	r3, [r7, #4]
    while(end_addr > start_addr)
 80012c6:	e00f      	b.n	80012e8 <qspi_Erase+0x48>
    {
        block_addr = start_addr & 0x0FFFFFFF;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80012ce:	60bb      	str	r3, [r7, #8]
        if(qpsi_EraseSector(block_addr) != 1)
 80012d0:	68b8      	ldr	r0, [r7, #8]
 80012d2:	f7ff ff8b 	bl	80011ec <qpsi_EraseSector>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d001      	beq.n	80012e0 <qspi_Erase+0x40>
        {
        	qspi_error();
 80012dc:	f7ff fd8a 	bl	8000df4 <qspi_error>
        }
        start_addr += block_size;
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	607b      	str	r3, [r7, #4]
    while(end_addr > start_addr)
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d8eb      	bhi.n	80012c8 <qspi_Erase+0x28>
    }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <qspi_WritePage>:

int qspi_WritePage(uint32_t address, uint32_t size, uint8_t* buffer, uint8_t     reset_mode)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b094      	sub	sp, #80	; 0x50
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	70fb      	strb	r3, [r7, #3]
	  //RETURN_IF_ERR(CheckProgramMemory());
	int ok = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	64fb      	str	r3, [r7, #76]	; 0x4c

	qspi_SetMode(INDIRECT_POLLING);
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff ff5a 	bl	80011c8 <qspi_SetMode>

	    QSPI_CommandTypeDef s_command;
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
	    s_command.Instruction       = PAGE_PROG_CMD;
 800131a:	2302      	movs	r3, #2
 800131c:	617b      	str	r3, [r7, #20]
	    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800131e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
	    s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001328:	623b      	str	r3, [r7, #32]
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800132a:	2300      	movs	r3, #0
 800132c:	637b      	str	r3, [r7, #52]	; 0x34
	    s_command.DataMode          = QSPI_DATA_1_LINE;
 800132e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001332:	63bb      	str	r3, [r7, #56]	; 0x38
	    s_command.DummyCycles       = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
	    s_command.NbData            = size <= 256 ? size : 256;
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800133e:	bf28      	it	cs
 8001340:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8001344:	63fb      	str	r3, [r7, #60]	; 0x3c
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	643b      	str	r3, [r7, #64]	; 0x40
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800134a:	2300      	movs	r3, #0
 800134c:	647b      	str	r3, [r7, #68]	; 0x44
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800134e:	2300      	movs	r3, #0
 8001350:	64bb      	str	r3, [r7, #72]	; 0x48
	    s_command.Address           = address;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	61bb      	str	r3, [r7, #24]
	    if(qspi_WriteEnable() != 1)
 8001356:	f7ff fd97 	bl	8000e88 <qspi_WriteEnable>
 800135a:	4603      	mov	r3, r0
 800135c:	2b01      	cmp	r3, #1
 800135e:	d001      	beq.n	8001364 <qspi_WritePage+0x68>
	    {
	    	qspi_error();
 8001360:	f7ff fd48 	bl	8000df4 <qspi_error>
	    }
	    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	f241 3288 	movw	r2, #5000	; 0x1388
 800136c:	4619      	mov	r1, r3
 800136e:	4814      	ldr	r0, [pc, #80]	; (80013c0 <qspi_WritePage+0xc4>)
 8001370:	f002 fa64 	bl	800383c <HAL_QSPI_Command>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <qspi_WritePage+0x82>
	       != HAL_OK)
	    {
	    	qspi_error();
 800137a:	f7ff fd3b 	bl	8000df4 <qspi_error>
	    }
	    if(HAL_QSPI_Transmit(
 800137e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	480e      	ldr	r0, [pc, #56]	; (80013c0 <qspi_WritePage+0xc4>)
 8001386:	f002 fab7 	bl	80038f8 <HAL_QSPI_Transmit>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <qspi_WritePage+0x98>
	           &hqspi, (uint8_t*)buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
	       != HAL_OK)
	    {
	    	qspi_error();
 8001390:	f7ff fd30 	bl	8000df4 <qspi_error>
	    }
	    if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001394:	f241 3088 	movw	r0, #5000	; 0x1388
 8001398:	f7ff fd38 	bl	8000e0c <AutopollingMemReady>
 800139c:	4603      	mov	r3, r0
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d001      	beq.n	80013a6 <qspi_WritePage+0xaa>
	       != 1)
	    {
	    	qspi_error();
 80013a2:	f7ff fd27 	bl	8000df4 <qspi_error>
	    }

	    if(reset_mode)
 80013a6:	78fb      	ldrb	r3, [r7, #3]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d002      	beq.n	80013b2 <qspi_WritePage+0xb6>
	    	qspi_SetMode(MEMORY_MAPPED);
 80013ac:	2001      	movs	r0, #1
 80013ae:	f7ff ff0b 	bl	80011c8 <qspi_SetMode>

	    ok= 1;
 80013b2:	2301      	movs	r3, #1
 80013b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	    return ok;
 80013b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3750      	adds	r7, #80	; 0x50
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200001e4 	.word	0x200001e4

080013c4 <qspi_Write>:

void qspi_Write(uint32_t address, uint32_t size, uint8_t* buffer)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08c      	sub	sp, #48	; 0x30
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
	 uint32_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013d4:	2300      	movs	r3, #0
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
	    uint32_t QSPI_DataNum    = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
	    uint32_t flash_page_size = IS25LP064A_PAGE_SIZE;
 80013e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ec:	617b      	str	r3, [r7, #20]
	    address                  = address & 0x0FFFFFFF;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80013f4:	60fb      	str	r3, [r7, #12]
	    Addr                     = address % flash_page_size;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80013fe:	6979      	ldr	r1, [r7, #20]
 8001400:	fb01 f202 	mul.w	r2, r1, r2
 8001404:	1a9b      	subs	r3, r3, r2
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
	    count                    = flash_page_size - Addr;
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	623b      	str	r3, [r7, #32]
	    NumOfPage                = size / flash_page_size;
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	fbb2 f3f3 	udiv	r3, r2, r3
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
	    NumOfSingle              = size % flash_page_size;
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001422:	6979      	ldr	r1, [r7, #20]
 8001424:	fb01 f202 	mul.w	r2, r1, r2
 8001428:	1a9b      	subs	r3, r3, r2
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28

	    if(Addr == 0) /*!< Address is QSPI_PAGESIZE aligned  */
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	2b00      	cmp	r3, #0
 8001430:	d12c      	bne.n	800148c <qspi_Write+0xc8>
	    {
	        if(NumOfPage == 0) /*!< NumByteToWrite < QSPI_PAGESIZE */
 8001432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001434:	2b00      	cmp	r3, #0
 8001436:	d118      	bne.n	800146a <qspi_Write+0xa6>
	        {
	            QSPI_DataNum = size;
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	61bb      	str	r3, [r7, #24]
	            qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 800143c:	2300      	movs	r3, #0
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	69b9      	ldr	r1, [r7, #24]
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f7ff ff5a 	bl	80012fc <qspi_WritePage>
 8001448:	e090      	b.n	800156c <qspi_Write+0x1a8>
	        }
	        else /*!< Size > QSPI_PAGESIZE */
	        {
	            while(NumOfPage--)
	            {
	                QSPI_DataNum = flash_page_size;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	61bb      	str	r3, [r7, #24]
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 800144e:	2300      	movs	r3, #0
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	69b9      	ldr	r1, [r7, #24]
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f7ff ff51 	bl	80012fc <qspi_WritePage>
	                address += flash_page_size;
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	4413      	add	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]
	                buffer += flash_page_size;
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	4413      	add	r3, r2
 8001468:	607b      	str	r3, [r7, #4]
	            while(NumOfPage--)
 800146a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146c:	1e5a      	subs	r2, r3, #1
 800146e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1ea      	bne.n	800144a <qspi_Write+0x86>
	            }

	            QSPI_DataNum = NumOfSingle;
 8001474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001476:	61bb      	str	r3, [r7, #24]
	            if(QSPI_DataNum > 0)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d076      	beq.n	800156c <qspi_Write+0x1a8>
	            	qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 800147e:	2300      	movs	r3, #0
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	69b9      	ldr	r1, [r7, #24]
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7ff ff39 	bl	80012fc <qspi_WritePage>
 800148a:	e06f      	b.n	800156c <qspi_Write+0x1a8>
	        }
	    }
	    else /*!< Address is not QSPI_PAGESIZE aligned  */
	    {
	        if(NumOfPage == 0) /*!< Size < QSPI_PAGESIZE */
 800148c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800148e:	2b00      	cmp	r3, #0
 8001490:	d129      	bne.n	80014e6 <qspi_Write+0x122>
	        {
	            if(NumOfSingle > count) /*!< (Size + Address) > QSPI_PAGESIZE */
 8001492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	429a      	cmp	r2, r3
 8001498:	d91c      	bls.n	80014d4 <qspi_Write+0x110>
	            {
	                temp         = NumOfSingle - count;
 800149a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800149c:	6a3b      	ldr	r3, [r7, #32]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	61fb      	str	r3, [r7, #28]
	                QSPI_DataNum = count;
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	61bb      	str	r3, [r7, #24]
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 80014a6:	2300      	movs	r3, #0
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	69b9      	ldr	r1, [r7, #24]
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f7ff ff25 	bl	80012fc <qspi_WritePage>
	                address += count;
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	4413      	add	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
	                buffer += count;
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	4413      	add	r3, r2
 80014c0:	607b      	str	r3, [r7, #4]
	                QSPI_DataNum = temp;
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	61bb      	str	r3, [r7, #24]
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 80014c6:	2300      	movs	r3, #0
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	69b9      	ldr	r1, [r7, #24]
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f7ff ff15 	bl	80012fc <qspi_WritePage>
 80014d2:	e04b      	b.n	800156c <qspi_Write+0x1a8>
	            }
	            else
	            {
	                QSPI_DataNum = size;
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	61bb      	str	r3, [r7, #24]
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 80014d8:	2300      	movs	r3, #0
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	69b9      	ldr	r1, [r7, #24]
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f7ff ff0c 	bl	80012fc <qspi_WritePage>
 80014e4:	e042      	b.n	800156c <qspi_Write+0x1a8>
	            }
	        }
	        else /*!< Size > QSPI_PAGESIZE */
	        {
	            size -= count;
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	60bb      	str	r3, [r7, #8]
	            NumOfPage    = size / flash_page_size;
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	            NumOfSingle  = size % flash_page_size;
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8001500:	6979      	ldr	r1, [r7, #20]
 8001502:	fb01 f202 	mul.w	r2, r1, r2
 8001506:	1a9b      	subs	r3, r3, r2
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
	            QSPI_DataNum = count;
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	61bb      	str	r3, [r7, #24]
	            qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 800150e:	2300      	movs	r3, #0
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	69b9      	ldr	r1, [r7, #24]
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f7ff fef1 	bl	80012fc <qspi_WritePage>
	            address += count;
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	6a3b      	ldr	r3, [r7, #32]
 800151e:	4413      	add	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
	            buffer += count;
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	4413      	add	r3, r2
 8001528:	607b      	str	r3, [r7, #4]

	            while(NumOfPage--)
 800152a:	e00f      	b.n	800154c <qspi_Write+0x188>
	            {
	                QSPI_DataNum = flash_page_size;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	61bb      	str	r3, [r7, #24]
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8001530:	2300      	movs	r3, #0
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	69b9      	ldr	r1, [r7, #24]
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f7ff fee0 	bl	80012fc <qspi_WritePage>
	                address += flash_page_size;
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	4413      	add	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]
	                buffer += flash_page_size;
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	4413      	add	r3, r2
 800154a:	607b      	str	r3, [r7, #4]
	            while(NumOfPage--)
 800154c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154e:	1e5a      	subs	r2, r3, #1
 8001550:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1ea      	bne.n	800152c <qspi_Write+0x168>
	            }

	            if(NumOfSingle != 0)
 8001556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001558:	2b00      	cmp	r3, #0
 800155a:	d007      	beq.n	800156c <qspi_Write+0x1a8>
	            {
	                QSPI_DataNum = NumOfSingle;
 800155c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155e:	61bb      	str	r3, [r7, #24]
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8001560:	2300      	movs	r3, #0
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	69b9      	ldr	r1, [r7, #24]
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f7ff fec8 	bl	80012fc <qspi_WritePage>
	            }
	        }
	    }

	    qspi_SetMode(MEMORY_MAPPED);
 800156c:	2001      	movs	r0, #1
 800156e:	f7ff fe2b 	bl	80011c8 <qspi_SetMode>


}
 8001572:	bf00      	nop
 8001574:	3730      	adds	r7, #48	; 0x30
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <FS_FileOperations>:



static void FS_FileOperations(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8001582:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001586:	f000 fd75 	bl	8002074 <HAL_Delay>
	disk_initialize(0);
 800158a:	2000      	movs	r0, #0
 800158c:	f009 f892 	bl	800a6b4 <disk_initialize>
    disk_status(0);
 8001590:	2000      	movs	r0, #0
 8001592:	f009 f875 	bl	800a680 <disk_status>
    //{
      //ShowDiskStatus(status);
    //}


	if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 8001596:	2201      	movs	r2, #1
 8001598:	4924      	ldr	r1, [pc, #144]	; (800162c <FS_FileOperations+0xb0>)
 800159a:	4825      	ldr	r0, [pc, #148]	; (8001630 <FS_FileOperations+0xb4>)
 800159c:	f00b fbe2 	bl	800cd64 <f_mount>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d13d      	bne.n	8001622 <FS_FileOperations+0xa6>

		FRESULT res;


		//search for .bin firmware files
		res = f_findfirst(&dir, &fno, SDPath, "Electrosteel_Daisy_Audio.bin");
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <FS_FileOperations+0xb8>)
 80015a8:	4a20      	ldr	r2, [pc, #128]	; (800162c <FS_FileOperations+0xb0>)
 80015aa:	4923      	ldr	r1, [pc, #140]	; (8001638 <FS_FileOperations+0xbc>)
 80015ac:	4823      	ldr	r0, [pc, #140]	; (800163c <FS_FileOperations+0xc0>)
 80015ae:	f00c f8b3 	bl	800d718 <f_findfirst>
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]

		/* Repeat while an item is found */
		if (fno.fname[0])
 80015b6:	4b20      	ldr	r3, [pc, #128]	; (8001638 <FS_FileOperations+0xbc>)
 80015b8:	7d9b      	ldrb	r3, [r3, #22]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d029      	beq.n	8001612 <FS_FileOperations+0x96>
		{
		  if(res == FR_OK)
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d126      	bne.n	8001612 <FS_FileOperations+0x96>
		  {
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 80015c4:	2211      	movs	r2, #17
 80015c6:	491e      	ldr	r1, [pc, #120]	; (8001640 <FS_FileOperations+0xc4>)
 80015c8:	481e      	ldr	r0, [pc, #120]	; (8001644 <FS_FileOperations+0xc8>)
 80015ca:	f00b fc11 	bl	800cdf0 <f_open>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d11e      	bne.n	8001612 <FS_FileOperations+0x96>
				{

					//write to local SRAM, then copy that to QSPI flash for more permanent storage
					f_read(&SDFile, &tempBinaryBuffer, f_size(&SDFile), &bytesRead);
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <FS_FileOperations+0xc8>)
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <FS_FileOperations+0xcc>)
 80015da:	491c      	ldr	r1, [pc, #112]	; (800164c <FS_FileOperations+0xd0>)
 80015dc:	4819      	ldr	r0, [pc, #100]	; (8001644 <FS_FileOperations+0xc8>)
 80015de:	f00b fdc2 	bl	800d166 <f_read>



					if (bytesRead < 262140)
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <FS_FileOperations+0xcc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a1a      	ldr	r2, [pc, #104]	; (8001650 <FS_FileOperations+0xd4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d80f      	bhi.n	800160c <FS_FileOperations+0x90>
					{
						qspi_Erase(QSPI_START, QSPI_START+262140);
 80015ec:	4919      	ldr	r1, [pc, #100]	; (8001654 <FS_FileOperations+0xd8>)
 80015ee:	f04f 4010 	mov.w	r0, #2415919104	; 0x90000000
 80015f2:	f7ff fe55 	bl	80012a0 <qspi_Erase>
						qspi_Write(QSPI_START, 262140,(uint8_t*)tempBinaryBuffer);
 80015f6:	4a15      	ldr	r2, [pc, #84]	; (800164c <FS_FileOperations+0xd0>)
 80015f8:	4917      	ldr	r1, [pc, #92]	; (8001658 <FS_FileOperations+0xdc>)
 80015fa:	f04f 4010 	mov.w	r0, #2415919104	; 0x90000000
 80015fe:	f7ff fee1 	bl	80013c4 <qspi_Write>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001602:	2201      	movs	r2, #1
 8001604:	2180      	movs	r1, #128	; 0x80
 8001606:	4815      	ldr	r0, [pc, #84]	; (800165c <FS_FileOperations+0xe0>)
 8001608:	f001 fa0e 	bl	8002a28 <HAL_GPIO_WritePin>
					}

					f_close(&SDFile);
 800160c:	480d      	ldr	r0, [pc, #52]	; (8001644 <FS_FileOperations+0xc8>)
 800160e:	f00b ff5b 	bl	800d4c8 <f_close>
			}


		  }

		f_closedir(&dir);
 8001612:	480a      	ldr	r0, [pc, #40]	; (800163c <FS_FileOperations+0xc0>)
 8001614:	f00b fff5 	bl	800d602 <f_closedir>
		f_mount(0, "", 0); //unmount
 8001618:	2200      	movs	r2, #0
 800161a:	4911      	ldr	r1, [pc, #68]	; (8001660 <FS_FileOperations+0xe4>)
 800161c:	2000      	movs	r0, #0
 800161e:	f00b fba1 	bl	800cd64 <f_mount>
	}


}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200002b4 	.word	0x200002b4
 8001630:	200002b8 	.word	0x200002b8
 8001634:	0800d9f0 	.word	0x0800d9f0
 8001638:	20000084 	.word	0x20000084
 800163c:	2000019c 	.word	0x2000019c
 8001640:	2000009a 	.word	0x2000009a
 8001644:	200004ec 	.word	0x200004ec
 8001648:	200001d4 	.word	0x200001d4
 800164c:	24000000 	.word	0x24000000
 8001650:	0003fffb 	.word	0x0003fffb
 8001654:	9003fffc 	.word	0x9003fffc
 8001658:	0003fffc 	.word	0x0003fffc
 800165c:	58020800 	.word	0x58020800
 8001660:	0800da10 	.word	0x0800da10

08001664 <HAL_GPIO_EXTI_Callback>:


// EXTI Line12 External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]
	if (boardNumber != 0)
 800166e:	4b6a      	ldr	r3, [pc, #424]	; (8001818 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 80cc 	beq.w	8001810 <HAL_GPIO_EXTI_Callback+0x1ac>
	{
		if(GPIO_Pin == GPIO_PIN_12) // If The INT Source Is EXTI Line12
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800167e:	f040 80c7 	bne.w	8001810 <HAL_GPIO_EXTI_Callback+0x1ac>
		{
			MX_I2C1_Init();
 8001682:	f7fe ffb5 	bl	80005f0 <MX_I2C1_Init>
			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) ==  1)
 8001686:	e006      	b.n	8001696 <HAL_GPIO_EXTI_Callback+0x32>
			{
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8001688:	2180      	movs	r1, #128	; 0x80
 800168a:	4864      	ldr	r0, [pc, #400]	; (800181c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800168c:	f001 f9e5 	bl	8002a5a <HAL_GPIO_TogglePin>
				HAL_Delay(1);//wait for pin to go back low
 8001690:	2001      	movs	r0, #1
 8001692:	f000 fcef 	bl	8002074 <HAL_Delay>
			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) ==  1)
 8001696:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800169a:	4861      	ldr	r0, [pc, #388]	; (8001820 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800169c:	f001 f9ac 	bl	80029f8 <HAL_GPIO_ReadPin>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d0f0      	beq.n	8001688 <HAL_GPIO_EXTI_Callback+0x24>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80016a6:	2201      	movs	r2, #1
 80016a8:	2180      	movs	r1, #128	; 0x80
 80016aa:	485c      	ldr	r0, [pc, #368]	; (800181c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80016ac:	f001 f9bc 	bl	8002a28 <HAL_GPIO_WritePin>
			HAL_I2C_Slave_Receive(&hi2c1, tempBinaryBuffer, 65535,
 80016b0:	f242 7310 	movw	r3, #10000	; 0x2710
 80016b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b8:	495a      	ldr	r1, [pc, #360]	; (8001824 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80016ba:	485b      	ldr	r0, [pc, #364]	; (8001828 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80016bc:	f001 fbb6 	bl	8002e2c <HAL_I2C_Slave_Receive>
					10000);
			int i = 6;
 80016c0:	2306      	movs	r3, #6
 80016c2:	60fb      	str	r3, [r7, #12]
			while(i--)
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_EXTI_Callback+0x70>
			{
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80016c6:	2180      	movs	r1, #128	; 0x80
 80016c8:	4854      	ldr	r0, [pc, #336]	; (800181c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80016ca:	f001 f9c6 	bl	8002a5a <HAL_GPIO_TogglePin>
				HAL_Delay(30);
 80016ce:	201e      	movs	r0, #30
 80016d0:	f000 fcd0 	bl	8002074 <HAL_Delay>
			while(i--)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1e5a      	subs	r2, r3, #1
 80016d8:	60fa      	str	r2, [r7, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f3      	bne.n	80016c6 <HAL_GPIO_EXTI_Callback+0x62>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	484e      	ldr	r0, [pc, #312]	; (800181c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80016e4:	f001 f9a0 	bl	8002a28 <HAL_GPIO_WritePin>
			HAL_I2C_Slave_Receive(&hi2c1, tempBinaryBuffer+65535, 65535,
 80016e8:	4950      	ldr	r1, [pc, #320]	; (800182c <HAL_GPIO_EXTI_Callback+0x1c8>)
 80016ea:	f242 7310 	movw	r3, #10000	; 0x2710
 80016ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016f2:	484d      	ldr	r0, [pc, #308]	; (8001828 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80016f4:	f001 fb9a 	bl	8002e2c <HAL_I2C_Slave_Receive>
					10000);
			i = 6;
 80016f8:	2306      	movs	r3, #6
 80016fa:	60fb      	str	r3, [r7, #12]
			while(i--)
 80016fc:	e006      	b.n	800170c <HAL_GPIO_EXTI_Callback+0xa8>
			{
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80016fe:	2180      	movs	r1, #128	; 0x80
 8001700:	4846      	ldr	r0, [pc, #280]	; (800181c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001702:	f001 f9aa 	bl	8002a5a <HAL_GPIO_TogglePin>
				HAL_Delay(30);
 8001706:	201e      	movs	r0, #30
 8001708:	f000 fcb4 	bl	8002074 <HAL_Delay>
			while(i--)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	1e5a      	subs	r2, r3, #1
 8001710:	60fa      	str	r2, [r7, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f3      	bne.n	80016fe <HAL_GPIO_EXTI_Callback+0x9a>
			}

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001716:	2201      	movs	r2, #1
 8001718:	2180      	movs	r1, #128	; 0x80
 800171a:	4840      	ldr	r0, [pc, #256]	; (800181c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800171c:	f001 f984 	bl	8002a28 <HAL_GPIO_WritePin>
			HAL_I2C_Slave_Receive(&hi2c1, tempBinaryBuffer+131070, 65535,
 8001720:	4943      	ldr	r1, [pc, #268]	; (8001830 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001722:	f242 7310 	movw	r3, #10000	; 0x2710
 8001726:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800172a:	483f      	ldr	r0, [pc, #252]	; (8001828 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800172c:	f001 fb7e 	bl	8002e2c <HAL_I2C_Slave_Receive>
					10000);
			i = 6;
 8001730:	2306      	movs	r3, #6
 8001732:	60fb      	str	r3, [r7, #12]
			while(i--)
 8001734:	e006      	b.n	8001744 <HAL_GPIO_EXTI_Callback+0xe0>
			{
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8001736:	2180      	movs	r1, #128	; 0x80
 8001738:	4838      	ldr	r0, [pc, #224]	; (800181c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800173a:	f001 f98e 	bl	8002a5a <HAL_GPIO_TogglePin>
				HAL_Delay(70);
 800173e:	2046      	movs	r0, #70	; 0x46
 8001740:	f000 fc98 	bl	8002074 <HAL_Delay>
			while(i--)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	1e5a      	subs	r2, r3, #1
 8001748:	60fa      	str	r2, [r7, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f3      	bne.n	8001736 <HAL_GPIO_EXTI_Callback+0xd2>
			}

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	4832      	ldr	r0, [pc, #200]	; (800181c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001754:	f001 f968 	bl	8002a28 <HAL_GPIO_WritePin>
			HAL_I2C_Slave_Receive(&hi2c1, tempBinaryBuffer+196605, 65535,
 8001758:	4936      	ldr	r1, [pc, #216]	; (8001834 <HAL_GPIO_EXTI_Callback+0x1d0>)
 800175a:	f242 7310 	movw	r3, #10000	; 0x2710
 800175e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001762:	4831      	ldr	r0, [pc, #196]	; (8001828 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001764:	f001 fb62 	bl	8002e2c <HAL_I2C_Slave_Receive>
					10000);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001768:	2201      	movs	r2, #1
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	482b      	ldr	r0, [pc, #172]	; (800181c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800176e:	f001 f95b 	bl	8002a28 <HAL_GPIO_WritePin>
			i = 6;
 8001772:	2306      	movs	r3, #6
 8001774:	60fb      	str	r3, [r7, #12]
			while(i--)
 8001776:	e006      	b.n	8001786 <HAL_GPIO_EXTI_Callback+0x122>
			{
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8001778:	2180      	movs	r1, #128	; 0x80
 800177a:	4828      	ldr	r0, [pc, #160]	; (800181c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800177c:	f001 f96d 	bl	8002a5a <HAL_GPIO_TogglePin>
				HAL_Delay(30);
 8001780:	201e      	movs	r0, #30
 8001782:	f000 fc77 	bl	8002074 <HAL_Delay>
			while(i--)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1e5a      	subs	r2, r3, #1
 800178a:	60fa      	str	r2, [r7, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f3      	bne.n	8001778 <HAL_GPIO_EXTI_Callback+0x114>
			}

			qspi_Erase(QSPI_START, QSPI_START+262140);
 8001790:	4929      	ldr	r1, [pc, #164]	; (8001838 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001792:	f04f 4010 	mov.w	r0, #2415919104	; 0x90000000
 8001796:	f7ff fd83 	bl	80012a0 <qspi_Erase>
			qspi_Write(QSPI_START, 262140,(uint8_t*)tempBinaryBuffer);
 800179a:	4a22      	ldr	r2, [pc, #136]	; (8001824 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800179c:	4927      	ldr	r1, [pc, #156]	; (800183c <HAL_GPIO_EXTI_Callback+0x1d8>)
 800179e:	f04f 4010 	mov.w	r0, #2415919104	; 0x90000000
 80017a2:	f7ff fe0f 	bl	80013c4 <qspi_Write>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2180      	movs	r1, #128	; 0x80
 80017aa:	481c      	ldr	r0, [pc, #112]	; (800181c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80017ac:	f001 f93c 	bl	8002a28 <HAL_GPIO_WritePin>
			  if (!memory_already_mapped)
 80017b0:	4b23      	ldr	r3, [pc, #140]	; (8001840 <HAL_GPIO_EXTI_Callback+0x1dc>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_GPIO_EXTI_Callback+0x15a>
			  {
				  qspi_enable_memory_mapped();
 80017ba:	f7ff fca5 	bl	8001108 <qspi_enable_memory_mapped>

			  }
			  i = 6;
 80017be:	2306      	movs	r3, #6
 80017c0:	60fb      	str	r3, [r7, #12]
				while(i--)
 80017c2:	e006      	b.n	80017d2 <HAL_GPIO_EXTI_Callback+0x16e>
				{
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80017c4:	2180      	movs	r1, #128	; 0x80
 80017c6:	4815      	ldr	r0, [pc, #84]	; (800181c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80017c8:	f001 f947 	bl	8002a5a <HAL_GPIO_TogglePin>
					HAL_Delay(30);
 80017cc:	201e      	movs	r0, #30
 80017ce:	f000 fc51 	bl	8002074 <HAL_Delay>
				while(i--)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1e5a      	subs	r2, r3, #1
 80017d6:	60fa      	str	r2, [r7, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f3      	bne.n	80017c4 <HAL_GPIO_EXTI_Callback+0x160>
				}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80017dc:	2201      	movs	r2, #1
 80017de:	2180      	movs	r1, #128	; 0x80
 80017e0:	480f      	ldr	r0, [pc, #60]	; (8001820 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80017e2:	f001 f921 	bl	8002a28 <HAL_GPIO_WritePin>

    	  HAL_I2C_DeInit(&hi2c1);
 80017e6:	4810      	ldr	r0, [pc, #64]	; (8001828 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80017e8:	f001 f9fc 	bl	8002be4 <HAL_I2C_DeInit>
	 	  HAL_QSPI_MspDeInit(&hqspi);
 80017ec:	4815      	ldr	r0, [pc, #84]	; (8001844 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80017ee:	f000 f941 	bl	8001a74 <HAL_QSPI_MspDeInit>
		  HAL_RCC_DeInit();
 80017f2:	f002 fbb7 	bl	8003f64 <HAL_RCC_DeInit>
		  HAL_DeInit();
 80017f6:	f000 fb81 	bl	8001efc <HAL_DeInit>
  	 	  SysTick->CTRL = 0;
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
  	 	  SysTick->LOAD = 0;
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8001802:	2200      	movs	r2, #0
 8001804:	605a      	str	r2, [r3, #4]
  	 	  SysTick->VAL  = 0;
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  	 	  HAL_NVIC_SystemReset();
 800180c:	f000 fdad 	bl	800236a <HAL_NVIC_SystemReset>

		}
	}
}
 8001810:	bf00      	nop
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000000 	.word	0x20000000
 800181c:	58020800 	.word	0x58020800
 8001820:	58020400 	.word	0x58020400
 8001824:	24000000 	.word	0x24000000
 8001828:	20000030 	.word	0x20000030
 800182c:	2400ffff 	.word	0x2400ffff
 8001830:	2401fffe 	.word	0x2401fffe
 8001834:	2402fffd 	.word	0x2402fffd
 8001838:	9003fffc 	.word	0x9003fffc
 800183c:	0003fffc 	.word	0x0003fffc
 8001840:	200001e0 	.word	0x200001e0
 8001844:	200001e4 	.word	0x200001e4
 8001848:	e000e010 	.word	0xe000e010

0800184c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001852:	463b      	mov	r3, r7
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800185e:	f000 fd95 	bl	800238c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001862:	2301      	movs	r3, #1
 8001864:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001866:	2300      	movs	r3, #0
 8001868:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 800186a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 800186e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8001870:	2316      	movs	r3, #22
 8001872:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001874:	2300      	movs	r3, #0
 8001876:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001878:	2300      	movs	r3, #0
 800187a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800187c:	2303      	movs	r3, #3
 800187e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001890:	463b      	mov	r3, r7
 8001892:	4618      	mov	r0, r3
 8001894:	f000 fdb2 	bl	80023fc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001898:	2004      	movs	r0, #4
 800189a:	f000 fd8f 	bl	80023bc <HAL_MPU_Enable>

}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018aa:	b672      	cpsid	i
}
 80018ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ae:	e7fe      	b.n	80018ae <Error_Handler+0x8>

080018b0 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <MX_QUADSPI_Init+0x50>)
 80018b6:	4a13      	ldr	r2, [pc, #76]	; (8001904 <MX_QUADSPI_Init+0x54>)
 80018b8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <MX_QUADSPI_Init+0x50>)
 80018bc:	2201      	movs	r2, #1
 80018be:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <MX_QUADSPI_Init+0x50>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <MX_QUADSPI_Init+0x50>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 19;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <MX_QUADSPI_Init+0x50>)
 80018ce:	2213      	movs	r2, #19
 80018d0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80018d2:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <MX_QUADSPI_Init+0x50>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <MX_QUADSPI_Init+0x50>)
 80018da:	2200      	movs	r2, #0
 80018dc:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80018de:	4b08      	ldr	r3, [pc, #32]	; (8001900 <MX_QUADSPI_Init+0x50>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <MX_QUADSPI_Init+0x50>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <MX_QUADSPI_Init+0x50>)
 80018ec:	f001 ff12 	bl	8003714 <HAL_QSPI_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80018f6:	f7ff ffd6 	bl	80018a6 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200001e4 	.word	0x200001e4
 8001904:	52005000 	.word	0x52005000

08001908 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b0bc      	sub	sp, #240	; 0xf0
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001920:	f107 0318 	add.w	r3, r7, #24
 8001924:	22c0      	movs	r2, #192	; 0xc0
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f00c f835 	bl	800d998 <memset>
  if(qspiHandle->Instance==QUADSPI)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a4c      	ldr	r2, [pc, #304]	; (8001a64 <HAL_QSPI_MspInit+0x15c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	f040 8091 	bne.w	8001a5c <HAL_QSPI_MspInit+0x154>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800193a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001946:	2301      	movs	r3, #1
 8001948:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 800194a:	230c      	movs	r3, #12
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 800194e:	2308      	movs	r3, #8
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001952:	2302      	movs	r3, #2
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001956:	2302      	movs	r3, #2
 8001958:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800195a:	23c0      	movs	r3, #192	; 0xc0
 800195c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800195e:	2300      	movs	r3, #0
 8001960:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8001962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001966:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL2;
 8001968:	2320      	movs	r3, #32
 800196a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800196c:	f107 0318 	add.w	r3, r7, #24
 8001970:	4618      	mov	r0, r3
 8001972:	f003 fbf1 	bl	8005158 <HAL_RCCEx_PeriphCLKConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_QSPI_MspInit+0x78>
    {
      Error_Handler();
 800197c:	f7ff ff93 	bl	80018a6 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001980:	4b39      	ldr	r3, [pc, #228]	; (8001a68 <HAL_QSPI_MspInit+0x160>)
 8001982:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001986:	4a38      	ldr	r2, [pc, #224]	; (8001a68 <HAL_QSPI_MspInit+0x160>)
 8001988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800198c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001990:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <HAL_QSPI_MspInit+0x160>)
 8001992:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800199e:	4b32      	ldr	r3, [pc, #200]	; (8001a68 <HAL_QSPI_MspInit+0x160>)
 80019a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a4:	4a30      	ldr	r2, [pc, #192]	; (8001a68 <HAL_QSPI_MspInit+0x160>)
 80019a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ae:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <HAL_QSPI_MspInit+0x160>)
 80019b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019bc:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <HAL_QSPI_MspInit+0x160>)
 80019be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c2:	4a29      	ldr	r2, [pc, #164]	; (8001a68 <HAL_QSPI_MspInit+0x160>)
 80019c4:	f043 0320 	orr.w	r3, r3, #32
 80019c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019cc:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <HAL_QSPI_MspInit+0x160>)
 80019ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d2:	f003 0320 	and.w	r3, r3, #32
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019da:	2340      	movs	r3, #64	; 0x40
 80019dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ec:	2303      	movs	r3, #3
 80019ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019f2:	230a      	movs	r3, #10
 80019f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019fc:	4619      	mov	r1, r3
 80019fe:	481b      	ldr	r0, [pc, #108]	; (8001a6c <HAL_QSPI_MspInit+0x164>)
 8001a00:	f000 fd40 	bl	8002484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
 8001a04:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001a08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a1e:	2309      	movs	r3, #9
 8001a20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a24:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4811      	ldr	r0, [pc, #68]	; (8001a70 <HAL_QSPI_MspInit+0x168>)
 8001a2c:	f000 fd2a 	bl	8002484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001a30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a4a:	230a      	movs	r3, #10
 8001a4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a54:	4619      	mov	r1, r3
 8001a56:	4806      	ldr	r0, [pc, #24]	; (8001a70 <HAL_QSPI_MspInit+0x168>)
 8001a58:	f000 fd14 	bl	8002484 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	37f0      	adds	r7, #240	; 0xf0
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	52005000 	.word	0x52005000
 8001a68:	58024400 	.word	0x58024400
 8001a6c:	58021800 	.word	0x58021800
 8001a70:	58021400 	.word	0x58021400

08001a74 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <HAL_QSPI_MspDeInit+0x3c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d110      	bne.n	8001aa8 <HAL_QSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_QSPI_MspDeInit+0x40>)
 8001a88:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001a8c:	4a09      	ldr	r2, [pc, #36]	; (8001ab4 <HAL_QSPI_MspDeInit+0x40>)
 8001a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a92:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_6);
 8001a96:	2140      	movs	r1, #64	; 0x40
 8001a98:	4807      	ldr	r0, [pc, #28]	; (8001ab8 <HAL_QSPI_MspDeInit+0x44>)
 8001a9a:	f000 fea3 	bl	80027e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 8001a9e:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8001aa2:	4806      	ldr	r0, [pc, #24]	; (8001abc <HAL_QSPI_MspDeInit+0x48>)
 8001aa4:	f000 fe9e 	bl	80027e4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	52005000 	.word	0x52005000
 8001ab4:	58024400 	.word	0x58024400
 8001ab8:	58021800 	.word	0x58021800
 8001abc:	58021400 	.word	0x58021400

08001ac0 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <MX_SDMMC1_SD_Init+0x34>)
 8001ac6:	4a0c      	ldr	r2, [pc, #48]	; (8001af8 <MX_SDMMC1_SD_Init+0x38>)
 8001ac8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <MX_SDMMC1_SD_Init+0x34>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <MX_SDMMC1_SD_Init+0x34>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001ad6:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <MX_SDMMC1_SD_Init+0x34>)
 8001ad8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001adc:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <MX_SDMMC1_SD_Init+0x34>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 25;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <MX_SDMMC1_SD_Init+0x34>)
 8001ae6:	2219      	movs	r2, #25
 8001ae8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	20000230 	.word	0x20000230
 8001af8:	52007000 	.word	0x52007000

08001afc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b0bc      	sub	sp, #240	; 0xf0
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b14:	f107 0318 	add.w	r3, r7, #24
 8001b18:	22c0      	movs	r2, #192	; 0xc0
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f00b ff3b 	bl	800d998 <memset>
  if(sdHandle->Instance==SDMMC1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a3c      	ldr	r2, [pc, #240]	; (8001c18 <HAL_SD_MspInit+0x11c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d171      	bne.n	8001c10 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001b2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b3c:	f107 0318 	add.w	r3, r7, #24
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 fb09 	bl	8005158 <HAL_RCCEx_PeriphCLKConfig>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001b4c:	f7ff feab 	bl	80018a6 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001b50:	4b32      	ldr	r3, [pc, #200]	; (8001c1c <HAL_SD_MspInit+0x120>)
 8001b52:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001b56:	4a31      	ldr	r2, [pc, #196]	; (8001c1c <HAL_SD_MspInit+0x120>)
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001b60:	4b2e      	ldr	r3, [pc, #184]	; (8001c1c <HAL_SD_MspInit+0x120>)
 8001b62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6e:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <HAL_SD_MspInit+0x120>)
 8001b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b74:	4a29      	ldr	r2, [pc, #164]	; (8001c1c <HAL_SD_MspInit+0x120>)
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b7e:	4b27      	ldr	r3, [pc, #156]	; (8001c1c <HAL_SD_MspInit+0x120>)
 8001b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b8c:	4b23      	ldr	r3, [pc, #140]	; (8001c1c <HAL_SD_MspInit+0x120>)
 8001b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b92:	4a22      	ldr	r2, [pc, #136]	; (8001c1c <HAL_SD_MspInit+0x120>)
 8001b94:	f043 0308 	orr.w	r3, r3, #8
 8001b98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <HAL_SD_MspInit+0x120>)
 8001b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8001baa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001bae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001bc4:	230c      	movs	r3, #12
 8001bc6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4813      	ldr	r0, [pc, #76]	; (8001c20 <HAL_SD_MspInit+0x124>)
 8001bd2:	f000 fc57 	bl	8002484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be8:	2303      	movs	r3, #3
 8001bea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001bee:	230c      	movs	r3, #12
 8001bf0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bf4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	480a      	ldr	r0, [pc, #40]	; (8001c24 <HAL_SD_MspInit+0x128>)
 8001bfc:	f000 fc42 	bl	8002484 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 2, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2102      	movs	r1, #2
 8001c04:	2031      	movs	r0, #49	; 0x31
 8001c06:	f000 fb7a 	bl	80022fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001c0a:	2031      	movs	r0, #49	; 0x31
 8001c0c:	f000 fb91 	bl	8002332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001c10:	bf00      	nop
 8001c12:	37f0      	adds	r7, #240	; 0xf0
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	52007000 	.word	0x52007000
 8001c1c:	58024400 	.word	0x58024400
 8001c20:	58020800 	.word	0x58020800
 8001c24:	58020c00 	.word	0x58020c00

08001c28 <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* sdHandle)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  if(sdHandle->Instance==SDMMC1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0d      	ldr	r2, [pc, #52]	; (8001c6c <HAL_SD_MspDeInit+0x44>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d113      	bne.n	8001c62 <HAL_SD_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

  /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <HAL_SD_MspDeInit+0x48>)
 8001c3c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c40:	4a0b      	ldr	r2, [pc, #44]	; (8001c70 <HAL_SD_MspDeInit+0x48>)
 8001c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c46:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8001c4a:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8001c4e:	4809      	ldr	r0, [pc, #36]	; (8001c74 <HAL_SD_MspDeInit+0x4c>)
 8001c50:	f000 fdc8 	bl	80027e4 <HAL_GPIO_DeInit>
                          |GPIO_PIN_8);

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8001c54:	2104      	movs	r1, #4
 8001c56:	4808      	ldr	r0, [pc, #32]	; (8001c78 <HAL_SD_MspDeInit+0x50>)
 8001c58:	f000 fdc4 	bl	80027e4 <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 8001c5c:	2031      	movs	r0, #49	; 0x31
 8001c5e:	f000 fb76 	bl	800234e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	52007000 	.word	0x52007000
 8001c70:	58024400 	.word	0x58024400
 8001c74:	58020800 	.word	0x58020800
 8001c78:	58020c00 	.word	0x58020c00

08001c7c <Reset_Handler>:
	#ifdef sram_layout
	asm ("ldr sp, =_estack");
	#endif

	void **pSource, **pDest;
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 8001c7c:	4d0c      	ldr	r5, [pc, #48]	; (8001cb0 <Reset_Handler+0x34>)
 8001c7e:	4c0d      	ldr	r4, [pc, #52]	; (8001cb4 <Reset_Handler+0x38>)
 8001c80:	e003      	b.n	8001c8a <Reset_Handler+0xe>
		*pDest = *pSource;
 8001c82:	682b      	ldr	r3, [r5, #0]
 8001c84:	6023      	str	r3, [r4, #0]
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 8001c86:	3504      	adds	r5, #4
 8001c88:	3404      	adds	r4, #4
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <Reset_Handler+0x3c>)
 8001c8c:	429c      	cmp	r4, r3
 8001c8e:	d1f8      	bne.n	8001c82 <Reset_Handler+0x6>

	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 8001c90:	4c0a      	ldr	r4, [pc, #40]	; (8001cbc <Reset_Handler+0x40>)
 8001c92:	e002      	b.n	8001c9a <Reset_Handler+0x1e>
		*pDest = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	6023      	str	r3, [r4, #0]
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 8001c98:	3404      	adds	r4, #4
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <Reset_Handler+0x44>)
 8001c9c:	429c      	cmp	r4, r3
 8001c9e:	d1f9      	bne.n	8001c94 <Reset_Handler+0x18>

	#ifndef BOOT_APP
	SystemInit();
 8001ca0:	f000 f868 	bl	8001d74 <SystemInit>
	#endif
	__libc_init_array();
 8001ca4:	f00b fe80 	bl	800d9a8 <__libc_init_array>


	(void)main();
 8001ca8:	f7fe fd80 	bl	80007ac <main>
	for (;;) ;
 8001cac:	e7fe      	b.n	8001cac <Reset_Handler+0x30>
 8001cae:	bf00      	nop
 8001cb0:	0800dee0 	.word	0x0800dee0
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000014 	.word	0x20000014
 8001cbc:	20000014 	.word	0x20000014
 8001cc0:	2000094c 	.word	0x2000094c

08001cc4 <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
 8001cc4:	e7fe      	b.n	8001cc4 <Default_Handler>
	...

08001cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_MspInit+0x30>)
 8001cd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cd4:	4a08      	ldr	r2, [pc, #32]	; (8001cf8 <HAL_MspInit+0x30>)
 8001cd6:	f043 0302 	orr.w	r3, r3, #2
 8001cda:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_MspInit+0x30>)
 8001ce0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	58024400 	.word	0x58024400

08001cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <NMI_Handler+0x4>

08001d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d06:	e7fe      	b.n	8001d06 <HardFault_Handler+0x4>

08001d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <MemManage_Handler+0x4>

08001d0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d12:	e7fe      	b.n	8001d12 <BusFault_Handler+0x4>

08001d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <UsageFault_Handler+0x4>

08001d1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d48:	f000 f974 	bl	8002034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001d54:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d58:	f000 fe99 	bl	8002a8e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <SDMMC1_IRQHandler+0x10>)
 8001d66:	f006 fb2d 	bl	80083c4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000230 	.word	0x20000230

08001d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d78:	4b37      	ldr	r3, [pc, #220]	; (8001e58 <SystemInit+0xe4>)
 8001d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7e:	4a36      	ldr	r2, [pc, #216]	; (8001e58 <SystemInit+0xe4>)
 8001d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d88:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <SystemInit+0xe8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	2b06      	cmp	r3, #6
 8001d92:	d807      	bhi.n	8001da4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d94:	4b31      	ldr	r3, [pc, #196]	; (8001e5c <SystemInit+0xe8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 030f 	bic.w	r3, r3, #15
 8001d9c:	4a2f      	ldr	r2, [pc, #188]	; (8001e5c <SystemInit+0xe8>)
 8001d9e:	f043 0307 	orr.w	r3, r3, #7
 8001da2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001da4:	4b2e      	ldr	r3, [pc, #184]	; (8001e60 <SystemInit+0xec>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a2d      	ldr	r2, [pc, #180]	; (8001e60 <SystemInit+0xec>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001db0:	4b2b      	ldr	r3, [pc, #172]	; (8001e60 <SystemInit+0xec>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001db6:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <SystemInit+0xec>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4929      	ldr	r1, [pc, #164]	; (8001e60 <SystemInit+0xec>)
 8001dbc:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <SystemInit+0xf0>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001dc2:	4b26      	ldr	r3, [pc, #152]	; (8001e5c <SystemInit+0xe8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d007      	beq.n	8001dde <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001dce:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <SystemInit+0xe8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 030f 	bic.w	r3, r3, #15
 8001dd6:	4a21      	ldr	r2, [pc, #132]	; (8001e5c <SystemInit+0xe8>)
 8001dd8:	f043 0307 	orr.w	r3, r3, #7
 8001ddc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <SystemInit+0xec>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001de4:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <SystemInit+0xec>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001dea:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <SystemInit+0xec>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <SystemInit+0xec>)
 8001df2:	4a1d      	ldr	r2, [pc, #116]	; (8001e68 <SystemInit+0xf4>)
 8001df4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <SystemInit+0xec>)
 8001df8:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <SystemInit+0xf8>)
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001dfc:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <SystemInit+0xec>)
 8001dfe:	4a1c      	ldr	r2, [pc, #112]	; (8001e70 <SystemInit+0xfc>)
 8001e00:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <SystemInit+0xec>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e08:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <SystemInit+0xec>)
 8001e0a:	4a19      	ldr	r2, [pc, #100]	; (8001e70 <SystemInit+0xfc>)
 8001e0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <SystemInit+0xec>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <SystemInit+0xec>)
 8001e16:	4a16      	ldr	r2, [pc, #88]	; (8001e70 <SystemInit+0xfc>)
 8001e18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <SystemInit+0xec>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <SystemInit+0xec>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <SystemInit+0xec>)
 8001e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <SystemInit+0xec>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <SystemInit+0x100>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <SystemInit+0x104>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e3e:	d202      	bcs.n	8001e46 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <SystemInit+0x108>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <SystemInit+0x10c>)
 8001e48:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001e4c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00
 8001e5c:	52002000 	.word	0x52002000
 8001e60:	58024400 	.word	0x58024400
 8001e64:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e68:	02020200 	.word	0x02020200
 8001e6c:	01ff0000 	.word	0x01ff0000
 8001e70:	01010280 	.word	0x01010280
 8001e74:	5c001000 	.word	0x5c001000
 8001e78:	ffff0000 	.word	0xffff0000
 8001e7c:	51008108 	.word	0x51008108
 8001e80:	52004000 	.word	0x52004000

08001e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e8a:	2003      	movs	r0, #3
 8001e8c:	f000 fa2c 	bl	80022e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e90:	f002 ffa2 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <HAL_Init+0x68>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	0a1b      	lsrs	r3, r3, #8
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	4913      	ldr	r1, [pc, #76]	; (8001ef0 <HAL_Init+0x6c>)
 8001ea2:	5ccb      	ldrb	r3, [r1, r3]
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001eae:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <HAL_Init+0x68>)
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	4a0e      	ldr	r2, [pc, #56]	; (8001ef0 <HAL_Init+0x6c>)
 8001eb8:	5cd3      	ldrb	r3, [r2, r3]
 8001eba:	f003 031f 	and.w	r3, r3, #31
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec4:	4a0b      	ldr	r2, [pc, #44]	; (8001ef4 <HAL_Init+0x70>)
 8001ec6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ec8:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <HAL_Init+0x74>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f000 f87a 	bl	8001fc8 <HAL_InitTick>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e002      	b.n	8001ee4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ede:	f7ff fef3 	bl	8001cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	58024400 	.word	0x58024400
 8001ef0:	0800da5c 	.word	0x0800da5c
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	20000004 	.word	0x20000004

08001efc <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_AHB3_FORCE_RESET();
 8001f00:	4b26      	ldr	r3, [pc, #152]	; (8001f9c <HAL_DeInit+0xa0>)
 8001f02:	4a27      	ldr	r2, [pc, #156]	; (8001fa0 <HAL_DeInit+0xa4>)
 8001f04:	67da      	str	r2, [r3, #124]	; 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001f06:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <HAL_DeInit+0xa0>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_RCC_AHB1_FORCE_RESET();
 8001f0c:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <HAL_DeInit+0xa0>)
 8001f0e:	4a25      	ldr	r2, [pc, #148]	; (8001fa4 <HAL_DeInit+0xa8>)
 8001f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001f14:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <HAL_DeInit+0xa0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_RCC_AHB2_FORCE_RESET();
 8001f1c:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <HAL_DeInit+0xa0>)
 8001f1e:	f240 2271 	movw	r2, #625	; 0x271
 8001f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001f26:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_DeInit+0xa0>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_RCC_AHB4_FORCE_RESET();
 8001f2e:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_DeInit+0xa0>)
 8001f30:	4a1d      	ldr	r2, [pc, #116]	; (8001fa8 <HAL_DeInit+0xac>)
 8001f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_DeInit+0xa0>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_RCC_APB3_FORCE_RESET();
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <HAL_DeInit+0xa0>)
 8001f40:	2218      	movs	r2, #24
 8001f42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <HAL_DeInit+0xa0>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  __HAL_RCC_APB1L_FORCE_RESET();
 8001f4e:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <HAL_DeInit+0xa0>)
 8001f50:	4a16      	ldr	r2, [pc, #88]	; (8001fac <HAL_DeInit+0xb0>)
 8001f52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_DeInit+0xa0>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  __HAL_RCC_APB1H_FORCE_RESET();
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <HAL_DeInit+0xa0>)
 8001f60:	f44f 729b 	mov.w	r2, #310	; 0x136
 8001f64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <HAL_DeInit+0xa0>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

   __HAL_RCC_APB2_FORCE_RESET();
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <HAL_DeInit+0xa0>)
 8001f72:	4a0f      	ldr	r2, [pc, #60]	; (8001fb0 <HAL_DeInit+0xb4>)
 8001f74:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   __HAL_RCC_APB2_RELEASE_RESET();
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_DeInit+0xa0>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  __HAL_RCC_APB4_FORCE_RESET();
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_DeInit+0xa0>)
 8001f82:	4a0c      	ldr	r2, [pc, #48]	; (8001fb4 <HAL_DeInit+0xb8>)
 8001f84:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <HAL_DeInit+0xa0>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001f90:	f000 f812 	bl	8001fb8 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	58024400 	.word	0x58024400
 8001fa0:	00015031 	.word	0x00015031
 8001fa4:	0a00c023 	.word	0x0a00c023
 8001fa8:	032807ff 	.word	0x032807ff
 8001fac:	e8ffc3ff 	.word	0xe8ffc3ff
 8001fb0:	31d73033 	.word	0x31d73033
 8001fb4:	0020deaa 	.word	0x0020deaa

08001fb8 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001fd0:	4b15      	ldr	r3, [pc, #84]	; (8002028 <HAL_InitTick+0x60>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e021      	b.n	8002020 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001fdc:	4b13      	ldr	r3, [pc, #76]	; (800202c <HAL_InitTick+0x64>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_InitTick+0x60>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f9bd 	bl	8002372 <HAL_SYSTICK_Config>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00e      	b.n	8002020 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b0f      	cmp	r3, #15
 8002006:	d80a      	bhi.n	800201e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002008:	2200      	movs	r2, #0
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002010:	f000 f975 	bl	80022fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002014:	4a06      	ldr	r2, [pc, #24]	; (8002030 <HAL_InitTick+0x68>)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e000      	b.n	8002020 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000010 	.word	0x20000010
 800202c:	20000004 	.word	0x20000004
 8002030:	2000000c 	.word	0x2000000c

08002034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_IncTick+0x20>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_IncTick+0x24>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4413      	add	r3, r2
 8002044:	4a04      	ldr	r2, [pc, #16]	; (8002058 <HAL_IncTick+0x24>)
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000010 	.word	0x20000010
 8002058:	200002ac 	.word	0x200002ac

0800205c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return uwTick;
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <HAL_GetTick+0x14>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	200002ac 	.word	0x200002ac

08002074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800207c:	f7ff ffee 	bl	800205c <HAL_GetTick>
 8002080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800208c:	d005      	beq.n	800209a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <HAL_Delay+0x44>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800209a:	bf00      	nop
 800209c:	f7ff ffde 	bl	800205c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d8f7      	bhi.n	800209c <HAL_Delay+0x28>
  {
  }
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000010 	.word	0x20000010

080020bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80020c0:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <HAL_GetREVID+0x14>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	0c1b      	lsrs	r3, r3, #16
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	5c001000 	.word	0x5c001000

080020d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <__NVIC_SetPriorityGrouping+0x40>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f0:	4013      	ands	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002102:	4a04      	ldr	r2, [pc, #16]	; (8002114 <__NVIC_SetPriorityGrouping+0x40>)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	60d3      	str	r3, [r2, #12]
}
 8002108:	bf00      	nop
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000ed00 	.word	0xe000ed00
 8002118:	05fa0000 	.word	0x05fa0000

0800211c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <__NVIC_GetPriorityGrouping+0x18>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	f003 0307 	and.w	r3, r3, #7
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002146:	2b00      	cmp	r3, #0
 8002148:	db0b      	blt.n	8002162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	f003 021f 	and.w	r2, r3, #31
 8002150:	4907      	ldr	r1, [pc, #28]	; (8002170 <__NVIC_EnableIRQ+0x38>)
 8002152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	2001      	movs	r0, #1
 800215a:	fa00 f202 	lsl.w	r2, r0, r2
 800215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000e100 	.word	0xe000e100

08002174 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800217e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002182:	2b00      	cmp	r3, #0
 8002184:	db12      	blt.n	80021ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	f003 021f 	and.w	r2, r3, #31
 800218c:	490a      	ldr	r1, [pc, #40]	; (80021b8 <__NVIC_DisableIRQ+0x44>)
 800218e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	2001      	movs	r0, #1
 8002196:	fa00 f202 	lsl.w	r2, r0, r2
 800219a:	3320      	adds	r3, #32
 800219c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80021a0:	f3bf 8f4f 	dsb	sy
}
 80021a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021a6:	f3bf 8f6f 	isb	sy
}
 80021aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000e100 	.word	0xe000e100

080021bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	6039      	str	r1, [r7, #0]
 80021c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	db0a      	blt.n	80021e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	490c      	ldr	r1, [pc, #48]	; (8002208 <__NVIC_SetPriority+0x4c>)
 80021d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021da:	0112      	lsls	r2, r2, #4
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	440b      	add	r3, r1
 80021e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e4:	e00a      	b.n	80021fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4908      	ldr	r1, [pc, #32]	; (800220c <__NVIC_SetPriority+0x50>)
 80021ec:	88fb      	ldrh	r3, [r7, #6]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	3b04      	subs	r3, #4
 80021f4:	0112      	lsls	r2, r2, #4
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	440b      	add	r3, r1
 80021fa:	761a      	strb	r2, [r3, #24]
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000e100 	.word	0xe000e100
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f1c3 0307 	rsb	r3, r3, #7
 800222a:	2b04      	cmp	r3, #4
 800222c:	bf28      	it	cs
 800222e:	2304      	movcs	r3, #4
 8002230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3304      	adds	r3, #4
 8002236:	2b06      	cmp	r3, #6
 8002238:	d902      	bls.n	8002240 <NVIC_EncodePriority+0x30>
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3b03      	subs	r3, #3
 800223e:	e000      	b.n	8002242 <NVIC_EncodePriority+0x32>
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	401a      	ands	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002258:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	43d9      	mvns	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	4313      	orrs	r3, r2
         );
}
 800226a:	4618      	mov	r0, r3
 800226c:	3724      	adds	r7, #36	; 0x24
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800227c:	f3bf 8f4f 	dsb	sy
}
 8002280:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <__NVIC_SystemReset+0x24>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800228a:	4904      	ldr	r1, [pc, #16]	; (800229c <__NVIC_SystemReset+0x24>)
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <__NVIC_SystemReset+0x28>)
 800228e:	4313      	orrs	r3, r2
 8002290:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002292:	f3bf 8f4f 	dsb	sy
}
 8002296:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <__NVIC_SystemReset+0x20>
 800229c:	e000ed00 	.word	0xe000ed00
 80022a0:	05fa0004 	.word	0x05fa0004

080022a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b4:	d301      	bcc.n	80022ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00f      	b.n	80022da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ba:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <SysTick_Config+0x40>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c2:	210f      	movs	r1, #15
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022c8:	f7ff ff78 	bl	80021bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022cc:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <SysTick_Config+0x40>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d2:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <SysTick_Config+0x40>)
 80022d4:	2207      	movs	r2, #7
 80022d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	e000e010 	.word	0xe000e010

080022e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff feef 	bl	80020d4 <__NVIC_SetPriorityGrouping>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800230c:	f7ff ff06 	bl	800211c <__NVIC_GetPriorityGrouping>
 8002310:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	6978      	ldr	r0, [r7, #20]
 8002318:	f7ff ff7a 	bl	8002210 <NVIC_EncodePriority>
 800231c:	4602      	mov	r2, r0
 800231e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002322:	4611      	mov	r1, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff49 	bl	80021bc <__NVIC_SetPriority>
}
 800232a:	bf00      	nop
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800233c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fef9 	bl	8002138 <__NVIC_EnableIRQ>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002358:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff09 	bl	8002174 <__NVIC_DisableIRQ>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800236e:	f7ff ff83 	bl	8002278 <__NVIC_SystemReset>

08002372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff ff92 	bl	80022a4 <SysTick_Config>
 8002380:	4603      	mov	r3, r0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002390:	f3bf 8f5f 	dmb	sy
}
 8002394:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <HAL_MPU_Disable+0x28>)
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	4a06      	ldr	r2, [pc, #24]	; (80023b4 <HAL_MPU_Disable+0x28>)
 800239c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_MPU_Disable+0x2c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	605a      	str	r2, [r3, #4]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000ed00 	.word	0xe000ed00
 80023b8:	e000ed90 	.word	0xe000ed90

080023bc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80023c4:	4a0b      	ldr	r2, [pc, #44]	; (80023f4 <HAL_MPU_Enable+0x38>)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_MPU_Enable+0x3c>)
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <HAL_MPU_Enable+0x3c>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80023da:	f3bf 8f4f 	dsb	sy
}
 80023de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80023e0:	f3bf 8f6f 	isb	sy
}
 80023e4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000ed90 	.word	0xe000ed90
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	785a      	ldrb	r2, [r3, #1]
 8002408:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <HAL_MPU_ConfigRegion+0x84>)
 800240a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d029      	beq.n	8002468 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002414:	4a1a      	ldr	r2, [pc, #104]	; (8002480 <HAL_MPU_ConfigRegion+0x84>)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7b1b      	ldrb	r3, [r3, #12]
 8002420:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	7adb      	ldrb	r3, [r3, #11]
 8002426:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002428:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7a9b      	ldrb	r3, [r3, #10]
 800242e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002430:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	7b5b      	ldrb	r3, [r3, #13]
 8002436:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002438:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	7b9b      	ldrb	r3, [r3, #14]
 800243e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002440:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	7bdb      	ldrb	r3, [r3, #15]
 8002446:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002448:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	7a5b      	ldrb	r3, [r3, #9]
 800244e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002450:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	7a1b      	ldrb	r3, [r3, #8]
 8002456:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002458:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	7812      	ldrb	r2, [r2, #0]
 800245e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002460:	4a07      	ldr	r2, [pc, #28]	; (8002480 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002462:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002464:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002466:	e005      	b.n	8002474 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_MPU_ConfigRegion+0x84>)
 800246a:	2200      	movs	r2, #0
 800246c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800246e:	4b04      	ldr	r3, [pc, #16]	; (8002480 <HAL_MPU_ConfigRegion+0x84>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000ed90 	.word	0xe000ed90

08002484 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	; 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002492:	4b89      	ldr	r3, [pc, #548]	; (80026b8 <HAL_GPIO_Init+0x234>)
 8002494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002496:	e194      	b.n	80027c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2101      	movs	r1, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa01 f303 	lsl.w	r3, r1, r3
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8186 	beq.w	80027bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d005      	beq.n	80024c8 <HAL_GPIO_Init+0x44>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d130      	bne.n	800252a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2203      	movs	r2, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024fe:	2201      	movs	r2, #1
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	091b      	lsrs	r3, r3, #4
 8002514:	f003 0201 	and.w	r2, r3, #1
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b03      	cmp	r3, #3
 8002534:	d017      	beq.n	8002566 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	2203      	movs	r2, #3
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d123      	bne.n	80025ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	08da      	lsrs	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3208      	adds	r2, #8
 800257a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	220f      	movs	r2, #15
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	08da      	lsrs	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3208      	adds	r2, #8
 80025b4:	69b9      	ldr	r1, [r7, #24]
 80025b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	2203      	movs	r2, #3
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0203 	and.w	r2, r3, #3
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80e0 	beq.w	80027bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fc:	4b2f      	ldr	r3, [pc, #188]	; (80026bc <HAL_GPIO_Init+0x238>)
 80025fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002602:	4a2e      	ldr	r2, [pc, #184]	; (80026bc <HAL_GPIO_Init+0x238>)
 8002604:	f043 0302 	orr.w	r3, r3, #2
 8002608:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800260c:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <HAL_GPIO_Init+0x238>)
 800260e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800261a:	4a29      	ldr	r2, [pc, #164]	; (80026c0 <HAL_GPIO_Init+0x23c>)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	089b      	lsrs	r3, r3, #2
 8002620:	3302      	adds	r3, #2
 8002622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	220f      	movs	r2, #15
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a20      	ldr	r2, [pc, #128]	; (80026c4 <HAL_GPIO_Init+0x240>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d052      	beq.n	80026ec <HAL_GPIO_Init+0x268>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a1f      	ldr	r2, [pc, #124]	; (80026c8 <HAL_GPIO_Init+0x244>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d031      	beq.n	80026b2 <HAL_GPIO_Init+0x22e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a1e      	ldr	r2, [pc, #120]	; (80026cc <HAL_GPIO_Init+0x248>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d02b      	beq.n	80026ae <HAL_GPIO_Init+0x22a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a1d      	ldr	r2, [pc, #116]	; (80026d0 <HAL_GPIO_Init+0x24c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d025      	beq.n	80026aa <HAL_GPIO_Init+0x226>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <HAL_GPIO_Init+0x250>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d01f      	beq.n	80026a6 <HAL_GPIO_Init+0x222>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a1b      	ldr	r2, [pc, #108]	; (80026d8 <HAL_GPIO_Init+0x254>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d019      	beq.n	80026a2 <HAL_GPIO_Init+0x21e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a1a      	ldr	r2, [pc, #104]	; (80026dc <HAL_GPIO_Init+0x258>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_GPIO_Init+0x21a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a19      	ldr	r2, [pc, #100]	; (80026e0 <HAL_GPIO_Init+0x25c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00d      	beq.n	800269a <HAL_GPIO_Init+0x216>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <HAL_GPIO_Init+0x260>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <HAL_GPIO_Init+0x212>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a17      	ldr	r2, [pc, #92]	; (80026e8 <HAL_GPIO_Init+0x264>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_GPIO_Init+0x20e>
 800268e:	2309      	movs	r3, #9
 8002690:	e02d      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 8002692:	230a      	movs	r3, #10
 8002694:	e02b      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 8002696:	2308      	movs	r3, #8
 8002698:	e029      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 800269a:	2307      	movs	r3, #7
 800269c:	e027      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 800269e:	2306      	movs	r3, #6
 80026a0:	e025      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 80026a2:	2305      	movs	r3, #5
 80026a4:	e023      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 80026a6:	2304      	movs	r3, #4
 80026a8:	e021      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 80026aa:	2303      	movs	r3, #3
 80026ac:	e01f      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e01d      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e01b      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 80026b6:	bf00      	nop
 80026b8:	58000080 	.word	0x58000080
 80026bc:	58024400 	.word	0x58024400
 80026c0:	58000400 	.word	0x58000400
 80026c4:	58020000 	.word	0x58020000
 80026c8:	58020400 	.word	0x58020400
 80026cc:	58020800 	.word	0x58020800
 80026d0:	58020c00 	.word	0x58020c00
 80026d4:	58021000 	.word	0x58021000
 80026d8:	58021400 	.word	0x58021400
 80026dc:	58021800 	.word	0x58021800
 80026e0:	58021c00 	.word	0x58021c00
 80026e4:	58022000 	.word	0x58022000
 80026e8:	58022400 	.word	0x58022400
 80026ec:	2300      	movs	r3, #0
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	f002 0203 	and.w	r2, r2, #3
 80026f4:	0092      	lsls	r2, r2, #2
 80026f6:	4093      	lsls	r3, r2
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026fe:	4938      	ldr	r1, [pc, #224]	; (80027e0 <HAL_GPIO_Init+0x35c>)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	3302      	adds	r3, #2
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800270c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800273a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	3301      	adds	r3, #1
 80027c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f47f ae63 	bne.w	8002498 <HAL_GPIO_Init+0x14>
  }
}
 80027d2:	bf00      	nop
 80027d4:	bf00      	nop
 80027d6:	3724      	adds	r7, #36	; 0x24
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	58000400 	.word	0x58000400

080027e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80027f2:	4b75      	ldr	r3, [pc, #468]	; (80029c8 <HAL_GPIO_DeInit+0x1e4>)
 80027f4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80027f6:	e0d9      	b.n	80029ac <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80027f8:	2201      	movs	r2, #1
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	4013      	ands	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80cc 	beq.w	80029a6 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800280e:	4a6f      	ldr	r2, [pc, #444]	; (80029cc <HAL_GPIO_DeInit+0x1e8>)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	089b      	lsrs	r3, r3, #2
 8002814:	3302      	adds	r3, #2
 8002816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	220f      	movs	r2, #15
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	4013      	ands	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a67      	ldr	r2, [pc, #412]	; (80029d0 <HAL_GPIO_DeInit+0x1ec>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d037      	beq.n	80028a8 <HAL_GPIO_DeInit+0xc4>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a66      	ldr	r2, [pc, #408]	; (80029d4 <HAL_GPIO_DeInit+0x1f0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d031      	beq.n	80028a4 <HAL_GPIO_DeInit+0xc0>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a65      	ldr	r2, [pc, #404]	; (80029d8 <HAL_GPIO_DeInit+0x1f4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d02b      	beq.n	80028a0 <HAL_GPIO_DeInit+0xbc>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a64      	ldr	r2, [pc, #400]	; (80029dc <HAL_GPIO_DeInit+0x1f8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d025      	beq.n	800289c <HAL_GPIO_DeInit+0xb8>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a63      	ldr	r2, [pc, #396]	; (80029e0 <HAL_GPIO_DeInit+0x1fc>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d01f      	beq.n	8002898 <HAL_GPIO_DeInit+0xb4>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a62      	ldr	r2, [pc, #392]	; (80029e4 <HAL_GPIO_DeInit+0x200>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d019      	beq.n	8002894 <HAL_GPIO_DeInit+0xb0>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a61      	ldr	r2, [pc, #388]	; (80029e8 <HAL_GPIO_DeInit+0x204>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d013      	beq.n	8002890 <HAL_GPIO_DeInit+0xac>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a60      	ldr	r2, [pc, #384]	; (80029ec <HAL_GPIO_DeInit+0x208>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d00d      	beq.n	800288c <HAL_GPIO_DeInit+0xa8>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a5f      	ldr	r2, [pc, #380]	; (80029f0 <HAL_GPIO_DeInit+0x20c>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d007      	beq.n	8002888 <HAL_GPIO_DeInit+0xa4>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a5e      	ldr	r2, [pc, #376]	; (80029f4 <HAL_GPIO_DeInit+0x210>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d101      	bne.n	8002884 <HAL_GPIO_DeInit+0xa0>
 8002880:	2309      	movs	r3, #9
 8002882:	e012      	b.n	80028aa <HAL_GPIO_DeInit+0xc6>
 8002884:	230a      	movs	r3, #10
 8002886:	e010      	b.n	80028aa <HAL_GPIO_DeInit+0xc6>
 8002888:	2308      	movs	r3, #8
 800288a:	e00e      	b.n	80028aa <HAL_GPIO_DeInit+0xc6>
 800288c:	2307      	movs	r3, #7
 800288e:	e00c      	b.n	80028aa <HAL_GPIO_DeInit+0xc6>
 8002890:	2306      	movs	r3, #6
 8002892:	e00a      	b.n	80028aa <HAL_GPIO_DeInit+0xc6>
 8002894:	2305      	movs	r3, #5
 8002896:	e008      	b.n	80028aa <HAL_GPIO_DeInit+0xc6>
 8002898:	2304      	movs	r3, #4
 800289a:	e006      	b.n	80028aa <HAL_GPIO_DeInit+0xc6>
 800289c:	2303      	movs	r3, #3
 800289e:	e004      	b.n	80028aa <HAL_GPIO_DeInit+0xc6>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e002      	b.n	80028aa <HAL_GPIO_DeInit+0xc6>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <HAL_GPIO_DeInit+0xc6>
 80028a8:	2300      	movs	r3, #0
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	f002 0203 	and.w	r2, r2, #3
 80028b0:	0092      	lsls	r2, r2, #2
 80028b2:	4093      	lsls	r3, r2
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d136      	bne.n	8002928 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	401a      	ands	r2, r3
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	401a      	ands	r2, r3
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80028d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	43db      	mvns	r3, r3
 80028e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028e4:	4013      	ands	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80028e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	43db      	mvns	r3, r3
 80028f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028f6:	4013      	ands	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	220f      	movs	r2, #15
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800290a:	4a30      	ldr	r2, [pc, #192]	; (80029cc <HAL_GPIO_DeInit+0x1e8>)
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	089b      	lsrs	r3, r3, #2
 8002910:	3302      	adds	r3, #2
 8002912:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	43da      	mvns	r2, r3
 800291a:	482c      	ldr	r0, [pc, #176]	; (80029cc <HAL_GPIO_DeInit+0x1e8>)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	400a      	ands	r2, r1
 8002922:	3302      	adds	r3, #2
 8002924:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	2103      	movs	r1, #3
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	08da      	lsrs	r2, r3, #3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3208      	adds	r2, #8
 8002944:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	220f      	movs	r2, #15
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	08d2      	lsrs	r2, r2, #3
 800295c:	4019      	ands	r1, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3208      	adds	r2, #8
 8002962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	2103      	movs	r1, #3
 8002970:	fa01 f303 	lsl.w	r3, r1, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	401a      	ands	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	2101      	movs	r1, #1
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	fa01 f303 	lsl.w	r3, r1, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	401a      	ands	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	2103      	movs	r1, #3
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	401a      	ands	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	609a      	str	r2, [r3, #8]
    }

    position++;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	3301      	adds	r3, #1
 80029aa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f47f af1f 	bne.w	80027f8 <HAL_GPIO_DeInit+0x14>
  }
}
 80029ba:	bf00      	nop
 80029bc:	bf00      	nop
 80029be:	371c      	adds	r7, #28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	58000080 	.word	0x58000080
 80029cc:	58000400 	.word	0x58000400
 80029d0:	58020000 	.word	0x58020000
 80029d4:	58020400 	.word	0x58020400
 80029d8:	58020800 	.word	0x58020800
 80029dc:	58020c00 	.word	0x58020c00
 80029e0:	58021000 	.word	0x58021000
 80029e4:	58021400 	.word	0x58021400
 80029e8:	58021800 	.word	0x58021800
 80029ec:	58021c00 	.word	0x58021c00
 80029f0:	58022000 	.word	0x58022000
 80029f4:	58022400 	.word	0x58022400

080029f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	887b      	ldrh	r3, [r7, #2]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
 8002a14:	e001      	b.n	8002a1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a16:	2300      	movs	r3, #0
 8002a18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
 8002a34:	4613      	mov	r3, r2
 8002a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a38:	787b      	ldrb	r3, [r7, #1]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a3e:	887a      	ldrh	r2, [r7, #2]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a44:	e003      	b.n	8002a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	041a      	lsls	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	619a      	str	r2, [r3, #24]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b085      	sub	sp, #20
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	460b      	mov	r3, r1
 8002a64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a6c:	887a      	ldrh	r2, [r7, #2]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4013      	ands	r3, r2
 8002a72:	041a      	lsls	r2, r3, #16
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	43d9      	mvns	r1, r3
 8002a78:	887b      	ldrh	r3, [r7, #2]
 8002a7a:	400b      	ands	r3, r1
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	619a      	str	r2, [r3, #24]
}
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	4603      	mov	r3, r0
 8002a96:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fe fdd5 	bl	8001664 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e07f      	b.n	8002bd6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d106      	bne.n	8002af0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fd fdc0 	bl	8000670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2224      	movs	r2, #36	; 0x24
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0201 	bic.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d107      	bne.n	8002b3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	e006      	b.n	8002b4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d104      	bne.n	8002b5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <HAL_I2C_Init+0x11c>)
 8002b6a:	430b      	orrs	r3, r1
 8002b6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69d9      	ldr	r1, [r3, #28]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1a      	ldr	r2, [r3, #32]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	02008000 	.word	0x02008000

08002be4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e021      	b.n	8002c3a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2224      	movs	r2, #36	; 0x24
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0201 	bic.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fd fd98 	bl	8000744 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	607a      	str	r2, [r7, #4]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	460b      	mov	r3, r1
 8002c52:	817b      	strh	r3, [r7, #10]
 8002c54:	4613      	mov	r3, r2
 8002c56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	f040 80da 	bne.w	8002e1a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_I2C_Master_Transmit+0x30>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e0d3      	b.n	8002e1c <HAL_I2C_Master_Transmit+0x1d8>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c7c:	f7ff f9ee 	bl	800205c <HAL_GetTick>
 8002c80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	2319      	movs	r3, #25
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 fa00 	bl	8003094 <I2C_WaitOnFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0be      	b.n	8002e1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2221      	movs	r2, #33	; 0x21
 8002ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2210      	movs	r2, #16
 8002caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	893a      	ldrh	r2, [r7, #8]
 8002cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2bff      	cmp	r3, #255	; 0xff
 8002cce:	d90e      	bls.n	8002cee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	22ff      	movs	r2, #255	; 0xff
 8002cd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	8979      	ldrh	r1, [r7, #10]
 8002cde:	4b51      	ldr	r3, [pc, #324]	; (8002e24 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 fc10 	bl	800350c <I2C_TransferConfig>
 8002cec:	e06c      	b.n	8002dc8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	8979      	ldrh	r1, [r7, #10]
 8002d00:	4b48      	ldr	r3, [pc, #288]	; (8002e24 <HAL_I2C_Master_Transmit+0x1e0>)
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 fbff 	bl	800350c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002d0e:	e05b      	b.n	8002dc8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	6a39      	ldr	r1, [r7, #32]
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 fa0c 	bl	8003132 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e07b      	b.n	8002e1c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d034      	beq.n	8002dc8 <HAL_I2C_Master_Transmit+0x184>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d130      	bne.n	8002dc8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2180      	movs	r1, #128	; 0x80
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f98f 	bl	8003094 <I2C_WaitOnFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e04d      	b.n	8002e1c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2bff      	cmp	r3, #255	; 0xff
 8002d88:	d90e      	bls.n	8002da8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	22ff      	movs	r2, #255	; 0xff
 8002d8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	8979      	ldrh	r1, [r7, #10]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 fbb3 	bl	800350c <I2C_TransferConfig>
 8002da6:	e00f      	b.n	8002dc8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	8979      	ldrh	r1, [r7, #10]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 fba2 	bl	800350c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d19e      	bne.n	8002d10 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	6a39      	ldr	r1, [r7, #32]
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f9f2 	bl	80031c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e01a      	b.n	8002e1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2220      	movs	r2, #32
 8002dec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_I2C_Master_Transmit+0x1e4>)
 8002dfa:	400b      	ands	r3, r1
 8002dfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e000      	b.n	8002e1c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002e1a:	2302      	movs	r3, #2
  }
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	80002000 	.word	0x80002000
 8002e28:	fe00e800 	.word	0xfe00e800

08002e2c <HAL_I2C_Slave_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                        uint32_t Timeout)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	f040 80fc 	bne.w	8003042 <HAL_I2C_Slave_Receive+0x216>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <HAL_I2C_Slave_Receive+0x2a>
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d105      	bne.n	8002e62 <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e5c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e0f0      	b.n	8003044 <HAL_I2C_Slave_Receive+0x218>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_I2C_Slave_Receive+0x44>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e0e9      	b.n	8003044 <HAL_I2C_Slave_Receive+0x218>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e78:	f7ff f8f0 	bl	800205c <HAL_GetTick>
 8002e7c:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2222      	movs	r2, #34	; 0x22
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	88fa      	ldrh	r2, [r7, #6]
 8002e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize = hi2c->XferCount;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferISR   = NULL;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ebe:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2108      	movs	r1, #8
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f8e2 	bl	8003094 <I2C_WaitOnFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_I2C_Slave_Receive+0xbe>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ee4:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e0ac      	b.n	8003044 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2208      	movs	r2, #8
 8002ef0:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f8c8 	bl	8003094 <I2C_WaitOnFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d054      	beq.n	8002fb4 <HAL_I2C_Slave_Receive+0x188>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f18:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e092      	b.n	8003044 <HAL_I2C_Slave_Receive+0x218>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	6839      	ldr	r1, [r7, #0]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f990 	bl	8003248 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d029      	beq.n	8002f82 <HAL_I2C_Slave_Receive+0x156>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f3c:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d118      	bne.n	8002f7e <HAL_I2C_Slave_Receive+0x152>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	855a      	strh	r2, [r3, #42]	; 0x2a
          hi2c->XferSize--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	851a      	strh	r2, [r3, #40]	; 0x28
        }

        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e060      	b.n	8003044 <HAL_I2C_Slave_Receive+0x218>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1af      	bne.n	8002f1e <HAL_I2C_Slave_Receive+0xf2>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	6839      	ldr	r1, [r7, #0]
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f8fc 	bl	80031c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fdc:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e030      	b.n	8003044 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f84c 	bl	8003094 <I2C_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d009      	beq.n	8003016 <HAL_I2C_Slave_Receive+0x1ea>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003010:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e016      	b.n	8003044 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003024:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	e000      	b.n	8003044 <HAL_I2C_Slave_Receive+0x218>
  }
  else
  {
    return HAL_BUSY;
 8003042:	2302      	movs	r3, #2
  }
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b02      	cmp	r3, #2
 8003060:	d103      	bne.n	800306a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2200      	movs	r2, #0
 8003068:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b01      	cmp	r3, #1
 8003076:	d007      	beq.n	8003088 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	619a      	str	r2, [r3, #24]
  }
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	4613      	mov	r3, r2
 80030a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030a4:	e031      	b.n	800310a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ac:	d02d      	beq.n	800310a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ae:	f7fe ffd5 	bl	800205c <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d302      	bcc.n	80030c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d122      	bne.n	800310a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699a      	ldr	r2, [r3, #24]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4013      	ands	r3, r2
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	461a      	mov	r2, r3
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d113      	bne.n	800310a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	f043 0220 	orr.w	r2, r3, #32
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e00f      	b.n	800312a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699a      	ldr	r2, [r3, #24]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4013      	ands	r3, r2
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	429a      	cmp	r2, r3
 8003118:	bf0c      	ite	eq
 800311a:	2301      	moveq	r3, #1
 800311c:	2300      	movne	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	429a      	cmp	r2, r3
 8003126:	d0be      	beq.n	80030a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800313e:	e033      	b.n	80031a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	68b9      	ldr	r1, [r7, #8]
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f901 	bl	800334c <I2C_IsErrorOccurred>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e031      	b.n	80031b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800315a:	d025      	beq.n	80031a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315c:	f7fe ff7e 	bl	800205c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	429a      	cmp	r2, r3
 800316a:	d302      	bcc.n	8003172 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d11a      	bne.n	80031a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b02      	cmp	r3, #2
 800317e:	d013      	beq.n	80031a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003184:	f043 0220 	orr.w	r2, r3, #32
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e007      	b.n	80031b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d1c4      	bne.n	8003140 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031cc:	e02f      	b.n	800322e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 f8ba 	bl	800334c <I2C_IsErrorOccurred>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e02d      	b.n	800323e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e2:	f7fe ff3b 	bl	800205c <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d302      	bcc.n	80031f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d11a      	bne.n	800322e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b20      	cmp	r3, #32
 8003204:	d013      	beq.n	800322e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320a:	f043 0220 	orr.w	r2, r3, #32
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e007      	b.n	800323e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	2b20      	cmp	r3, #32
 800323a:	d1c8      	bne.n	80031ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003254:	e06b      	b.n	800332e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f876 	bl	800334c <I2C_IsErrorOccurred>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e069      	b.n	800333e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b20      	cmp	r3, #32
 8003276:	d138      	bne.n	80032ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b04      	cmp	r3, #4
 8003284:	d105      	bne.n	8003292 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	e055      	b.n	800333e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b10      	cmp	r3, #16
 800329e:	d107      	bne.n	80032b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2210      	movs	r2, #16
 80032a6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2204      	movs	r2, #4
 80032ac:	645a      	str	r2, [r3, #68]	; 0x44
 80032ae:	e002      	b.n	80032b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2220      	movs	r2, #32
 80032bc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6859      	ldr	r1, [r3, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	4b1f      	ldr	r3, [pc, #124]	; (8003348 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80032ca:	400b      	ands	r3, r1
 80032cc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e029      	b.n	800333e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ea:	f7fe feb7 	bl	800205c <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d302      	bcc.n	8003300 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d116      	bne.n	800332e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b04      	cmp	r3, #4
 800330c:	d00f      	beq.n	800332e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	f043 0220 	orr.w	r2, r3, #32
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e007      	b.n	800333e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b04      	cmp	r3, #4
 800333a:	d18c      	bne.n	8003256 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	fe00e800 	.word	0xfe00e800

0800334c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08a      	sub	sp, #40	; 0x28
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b00      	cmp	r3, #0
 8003376:	d068      	beq.n	800344a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2210      	movs	r2, #16
 800337e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003380:	e049      	b.n	8003416 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003388:	d045      	beq.n	8003416 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800338a:	f7fe fe67 	bl	800205c <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	429a      	cmp	r2, r3
 8003398:	d302      	bcc.n	80033a0 <I2C_IsErrorOccurred+0x54>
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d13a      	bne.n	8003416 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033c2:	d121      	bne.n	8003408 <I2C_IsErrorOccurred+0xbc>
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033ca:	d01d      	beq.n	8003408 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80033cc:	7cfb      	ldrb	r3, [r7, #19]
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	d01a      	beq.n	8003408 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80033e2:	f7fe fe3b 	bl	800205c <HAL_GetTick>
 80033e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033e8:	e00e      	b.n	8003408 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033ea:	f7fe fe37 	bl	800205c <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b19      	cmp	r3, #25
 80033f6:	d907      	bls.n	8003408 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	f043 0320 	orr.w	r3, r3, #32
 80033fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003406:	e006      	b.n	8003416 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	2b20      	cmp	r3, #32
 8003414:	d1e9      	bne.n	80033ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	f003 0320 	and.w	r3, r3, #32
 8003420:	2b20      	cmp	r3, #32
 8003422:	d003      	beq.n	800342c <I2C_IsErrorOccurred+0xe0>
 8003424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0aa      	beq.n	8003382 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800342c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003430:	2b00      	cmp	r3, #0
 8003432:	d103      	bne.n	800343c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2220      	movs	r2, #32
 800343a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	f043 0304 	orr.w	r3, r3, #4
 8003442:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00b      	beq.n	8003474 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f44f 7280 	mov.w	r2, #256	; 0x100
 800346c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	f043 0308 	orr.w	r3, r3, #8
 8003484:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800348e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00b      	beq.n	80034b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	f043 0302 	orr.w	r3, r3, #2
 80034a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80034b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01c      	beq.n	80034fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f7ff fdc3 	bl	800304c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <I2C_IsErrorOccurred+0x1bc>)
 80034d2:	400b      	ands	r3, r1
 80034d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	431a      	orrs	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80034fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3728      	adds	r7, #40	; 0x28
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	fe00e800 	.word	0xfe00e800

0800350c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	607b      	str	r3, [r7, #4]
 8003516:	460b      	mov	r3, r1
 8003518:	817b      	strh	r3, [r7, #10]
 800351a:	4613      	mov	r3, r2
 800351c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800351e:	897b      	ldrh	r3, [r7, #10]
 8003520:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003524:	7a7b      	ldrb	r3, [r7, #9]
 8003526:	041b      	lsls	r3, r3, #16
 8003528:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800352c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	4313      	orrs	r3, r2
 8003536:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800353a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	0d5b      	lsrs	r3, r3, #21
 8003546:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800354a:	4b08      	ldr	r3, [pc, #32]	; (800356c <I2C_TransferConfig+0x60>)
 800354c:	430b      	orrs	r3, r1
 800354e:	43db      	mvns	r3, r3
 8003550:	ea02 0103 	and.w	r1, r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800355e:	bf00      	nop
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	03ff63ff 	.word	0x03ff63ff

08003570 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b20      	cmp	r3, #32
 8003584:	d138      	bne.n	80035f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003590:	2302      	movs	r3, #2
 8003592:	e032      	b.n	80035fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2224      	movs	r2, #36	; 0x24
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0201 	bic.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6819      	ldr	r1, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	e000      	b.n	80035fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035f8:	2302      	movs	r3, #2
  }
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003606:	b480      	push	{r7}
 8003608:	b085      	sub	sp, #20
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b20      	cmp	r3, #32
 800361a:	d139      	bne.n	8003690 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003626:	2302      	movs	r3, #2
 8003628:	e033      	b.n	8003692 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2224      	movs	r2, #36	; 0x24
 8003636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0201 	bic.w	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003658:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	e000      	b.n	8003692 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003690:	2302      	movs	r3, #2
  }
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
	...

080036a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80036a8:	4b19      	ldr	r3, [pc, #100]	; (8003710 <HAL_PWREx_ConfigSupply+0x70>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d00a      	beq.n	80036ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80036b4:	4b16      	ldr	r3, [pc, #88]	; (8003710 <HAL_PWREx_ConfigSupply+0x70>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d001      	beq.n	80036c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e01f      	b.n	8003706 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	e01d      	b.n	8003706 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80036ca:	4b11      	ldr	r3, [pc, #68]	; (8003710 <HAL_PWREx_ConfigSupply+0x70>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f023 0207 	bic.w	r2, r3, #7
 80036d2:	490f      	ldr	r1, [pc, #60]	; (8003710 <HAL_PWREx_ConfigSupply+0x70>)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80036da:	f7fe fcbf 	bl	800205c <HAL_GetTick>
 80036de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80036e0:	e009      	b.n	80036f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80036e2:	f7fe fcbb 	bl	800205c <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036f0:	d901      	bls.n	80036f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e007      	b.n	8003706 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_PWREx_ConfigSupply+0x70>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003702:	d1ee      	bne.n	80036e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	58024800 	.word	0x58024800

08003714 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af02      	add	r7, sp, #8
 800371a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800371c:	f7fe fc9e 	bl	800205c <HAL_GetTick>
 8003720:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e05f      	b.n	80037ec <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d107      	bne.n	8003748 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7fe f8e5 	bl	8001908 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800373e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fa43 	bl	8003bce <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	3b01      	subs	r3, #1
 8003758:	021a      	lsls	r2, r3, #8
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	2120      	movs	r1, #32
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fa3b 	bl	8003bea <QSPI_WaitFlagStateUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003778:	7afb      	ldrb	r3, [r7, #11]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d135      	bne.n	80037ea <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <HAL_QSPI_Init+0xe0>)
 8003786:	4013      	ands	r3, r2
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6852      	ldr	r2, [r2, #4]
 800378c:	0611      	lsls	r1, r2, #24
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	68d2      	ldr	r2, [r2, #12]
 8003792:	4311      	orrs	r1, r2
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	69d2      	ldr	r2, [r2, #28]
 8003798:	4311      	orrs	r1, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6a12      	ldr	r2, [r2, #32]
 800379e:	4311      	orrs	r1, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	430b      	orrs	r3, r1
 80037a6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <HAL_QSPI_Init+0xe4>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6912      	ldr	r2, [r2, #16]
 80037b6:	0411      	lsls	r1, r2, #16
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6952      	ldr	r2, [r2, #20]
 80037bc:	4311      	orrs	r1, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6992      	ldr	r2, [r2, #24]
 80037c2:	4311      	orrs	r1, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80037ea:	7afb      	ldrb	r3, [r7, #11]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	00ffff2f 	.word	0x00ffff2f
 80037f8:	ffe0f8fe 	.word	0xffe0f8fe

080037fc <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e012      	b.n	8003834 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0201 	bic.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fe f928 	bl	8001a74 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003848:	f7fe fc08 	bl	800205c <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_QSPI_Command+0x22>
 800385a:	2302      	movs	r3, #2
 800385c:	e048      	b.n	80038f0 <HAL_QSPI_Command+0xb4>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b01      	cmp	r3, #1
 8003870:	d137      	bne.n	80038e2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2200      	movs	r2, #0
 8003888:	2120      	movs	r1, #32
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f9ad 	bl	8003bea <QSPI_WaitFlagStateUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003894:	7dfb      	ldrb	r3, [r7, #23]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d125      	bne.n	80038e6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800389a:	2200      	movs	r2, #0
 800389c:	68b9      	ldr	r1, [r7, #8]
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f9da 	bl	8003c58 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d115      	bne.n	80038d8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	2201      	movs	r2, #1
 80038b4:	2102      	movs	r1, #2
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f997 	bl	8003bea <QSPI_WaitFlagStateUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10f      	bne.n	80038e6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2202      	movs	r2, #2
 80038cc:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038d6:	e006      	b.n	80038e6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038e0:	e001      	b.n	80038e6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80038e2:	2302      	movs	r3, #2
 80038e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08a      	sub	sp, #40	; 0x28
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003908:	f7fe fba8 	bl	800205c <HAL_GetTick>
 800390c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3320      	adds	r3, #32
 8003914:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_QSPI_Transmit+0x2e>
 8003922:	2302      	movs	r3, #2
 8003924:	e076      	b.n	8003a14 <HAL_QSPI_Transmit+0x11c>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b01      	cmp	r3, #1
 8003938:	d165      	bne.n	8003a06 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d056      	beq.n	80039f4 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2212      	movs	r2, #18
 800394a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800397a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800397c:	e01b      	b.n	80039b6 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2201      	movs	r2, #1
 8003986:	2104      	movs	r1, #4
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f92e 	bl	8003bea <QSPI_WaitFlagStateUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003992:	7ffb      	ldrb	r3, [r7, #31]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d113      	bne.n	80039c0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	781a      	ldrb	r2, [r3, #0]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	1e5a      	subs	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1df      	bne.n	800397e <HAL_QSPI_Transmit+0x86>
 80039be:	e000      	b.n	80039c2 <HAL_QSPI_Transmit+0xca>
          break;
 80039c0:	bf00      	nop
      }

      if (status == HAL_OK)
 80039c2:	7ffb      	ldrb	r3, [r7, #31]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d110      	bne.n	80039ea <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2201      	movs	r2, #1
 80039d0:	2102      	movs	r1, #2
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f909 	bl	8003bea <QSPI_WaitFlagStateUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80039dc:	7ffb      	ldrb	r3, [r7, #31]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d103      	bne.n	80039ea <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2202      	movs	r2, #2
 80039e8:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039f2:	e00a      	b.n	8003a0a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f8:	f043 0208 	orr.w	r2, r3, #8
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	77fb      	strb	r3, [r7, #31]
 8003a04:	e001      	b.n	8003a0a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003a06:	2302      	movs	r3, #2
 8003a08:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8003a12:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3720      	adds	r7, #32
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003a2a:	f7fe fb17 	bl	800205c <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_QSPI_AutoPolling+0x24>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e060      	b.n	8003b02 <HAL_QSPI_AutoPolling+0xe6>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d14f      	bne.n	8003af4 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2242      	movs	r2, #66	; 0x42
 8003a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2120      	movs	r1, #32
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 f8bc 	bl	8003bea <QSPI_WaitFlagStateUntilTimeout>
 8003a72:	4603      	mov	r3, r0
 8003a74:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d13d      	bne.n	8003af8 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6852      	ldr	r2, [r2, #4]
 8003a8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6892      	ldr	r2, [r2, #8]
 8003a98:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003ab2:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68da      	ldr	r2, [r3, #12]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003abc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 f8c8 	bl	8003c58 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	2108      	movs	r1, #8
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f889 	bl	8003bea <QSPI_WaitFlagStateUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10a      	bne.n	8003af8 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003af2:	e001      	b.n	8003af8 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003af4:	2302      	movs	r3, #2
 8003af6:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b088      	sub	sp, #32
 8003b0e:	af02      	add	r7, sp, #8
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003b16:	f7fe faa1 	bl	800205c <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_QSPI_MemoryMapped+0x22>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e04c      	b.n	8003bc6 <HAL_QSPI_MemoryMapped+0xbc>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d13b      	bne.n	8003bb8 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2282      	movs	r2, #130	; 0x82
 8003b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	2200      	movs	r2, #0
 8003b58:	2120      	movs	r1, #32
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 f845 	bl	8003bea <QSPI_WaitFlagStateUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003b64:	7dfb      	ldrb	r3, [r7, #23]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d128      	bne.n	8003bbc <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f023 0108 	bic.w	r1, r3, #8
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d110      	bne.n	8003baa <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2210      	movs	r2, #16
 8003b98:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003ba8:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8003baa:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003bae:	68b9      	ldr	r1, [r7, #8]
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 f851 	bl	8003c58 <QSPI_Config>
 8003bb6:	e001      	b.n	8003bbc <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	603b      	str	r3, [r7, #0]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003bfa:	e01a      	b.n	8003c32 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c02:	d016      	beq.n	8003c32 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c04:	f7fe fa2a 	bl	800205c <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d302      	bcc.n	8003c1a <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10b      	bne.n	8003c32 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2204      	movs	r2, #4
 8003c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	f043 0201 	orr.w	r2, r3, #1
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e00e      	b.n	8003c50 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	bf14      	ite	ne
 8003c40:	2301      	movne	r3, #1
 8003c42:	2300      	moveq	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	461a      	mov	r2, r3
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d1d6      	bne.n	8003bfc <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d009      	beq.n	8003c80 <QSPI_Config+0x28>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003c72:	d005      	beq.n	8003c80 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3a01      	subs	r2, #1
 8003c7e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80b9 	beq.w	8003dfc <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d05f      	beq.n	8003d52 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	6892      	ldr	r2, [r2, #8]
 8003c9a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d031      	beq.n	8003d08 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cac:	431a      	orrs	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	049b      	lsls	r3, r3, #18
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	ea42 0103 	orr.w	r1, r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003cf8:	f000 812e 	beq.w	8003f58 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	6852      	ldr	r2, [r2, #4]
 8003d04:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8003d06:	e127      	b.n	8003f58 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	431a      	orrs	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d16:	431a      	orrs	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	049b      	lsls	r3, r3, #18
 8003d24:	431a      	orrs	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	431a      	orrs	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	ea42 0103 	orr.w	r1, r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	615a      	str	r2, [r3, #20]
}
 8003d50:	e102      	b.n	8003f58 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d02e      	beq.n	8003db8 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d62:	431a      	orrs	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	049b      	lsls	r3, r3, #18
 8003d76:	431a      	orrs	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	ea42 0103 	orr.w	r1, r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003da8:	f000 80d6 	beq.w	8003f58 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	6852      	ldr	r2, [r2, #4]
 8003db4:	619a      	str	r2, [r3, #24]
}
 8003db6:	e0cf      	b.n	8003f58 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	049b      	lsls	r3, r3, #18
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	431a      	orrs	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	ea42 0103 	orr.w	r1, r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	615a      	str	r2, [r3, #20]
}
 8003dfa:	e0ad      	b.n	8003f58 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d058      	beq.n	8003eb6 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	6892      	ldr	r2, [r2, #8]
 8003e0c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d02d      	beq.n	8003e72 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e24:	431a      	orrs	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	049b      	lsls	r3, r3, #18
 8003e32:	431a      	orrs	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	431a      	orrs	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	ea42 0103 	orr.w	r1, r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003e64:	d078      	beq.n	8003f58 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	6852      	ldr	r2, [r2, #4]
 8003e6e:	619a      	str	r2, [r3, #24]
}
 8003e70:	e072      	b.n	8003f58 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	431a      	orrs	r2, r3
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	431a      	orrs	r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	049b      	lsls	r3, r3, #18
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	431a      	orrs	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	ea42 0103 	orr.w	r1, r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	615a      	str	r2, [r3, #20]
}
 8003eb4:	e050      	b.n	8003f58 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d02a      	beq.n	8003f14 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	049b      	lsls	r3, r3, #18
 8003eda:	431a      	orrs	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	431a      	orrs	r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	ea42 0103 	orr.w	r1, r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003f06:	d027      	beq.n	8003f58 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	6852      	ldr	r2, [r2, #4]
 8003f10:	619a      	str	r2, [r3, #24]
}
 8003f12:	e021      	b.n	8003f58 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01d      	beq.n	8003f58 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	431a      	orrs	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	431a      	orrs	r2, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	049b      	lsls	r3, r3, #18
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	431a      	orrs	r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	ea42 0103 	orr.w	r1, r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	615a      	str	r2, [r3, #20]
}
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 8003f6a:	4b89      	ldr	r3, [pc, #548]	; (8004190 <HAL_RCC_DeInit+0x22c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	2b06      	cmp	r3, #6
 8003f74:	d80f      	bhi.n	8003f96 <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8003f76:	4b86      	ldr	r3, [pc, #536]	; (8004190 <HAL_RCC_DeInit+0x22c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f023 030f 	bic.w	r3, r3, #15
 8003f7e:	4a84      	ldr	r2, [pc, #528]	; (8004190 <HAL_RCC_DeInit+0x22c>)
 8003f80:	f043 0307 	orr.w	r3, r3, #7
 8003f84:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8003f86:	4b82      	ldr	r3, [pc, #520]	; (8004190 <HAL_RCC_DeInit+0x22c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	2b07      	cmp	r3, #7
 8003f90:	d001      	beq.n	8003f96 <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e0f7      	b.n	8004186 <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003f96:	f7fe f861 	bl	800205c <HAL_GetTick>
 8003f9a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003f9c:	4b7d      	ldr	r3, [pc, #500]	; (8004194 <HAL_RCC_DeInit+0x230>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a7c      	ldr	r2, [pc, #496]	; (8004194 <HAL_RCC_DeInit+0x230>)
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003faa:	f7fe f857 	bl	800205c <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e0e4      	b.n	8004186 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fbc:	4b75      	ldr	r3, [pc, #468]	; (8004194 <HAL_RCC_DeInit+0x230>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 8003fc8:	4b72      	ldr	r3, [pc, #456]	; (8004194 <HAL_RCC_DeInit+0x230>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	4a71      	ldr	r2, [pc, #452]	; (8004194 <HAL_RCC_DeInit+0x230>)
 8003fce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fd2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003fd4:	4b6f      	ldr	r3, [pc, #444]	; (8004194 <HAL_RCC_DeInit+0x230>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 8003fda:	4b6f      	ldr	r3, [pc, #444]	; (8004198 <HAL_RCC_DeInit+0x234>)
 8003fdc:	4a6f      	ldr	r2, [pc, #444]	; (800419c <HAL_RCC_DeInit+0x238>)
 8003fde:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
 8003fe0:	4b6f      	ldr	r3, [pc, #444]	; (80041a0 <HAL_RCC_DeInit+0x23c>)
 8003fe2:	4a6e      	ldr	r2, [pc, #440]	; (800419c <HAL_RCC_DeInit+0x238>)
 8003fe4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fe6:	4b6f      	ldr	r3, [pc, #444]	; (80041a4 <HAL_RCC_DeInit+0x240>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd ffec 	bl	8001fc8 <HAL_InitTick>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e0c5      	b.n	8004186 <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003ffa:	f7fe f82f 	bl	800205c <HAL_GetTick>
 8003ffe:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8004000:	e00a      	b.n	8004018 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004002:	f7fe f82b 	bl	800205c <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004010:	4293      	cmp	r3, r2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e0b6      	b.n	8004186 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8004018:	4b5e      	ldr	r3, [pc, #376]	; (8004194 <HAL_RCC_DeInit+0x230>)
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1ee      	bne.n	8004002 <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004024:	f7fe f81a 	bl	800205c <HAL_GetTick>
 8004028:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON | RCC_CR_HSIDIV | RCC_CR_HSIDIVF | RCC_CR_CSION | RCC_CR_CSIKERON  \
 800402a:	4b5a      	ldr	r3, [pc, #360]	; (8004194 <HAL_RCC_DeInit+0x230>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	4959      	ldr	r1, [pc, #356]	; (8004194 <HAL_RCC_DeInit+0x230>)
 8004030:	4b5d      	ldr	r3, [pc, #372]	; (80041a8 <HAL_RCC_DeInit+0x244>)
 8004032:	4013      	ands	r3, r2
 8004034:	600b      	str	r3, [r1, #0]
            | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004036:	e008      	b.n	800404a <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004038:	f7fe f810 	bl	800205c <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b64      	cmp	r3, #100	; 0x64
 8004044:	d901      	bls.n	800404a <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e09d      	b.n	8004186 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800404a:	4b52      	ldr	r3, [pc, #328]	; (8004194 <HAL_RCC_DeInit+0x230>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004056:	f7fe f801 	bl	800205c <HAL_GetTick>
 800405a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 800405c:	4b4d      	ldr	r3, [pc, #308]	; (8004194 <HAL_RCC_DeInit+0x230>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a4c      	ldr	r2, [pc, #304]	; (8004194 <HAL_RCC_DeInit+0x230>)
 8004062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004066:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004068:	e008      	b.n	800407c <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406a:	f7fd fff7 	bl	800205c <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e084      	b.n	8004186 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800407c:	4b45      	ldr	r3, [pc, #276]	; (8004194 <HAL_RCC_DeInit+0x230>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1f0      	bne.n	800406a <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004088:	f7fd ffe8 	bl	800205c <HAL_GetTick>
 800408c:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 800408e:	4b41      	ldr	r3, [pc, #260]	; (8004194 <HAL_RCC_DeInit+0x230>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a40      	ldr	r2, [pc, #256]	; (8004194 <HAL_RCC_DeInit+0x230>)
 8004094:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004098:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 800409a:	e008      	b.n	80040ae <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409c:	f7fd ffde 	bl	800205c <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e06b      	b.n	8004186 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 80040ae:	4b39      	ldr	r3, [pc, #228]	; (8004194 <HAL_RCC_DeInit+0x230>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80040ba:	f7fd ffcf 	bl	800205c <HAL_GetTick>
 80040be:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 80040c0:	4b34      	ldr	r3, [pc, #208]	; (8004194 <HAL_RCC_DeInit+0x230>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a33      	ldr	r2, [pc, #204]	; (8004194 <HAL_RCC_DeInit+0x230>)
 80040c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ca:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ce:	f7fd ffc5 	bl	800205c <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e052      	b.n	8004186 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 80040e0:	4b2c      	ldr	r3, [pc, #176]	; (8004194 <HAL_RCC_DeInit+0x230>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f0      	bne.n	80040ce <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 80040ec:	4b29      	ldr	r3, [pc, #164]	; (8004194 <HAL_RCC_DeInit+0x230>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 80040f2:	4b28      	ldr	r3, [pc, #160]	; (8004194 <HAL_RCC_DeInit+0x230>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 80040f8:	4b26      	ldr	r3, [pc, #152]	; (8004194 <HAL_RCC_DeInit+0x230>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM1_5 | RCC_PLLCKSELR_DIVM2_5 | RCC_PLLCKSELR_DIVM3_5;
 80040fe:	4b25      	ldr	r3, [pc, #148]	; (8004194 <HAL_RCC_DeInit+0x230>)
 8004100:	4a2a      	ldr	r2, [pc, #168]	; (80041ac <HAL_RCC_DeInit+0x248>)
 8004102:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 8004104:	4b23      	ldr	r3, [pc, #140]	; (8004194 <HAL_RCC_DeInit+0x230>)
 8004106:	4a2a      	ldr	r2, [pc, #168]	; (80041b0 <HAL_RCC_DeInit+0x24c>)
 8004108:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 800410a:	4b22      	ldr	r3, [pc, #136]	; (8004194 <HAL_RCC_DeInit+0x230>)
 800410c:	4a29      	ldr	r2, [pc, #164]	; (80041b4 <HAL_RCC_DeInit+0x250>)
 800410e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 8004110:	4b20      	ldr	r3, [pc, #128]	; (8004194 <HAL_RCC_DeInit+0x230>)
 8004112:	2200      	movs	r2, #0
 8004114:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 8004116:	4b1f      	ldr	r3, [pc, #124]	; (8004194 <HAL_RCC_DeInit+0x230>)
 8004118:	4a26      	ldr	r2, [pc, #152]	; (80041b4 <HAL_RCC_DeInit+0x250>)
 800411a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 800411c:	4b1d      	ldr	r3, [pc, #116]	; (8004194 <HAL_RCC_DeInit+0x230>)
 800411e:	2200      	movs	r2, #0
 8004120:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 8004122:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <HAL_RCC_DeInit+0x230>)
 8004124:	4a23      	ldr	r2, [pc, #140]	; (80041b4 <HAL_RCC_DeInit+0x250>)
 8004126:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 8004128:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <HAL_RCC_DeInit+0x230>)
 800412a:	2200      	movs	r2, #0
 800412c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800412e:	4b19      	ldr	r3, [pc, #100]	; (8004194 <HAL_RCC_DeInit+0x230>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a18      	ldr	r2, [pc, #96]	; (8004194 <HAL_RCC_DeInit+0x230>)
 8004134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004138:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 800413a:	4b16      	ldr	r3, [pc, #88]	; (8004194 <HAL_RCC_DeInit+0x230>)
 800413c:	2200      	movs	r2, #0
 800413e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8004140:	4b14      	ldr	r3, [pc, #80]	; (8004194 <HAL_RCC_DeInit+0x230>)
 8004142:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004146:	669a      	str	r2, [r3, #104]	; 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 8004148:	4b12      	ldr	r3, [pc, #72]	; (8004194 <HAL_RCC_DeInit+0x230>)
 800414a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800414e:	4a11      	ldr	r2, [pc, #68]	; (8004194 <HAL_RCC_DeInit+0x230>)
 8004150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004154:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 8004158:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <HAL_RCC_DeInit+0x22c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0308 	and.w	r3, r3, #8
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00f      	beq.n	8004184 <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8004164:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <HAL_RCC_DeInit+0x22c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f023 030f 	bic.w	r3, r3, #15
 800416c:	4a08      	ldr	r2, [pc, #32]	; (8004190 <HAL_RCC_DeInit+0x22c>)
 800416e:	f043 0307 	orr.w	r3, r3, #7
 8004172:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8004174:	4b06      	ldr	r3, [pc, #24]	; (8004190 <HAL_RCC_DeInit+0x22c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	2b07      	cmp	r3, #7
 800417e:	d001      	beq.n	8004184 <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e000      	b.n	8004186 <HAL_RCC_DeInit+0x222>
    }

  }

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	52002000 	.word	0x52002000
 8004194:	58024400 	.word	0x58024400
 8004198:	20000004 	.word	0x20000004
 800419c:	03d09000 	.word	0x03d09000
 80041a0:	20000008 	.word	0x20000008
 80041a4:	2000000c 	.word	0x2000000c
 80041a8:	fff6ed45 	.word	0xfff6ed45
 80041ac:	02020200 	.word	0x02020200
 80041b0:	01ff0000 	.word	0x01ff0000
 80041b4:	01010280 	.word	0x01010280

080041b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08c      	sub	sp, #48	; 0x30
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d102      	bne.n	80041cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f000 bc48 	b.w	8004a5c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 8088 	beq.w	80042ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041da:	4b99      	ldr	r3, [pc, #612]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041e4:	4b96      	ldr	r3, [pc, #600]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80041ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d007      	beq.n	8004200 <HAL_RCC_OscConfig+0x48>
 80041f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f2:	2b18      	cmp	r3, #24
 80041f4:	d111      	bne.n	800421a <HAL_RCC_OscConfig+0x62>
 80041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d10c      	bne.n	800421a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004200:	4b8f      	ldr	r3, [pc, #572]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d06d      	beq.n	80042e8 <HAL_RCC_OscConfig+0x130>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d169      	bne.n	80042e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	f000 bc21 	b.w	8004a5c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004222:	d106      	bne.n	8004232 <HAL_RCC_OscConfig+0x7a>
 8004224:	4b86      	ldr	r3, [pc, #536]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a85      	ldr	r2, [pc, #532]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 800422a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	e02e      	b.n	8004290 <HAL_RCC_OscConfig+0xd8>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10c      	bne.n	8004254 <HAL_RCC_OscConfig+0x9c>
 800423a:	4b81      	ldr	r3, [pc, #516]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a80      	ldr	r2, [pc, #512]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 8004240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	4b7e      	ldr	r3, [pc, #504]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a7d      	ldr	r2, [pc, #500]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 800424c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	e01d      	b.n	8004290 <HAL_RCC_OscConfig+0xd8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800425c:	d10c      	bne.n	8004278 <HAL_RCC_OscConfig+0xc0>
 800425e:	4b78      	ldr	r3, [pc, #480]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a77      	ldr	r2, [pc, #476]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 8004264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	4b75      	ldr	r3, [pc, #468]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a74      	ldr	r2, [pc, #464]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 8004270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	e00b      	b.n	8004290 <HAL_RCC_OscConfig+0xd8>
 8004278:	4b71      	ldr	r3, [pc, #452]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a70      	ldr	r2, [pc, #448]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 800427e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	4b6e      	ldr	r3, [pc, #440]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a6d      	ldr	r2, [pc, #436]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 800428a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800428e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d013      	beq.n	80042c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004298:	f7fd fee0 	bl	800205c <HAL_GetTick>
 800429c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a0:	f7fd fedc 	bl	800205c <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b64      	cmp	r3, #100	; 0x64
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e3d4      	b.n	8004a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042b2:	4b63      	ldr	r3, [pc, #396]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0xe8>
 80042be:	e014      	b.n	80042ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fd fecc 	bl	800205c <HAL_GetTick>
 80042c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c8:	f7fd fec8 	bl	800205c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	; 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e3c0      	b.n	8004a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042da:	4b59      	ldr	r3, [pc, #356]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x110>
 80042e6:	e000      	b.n	80042ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 80ca 	beq.w	800448c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f8:	4b51      	ldr	r3, [pc, #324]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004300:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004302:	4b4f      	ldr	r3, [pc, #316]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 8004304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004306:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <HAL_RCC_OscConfig+0x166>
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	2b18      	cmp	r3, #24
 8004312:	d156      	bne.n	80043c2 <HAL_RCC_OscConfig+0x20a>
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d151      	bne.n	80043c2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800431e:	4b48      	ldr	r3, [pc, #288]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	d005      	beq.n	8004336 <HAL_RCC_OscConfig+0x17e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e392      	b.n	8004a5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004336:	4b42      	ldr	r3, [pc, #264]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 0219 	bic.w	r2, r3, #25
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	493f      	ldr	r1, [pc, #252]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 8004344:	4313      	orrs	r3, r2
 8004346:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fd fe88 	bl	800205c <HAL_GetTick>
 800434c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004350:	f7fd fe84 	bl	800205c <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e37c      	b.n	8004a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004362:	4b37      	ldr	r3, [pc, #220]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436e:	f7fd fea5 	bl	80020bc <HAL_GetREVID>
 8004372:	4603      	mov	r3, r0
 8004374:	f241 0203 	movw	r2, #4099	; 0x1003
 8004378:	4293      	cmp	r3, r2
 800437a:	d817      	bhi.n	80043ac <HAL_RCC_OscConfig+0x1f4>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	2b40      	cmp	r3, #64	; 0x40
 8004382:	d108      	bne.n	8004396 <HAL_RCC_OscConfig+0x1de>
 8004384:	4b2e      	ldr	r3, [pc, #184]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800438c:	4a2c      	ldr	r2, [pc, #176]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 800438e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004392:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004394:	e07a      	b.n	800448c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004396:	4b2a      	ldr	r3, [pc, #168]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	031b      	lsls	r3, r3, #12
 80043a4:	4926      	ldr	r1, [pc, #152]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043aa:	e06f      	b.n	800448c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ac:	4b24      	ldr	r3, [pc, #144]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	061b      	lsls	r3, r3, #24
 80043ba:	4921      	ldr	r1, [pc, #132]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043c0:	e064      	b.n	800448c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d047      	beq.n	800445a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043ca:	4b1d      	ldr	r3, [pc, #116]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f023 0219 	bic.w	r2, r3, #25
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	491a      	ldr	r1, [pc, #104]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043dc:	f7fd fe3e 	bl	800205c <HAL_GetTick>
 80043e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e4:	f7fd fe3a 	bl	800205c <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e332      	b.n	8004a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043f6:	4b12      	ldr	r3, [pc, #72]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004402:	f7fd fe5b 	bl	80020bc <HAL_GetREVID>
 8004406:	4603      	mov	r3, r0
 8004408:	f241 0203 	movw	r2, #4099	; 0x1003
 800440c:	4293      	cmp	r3, r2
 800440e:	d819      	bhi.n	8004444 <HAL_RCC_OscConfig+0x28c>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2b40      	cmp	r3, #64	; 0x40
 8004416:	d108      	bne.n	800442a <HAL_RCC_OscConfig+0x272>
 8004418:	4b09      	ldr	r3, [pc, #36]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004420:	4a07      	ldr	r2, [pc, #28]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 8004422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004426:	6053      	str	r3, [r2, #4]
 8004428:	e030      	b.n	800448c <HAL_RCC_OscConfig+0x2d4>
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	031b      	lsls	r3, r3, #12
 8004438:	4901      	ldr	r1, [pc, #4]	; (8004440 <HAL_RCC_OscConfig+0x288>)
 800443a:	4313      	orrs	r3, r2
 800443c:	604b      	str	r3, [r1, #4]
 800443e:	e025      	b.n	800448c <HAL_RCC_OscConfig+0x2d4>
 8004440:	58024400 	.word	0x58024400
 8004444:	4b9a      	ldr	r3, [pc, #616]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	061b      	lsls	r3, r3, #24
 8004452:	4997      	ldr	r1, [pc, #604]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 8004454:	4313      	orrs	r3, r2
 8004456:	604b      	str	r3, [r1, #4]
 8004458:	e018      	b.n	800448c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800445a:	4b95      	ldr	r3, [pc, #596]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a94      	ldr	r2, [pc, #592]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004466:	f7fd fdf9 	bl	800205c <HAL_GetTick>
 800446a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800446e:	f7fd fdf5 	bl	800205c <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e2ed      	b.n	8004a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004480:	4b8b      	ldr	r3, [pc, #556]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f0      	bne.n	800446e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 80a9 	beq.w	80045ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800449a:	4b85      	ldr	r3, [pc, #532]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044a4:	4b82      	ldr	r3, [pc, #520]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d007      	beq.n	80044c0 <HAL_RCC_OscConfig+0x308>
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	2b18      	cmp	r3, #24
 80044b4:	d13a      	bne.n	800452c <HAL_RCC_OscConfig+0x374>
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d135      	bne.n	800452c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044c0:	4b7b      	ldr	r3, [pc, #492]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_RCC_OscConfig+0x320>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	2b80      	cmp	r3, #128	; 0x80
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e2c1      	b.n	8004a5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044d8:	f7fd fdf0 	bl	80020bc <HAL_GetREVID>
 80044dc:	4603      	mov	r3, r0
 80044de:	f241 0203 	movw	r2, #4099	; 0x1003
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d817      	bhi.n	8004516 <HAL_RCC_OscConfig+0x35e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	d108      	bne.n	8004500 <HAL_RCC_OscConfig+0x348>
 80044ee:	4b70      	ldr	r3, [pc, #448]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80044f6:	4a6e      	ldr	r2, [pc, #440]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 80044f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044fc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044fe:	e075      	b.n	80045ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004500:	4b6b      	ldr	r3, [pc, #428]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	069b      	lsls	r3, r3, #26
 800450e:	4968      	ldr	r1, [pc, #416]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 8004510:	4313      	orrs	r3, r2
 8004512:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004514:	e06a      	b.n	80045ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004516:	4b66      	ldr	r3, [pc, #408]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	061b      	lsls	r3, r3, #24
 8004524:	4962      	ldr	r1, [pc, #392]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 8004526:	4313      	orrs	r3, r2
 8004528:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800452a:	e05f      	b.n	80045ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d042      	beq.n	80045ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004534:	4b5e      	ldr	r3, [pc, #376]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a5d      	ldr	r2, [pc, #372]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 800453a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fd fd8c 	bl	800205c <HAL_GetTick>
 8004544:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004548:	f7fd fd88 	bl	800205c <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e280      	b.n	8004a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800455a:	4b55      	ldr	r3, [pc, #340]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004566:	f7fd fda9 	bl	80020bc <HAL_GetREVID>
 800456a:	4603      	mov	r3, r0
 800456c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004570:	4293      	cmp	r3, r2
 8004572:	d817      	bhi.n	80045a4 <HAL_RCC_OscConfig+0x3ec>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	2b20      	cmp	r3, #32
 800457a:	d108      	bne.n	800458e <HAL_RCC_OscConfig+0x3d6>
 800457c:	4b4c      	ldr	r3, [pc, #304]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004584:	4a4a      	ldr	r2, [pc, #296]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 8004586:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800458a:	6053      	str	r3, [r2, #4]
 800458c:	e02e      	b.n	80045ec <HAL_RCC_OscConfig+0x434>
 800458e:	4b48      	ldr	r3, [pc, #288]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	069b      	lsls	r3, r3, #26
 800459c:	4944      	ldr	r1, [pc, #272]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	604b      	str	r3, [r1, #4]
 80045a2:	e023      	b.n	80045ec <HAL_RCC_OscConfig+0x434>
 80045a4:	4b42      	ldr	r3, [pc, #264]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	061b      	lsls	r3, r3, #24
 80045b2:	493f      	ldr	r1, [pc, #252]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60cb      	str	r3, [r1, #12]
 80045b8:	e018      	b.n	80045ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80045ba:	4b3d      	ldr	r3, [pc, #244]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a3c      	ldr	r2, [pc, #240]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 80045c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c6:	f7fd fd49 	bl	800205c <HAL_GetTick>
 80045ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80045ce:	f7fd fd45 	bl	800205c <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e23d      	b.n	8004a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045e0:	4b33      	ldr	r3, [pc, #204]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f0      	bne.n	80045ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d036      	beq.n	8004666 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d019      	beq.n	8004634 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004600:	4b2b      	ldr	r3, [pc, #172]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 8004602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004604:	4a2a      	ldr	r2, [pc, #168]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460c:	f7fd fd26 	bl	800205c <HAL_GetTick>
 8004610:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004614:	f7fd fd22 	bl	800205c <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e21a      	b.n	8004a5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004626:	4b22      	ldr	r3, [pc, #136]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 8004628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0x45c>
 8004632:	e018      	b.n	8004666 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004634:	4b1e      	ldr	r3, [pc, #120]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 8004636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004638:	4a1d      	ldr	r2, [pc, #116]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 800463a:	f023 0301 	bic.w	r3, r3, #1
 800463e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004640:	f7fd fd0c 	bl	800205c <HAL_GetTick>
 8004644:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004648:	f7fd fd08 	bl	800205c <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e200      	b.n	8004a5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800465a:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 800465c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	d039      	beq.n	80046e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d01c      	beq.n	80046b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800467a:	4b0d      	ldr	r3, [pc, #52]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a0c      	ldr	r2, [pc, #48]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 8004680:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004684:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004686:	f7fd fce9 	bl	800205c <HAL_GetTick>
 800468a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800468c:	e008      	b.n	80046a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800468e:	f7fd fce5 	bl	800205c <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e1dd      	b.n	8004a5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046a0:	4b03      	ldr	r3, [pc, #12]	; (80046b0 <HAL_RCC_OscConfig+0x4f8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0f0      	beq.n	800468e <HAL_RCC_OscConfig+0x4d6>
 80046ac:	e01b      	b.n	80046e6 <HAL_RCC_OscConfig+0x52e>
 80046ae:	bf00      	nop
 80046b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046b4:	4b9b      	ldr	r3, [pc, #620]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a9a      	ldr	r2, [pc, #616]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 80046ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80046c0:	f7fd fccc 	bl	800205c <HAL_GetTick>
 80046c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046c8:	f7fd fcc8 	bl	800205c <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e1c0      	b.n	8004a5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046da:	4b92      	ldr	r3, [pc, #584]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8081 	beq.w	80047f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046f4:	4b8c      	ldr	r3, [pc, #560]	; (8004928 <HAL_RCC_OscConfig+0x770>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a8b      	ldr	r2, [pc, #556]	; (8004928 <HAL_RCC_OscConfig+0x770>)
 80046fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004700:	f7fd fcac 	bl	800205c <HAL_GetTick>
 8004704:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004708:	f7fd fca8 	bl	800205c <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b64      	cmp	r3, #100	; 0x64
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e1a0      	b.n	8004a5c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800471a:	4b83      	ldr	r3, [pc, #524]	; (8004928 <HAL_RCC_OscConfig+0x770>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d106      	bne.n	800473c <HAL_RCC_OscConfig+0x584>
 800472e:	4b7d      	ldr	r3, [pc, #500]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	4a7c      	ldr	r2, [pc, #496]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 8004734:	f043 0301 	orr.w	r3, r3, #1
 8004738:	6713      	str	r3, [r2, #112]	; 0x70
 800473a:	e02d      	b.n	8004798 <HAL_RCC_OscConfig+0x5e0>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10c      	bne.n	800475e <HAL_RCC_OscConfig+0x5a6>
 8004744:	4b77      	ldr	r3, [pc, #476]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 8004746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004748:	4a76      	ldr	r2, [pc, #472]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 800474a:	f023 0301 	bic.w	r3, r3, #1
 800474e:	6713      	str	r3, [r2, #112]	; 0x70
 8004750:	4b74      	ldr	r3, [pc, #464]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 8004752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004754:	4a73      	ldr	r2, [pc, #460]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 8004756:	f023 0304 	bic.w	r3, r3, #4
 800475a:	6713      	str	r3, [r2, #112]	; 0x70
 800475c:	e01c      	b.n	8004798 <HAL_RCC_OscConfig+0x5e0>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b05      	cmp	r3, #5
 8004764:	d10c      	bne.n	8004780 <HAL_RCC_OscConfig+0x5c8>
 8004766:	4b6f      	ldr	r3, [pc, #444]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 8004768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476a:	4a6e      	ldr	r2, [pc, #440]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 800476c:	f043 0304 	orr.w	r3, r3, #4
 8004770:	6713      	str	r3, [r2, #112]	; 0x70
 8004772:	4b6c      	ldr	r3, [pc, #432]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 8004774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004776:	4a6b      	ldr	r2, [pc, #428]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	6713      	str	r3, [r2, #112]	; 0x70
 800477e:	e00b      	b.n	8004798 <HAL_RCC_OscConfig+0x5e0>
 8004780:	4b68      	ldr	r3, [pc, #416]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 8004782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004784:	4a67      	ldr	r2, [pc, #412]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 8004786:	f023 0301 	bic.w	r3, r3, #1
 800478a:	6713      	str	r3, [r2, #112]	; 0x70
 800478c:	4b65      	ldr	r3, [pc, #404]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 800478e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004790:	4a64      	ldr	r2, [pc, #400]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 8004792:	f023 0304 	bic.w	r3, r3, #4
 8004796:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d015      	beq.n	80047cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a0:	f7fd fc5c 	bl	800205c <HAL_GetTick>
 80047a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047a6:	e00a      	b.n	80047be <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a8:	f7fd fc58 	bl	800205c <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e14e      	b.n	8004a5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047be:	4b59      	ldr	r3, [pc, #356]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0ee      	beq.n	80047a8 <HAL_RCC_OscConfig+0x5f0>
 80047ca:	e014      	b.n	80047f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047cc:	f7fd fc46 	bl	800205c <HAL_GetTick>
 80047d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047d2:	e00a      	b.n	80047ea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d4:	f7fd fc42 	bl	800205c <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e138      	b.n	8004a5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047ea:	4b4e      	ldr	r3, [pc, #312]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 80047ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1ee      	bne.n	80047d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 812d 	beq.w	8004a5a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004800:	4b48      	ldr	r3, [pc, #288]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004808:	2b18      	cmp	r3, #24
 800480a:	f000 80bd 	beq.w	8004988 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	2b02      	cmp	r3, #2
 8004814:	f040 809e 	bne.w	8004954 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004818:	4b42      	ldr	r3, [pc, #264]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a41      	ldr	r2, [pc, #260]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 800481e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fd fc1a 	bl	800205c <HAL_GetTick>
 8004828:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482c:	f7fd fc16 	bl	800205c <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e10e      	b.n	8004a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800483e:	4b39      	ldr	r3, [pc, #228]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f0      	bne.n	800482c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800484a:	4b36      	ldr	r3, [pc, #216]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 800484c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800484e:	4b37      	ldr	r3, [pc, #220]	; (800492c <HAL_RCC_OscConfig+0x774>)
 8004850:	4013      	ands	r3, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800485a:	0112      	lsls	r2, r2, #4
 800485c:	430a      	orrs	r2, r1
 800485e:	4931      	ldr	r1, [pc, #196]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 8004860:	4313      	orrs	r3, r2
 8004862:	628b      	str	r3, [r1, #40]	; 0x28
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	3b01      	subs	r3, #1
 800486a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004872:	3b01      	subs	r3, #1
 8004874:	025b      	lsls	r3, r3, #9
 8004876:	b29b      	uxth	r3, r3
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	3b01      	subs	r3, #1
 8004880:	041b      	lsls	r3, r3, #16
 8004882:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488c:	3b01      	subs	r3, #1
 800488e:	061b      	lsls	r3, r3, #24
 8004890:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004894:	4923      	ldr	r1, [pc, #140]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 8004896:	4313      	orrs	r3, r2
 8004898:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800489a:	4b22      	ldr	r3, [pc, #136]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	4a21      	ldr	r2, [pc, #132]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80048a6:	4b1f      	ldr	r3, [pc, #124]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 80048a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048aa:	4b21      	ldr	r3, [pc, #132]	; (8004930 <HAL_RCC_OscConfig+0x778>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80048b2:	00d2      	lsls	r2, r2, #3
 80048b4:	491b      	ldr	r1, [pc, #108]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80048ba:	4b1a      	ldr	r3, [pc, #104]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	f023 020c 	bic.w	r2, r3, #12
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	4917      	ldr	r1, [pc, #92]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80048cc:	4b15      	ldr	r3, [pc, #84]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 80048ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d0:	f023 0202 	bic.w	r2, r3, #2
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d8:	4912      	ldr	r1, [pc, #72]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80048de:	4b11      	ldr	r3, [pc, #68]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	4a10      	ldr	r2, [pc, #64]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 80048e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ea:	4b0e      	ldr	r3, [pc, #56]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	4a0d      	ldr	r2, [pc, #52]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 80048f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80048f6:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	4a0a      	ldr	r2, [pc, #40]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 80048fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004900:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004902:	4b08      	ldr	r3, [pc, #32]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	4a07      	ldr	r2, [pc, #28]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800490e:	4b05      	ldr	r3, [pc, #20]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a04      	ldr	r2, [pc, #16]	; (8004924 <HAL_RCC_OscConfig+0x76c>)
 8004914:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491a:	f7fd fb9f 	bl	800205c <HAL_GetTick>
 800491e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004920:	e011      	b.n	8004946 <HAL_RCC_OscConfig+0x78e>
 8004922:	bf00      	nop
 8004924:	58024400 	.word	0x58024400
 8004928:	58024800 	.word	0x58024800
 800492c:	fffffc0c 	.word	0xfffffc0c
 8004930:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004934:	f7fd fb92 	bl	800205c <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e08a      	b.n	8004a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004946:	4b47      	ldr	r3, [pc, #284]	; (8004a64 <HAL_RCC_OscConfig+0x8ac>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f0      	beq.n	8004934 <HAL_RCC_OscConfig+0x77c>
 8004952:	e082      	b.n	8004a5a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004954:	4b43      	ldr	r3, [pc, #268]	; (8004a64 <HAL_RCC_OscConfig+0x8ac>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a42      	ldr	r2, [pc, #264]	; (8004a64 <HAL_RCC_OscConfig+0x8ac>)
 800495a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800495e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004960:	f7fd fb7c 	bl	800205c <HAL_GetTick>
 8004964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004968:	f7fd fb78 	bl	800205c <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e070      	b.n	8004a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800497a:	4b3a      	ldr	r3, [pc, #232]	; (8004a64 <HAL_RCC_OscConfig+0x8ac>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f0      	bne.n	8004968 <HAL_RCC_OscConfig+0x7b0>
 8004986:	e068      	b.n	8004a5a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004988:	4b36      	ldr	r3, [pc, #216]	; (8004a64 <HAL_RCC_OscConfig+0x8ac>)
 800498a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800498e:	4b35      	ldr	r3, [pc, #212]	; (8004a64 <HAL_RCC_OscConfig+0x8ac>)
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	2b01      	cmp	r3, #1
 800499a:	d031      	beq.n	8004a00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f003 0203 	and.w	r2, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d12a      	bne.n	8004a00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	091b      	lsrs	r3, r3, #4
 80049ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d122      	bne.n	8004a00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d11a      	bne.n	8004a00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	0a5b      	lsrs	r3, r3, #9
 80049ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d111      	bne.n	8004a00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	0c1b      	lsrs	r3, r3, #16
 80049e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d108      	bne.n	8004a00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	0e1b      	lsrs	r3, r3, #24
 80049f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e02b      	b.n	8004a5c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004a04:	4b17      	ldr	r3, [pc, #92]	; (8004a64 <HAL_RCC_OscConfig+0x8ac>)
 8004a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a08:	08db      	lsrs	r3, r3, #3
 8004a0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a0e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d01f      	beq.n	8004a5a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004a1a:	4b12      	ldr	r3, [pc, #72]	; (8004a64 <HAL_RCC_OscConfig+0x8ac>)
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1e:	4a11      	ldr	r2, [pc, #68]	; (8004a64 <HAL_RCC_OscConfig+0x8ac>)
 8004a20:	f023 0301 	bic.w	r3, r3, #1
 8004a24:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a26:	f7fd fb19 	bl	800205c <HAL_GetTick>
 8004a2a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004a2c:	bf00      	nop
 8004a2e:	f7fd fb15 	bl	800205c <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d0f9      	beq.n	8004a2e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a3a:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <HAL_RCC_OscConfig+0x8ac>)
 8004a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a3e:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <HAL_RCC_OscConfig+0x8b0>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a46:	00d2      	lsls	r2, r2, #3
 8004a48:	4906      	ldr	r1, [pc, #24]	; (8004a64 <HAL_RCC_OscConfig+0x8ac>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004a4e:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <HAL_RCC_OscConfig+0x8ac>)
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	4a04      	ldr	r2, [pc, #16]	; (8004a64 <HAL_RCC_OscConfig+0x8ac>)
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3730      	adds	r7, #48	; 0x30
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	58024400 	.word	0x58024400
 8004a68:	ffff0007 	.word	0xffff0007

08004a6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e19c      	b.n	8004dba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a80:	4b8a      	ldr	r3, [pc, #552]	; (8004cac <HAL_RCC_ClockConfig+0x240>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 030f 	and.w	r3, r3, #15
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d910      	bls.n	8004ab0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a8e:	4b87      	ldr	r3, [pc, #540]	; (8004cac <HAL_RCC_ClockConfig+0x240>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f023 020f 	bic.w	r2, r3, #15
 8004a96:	4985      	ldr	r1, [pc, #532]	; (8004cac <HAL_RCC_ClockConfig+0x240>)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9e:	4b83      	ldr	r3, [pc, #524]	; (8004cac <HAL_RCC_ClockConfig+0x240>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e184      	b.n	8004dba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d010      	beq.n	8004ade <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	4b7b      	ldr	r3, [pc, #492]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d908      	bls.n	8004ade <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004acc:	4b78      	ldr	r3, [pc, #480]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	4975      	ldr	r1, [pc, #468]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d010      	beq.n	8004b0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695a      	ldr	r2, [r3, #20]
 8004aee:	4b70      	ldr	r3, [pc, #448]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d908      	bls.n	8004b0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004afa:	4b6d      	ldr	r3, [pc, #436]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	496a      	ldr	r1, [pc, #424]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d010      	beq.n	8004b3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699a      	ldr	r2, [r3, #24]
 8004b1c:	4b64      	ldr	r3, [pc, #400]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d908      	bls.n	8004b3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b28:	4b61      	ldr	r3, [pc, #388]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	495e      	ldr	r1, [pc, #376]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d010      	beq.n	8004b68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69da      	ldr	r2, [r3, #28]
 8004b4a:	4b59      	ldr	r3, [pc, #356]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d908      	bls.n	8004b68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b56:	4b56      	ldr	r3, [pc, #344]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	4953      	ldr	r1, [pc, #332]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d010      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	4b4d      	ldr	r3, [pc, #308]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	f003 030f 	and.w	r3, r3, #15
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d908      	bls.n	8004b96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b84:	4b4a      	ldr	r3, [pc, #296]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	f023 020f 	bic.w	r2, r3, #15
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	4947      	ldr	r1, [pc, #284]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d055      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ba2:	4b43      	ldr	r3, [pc, #268]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	4940      	ldr	r1, [pc, #256]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d107      	bne.n	8004bcc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bbc:	4b3c      	ldr	r3, [pc, #240]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d121      	bne.n	8004c0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e0f6      	b.n	8004dba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d107      	bne.n	8004be4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bd4:	4b36      	ldr	r3, [pc, #216]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d115      	bne.n	8004c0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0ea      	b.n	8004dba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d107      	bne.n	8004bfc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bec:	4b30      	ldr	r3, [pc, #192]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d109      	bne.n	8004c0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0de      	b.n	8004dba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bfc:	4b2c      	ldr	r3, [pc, #176]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0d6      	b.n	8004dba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c0c:	4b28      	ldr	r3, [pc, #160]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f023 0207 	bic.w	r2, r3, #7
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	4925      	ldr	r1, [pc, #148]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c1e:	f7fd fa1d 	bl	800205c <HAL_GetTick>
 8004c22:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c24:	e00a      	b.n	8004c3c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c26:	f7fd fa19 	bl	800205c <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e0be      	b.n	8004dba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3c:	4b1c      	ldr	r3, [pc, #112]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d1eb      	bne.n	8004c26 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d010      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	4b14      	ldr	r3, [pc, #80]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d208      	bcs.n	8004c7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c6a:	4b11      	ldr	r3, [pc, #68]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	f023 020f 	bic.w	r2, r3, #15
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	490e      	ldr	r1, [pc, #56]	; (8004cb0 <HAL_RCC_ClockConfig+0x244>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <HAL_RCC_ClockConfig+0x240>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d214      	bcs.n	8004cb4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8a:	4b08      	ldr	r3, [pc, #32]	; (8004cac <HAL_RCC_ClockConfig+0x240>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f023 020f 	bic.w	r2, r3, #15
 8004c92:	4906      	ldr	r1, [pc, #24]	; (8004cac <HAL_RCC_ClockConfig+0x240>)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9a:	4b04      	ldr	r3, [pc, #16]	; (8004cac <HAL_RCC_ClockConfig+0x240>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d005      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e086      	b.n	8004dba <HAL_RCC_ClockConfig+0x34e>
 8004cac:	52002000 	.word	0x52002000
 8004cb0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d010      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	4b3f      	ldr	r3, [pc, #252]	; (8004dc4 <HAL_RCC_ClockConfig+0x358>)
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d208      	bcs.n	8004ce2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004cd0:	4b3c      	ldr	r3, [pc, #240]	; (8004dc4 <HAL_RCC_ClockConfig+0x358>)
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	4939      	ldr	r1, [pc, #228]	; (8004dc4 <HAL_RCC_ClockConfig+0x358>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d010      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695a      	ldr	r2, [r3, #20]
 8004cf2:	4b34      	ldr	r3, [pc, #208]	; (8004dc4 <HAL_RCC_ClockConfig+0x358>)
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d208      	bcs.n	8004d10 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004cfe:	4b31      	ldr	r3, [pc, #196]	; (8004dc4 <HAL_RCC_ClockConfig+0x358>)
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	492e      	ldr	r1, [pc, #184]	; (8004dc4 <HAL_RCC_ClockConfig+0x358>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d010      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	699a      	ldr	r2, [r3, #24]
 8004d20:	4b28      	ldr	r3, [pc, #160]	; (8004dc4 <HAL_RCC_ClockConfig+0x358>)
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d208      	bcs.n	8004d3e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d2c:	4b25      	ldr	r3, [pc, #148]	; (8004dc4 <HAL_RCC_ClockConfig+0x358>)
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	4922      	ldr	r1, [pc, #136]	; (8004dc4 <HAL_RCC_ClockConfig+0x358>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d010      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69da      	ldr	r2, [r3, #28]
 8004d4e:	4b1d      	ldr	r3, [pc, #116]	; (8004dc4 <HAL_RCC_ClockConfig+0x358>)
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d208      	bcs.n	8004d6c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d5a:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <HAL_RCC_ClockConfig+0x358>)
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	4917      	ldr	r1, [pc, #92]	; (8004dc4 <HAL_RCC_ClockConfig+0x358>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d6c:	f000 f834 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4b14      	ldr	r3, [pc, #80]	; (8004dc4 <HAL_RCC_ClockConfig+0x358>)
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	0a1b      	lsrs	r3, r3, #8
 8004d78:	f003 030f 	and.w	r3, r3, #15
 8004d7c:	4912      	ldr	r1, [pc, #72]	; (8004dc8 <HAL_RCC_ClockConfig+0x35c>)
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	fa22 f303 	lsr.w	r3, r2, r3
 8004d88:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d8a:	4b0e      	ldr	r3, [pc, #56]	; (8004dc4 <HAL_RCC_ClockConfig+0x358>)
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	4a0d      	ldr	r2, [pc, #52]	; (8004dc8 <HAL_RCC_ClockConfig+0x35c>)
 8004d94:	5cd3      	ldrb	r3, [r2, r3]
 8004d96:	f003 031f 	and.w	r3, r3, #31
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004da0:	4a0a      	ldr	r2, [pc, #40]	; (8004dcc <HAL_RCC_ClockConfig+0x360>)
 8004da2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004da4:	4a0a      	ldr	r2, [pc, #40]	; (8004dd0 <HAL_RCC_ClockConfig+0x364>)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004daa:	4b0a      	ldr	r3, [pc, #40]	; (8004dd4 <HAL_RCC_ClockConfig+0x368>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fd f90a 	bl	8001fc8 <HAL_InitTick>
 8004db4:	4603      	mov	r3, r0
 8004db6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	58024400 	.word	0x58024400
 8004dc8:	0800da5c 	.word	0x0800da5c
 8004dcc:	20000008 	.word	0x20000008
 8004dd0:	20000004 	.word	0x20000004
 8004dd4:	2000000c 	.word	0x2000000c

08004dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b089      	sub	sp, #36	; 0x24
 8004ddc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dde:	4bb3      	ldr	r3, [pc, #716]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004de6:	2b18      	cmp	r3, #24
 8004de8:	f200 8155 	bhi.w	8005096 <HAL_RCC_GetSysClockFreq+0x2be>
 8004dec:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df2:	bf00      	nop
 8004df4:	08004e59 	.word	0x08004e59
 8004df8:	08005097 	.word	0x08005097
 8004dfc:	08005097 	.word	0x08005097
 8004e00:	08005097 	.word	0x08005097
 8004e04:	08005097 	.word	0x08005097
 8004e08:	08005097 	.word	0x08005097
 8004e0c:	08005097 	.word	0x08005097
 8004e10:	08005097 	.word	0x08005097
 8004e14:	08004e7f 	.word	0x08004e7f
 8004e18:	08005097 	.word	0x08005097
 8004e1c:	08005097 	.word	0x08005097
 8004e20:	08005097 	.word	0x08005097
 8004e24:	08005097 	.word	0x08005097
 8004e28:	08005097 	.word	0x08005097
 8004e2c:	08005097 	.word	0x08005097
 8004e30:	08005097 	.word	0x08005097
 8004e34:	08004e85 	.word	0x08004e85
 8004e38:	08005097 	.word	0x08005097
 8004e3c:	08005097 	.word	0x08005097
 8004e40:	08005097 	.word	0x08005097
 8004e44:	08005097 	.word	0x08005097
 8004e48:	08005097 	.word	0x08005097
 8004e4c:	08005097 	.word	0x08005097
 8004e50:	08005097 	.word	0x08005097
 8004e54:	08004e8b 	.word	0x08004e8b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e58:	4b94      	ldr	r3, [pc, #592]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0320 	and.w	r3, r3, #32
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d009      	beq.n	8004e78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e64:	4b91      	ldr	r3, [pc, #580]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	08db      	lsrs	r3, r3, #3
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	4a90      	ldr	r2, [pc, #576]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
 8004e74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004e76:	e111      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004e78:	4b8d      	ldr	r3, [pc, #564]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e7a:	61bb      	str	r3, [r7, #24]
      break;
 8004e7c:	e10e      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004e7e:	4b8d      	ldr	r3, [pc, #564]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004e80:	61bb      	str	r3, [r7, #24]
      break;
 8004e82:	e10b      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004e84:	4b8c      	ldr	r3, [pc, #560]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004e86:	61bb      	str	r3, [r7, #24]
      break;
 8004e88:	e108      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e8a:	4b88      	ldr	r3, [pc, #544]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004e94:	4b85      	ldr	r3, [pc, #532]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e98:	091b      	lsrs	r3, r3, #4
 8004e9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e9e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004ea0:	4b82      	ldr	r3, [pc, #520]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004eaa:	4b80      	ldr	r3, [pc, #512]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eae:	08db      	lsrs	r3, r3, #3
 8004eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	fb02 f303 	mul.w	r3, r2, r3
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 80e1 	beq.w	8005090 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	f000 8083 	beq.w	8004fdc <HAL_RCC_GetSysClockFreq+0x204>
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	f200 80a1 	bhi.w	8005020 <HAL_RCC_GetSysClockFreq+0x248>
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_RCC_GetSysClockFreq+0x114>
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d056      	beq.n	8004f98 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004eea:	e099      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eec:	4b6f      	ldr	r3, [pc, #444]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d02d      	beq.n	8004f54 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ef8:	4b6c      	ldr	r3, [pc, #432]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	08db      	lsrs	r3, r3, #3
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	4a6b      	ldr	r2, [pc, #428]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
 8004f08:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	ee07 3a90 	vmov	s15, r3
 8004f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f22:	4b62      	ldr	r3, [pc, #392]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2a:	ee07 3a90 	vmov	s15, r3
 8004f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f36:	eddf 5a61 	vldr	s11, [pc, #388]	; 80050bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004f52:	e087      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80050c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f66:	4b51      	ldr	r3, [pc, #324]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f7a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80050bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f96:	e065      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80050c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004faa:	4b40      	ldr	r3, [pc, #256]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fbe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80050bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004fda:	e043      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80050c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fee:	4b2f      	ldr	r3, [pc, #188]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005002:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80050bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800500a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800500e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800501a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800501e:	e021      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800502a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80050c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800502e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005032:	4b1e      	ldr	r3, [pc, #120]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005042:	ed97 6a02 	vldr	s12, [r7, #8]
 8005046:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80050bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800504a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800504e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800505a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800505e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005062:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005064:	4b11      	ldr	r3, [pc, #68]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005068:	0a5b      	lsrs	r3, r3, #9
 800506a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800506e:	3301      	adds	r3, #1
 8005070:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	ee07 3a90 	vmov	s15, r3
 8005078:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800507c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005088:	ee17 3a90 	vmov	r3, s15
 800508c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800508e:	e005      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	61bb      	str	r3, [r7, #24]
      break;
 8005094:	e002      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005096:	4b07      	ldr	r3, [pc, #28]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005098:	61bb      	str	r3, [r7, #24]
      break;
 800509a:	bf00      	nop
  }

  return sysclockfreq;
 800509c:	69bb      	ldr	r3, [r7, #24]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3724      	adds	r7, #36	; 0x24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	58024400 	.word	0x58024400
 80050b0:	03d09000 	.word	0x03d09000
 80050b4:	003d0900 	.word	0x003d0900
 80050b8:	00f42400 	.word	0x00f42400
 80050bc:	46000000 	.word	0x46000000
 80050c0:	4c742400 	.word	0x4c742400
 80050c4:	4a742400 	.word	0x4a742400
 80050c8:	4b742400 	.word	0x4b742400

080050cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80050d2:	f7ff fe81 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 80050d6:	4602      	mov	r2, r0
 80050d8:	4b10      	ldr	r3, [pc, #64]	; (800511c <HAL_RCC_GetHCLKFreq+0x50>)
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	0a1b      	lsrs	r3, r3, #8
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	490f      	ldr	r1, [pc, #60]	; (8005120 <HAL_RCC_GetHCLKFreq+0x54>)
 80050e4:	5ccb      	ldrb	r3, [r1, r3]
 80050e6:	f003 031f 	and.w	r3, r3, #31
 80050ea:	fa22 f303 	lsr.w	r3, r2, r3
 80050ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050f0:	4b0a      	ldr	r3, [pc, #40]	; (800511c <HAL_RCC_GetHCLKFreq+0x50>)
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	4a09      	ldr	r2, [pc, #36]	; (8005120 <HAL_RCC_GetHCLKFreq+0x54>)
 80050fa:	5cd3      	ldrb	r3, [r2, r3]
 80050fc:	f003 031f 	and.w	r3, r3, #31
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	fa22 f303 	lsr.w	r3, r2, r3
 8005106:	4a07      	ldr	r2, [pc, #28]	; (8005124 <HAL_RCC_GetHCLKFreq+0x58>)
 8005108:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800510a:	4a07      	ldr	r2, [pc, #28]	; (8005128 <HAL_RCC_GetHCLKFreq+0x5c>)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005110:	4b04      	ldr	r3, [pc, #16]	; (8005124 <HAL_RCC_GetHCLKFreq+0x58>)
 8005112:	681b      	ldr	r3, [r3, #0]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	58024400 	.word	0x58024400
 8005120:	0800da5c 	.word	0x0800da5c
 8005124:	20000008 	.word	0x20000008
 8005128:	20000004 	.word	0x20000004

0800512c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005130:	f7ff ffcc 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 8005134:	4602      	mov	r2, r0
 8005136:	4b06      	ldr	r3, [pc, #24]	; (8005150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	091b      	lsrs	r3, r3, #4
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	4904      	ldr	r1, [pc, #16]	; (8005154 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005142:	5ccb      	ldrb	r3, [r1, r3]
 8005144:	f003 031f 	and.w	r3, r3, #31
 8005148:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800514c:	4618      	mov	r0, r3
 800514e:	bd80      	pop	{r7, pc}
 8005150:	58024400 	.word	0x58024400
 8005154:	0800da5c 	.word	0x0800da5c

08005158 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800515c:	b0ca      	sub	sp, #296	; 0x128
 800515e:	af00      	add	r7, sp, #0
 8005160:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005164:	2300      	movs	r3, #0
 8005166:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800516a:	2300      	movs	r3, #0
 800516c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800517c:	2500      	movs	r5, #0
 800517e:	ea54 0305 	orrs.w	r3, r4, r5
 8005182:	d049      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005188:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800518a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800518e:	d02f      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005190:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005194:	d828      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005196:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800519a:	d01a      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800519c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051a0:	d822      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 80051a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051aa:	d007      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051ac:	e01c      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051ae:	4bb8      	ldr	r3, [pc, #736]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b2:	4ab7      	ldr	r2, [pc, #732]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80051ba:	e01a      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c0:	3308      	adds	r3, #8
 80051c2:	2102      	movs	r1, #2
 80051c4:	4618      	mov	r0, r3
 80051c6:	f002 fb61 	bl	800788c <RCCEx_PLL2_Config>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80051d0:	e00f      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051d6:	3328      	adds	r3, #40	; 0x28
 80051d8:	2102      	movs	r1, #2
 80051da:	4618      	mov	r0, r3
 80051dc:	f002 fc08 	bl	80079f0 <RCCEx_PLL3_Config>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80051e6:	e004      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051ee:	e000      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80051f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10a      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80051fa:	4ba5      	ldr	r3, [pc, #660]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005208:	4aa1      	ldr	r2, [pc, #644]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800520a:	430b      	orrs	r3, r1
 800520c:	6513      	str	r3, [r2, #80]	; 0x50
 800520e:	e003      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005210:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005214:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800521c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005220:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005224:	f04f 0900 	mov.w	r9, #0
 8005228:	ea58 0309 	orrs.w	r3, r8, r9
 800522c:	d047      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800522e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005234:	2b04      	cmp	r3, #4
 8005236:	d82a      	bhi.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005238:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800523a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523e:	bf00      	nop
 8005240:	08005255 	.word	0x08005255
 8005244:	08005263 	.word	0x08005263
 8005248:	08005279 	.word	0x08005279
 800524c:	08005297 	.word	0x08005297
 8005250:	08005297 	.word	0x08005297
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005254:	4b8e      	ldr	r3, [pc, #568]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005258:	4a8d      	ldr	r2, [pc, #564]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800525a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800525e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005260:	e01a      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005266:	3308      	adds	r3, #8
 8005268:	2100      	movs	r1, #0
 800526a:	4618      	mov	r0, r3
 800526c:	f002 fb0e 	bl	800788c <RCCEx_PLL2_Config>
 8005270:	4603      	mov	r3, r0
 8005272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005276:	e00f      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800527c:	3328      	adds	r3, #40	; 0x28
 800527e:	2100      	movs	r1, #0
 8005280:	4618      	mov	r0, r3
 8005282:	f002 fbb5 	bl	80079f0 <RCCEx_PLL3_Config>
 8005286:	4603      	mov	r3, r0
 8005288:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800528c:	e004      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005294:	e000      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005296:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005298:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052a0:	4b7b      	ldr	r3, [pc, #492]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a4:	f023 0107 	bic.w	r1, r3, #7
 80052a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ae:	4a78      	ldr	r2, [pc, #480]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052b0:	430b      	orrs	r3, r1
 80052b2:	6513      	str	r3, [r2, #80]	; 0x50
 80052b4:	e003      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80052be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80052ca:	f04f 0b00 	mov.w	fp, #0
 80052ce:	ea5a 030b 	orrs.w	r3, sl, fp
 80052d2:	d04c      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80052d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052de:	d030      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80052e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052e4:	d829      	bhi.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052e6:	2bc0      	cmp	r3, #192	; 0xc0
 80052e8:	d02d      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80052ea:	2bc0      	cmp	r3, #192	; 0xc0
 80052ec:	d825      	bhi.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052ee:	2b80      	cmp	r3, #128	; 0x80
 80052f0:	d018      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80052f2:	2b80      	cmp	r3, #128	; 0x80
 80052f4:	d821      	bhi.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80052fa:	2b40      	cmp	r3, #64	; 0x40
 80052fc:	d007      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80052fe:	e01c      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005300:	4b63      	ldr	r3, [pc, #396]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005304:	4a62      	ldr	r2, [pc, #392]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800530a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800530c:	e01c      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800530e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005312:	3308      	adds	r3, #8
 8005314:	2100      	movs	r1, #0
 8005316:	4618      	mov	r0, r3
 8005318:	f002 fab8 	bl	800788c <RCCEx_PLL2_Config>
 800531c:	4603      	mov	r3, r0
 800531e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005322:	e011      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005328:	3328      	adds	r3, #40	; 0x28
 800532a:	2100      	movs	r1, #0
 800532c:	4618      	mov	r0, r3
 800532e:	f002 fb5f 	bl	80079f0 <RCCEx_PLL3_Config>
 8005332:	4603      	mov	r3, r0
 8005334:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005338:	e006      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005340:	e002      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005342:	bf00      	nop
 8005344:	e000      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005348:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10a      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005350:	4b4f      	ldr	r3, [pc, #316]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005354:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800535c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800535e:	4a4c      	ldr	r2, [pc, #304]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005360:	430b      	orrs	r3, r1
 8005362:	6513      	str	r3, [r2, #80]	; 0x50
 8005364:	e003      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800536a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800536e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005376:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800537a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800537e:	2300      	movs	r3, #0
 8005380:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005384:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005388:	460b      	mov	r3, r1
 800538a:	4313      	orrs	r3, r2
 800538c:	d053      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800538e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005392:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005396:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800539a:	d035      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800539c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053a0:	d82e      	bhi.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80053a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80053a6:	d031      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80053a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80053ac:	d828      	bhi.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80053ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053b2:	d01a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x292>
 80053b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053b8:	d822      	bhi.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80053be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053c2:	d007      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80053c4:	e01c      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053c6:	4b32      	ldr	r3, [pc, #200]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ca:	4a31      	ldr	r2, [pc, #196]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053d2:	e01c      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d8:	3308      	adds	r3, #8
 80053da:	2100      	movs	r1, #0
 80053dc:	4618      	mov	r0, r3
 80053de:	f002 fa55 	bl	800788c <RCCEx_PLL2_Config>
 80053e2:	4603      	mov	r3, r0
 80053e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80053e8:	e011      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ee:	3328      	adds	r3, #40	; 0x28
 80053f0:	2100      	movs	r1, #0
 80053f2:	4618      	mov	r0, r3
 80053f4:	f002 fafc 	bl	80079f0 <RCCEx_PLL3_Config>
 80053f8:	4603      	mov	r3, r0
 80053fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053fe:	e006      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005406:	e002      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005408:	bf00      	nop
 800540a:	e000      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800540c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800540e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10b      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005416:	4b1e      	ldr	r3, [pc, #120]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800541e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005422:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005426:	4a1a      	ldr	r2, [pc, #104]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005428:	430b      	orrs	r3, r1
 800542a:	6593      	str	r3, [r2, #88]	; 0x58
 800542c:	e003      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005432:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005442:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005446:	2300      	movs	r3, #0
 8005448:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800544c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005450:	460b      	mov	r3, r1
 8005452:	4313      	orrs	r3, r2
 8005454:	d056      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800545a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800545e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005462:	d038      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005464:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005468:	d831      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800546a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800546e:	d034      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005470:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005474:	d82b      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005476:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800547a:	d01d      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800547c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005480:	d825      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005482:	2b00      	cmp	r3, #0
 8005484:	d006      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005486:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800548a:	d00a      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800548c:	e01f      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800548e:	bf00      	nop
 8005490:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005494:	4ba2      	ldr	r3, [pc, #648]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	4aa1      	ldr	r2, [pc, #644]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800549a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800549e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054a0:	e01c      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054a6:	3308      	adds	r3, #8
 80054a8:	2100      	movs	r1, #0
 80054aa:	4618      	mov	r0, r3
 80054ac:	f002 f9ee 	bl	800788c <RCCEx_PLL2_Config>
 80054b0:	4603      	mov	r3, r0
 80054b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80054b6:	e011      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054bc:	3328      	adds	r3, #40	; 0x28
 80054be:	2100      	movs	r1, #0
 80054c0:	4618      	mov	r0, r3
 80054c2:	f002 fa95 	bl	80079f0 <RCCEx_PLL3_Config>
 80054c6:	4603      	mov	r3, r0
 80054c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054cc:	e006      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054d4:	e002      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80054d6:	bf00      	nop
 80054d8:	e000      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80054da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10b      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80054e4:	4b8e      	ldr	r3, [pc, #568]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80054ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80054f4:	4a8a      	ldr	r2, [pc, #552]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054f6:	430b      	orrs	r3, r1
 80054f8:	6593      	str	r3, [r2, #88]	; 0x58
 80054fa:	e003      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005500:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005510:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005514:	2300      	movs	r3, #0
 8005516:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800551a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800551e:	460b      	mov	r3, r1
 8005520:	4313      	orrs	r3, r2
 8005522:	d03a      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800552a:	2b30      	cmp	r3, #48	; 0x30
 800552c:	d01f      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800552e:	2b30      	cmp	r3, #48	; 0x30
 8005530:	d819      	bhi.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005532:	2b20      	cmp	r3, #32
 8005534:	d00c      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005536:	2b20      	cmp	r3, #32
 8005538:	d815      	bhi.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800553a:	2b00      	cmp	r3, #0
 800553c:	d019      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800553e:	2b10      	cmp	r3, #16
 8005540:	d111      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005542:	4b77      	ldr	r3, [pc, #476]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005546:	4a76      	ldr	r2, [pc, #472]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800554c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800554e:	e011      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005554:	3308      	adds	r3, #8
 8005556:	2102      	movs	r1, #2
 8005558:	4618      	mov	r0, r3
 800555a:	f002 f997 	bl	800788c <RCCEx_PLL2_Config>
 800555e:	4603      	mov	r3, r0
 8005560:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005564:	e006      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800556c:	e002      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800556e:	bf00      	nop
 8005570:	e000      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005574:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10a      	bne.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800557c:	4b68      	ldr	r3, [pc, #416]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800557e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005580:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800558a:	4a65      	ldr	r2, [pc, #404]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800558c:	430b      	orrs	r3, r1
 800558e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005590:	e003      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005592:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005596:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800559a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800559e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80055a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055aa:	2300      	movs	r3, #0
 80055ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055b0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4313      	orrs	r3, r2
 80055b8:	d051      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80055ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055c4:	d035      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80055c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055ca:	d82e      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80055cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055d0:	d031      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80055d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055d6:	d828      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80055d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055dc:	d01a      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80055de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e2:	d822      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80055e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ec:	d007      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80055ee:	e01c      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055f0:	4b4b      	ldr	r3, [pc, #300]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	4a4a      	ldr	r2, [pc, #296]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80055fc:	e01c      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005602:	3308      	adds	r3, #8
 8005604:	2100      	movs	r1, #0
 8005606:	4618      	mov	r0, r3
 8005608:	f002 f940 	bl	800788c <RCCEx_PLL2_Config>
 800560c:	4603      	mov	r3, r0
 800560e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005612:	e011      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005618:	3328      	adds	r3, #40	; 0x28
 800561a:	2100      	movs	r1, #0
 800561c:	4618      	mov	r0, r3
 800561e:	f002 f9e7 	bl	80079f0 <RCCEx_PLL3_Config>
 8005622:	4603      	mov	r3, r0
 8005624:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005628:	e006      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005630:	e002      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005632:	bf00      	nop
 8005634:	e000      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005638:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10a      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005640:	4b37      	ldr	r3, [pc, #220]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005644:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800564c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800564e:	4a34      	ldr	r2, [pc, #208]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005650:	430b      	orrs	r3, r1
 8005652:	6513      	str	r3, [r2, #80]	; 0x50
 8005654:	e003      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005656:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800565a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800565e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800566a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800566e:	2300      	movs	r3, #0
 8005670:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005674:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005678:	460b      	mov	r3, r1
 800567a:	4313      	orrs	r3, r2
 800567c:	d056      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800567e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005688:	d033      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800568a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800568e:	d82c      	bhi.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005690:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005694:	d02f      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005696:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800569a:	d826      	bhi.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800569c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056a0:	d02b      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80056a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056a6:	d820      	bhi.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80056a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056ac:	d012      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80056ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056b2:	d81a      	bhi.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d022      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80056b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056bc:	d115      	bne.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c2:	3308      	adds	r3, #8
 80056c4:	2101      	movs	r1, #1
 80056c6:	4618      	mov	r0, r3
 80056c8:	f002 f8e0 	bl	800788c <RCCEx_PLL2_Config>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056d2:	e015      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d8:	3328      	adds	r3, #40	; 0x28
 80056da:	2101      	movs	r1, #1
 80056dc:	4618      	mov	r0, r3
 80056de:	f002 f987 	bl	80079f0 <RCCEx_PLL3_Config>
 80056e2:	4603      	mov	r3, r0
 80056e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056e8:	e00a      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056f0:	e006      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056f2:	bf00      	nop
 80056f4:	e004      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056f6:	bf00      	nop
 80056f8:	e002      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056fa:	bf00      	nop
 80056fc:	e000      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005700:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10d      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005708:	4b05      	ldr	r3, [pc, #20]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800570a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800570c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005716:	4a02      	ldr	r2, [pc, #8]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005718:	430b      	orrs	r3, r1
 800571a:	6513      	str	r3, [r2, #80]	; 0x50
 800571c:	e006      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800571e:	bf00      	nop
 8005720:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005724:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005728:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800572c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005734:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005738:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800573c:	2300      	movs	r3, #0
 800573e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005742:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005746:	460b      	mov	r3, r1
 8005748:	4313      	orrs	r3, r2
 800574a:	d055      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800574c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005750:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005758:	d033      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800575a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800575e:	d82c      	bhi.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005764:	d02f      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576a:	d826      	bhi.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800576c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005770:	d02b      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005772:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005776:	d820      	bhi.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800577c:	d012      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800577e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005782:	d81a      	bhi.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005784:	2b00      	cmp	r3, #0
 8005786:	d022      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005788:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800578c:	d115      	bne.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800578e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005792:	3308      	adds	r3, #8
 8005794:	2101      	movs	r1, #1
 8005796:	4618      	mov	r0, r3
 8005798:	f002 f878 	bl	800788c <RCCEx_PLL2_Config>
 800579c:	4603      	mov	r3, r0
 800579e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80057a2:	e015      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057a8:	3328      	adds	r3, #40	; 0x28
 80057aa:	2101      	movs	r1, #1
 80057ac:	4618      	mov	r0, r3
 80057ae:	f002 f91f 	bl	80079f0 <RCCEx_PLL3_Config>
 80057b2:	4603      	mov	r3, r0
 80057b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80057b8:	e00a      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057c0:	e006      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057c2:	bf00      	nop
 80057c4:	e004      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057c6:	bf00      	nop
 80057c8:	e002      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057ca:	bf00      	nop
 80057cc:	e000      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10b      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80057d8:	4ba3      	ldr	r3, [pc, #652]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057dc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80057e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057e8:	4a9f      	ldr	r2, [pc, #636]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057ea:	430b      	orrs	r3, r1
 80057ec:	6593      	str	r3, [r2, #88]	; 0x58
 80057ee:	e003      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80057f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005804:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005808:	2300      	movs	r3, #0
 800580a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800580e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005812:	460b      	mov	r3, r1
 8005814:	4313      	orrs	r3, r2
 8005816:	d037      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800581c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005822:	d00e      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005828:	d816      	bhi.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800582a:	2b00      	cmp	r3, #0
 800582c:	d018      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800582e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005832:	d111      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005834:	4b8c      	ldr	r3, [pc, #560]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	4a8b      	ldr	r2, [pc, #556]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800583a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800583e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005840:	e00f      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005846:	3308      	adds	r3, #8
 8005848:	2101      	movs	r1, #1
 800584a:	4618      	mov	r0, r3
 800584c:	f002 f81e 	bl	800788c <RCCEx_PLL2_Config>
 8005850:	4603      	mov	r3, r0
 8005852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005856:	e004      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800585e:	e000      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005862:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10a      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800586a:	4b7f      	ldr	r3, [pc, #508]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800586c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005878:	4a7b      	ldr	r2, [pc, #492]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800587a:	430b      	orrs	r3, r1
 800587c:	6513      	str	r3, [r2, #80]	; 0x50
 800587e:	e003      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005880:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005884:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005890:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005894:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005898:	2300      	movs	r3, #0
 800589a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800589e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80058a2:	460b      	mov	r3, r1
 80058a4:	4313      	orrs	r3, r2
 80058a6:	d039      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80058a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d81c      	bhi.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x794>
 80058b2:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80058b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b8:	080058f5 	.word	0x080058f5
 80058bc:	080058c9 	.word	0x080058c9
 80058c0:	080058d7 	.word	0x080058d7
 80058c4:	080058f5 	.word	0x080058f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058c8:	4b67      	ldr	r3, [pc, #412]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	4a66      	ldr	r2, [pc, #408]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80058d4:	e00f      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058da:	3308      	adds	r3, #8
 80058dc:	2102      	movs	r1, #2
 80058de:	4618      	mov	r0, r3
 80058e0:	f001 ffd4 	bl	800788c <RCCEx_PLL2_Config>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80058ea:	e004      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058f2:	e000      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80058f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10a      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80058fe:	4b5a      	ldr	r3, [pc, #360]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005902:	f023 0103 	bic.w	r1, r3, #3
 8005906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800590a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800590c:	4a56      	ldr	r2, [pc, #344]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800590e:	430b      	orrs	r3, r1
 8005910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005912:	e003      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005914:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005918:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800591c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005928:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800592c:	2300      	movs	r3, #0
 800592e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005932:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005936:	460b      	mov	r3, r1
 8005938:	4313      	orrs	r3, r2
 800593a:	f000 809f 	beq.w	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800593e:	4b4b      	ldr	r3, [pc, #300]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a4a      	ldr	r2, [pc, #296]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005948:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800594a:	f7fc fb87 	bl	800205c <HAL_GetTick>
 800594e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005952:	e00b      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005954:	f7fc fb82 	bl	800205c <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b64      	cmp	r3, #100	; 0x64
 8005962:	d903      	bls.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800596a:	e005      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800596c:	4b3f      	ldr	r3, [pc, #252]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0ed      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800597c:	2b00      	cmp	r3, #0
 800597e:	d179      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005980:	4b39      	ldr	r3, [pc, #228]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005982:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005988:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800598c:	4053      	eors	r3, r2
 800598e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005992:	2b00      	cmp	r3, #0
 8005994:	d015      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005996:	4b34      	ldr	r3, [pc, #208]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800599e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059a2:	4b31      	ldr	r3, [pc, #196]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a6:	4a30      	ldr	r2, [pc, #192]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059ac:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059ae:	4b2e      	ldr	r3, [pc, #184]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b2:	4a2d      	ldr	r2, [pc, #180]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059b8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80059ba:	4a2b      	ldr	r2, [pc, #172]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80059c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ce:	d118      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d0:	f7fc fb44 	bl	800205c <HAL_GetTick>
 80059d4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059d8:	e00d      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059da:	f7fc fb3f 	bl	800205c <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80059e4:	1ad2      	subs	r2, r2, r3
 80059e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d903      	bls.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80059f4:	e005      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059f6:	4b1c      	ldr	r3, [pc, #112]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0eb      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005a02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d129      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a1a:	d10e      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005a1c:	4b12      	ldr	r3, [pc, #72]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a2c:	091a      	lsrs	r2, r3, #4
 8005a2e:	4b10      	ldr	r3, [pc, #64]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005a30:	4013      	ands	r3, r2
 8005a32:	4a0d      	ldr	r2, [pc, #52]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a34:	430b      	orrs	r3, r1
 8005a36:	6113      	str	r3, [r2, #16]
 8005a38:	e005      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005a3a:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	4a0a      	ldr	r2, [pc, #40]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a44:	6113      	str	r3, [r2, #16]
 8005a46:	4b08      	ldr	r3, [pc, #32]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a48:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a56:	4a04      	ldr	r2, [pc, #16]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a58:	430b      	orrs	r3, r1
 8005a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a5c:	e00e      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005a66:	e009      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005a68:	58024400 	.word	0x58024400
 8005a6c:	58024800 	.word	0x58024800
 8005a70:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a84:	f002 0301 	and.w	r3, r2, #1
 8005a88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a92:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a96:	460b      	mov	r3, r1
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f000 8089 	beq.w	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aa4:	2b28      	cmp	r3, #40	; 0x28
 8005aa6:	d86b      	bhi.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005aa8:	a201      	add	r2, pc, #4	; (adr r2, 8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aae:	bf00      	nop
 8005ab0:	08005b89 	.word	0x08005b89
 8005ab4:	08005b81 	.word	0x08005b81
 8005ab8:	08005b81 	.word	0x08005b81
 8005abc:	08005b81 	.word	0x08005b81
 8005ac0:	08005b81 	.word	0x08005b81
 8005ac4:	08005b81 	.word	0x08005b81
 8005ac8:	08005b81 	.word	0x08005b81
 8005acc:	08005b81 	.word	0x08005b81
 8005ad0:	08005b55 	.word	0x08005b55
 8005ad4:	08005b81 	.word	0x08005b81
 8005ad8:	08005b81 	.word	0x08005b81
 8005adc:	08005b81 	.word	0x08005b81
 8005ae0:	08005b81 	.word	0x08005b81
 8005ae4:	08005b81 	.word	0x08005b81
 8005ae8:	08005b81 	.word	0x08005b81
 8005aec:	08005b81 	.word	0x08005b81
 8005af0:	08005b6b 	.word	0x08005b6b
 8005af4:	08005b81 	.word	0x08005b81
 8005af8:	08005b81 	.word	0x08005b81
 8005afc:	08005b81 	.word	0x08005b81
 8005b00:	08005b81 	.word	0x08005b81
 8005b04:	08005b81 	.word	0x08005b81
 8005b08:	08005b81 	.word	0x08005b81
 8005b0c:	08005b81 	.word	0x08005b81
 8005b10:	08005b89 	.word	0x08005b89
 8005b14:	08005b81 	.word	0x08005b81
 8005b18:	08005b81 	.word	0x08005b81
 8005b1c:	08005b81 	.word	0x08005b81
 8005b20:	08005b81 	.word	0x08005b81
 8005b24:	08005b81 	.word	0x08005b81
 8005b28:	08005b81 	.word	0x08005b81
 8005b2c:	08005b81 	.word	0x08005b81
 8005b30:	08005b89 	.word	0x08005b89
 8005b34:	08005b81 	.word	0x08005b81
 8005b38:	08005b81 	.word	0x08005b81
 8005b3c:	08005b81 	.word	0x08005b81
 8005b40:	08005b81 	.word	0x08005b81
 8005b44:	08005b81 	.word	0x08005b81
 8005b48:	08005b81 	.word	0x08005b81
 8005b4c:	08005b81 	.word	0x08005b81
 8005b50:	08005b89 	.word	0x08005b89
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b58:	3308      	adds	r3, #8
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f001 fe95 	bl	800788c <RCCEx_PLL2_Config>
 8005b62:	4603      	mov	r3, r0
 8005b64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005b68:	e00f      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6e:	3328      	adds	r3, #40	; 0x28
 8005b70:	2101      	movs	r1, #1
 8005b72:	4618      	mov	r0, r3
 8005b74:	f001 ff3c 	bl	80079f0 <RCCEx_PLL3_Config>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005b7e:	e004      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b86:	e000      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10a      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005b92:	4bbf      	ldr	r3, [pc, #764]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b96:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ba0:	4abb      	ldr	r2, [pc, #748]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ba2:	430b      	orrs	r3, r1
 8005ba4:	6553      	str	r3, [r2, #84]	; 0x54
 8005ba6:	e003      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb8:	f002 0302 	and.w	r3, r2, #2
 8005bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005bc6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	d041      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bd6:	2b05      	cmp	r3, #5
 8005bd8:	d824      	bhi.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005bda:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be0:	08005c2d 	.word	0x08005c2d
 8005be4:	08005bf9 	.word	0x08005bf9
 8005be8:	08005c0f 	.word	0x08005c0f
 8005bec:	08005c2d 	.word	0x08005c2d
 8005bf0:	08005c2d 	.word	0x08005c2d
 8005bf4:	08005c2d 	.word	0x08005c2d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	2101      	movs	r1, #1
 8005c00:	4618      	mov	r0, r3
 8005c02:	f001 fe43 	bl	800788c <RCCEx_PLL2_Config>
 8005c06:	4603      	mov	r3, r0
 8005c08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c0c:	e00f      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c12:	3328      	adds	r3, #40	; 0x28
 8005c14:	2101      	movs	r1, #1
 8005c16:	4618      	mov	r0, r3
 8005c18:	f001 feea 	bl	80079f0 <RCCEx_PLL3_Config>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c22:	e004      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c2a:	e000      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10a      	bne.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005c36:	4b96      	ldr	r3, [pc, #600]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3a:	f023 0107 	bic.w	r1, r3, #7
 8005c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c44:	4a92      	ldr	r2, [pc, #584]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c46:	430b      	orrs	r3, r1
 8005c48:	6553      	str	r3, [r2, #84]	; 0x54
 8005c4a:	e003      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5c:	f002 0304 	and.w	r3, r2, #4
 8005c60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c64:	2300      	movs	r3, #0
 8005c66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c6a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4313      	orrs	r3, r2
 8005c72:	d044      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c7c:	2b05      	cmp	r3, #5
 8005c7e:	d825      	bhi.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005c80:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c86:	bf00      	nop
 8005c88:	08005cd5 	.word	0x08005cd5
 8005c8c:	08005ca1 	.word	0x08005ca1
 8005c90:	08005cb7 	.word	0x08005cb7
 8005c94:	08005cd5 	.word	0x08005cd5
 8005c98:	08005cd5 	.word	0x08005cd5
 8005c9c:	08005cd5 	.word	0x08005cd5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f001 fdef 	bl	800788c <RCCEx_PLL2_Config>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005cb4:	e00f      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cba:	3328      	adds	r3, #40	; 0x28
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f001 fe96 	bl	80079f0 <RCCEx_PLL3_Config>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005cca:	e004      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005cd2:	e000      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10b      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cde:	4b6c      	ldr	r3, [pc, #432]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce2:	f023 0107 	bic.w	r1, r3, #7
 8005ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cee:	4a68      	ldr	r2, [pc, #416]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8005cf4:	e003      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d06:	f002 0320 	and.w	r3, r2, #32
 8005d0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d0e:	2300      	movs	r3, #0
 8005d10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d18:	460b      	mov	r3, r1
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	d055      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d2a:	d033      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005d2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d30:	d82c      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d36:	d02f      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3c:	d826      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d42:	d02b      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005d44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d48:	d820      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d4e:	d012      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d54:	d81a      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d022      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005d5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d5e:	d115      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d64:	3308      	adds	r3, #8
 8005d66:	2100      	movs	r1, #0
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f001 fd8f 	bl	800788c <RCCEx_PLL2_Config>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005d74:	e015      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d7a:	3328      	adds	r3, #40	; 0x28
 8005d7c:	2102      	movs	r1, #2
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f001 fe36 	bl	80079f0 <RCCEx_PLL3_Config>
 8005d84:	4603      	mov	r3, r0
 8005d86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005d8a:	e00a      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d92:	e006      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005d94:	bf00      	nop
 8005d96:	e004      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005d98:	bf00      	nop
 8005d9a:	e002      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005d9c:	bf00      	nop
 8005d9e:	e000      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10b      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005daa:	4b39      	ldr	r3, [pc, #228]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dae:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dba:	4a35      	ldr	r2, [pc, #212]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	6553      	str	r3, [r2, #84]	; 0x54
 8005dc0:	e003      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005de0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4313      	orrs	r3, r2
 8005de8:	d058      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005df2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005df6:	d033      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005df8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005dfc:	d82c      	bhi.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e02:	d02f      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e08:	d826      	bhi.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e0e:	d02b      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005e10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e14:	d820      	bhi.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e1a:	d012      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e20:	d81a      	bhi.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d022      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e2a:	d115      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e30:	3308      	adds	r3, #8
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f001 fd29 	bl	800788c <RCCEx_PLL2_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e40:	e015      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e46:	3328      	adds	r3, #40	; 0x28
 8005e48:	2102      	movs	r1, #2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f001 fdd0 	bl	80079f0 <RCCEx_PLL3_Config>
 8005e50:	4603      	mov	r3, r0
 8005e52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e56:	e00a      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e5e:	e006      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e60:	bf00      	nop
 8005e62:	e004      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e64:	bf00      	nop
 8005e66:	e002      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e68:	bf00      	nop
 8005e6a:	e000      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10e      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e76:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e86:	4a02      	ldr	r2, [pc, #8]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8005e8c:	e006      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005e8e:	bf00      	nop
 8005e90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005eac:	2300      	movs	r3, #0
 8005eae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005eb2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	d055      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ec0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ec4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005ec8:	d033      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005eca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005ece:	d82c      	bhi.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed4:	d02f      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eda:	d826      	bhi.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005edc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ee0:	d02b      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005ee2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ee6:	d820      	bhi.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eec:	d012      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005eee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ef2:	d81a      	bhi.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d022      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005efc:	d115      	bne.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f02:	3308      	adds	r3, #8
 8005f04:	2100      	movs	r1, #0
 8005f06:	4618      	mov	r0, r3
 8005f08:	f001 fcc0 	bl	800788c <RCCEx_PLL2_Config>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f12:	e015      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f18:	3328      	adds	r3, #40	; 0x28
 8005f1a:	2102      	movs	r1, #2
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f001 fd67 	bl	80079f0 <RCCEx_PLL3_Config>
 8005f22:	4603      	mov	r3, r0
 8005f24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f28:	e00a      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f30:	e006      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f32:	bf00      	nop
 8005f34:	e004      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f36:	bf00      	nop
 8005f38:	e002      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f3a:	bf00      	nop
 8005f3c:	e000      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10b      	bne.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005f48:	4ba1      	ldr	r3, [pc, #644]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f58:	4a9d      	ldr	r2, [pc, #628]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f5a:	430b      	orrs	r3, r1
 8005f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8005f5e:	e003      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	f002 0308 	and.w	r3, r2, #8
 8005f74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f7e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005f82:	460b      	mov	r3, r1
 8005f84:	4313      	orrs	r3, r2
 8005f86:	d01e      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f94:	d10c      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f9a:	3328      	adds	r3, #40	; 0x28
 8005f9c:	2102      	movs	r1, #2
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f001 fd26 	bl	80079f0 <RCCEx_PLL3_Config>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005fb0:	4b87      	ldr	r3, [pc, #540]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fc0:	4a83      	ldr	r2, [pc, #524]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fc2:	430b      	orrs	r3, r1
 8005fc4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fce:	f002 0310 	and.w	r3, r2, #16
 8005fd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005fdc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	d01e      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ff2:	d10c      	bne.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ff8:	3328      	adds	r3, #40	; 0x28
 8005ffa:	2102      	movs	r1, #2
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f001 fcf7 	bl	80079f0 <RCCEx_PLL3_Config>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800600e:	4b70      	ldr	r3, [pc, #448]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006012:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800601a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800601e:	4a6c      	ldr	r2, [pc, #432]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006020:	430b      	orrs	r3, r1
 8006022:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006030:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006034:	2300      	movs	r3, #0
 8006036:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800603a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800603e:	460b      	mov	r3, r1
 8006040:	4313      	orrs	r3, r2
 8006042:	d03e      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006048:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800604c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006050:	d022      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006052:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006056:	d81b      	bhi.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006058:	2b00      	cmp	r3, #0
 800605a:	d003      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800605c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006060:	d00b      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006062:	e015      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006068:	3308      	adds	r3, #8
 800606a:	2100      	movs	r1, #0
 800606c:	4618      	mov	r0, r3
 800606e:	f001 fc0d 	bl	800788c <RCCEx_PLL2_Config>
 8006072:	4603      	mov	r3, r0
 8006074:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006078:	e00f      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800607a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800607e:	3328      	adds	r3, #40	; 0x28
 8006080:	2102      	movs	r1, #2
 8006082:	4618      	mov	r0, r3
 8006084:	f001 fcb4 	bl	80079f0 <RCCEx_PLL3_Config>
 8006088:	4603      	mov	r3, r0
 800608a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800608e:	e004      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006096:	e000      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800609a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10b      	bne.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060a2:	4b4b      	ldr	r3, [pc, #300]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80060aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80060b2:	4a47      	ldr	r2, [pc, #284]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060b4:	430b      	orrs	r3, r1
 80060b6:	6593      	str	r3, [r2, #88]	; 0x58
 80060b8:	e003      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80060ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80060d0:	2300      	movs	r3, #0
 80060d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80060d8:	460b      	mov	r3, r1
 80060da:	4313      	orrs	r3, r2
 80060dc:	d03b      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80060de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060ea:	d01f      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80060ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060f0:	d818      	bhi.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80060f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060f6:	d003      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80060f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060fc:	d007      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80060fe:	e011      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006100:	4b33      	ldr	r3, [pc, #204]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	4a32      	ldr	r2, [pc, #200]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800610a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800610c:	e00f      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800610e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006112:	3328      	adds	r3, #40	; 0x28
 8006114:	2101      	movs	r1, #1
 8006116:	4618      	mov	r0, r3
 8006118:	f001 fc6a 	bl	80079f0 <RCCEx_PLL3_Config>
 800611c:	4603      	mov	r3, r0
 800611e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006122:	e004      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800612a:	e000      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800612c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800612e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10b      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006136:	4b26      	ldr	r3, [pc, #152]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800613e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006146:	4a22      	ldr	r2, [pc, #136]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006148:	430b      	orrs	r3, r1
 800614a:	6553      	str	r3, [r2, #84]	; 0x54
 800614c:	e003      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800614e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006152:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800615a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006162:	673b      	str	r3, [r7, #112]	; 0x70
 8006164:	2300      	movs	r3, #0
 8006166:	677b      	str	r3, [r7, #116]	; 0x74
 8006168:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800616c:	460b      	mov	r3, r1
 800616e:	4313      	orrs	r3, r2
 8006170:	d034      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800617c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006180:	d007      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006182:	e011      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006184:	4b12      	ldr	r3, [pc, #72]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	4a11      	ldr	r2, [pc, #68]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800618a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800618e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006190:	e00e      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006196:	3308      	adds	r3, #8
 8006198:	2102      	movs	r1, #2
 800619a:	4618      	mov	r0, r3
 800619c:	f001 fb76 	bl	800788c <RCCEx_PLL2_Config>
 80061a0:	4603      	mov	r3, r0
 80061a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80061a6:	e003      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10d      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80061b8:	4b05      	ldr	r3, [pc, #20]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c6:	4a02      	ldr	r2, [pc, #8]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061c8:	430b      	orrs	r3, r1
 80061ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061cc:	e006      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80061ce:	bf00      	nop
 80061d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80061dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80061e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80061ea:	2300      	movs	r3, #0
 80061ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80061f2:	460b      	mov	r3, r1
 80061f4:	4313      	orrs	r3, r2
 80061f6:	d00c      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061fc:	3328      	adds	r3, #40	; 0x28
 80061fe:	2102      	movs	r1, #2
 8006200:	4618      	mov	r0, r3
 8006202:	f001 fbf5 	bl	80079f0 <RCCEx_PLL3_Config>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800621e:	663b      	str	r3, [r7, #96]	; 0x60
 8006220:	2300      	movs	r3, #0
 8006222:	667b      	str	r3, [r7, #100]	; 0x64
 8006224:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006228:	460b      	mov	r3, r1
 800622a:	4313      	orrs	r3, r2
 800622c:	d038      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800622e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006236:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800623a:	d018      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800623c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006240:	d811      	bhi.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006246:	d014      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800624c:	d80b      	bhi.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800624e:	2b00      	cmp	r3, #0
 8006250:	d011      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006256:	d106      	bne.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006258:	4bc3      	ldr	r3, [pc, #780]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800625a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625c:	4ac2      	ldr	r2, [pc, #776]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800625e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006262:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006264:	e008      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800626c:	e004      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800626e:	bf00      	nop
 8006270:	e002      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006272:	bf00      	nop
 8006274:	e000      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006276:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006278:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10b      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006280:	4bb9      	ldr	r3, [pc, #740]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006284:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800628c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006290:	4ab5      	ldr	r2, [pc, #724]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006292:	430b      	orrs	r3, r1
 8006294:	6553      	str	r3, [r2, #84]	; 0x54
 8006296:	e003      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006298:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800629c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80062a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80062ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80062ae:	2300      	movs	r3, #0
 80062b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062b2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80062b6:	460b      	mov	r3, r1
 80062b8:	4313      	orrs	r3, r2
 80062ba:	d009      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062bc:	4baa      	ldr	r3, [pc, #680]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80062c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ca:	4aa7      	ldr	r2, [pc, #668]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062cc:	430b      	orrs	r3, r1
 80062ce:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80062d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80062dc:	653b      	str	r3, [r7, #80]	; 0x50
 80062de:	2300      	movs	r3, #0
 80062e0:	657b      	str	r3, [r7, #84]	; 0x54
 80062e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80062e6:	460b      	mov	r3, r1
 80062e8:	4313      	orrs	r3, r2
 80062ea:	d00a      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80062ec:	4b9e      	ldr	r3, [pc, #632]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80062f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80062fc:	4a9a      	ldr	r2, [pc, #616]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062fe:	430b      	orrs	r3, r1
 8006300:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800630e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006310:	2300      	movs	r3, #0
 8006312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006314:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006318:	460b      	mov	r3, r1
 800631a:	4313      	orrs	r3, r2
 800631c:	d009      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800631e:	4b92      	ldr	r3, [pc, #584]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006322:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800632a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800632c:	4a8e      	ldr	r2, [pc, #568]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800632e:	430b      	orrs	r3, r1
 8006330:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800633e:	643b      	str	r3, [r7, #64]	; 0x40
 8006340:	2300      	movs	r3, #0
 8006342:	647b      	str	r3, [r7, #68]	; 0x44
 8006344:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006348:	460b      	mov	r3, r1
 800634a:	4313      	orrs	r3, r2
 800634c:	d00e      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800634e:	4b86      	ldr	r3, [pc, #536]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	4a85      	ldr	r2, [pc, #532]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006354:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006358:	6113      	str	r3, [r2, #16]
 800635a:	4b83      	ldr	r3, [pc, #524]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800635c:	6919      	ldr	r1, [r3, #16]
 800635e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006362:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006366:	4a80      	ldr	r2, [pc, #512]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006368:	430b      	orrs	r3, r1
 800636a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800636c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006378:	63bb      	str	r3, [r7, #56]	; 0x38
 800637a:	2300      	movs	r3, #0
 800637c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800637e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006382:	460b      	mov	r3, r1
 8006384:	4313      	orrs	r3, r2
 8006386:	d009      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006388:	4b77      	ldr	r3, [pc, #476]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800638a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800638c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006396:	4a74      	ldr	r2, [pc, #464]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006398:	430b      	orrs	r3, r1
 800639a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800639c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80063a8:	633b      	str	r3, [r7, #48]	; 0x30
 80063aa:	2300      	movs	r3, #0
 80063ac:	637b      	str	r3, [r7, #52]	; 0x34
 80063ae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80063b2:	460b      	mov	r3, r1
 80063b4:	4313      	orrs	r3, r2
 80063b6:	d00a      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063b8:	4b6b      	ldr	r3, [pc, #428]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063bc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80063c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063c8:	4a67      	ldr	r2, [pc, #412]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063ca:	430b      	orrs	r3, r1
 80063cc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80063ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d6:	2100      	movs	r1, #0
 80063d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063e0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80063e4:	460b      	mov	r3, r1
 80063e6:	4313      	orrs	r3, r2
 80063e8:	d011      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ee:	3308      	adds	r3, #8
 80063f0:	2100      	movs	r1, #0
 80063f2:	4618      	mov	r0, r3
 80063f4:	f001 fa4a 	bl	800788c <RCCEx_PLL2_Config>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80063fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006406:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800640a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800640e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	2100      	movs	r1, #0
 8006418:	6239      	str	r1, [r7, #32]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
 8006420:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006424:	460b      	mov	r3, r1
 8006426:	4313      	orrs	r3, r2
 8006428:	d011      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800642a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800642e:	3308      	adds	r3, #8
 8006430:	2101      	movs	r1, #1
 8006432:	4618      	mov	r0, r3
 8006434:	f001 fa2a 	bl	800788c <RCCEx_PLL2_Config>
 8006438:	4603      	mov	r3, r0
 800643a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800643e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006446:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800644a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800644e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	2100      	movs	r1, #0
 8006458:	61b9      	str	r1, [r7, #24]
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	61fb      	str	r3, [r7, #28]
 8006460:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006464:	460b      	mov	r3, r1
 8006466:	4313      	orrs	r3, r2
 8006468:	d011      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800646a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800646e:	3308      	adds	r3, #8
 8006470:	2102      	movs	r1, #2
 8006472:	4618      	mov	r0, r3
 8006474:	f001 fa0a 	bl	800788c <RCCEx_PLL2_Config>
 8006478:	4603      	mov	r3, r0
 800647a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800647e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006486:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800648a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800648e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006496:	2100      	movs	r1, #0
 8006498:	6139      	str	r1, [r7, #16]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	617b      	str	r3, [r7, #20]
 80064a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80064a4:	460b      	mov	r3, r1
 80064a6:	4313      	orrs	r3, r2
 80064a8:	d011      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ae:	3328      	adds	r3, #40	; 0x28
 80064b0:	2100      	movs	r1, #0
 80064b2:	4618      	mov	r0, r3
 80064b4:	f001 fa9c 	bl	80079f0 <RCCEx_PLL3_Config>
 80064b8:	4603      	mov	r3, r0
 80064ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80064be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80064ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d6:	2100      	movs	r1, #0
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	f003 0310 	and.w	r3, r3, #16
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80064e4:	460b      	mov	r3, r1
 80064e6:	4313      	orrs	r3, r2
 80064e8:	d011      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ee:	3328      	adds	r3, #40	; 0x28
 80064f0:	2101      	movs	r1, #1
 80064f2:	4618      	mov	r0, r3
 80064f4:	f001 fa7c 	bl	80079f0 <RCCEx_PLL3_Config>
 80064f8:	4603      	mov	r3, r0
 80064fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80064fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006506:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800650a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800650e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	2100      	movs	r1, #0
 8006518:	6039      	str	r1, [r7, #0]
 800651a:	f003 0320 	and.w	r3, r3, #32
 800651e:	607b      	str	r3, [r7, #4]
 8006520:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006524:	460b      	mov	r3, r1
 8006526:	4313      	orrs	r3, r2
 8006528:	d011      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800652a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800652e:	3328      	adds	r3, #40	; 0x28
 8006530:	2102      	movs	r1, #2
 8006532:	4618      	mov	r0, r3
 8006534:	f001 fa5c 	bl	80079f0 <RCCEx_PLL3_Config>
 8006538:	4603      	mov	r3, r0
 800653a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800653e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006546:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800654a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800654e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	e000      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
}
 800655c:	4618      	mov	r0, r3
 800655e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006562:	46bd      	mov	sp, r7
 8006564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006568:	58024400 	.word	0x58024400

0800656c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b090      	sub	sp, #64	; 0x40
 8006570:	af00      	add	r7, sp, #0
 8006572:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800657a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800657e:	430b      	orrs	r3, r1
 8006580:	f040 8094 	bne.w	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006584:	4b9e      	ldr	r3, [pc, #632]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	2b04      	cmp	r3, #4
 8006592:	f200 8087 	bhi.w	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006596:	a201      	add	r2, pc, #4	; (adr r2, 800659c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	080065b1 	.word	0x080065b1
 80065a0:	080065d9 	.word	0x080065d9
 80065a4:	08006601 	.word	0x08006601
 80065a8:	0800669d 	.word	0x0800669d
 80065ac:	08006629 	.word	0x08006629
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065b0:	4b93      	ldr	r3, [pc, #588]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065bc:	d108      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065c2:	4618      	mov	r0, r3
 80065c4:	f001 f810 	bl	80075e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065cc:	f000 bd45 	b.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065d0:	2300      	movs	r3, #0
 80065d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065d4:	f000 bd41 	b.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065d8:	4b89      	ldr	r3, [pc, #548]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065e4:	d108      	bne.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065e6:	f107 0318 	add.w	r3, r7, #24
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 fd54 	bl	8007098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065f4:	f000 bd31 	b.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065f8:	2300      	movs	r3, #0
 80065fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065fc:	f000 bd2d 	b.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006600:	4b7f      	ldr	r3, [pc, #508]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006608:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800660c:	d108      	bne.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800660e:	f107 030c 	add.w	r3, r7, #12
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fe94 	bl	8007340 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800661c:	f000 bd1d 	b.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006620:	2300      	movs	r3, #0
 8006622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006624:	f000 bd19 	b.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006628:	4b75      	ldr	r3, [pc, #468]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800662a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800662c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006630:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006632:	4b73      	ldr	r3, [pc, #460]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0304 	and.w	r3, r3, #4
 800663a:	2b04      	cmp	r3, #4
 800663c:	d10c      	bne.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800663e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006640:	2b00      	cmp	r3, #0
 8006642:	d109      	bne.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006644:	4b6e      	ldr	r3, [pc, #440]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	08db      	lsrs	r3, r3, #3
 800664a:	f003 0303 	and.w	r3, r3, #3
 800664e:	4a6d      	ldr	r2, [pc, #436]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006650:	fa22 f303 	lsr.w	r3, r2, r3
 8006654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006656:	e01f      	b.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006658:	4b69      	ldr	r3, [pc, #420]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006664:	d106      	bne.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006668:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800666c:	d102      	bne.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800666e:	4b66      	ldr	r3, [pc, #408]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006672:	e011      	b.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006674:	4b62      	ldr	r3, [pc, #392]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800667c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006680:	d106      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006688:	d102      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800668a:	4b60      	ldr	r3, [pc, #384]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800668c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800668e:	e003      	b.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006690:	2300      	movs	r3, #0
 8006692:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006694:	f000 bce1 	b.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006698:	f000 bcdf 	b.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800669c:	4b5c      	ldr	r3, [pc, #368]	; (8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800669e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066a0:	f000 bcdb 	b.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80066a4:	2300      	movs	r3, #0
 80066a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066a8:	f000 bcd7 	b.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80066ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066b0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80066b4:	430b      	orrs	r3, r1
 80066b6:	f040 80ad 	bne.w	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80066ba:	4b51      	ldr	r3, [pc, #324]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066be:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80066c2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80066c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ca:	d056      	beq.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d2:	f200 8090 	bhi.w	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	2bc0      	cmp	r3, #192	; 0xc0
 80066da:	f000 8088 	beq.w	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	2bc0      	cmp	r3, #192	; 0xc0
 80066e2:	f200 8088 	bhi.w	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	2b80      	cmp	r3, #128	; 0x80
 80066ea:	d032      	beq.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80066ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ee:	2b80      	cmp	r3, #128	; 0x80
 80066f0:	f200 8081 	bhi.w	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80066f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80066fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fc:	2b40      	cmp	r3, #64	; 0x40
 80066fe:	d014      	beq.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006700:	e079      	b.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006702:	4b3f      	ldr	r3, [pc, #252]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800670a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800670e:	d108      	bne.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006714:	4618      	mov	r0, r3
 8006716:	f000 ff67 	bl	80075e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800671e:	f000 bc9c 	b.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006722:	2300      	movs	r3, #0
 8006724:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006726:	f000 bc98 	b.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800672a:	4b35      	ldr	r3, [pc, #212]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006736:	d108      	bne.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006738:	f107 0318 	add.w	r3, r7, #24
 800673c:	4618      	mov	r0, r3
 800673e:	f000 fcab 	bl	8007098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006746:	f000 bc88 	b.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800674a:	2300      	movs	r3, #0
 800674c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800674e:	f000 bc84 	b.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006752:	4b2b      	ldr	r3, [pc, #172]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800675a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800675e:	d108      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006760:	f107 030c 	add.w	r3, r7, #12
 8006764:	4618      	mov	r0, r3
 8006766:	f000 fdeb 	bl	8007340 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800676e:	f000 bc74 	b.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006772:	2300      	movs	r3, #0
 8006774:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006776:	f000 bc70 	b.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800677a:	4b21      	ldr	r3, [pc, #132]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800677c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800677e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006782:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006784:	4b1e      	ldr	r3, [pc, #120]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0304 	and.w	r3, r3, #4
 800678c:	2b04      	cmp	r3, #4
 800678e:	d10c      	bne.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006792:	2b00      	cmp	r3, #0
 8006794:	d109      	bne.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006796:	4b1a      	ldr	r3, [pc, #104]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	08db      	lsrs	r3, r3, #3
 800679c:	f003 0303 	and.w	r3, r3, #3
 80067a0:	4a18      	ldr	r2, [pc, #96]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80067a2:	fa22 f303 	lsr.w	r3, r2, r3
 80067a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067a8:	e01f      	b.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067aa:	4b15      	ldr	r3, [pc, #84]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b6:	d106      	bne.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80067b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067be:	d102      	bne.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80067c0:	4b11      	ldr	r3, [pc, #68]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80067c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067c4:	e011      	b.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067c6:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067d2:	d106      	bne.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80067d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067da:	d102      	bne.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80067dc:	4b0b      	ldr	r3, [pc, #44]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80067de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067e0:	e003      	b.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80067e2:	2300      	movs	r3, #0
 80067e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80067e6:	f000 bc38 	b.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80067ea:	f000 bc36 	b.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80067ee:	4b08      	ldr	r3, [pc, #32]	; (8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80067f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067f2:	f000 bc32 	b.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80067f6:	2300      	movs	r3, #0
 80067f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067fa:	f000 bc2e 	b.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80067fe:	bf00      	nop
 8006800:	58024400 	.word	0x58024400
 8006804:	03d09000 	.word	0x03d09000
 8006808:	003d0900 	.word	0x003d0900
 800680c:	00f42400 	.word	0x00f42400
 8006810:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006814:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006818:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800681c:	430b      	orrs	r3, r1
 800681e:	f040 809c 	bne.w	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006822:	4b9e      	ldr	r3, [pc, #632]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006826:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800682a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800682c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006832:	d054      	beq.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800683a:	f200 808b 	bhi.w	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006844:	f000 8083 	beq.w	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800684e:	f200 8081 	bhi.w	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006858:	d02f      	beq.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006860:	d878      	bhi.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006864:	2b00      	cmp	r3, #0
 8006866:	d004      	beq.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800686e:	d012      	beq.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006870:	e070      	b.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006872:	4b8a      	ldr	r3, [pc, #552]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800687a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800687e:	d107      	bne.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006884:	4618      	mov	r0, r3
 8006886:	f000 feaf 	bl	80075e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800688e:	e3e4      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006890:	2300      	movs	r3, #0
 8006892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006894:	e3e1      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006896:	4b81      	ldr	r3, [pc, #516]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800689e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068a2:	d107      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068a4:	f107 0318 	add.w	r3, r7, #24
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fbf5 	bl	8007098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068b2:	e3d2      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068b8:	e3cf      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068ba:	4b78      	ldr	r3, [pc, #480]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068c6:	d107      	bne.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068c8:	f107 030c 	add.w	r3, r7, #12
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 fd37 	bl	8007340 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068d6:	e3c0      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068d8:	2300      	movs	r3, #0
 80068da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068dc:	e3bd      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068de:	4b6f      	ldr	r3, [pc, #444]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068e6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068e8:	4b6c      	ldr	r3, [pc, #432]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0304 	and.w	r3, r3, #4
 80068f0:	2b04      	cmp	r3, #4
 80068f2:	d10c      	bne.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80068f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d109      	bne.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068fa:	4b68      	ldr	r3, [pc, #416]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	08db      	lsrs	r3, r3, #3
 8006900:	f003 0303 	and.w	r3, r3, #3
 8006904:	4a66      	ldr	r2, [pc, #408]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006906:	fa22 f303 	lsr.w	r3, r2, r3
 800690a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800690c:	e01e      	b.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800690e:	4b63      	ldr	r3, [pc, #396]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800691a:	d106      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800691c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006922:	d102      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006924:	4b5f      	ldr	r3, [pc, #380]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006928:	e010      	b.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800692a:	4b5c      	ldr	r3, [pc, #368]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006932:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006936:	d106      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800693e:	d102      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006940:	4b59      	ldr	r3, [pc, #356]	; (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006944:	e002      	b.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006946:	2300      	movs	r3, #0
 8006948:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800694a:	e386      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800694c:	e385      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800694e:	4b57      	ldr	r3, [pc, #348]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006950:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006952:	e382      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006954:	2300      	movs	r3, #0
 8006956:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006958:	e37f      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800695a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800695e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006962:	430b      	orrs	r3, r1
 8006964:	f040 80a7 	bne.w	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006968:	4b4c      	ldr	r3, [pc, #304]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800696a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800696c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006970:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006978:	d055      	beq.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006980:	f200 8096 	bhi.w	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006986:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800698a:	f000 8084 	beq.w	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006994:	f200 808c 	bhi.w	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800699e:	d030      	beq.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80069a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069a6:	f200 8083 	bhi.w	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d004      	beq.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069b6:	d012      	beq.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80069b8:	e07a      	b.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069ba:	4b38      	ldr	r3, [pc, #224]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069c6:	d107      	bne.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 fe0b 	bl	80075e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069d6:	e340      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069d8:	2300      	movs	r3, #0
 80069da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069dc:	e33d      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069de:	4b2f      	ldr	r3, [pc, #188]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069ea:	d107      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069ec:	f107 0318 	add.w	r3, r7, #24
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fb51 	bl	8007098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069fa:	e32e      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a00:	e32b      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a02:	4b26      	ldr	r3, [pc, #152]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a0e:	d107      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a10:	f107 030c 	add.w	r3, r7, #12
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 fc93 	bl	8007340 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a1e:	e31c      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a24:	e319      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a26:	4b1d      	ldr	r3, [pc, #116]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a2e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a30:	4b1a      	ldr	r3, [pc, #104]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b04      	cmp	r3, #4
 8006a3a:	d10c      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d109      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a42:	4b16      	ldr	r3, [pc, #88]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	08db      	lsrs	r3, r3, #3
 8006a48:	f003 0303 	and.w	r3, r3, #3
 8006a4c:	4a14      	ldr	r2, [pc, #80]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a54:	e01e      	b.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a56:	4b11      	ldr	r3, [pc, #68]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a62:	d106      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a6a:	d102      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a6c:	4b0d      	ldr	r3, [pc, #52]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a70:	e010      	b.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a72:	4b0a      	ldr	r3, [pc, #40]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a7e:	d106      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a86:	d102      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a88:	4b07      	ldr	r3, [pc, #28]	; (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a8c:	e002      	b.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006a92:	e2e2      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a94:	e2e1      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a96:	4b05      	ldr	r3, [pc, #20]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006a98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a9a:	e2de      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a9c:	58024400 	.word	0x58024400
 8006aa0:	03d09000 	.word	0x03d09000
 8006aa4:	003d0900 	.word	0x003d0900
 8006aa8:	00f42400 	.word	0x00f42400
 8006aac:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ab4:	e2d1      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006ab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aba:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006abe:	430b      	orrs	r3, r1
 8006ac0:	f040 809c 	bne.w	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006ac4:	4b93      	ldr	r3, [pc, #588]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006acc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ad4:	d054      	beq.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006adc:	f200 808b 	bhi.w	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ae6:	f000 8083 	beq.w	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006af0:	f200 8081 	bhi.w	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006afa:	d02f      	beq.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b02:	d878      	bhi.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d004      	beq.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b10:	d012      	beq.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006b12:	e070      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b14:	4b7f      	ldr	r3, [pc, #508]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b20:	d107      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 fd5e 	bl	80075e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b30:	e293      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b36:	e290      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b38:	4b76      	ldr	r3, [pc, #472]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b44:	d107      	bne.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b46:	f107 0318 	add.w	r3, r7, #24
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 faa4 	bl	8007098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b54:	e281      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b56:	2300      	movs	r3, #0
 8006b58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b5a:	e27e      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b5c:	4b6d      	ldr	r3, [pc, #436]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b68:	d107      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b6a:	f107 030c 	add.w	r3, r7, #12
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 fbe6 	bl	8007340 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b78:	e26f      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b7e:	e26c      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b80:	4b64      	ldr	r3, [pc, #400]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b88:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b8a:	4b62      	ldr	r3, [pc, #392]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0304 	and.w	r3, r3, #4
 8006b92:	2b04      	cmp	r3, #4
 8006b94:	d10c      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d109      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b9c:	4b5d      	ldr	r3, [pc, #372]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	08db      	lsrs	r3, r3, #3
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	4a5c      	ldr	r2, [pc, #368]	; (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bae:	e01e      	b.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bb0:	4b58      	ldr	r3, [pc, #352]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bbc:	d106      	bne.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bc4:	d102      	bne.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006bc6:	4b55      	ldr	r3, [pc, #340]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bca:	e010      	b.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bcc:	4b51      	ldr	r3, [pc, #324]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bd8:	d106      	bne.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006be0:	d102      	bne.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006be2:	4b4f      	ldr	r3, [pc, #316]	; (8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be6:	e002      	b.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006be8:	2300      	movs	r3, #0
 8006bea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006bec:	e235      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bee:	e234      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006bf0:	4b4c      	ldr	r3, [pc, #304]	; (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bf4:	e231      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bfa:	e22e      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c00:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006c04:	430b      	orrs	r3, r1
 8006c06:	f040 808f 	bne.w	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006c0a:	4b42      	ldr	r3, [pc, #264]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c0e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006c12:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c1a:	d06b      	beq.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c22:	d874      	bhi.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c2a:	d056      	beq.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c32:	d86c      	bhi.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c3a:	d03b      	beq.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c42:	d864      	bhi.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c4a:	d021      	beq.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c52:	d85c      	bhi.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d004      	beq.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c60:	d004      	beq.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006c62:	e054      	b.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006c64:	f7fe fa62 	bl	800512c <HAL_RCC_GetPCLK1Freq>
 8006c68:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c6a:	e1f6      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c6c:	4b29      	ldr	r3, [pc, #164]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c78:	d107      	bne.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c7a:	f107 0318 	add.w	r3, r7, #24
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 fa0a 	bl	8007098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c88:	e1e7      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c8e:	e1e4      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c90:	4b20      	ldr	r3, [pc, #128]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c9c:	d107      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c9e:	f107 030c 	add.w	r3, r7, #12
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 fb4c 	bl	8007340 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cac:	e1d5      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cb2:	e1d2      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cb4:	4b17      	ldr	r3, [pc, #92]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d109      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cc0:	4b14      	ldr	r3, [pc, #80]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	08db      	lsrs	r3, r3, #3
 8006cc6:	f003 0303 	and.w	r3, r3, #3
 8006cca:	4a13      	ldr	r2, [pc, #76]	; (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cd2:	e1c2      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cd8:	e1bf      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006cda:	4b0e      	ldr	r3, [pc, #56]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ce6:	d102      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006ce8:	4b0c      	ldr	r3, [pc, #48]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006cea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cec:	e1b5      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cf2:	e1b2      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006cf4:	4b07      	ldr	r3, [pc, #28]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d00:	d102      	bne.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006d02:	4b07      	ldr	r3, [pc, #28]	; (8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006d04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d06:	e1a8      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d0c:	e1a5      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d12:	e1a2      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d14:	58024400 	.word	0x58024400
 8006d18:	03d09000 	.word	0x03d09000
 8006d1c:	003d0900 	.word	0x003d0900
 8006d20:	00f42400 	.word	0x00f42400
 8006d24:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d2c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006d30:	430b      	orrs	r3, r1
 8006d32:	d173      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006d34:	4b9c      	ldr	r3, [pc, #624]	; (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d3c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d44:	d02f      	beq.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d4c:	d863      	bhi.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d004      	beq.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d5a:	d012      	beq.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006d5c:	e05b      	b.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d5e:	4b92      	ldr	r3, [pc, #584]	; (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d6a:	d107      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d6c:	f107 0318 	add.w	r3, r7, #24
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 f991 	bl	8007098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d7a:	e16e      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d80:	e16b      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d82:	4b89      	ldr	r3, [pc, #548]	; (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d8e:	d107      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d90:	f107 030c 	add.w	r3, r7, #12
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 fad3 	bl	8007340 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d9e:	e15c      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006da0:	2300      	movs	r3, #0
 8006da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006da4:	e159      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006da6:	4b80      	ldr	r3, [pc, #512]	; (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006daa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006dae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006db0:	4b7d      	ldr	r3, [pc, #500]	; (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0304 	and.w	r3, r3, #4
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	d10c      	bne.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d109      	bne.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dc2:	4b79      	ldr	r3, [pc, #484]	; (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	08db      	lsrs	r3, r3, #3
 8006dc8:	f003 0303 	and.w	r3, r3, #3
 8006dcc:	4a77      	ldr	r2, [pc, #476]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006dce:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dd4:	e01e      	b.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006dd6:	4b74      	ldr	r3, [pc, #464]	; (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de2:	d106      	bne.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dea:	d102      	bne.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006dec:	4b70      	ldr	r3, [pc, #448]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df0:	e010      	b.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006df2:	4b6d      	ldr	r3, [pc, #436]	; (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dfe:	d106      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e06:	d102      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e08:	4b6a      	ldr	r3, [pc, #424]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e0c:	e002      	b.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006e12:	e122      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e14:	e121      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006e16:	2300      	movs	r3, #0
 8006e18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e1a:	e11e      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e20:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006e24:	430b      	orrs	r3, r1
 8006e26:	d133      	bne.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006e28:	4b5f      	ldr	r3, [pc, #380]	; (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e30:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d004      	beq.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e3e:	d012      	beq.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006e40:	e023      	b.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e42:	4b59      	ldr	r3, [pc, #356]	; (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e4e:	d107      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 fbc7 	bl	80075e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e5e:	e0fc      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e60:	2300      	movs	r3, #0
 8006e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e64:	e0f9      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e66:	4b50      	ldr	r3, [pc, #320]	; (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e72:	d107      	bne.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e74:	f107 0318 	add.w	r3, r7, #24
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 f90d 	bl	8007098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e82:	e0ea      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e84:	2300      	movs	r3, #0
 8006e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e88:	e0e7      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e8e:	e0e4      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e94:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006e98:	430b      	orrs	r3, r1
 8006e9a:	f040 808d 	bne.w	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006e9e:	4b42      	ldr	r3, [pc, #264]	; (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006ea6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006eae:	d06b      	beq.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006eb6:	d874      	bhi.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ebe:	d056      	beq.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec6:	d86c      	bhi.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ece:	d03b      	beq.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ed6:	d864      	bhi.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ede:	d021      	beq.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ee6:	d85c      	bhi.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d004      	beq.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ef4:	d004      	beq.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006ef6:	e054      	b.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006ef8:	f000 f8b8 	bl	800706c <HAL_RCCEx_GetD3PCLK1Freq>
 8006efc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006efe:	e0ac      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f00:	4b29      	ldr	r3, [pc, #164]	; (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f0c:	d107      	bne.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f0e:	f107 0318 	add.w	r3, r7, #24
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 f8c0 	bl	8007098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f1c:	e09d      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f22:	e09a      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f24:	4b20      	ldr	r3, [pc, #128]	; (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f30:	d107      	bne.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f32:	f107 030c 	add.w	r3, r7, #12
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 fa02 	bl	8007340 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f40:	e08b      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f42:	2300      	movs	r3, #0
 8006f44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f46:	e088      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f48:	4b17      	ldr	r3, [pc, #92]	; (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b04      	cmp	r3, #4
 8006f52:	d109      	bne.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f54:	4b14      	ldr	r3, [pc, #80]	; (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	08db      	lsrs	r3, r3, #3
 8006f5a:	f003 0303 	and.w	r3, r3, #3
 8006f5e:	4a13      	ldr	r2, [pc, #76]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006f60:	fa22 f303 	lsr.w	r3, r2, r3
 8006f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f66:	e078      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f6c:	e075      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006f6e:	4b0e      	ldr	r3, [pc, #56]	; (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f7a:	d102      	bne.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006f7c:	4b0c      	ldr	r3, [pc, #48]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f80:	e06b      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f82:	2300      	movs	r3, #0
 8006f84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f86:	e068      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f88:	4b07      	ldr	r3, [pc, #28]	; (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f94:	d102      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006f96:	4b07      	ldr	r3, [pc, #28]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006f98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f9a:	e05e      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fa0:	e05b      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fa6:	e058      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006fa8:	58024400 	.word	0x58024400
 8006fac:	03d09000 	.word	0x03d09000
 8006fb0:	003d0900 	.word	0x003d0900
 8006fb4:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fbc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006fc0:	430b      	orrs	r3, r1
 8006fc2:	d148      	bne.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006fc4:	4b27      	ldr	r3, [pc, #156]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fcc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fd4:	d02a      	beq.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fdc:	d838      	bhi.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d004      	beq.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fea:	d00d      	beq.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006fec:	e030      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006fee:	4b1d      	ldr	r3, [pc, #116]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ffa:	d102      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006ffc:	4b1a      	ldr	r3, [pc, #104]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007000:	e02b      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007006:	e028      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007008:	4b16      	ldr	r3, [pc, #88]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007010:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007014:	d107      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fae4 	bl	80075e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007022:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007024:	e019      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800702a:	e016      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800702c:	4b0d      	ldr	r3, [pc, #52]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007034:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007038:	d107      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800703a:	f107 0318 	add.w	r3, r7, #24
 800703e:	4618      	mov	r0, r3
 8007040:	f000 f82a 	bl	8007098 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007048:	e007      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800704e:	e004      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007050:	2300      	movs	r3, #0
 8007052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007054:	e001      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007056:	2300      	movs	r3, #0
 8007058:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800705a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800705c:	4618      	mov	r0, r3
 800705e:	3740      	adds	r7, #64	; 0x40
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	58024400 	.word	0x58024400
 8007068:	00f42400 	.word	0x00f42400

0800706c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007070:	f7fe f82c 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 8007074:	4602      	mov	r2, r0
 8007076:	4b06      	ldr	r3, [pc, #24]	; (8007090 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	091b      	lsrs	r3, r3, #4
 800707c:	f003 0307 	and.w	r3, r3, #7
 8007080:	4904      	ldr	r1, [pc, #16]	; (8007094 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007082:	5ccb      	ldrb	r3, [r1, r3]
 8007084:	f003 031f 	and.w	r3, r3, #31
 8007088:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800708c:	4618      	mov	r0, r3
 800708e:	bd80      	pop	{r7, pc}
 8007090:	58024400 	.word	0x58024400
 8007094:	0800da5c 	.word	0x0800da5c

08007098 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007098:	b480      	push	{r7}
 800709a:	b089      	sub	sp, #36	; 0x24
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070a0:	4ba1      	ldr	r3, [pc, #644]	; (8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a4:	f003 0303 	and.w	r3, r3, #3
 80070a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80070aa:	4b9f      	ldr	r3, [pc, #636]	; (8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ae:	0b1b      	lsrs	r3, r3, #12
 80070b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80070b6:	4b9c      	ldr	r3, [pc, #624]	; (8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ba:	091b      	lsrs	r3, r3, #4
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80070c2:	4b99      	ldr	r3, [pc, #612]	; (8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c6:	08db      	lsrs	r3, r3, #3
 80070c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	fb02 f303 	mul.w	r3, r2, r3
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f000 8111 	beq.w	8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	f000 8083 	beq.w	80071f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	f200 80a1 	bhi.w	8007238 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d003      	beq.n	8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d056      	beq.n	80071b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007102:	e099      	b.n	8007238 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007104:	4b88      	ldr	r3, [pc, #544]	; (8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0320 	and.w	r3, r3, #32
 800710c:	2b00      	cmp	r3, #0
 800710e:	d02d      	beq.n	800716c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007110:	4b85      	ldr	r3, [pc, #532]	; (8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	08db      	lsrs	r3, r3, #3
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	4a84      	ldr	r2, [pc, #528]	; (800732c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800711c:	fa22 f303 	lsr.w	r3, r2, r3
 8007120:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800713a:	4b7b      	ldr	r3, [pc, #492]	; (8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800713c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007142:	ee07 3a90 	vmov	s15, r3
 8007146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800714a:	ed97 6a03 	vldr	s12, [r7, #12]
 800714e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800715a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800715e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007166:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800716a:	e087      	b.n	800727c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007176:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800717a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800717e:	4b6a      	ldr	r3, [pc, #424]	; (8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007192:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800719a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800719e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ae:	e065      	b.n	800727c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007338 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c2:	4b59      	ldr	r3, [pc, #356]	; (8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071f2:	e043      	b.n	800727c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800733c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007206:	4b48      	ldr	r3, [pc, #288]	; (8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007216:	ed97 6a03 	vldr	s12, [r7, #12]
 800721a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800721e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800722a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007236:	e021      	b.n	800727c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	ee07 3a90 	vmov	s15, r3
 800723e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007242:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007338 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724a:	4b37      	ldr	r3, [pc, #220]	; (8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800724c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007252:	ee07 3a90 	vmov	s15, r3
 8007256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725a:	ed97 6a03 	vldr	s12, [r7, #12]
 800725e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800726e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007276:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800727a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800727c:	4b2a      	ldr	r3, [pc, #168]	; (8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800727e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007280:	0a5b      	lsrs	r3, r3, #9
 8007282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007286:	ee07 3a90 	vmov	s15, r3
 800728a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007292:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007296:	edd7 6a07 	vldr	s13, [r7, #28]
 800729a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800729e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072a2:	ee17 2a90 	vmov	r2, s15
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80072aa:	4b1f      	ldr	r3, [pc, #124]	; (8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ae:	0c1b      	lsrs	r3, r3, #16
 80072b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b4:	ee07 3a90 	vmov	s15, r3
 80072b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80072c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072d0:	ee17 2a90 	vmov	r2, s15
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80072d8:	4b13      	ldr	r3, [pc, #76]	; (8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072dc:	0e1b      	lsrs	r3, r3, #24
 80072de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e2:	ee07 3a90 	vmov	s15, r3
 80072e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80072f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072fe:	ee17 2a90 	vmov	r2, s15
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007306:	e008      	b.n	800731a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	609a      	str	r2, [r3, #8]
}
 800731a:	bf00      	nop
 800731c:	3724      	adds	r7, #36	; 0x24
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	58024400 	.word	0x58024400
 800732c:	03d09000 	.word	0x03d09000
 8007330:	46000000 	.word	0x46000000
 8007334:	4c742400 	.word	0x4c742400
 8007338:	4a742400 	.word	0x4a742400
 800733c:	4b742400 	.word	0x4b742400

08007340 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007340:	b480      	push	{r7}
 8007342:	b089      	sub	sp, #36	; 0x24
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007348:	4ba1      	ldr	r3, [pc, #644]	; (80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800734a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734c:	f003 0303 	and.w	r3, r3, #3
 8007350:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007352:	4b9f      	ldr	r3, [pc, #636]	; (80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007356:	0d1b      	lsrs	r3, r3, #20
 8007358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800735c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800735e:	4b9c      	ldr	r3, [pc, #624]	; (80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007362:	0a1b      	lsrs	r3, r3, #8
 8007364:	f003 0301 	and.w	r3, r3, #1
 8007368:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800736a:	4b99      	ldr	r3, [pc, #612]	; (80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800736c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736e:	08db      	lsrs	r3, r3, #3
 8007370:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	fb02 f303 	mul.w	r3, r2, r3
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007382:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 8111 	beq.w	80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	2b02      	cmp	r3, #2
 8007392:	f000 8083 	beq.w	800749c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	2b02      	cmp	r3, #2
 800739a:	f200 80a1 	bhi.w	80074e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d003      	beq.n	80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d056      	beq.n	8007458 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80073aa:	e099      	b.n	80074e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073ac:	4b88      	ldr	r3, [pc, #544]	; (80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0320 	and.w	r3, r3, #32
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d02d      	beq.n	8007414 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073b8:	4b85      	ldr	r3, [pc, #532]	; (80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	08db      	lsrs	r3, r3, #3
 80073be:	f003 0303 	and.w	r3, r3, #3
 80073c2:	4a84      	ldr	r2, [pc, #528]	; (80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80073c4:	fa22 f303 	lsr.w	r3, r2, r3
 80073c8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	ee07 3a90 	vmov	s15, r3
 80073d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	ee07 3a90 	vmov	s15, r3
 80073da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073e2:	4b7b      	ldr	r3, [pc, #492]	; (80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ea:	ee07 3a90 	vmov	s15, r3
 80073ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800740a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800740e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007412:	e087      	b.n	8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	ee07 3a90 	vmov	s15, r3
 800741a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800741e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007426:	4b6a      	ldr	r3, [pc, #424]	; (80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742e:	ee07 3a90 	vmov	s15, r3
 8007432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007436:	ed97 6a03 	vldr	s12, [r7, #12]
 800743a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800743e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800744a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800744e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007456:	e065      	b.n	8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	ee07 3a90 	vmov	s15, r3
 800745e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007462:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80075e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800746a:	4b59      	ldr	r3, [pc, #356]	; (80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800746c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800747a:	ed97 6a03 	vldr	s12, [r7, #12]
 800747e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800748a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800748e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007496:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800749a:	e043      	b.n	8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	ee07 3a90 	vmov	s15, r3
 80074a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80075e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80074aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ae:	4b48      	ldr	r3, [pc, #288]	; (80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b6:	ee07 3a90 	vmov	s15, r3
 80074ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074be:	ed97 6a03 	vldr	s12, [r7, #12]
 80074c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074de:	e021      	b.n	8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	ee07 3a90 	vmov	s15, r3
 80074e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80075e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f2:	4b37      	ldr	r3, [pc, #220]	; (80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fa:	ee07 3a90 	vmov	s15, r3
 80074fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007502:	ed97 6a03 	vldr	s12, [r7, #12]
 8007506:	eddf 5a34 	vldr	s11, [pc, #208]	; 80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800750a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800750e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800751a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007522:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007524:	4b2a      	ldr	r3, [pc, #168]	; (80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007528:	0a5b      	lsrs	r3, r3, #9
 800752a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800752e:	ee07 3a90 	vmov	s15, r3
 8007532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007536:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800753a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800753e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800754a:	ee17 2a90 	vmov	r2, s15
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007552:	4b1f      	ldr	r3, [pc, #124]	; (80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007556:	0c1b      	lsrs	r3, r3, #16
 8007558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800755c:	ee07 3a90 	vmov	s15, r3
 8007560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007564:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007568:	ee37 7a87 	vadd.f32	s14, s15, s14
 800756c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007578:	ee17 2a90 	vmov	r2, s15
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007580:	4b13      	ldr	r3, [pc, #76]	; (80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007584:	0e1b      	lsrs	r3, r3, #24
 8007586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007592:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007596:	ee37 7a87 	vadd.f32	s14, s15, s14
 800759a:	edd7 6a07 	vldr	s13, [r7, #28]
 800759e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075a6:	ee17 2a90 	vmov	r2, s15
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80075ae:	e008      	b.n	80075c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	609a      	str	r2, [r3, #8]
}
 80075c2:	bf00      	nop
 80075c4:	3724      	adds	r7, #36	; 0x24
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	58024400 	.word	0x58024400
 80075d4:	03d09000 	.word	0x03d09000
 80075d8:	46000000 	.word	0x46000000
 80075dc:	4c742400 	.word	0x4c742400
 80075e0:	4a742400 	.word	0x4a742400
 80075e4:	4b742400 	.word	0x4b742400

080075e8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b089      	sub	sp, #36	; 0x24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075f0:	4ba0      	ldr	r3, [pc, #640]	; (8007874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f4:	f003 0303 	and.w	r3, r3, #3
 80075f8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80075fa:	4b9e      	ldr	r3, [pc, #632]	; (8007874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fe:	091b      	lsrs	r3, r3, #4
 8007600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007604:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007606:	4b9b      	ldr	r3, [pc, #620]	; (8007874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007610:	4b98      	ldr	r3, [pc, #608]	; (8007874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007614:	08db      	lsrs	r3, r3, #3
 8007616:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	fb02 f303 	mul.w	r3, r2, r3
 8007620:	ee07 3a90 	vmov	s15, r3
 8007624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007628:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	2b00      	cmp	r3, #0
 8007630:	f000 8111 	beq.w	8007856 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	2b02      	cmp	r3, #2
 8007638:	f000 8083 	beq.w	8007742 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	2b02      	cmp	r3, #2
 8007640:	f200 80a1 	bhi.w	8007786 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d056      	beq.n	80076fe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007650:	e099      	b.n	8007786 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007652:	4b88      	ldr	r3, [pc, #544]	; (8007874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0320 	and.w	r3, r3, #32
 800765a:	2b00      	cmp	r3, #0
 800765c:	d02d      	beq.n	80076ba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800765e:	4b85      	ldr	r3, [pc, #532]	; (8007874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	08db      	lsrs	r3, r3, #3
 8007664:	f003 0303 	and.w	r3, r3, #3
 8007668:	4a83      	ldr	r2, [pc, #524]	; (8007878 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800766a:	fa22 f303 	lsr.w	r3, r2, r3
 800766e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	ee07 3a90 	vmov	s15, r3
 8007680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007684:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007688:	4b7a      	ldr	r3, [pc, #488]	; (8007874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800768a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007690:	ee07 3a90 	vmov	s15, r3
 8007694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007698:	ed97 6a03 	vldr	s12, [r7, #12]
 800769c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800787c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80076b8:	e087      	b.n	80077ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	ee07 3a90 	vmov	s15, r3
 80076c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007880 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80076c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076cc:	4b69      	ldr	r3, [pc, #420]	; (8007874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d4:	ee07 3a90 	vmov	s15, r3
 80076d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80076e0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800787c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076fc:	e065      	b.n	80077ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	ee07 3a90 	vmov	s15, r3
 8007704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007708:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007884 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800770c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007710:	4b58      	ldr	r3, [pc, #352]	; (8007874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007718:	ee07 3a90 	vmov	s15, r3
 800771c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007720:	ed97 6a03 	vldr	s12, [r7, #12]
 8007724:	eddf 5a55 	vldr	s11, [pc, #340]	; 800787c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007728:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800772c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007730:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007734:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007740:	e043      	b.n	80077ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	ee07 3a90 	vmov	s15, r3
 8007748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007888 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007750:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007754:	4b47      	ldr	r3, [pc, #284]	; (8007874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800775c:	ee07 3a90 	vmov	s15, r3
 8007760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007764:	ed97 6a03 	vldr	s12, [r7, #12]
 8007768:	eddf 5a44 	vldr	s11, [pc, #272]	; 800787c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800776c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007770:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007774:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007778:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800777c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007780:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007784:	e021      	b.n	80077ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	ee07 3a90 	vmov	s15, r3
 800778c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007790:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007880 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007794:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007798:	4b36      	ldr	r3, [pc, #216]	; (8007874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800779a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a0:	ee07 3a90 	vmov	s15, r3
 80077a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ac:	eddf 5a33 	vldr	s11, [pc, #204]	; 800787c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077c8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80077ca:	4b2a      	ldr	r3, [pc, #168]	; (8007874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ce:	0a5b      	lsrs	r3, r3, #9
 80077d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d4:	ee07 3a90 	vmov	s15, r3
 80077d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80077e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077f0:	ee17 2a90 	vmov	r2, s15
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80077f8:	4b1e      	ldr	r3, [pc, #120]	; (8007874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fc:	0c1b      	lsrs	r3, r3, #16
 80077fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007802:	ee07 3a90 	vmov	s15, r3
 8007806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800780a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800780e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007812:	edd7 6a07 	vldr	s13, [r7, #28]
 8007816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800781a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800781e:	ee17 2a90 	vmov	r2, s15
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007826:	4b13      	ldr	r3, [pc, #76]	; (8007874 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782a:	0e1b      	lsrs	r3, r3, #24
 800782c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007830:	ee07 3a90 	vmov	s15, r3
 8007834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007838:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800783c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007840:	edd7 6a07 	vldr	s13, [r7, #28]
 8007844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800784c:	ee17 2a90 	vmov	r2, s15
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007854:	e008      	b.n	8007868 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	609a      	str	r2, [r3, #8]
}
 8007868:	bf00      	nop
 800786a:	3724      	adds	r7, #36	; 0x24
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr
 8007874:	58024400 	.word	0x58024400
 8007878:	03d09000 	.word	0x03d09000
 800787c:	46000000 	.word	0x46000000
 8007880:	4c742400 	.word	0x4c742400
 8007884:	4a742400 	.word	0x4a742400
 8007888:	4b742400 	.word	0x4b742400

0800788c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800789a:	4b53      	ldr	r3, [pc, #332]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 800789c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789e:	f003 0303 	and.w	r3, r3, #3
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d101      	bne.n	80078aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e099      	b.n	80079de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80078aa:	4b4f      	ldr	r3, [pc, #316]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a4e      	ldr	r2, [pc, #312]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 80078b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078b6:	f7fa fbd1 	bl	800205c <HAL_GetTick>
 80078ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078bc:	e008      	b.n	80078d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078be:	f7fa fbcd 	bl	800205c <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d901      	bls.n	80078d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e086      	b.n	80079de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078d0:	4b45      	ldr	r3, [pc, #276]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1f0      	bne.n	80078be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80078dc:	4b42      	ldr	r3, [pc, #264]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 80078de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	031b      	lsls	r3, r3, #12
 80078ea:	493f      	ldr	r1, [pc, #252]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 80078ec:	4313      	orrs	r3, r2
 80078ee:	628b      	str	r3, [r1, #40]	; 0x28
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	3b01      	subs	r3, #1
 80078f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	3b01      	subs	r3, #1
 8007900:	025b      	lsls	r3, r3, #9
 8007902:	b29b      	uxth	r3, r3
 8007904:	431a      	orrs	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	3b01      	subs	r3, #1
 800790c:	041b      	lsls	r3, r3, #16
 800790e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007912:	431a      	orrs	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	3b01      	subs	r3, #1
 800791a:	061b      	lsls	r3, r3, #24
 800791c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007920:	4931      	ldr	r1, [pc, #196]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 8007922:	4313      	orrs	r3, r2
 8007924:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007926:	4b30      	ldr	r3, [pc, #192]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 8007928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	492d      	ldr	r1, [pc, #180]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 8007934:	4313      	orrs	r3, r2
 8007936:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007938:	4b2b      	ldr	r3, [pc, #172]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 800793a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793c:	f023 0220 	bic.w	r2, r3, #32
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	4928      	ldr	r1, [pc, #160]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 8007946:	4313      	orrs	r3, r2
 8007948:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800794a:	4b27      	ldr	r3, [pc, #156]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 800794c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794e:	4a26      	ldr	r2, [pc, #152]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 8007950:	f023 0310 	bic.w	r3, r3, #16
 8007954:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007956:	4b24      	ldr	r3, [pc, #144]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 8007958:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800795a:	4b24      	ldr	r3, [pc, #144]	; (80079ec <RCCEx_PLL2_Config+0x160>)
 800795c:	4013      	ands	r3, r2
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	69d2      	ldr	r2, [r2, #28]
 8007962:	00d2      	lsls	r2, r2, #3
 8007964:	4920      	ldr	r1, [pc, #128]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 8007966:	4313      	orrs	r3, r2
 8007968:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800796a:	4b1f      	ldr	r3, [pc, #124]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 800796c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796e:	4a1e      	ldr	r2, [pc, #120]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 8007970:	f043 0310 	orr.w	r3, r3, #16
 8007974:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d106      	bne.n	800798a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800797c:	4b1a      	ldr	r3, [pc, #104]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 800797e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007980:	4a19      	ldr	r2, [pc, #100]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 8007982:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007986:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007988:	e00f      	b.n	80079aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d106      	bne.n	800799e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007990:	4b15      	ldr	r3, [pc, #84]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 8007992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007994:	4a14      	ldr	r2, [pc, #80]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 8007996:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800799a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800799c:	e005      	b.n	80079aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800799e:	4b12      	ldr	r3, [pc, #72]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 80079a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a2:	4a11      	ldr	r2, [pc, #68]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 80079a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80079aa:	4b0f      	ldr	r3, [pc, #60]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a0e      	ldr	r2, [pc, #56]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 80079b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079b6:	f7fa fb51 	bl	800205c <HAL_GetTick>
 80079ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079bc:	e008      	b.n	80079d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079be:	f7fa fb4d 	bl	800205c <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d901      	bls.n	80079d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e006      	b.n	80079de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079d0:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <RCCEx_PLL2_Config+0x15c>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d0f0      	beq.n	80079be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	58024400 	.word	0x58024400
 80079ec:	ffff0007 	.word	0xffff0007

080079f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079fe:	4b53      	ldr	r3, [pc, #332]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a02:	f003 0303 	and.w	r3, r3, #3
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d101      	bne.n	8007a0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e099      	b.n	8007b42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007a0e:	4b4f      	ldr	r3, [pc, #316]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a4e      	ldr	r2, [pc, #312]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a1a:	f7fa fb1f 	bl	800205c <HAL_GetTick>
 8007a1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a20:	e008      	b.n	8007a34 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a22:	f7fa fb1b 	bl	800205c <HAL_GetTick>
 8007a26:	4602      	mov	r2, r0
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d901      	bls.n	8007a34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a30:	2303      	movs	r3, #3
 8007a32:	e086      	b.n	8007b42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a34:	4b45      	ldr	r3, [pc, #276]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1f0      	bne.n	8007a22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007a40:	4b42      	ldr	r3, [pc, #264]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a44:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	051b      	lsls	r3, r3, #20
 8007a4e:	493f      	ldr	r1, [pc, #252]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007a50:	4313      	orrs	r3, r2
 8007a52:	628b      	str	r3, [r1, #40]	; 0x28
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	3b01      	subs	r3, #1
 8007a64:	025b      	lsls	r3, r3, #9
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	041b      	lsls	r3, r3, #16
 8007a72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007a76:	431a      	orrs	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	061b      	lsls	r3, r3, #24
 8007a80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007a84:	4931      	ldr	r1, [pc, #196]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007a8a:	4b30      	ldr	r3, [pc, #192]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	492d      	ldr	r1, [pc, #180]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007a9c:	4b2b      	ldr	r3, [pc, #172]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	4928      	ldr	r1, [pc, #160]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007aae:	4b27      	ldr	r3, [pc, #156]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab2:	4a26      	ldr	r2, [pc, #152]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007aba:	4b24      	ldr	r3, [pc, #144]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007abe:	4b24      	ldr	r3, [pc, #144]	; (8007b50 <RCCEx_PLL3_Config+0x160>)
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	69d2      	ldr	r2, [r2, #28]
 8007ac6:	00d2      	lsls	r2, r2, #3
 8007ac8:	4920      	ldr	r1, [pc, #128]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007ace:	4b1f      	ldr	r3, [pc, #124]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad2:	4a1e      	ldr	r2, [pc, #120]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d106      	bne.n	8007aee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007ae0:	4b1a      	ldr	r3, [pc, #104]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae4:	4a19      	ldr	r2, [pc, #100]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007ae6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007aea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007aec:	e00f      	b.n	8007b0e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d106      	bne.n	8007b02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007af4:	4b15      	ldr	r3, [pc, #84]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af8:	4a14      	ldr	r2, [pc, #80]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007afa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007afe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b00:	e005      	b.n	8007b0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007b02:	4b12      	ldr	r3, [pc, #72]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b06:	4a11      	ldr	r2, [pc, #68]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007b08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007b0e:	4b0f      	ldr	r3, [pc, #60]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a0e      	ldr	r2, [pc, #56]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b1a:	f7fa fa9f 	bl	800205c <HAL_GetTick>
 8007b1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b20:	e008      	b.n	8007b34 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b22:	f7fa fa9b 	bl	800205c <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d901      	bls.n	8007b34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e006      	b.n	8007b42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b34:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <RCCEx_PLL3_Config+0x15c>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d0f0      	beq.n	8007b22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	58024400 	.word	0x58024400
 8007b50:	ffff0007 	.word	0xffff0007

08007b54 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b08a      	sub	sp, #40	; 0x28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e075      	b.n	8007c52 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d105      	bne.n	8007b7e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f7f9 ffbf 	bl	8001afc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2204      	movs	r2, #4
 8007b82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f868 	bl	8007c5c <HAL_SD_InitCard>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d001      	beq.n	8007b96 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e05d      	b.n	8007c52 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007b96:	f107 0308 	add.w	r3, r7, #8
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 ff77 	bl	8008a90 <HAL_SD_GetCardStatus>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e052      	b.n	8007c52 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007bac:	7e3b      	ldrb	r3, [r7, #24]
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007bb2:	7e7b      	ldrb	r3, [r7, #25]
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d10a      	bne.n	8007bd6 <HAL_SD_Init+0x82>
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d102      	bne.n	8007bcc <HAL_SD_Init+0x78>
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d004      	beq.n	8007bd6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bd2:	659a      	str	r2, [r3, #88]	; 0x58
 8007bd4:	e00b      	b.n	8007bee <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d104      	bne.n	8007be8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007be4:	659a      	str	r2, [r3, #88]	; 0x58
 8007be6:	e002      	b.n	8007bee <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f001 f835 	bl	8008c64 <HAL_SD_ConfigWideBusOperation>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e026      	b.n	8007c52 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007c04:	f7fa fa2a 	bl	800205c <HAL_GetTick>
 8007c08:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007c0a:	e011      	b.n	8007c30 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007c0c:	f7fa fa26 	bl	800205c <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c1a:	d109      	bne.n	8007c30 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c22:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e010      	b.n	8007c52 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f001 f929 	bl	8008e88 <HAL_SD_GetCardState>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b04      	cmp	r3, #4
 8007c3a:	d1e7      	bne.n	8007c0c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3728      	adds	r7, #40	; 0x28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
	...

08007c5c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007c5c:	b590      	push	{r4, r7, lr}
 8007c5e:	b08d      	sub	sp, #52	; 0x34
 8007c60:	af02      	add	r7, sp, #8
 8007c62:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007c64:	2300      	movs	r3, #0
 8007c66:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007c70:	2300      	movs	r3, #0
 8007c72:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007c74:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007c78:	f04f 0100 	mov.w	r1, #0
 8007c7c:	f7fe fc76 	bl	800656c <HAL_RCCEx_GetPeriphCLKFreq>
 8007c80:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d109      	bne.n	8007c9c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007c96:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e070      	b.n	8007d7e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	0a1b      	lsrs	r3, r3, #8
 8007ca0:	4a39      	ldr	r2, [pc, #228]	; (8007d88 <HAL_SD_InitCard+0x12c>)
 8007ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca6:	091b      	lsrs	r3, r3, #4
 8007ca8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681c      	ldr	r4, [r3, #0]
 8007cae:	466a      	mov	r2, sp
 8007cb0:	f107 0318 	add.w	r3, r7, #24
 8007cb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007cb8:	e882 0003 	stmia.w	r2, {r0, r1}
 8007cbc:	f107 030c 	add.w	r3, r7, #12
 8007cc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f001 fd72 	bl	80097ac <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f001 fdb5 	bl	800983c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d005      	beq.n	8007ce4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	005b      	lsls	r3, r3, #1
 8007cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d007      	beq.n	8007cfa <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007cea:	4a28      	ldr	r2, [pc, #160]	; (8007d8c <HAL_SD_InitCard+0x130>)
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fa f9bd 	bl	8002074 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f001 f9b2 	bl	8009064 <SD_PowerON>
 8007d00:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00b      	beq.n	8007d20 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	431a      	orrs	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e02e      	b.n	8007d7e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f001 f8d1 	bl	8008ec8 <SD_InitCard>
 8007d26:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00b      	beq.n	8007d46 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	431a      	orrs	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e01b      	b.n	8007d7e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f001 fe0a 	bl	8009968 <SDMMC_CmdBlockLength>
 8007d54:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00f      	beq.n	8007d7c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a0b      	ldr	r2, [pc, #44]	; (8007d90 <HAL_SD_InitCard+0x134>)
 8007d62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d68:	6a3b      	ldr	r3, [r7, #32]
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e000      	b.n	8007d7e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	372c      	adds	r7, #44	; 0x2c
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd90      	pop	{r4, r7, pc}
 8007d86:	bf00      	nop
 8007d88:	014f8b59 	.word	0x014f8b59
 8007d8c:	00012110 	.word	0x00012110
 8007d90:	1fe00fff 	.word	0x1fe00fff

08007d94 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b092      	sub	sp, #72	; 0x48
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
 8007da0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007da2:	f7fa f95b 	bl	800205c <HAL_GetTick>
 8007da6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d107      	bne.n	8007dc6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e167      	b.n	8008096 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	f040 815a 	bne.w	8008088 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007dda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	441a      	add	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d907      	bls.n	8007df8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e14e      	b.n	8008096 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2203      	movs	r2, #3
 8007dfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2200      	movs	r2, #0
 8007e06:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d002      	beq.n	8007e16 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e12:	025b      	lsls	r3, r3, #9
 8007e14:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e1a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	025b      	lsls	r3, r3, #9
 8007e20:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007e22:	2390      	movs	r3, #144	; 0x90
 8007e24:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007e26:	2302      	movs	r3, #2
 8007e28:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f107 0214 	add.w	r2, r7, #20
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f001 fd67 	bl	8009910 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68da      	ldr	r2, [r3, #12]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e50:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d90a      	bls.n	8007e6e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e64:	4618      	mov	r0, r3
 8007e66:	f001 fdc5 	bl	80099f4 <SDMMC_CmdReadMultiBlock>
 8007e6a:	6478      	str	r0, [r7, #68]	; 0x44
 8007e6c:	e009      	b.n	8007e82 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2201      	movs	r2, #1
 8007e72:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f001 fd97 	bl	80099ae <SDMMC_CmdReadSingleBlock>
 8007e80:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d012      	beq.n	8007eae <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a84      	ldr	r2, [pc, #528]	; (80080a0 <HAL_SD_ReadBlocks+0x30c>)
 8007e8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e96:	431a      	orrs	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e0f3      	b.n	8008096 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007eb2:	e058      	b.n	8007f66 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d033      	beq.n	8007f2a <HAL_SD_ReadBlocks+0x196>
 8007ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec4:	2b1f      	cmp	r3, #31
 8007ec6:	d930      	bls.n	8007f2a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8007ec8:	2300      	movs	r3, #0
 8007eca:	643b      	str	r3, [r7, #64]	; 0x40
 8007ecc:	e027      	b.n	8007f1e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f001 fc94 	bl	8009800 <SDMMC_ReadFIFO>
 8007ed8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007edc:	b2da      	uxtb	r2, r3
 8007ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eea:	0a1b      	lsrs	r3, r3, #8
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efa:	0c1b      	lsrs	r3, r3, #16
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f00:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f04:	3301      	adds	r3, #1
 8007f06:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0a:	0e1b      	lsrs	r3, r3, #24
 8007f0c:	b2da      	uxtb	r2, r3
 8007f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f14:	3301      	adds	r3, #1
 8007f16:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8007f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	643b      	str	r3, [r7, #64]	; 0x40
 8007f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f20:	2b07      	cmp	r3, #7
 8007f22:	d9d4      	bls.n	8007ece <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f26:	3b20      	subs	r3, #32
 8007f28:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007f2a:	f7fa f897 	bl	800205c <HAL_GetTick>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d902      	bls.n	8007f40 <HAL_SD_ReadBlocks+0x1ac>
 8007f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d112      	bne.n	8007f66 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a56      	ldr	r2, [pc, #344]	; (80080a0 <HAL_SD_ReadBlocks+0x30c>)
 8007f46:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8007f62:	2303      	movs	r3, #3
 8007f64:	e097      	b.n	8008096 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f6c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d09f      	beq.n	8007eb4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68da      	ldr	r2, [r3, #12]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f82:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d022      	beq.n	8007fd8 <HAL_SD_ReadBlocks+0x244>
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d91f      	bls.n	8007fd8 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9c:	2b03      	cmp	r3, #3
 8007f9e:	d01b      	beq.n	8007fd8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f001 fd8f 	bl	8009ac8 <SDMMC_CmdStopTransfer>
 8007faa:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8007fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d012      	beq.n	8007fd8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a3a      	ldr	r2, [pc, #232]	; (80080a0 <HAL_SD_ReadBlocks+0x30c>)
 8007fb8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e05e      	b.n	8008096 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fde:	f003 0308 	and.w	r3, r3, #8
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d012      	beq.n	800800c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a2d      	ldr	r2, [pc, #180]	; (80080a0 <HAL_SD_ReadBlocks+0x30c>)
 8007fec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff2:	f043 0208 	orr.w	r2, r3, #8
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e044      	b.n	8008096 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d012      	beq.n	8008040 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a20      	ldr	r2, [pc, #128]	; (80080a0 <HAL_SD_ReadBlocks+0x30c>)
 8008020:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008026:	f043 0202 	orr.w	r2, r3, #2
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e02a      	b.n	8008096 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008046:	f003 0320 	and.w	r3, r3, #32
 800804a:	2b00      	cmp	r3, #0
 800804c:	d012      	beq.n	8008074 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a13      	ldr	r2, [pc, #76]	; (80080a0 <HAL_SD_ReadBlocks+0x30c>)
 8008054:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800805a:	f043 0220 	orr.w	r2, r3, #32
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e010      	b.n	8008096 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a0a      	ldr	r2, [pc, #40]	; (80080a4 <HAL_SD_ReadBlocks+0x310>)
 800807a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	e006      	b.n	8008096 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800808c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
  }
}
 8008096:	4618      	mov	r0, r3
 8008098:	3748      	adds	r7, #72	; 0x48
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	1fe00fff 	.word	0x1fe00fff
 80080a4:	18000f3a 	.word	0x18000f3a

080080a8 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b092      	sub	sp, #72	; 0x48
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80080b6:	f7f9 ffd1 	bl	800205c <HAL_GetTick>
 80080ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d107      	bne.n	80080da <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e16b      	b.n	80083b2 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	f040 815e 	bne.w	80083a4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80080ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	441a      	add	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d907      	bls.n	800810c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008100:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e152      	b.n	80083b2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2203      	movs	r2, #3
 8008110:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2200      	movs	r2, #0
 800811a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008120:	2b01      	cmp	r3, #1
 8008122:	d002      	beq.n	800812a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008126:	025b      	lsls	r3, r3, #9
 8008128:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800812a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800812e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	025b      	lsls	r3, r3, #9
 8008134:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008136:	2390      	movs	r3, #144	; 0x90
 8008138:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800813a:	2300      	movs	r3, #0
 800813c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800813e:	2300      	movs	r3, #0
 8008140:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008142:	2300      	movs	r3, #0
 8008144:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f107 0218 	add.w	r2, r7, #24
 800814e:	4611      	mov	r1, r2
 8008150:	4618      	mov	r0, r3
 8008152:	f001 fbdd 	bl	8009910 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68da      	ldr	r2, [r3, #12]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008164:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d90a      	bls.n	8008182 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2220      	movs	r2, #32
 8008170:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008178:	4618      	mov	r0, r3
 800817a:	f001 fc81 	bl	8009a80 <SDMMC_CmdWriteMultiBlock>
 800817e:	6478      	str	r0, [r7, #68]	; 0x44
 8008180:	e009      	b.n	8008196 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2210      	movs	r2, #16
 8008186:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800818e:	4618      	mov	r0, r3
 8008190:	f001 fc53 	bl	8009a3a <SDMMC_CmdWriteSingleBlock>
 8008194:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008198:	2b00      	cmp	r3, #0
 800819a:	d012      	beq.n	80081c2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a86      	ldr	r2, [pc, #536]	; (80083bc <HAL_SD_WriteBlocks+0x314>)
 80081a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081aa:	431a      	orrs	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e0f7      	b.n	80083b2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80081c6:	e05c      	b.n	8008282 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d037      	beq.n	8008246 <HAL_SD_WriteBlocks+0x19e>
 80081d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d8:	2b1f      	cmp	r3, #31
 80081da:	d934      	bls.n	8008246 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 80081dc:	2300      	movs	r3, #0
 80081de:	643b      	str	r3, [r7, #64]	; 0x40
 80081e0:	e02b      	b.n	800823a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80081e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80081e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ea:	3301      	adds	r3, #1
 80081ec:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80081ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	021a      	lsls	r2, r3, #8
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80081fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081fc:	3301      	adds	r3, #1
 80081fe:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	041a      	lsls	r2, r3, #16
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	4313      	orrs	r3, r2
 800820a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800820c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820e:	3301      	adds	r3, #1
 8008210:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	061a      	lsls	r2, r3, #24
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	4313      	orrs	r3, r2
 800821c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800821e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008220:	3301      	adds	r3, #1
 8008222:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f107 0214 	add.w	r2, r7, #20
 800822c:	4611      	mov	r1, r2
 800822e:	4618      	mov	r0, r3
 8008230:	f001 faf3 	bl	800981a <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8008234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008236:	3301      	adds	r3, #1
 8008238:	643b      	str	r3, [r7, #64]	; 0x40
 800823a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800823c:	2b07      	cmp	r3, #7
 800823e:	d9d0      	bls.n	80081e2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008242:	3b20      	subs	r3, #32
 8008244:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008246:	f7f9 ff09 	bl	800205c <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008252:	429a      	cmp	r2, r3
 8008254:	d902      	bls.n	800825c <HAL_SD_WriteBlocks+0x1b4>
 8008256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008258:	2b00      	cmp	r3, #0
 800825a:	d112      	bne.n	8008282 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a56      	ldr	r2, [pc, #344]	; (80083bc <HAL_SD_WriteBlocks+0x314>)
 8008262:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800826a:	431a      	orrs	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e097      	b.n	80083b2 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008288:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800828c:	2b00      	cmp	r3, #0
 800828e:	d09b      	beq.n	80081c8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68da      	ldr	r2, [r3, #12]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800829e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d022      	beq.n	80082f4 <HAL_SD_WriteBlocks+0x24c>
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d91f      	bls.n	80082f4 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b8:	2b03      	cmp	r3, #3
 80082ba:	d01b      	beq.n	80082f4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4618      	mov	r0, r3
 80082c2:	f001 fc01 	bl	8009ac8 <SDMMC_CmdStopTransfer>
 80082c6:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80082c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d012      	beq.n	80082f4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a3a      	ldr	r2, [pc, #232]	; (80083bc <HAL_SD_WriteBlocks+0x314>)
 80082d4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082dc:	431a      	orrs	r2, r3
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e05e      	b.n	80083b2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082fa:	f003 0308 	and.w	r3, r3, #8
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d012      	beq.n	8008328 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a2d      	ldr	r2, [pc, #180]	; (80083bc <HAL_SD_WriteBlocks+0x314>)
 8008308:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800830e:	f043 0208 	orr.w	r2, r3, #8
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e044      	b.n	80083b2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800832e:	f003 0302 	and.w	r3, r3, #2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d012      	beq.n	800835c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a20      	ldr	r2, [pc, #128]	; (80083bc <HAL_SD_WriteBlocks+0x314>)
 800833c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008342:	f043 0202 	orr.w	r2, r3, #2
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e02a      	b.n	80083b2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008362:	f003 0310 	and.w	r3, r3, #16
 8008366:	2b00      	cmp	r3, #0
 8008368:	d012      	beq.n	8008390 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a13      	ldr	r2, [pc, #76]	; (80083bc <HAL_SD_WriteBlocks+0x314>)
 8008370:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008376:	f043 0210 	orr.w	r2, r3, #16
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e010      	b.n	80083b2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a0a      	ldr	r2, [pc, #40]	; (80083c0 <HAL_SD_WriteBlocks+0x318>)
 8008396:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 80083a0:	2300      	movs	r3, #0
 80083a2:	e006      	b.n	80083b2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
  }
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3748      	adds	r7, #72	; 0x48
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	1fe00fff 	.word	0x1fe00fff
 80083c0:	18000f3a 	.word	0x18000f3a

080083c4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d008      	beq.n	80083f2 <HAL_SD_IRQHandler+0x2e>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f003 0308 	and.w	r3, r3, #8
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f001 f926 	bl	800963c <SD_Read_IT>
 80083f0:	e19a      	b.n	8008728 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f000 80ac 	beq.w	800855a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f44f 7280 	mov.w	r2, #256	; 0x100
 800840a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	4b59      	ldr	r3, [pc, #356]	; (800857c <HAL_SD_IRQHandler+0x1b8>)
 8008418:	400b      	ands	r3, r1
 800841a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800842a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68da      	ldr	r2, [r3, #12]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800843a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f003 0308 	and.w	r3, r3, #8
 8008442:	2b00      	cmp	r3, #0
 8008444:	d038      	beq.n	80084b8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f003 0302 	and.w	r3, r3, #2
 800844c:	2b00      	cmp	r3, #0
 800844e:	d104      	bne.n	800845a <HAL_SD_IRQHandler+0x96>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f003 0320 	and.w	r3, r3, #32
 8008456:	2b00      	cmp	r3, #0
 8008458:	d011      	beq.n	800847e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4618      	mov	r0, r3
 8008460:	f001 fb32 	bl	8009ac8 <SDMMC_CmdStopTransfer>
 8008464:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d008      	beq.n	800847e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	431a      	orrs	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f95b 	bl	8008734 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a3f      	ldr	r2, [pc, #252]	; (8008580 <HAL_SD_IRQHandler+0x1bc>)
 8008484:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	2b00      	cmp	r3, #0
 800849c:	d104      	bne.n	80084a8 <HAL_SD_IRQHandler+0xe4>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f003 0302 	and.w	r3, r3, #2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f001 ffed 	bl	800a488 <HAL_SD_RxCpltCallback>
 80084ae:	e13b      	b.n	8008728 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f001 ffdf 	bl	800a474 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80084b6:	e137      	b.n	8008728 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 8132 	beq.w	8008728 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2200      	movs	r2, #0
 80084ca:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2200      	movs	r2, #0
 80084d2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2200      	movs	r2, #0
 80084da:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f003 0302 	and.w	r3, r3, #2
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d104      	bne.n	80084f0 <HAL_SD_IRQHandler+0x12c>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f003 0320 	and.w	r3, r3, #32
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d011      	beq.n	8008514 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f001 fae7 	bl	8009ac8 <SDMMC_CmdStopTransfer>
 80084fa:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d008      	beq.n	8008514 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	431a      	orrs	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f910 	bl	8008734 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f003 0310 	and.w	r3, r3, #16
 8008528:	2b00      	cmp	r3, #0
 800852a:	d104      	bne.n	8008536 <HAL_SD_IRQHandler+0x172>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f003 0320 	and.w	r3, r3, #32
 8008532:	2b00      	cmp	r3, #0
 8008534:	d002      	beq.n	800853c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f001 ff9c 	bl	800a474 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	2b00      	cmp	r3, #0
 8008544:	d105      	bne.n	8008552 <HAL_SD_IRQHandler+0x18e>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f003 0302 	and.w	r3, r3, #2
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 80eb 	beq.w	8008728 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f001 ff98 	bl	800a488 <HAL_SD_RxCpltCallback>
}
 8008558:	e0e6      	b.n	8008728 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00d      	beq.n	8008584 <HAL_SD_IRQHandler+0x1c0>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f003 0308 	and.w	r3, r3, #8
 800856e:	2b00      	cmp	r3, #0
 8008570:	d008      	beq.n	8008584 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f001 f8a8 	bl	80096c8 <SD_Write_IT>
 8008578:	e0d6      	b.n	8008728 <HAL_SD_IRQHandler+0x364>
 800857a:	bf00      	nop
 800857c:	ffff3ec5 	.word	0xffff3ec5
 8008580:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800858a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800858e:	2b00      	cmp	r3, #0
 8008590:	f000 809d 	beq.w	80086ce <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800859a:	f003 0302 	and.w	r3, r3, #2
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d005      	beq.n	80085ae <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a6:	f043 0202 	orr.w	r2, r3, #2
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b4:	f003 0308 	and.w	r3, r3, #8
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d005      	beq.n	80085c8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c0:	f043 0208 	orr.w	r2, r3, #8
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ce:	f003 0320 	and.w	r3, r3, #32
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d005      	beq.n	80085e2 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085da:	f043 0220 	orr.w	r2, r3, #32
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e8:	f003 0310 	and.w	r3, r3, #16
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d005      	beq.n	80085fc <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f4:	f043 0210 	orr.w	r2, r3, #16
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a4b      	ldr	r2, [pc, #300]	; (8008730 <HAL_SD_IRQHandler+0x36c>)
 8008602:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008612:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68da      	ldr	r2, [r3, #12]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008622:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008632:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68da      	ldr	r2, [r3, #12]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008642:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4618      	mov	r0, r3
 800864a:	f001 fa3d 	bl	8009ac8 <SDMMC_CmdStopTransfer>
 800864e:	4602      	mov	r2, r0
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008654:	431a      	orrs	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68da      	ldr	r2, [r3, #12]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008668:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008672:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f003 0308 	and.w	r3, r3, #8
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00a      	beq.n	8008694 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f851 	bl	8008734 <HAL_SD_ErrorCallback>
}
 8008692:	e049      	b.n	8008728 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800869a:	2b00      	cmp	r3, #0
 800869c:	d044      	beq.n	8008728 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d040      	beq.n	8008728 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80086b4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2200      	movs	r2, #0
 80086bc:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f834 	bl	8008734 <HAL_SD_ErrorCallback>
}
 80086cc:	e02c      	b.n	8008728 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d025      	beq.n	8008728 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e4:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086ec:	f003 0304 	and.w	r3, r3, #4
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10c      	bne.n	800870e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f003 0320 	and.w	r3, r3, #32
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f001 f84a 	bl	8009798 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8008704:	e010      	b.n	8008728 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f001 f832 	bl	8009770 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800870c:	e00c      	b.n	8008728 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f003 0320 	and.w	r3, r3, #32
 8008714:	2b00      	cmp	r3, #0
 8008716:	d003      	beq.n	8008720 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f001 f833 	bl	8009784 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800871e:	e003      	b.n	8008728 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f001 f81b 	bl	800975c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8008726:	e7ff      	b.n	8008728 <HAL_SD_IRQHandler+0x364>
 8008728:	bf00      	nop
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	18000f3a 	.word	0x18000f3a

08008734 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008756:	0f9b      	lsrs	r3, r3, #30
 8008758:	b2da      	uxtb	r2, r3
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008762:	0e9b      	lsrs	r3, r3, #26
 8008764:	b2db      	uxtb	r3, r3
 8008766:	f003 030f 	and.w	r3, r3, #15
 800876a:	b2da      	uxtb	r2, r3
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008774:	0e1b      	lsrs	r3, r3, #24
 8008776:	b2db      	uxtb	r3, r3
 8008778:	f003 0303 	and.w	r3, r3, #3
 800877c:	b2da      	uxtb	r2, r3
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008786:	0c1b      	lsrs	r3, r3, #16
 8008788:	b2da      	uxtb	r2, r3
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008792:	0a1b      	lsrs	r3, r3, #8
 8008794:	b2da      	uxtb	r2, r3
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087a8:	0d1b      	lsrs	r3, r3, #20
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087b4:	0c1b      	lsrs	r3, r3, #16
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	f003 030f 	and.w	r3, r3, #15
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087c6:	0bdb      	lsrs	r3, r3, #15
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	b2da      	uxtb	r2, r3
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087d8:	0b9b      	lsrs	r3, r3, #14
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	f003 0301 	and.w	r3, r3, #1
 80087e0:	b2da      	uxtb	r2, r3
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087ea:	0b5b      	lsrs	r3, r3, #13
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	f003 0301 	and.w	r3, r3, #1
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087fc:	0b1b      	lsrs	r3, r3, #12
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	f003 0301 	and.w	r3, r3, #1
 8008804:	b2da      	uxtb	r2, r3
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2200      	movs	r2, #0
 800880e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008814:	2b00      	cmp	r3, #0
 8008816:	d163      	bne.n	80088e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800881c:	009a      	lsls	r2, r3, #2
 800881e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008822:	4013      	ands	r3, r2
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008828:	0f92      	lsrs	r2, r2, #30
 800882a:	431a      	orrs	r2, r3
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008834:	0edb      	lsrs	r3, r3, #27
 8008836:	b2db      	uxtb	r3, r3
 8008838:	f003 0307 	and.w	r3, r3, #7
 800883c:	b2da      	uxtb	r2, r3
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008846:	0e1b      	lsrs	r3, r3, #24
 8008848:	b2db      	uxtb	r3, r3
 800884a:	f003 0307 	and.w	r3, r3, #7
 800884e:	b2da      	uxtb	r2, r3
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008858:	0d5b      	lsrs	r3, r3, #21
 800885a:	b2db      	uxtb	r3, r3
 800885c:	f003 0307 	and.w	r3, r3, #7
 8008860:	b2da      	uxtb	r2, r3
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800886a:	0c9b      	lsrs	r3, r3, #18
 800886c:	b2db      	uxtb	r3, r3
 800886e:	f003 0307 	and.w	r3, r3, #7
 8008872:	b2da      	uxtb	r2, r3
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800887c:	0bdb      	lsrs	r3, r3, #15
 800887e:	b2db      	uxtb	r3, r3
 8008880:	f003 0307 	and.w	r3, r3, #7
 8008884:	b2da      	uxtb	r2, r3
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	1c5a      	adds	r2, r3, #1
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	7e1b      	ldrb	r3, [r3, #24]
 8008898:	b2db      	uxtb	r3, r3
 800889a:	f003 0307 	and.w	r3, r3, #7
 800889e:	3302      	adds	r3, #2
 80088a0:	2201      	movs	r2, #1
 80088a2:	fa02 f303 	lsl.w	r3, r2, r3
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80088aa:	fb03 f202 	mul.w	r2, r3, r2
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	7a1b      	ldrb	r3, [r3, #8]
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	f003 030f 	and.w	r3, r3, #15
 80088bc:	2201      	movs	r2, #1
 80088be:	409a      	lsls	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80088cc:	0a52      	lsrs	r2, r2, #9
 80088ce:	fb03 f202 	mul.w	r2, r3, r2
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088dc:	655a      	str	r2, [r3, #84]	; 0x54
 80088de:	e031      	b.n	8008944 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d11d      	bne.n	8008924 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ec:	041b      	lsls	r3, r3, #16
 80088ee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088f6:	0c1b      	lsrs	r3, r3, #16
 80088f8:	431a      	orrs	r2, r3
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	3301      	adds	r3, #1
 8008904:	029a      	lsls	r2, r3, #10
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008918:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	655a      	str	r2, [r3, #84]	; 0x54
 8008922:	e00f      	b.n	8008944 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a58      	ldr	r2, [pc, #352]	; (8008a8c <HAL_SD_GetCardCSD+0x344>)
 800892a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008930:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e09d      	b.n	8008a80 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008948:	0b9b      	lsrs	r3, r3, #14
 800894a:	b2db      	uxtb	r3, r3
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	b2da      	uxtb	r2, r3
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800895a:	09db      	lsrs	r3, r3, #7
 800895c:	b2db      	uxtb	r3, r3
 800895e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008962:	b2da      	uxtb	r2, r3
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800896c:	b2db      	uxtb	r3, r3
 800896e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008972:	b2da      	uxtb	r2, r3
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800897c:	0fdb      	lsrs	r3, r3, #31
 800897e:	b2da      	uxtb	r2, r3
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008988:	0f5b      	lsrs	r3, r3, #29
 800898a:	b2db      	uxtb	r3, r3
 800898c:	f003 0303 	and.w	r3, r3, #3
 8008990:	b2da      	uxtb	r2, r3
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800899a:	0e9b      	lsrs	r3, r3, #26
 800899c:	b2db      	uxtb	r3, r3
 800899e:	f003 0307 	and.w	r3, r3, #7
 80089a2:	b2da      	uxtb	r2, r3
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089ac:	0d9b      	lsrs	r3, r3, #22
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	f003 030f 	and.w	r3, r3, #15
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089be:	0d5b      	lsrs	r3, r3, #21
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089da:	0c1b      	lsrs	r3, r3, #16
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	f003 0301 	and.w	r3, r3, #1
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089ee:	0bdb      	lsrs	r3, r3, #15
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a02:	0b9b      	lsrs	r3, r3, #14
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	f003 0301 	and.w	r3, r3, #1
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a16:	0b5b      	lsrs	r3, r3, #13
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a2a:	0b1b      	lsrs	r3, r3, #12
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	b2da      	uxtb	r2, r3
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a3e:	0a9b      	lsrs	r3, r3, #10
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	f003 0303 	and.w	r3, r3, #3
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a52:	0a1b      	lsrs	r3, r3, #8
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	f003 0303 	and.w	r3, r3, #3
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a66:	085b      	lsrs	r3, r3, #1
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	1fe00fff 	.word	0x1fe00fff

08008a90 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b094      	sub	sp, #80	; 0x50
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b03      	cmp	r3, #3
 8008aaa:	d101      	bne.n	8008ab0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e0a7      	b.n	8008c00 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008ab0:	f107 0308 	add.w	r3, r7, #8
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fb62 	bl	8009180 <SD_SendSDStatus>
 8008abc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d011      	beq.n	8008ae8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a4f      	ldr	r2, [pc, #316]	; (8008c08 <HAL_SD_GetCardStatus+0x178>)
 8008aca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008ae6:	e070      	b.n	8008bca <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	099b      	lsrs	r3, r3, #6
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	f003 0303 	and.w	r3, r3, #3
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	095b      	lsrs	r3, r3, #5
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	f003 0301 	and.w	r3, r3, #1
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	0a1b      	lsrs	r3, r3, #8
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	0e1b      	lsrs	r3, r3, #24
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	061a      	lsls	r2, r3, #24
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	021b      	lsls	r3, r3, #8
 8008b2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b2e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	0a1b      	lsrs	r3, r3, #8
 8008b34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008b38:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	0e1b      	lsrs	r3, r3, #24
 8008b3e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	0a1b      	lsrs	r3, r3, #8
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	0d1b      	lsrs	r3, r3, #20
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	f003 030f 	and.w	r3, r3, #15
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	0c1b      	lsrs	r3, r3, #16
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	0a9b      	lsrs	r3, r3, #10
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	0a1b      	lsrs	r3, r3, #8
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	f003 0303 	and.w	r3, r3, #3
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	091b      	lsrs	r3, r3, #4
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	f003 030f 	and.w	r3, r3, #15
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	f003 030f 	and.w	r3, r3, #15
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	0e1b      	lsrs	r3, r3, #24
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 fec8 	bl	8009968 <SDMMC_CmdBlockLength>
 8008bd8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00d      	beq.n	8008bfc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a08      	ldr	r2, [pc, #32]	; (8008c08 <HAL_SD_GetCardStatus+0x178>)
 8008be6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bec:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8008bfc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3750      	adds	r7, #80	; 0x50
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	1fe00fff 	.word	0x1fe00fff

08008c0c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008c64:	b590      	push	{r4, r7, lr}
 8008c66:	b08d      	sub	sp, #52	; 0x34
 8008c68:	af02      	add	r7, sp, #8
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2203      	movs	r2, #3
 8008c78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c80:	2b03      	cmp	r3, #3
 8008c82:	d02e      	beq.n	8008ce2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c8a:	d106      	bne.n	8008c9a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	635a      	str	r2, [r3, #52]	; 0x34
 8008c98:	e029      	b.n	8008cee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ca0:	d10a      	bne.n	8008cb8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fb64 	bl	8009370 <SD_WideBus_Enable>
 8008ca8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cae:	6a3b      	ldr	r3, [r7, #32]
 8008cb0:	431a      	orrs	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	635a      	str	r2, [r3, #52]	; 0x34
 8008cb6:	e01a      	b.n	8008cee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10a      	bne.n	8008cd4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fba1 	bl	8009406 <SD_WideBus_Disable>
 8008cc4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cca:	6a3b      	ldr	r3, [r7, #32]
 8008ccc:	431a      	orrs	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	635a      	str	r2, [r3, #52]	; 0x34
 8008cd2:	e00c      	b.n	8008cee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	635a      	str	r2, [r3, #52]	; 0x34
 8008ce0:	e005      	b.n	8008cee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d007      	beq.n	8008d06 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a5f      	ldr	r2, [pc, #380]	; (8008e78 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008cfc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d04:	e096      	b.n	8008e34 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008d06:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008d0a:	f04f 0100 	mov.w	r1, #0
 8008d0e:	f7fd fc2d 	bl	800656c <HAL_RCCEx_GetPeriphCLKFreq>
 8008d12:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f000 8083 	beq.w	8008e22 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	695a      	ldr	r2, [r3, #20]
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	4950      	ldr	r1, [pc, #320]	; (8008e7c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008d3a:	fba1 1303 	umull	r1, r3, r1, r3
 8008d3e:	0e1b      	lsrs	r3, r3, #24
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d303      	bcc.n	8008d4c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	61bb      	str	r3, [r7, #24]
 8008d4a:	e05a      	b.n	8008e02 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d54:	d103      	bne.n	8008d5e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	61bb      	str	r3, [r7, #24]
 8008d5c:	e051      	b.n	8008e02 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d66:	d126      	bne.n	8008db6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	695b      	ldr	r3, [r3, #20]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10e      	bne.n	8008d8e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	4a43      	ldr	r2, [pc, #268]	; (8008e80 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d906      	bls.n	8008d86 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	4a40      	ldr	r2, [pc, #256]	; (8008e7c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d80:	0e5b      	lsrs	r3, r3, #25
 8008d82:	61bb      	str	r3, [r7, #24]
 8008d84:	e03d      	b.n	8008e02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	61bb      	str	r3, [r7, #24]
 8008d8c:	e039      	b.n	8008e02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	005b      	lsls	r3, r3, #1
 8008d94:	69fa      	ldr	r2, [r7, #28]
 8008d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d9a:	4a39      	ldr	r2, [pc, #228]	; (8008e80 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d906      	bls.n	8008dae <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	4a36      	ldr	r2, [pc, #216]	; (8008e7c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008da4:	fba2 2303 	umull	r2, r3, r2, r3
 8008da8:	0e5b      	lsrs	r3, r3, #25
 8008daa:	61bb      	str	r3, [r7, #24]
 8008dac:	e029      	b.n	8008e02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	61bb      	str	r3, [r7, #24]
 8008db4:	e025      	b.n	8008e02 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10e      	bne.n	8008ddc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	4a30      	ldr	r2, [pc, #192]	; (8008e84 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d906      	bls.n	8008dd4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	4a2c      	ldr	r2, [pc, #176]	; (8008e7c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008dca:	fba2 2303 	umull	r2, r3, r2, r3
 8008dce:	0e1b      	lsrs	r3, r3, #24
 8008dd0:	61bb      	str	r3, [r7, #24]
 8008dd2:	e016      	b.n	8008e02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	61bb      	str	r3, [r7, #24]
 8008dda:	e012      	b.n	8008e02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	695b      	ldr	r3, [r3, #20]
 8008de0:	005b      	lsls	r3, r3, #1
 8008de2:	69fa      	ldr	r2, [r7, #28]
 8008de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008de8:	4a26      	ldr	r2, [pc, #152]	; (8008e84 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d906      	bls.n	8008dfc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	4a22      	ldr	r2, [pc, #136]	; (8008e7c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008df2:	fba2 2303 	umull	r2, r3, r2, r3
 8008df6:	0e1b      	lsrs	r3, r3, #24
 8008df8:	61bb      	str	r3, [r7, #24]
 8008dfa:	e002      	b.n	8008e02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681c      	ldr	r4, [r3, #0]
 8008e06:	466a      	mov	r2, sp
 8008e08:	f107 0314 	add.w	r3, r7, #20
 8008e0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008e10:	e882 0003 	stmia.w	r2, {r0, r1}
 8008e14:	f107 0308 	add.w	r3, r7, #8
 8008e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f000 fcc6 	bl	80097ac <SDMMC_Init>
 8008e20:	e008      	b.n	8008e34 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e26:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 fd93 	bl	8009968 <SDMMC_CmdBlockLength>
 8008e42:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e44:	6a3b      	ldr	r3, [r7, #32]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00c      	beq.n	8008e64 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a0a      	ldr	r2, [pc, #40]	; (8008e78 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008e50:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	431a      	orrs	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8008e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	372c      	adds	r7, #44	; 0x2c
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd90      	pop	{r4, r7, pc}
 8008e78:	1fe00fff 	.word	0x1fe00fff
 8008e7c:	55e63b89 	.word	0x55e63b89
 8008e80:	02faf080 	.word	0x02faf080
 8008e84:	017d7840 	.word	0x017d7840

08008e88 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008e90:	2300      	movs	r3, #0
 8008e92:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008e94:	f107 030c 	add.w	r3, r7, #12
 8008e98:	4619      	mov	r1, r3
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fa40 	bl	8009320 <SD_SendStatus>
 8008ea0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d005      	beq.n	8008eb4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	0a5b      	lsrs	r3, r3, #9
 8008eb8:	f003 030f 	and.w	r3, r3, #15
 8008ebc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008ebe:	693b      	ldr	r3, [r7, #16]
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3718      	adds	r7, #24
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b090      	sub	sp, #64	; 0x40
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008ed4:	f7f9 f8c2 	bl	800205c <HAL_GetTick>
 8008ed8:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 fcbd 	bl	800985e <SDMMC_GetPowerState>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d102      	bne.n	8008ef0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008eea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008eee:	e0b5      	b.n	800905c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef4:	2b03      	cmp	r3, #3
 8008ef6:	d02e      	beq.n	8008f56 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 ff08 	bl	8009d12 <SDMMC_CmdSendCID>
 8008f02:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <SD_InitCard+0x46>
    {
      return errorstate;
 8008f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0c:	e0a6      	b.n	800905c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2100      	movs	r1, #0
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 fce8 	bl	80098ea <SDMMC_GetResponse>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2104      	movs	r1, #4
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 fcdf 	bl	80098ea <SDMMC_GetResponse>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2108      	movs	r1, #8
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 fcd6 	bl	80098ea <SDMMC_GetResponse>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	210c      	movs	r1, #12
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f000 fccd 	bl	80098ea <SDMMC_GetResponse>
 8008f50:	4602      	mov	r2, r0
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5a:	2b03      	cmp	r3, #3
 8008f5c:	d01d      	beq.n	8008f9a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008f5e:	e019      	b.n	8008f94 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f107 020a 	add.w	r2, r7, #10
 8008f68:	4611      	mov	r1, r2
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 ff10 	bl	8009d90 <SDMMC_CmdSetRelAdd>
 8008f70:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d001      	beq.n	8008f7c <SD_InitCard+0xb4>
      {
        return errorstate;
 8008f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7a:	e06f      	b.n	800905c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008f7c:	f7f9 f86e 	bl	800205c <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	f241 3287 	movw	r2, #4999	; 0x1387
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d902      	bls.n	8008f94 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8008f8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f92:	e063      	b.n	800905c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008f94:	897b      	ldrh	r3, [r7, #10]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d0e2      	beq.n	8008f60 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9e:	2b03      	cmp	r3, #3
 8008fa0:	d036      	beq.n	8009010 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008fa2:	897b      	ldrh	r3, [r7, #10]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fb2:	041b      	lsls	r3, r3, #16
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	f000 feca 	bl	8009d50 <SDMMC_CmdSendCSD>
 8008fbc:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <SD_InitCard+0x100>
    {
      return errorstate;
 8008fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc6:	e049      	b.n	800905c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2100      	movs	r1, #0
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 fc8b 	bl	80098ea <SDMMC_GetResponse>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2104      	movs	r1, #4
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 fc82 	bl	80098ea <SDMMC_GetResponse>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2108      	movs	r1, #8
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 fc79 	bl	80098ea <SDMMC_GetResponse>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	210c      	movs	r1, #12
 8009004:	4618      	mov	r0, r3
 8009006:	f000 fc70 	bl	80098ea <SDMMC_GetResponse>
 800900a:	4602      	mov	r2, r0
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2104      	movs	r1, #4
 8009016:	4618      	mov	r0, r3
 8009018:	f000 fc67 	bl	80098ea <SDMMC_GetResponse>
 800901c:	4603      	mov	r3, r0
 800901e:	0d1a      	lsrs	r2, r3, #20
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009024:	f107 030c 	add.w	r3, r7, #12
 8009028:	4619      	mov	r1, r3
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f7ff fb8c 	bl	8008748 <HAL_SD_GetCardCSD>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d002      	beq.n	800903c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009036:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800903a:	e00f      	b.n	800905c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009044:	041b      	lsls	r3, r3, #16
 8009046:	4619      	mov	r1, r3
 8009048:	4610      	mov	r0, r2
 800904a:	f000 fd79 	bl	8009b40 <SDMMC_CmdSelDesel>
 800904e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <SD_InitCard+0x192>
  {
    return errorstate;
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	e000      	b.n	800905c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3740      	adds	r7, #64	; 0x40
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800906c:	2300      	movs	r3, #0
 800906e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009070:	2300      	movs	r3, #0
 8009072:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009074:	2300      	movs	r3, #0
 8009076:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4618      	mov	r0, r3
 800907e:	f000 fd82 	bl	8009b86 <SDMMC_CmdGoIdleState>
 8009082:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <SD_PowerON+0x2a>
  {
    return errorstate;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	e072      	b.n	8009174 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4618      	mov	r0, r3
 8009094:	f000 fd95 	bl	8009bc2 <SDMMC_CmdOperCond>
 8009098:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090a0:	d10d      	bne.n	80090be <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 fd6a 	bl	8009b86 <SDMMC_CmdGoIdleState>
 80090b2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d004      	beq.n	80090c4 <SD_PowerON+0x60>
    {
      return errorstate;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	e05a      	b.n	8009174 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d137      	bne.n	800913c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2100      	movs	r1, #0
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 fd95 	bl	8009c02 <SDMMC_CmdAppCommand>
 80090d8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d02d      	beq.n	800913c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80090e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80090e4:	e046      	b.n	8009174 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2100      	movs	r1, #0
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 fd88 	bl	8009c02 <SDMMC_CmdAppCommand>
 80090f2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <SD_PowerON+0x9a>
    {
      return errorstate;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	e03a      	b.n	8009174 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	491e      	ldr	r1, [pc, #120]	; (800917c <SD_PowerON+0x118>)
 8009104:	4618      	mov	r0, r3
 8009106:	f000 fd9f 	bl	8009c48 <SDMMC_CmdAppOperCommand>
 800910a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d002      	beq.n	8009118 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009112:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009116:	e02d      	b.n	8009174 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2100      	movs	r1, #0
 800911e:	4618      	mov	r0, r3
 8009120:	f000 fbe3 	bl	80098ea <SDMMC_GetResponse>
 8009124:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	0fdb      	lsrs	r3, r3, #31
 800912a:	2b01      	cmp	r3, #1
 800912c:	d101      	bne.n	8009132 <SD_PowerON+0xce>
 800912e:	2301      	movs	r3, #1
 8009130:	e000      	b.n	8009134 <SD_PowerON+0xd0>
 8009132:	2300      	movs	r3, #0
 8009134:	613b      	str	r3, [r7, #16]

    count++;
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	3301      	adds	r3, #1
 800913a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009142:	4293      	cmp	r3, r2
 8009144:	d802      	bhi.n	800914c <SD_PowerON+0xe8>
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d0cc      	beq.n	80090e6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009152:	4293      	cmp	r3, r2
 8009154:	d902      	bls.n	800915c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009156:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800915a:	e00b      	b.n	8009174 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d002      	beq.n	8009172 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3718      	adds	r7, #24
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	c1100000 	.word	0xc1100000

08009180 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08c      	sub	sp, #48	; 0x30
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800918a:	f7f8 ff67 	bl	800205c <HAL_GetTick>
 800918e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2100      	movs	r1, #0
 800919a:	4618      	mov	r0, r3
 800919c:	f000 fba5 	bl	80098ea <SDMMC_GetResponse>
 80091a0:	4603      	mov	r3, r0
 80091a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091aa:	d102      	bne.n	80091b2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80091ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091b0:	e0b0      	b.n	8009314 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2140      	movs	r1, #64	; 0x40
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 fbd5 	bl	8009968 <SDMMC_CmdBlockLength>
 80091be:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80091c0:	6a3b      	ldr	r3, [r7, #32]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d005      	beq.n	80091d2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80091ce:	6a3b      	ldr	r3, [r7, #32]
 80091d0:	e0a0      	b.n	8009314 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091da:	041b      	lsls	r3, r3, #16
 80091dc:	4619      	mov	r1, r3
 80091de:	4610      	mov	r0, r2
 80091e0:	f000 fd0f 	bl	8009c02 <SDMMC_CmdAppCommand>
 80091e4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80091e6:	6a3b      	ldr	r3, [r7, #32]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d005      	beq.n	80091f8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80091f4:	6a3b      	ldr	r3, [r7, #32]
 80091f6:	e08d      	b.n	8009314 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091fc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80091fe:	2340      	movs	r3, #64	; 0x40
 8009200:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009202:	2360      	movs	r3, #96	; 0x60
 8009204:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009206:	2302      	movs	r3, #2
 8009208:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800920a:	2300      	movs	r3, #0
 800920c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800920e:	2301      	movs	r3, #1
 8009210:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f107 0208 	add.w	r2, r7, #8
 800921a:	4611      	mov	r1, r2
 800921c:	4618      	mov	r0, r3
 800921e:	f000 fb77 	bl	8009910 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4618      	mov	r0, r3
 8009228:	f000 fdf7 	bl	8009e1a <SDMMC_CmdStatusRegister>
 800922c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800922e:	6a3b      	ldr	r3, [r7, #32]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d02b      	beq.n	800928c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800923c:	6a3b      	ldr	r3, [r7, #32]
 800923e:	e069      	b.n	8009314 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800924a:	2b00      	cmp	r3, #0
 800924c:	d013      	beq.n	8009276 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800924e:	2300      	movs	r3, #0
 8009250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009252:	e00d      	b.n	8009270 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4618      	mov	r0, r3
 800925a:	f000 fad1 	bl	8009800 <SDMMC_ReadFIFO>
 800925e:	4602      	mov	r2, r0
 8009260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009262:	601a      	str	r2, [r3, #0]
        pData++;
 8009264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009266:	3304      	adds	r3, #4
 8009268:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800926a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926c:	3301      	adds	r3, #1
 800926e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009272:	2b07      	cmp	r3, #7
 8009274:	d9ee      	bls.n	8009254 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009276:	f7f8 fef1 	bl	800205c <HAL_GetTick>
 800927a:	4602      	mov	r2, r0
 800927c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009284:	d102      	bne.n	800928c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009286:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800928a:	e043      	b.n	8009314 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009292:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009296:	2b00      	cmp	r3, #0
 8009298:	d0d2      	beq.n	8009240 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a0:	f003 0308 	and.w	r3, r3, #8
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d001      	beq.n	80092ac <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80092a8:	2308      	movs	r3, #8
 80092aa:	e033      	b.n	8009314 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b2:	f003 0302 	and.w	r3, r3, #2
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d001      	beq.n	80092be <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80092ba:	2302      	movs	r3, #2
 80092bc:	e02a      	b.n	8009314 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c4:	f003 0320 	and.w	r3, r3, #32
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d017      	beq.n	80092fc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80092cc:	2320      	movs	r3, #32
 80092ce:	e021      	b.n	8009314 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 fa93 	bl	8009800 <SDMMC_ReadFIFO>
 80092da:	4602      	mov	r2, r0
 80092dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092de:	601a      	str	r2, [r3, #0]
    pData++;
 80092e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e2:	3304      	adds	r3, #4
 80092e4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80092e6:	f7f8 feb9 	bl	800205c <HAL_GetTick>
 80092ea:	4602      	mov	r2, r0
 80092ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092f4:	d102      	bne.n	80092fc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80092f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092fa:	e00b      	b.n	8009314 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1e2      	bne.n	80092d0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a03      	ldr	r2, [pc, #12]	; (800931c <SD_SendSDStatus+0x19c>)
 8009310:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3730      	adds	r7, #48	; 0x30
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	18000f3a 	.word	0x18000f3a

08009320 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d102      	bne.n	8009336 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009330:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009334:	e018      	b.n	8009368 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800933e:	041b      	lsls	r3, r3, #16
 8009340:	4619      	mov	r1, r3
 8009342:	4610      	mov	r0, r2
 8009344:	f000 fd46 	bl	8009dd4 <SDMMC_CmdSendStatus>
 8009348:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d001      	beq.n	8009354 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	e009      	b.n	8009368 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2100      	movs	r1, #0
 800935a:	4618      	mov	r0, r3
 800935c:	f000 fac5 	bl	80098ea <SDMMC_GetResponse>
 8009360:	4602      	mov	r2, r0
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009378:	2300      	movs	r3, #0
 800937a:	60fb      	str	r3, [r7, #12]
 800937c:	2300      	movs	r3, #0
 800937e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2100      	movs	r1, #0
 8009386:	4618      	mov	r0, r3
 8009388:	f000 faaf 	bl	80098ea <SDMMC_GetResponse>
 800938c:	4603      	mov	r3, r0
 800938e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009392:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009396:	d102      	bne.n	800939e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009398:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800939c:	e02f      	b.n	80093fe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800939e:	f107 030c 	add.w	r3, r7, #12
 80093a2:	4619      	mov	r1, r3
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f879 	bl	800949c <SD_FindSCR>
 80093aa:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	e023      	b.n	80093fe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d01c      	beq.n	80093fa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093c8:	041b      	lsls	r3, r3, #16
 80093ca:	4619      	mov	r1, r3
 80093cc:	4610      	mov	r0, r2
 80093ce:	f000 fc18 	bl	8009c02 <SDMMC_CmdAppCommand>
 80093d2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	e00f      	b.n	80093fe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2102      	movs	r1, #2
 80093e4:	4618      	mov	r0, r3
 80093e6:	f000 fc4f 	bl	8009c88 <SDMMC_CmdBusWidth>
 80093ea:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	e003      	b.n	80093fe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80093f6:	2300      	movs	r3, #0
 80093f8:	e001      	b.n	80093fe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b086      	sub	sp, #24
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800940e:	2300      	movs	r3, #0
 8009410:	60fb      	str	r3, [r7, #12]
 8009412:	2300      	movs	r3, #0
 8009414:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2100      	movs	r1, #0
 800941c:	4618      	mov	r0, r3
 800941e:	f000 fa64 	bl	80098ea <SDMMC_GetResponse>
 8009422:	4603      	mov	r3, r0
 8009424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009428:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800942c:	d102      	bne.n	8009434 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800942e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009432:	e02f      	b.n	8009494 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009434:	f107 030c 	add.w	r3, r7, #12
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 f82e 	bl	800949c <SD_FindSCR>
 8009440:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	e023      	b.n	8009494 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009452:	2b00      	cmp	r3, #0
 8009454:	d01c      	beq.n	8009490 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800945e:	041b      	lsls	r3, r3, #16
 8009460:	4619      	mov	r1, r3
 8009462:	4610      	mov	r0, r2
 8009464:	f000 fbcd 	bl	8009c02 <SDMMC_CmdAppCommand>
 8009468:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d001      	beq.n	8009474 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	e00f      	b.n	8009494 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2100      	movs	r1, #0
 800947a:	4618      	mov	r0, r3
 800947c:	f000 fc04 	bl	8009c88 <SDMMC_CmdBusWidth>
 8009480:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	e003      	b.n	8009494 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800948c:	2300      	movs	r3, #0
 800948e:	e001      	b.n	8009494 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009490:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009494:	4618      	mov	r0, r3
 8009496:	3718      	adds	r7, #24
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b08e      	sub	sp, #56	; 0x38
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80094a6:	f7f8 fdd9 	bl	800205c <HAL_GetTick>
 80094aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80094ac:	2300      	movs	r3, #0
 80094ae:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80094b0:	2300      	movs	r3, #0
 80094b2:	60bb      	str	r3, [r7, #8]
 80094b4:	2300      	movs	r3, #0
 80094b6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2108      	movs	r1, #8
 80094c2:	4618      	mov	r0, r3
 80094c4:	f000 fa50 	bl	8009968 <SDMMC_CmdBlockLength>
 80094c8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80094ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d001      	beq.n	80094d4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80094d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d2:	e0ad      	b.n	8009630 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094dc:	041b      	lsls	r3, r3, #16
 80094de:	4619      	mov	r1, r3
 80094e0:	4610      	mov	r0, r2
 80094e2:	f000 fb8e 	bl	8009c02 <SDMMC_CmdAppCommand>
 80094e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80094e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d001      	beq.n	80094f2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80094ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f0:	e09e      	b.n	8009630 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80094f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094f6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80094f8:	2308      	movs	r3, #8
 80094fa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80094fc:	2330      	movs	r3, #48	; 0x30
 80094fe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009500:	2302      	movs	r3, #2
 8009502:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009504:	2300      	movs	r3, #0
 8009506:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009508:	2301      	movs	r3, #1
 800950a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f107 0210 	add.w	r2, r7, #16
 8009514:	4611      	mov	r1, r2
 8009516:	4618      	mov	r0, r3
 8009518:	f000 f9fa 	bl	8009910 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4618      	mov	r0, r3
 8009522:	f000 fbd4 	bl	8009cce <SDMMC_CmdSendSCR>
 8009526:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952a:	2b00      	cmp	r3, #0
 800952c:	d027      	beq.n	800957e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800952e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009530:	e07e      	b.n	8009630 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009538:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800953c:	2b00      	cmp	r3, #0
 800953e:	d113      	bne.n	8009568 <SD_FindSCR+0xcc>
 8009540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009542:	2b00      	cmp	r3, #0
 8009544:	d110      	bne.n	8009568 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4618      	mov	r0, r3
 800954c:	f000 f958 	bl	8009800 <SDMMC_ReadFIFO>
 8009550:	4603      	mov	r3, r0
 8009552:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4618      	mov	r0, r3
 800955a:	f000 f951 	bl	8009800 <SDMMC_ReadFIFO>
 800955e:	4603      	mov	r3, r0
 8009560:	60fb      	str	r3, [r7, #12]
      index++;
 8009562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009564:	3301      	adds	r3, #1
 8009566:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009568:	f7f8 fd78 	bl	800205c <HAL_GetTick>
 800956c:	4602      	mov	r2, r0
 800956e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009576:	d102      	bne.n	800957e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009578:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800957c:	e058      	b.n	8009630 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009584:	f240 532a 	movw	r3, #1322	; 0x52a
 8009588:	4013      	ands	r3, r2
 800958a:	2b00      	cmp	r3, #0
 800958c:	d0d1      	beq.n	8009532 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009594:	f003 0308 	and.w	r3, r3, #8
 8009598:	2b00      	cmp	r3, #0
 800959a:	d005      	beq.n	80095a8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2208      	movs	r2, #8
 80095a2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80095a4:	2308      	movs	r3, #8
 80095a6:	e043      	b.n	8009630 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ae:	f003 0302 	and.w	r3, r3, #2
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d005      	beq.n	80095c2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2202      	movs	r2, #2
 80095bc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80095be:	2302      	movs	r3, #2
 80095c0:	e036      	b.n	8009630 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c8:	f003 0320 	and.w	r3, r3, #32
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d005      	beq.n	80095dc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2220      	movs	r2, #32
 80095d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80095d8:	2320      	movs	r3, #32
 80095da:	e029      	b.n	8009630 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a15      	ldr	r2, [pc, #84]	; (8009638 <SD_FindSCR+0x19c>)
 80095e2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	061a      	lsls	r2, r3, #24
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	021b      	lsls	r3, r3, #8
 80095ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80095f0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	0a1b      	lsrs	r3, r3, #8
 80095f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80095fa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	0e1b      	lsrs	r3, r3, #24
 8009600:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009604:	601a      	str	r2, [r3, #0]
    scr++;
 8009606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009608:	3304      	adds	r3, #4
 800960a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	061a      	lsls	r2, r3, #24
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	021b      	lsls	r3, r3, #8
 8009614:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009618:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	0a1b      	lsrs	r3, r3, #8
 800961e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009622:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	0e1b      	lsrs	r3, r3, #24
 8009628:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800962a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3738      	adds	r7, #56	; 0x38
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	18000f3a 	.word	0x18000f3a

0800963c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b086      	sub	sp, #24
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009648:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800964e:	2b1f      	cmp	r3, #31
 8009650:	d936      	bls.n	80096c0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8009652:	2300      	movs	r3, #0
 8009654:	617b      	str	r3, [r7, #20]
 8009656:	e027      	b.n	80096a8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4618      	mov	r0, r3
 800965e:	f000 f8cf 	bl	8009800 <SDMMC_ReadFIFO>
 8009662:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	b2da      	uxtb	r2, r3
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	3301      	adds	r3, #1
 8009670:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	0a1b      	lsrs	r3, r3, #8
 8009676:	b2da      	uxtb	r2, r3
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	3301      	adds	r3, #1
 8009680:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	0c1b      	lsrs	r3, r3, #16
 8009686:	b2da      	uxtb	r2, r3
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	3301      	adds	r3, #1
 8009690:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	0e1b      	lsrs	r3, r3, #24
 8009696:	b2da      	uxtb	r2, r3
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	3301      	adds	r3, #1
 80096a0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	3301      	adds	r3, #1
 80096a6:	617b      	str	r3, [r7, #20]
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	2b07      	cmp	r3, #7
 80096ac:	d9d4      	bls.n	8009658 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b8:	f1a3 0220 	sub.w	r2, r3, #32
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80096c0:	bf00      	nop
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b086      	sub	sp, #24
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	69db      	ldr	r3, [r3, #28]
 80096d4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	2b1f      	cmp	r3, #31
 80096dc:	d93a      	bls.n	8009754 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 80096de:	2300      	movs	r3, #0
 80096e0:	617b      	str	r3, [r7, #20]
 80096e2:	e02b      	b.n	800973c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	60fb      	str	r3, [r7, #12]
      tmp++;
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	3301      	adds	r3, #1
 80096ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	021a      	lsls	r2, r3, #8
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	60fb      	str	r3, [r7, #12]
      tmp++;
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	3301      	adds	r3, #1
 8009700:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	041a      	lsls	r2, r3, #16
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	4313      	orrs	r3, r2
 800970c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	3301      	adds	r3, #1
 8009712:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	061a      	lsls	r2, r3, #24
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	4313      	orrs	r3, r2
 800971e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	3301      	adds	r3, #1
 8009724:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f107 020c 	add.w	r2, r7, #12
 800972e:	4611      	mov	r1, r2
 8009730:	4618      	mov	r0, r3
 8009732:	f000 f872 	bl	800981a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	3301      	adds	r3, #1
 800973a:	617b      	str	r3, [r7, #20]
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	2b07      	cmp	r3, #7
 8009740:	d9d0      	bls.n	80096e4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	693a      	ldr	r2, [r7, #16]
 8009746:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a1b      	ldr	r3, [r3, #32]
 800974c:	f1a3 0220 	sub.w	r2, r3, #32
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	621a      	str	r2, [r3, #32]
  }
}
 8009754:	bf00      	nop
 8009756:	3718      	adds	r7, #24
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80097a0:	bf00      	nop
 80097a2:	370c      	adds	r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80097ac:	b084      	sub	sp, #16
 80097ae:	b480      	push	{r7}
 80097b0:	b085      	sub	sp, #20
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	f107 001c 	add.w	r0, r7, #28
 80097ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80097be:	2300      	movs	r3, #0
 80097c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80097c2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80097c4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80097c6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80097c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80097ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80097cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80097ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 80097d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80097d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	685a      	ldr	r2, [r3, #4]
 80097de:	4b07      	ldr	r3, [pc, #28]	; (80097fc <SDMMC_Init+0x50>)
 80097e0:	4013      	ands	r3, r2
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	431a      	orrs	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3714      	adds	r7, #20
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	b004      	add	sp, #16
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	ffc02c00 	.word	0xffc02c00

08009800 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800980e:	4618      	mov	r0, r3
 8009810:	370c      	adds	r7, #12
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr

0800981a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800981a:	b480      	push	{r7}
 800981c:	b083      	sub	sp, #12
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
 8009822:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f043 0203 	orr.w	r2, r3, #3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr

0800985e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800985e:	b480      	push	{r7}
 8009860:	b083      	sub	sp, #12
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0303 	and.w	r3, r3, #3
}
 800986e:	4618      	mov	r0, r3
 8009870:	370c      	adds	r7, #12
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
	...

0800987c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009886:	2300      	movs	r3, #0
 8009888:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800989a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80098a0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80098a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	68da      	ldr	r2, [r3, #12]
 80098b2:	4b06      	ldr	r3, [pc, #24]	; (80098cc <SDMMC_SendCommand+0x50>)
 80098b4:	4013      	ands	r3, r2
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	431a      	orrs	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr
 80098cc:	fffee0c0 	.word	0xfffee0c0

080098d0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	b2db      	uxtb	r3, r3
}
 80098de:	4618      	mov	r0, r3
 80098e0:	370c      	adds	r7, #12
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr

080098ea <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80098ea:	b480      	push	{r7}
 80098ec:	b085      	sub	sp, #20
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
 80098f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	3314      	adds	r3, #20
 80098f8:	461a      	mov	r2, r3
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	4413      	add	r3, r2
 80098fe:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800991a:	2300      	movs	r3, #0
 800991c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	685a      	ldr	r2, [r3, #4]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009936:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800993c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8009942:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	4313      	orrs	r3, r2
 8009948:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	431a      	orrs	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800995a:	2300      	movs	r3, #0

}
 800995c:	4618      	mov	r0, r3
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b088      	sub	sp, #32
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009976:	2310      	movs	r3, #16
 8009978:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800997a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800997e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009980:	2300      	movs	r3, #0
 8009982:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009988:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800998a:	f107 0308 	add.w	r3, r7, #8
 800998e:	4619      	mov	r1, r3
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f7ff ff73 	bl	800987c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009996:	f241 3288 	movw	r2, #5000	; 0x1388
 800999a:	2110      	movs	r1, #16
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fa5f 	bl	8009e60 <SDMMC_GetCmdResp1>
 80099a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099a4:	69fb      	ldr	r3, [r7, #28]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3720      	adds	r7, #32
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b088      	sub	sp, #32
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80099bc:	2311      	movs	r3, #17
 80099be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099c6:	2300      	movs	r3, #0
 80099c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099d0:	f107 0308 	add.w	r3, r7, #8
 80099d4:	4619      	mov	r1, r3
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f7ff ff50 	bl	800987c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80099dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80099e0:	2111      	movs	r1, #17
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fa3c 	bl	8009e60 <SDMMC_GetCmdResp1>
 80099e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099ea:	69fb      	ldr	r3, [r7, #28]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3720      	adds	r7, #32
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b088      	sub	sp, #32
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009a02:	2312      	movs	r3, #18
 8009a04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a16:	f107 0308 	add.w	r3, r7, #8
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f7ff ff2d 	bl	800987c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a26:	2112      	movs	r1, #18
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fa19 	bl	8009e60 <SDMMC_GetCmdResp1>
 8009a2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a30:	69fb      	ldr	r3, [r7, #28]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3720      	adds	r7, #32
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b088      	sub	sp, #32
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009a48:	2318      	movs	r3, #24
 8009a4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a52:	2300      	movs	r3, #0
 8009a54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a5c:	f107 0308 	add.w	r3, r7, #8
 8009a60:	4619      	mov	r1, r3
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f7ff ff0a 	bl	800987c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a6c:	2118      	movs	r1, #24
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f9f6 	bl	8009e60 <SDMMC_GetCmdResp1>
 8009a74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a76:	69fb      	ldr	r3, [r7, #28]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3720      	adds	r7, #32
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b088      	sub	sp, #32
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009a8e:	2319      	movs	r3, #25
 8009a90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009aa0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009aa2:	f107 0308 	add.w	r3, r7, #8
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7ff fee7 	bl	800987c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ab2:	2119      	movs	r1, #25
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 f9d3 	bl	8009e60 <SDMMC_GetCmdResp1>
 8009aba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009abc:	69fb      	ldr	r3, [r7, #28]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3720      	adds	r7, #32
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
	...

08009ac8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b088      	sub	sp, #32
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009ad4:	230c      	movs	r3, #12
 8009ad6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009adc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ae6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b00:	f107 0308 	add.w	r3, r7, #8
 8009b04:	4619      	mov	r1, r3
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f7ff feb8 	bl	800987c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009b0c:	4a0b      	ldr	r2, [pc, #44]	; (8009b3c <SDMMC_CmdStopTransfer+0x74>)
 8009b0e:	210c      	movs	r1, #12
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 f9a5 	bl	8009e60 <SDMMC_GetCmdResp1>
 8009b16:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b2a:	d101      	bne.n	8009b30 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8009b30:	69fb      	ldr	r3, [r7, #28]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3720      	adds	r7, #32
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	05f5e100 	.word	0x05f5e100

08009b40 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b088      	sub	sp, #32
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009b4e:	2307      	movs	r3, #7
 8009b50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b62:	f107 0308 	add.w	r3, r7, #8
 8009b66:	4619      	mov	r1, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f7ff fe87 	bl	800987c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b72:	2107      	movs	r1, #7
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f973 	bl	8009e60 <SDMMC_GetCmdResp1>
 8009b7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b7c:	69fb      	ldr	r3, [r7, #28]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3720      	adds	r7, #32
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b088      	sub	sp, #32
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009b92:	2300      	movs	r3, #0
 8009b94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009b96:	2300      	movs	r3, #0
 8009b98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ba2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ba4:	f107 0308 	add.w	r3, r7, #8
 8009ba8:	4619      	mov	r1, r3
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7ff fe66 	bl	800987c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 fb97 	bl	800a2e4 <SDMMC_GetCmdError>
 8009bb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bb8:	69fb      	ldr	r3, [r7, #28]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3720      	adds	r7, #32
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b088      	sub	sp, #32
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009bca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009bce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009bd0:	2308      	movs	r3, #8
 8009bd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009be2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009be4:	f107 0308 	add.w	r3, r7, #8
 8009be8:	4619      	mov	r1, r3
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f7ff fe46 	bl	800987c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fb29 	bl	800a248 <SDMMC_GetCmdResp7>
 8009bf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bf8:	69fb      	ldr	r3, [r7, #28]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3720      	adds	r7, #32
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b088      	sub	sp, #32
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009c10:	2337      	movs	r3, #55	; 0x37
 8009c12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c24:	f107 0308 	add.w	r3, r7, #8
 8009c28:	4619      	mov	r1, r3
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f7ff fe26 	bl	800987c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c34:	2137      	movs	r1, #55	; 0x37
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 f912 	bl	8009e60 <SDMMC_GetCmdResp1>
 8009c3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c3e:	69fb      	ldr	r3, [r7, #28]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3720      	adds	r7, #32
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b088      	sub	sp, #32
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009c56:	2329      	movs	r3, #41	; 0x29
 8009c58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c60:	2300      	movs	r3, #0
 8009c62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c6a:	f107 0308 	add.w	r3, r7, #8
 8009c6e:	4619      	mov	r1, r3
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7ff fe03 	bl	800987c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fa2e 	bl	800a0d8 <SDMMC_GetCmdResp3>
 8009c7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c7e:	69fb      	ldr	r3, [r7, #28]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3720      	adds	r7, #32
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b088      	sub	sp, #32
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009c96:	2306      	movs	r3, #6
 8009c98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ca8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009caa:	f107 0308 	add.w	r3, r7, #8
 8009cae:	4619      	mov	r1, r3
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f7ff fde3 	bl	800987c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cba:	2106      	movs	r1, #6
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f8cf 	bl	8009e60 <SDMMC_GetCmdResp1>
 8009cc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cc4:	69fb      	ldr	r3, [r7, #28]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3720      	adds	r7, #32
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b088      	sub	sp, #32
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009cda:	2333      	movs	r3, #51	; 0x33
 8009cdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ce2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cee:	f107 0308 	add.w	r3, r7, #8
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7ff fdc1 	bl	800987c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cfe:	2133      	movs	r1, #51	; 0x33
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f8ad 	bl	8009e60 <SDMMC_GetCmdResp1>
 8009d06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d08:	69fb      	ldr	r3, [r7, #28]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3720      	adds	r7, #32
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b088      	sub	sp, #32
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009d1e:	2302      	movs	r3, #2
 8009d20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009d22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009d26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d32:	f107 0308 	add.w	r3, r7, #8
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7ff fd9f 	bl	800987c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f980 	bl	800a044 <SDMMC_GetCmdResp2>
 8009d44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d46:	69fb      	ldr	r3, [r7, #28]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3720      	adds	r7, #32
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b088      	sub	sp, #32
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009d5e:	2309      	movs	r3, #9
 8009d60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009d62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009d66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d72:	f107 0308 	add.w	r3, r7, #8
 8009d76:	4619      	mov	r1, r3
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f7ff fd7f 	bl	800987c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f960 	bl	800a044 <SDMMC_GetCmdResp2>
 8009d84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d86:	69fb      	ldr	r3, [r7, #28]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3720      	adds	r7, #32
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b088      	sub	sp, #32
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009d9e:	2303      	movs	r3, #3
 8009da0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009da2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009da6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009da8:	2300      	movs	r3, #0
 8009daa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009db0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009db2:	f107 0308 	add.w	r3, r7, #8
 8009db6:	4619      	mov	r1, r3
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7ff fd5f 	bl	800987c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	2103      	movs	r1, #3
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 f9c8 	bl	800a158 <SDMMC_GetCmdResp6>
 8009dc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dca:	69fb      	ldr	r3, [r7, #28]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3720      	adds	r7, #32
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b088      	sub	sp, #32
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009de2:	230d      	movs	r3, #13
 8009de4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009de6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009dec:	2300      	movs	r3, #0
 8009dee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009df4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009df6:	f107 0308 	add.w	r3, r7, #8
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f7ff fd3d 	bl	800987c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e06:	210d      	movs	r1, #13
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 f829 	bl	8009e60 <SDMMC_GetCmdResp1>
 8009e0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e10:	69fb      	ldr	r3, [r7, #28]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3720      	adds	r7, #32
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b088      	sub	sp, #32
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009e22:	2300      	movs	r3, #0
 8009e24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009e26:	230d      	movs	r3, #13
 8009e28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e30:	2300      	movs	r3, #0
 8009e32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e3a:	f107 0308 	add.w	r3, r7, #8
 8009e3e:	4619      	mov	r1, r3
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f7ff fd1b 	bl	800987c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e4a:	210d      	movs	r1, #13
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f807 	bl	8009e60 <SDMMC_GetCmdResp1>
 8009e52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e54:	69fb      	ldr	r3, [r7, #28]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3720      	adds	r7, #32
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
	...

08009e60 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b088      	sub	sp, #32
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	607a      	str	r2, [r7, #4]
 8009e6c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009e6e:	4b70      	ldr	r3, [pc, #448]	; (800a030 <SDMMC_GetCmdResp1+0x1d0>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a70      	ldr	r2, [pc, #448]	; (800a034 <SDMMC_GetCmdResp1+0x1d4>)
 8009e74:	fba2 2303 	umull	r2, r3, r2, r3
 8009e78:	0a5a      	lsrs	r2, r3, #9
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	fb02 f303 	mul.w	r3, r2, r3
 8009e80:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	1e5a      	subs	r2, r3, #1
 8009e86:	61fa      	str	r2, [r7, #28]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d102      	bne.n	8009e92 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e90:	e0c9      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e96:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009e98:	69ba      	ldr	r2, [r7, #24]
 8009e9a:	4b67      	ldr	r3, [pc, #412]	; (800a038 <SDMMC_GetCmdResp1+0x1d8>)
 8009e9c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d0ef      	beq.n	8009e82 <SDMMC_GetCmdResp1+0x22>
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1ea      	bne.n	8009e82 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb0:	f003 0304 	and.w	r3, r3, #4
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d004      	beq.n	8009ec2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2204      	movs	r2, #4
 8009ebc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ebe:	2304      	movs	r3, #4
 8009ec0:	e0b1      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ec6:	f003 0301 	and.w	r3, r3, #1
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d004      	beq.n	8009ed8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e0a6      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	4a58      	ldr	r2, [pc, #352]	; (800a03c <SDMMC_GetCmdResp1+0x1dc>)
 8009edc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f7ff fcf6 	bl	80098d0 <SDMMC_GetCommandResponse>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	7afb      	ldrb	r3, [r7, #11]
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d001      	beq.n	8009ef2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e099      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f7ff fcf8 	bl	80098ea <SDMMC_GetResponse>
 8009efa:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009efc:	697a      	ldr	r2, [r7, #20]
 8009efe:	4b50      	ldr	r3, [pc, #320]	; (800a040 <SDMMC_GetCmdResp1+0x1e0>)
 8009f00:	4013      	ands	r3, r2
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009f06:	2300      	movs	r3, #0
 8009f08:	e08d      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	da02      	bge.n	8009f16 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009f10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f14:	e087      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009f20:	2340      	movs	r3, #64	; 0x40
 8009f22:	e080      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d001      	beq.n	8009f32 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009f2e:	2380      	movs	r3, #128	; 0x80
 8009f30:	e079      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009f3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f40:	e071      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f50:	e069      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d002      	beq.n	8009f62 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f60:	e061      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009f6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f70:	e059      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d002      	beq.n	8009f82 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f80:	e051      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d002      	beq.n	8009f92 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009f8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f90:	e049      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d002      	beq.n	8009fa2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009f9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009fa0:	e041      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d002      	beq.n	8009fb2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009fac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fb0:	e039      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d002      	beq.n	8009fc2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009fc0:	e031      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d002      	beq.n	8009fd2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009fcc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009fd0:	e029      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d002      	beq.n	8009fe2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009fdc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009fe0:	e021      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d002      	beq.n	8009ff2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009fec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009ff0:	e019      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d002      	beq.n	800a002 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009ffc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a000:	e011      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d002      	beq.n	800a012 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a00c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a010:	e009      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	f003 0308 	and.w	r3, r3, #8
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d002      	beq.n	800a022 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a01c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a020:	e001      	b.n	800a026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a026:	4618      	mov	r0, r3
 800a028:	3720      	adds	r7, #32
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	20000004 	.word	0x20000004
 800a034:	10624dd3 	.word	0x10624dd3
 800a038:	00200045 	.word	0x00200045
 800a03c:	002000c5 	.word	0x002000c5
 800a040:	fdffe008 	.word	0xfdffe008

0800a044 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a04c:	4b1f      	ldr	r3, [pc, #124]	; (800a0cc <SDMMC_GetCmdResp2+0x88>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a1f      	ldr	r2, [pc, #124]	; (800a0d0 <SDMMC_GetCmdResp2+0x8c>)
 800a052:	fba2 2303 	umull	r2, r3, r2, r3
 800a056:	0a5b      	lsrs	r3, r3, #9
 800a058:	f241 3288 	movw	r2, #5000	; 0x1388
 800a05c:	fb02 f303 	mul.w	r3, r2, r3
 800a060:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	1e5a      	subs	r2, r3, #1
 800a066:	60fa      	str	r2, [r7, #12]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d102      	bne.n	800a072 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a06c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a070:	e026      	b.n	800a0c0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a076:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d0ef      	beq.n	800a062 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1ea      	bne.n	800a062 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a090:	f003 0304 	and.w	r3, r3, #4
 800a094:	2b00      	cmp	r3, #0
 800a096:	d004      	beq.n	800a0a2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2204      	movs	r2, #4
 800a09c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a09e:	2304      	movs	r3, #4
 800a0a0:	e00e      	b.n	800a0c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0a6:	f003 0301 	and.w	r3, r3, #1
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d004      	beq.n	800a0b8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e003      	b.n	800a0c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4a06      	ldr	r2, [pc, #24]	; (800a0d4 <SDMMC_GetCmdResp2+0x90>)
 800a0bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a0be:	2300      	movs	r3, #0
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3714      	adds	r7, #20
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr
 800a0cc:	20000004 	.word	0x20000004
 800a0d0:	10624dd3 	.word	0x10624dd3
 800a0d4:	002000c5 	.word	0x002000c5

0800a0d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a0e0:	4b1a      	ldr	r3, [pc, #104]	; (800a14c <SDMMC_GetCmdResp3+0x74>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a1a      	ldr	r2, [pc, #104]	; (800a150 <SDMMC_GetCmdResp3+0x78>)
 800a0e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ea:	0a5b      	lsrs	r3, r3, #9
 800a0ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0f0:	fb02 f303 	mul.w	r3, r2, r3
 800a0f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	1e5a      	subs	r2, r3, #1
 800a0fa:	60fa      	str	r2, [r7, #12]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d102      	bne.n	800a106 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a100:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a104:	e01b      	b.n	800a13e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a10a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a112:	2b00      	cmp	r3, #0
 800a114:	d0ef      	beq.n	800a0f6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1ea      	bne.n	800a0f6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a124:	f003 0304 	and.w	r3, r3, #4
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d004      	beq.n	800a136 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2204      	movs	r2, #4
 800a130:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a132:	2304      	movs	r3, #4
 800a134:	e003      	b.n	800a13e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a06      	ldr	r2, [pc, #24]	; (800a154 <SDMMC_GetCmdResp3+0x7c>)
 800a13a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3714      	adds	r7, #20
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	20000004 	.word	0x20000004
 800a150:	10624dd3 	.word	0x10624dd3
 800a154:	002000c5 	.word	0x002000c5

0800a158 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b088      	sub	sp, #32
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	460b      	mov	r3, r1
 800a162:	607a      	str	r2, [r7, #4]
 800a164:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a166:	4b35      	ldr	r3, [pc, #212]	; (800a23c <SDMMC_GetCmdResp6+0xe4>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a35      	ldr	r2, [pc, #212]	; (800a240 <SDMMC_GetCmdResp6+0xe8>)
 800a16c:	fba2 2303 	umull	r2, r3, r2, r3
 800a170:	0a5b      	lsrs	r3, r3, #9
 800a172:	f241 3288 	movw	r2, #5000	; 0x1388
 800a176:	fb02 f303 	mul.w	r3, r2, r3
 800a17a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	1e5a      	subs	r2, r3, #1
 800a180:	61fa      	str	r2, [r7, #28]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d102      	bne.n	800a18c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a186:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a18a:	e052      	b.n	800a232 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a190:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d0ef      	beq.n	800a17c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1ea      	bne.n	800a17c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1aa:	f003 0304 	and.w	r3, r3, #4
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d004      	beq.n	800a1bc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2204      	movs	r2, #4
 800a1b6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1b8:	2304      	movs	r3, #4
 800a1ba:	e03a      	b.n	800a232 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c0:	f003 0301 	and.w	r3, r3, #1
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d004      	beq.n	800a1d2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e02f      	b.n	800a232 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f7ff fb7c 	bl	80098d0 <SDMMC_GetCommandResponse>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	461a      	mov	r2, r3
 800a1dc:	7afb      	ldrb	r3, [r7, #11]
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d001      	beq.n	800a1e6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e025      	b.n	800a232 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	4a16      	ldr	r2, [pc, #88]	; (800a244 <SDMMC_GetCmdResp6+0xec>)
 800a1ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f7ff fb7b 	bl	80098ea <SDMMC_GetResponse>
 800a1f4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d106      	bne.n	800a20e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	0c1b      	lsrs	r3, r3, #16
 800a204:	b29a      	uxth	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a20a:	2300      	movs	r3, #0
 800a20c:	e011      	b.n	800a232 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a214:	2b00      	cmp	r3, #0
 800a216:	d002      	beq.n	800a21e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a21c:	e009      	b.n	800a232 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a224:	2b00      	cmp	r3, #0
 800a226:	d002      	beq.n	800a22e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a22c:	e001      	b.n	800a232 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a22e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a232:	4618      	mov	r0, r3
 800a234:	3720      	adds	r7, #32
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	20000004 	.word	0x20000004
 800a240:	10624dd3 	.word	0x10624dd3
 800a244:	002000c5 	.word	0x002000c5

0800a248 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a250:	4b22      	ldr	r3, [pc, #136]	; (800a2dc <SDMMC_GetCmdResp7+0x94>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a22      	ldr	r2, [pc, #136]	; (800a2e0 <SDMMC_GetCmdResp7+0x98>)
 800a256:	fba2 2303 	umull	r2, r3, r2, r3
 800a25a:	0a5b      	lsrs	r3, r3, #9
 800a25c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a260:	fb02 f303 	mul.w	r3, r2, r3
 800a264:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	1e5a      	subs	r2, r3, #1
 800a26a:	60fa      	str	r2, [r7, #12]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d102      	bne.n	800a276 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a270:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a274:	e02c      	b.n	800a2d0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a27a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a282:	2b00      	cmp	r3, #0
 800a284:	d0ef      	beq.n	800a266 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1ea      	bne.n	800a266 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a294:	f003 0304 	and.w	r3, r3, #4
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d004      	beq.n	800a2a6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2204      	movs	r2, #4
 800a2a0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2a2:	2304      	movs	r3, #4
 800a2a4:	e014      	b.n	800a2d0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2aa:	f003 0301 	and.w	r3, r3, #1
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d004      	beq.n	800a2bc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e009      	b.n	800a2d0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2240      	movs	r2, #64	; 0x40
 800a2cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a2ce:	2300      	movs	r3, #0

}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3714      	adds	r7, #20
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr
 800a2dc:	20000004 	.word	0x20000004
 800a2e0:	10624dd3 	.word	0x10624dd3

0800a2e4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a2ec:	4b11      	ldr	r3, [pc, #68]	; (800a334 <SDMMC_GetCmdError+0x50>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a11      	ldr	r2, [pc, #68]	; (800a338 <SDMMC_GetCmdError+0x54>)
 800a2f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2f6:	0a5b      	lsrs	r3, r3, #9
 800a2f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2fc:	fb02 f303 	mul.w	r3, r2, r3
 800a300:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	1e5a      	subs	r2, r3, #1
 800a306:	60fa      	str	r2, [r7, #12]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d102      	bne.n	800a312 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a30c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a310:	e009      	b.n	800a326 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d0f1      	beq.n	800a302 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a06      	ldr	r2, [pc, #24]	; (800a33c <SDMMC_GetCmdError+0x58>)
 800a322:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	3714      	adds	r7, #20
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
 800a332:	bf00      	nop
 800a334:	20000004 	.word	0x20000004
 800a338:	10624dd3 	.word	0x10624dd3
 800a33c:	002000c5 	.word	0x002000c5

0800a340 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a344:	4904      	ldr	r1, [pc, #16]	; (800a358 <MX_FATFS_Init+0x18>)
 800a346:	4805      	ldr	r0, [pc, #20]	; (800a35c <MX_FATFS_Init+0x1c>)
 800a348:	f003 fa50 	bl	800d7ec <FATFS_LinkDriver>
 800a34c:	4603      	mov	r3, r0
 800a34e:	461a      	mov	r2, r3
 800a350:	4b03      	ldr	r3, [pc, #12]	; (800a360 <MX_FATFS_Init+0x20>)
 800a352:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a354:	bf00      	nop
 800a356:	bd80      	pop	{r7, pc}
 800a358:	200002b4 	.word	0x200002b4
 800a35c:	0800da6c 	.word	0x0800da6c
 800a360:	200002b0 	.word	0x200002b0

0800a364 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a364:	b480      	push	{r7}
 800a366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a368:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a37a:	2300      	movs	r3, #0
 800a37c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a37e:	f7f6 fa07 	bl	8000790 <BSP_SD_IsDetected>
 800a382:	4603      	mov	r3, r0
 800a384:	2b01      	cmp	r3, #1
 800a386:	d001      	beq.n	800a38c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a388:	2302      	movs	r3, #2
 800a38a:	e012      	b.n	800a3b2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a38c:	480b      	ldr	r0, [pc, #44]	; (800a3bc <BSP_SD_Init+0x48>)
 800a38e:	f7fd fbe1 	bl	8007b54 <HAL_SD_Init>
 800a392:	4603      	mov	r3, r0
 800a394:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a396:	79fb      	ldrb	r3, [r7, #7]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d109      	bne.n	800a3b0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a39c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a3a0:	4806      	ldr	r0, [pc, #24]	; (800a3bc <BSP_SD_Init+0x48>)
 800a3a2:	f7fe fc5f 	bl	8008c64 <HAL_SD_ConfigWideBusOperation>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d001      	beq.n	800a3b0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a3b0:	79fb      	ldrb	r3, [r7, #7]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	20000230 	.word	0x20000230

0800a3c0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b088      	sub	sp, #32
 800a3c4:	af02      	add	r7, sp, #8
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
 800a3cc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	68ba      	ldr	r2, [r7, #8]
 800a3da:	68f9      	ldr	r1, [r7, #12]
 800a3dc:	4806      	ldr	r0, [pc, #24]	; (800a3f8 <BSP_SD_ReadBlocks+0x38>)
 800a3de:	f7fd fcd9 	bl	8007d94 <HAL_SD_ReadBlocks>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d001      	beq.n	800a3ec <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a3ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3718      	adds	r7, #24
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	20000230 	.word	0x20000230

0800a3fc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b088      	sub	sp, #32
 800a400:	af02      	add	r7, sp, #8
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
 800a408:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a40a:	2300      	movs	r3, #0
 800a40c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	68f9      	ldr	r1, [r7, #12]
 800a418:	4806      	ldr	r0, [pc, #24]	; (800a434 <BSP_SD_WriteBlocks+0x38>)
 800a41a:	f7fd fe45 	bl	80080a8 <HAL_SD_WriteBlocks>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d001      	beq.n	800a428 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a428:	7dfb      	ldrb	r3, [r7, #23]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3718      	adds	r7, #24
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	20000230 	.word	0x20000230

0800a438 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a43c:	4805      	ldr	r0, [pc, #20]	; (800a454 <BSP_SD_GetCardState+0x1c>)
 800a43e:	f7fe fd23 	bl	8008e88 <HAL_SD_GetCardState>
 800a442:	4603      	mov	r3, r0
 800a444:	2b04      	cmp	r3, #4
 800a446:	bf14      	ite	ne
 800a448:	2301      	movne	r3, #1
 800a44a:	2300      	moveq	r3, #0
 800a44c:	b2db      	uxtb	r3, r3
}
 800a44e:	4618      	mov	r0, r3
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	20000230 	.word	0x20000230

0800a458 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a460:	6879      	ldr	r1, [r7, #4]
 800a462:	4803      	ldr	r0, [pc, #12]	; (800a470 <BSP_SD_GetCardInfo+0x18>)
 800a464:	f7fe fbd2 	bl	8008c0c <HAL_SD_GetCardInfo>
}
 800a468:	bf00      	nop
 800a46a:	3708      	adds	r7, #8
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	20000230 	.word	0x20000230

0800a474 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a47c:	f000 f80e 	bl	800a49c <BSP_SD_WriteCpltCallback>
}
 800a480:	bf00      	nop
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a490:	f000 f80b 	bl	800a4aa <BSP_SD_ReadCpltCallback>
}
 800a494:	bf00      	nop
 800a496:	3708      	adds	r7, #8
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800a49c:	b480      	push	{r7}
 800a49e:	af00      	add	r7, sp, #0

}
 800a4a0:	bf00      	nop
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr

0800a4aa <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800a4aa:	b480      	push	{r7}
 800a4ac:	af00      	add	r7, sp, #0

}
 800a4ae:	bf00      	nop
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	4603      	mov	r3, r0
 800a4c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a4c2:	4b0b      	ldr	r3, [pc, #44]	; (800a4f0 <SD_CheckStatus+0x38>)
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a4c8:	f7ff ffb6 	bl	800a438 <BSP_SD_GetCardState>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d107      	bne.n	800a4e2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a4d2:	4b07      	ldr	r3, [pc, #28]	; (800a4f0 <SD_CheckStatus+0x38>)
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	f023 0301 	bic.w	r3, r3, #1
 800a4dc:	b2da      	uxtb	r2, r3
 800a4de:	4b04      	ldr	r3, [pc, #16]	; (800a4f0 <SD_CheckStatus+0x38>)
 800a4e0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a4e2:	4b03      	ldr	r3, [pc, #12]	; (800a4f0 <SD_CheckStatus+0x38>)
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	b2db      	uxtb	r3, r3
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3708      	adds	r7, #8
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	20000011 	.word	0x20000011

0800a4f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a4fe:	4b0b      	ldr	r3, [pc, #44]	; (800a52c <SD_initialize+0x38>)
 800a500:	2201      	movs	r2, #1
 800a502:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a504:	f7ff ff36 	bl	800a374 <BSP_SD_Init>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d107      	bne.n	800a51e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a50e:	79fb      	ldrb	r3, [r7, #7]
 800a510:	4618      	mov	r0, r3
 800a512:	f7ff ffd1 	bl	800a4b8 <SD_CheckStatus>
 800a516:	4603      	mov	r3, r0
 800a518:	461a      	mov	r2, r3
 800a51a:	4b04      	ldr	r3, [pc, #16]	; (800a52c <SD_initialize+0x38>)
 800a51c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a51e:	4b03      	ldr	r3, [pc, #12]	; (800a52c <SD_initialize+0x38>)
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	b2db      	uxtb	r3, r3
}
 800a524:	4618      	mov	r0, r3
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	20000011 	.word	0x20000011

0800a530 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	4603      	mov	r3, r0
 800a538:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a53a:	79fb      	ldrb	r3, [r7, #7]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7ff ffbb 	bl	800a4b8 <SD_CheckStatus>
 800a542:	4603      	mov	r3, r0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	60b9      	str	r1, [r7, #8]
 800a554:	607a      	str	r2, [r7, #4]
 800a556:	603b      	str	r3, [r7, #0]
 800a558:	4603      	mov	r3, r0
 800a55a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a564:	683a      	ldr	r2, [r7, #0]
 800a566:	6879      	ldr	r1, [r7, #4]
 800a568:	68b8      	ldr	r0, [r7, #8]
 800a56a:	f7ff ff29 	bl	800a3c0 <BSP_SD_ReadBlocks>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d107      	bne.n	800a584 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a574:	bf00      	nop
 800a576:	f7ff ff5f 	bl	800a438 <BSP_SD_GetCardState>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1fa      	bne.n	800a576 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a580:	2300      	movs	r3, #0
 800a582:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a584:	7dfb      	ldrb	r3, [r7, #23]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3718      	adds	r7, #24
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b086      	sub	sp, #24
 800a592:	af00      	add	r7, sp, #0
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
 800a598:	603b      	str	r3, [r7, #0]
 800a59a:	4603      	mov	r3, r0
 800a59c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a5a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5a6:	683a      	ldr	r2, [r7, #0]
 800a5a8:	6879      	ldr	r1, [r7, #4]
 800a5aa:	68b8      	ldr	r0, [r7, #8]
 800a5ac:	f7ff ff26 	bl	800a3fc <BSP_SD_WriteBlocks>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d107      	bne.n	800a5c6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a5b6:	bf00      	nop
 800a5b8:	f7ff ff3e 	bl	800a438 <BSP_SD_GetCardState>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1fa      	bne.n	800a5b8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a5c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3718      	adds	r7, #24
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b08c      	sub	sp, #48	; 0x30
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	603a      	str	r2, [r7, #0]
 800a5da:	71fb      	strb	r3, [r7, #7]
 800a5dc:	460b      	mov	r3, r1
 800a5de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a5e6:	4b25      	ldr	r3, [pc, #148]	; (800a67c <SD_ioctl+0xac>)
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	f003 0301 	and.w	r3, r3, #1
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d001      	beq.n	800a5f8 <SD_ioctl+0x28>
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	e03c      	b.n	800a672 <SD_ioctl+0xa2>

  switch (cmd)
 800a5f8:	79bb      	ldrb	r3, [r7, #6]
 800a5fa:	2b03      	cmp	r3, #3
 800a5fc:	d834      	bhi.n	800a668 <SD_ioctl+0x98>
 800a5fe:	a201      	add	r2, pc, #4	; (adr r2, 800a604 <SD_ioctl+0x34>)
 800a600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a604:	0800a615 	.word	0x0800a615
 800a608:	0800a61d 	.word	0x0800a61d
 800a60c:	0800a635 	.word	0x0800a635
 800a610:	0800a64f 	.word	0x0800a64f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a61a:	e028      	b.n	800a66e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a61c:	f107 0308 	add.w	r3, r7, #8
 800a620:	4618      	mov	r0, r3
 800a622:	f7ff ff19 	bl	800a458 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a626:	6a3a      	ldr	r2, [r7, #32]
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a62c:	2300      	movs	r3, #0
 800a62e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a632:	e01c      	b.n	800a66e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a634:	f107 0308 	add.w	r3, r7, #8
 800a638:	4618      	mov	r0, r3
 800a63a:	f7ff ff0d 	bl	800a458 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a640:	b29a      	uxth	r2, r3
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a646:	2300      	movs	r3, #0
 800a648:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a64c:	e00f      	b.n	800a66e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a64e:	f107 0308 	add.w	r3, r7, #8
 800a652:	4618      	mov	r0, r3
 800a654:	f7ff ff00 	bl	800a458 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65a:	0a5a      	lsrs	r2, r3, #9
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a660:	2300      	movs	r3, #0
 800a662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a666:	e002      	b.n	800a66e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a668:	2304      	movs	r3, #4
 800a66a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a66e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a672:	4618      	mov	r0, r3
 800a674:	3730      	adds	r7, #48	; 0x30
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	20000011 	.word	0x20000011

0800a680 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	4603      	mov	r3, r0
 800a688:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a68a:	79fb      	ldrb	r3, [r7, #7]
 800a68c:	4a08      	ldr	r2, [pc, #32]	; (800a6b0 <disk_status+0x30>)
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	4413      	add	r3, r2
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	79fa      	ldrb	r2, [r7, #7]
 800a698:	4905      	ldr	r1, [pc, #20]	; (800a6b0 <disk_status+0x30>)
 800a69a:	440a      	add	r2, r1
 800a69c:	7a12      	ldrb	r2, [r2, #8]
 800a69e:	4610      	mov	r0, r2
 800a6a0:	4798      	blx	r3
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	20000940 	.word	0x20000940

0800a6b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a6c2:	79fb      	ldrb	r3, [r7, #7]
 800a6c4:	4a0d      	ldr	r2, [pc, #52]	; (800a6fc <disk_initialize+0x48>)
 800a6c6:	5cd3      	ldrb	r3, [r2, r3]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d111      	bne.n	800a6f0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a6cc:	79fb      	ldrb	r3, [r7, #7]
 800a6ce:	4a0b      	ldr	r2, [pc, #44]	; (800a6fc <disk_initialize+0x48>)
 800a6d0:	2101      	movs	r1, #1
 800a6d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a6d4:	79fb      	ldrb	r3, [r7, #7]
 800a6d6:	4a09      	ldr	r2, [pc, #36]	; (800a6fc <disk_initialize+0x48>)
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	4413      	add	r3, r2
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	79fa      	ldrb	r2, [r7, #7]
 800a6e2:	4906      	ldr	r1, [pc, #24]	; (800a6fc <disk_initialize+0x48>)
 800a6e4:	440a      	add	r2, r1
 800a6e6:	7a12      	ldrb	r2, [r2, #8]
 800a6e8:	4610      	mov	r0, r2
 800a6ea:	4798      	blx	r3
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20000940 	.word	0x20000940

0800a700 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a700:	b590      	push	{r4, r7, lr}
 800a702:	b087      	sub	sp, #28
 800a704:	af00      	add	r7, sp, #0
 800a706:	60b9      	str	r1, [r7, #8]
 800a708:	607a      	str	r2, [r7, #4]
 800a70a:	603b      	str	r3, [r7, #0]
 800a70c:	4603      	mov	r3, r0
 800a70e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a710:	7bfb      	ldrb	r3, [r7, #15]
 800a712:	4a0a      	ldr	r2, [pc, #40]	; (800a73c <disk_read+0x3c>)
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	4413      	add	r3, r2
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	689c      	ldr	r4, [r3, #8]
 800a71c:	7bfb      	ldrb	r3, [r7, #15]
 800a71e:	4a07      	ldr	r2, [pc, #28]	; (800a73c <disk_read+0x3c>)
 800a720:	4413      	add	r3, r2
 800a722:	7a18      	ldrb	r0, [r3, #8]
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	687a      	ldr	r2, [r7, #4]
 800a728:	68b9      	ldr	r1, [r7, #8]
 800a72a:	47a0      	blx	r4
 800a72c:	4603      	mov	r3, r0
 800a72e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a730:	7dfb      	ldrb	r3, [r7, #23]
}
 800a732:	4618      	mov	r0, r3
 800a734:	371c      	adds	r7, #28
 800a736:	46bd      	mov	sp, r7
 800a738:	bd90      	pop	{r4, r7, pc}
 800a73a:	bf00      	nop
 800a73c:	20000940 	.word	0x20000940

0800a740 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a740:	b590      	push	{r4, r7, lr}
 800a742:	b087      	sub	sp, #28
 800a744:	af00      	add	r7, sp, #0
 800a746:	60b9      	str	r1, [r7, #8]
 800a748:	607a      	str	r2, [r7, #4]
 800a74a:	603b      	str	r3, [r7, #0]
 800a74c:	4603      	mov	r3, r0
 800a74e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a750:	7bfb      	ldrb	r3, [r7, #15]
 800a752:	4a0a      	ldr	r2, [pc, #40]	; (800a77c <disk_write+0x3c>)
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	68dc      	ldr	r4, [r3, #12]
 800a75c:	7bfb      	ldrb	r3, [r7, #15]
 800a75e:	4a07      	ldr	r2, [pc, #28]	; (800a77c <disk_write+0x3c>)
 800a760:	4413      	add	r3, r2
 800a762:	7a18      	ldrb	r0, [r3, #8]
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	68b9      	ldr	r1, [r7, #8]
 800a76a:	47a0      	blx	r4
 800a76c:	4603      	mov	r3, r0
 800a76e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a770:	7dfb      	ldrb	r3, [r7, #23]
}
 800a772:	4618      	mov	r0, r3
 800a774:	371c      	adds	r7, #28
 800a776:	46bd      	mov	sp, r7
 800a778:	bd90      	pop	{r4, r7, pc}
 800a77a:	bf00      	nop
 800a77c:	20000940 	.word	0x20000940

0800a780 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	4603      	mov	r3, r0
 800a788:	603a      	str	r2, [r7, #0]
 800a78a:	71fb      	strb	r3, [r7, #7]
 800a78c:	460b      	mov	r3, r1
 800a78e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a790:	79fb      	ldrb	r3, [r7, #7]
 800a792:	4a09      	ldr	r2, [pc, #36]	; (800a7b8 <disk_ioctl+0x38>)
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	4413      	add	r3, r2
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	691b      	ldr	r3, [r3, #16]
 800a79c:	79fa      	ldrb	r2, [r7, #7]
 800a79e:	4906      	ldr	r1, [pc, #24]	; (800a7b8 <disk_ioctl+0x38>)
 800a7a0:	440a      	add	r2, r1
 800a7a2:	7a10      	ldrb	r0, [r2, #8]
 800a7a4:	79b9      	ldrb	r1, [r7, #6]
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	4798      	blx	r3
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	73fb      	strb	r3, [r7, #15]
  return res;
 800a7ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	20000940 	.word	0x20000940

0800a7bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b085      	sub	sp, #20
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a7cc:	89fb      	ldrh	r3, [r7, #14]
 800a7ce:	021b      	lsls	r3, r3, #8
 800a7d0:	b21a      	sxth	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	b21b      	sxth	r3, r3
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	b21b      	sxth	r3, r3
 800a7dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a7de:	89fb      	ldrh	r3, [r7, #14]
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3714      	adds	r7, #20
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	3303      	adds	r3, #3
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	021b      	lsls	r3, r3, #8
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	3202      	adds	r2, #2
 800a804:	7812      	ldrb	r2, [r2, #0]
 800a806:	4313      	orrs	r3, r2
 800a808:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	021b      	lsls	r3, r3, #8
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	3201      	adds	r2, #1
 800a812:	7812      	ldrb	r2, [r2, #0]
 800a814:	4313      	orrs	r3, r2
 800a816:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	021b      	lsls	r3, r3, #8
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	7812      	ldrb	r2, [r2, #0]
 800a820:	4313      	orrs	r3, r2
 800a822:	60fb      	str	r3, [r7, #12]
	return rv;
 800a824:	68fb      	ldr	r3, [r7, #12]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3714      	adds	r7, #20
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr

0800a832 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a832:	b480      	push	{r7}
 800a834:	b083      	sub	sp, #12
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
 800a83a:	460b      	mov	r3, r1
 800a83c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	1c5a      	adds	r2, r3, #1
 800a842:	607a      	str	r2, [r7, #4]
 800a844:	887a      	ldrh	r2, [r7, #2]
 800a846:	b2d2      	uxtb	r2, r2
 800a848:	701a      	strb	r2, [r3, #0]
 800a84a:	887b      	ldrh	r3, [r7, #2]
 800a84c:	0a1b      	lsrs	r3, r3, #8
 800a84e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	1c5a      	adds	r2, r3, #1
 800a854:	607a      	str	r2, [r7, #4]
 800a856:	887a      	ldrh	r2, [r7, #2]
 800a858:	b2d2      	uxtb	r2, r2
 800a85a:	701a      	strb	r2, [r3, #0]
}
 800a85c:	bf00      	nop
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	1c5a      	adds	r2, r3, #1
 800a876:	607a      	str	r2, [r7, #4]
 800a878:	683a      	ldr	r2, [r7, #0]
 800a87a:	b2d2      	uxtb	r2, r2
 800a87c:	701a      	strb	r2, [r3, #0]
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	0a1b      	lsrs	r3, r3, #8
 800a882:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	1c5a      	adds	r2, r3, #1
 800a888:	607a      	str	r2, [r7, #4]
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	b2d2      	uxtb	r2, r2
 800a88e:	701a      	strb	r2, [r3, #0]
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	0a1b      	lsrs	r3, r3, #8
 800a894:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	1c5a      	adds	r2, r3, #1
 800a89a:	607a      	str	r2, [r7, #4]
 800a89c:	683a      	ldr	r2, [r7, #0]
 800a89e:	b2d2      	uxtb	r2, r2
 800a8a0:	701a      	strb	r2, [r3, #0]
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	0a1b      	lsrs	r3, r3, #8
 800a8a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	1c5a      	adds	r2, r3, #1
 800a8ac:	607a      	str	r2, [r7, #4]
 800a8ae:	683a      	ldr	r2, [r7, #0]
 800a8b0:	b2d2      	uxtb	r2, r2
 800a8b2:	701a      	strb	r2, [r3, #0]
}
 800a8b4:	bf00      	nop
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a8c0:	b480      	push	{r7}
 800a8c2:	b087      	sub	sp, #28
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00d      	beq.n	800a8f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a8da:	693a      	ldr	r2, [r7, #16]
 800a8dc:	1c53      	adds	r3, r2, #1
 800a8de:	613b      	str	r3, [r7, #16]
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	1c59      	adds	r1, r3, #1
 800a8e4:	6179      	str	r1, [r7, #20]
 800a8e6:	7812      	ldrb	r2, [r2, #0]
 800a8e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	607b      	str	r3, [r7, #4]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1f1      	bne.n	800a8da <mem_cpy+0x1a>
	}
}
 800a8f6:	bf00      	nop
 800a8f8:	371c      	adds	r7, #28
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr

0800a902 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a902:	b480      	push	{r7}
 800a904:	b087      	sub	sp, #28
 800a906:	af00      	add	r7, sp, #0
 800a908:	60f8      	str	r0, [r7, #12]
 800a90a:	60b9      	str	r1, [r7, #8]
 800a90c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	1c5a      	adds	r2, r3, #1
 800a916:	617a      	str	r2, [r7, #20]
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	b2d2      	uxtb	r2, r2
 800a91c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	3b01      	subs	r3, #1
 800a922:	607b      	str	r3, [r7, #4]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d1f3      	bne.n	800a912 <mem_set+0x10>
}
 800a92a:	bf00      	nop
 800a92c:	bf00      	nop
 800a92e:	371c      	adds	r7, #28
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a938:	b480      	push	{r7}
 800a93a:	b089      	sub	sp, #36	; 0x24
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	61fb      	str	r3, [r7, #28]
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a94c:	2300      	movs	r3, #0
 800a94e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	1c5a      	adds	r2, r3, #1
 800a954:	61fa      	str	r2, [r7, #28]
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	4619      	mov	r1, r3
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	1c5a      	adds	r2, r3, #1
 800a95e:	61ba      	str	r2, [r7, #24]
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	1acb      	subs	r3, r1, r3
 800a964:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	3b01      	subs	r3, #1
 800a96a:	607b      	str	r3, [r7, #4]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d002      	beq.n	800a978 <mem_cmp+0x40>
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d0eb      	beq.n	800a950 <mem_cmp+0x18>

	return r;
 800a978:	697b      	ldr	r3, [r7, #20]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3724      	adds	r7, #36	; 0x24
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr

0800a986 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a986:	b480      	push	{r7}
 800a988:	b083      	sub	sp, #12
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
 800a98e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a990:	e002      	b.n	800a998 <chk_chr+0x12>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	3301      	adds	r3, #1
 800a996:	607b      	str	r3, [r7, #4]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d005      	beq.n	800a9ac <chk_chr+0x26>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d1f2      	bne.n	800a992 <chk_chr+0xc>
	return *str;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	781b      	ldrb	r3, [r3, #0]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	60bb      	str	r3, [r7, #8]
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	60fb      	str	r3, [r7, #12]
 800a9ce:	e029      	b.n	800aa24 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a9d0:	4a27      	ldr	r2, [pc, #156]	; (800aa70 <chk_lock+0xb4>)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	011b      	lsls	r3, r3, #4
 800a9d6:	4413      	add	r3, r2
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d01d      	beq.n	800aa1a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a9de:	4a24      	ldr	r2, [pc, #144]	; (800aa70 <chk_lock+0xb4>)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	011b      	lsls	r3, r3, #4
 800a9e4:	4413      	add	r3, r2
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d116      	bne.n	800aa1e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a9f0:	4a1f      	ldr	r2, [pc, #124]	; (800aa70 <chk_lock+0xb4>)
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	011b      	lsls	r3, r3, #4
 800a9f6:	4413      	add	r3, r2
 800a9f8:	3304      	adds	r3, #4
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d10c      	bne.n	800aa1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aa04:	4a1a      	ldr	r2, [pc, #104]	; (800aa70 <chk_lock+0xb4>)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	011b      	lsls	r3, r3, #4
 800aa0a:	4413      	add	r3, r2
 800aa0c:	3308      	adds	r3, #8
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d102      	bne.n	800aa1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aa18:	e007      	b.n	800aa2a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	3301      	adds	r3, #1
 800aa22:	60fb      	str	r3, [r7, #12]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d9d2      	bls.n	800a9d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d109      	bne.n	800aa44 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d102      	bne.n	800aa3c <chk_lock+0x80>
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	2b02      	cmp	r3, #2
 800aa3a:	d101      	bne.n	800aa40 <chk_lock+0x84>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	e010      	b.n	800aa62 <chk_lock+0xa6>
 800aa40:	2312      	movs	r3, #18
 800aa42:	e00e      	b.n	800aa62 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d108      	bne.n	800aa5c <chk_lock+0xa0>
 800aa4a:	4a09      	ldr	r2, [pc, #36]	; (800aa70 <chk_lock+0xb4>)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	011b      	lsls	r3, r3, #4
 800aa50:	4413      	add	r3, r2
 800aa52:	330c      	adds	r3, #12
 800aa54:	881b      	ldrh	r3, [r3, #0]
 800aa56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa5a:	d101      	bne.n	800aa60 <chk_lock+0xa4>
 800aa5c:	2310      	movs	r3, #16
 800aa5e:	e000      	b.n	800aa62 <chk_lock+0xa6>
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3714      	adds	r7, #20
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	20000720 	.word	0x20000720

0800aa74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	607b      	str	r3, [r7, #4]
 800aa7e:	e002      	b.n	800aa86 <enq_lock+0x12>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	3301      	adds	r3, #1
 800aa84:	607b      	str	r3, [r7, #4]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d806      	bhi.n	800aa9a <enq_lock+0x26>
 800aa8c:	4a09      	ldr	r2, [pc, #36]	; (800aab4 <enq_lock+0x40>)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	011b      	lsls	r3, r3, #4
 800aa92:	4413      	add	r3, r2
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1f2      	bne.n	800aa80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2b02      	cmp	r3, #2
 800aa9e:	bf14      	ite	ne
 800aaa0:	2301      	movne	r3, #1
 800aaa2:	2300      	moveq	r3, #0
 800aaa4:	b2db      	uxtb	r3, r3
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	370c      	adds	r7, #12
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop
 800aab4:	20000720 	.word	0x20000720

0800aab8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aac2:	2300      	movs	r3, #0
 800aac4:	60fb      	str	r3, [r7, #12]
 800aac6:	e01f      	b.n	800ab08 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800aac8:	4a41      	ldr	r2, [pc, #260]	; (800abd0 <inc_lock+0x118>)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	011b      	lsls	r3, r3, #4
 800aace:	4413      	add	r3, r2
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d113      	bne.n	800ab02 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800aada:	4a3d      	ldr	r2, [pc, #244]	; (800abd0 <inc_lock+0x118>)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	011b      	lsls	r3, r3, #4
 800aae0:	4413      	add	r3, r2
 800aae2:	3304      	adds	r3, #4
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d109      	bne.n	800ab02 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800aaee:	4a38      	ldr	r2, [pc, #224]	; (800abd0 <inc_lock+0x118>)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	011b      	lsls	r3, r3, #4
 800aaf4:	4413      	add	r3, r2
 800aaf6:	3308      	adds	r3, #8
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d006      	beq.n	800ab10 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	3301      	adds	r3, #1
 800ab06:	60fb      	str	r3, [r7, #12]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d9dc      	bls.n	800aac8 <inc_lock+0x10>
 800ab0e:	e000      	b.n	800ab12 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ab10:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	d132      	bne.n	800ab7e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	60fb      	str	r3, [r7, #12]
 800ab1c:	e002      	b.n	800ab24 <inc_lock+0x6c>
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	3301      	adds	r3, #1
 800ab22:	60fb      	str	r3, [r7, #12]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d806      	bhi.n	800ab38 <inc_lock+0x80>
 800ab2a:	4a29      	ldr	r2, [pc, #164]	; (800abd0 <inc_lock+0x118>)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	011b      	lsls	r3, r3, #4
 800ab30:	4413      	add	r3, r2
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1f2      	bne.n	800ab1e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2b02      	cmp	r3, #2
 800ab3c:	d101      	bne.n	800ab42 <inc_lock+0x8a>
 800ab3e:	2300      	movs	r3, #0
 800ab40:	e040      	b.n	800abc4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	4922      	ldr	r1, [pc, #136]	; (800abd0 <inc_lock+0x118>)
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	011b      	lsls	r3, r3, #4
 800ab4c:	440b      	add	r3, r1
 800ab4e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	689a      	ldr	r2, [r3, #8]
 800ab54:	491e      	ldr	r1, [pc, #120]	; (800abd0 <inc_lock+0x118>)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	011b      	lsls	r3, r3, #4
 800ab5a:	440b      	add	r3, r1
 800ab5c:	3304      	adds	r3, #4
 800ab5e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	695a      	ldr	r2, [r3, #20]
 800ab64:	491a      	ldr	r1, [pc, #104]	; (800abd0 <inc_lock+0x118>)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	011b      	lsls	r3, r3, #4
 800ab6a:	440b      	add	r3, r1
 800ab6c:	3308      	adds	r3, #8
 800ab6e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ab70:	4a17      	ldr	r2, [pc, #92]	; (800abd0 <inc_lock+0x118>)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	011b      	lsls	r3, r3, #4
 800ab76:	4413      	add	r3, r2
 800ab78:	330c      	adds	r3, #12
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d009      	beq.n	800ab98 <inc_lock+0xe0>
 800ab84:	4a12      	ldr	r2, [pc, #72]	; (800abd0 <inc_lock+0x118>)
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	011b      	lsls	r3, r3, #4
 800ab8a:	4413      	add	r3, r2
 800ab8c:	330c      	adds	r3, #12
 800ab8e:	881b      	ldrh	r3, [r3, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d001      	beq.n	800ab98 <inc_lock+0xe0>
 800ab94:	2300      	movs	r3, #0
 800ab96:	e015      	b.n	800abc4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d108      	bne.n	800abb0 <inc_lock+0xf8>
 800ab9e:	4a0c      	ldr	r2, [pc, #48]	; (800abd0 <inc_lock+0x118>)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	011b      	lsls	r3, r3, #4
 800aba4:	4413      	add	r3, r2
 800aba6:	330c      	adds	r3, #12
 800aba8:	881b      	ldrh	r3, [r3, #0]
 800abaa:	3301      	adds	r3, #1
 800abac:	b29a      	uxth	r2, r3
 800abae:	e001      	b.n	800abb4 <inc_lock+0xfc>
 800abb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abb4:	4906      	ldr	r1, [pc, #24]	; (800abd0 <inc_lock+0x118>)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	011b      	lsls	r3, r3, #4
 800abba:	440b      	add	r3, r1
 800abbc:	330c      	adds	r3, #12
 800abbe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	3301      	adds	r3, #1
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3714      	adds	r7, #20
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr
 800abd0:	20000720 	.word	0x20000720

0800abd4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	3b01      	subs	r3, #1
 800abe0:	607b      	str	r3, [r7, #4]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d825      	bhi.n	800ac34 <dec_lock+0x60>
		n = Files[i].ctr;
 800abe8:	4a17      	ldr	r2, [pc, #92]	; (800ac48 <dec_lock+0x74>)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	011b      	lsls	r3, r3, #4
 800abee:	4413      	add	r3, r2
 800abf0:	330c      	adds	r3, #12
 800abf2:	881b      	ldrh	r3, [r3, #0]
 800abf4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800abf6:	89fb      	ldrh	r3, [r7, #14]
 800abf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abfc:	d101      	bne.n	800ac02 <dec_lock+0x2e>
 800abfe:	2300      	movs	r3, #0
 800ac00:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ac02:	89fb      	ldrh	r3, [r7, #14]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d002      	beq.n	800ac0e <dec_lock+0x3a>
 800ac08:	89fb      	ldrh	r3, [r7, #14]
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ac0e:	4a0e      	ldr	r2, [pc, #56]	; (800ac48 <dec_lock+0x74>)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	011b      	lsls	r3, r3, #4
 800ac14:	4413      	add	r3, r2
 800ac16:	330c      	adds	r3, #12
 800ac18:	89fa      	ldrh	r2, [r7, #14]
 800ac1a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ac1c:	89fb      	ldrh	r3, [r7, #14]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d105      	bne.n	800ac2e <dec_lock+0x5a>
 800ac22:	4a09      	ldr	r2, [pc, #36]	; (800ac48 <dec_lock+0x74>)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	011b      	lsls	r3, r3, #4
 800ac28:	4413      	add	r3, r2
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	737b      	strb	r3, [r7, #13]
 800ac32:	e001      	b.n	800ac38 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ac34:	2302      	movs	r3, #2
 800ac36:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ac38:	7b7b      	ldrb	r3, [r7, #13]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3714      	adds	r7, #20
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	20000720 	.word	0x20000720

0800ac4c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ac54:	2300      	movs	r3, #0
 800ac56:	60fb      	str	r3, [r7, #12]
 800ac58:	e010      	b.n	800ac7c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ac5a:	4a0d      	ldr	r2, [pc, #52]	; (800ac90 <clear_lock+0x44>)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	011b      	lsls	r3, r3, #4
 800ac60:	4413      	add	r3, r2
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d105      	bne.n	800ac76 <clear_lock+0x2a>
 800ac6a:	4a09      	ldr	r2, [pc, #36]	; (800ac90 <clear_lock+0x44>)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	011b      	lsls	r3, r3, #4
 800ac70:	4413      	add	r3, r2
 800ac72:	2200      	movs	r2, #0
 800ac74:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	60fb      	str	r3, [r7, #12]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d9eb      	bls.n	800ac5a <clear_lock+0xe>
	}
}
 800ac82:	bf00      	nop
 800ac84:	bf00      	nop
 800ac86:	3714      	adds	r7, #20
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr
 800ac90:	20000720 	.word	0x20000720

0800ac94 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b086      	sub	sp, #24
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	78db      	ldrb	r3, [r3, #3]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d034      	beq.n	800ad12 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	7858      	ldrb	r0, [r3, #1]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800acb8:	2301      	movs	r3, #1
 800acba:	697a      	ldr	r2, [r7, #20]
 800acbc:	f7ff fd40 	bl	800a740 <disk_write>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d002      	beq.n	800accc <sync_window+0x38>
			res = FR_DISK_ERR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	73fb      	strb	r3, [r7, #15]
 800acca:	e022      	b.n	800ad12 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd6:	697a      	ldr	r2, [r7, #20]
 800acd8:	1ad2      	subs	r2, r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	69db      	ldr	r3, [r3, #28]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d217      	bcs.n	800ad12 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	789b      	ldrb	r3, [r3, #2]
 800ace6:	613b      	str	r3, [r7, #16]
 800ace8:	e010      	b.n	800ad0c <sync_window+0x78>
					wsect += fs->fsize;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	69db      	ldr	r3, [r3, #28]
 800acee:	697a      	ldr	r2, [r7, #20]
 800acf0:	4413      	add	r3, r2
 800acf2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	7858      	ldrb	r0, [r3, #1]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800acfe:	2301      	movs	r3, #1
 800ad00:	697a      	ldr	r2, [r7, #20]
 800ad02:	f7ff fd1d 	bl	800a740 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	3b01      	subs	r3, #1
 800ad0a:	613b      	str	r3, [r7, #16]
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d8eb      	bhi.n	800acea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ad12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3718      	adds	r7, #24
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ad26:	2300      	movs	r3, #0
 800ad28:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad2e:	683a      	ldr	r2, [r7, #0]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d01b      	beq.n	800ad6c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f7ff ffad 	bl	800ac94 <sync_window>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d113      	bne.n	800ad6c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	7858      	ldrb	r0, [r3, #1]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ad4e:	2301      	movs	r3, #1
 800ad50:	683a      	ldr	r2, [r7, #0]
 800ad52:	f7ff fcd5 	bl	800a700 <disk_read>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d004      	beq.n	800ad66 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ad5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad60:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	683a      	ldr	r2, [r7, #0]
 800ad6a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800ad6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
	...

0800ad78 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f7ff ff87 	bl	800ac94 <sync_window>
 800ad86:	4603      	mov	r3, r0
 800ad88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ad8a:	7bfb      	ldrb	r3, [r7, #15]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d158      	bne.n	800ae42 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	2b03      	cmp	r3, #3
 800ad96:	d148      	bne.n	800ae2a <sync_fs+0xb2>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	791b      	ldrb	r3, [r3, #4]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d144      	bne.n	800ae2a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	3334      	adds	r3, #52	; 0x34
 800ada4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ada8:	2100      	movs	r1, #0
 800adaa:	4618      	mov	r0, r3
 800adac:	f7ff fda9 	bl	800a902 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	3334      	adds	r3, #52	; 0x34
 800adb4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800adb8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7ff fd38 	bl	800a832 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	3334      	adds	r3, #52	; 0x34
 800adc6:	4921      	ldr	r1, [pc, #132]	; (800ae4c <sync_fs+0xd4>)
 800adc8:	4618      	mov	r0, r3
 800adca:	f7ff fd4d 	bl	800a868 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	3334      	adds	r3, #52	; 0x34
 800add2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800add6:	491e      	ldr	r1, [pc, #120]	; (800ae50 <sync_fs+0xd8>)
 800add8:	4618      	mov	r0, r3
 800adda:	f7ff fd45 	bl	800a868 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	3334      	adds	r3, #52	; 0x34
 800ade2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	695b      	ldr	r3, [r3, #20]
 800adea:	4619      	mov	r1, r3
 800adec:	4610      	mov	r0, r2
 800adee:	f7ff fd3b 	bl	800a868 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	3334      	adds	r3, #52	; 0x34
 800adf6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	4619      	mov	r1, r3
 800ae00:	4610      	mov	r0, r2
 800ae02:	f7ff fd31 	bl	800a868 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6a1b      	ldr	r3, [r3, #32]
 800ae0a:	1c5a      	adds	r2, r3, #1
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	7858      	ldrb	r0, [r3, #1]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae1e:	2301      	movs	r3, #1
 800ae20:	f7ff fc8e 	bl	800a740 <disk_write>
			fs->fsi_flag = 0;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	785b      	ldrb	r3, [r3, #1]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	2100      	movs	r1, #0
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7ff fca4 	bl	800a780 <disk_ioctl>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d001      	beq.n	800ae42 <sync_fs+0xca>
 800ae3e:	2301      	movs	r3, #1
 800ae40:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ae42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	41615252 	.word	0x41615252
 800ae50:	61417272 	.word	0x61417272

0800ae54 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	3b02      	subs	r3, #2
 800ae62:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	3b02      	subs	r3, #2
 800ae6a:	683a      	ldr	r2, [r7, #0]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d301      	bcc.n	800ae74 <clust2sect+0x20>
 800ae70:	2300      	movs	r3, #0
 800ae72:	e008      	b.n	800ae86 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	895b      	ldrh	r3, [r3, #10]
 800ae78:	461a      	mov	r2, r3
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	fb03 f202 	mul.w	r2, r3, r2
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae84:	4413      	add	r3, r2
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	370c      	adds	r7, #12
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr

0800ae92 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b086      	sub	sp, #24
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
 800ae9a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d904      	bls.n	800aeb2 <get_fat+0x20>
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	699b      	ldr	r3, [r3, #24]
 800aeac:	683a      	ldr	r2, [r7, #0]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d302      	bcc.n	800aeb8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	617b      	str	r3, [r7, #20]
 800aeb6:	e08f      	b.n	800afd8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800aeb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aebc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	2b03      	cmp	r3, #3
 800aec4:	d062      	beq.n	800af8c <get_fat+0xfa>
 800aec6:	2b03      	cmp	r3, #3
 800aec8:	dc7c      	bgt.n	800afc4 <get_fat+0x132>
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d002      	beq.n	800aed4 <get_fat+0x42>
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d042      	beq.n	800af58 <get_fat+0xc6>
 800aed2:	e077      	b.n	800afc4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	60fb      	str	r3, [r7, #12]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	085b      	lsrs	r3, r3, #1
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	4413      	add	r3, r2
 800aee0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	0a5b      	lsrs	r3, r3, #9
 800aeea:	4413      	add	r3, r2
 800aeec:	4619      	mov	r1, r3
 800aeee:	6938      	ldr	r0, [r7, #16]
 800aef0:	f7ff ff14 	bl	800ad1c <move_window>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d167      	bne.n	800afca <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	1c5a      	adds	r2, r3, #1
 800aefe:	60fa      	str	r2, [r7, #12]
 800af00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af04:	693a      	ldr	r2, [r7, #16]
 800af06:	4413      	add	r3, r2
 800af08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800af0c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	0a5b      	lsrs	r3, r3, #9
 800af16:	4413      	add	r3, r2
 800af18:	4619      	mov	r1, r3
 800af1a:	6938      	ldr	r0, [r7, #16]
 800af1c:	f7ff fefe 	bl	800ad1c <move_window>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d153      	bne.n	800afce <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af2c:	693a      	ldr	r2, [r7, #16]
 800af2e:	4413      	add	r3, r2
 800af30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800af34:	021b      	lsls	r3, r3, #8
 800af36:	461a      	mov	r2, r3
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	f003 0301 	and.w	r3, r3, #1
 800af44:	2b00      	cmp	r3, #0
 800af46:	d002      	beq.n	800af4e <get_fat+0xbc>
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	091b      	lsrs	r3, r3, #4
 800af4c:	e002      	b.n	800af54 <get_fat+0xc2>
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af54:	617b      	str	r3, [r7, #20]
			break;
 800af56:	e03f      	b.n	800afd8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	0a1b      	lsrs	r3, r3, #8
 800af60:	4413      	add	r3, r2
 800af62:	4619      	mov	r1, r3
 800af64:	6938      	ldr	r0, [r7, #16]
 800af66:	f7ff fed9 	bl	800ad1c <move_window>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d130      	bne.n	800afd2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	005b      	lsls	r3, r3, #1
 800af7a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800af7e:	4413      	add	r3, r2
 800af80:	4618      	mov	r0, r3
 800af82:	f7ff fc1b 	bl	800a7bc <ld_word>
 800af86:	4603      	mov	r3, r0
 800af88:	617b      	str	r3, [r7, #20]
			break;
 800af8a:	e025      	b.n	800afd8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	09db      	lsrs	r3, r3, #7
 800af94:	4413      	add	r3, r2
 800af96:	4619      	mov	r1, r3
 800af98:	6938      	ldr	r0, [r7, #16]
 800af9a:	f7ff febf 	bl	800ad1c <move_window>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d118      	bne.n	800afd6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800afb2:	4413      	add	r3, r2
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7ff fc19 	bl	800a7ec <ld_dword>
 800afba:	4603      	mov	r3, r0
 800afbc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800afc0:	617b      	str	r3, [r7, #20]
			break;
 800afc2:	e009      	b.n	800afd8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800afc4:	2301      	movs	r3, #1
 800afc6:	617b      	str	r3, [r7, #20]
 800afc8:	e006      	b.n	800afd8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800afca:	bf00      	nop
 800afcc:	e004      	b.n	800afd8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800afce:	bf00      	nop
 800afd0:	e002      	b.n	800afd8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800afd2:	bf00      	nop
 800afd4:	e000      	b.n	800afd8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800afd6:	bf00      	nop
		}
	}

	return val;
 800afd8:	697b      	ldr	r3, [r7, #20]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3718      	adds	r7, #24
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800afe2:	b590      	push	{r4, r7, lr}
 800afe4:	b089      	sub	sp, #36	; 0x24
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	60f8      	str	r0, [r7, #12]
 800afea:	60b9      	str	r1, [r7, #8]
 800afec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800afee:	2302      	movs	r3, #2
 800aff0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	f240 80d9 	bls.w	800b1ac <put_fat+0x1ca>
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	699b      	ldr	r3, [r3, #24]
 800affe:	68ba      	ldr	r2, [r7, #8]
 800b000:	429a      	cmp	r2, r3
 800b002:	f080 80d3 	bcs.w	800b1ac <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	2b03      	cmp	r3, #3
 800b00c:	f000 8096 	beq.w	800b13c <put_fat+0x15a>
 800b010:	2b03      	cmp	r3, #3
 800b012:	f300 80cb 	bgt.w	800b1ac <put_fat+0x1ca>
 800b016:	2b01      	cmp	r3, #1
 800b018:	d002      	beq.n	800b020 <put_fat+0x3e>
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	d06e      	beq.n	800b0fc <put_fat+0x11a>
 800b01e:	e0c5      	b.n	800b1ac <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	61bb      	str	r3, [r7, #24]
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	085b      	lsrs	r3, r3, #1
 800b028:	69ba      	ldr	r2, [r7, #24]
 800b02a:	4413      	add	r3, r2
 800b02c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	0a5b      	lsrs	r3, r3, #9
 800b036:	4413      	add	r3, r2
 800b038:	4619      	mov	r1, r3
 800b03a:	68f8      	ldr	r0, [r7, #12]
 800b03c:	f7ff fe6e 	bl	800ad1c <move_window>
 800b040:	4603      	mov	r3, r0
 800b042:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b044:	7ffb      	ldrb	r3, [r7, #31]
 800b046:	2b00      	cmp	r3, #0
 800b048:	f040 80a9 	bne.w	800b19e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	1c59      	adds	r1, r3, #1
 800b056:	61b9      	str	r1, [r7, #24]
 800b058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b05c:	4413      	add	r3, r2
 800b05e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	f003 0301 	and.w	r3, r3, #1
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00d      	beq.n	800b086 <put_fat+0xa4>
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	b25b      	sxtb	r3, r3
 800b070:	f003 030f 	and.w	r3, r3, #15
 800b074:	b25a      	sxtb	r2, r3
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	011b      	lsls	r3, r3, #4
 800b07c:	b25b      	sxtb	r3, r3
 800b07e:	4313      	orrs	r3, r2
 800b080:	b25b      	sxtb	r3, r3
 800b082:	b2db      	uxtb	r3, r3
 800b084:	e001      	b.n	800b08a <put_fat+0xa8>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	697a      	ldr	r2, [r7, #20]
 800b08c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2201      	movs	r2, #1
 800b092:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	0a5b      	lsrs	r3, r3, #9
 800b09c:	4413      	add	r3, r2
 800b09e:	4619      	mov	r1, r3
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f7ff fe3b 	bl	800ad1c <move_window>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b0aa:	7ffb      	ldrb	r3, [r7, #31]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d178      	bne.n	800b1a2 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b0b6:	69bb      	ldr	r3, [r7, #24]
 800b0b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0bc:	4413      	add	r3, r2
 800b0be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	f003 0301 	and.w	r3, r3, #1
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d003      	beq.n	800b0d2 <put_fat+0xf0>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	091b      	lsrs	r3, r3, #4
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	e00e      	b.n	800b0f0 <put_fat+0x10e>
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	b25b      	sxtb	r3, r3
 800b0d8:	f023 030f 	bic.w	r3, r3, #15
 800b0dc:	b25a      	sxtb	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	0a1b      	lsrs	r3, r3, #8
 800b0e2:	b25b      	sxtb	r3, r3
 800b0e4:	f003 030f 	and.w	r3, r3, #15
 800b0e8:	b25b      	sxtb	r3, r3
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	b25b      	sxtb	r3, r3
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	697a      	ldr	r2, [r7, #20]
 800b0f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	70da      	strb	r2, [r3, #3]
			break;
 800b0fa:	e057      	b.n	800b1ac <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	0a1b      	lsrs	r3, r3, #8
 800b104:	4413      	add	r3, r2
 800b106:	4619      	mov	r1, r3
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f7ff fe07 	bl	800ad1c <move_window>
 800b10e:	4603      	mov	r3, r0
 800b110:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b112:	7ffb      	ldrb	r3, [r7, #31]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d146      	bne.n	800b1a6 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	005b      	lsls	r3, r3, #1
 800b122:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b126:	4413      	add	r3, r2
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	b292      	uxth	r2, r2
 800b12c:	4611      	mov	r1, r2
 800b12e:	4618      	mov	r0, r3
 800b130:	f7ff fb7f 	bl	800a832 <st_word>
			fs->wflag = 1;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2201      	movs	r2, #1
 800b138:	70da      	strb	r2, [r3, #3]
			break;
 800b13a:	e037      	b.n	800b1ac <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	09db      	lsrs	r3, r3, #7
 800b144:	4413      	add	r3, r2
 800b146:	4619      	mov	r1, r3
 800b148:	68f8      	ldr	r0, [r7, #12]
 800b14a:	f7ff fde7 	bl	800ad1c <move_window>
 800b14e:	4603      	mov	r3, r0
 800b150:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b152:	7ffb      	ldrb	r3, [r7, #31]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d128      	bne.n	800b1aa <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b16c:	4413      	add	r3, r2
 800b16e:	4618      	mov	r0, r3
 800b170:	f7ff fb3c 	bl	800a7ec <ld_dword>
 800b174:	4603      	mov	r3, r0
 800b176:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b17a:	4323      	orrs	r3, r4
 800b17c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b18c:	4413      	add	r3, r2
 800b18e:	6879      	ldr	r1, [r7, #4]
 800b190:	4618      	mov	r0, r3
 800b192:	f7ff fb69 	bl	800a868 <st_dword>
			fs->wflag = 1;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2201      	movs	r2, #1
 800b19a:	70da      	strb	r2, [r3, #3]
			break;
 800b19c:	e006      	b.n	800b1ac <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b19e:	bf00      	nop
 800b1a0:	e004      	b.n	800b1ac <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b1a2:	bf00      	nop
 800b1a4:	e002      	b.n	800b1ac <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b1a6:	bf00      	nop
 800b1a8:	e000      	b.n	800b1ac <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b1aa:	bf00      	nop
		}
	}
	return res;
 800b1ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3724      	adds	r7, #36	; 0x24
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd90      	pop	{r4, r7, pc}

0800b1b6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b088      	sub	sp, #32
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	60f8      	str	r0, [r7, #12]
 800b1be:	60b9      	str	r1, [r7, #8]
 800b1c0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d904      	bls.n	800b1dc <remove_chain+0x26>
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	699b      	ldr	r3, [r3, #24]
 800b1d6:	68ba      	ldr	r2, [r7, #8]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d301      	bcc.n	800b1e0 <remove_chain+0x2a>
 800b1dc:	2302      	movs	r3, #2
 800b1de:	e04b      	b.n	800b278 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d00c      	beq.n	800b200 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b1e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1ea:	6879      	ldr	r1, [r7, #4]
 800b1ec:	69b8      	ldr	r0, [r7, #24]
 800b1ee:	f7ff fef8 	bl	800afe2 <put_fat>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b1f6:	7ffb      	ldrb	r3, [r7, #31]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d001      	beq.n	800b200 <remove_chain+0x4a>
 800b1fc:	7ffb      	ldrb	r3, [r7, #31]
 800b1fe:	e03b      	b.n	800b278 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b200:	68b9      	ldr	r1, [r7, #8]
 800b202:	68f8      	ldr	r0, [r7, #12]
 800b204:	f7ff fe45 	bl	800ae92 <get_fat>
 800b208:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d031      	beq.n	800b274 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	2b01      	cmp	r3, #1
 800b214:	d101      	bne.n	800b21a <remove_chain+0x64>
 800b216:	2302      	movs	r3, #2
 800b218:	e02e      	b.n	800b278 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b220:	d101      	bne.n	800b226 <remove_chain+0x70>
 800b222:	2301      	movs	r3, #1
 800b224:	e028      	b.n	800b278 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b226:	2200      	movs	r2, #0
 800b228:	68b9      	ldr	r1, [r7, #8]
 800b22a:	69b8      	ldr	r0, [r7, #24]
 800b22c:	f7ff fed9 	bl	800afe2 <put_fat>
 800b230:	4603      	mov	r3, r0
 800b232:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b234:	7ffb      	ldrb	r3, [r7, #31]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d001      	beq.n	800b23e <remove_chain+0x88>
 800b23a:	7ffb      	ldrb	r3, [r7, #31]
 800b23c:	e01c      	b.n	800b278 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	695a      	ldr	r2, [r3, #20]
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	699b      	ldr	r3, [r3, #24]
 800b246:	3b02      	subs	r3, #2
 800b248:	429a      	cmp	r2, r3
 800b24a:	d20b      	bcs.n	800b264 <remove_chain+0xae>
			fs->free_clst++;
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	695b      	ldr	r3, [r3, #20]
 800b250:	1c5a      	adds	r2, r3, #1
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	791b      	ldrb	r3, [r3, #4]
 800b25a:	f043 0301 	orr.w	r3, r3, #1
 800b25e:	b2da      	uxtb	r2, r3
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	699b      	ldr	r3, [r3, #24]
 800b26c:	68ba      	ldr	r2, [r7, #8]
 800b26e:	429a      	cmp	r2, r3
 800b270:	d3c6      	bcc.n	800b200 <remove_chain+0x4a>
 800b272:	e000      	b.n	800b276 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b274:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3720      	adds	r7, #32
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b088      	sub	sp, #32
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d10d      	bne.n	800b2b2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	691b      	ldr	r3, [r3, #16]
 800b29a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b29c:	69bb      	ldr	r3, [r7, #24]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d004      	beq.n	800b2ac <create_chain+0x2c>
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	699b      	ldr	r3, [r3, #24]
 800b2a6:	69ba      	ldr	r2, [r7, #24]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d31b      	bcc.n	800b2e4 <create_chain+0x64>
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	61bb      	str	r3, [r7, #24]
 800b2b0:	e018      	b.n	800b2e4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b2b2:	6839      	ldr	r1, [r7, #0]
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f7ff fdec 	bl	800ae92 <get_fat>
 800b2ba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d801      	bhi.n	800b2c6 <create_chain+0x46>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e070      	b.n	800b3a8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2cc:	d101      	bne.n	800b2d2 <create_chain+0x52>
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	e06a      	b.n	800b3a8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	699b      	ldr	r3, [r3, #24]
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d201      	bcs.n	800b2e0 <create_chain+0x60>
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	e063      	b.n	800b3a8 <create_chain+0x128>
		scl = clst;
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b2e4:	69bb      	ldr	r3, [r7, #24]
 800b2e6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	699b      	ldr	r3, [r3, #24]
 800b2f2:	69fa      	ldr	r2, [r7, #28]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d307      	bcc.n	800b308 <create_chain+0x88>
				ncl = 2;
 800b2f8:	2302      	movs	r3, #2
 800b2fa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b2fc:	69fa      	ldr	r2, [r7, #28]
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	429a      	cmp	r2, r3
 800b302:	d901      	bls.n	800b308 <create_chain+0x88>
 800b304:	2300      	movs	r3, #0
 800b306:	e04f      	b.n	800b3a8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b308:	69f9      	ldr	r1, [r7, #28]
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f7ff fdc1 	bl	800ae92 <get_fat>
 800b310:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d00e      	beq.n	800b336 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d003      	beq.n	800b326 <create_chain+0xa6>
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b324:	d101      	bne.n	800b32a <create_chain+0xaa>
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	e03e      	b.n	800b3a8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b32a:	69fa      	ldr	r2, [r7, #28]
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	429a      	cmp	r2, r3
 800b330:	d1da      	bne.n	800b2e8 <create_chain+0x68>
 800b332:	2300      	movs	r3, #0
 800b334:	e038      	b.n	800b3a8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b336:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b33c:	69f9      	ldr	r1, [r7, #28]
 800b33e:	6938      	ldr	r0, [r7, #16]
 800b340:	f7ff fe4f 	bl	800afe2 <put_fat>
 800b344:	4603      	mov	r3, r0
 800b346:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b348:	7dfb      	ldrb	r3, [r7, #23]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d109      	bne.n	800b362 <create_chain+0xe2>
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d006      	beq.n	800b362 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b354:	69fa      	ldr	r2, [r7, #28]
 800b356:	6839      	ldr	r1, [r7, #0]
 800b358:	6938      	ldr	r0, [r7, #16]
 800b35a:	f7ff fe42 	bl	800afe2 <put_fat>
 800b35e:	4603      	mov	r3, r0
 800b360:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b362:	7dfb      	ldrb	r3, [r7, #23]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d116      	bne.n	800b396 <create_chain+0x116>
		fs->last_clst = ncl;
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	69fa      	ldr	r2, [r7, #28]
 800b36c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	695a      	ldr	r2, [r3, #20]
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	699b      	ldr	r3, [r3, #24]
 800b376:	3b02      	subs	r3, #2
 800b378:	429a      	cmp	r2, r3
 800b37a:	d804      	bhi.n	800b386 <create_chain+0x106>
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	695b      	ldr	r3, [r3, #20]
 800b380:	1e5a      	subs	r2, r3, #1
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	791b      	ldrb	r3, [r3, #4]
 800b38a:	f043 0301 	orr.w	r3, r3, #1
 800b38e:	b2da      	uxtb	r2, r3
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	711a      	strb	r2, [r3, #4]
 800b394:	e007      	b.n	800b3a6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b396:	7dfb      	ldrb	r3, [r7, #23]
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d102      	bne.n	800b3a2 <create_chain+0x122>
 800b39c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3a0:	e000      	b.n	800b3a4 <create_chain+0x124>
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b3a6:	69fb      	ldr	r3, [r7, #28]
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3720      	adds	r7, #32
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b086      	sub	sp, #24
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3c6:	d204      	bcs.n	800b3d2 <dir_sdi+0x22>
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	f003 031f 	and.w	r3, r3, #31
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d001      	beq.n	800b3d6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b3d2:	2302      	movs	r3, #2
 800b3d4:	e063      	b.n	800b49e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	683a      	ldr	r2, [r7, #0]
 800b3da:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d106      	bne.n	800b3f6 <dir_sdi+0x46>
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	2b02      	cmp	r3, #2
 800b3ee:	d902      	bls.n	800b3f6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10c      	bne.n	800b416 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	095b      	lsrs	r3, r3, #5
 800b400:	693a      	ldr	r2, [r7, #16]
 800b402:	8912      	ldrh	r2, [r2, #8]
 800b404:	4293      	cmp	r3, r2
 800b406:	d301      	bcc.n	800b40c <dir_sdi+0x5c>
 800b408:	2302      	movs	r3, #2
 800b40a:	e048      	b.n	800b49e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	61da      	str	r2, [r3, #28]
 800b414:	e029      	b.n	800b46a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	895b      	ldrh	r3, [r3, #10]
 800b41a:	025b      	lsls	r3, r3, #9
 800b41c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b41e:	e019      	b.n	800b454 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6979      	ldr	r1, [r7, #20]
 800b424:	4618      	mov	r0, r3
 800b426:	f7ff fd34 	bl	800ae92 <get_fat>
 800b42a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b432:	d101      	bne.n	800b438 <dir_sdi+0x88>
 800b434:	2301      	movs	r3, #1
 800b436:	e032      	b.n	800b49e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d904      	bls.n	800b448 <dir_sdi+0x98>
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	699b      	ldr	r3, [r3, #24]
 800b442:	697a      	ldr	r2, [r7, #20]
 800b444:	429a      	cmp	r2, r3
 800b446:	d301      	bcc.n	800b44c <dir_sdi+0x9c>
 800b448:	2302      	movs	r3, #2
 800b44a:	e028      	b.n	800b49e <dir_sdi+0xee>
			ofs -= csz;
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	1ad3      	subs	r3, r2, r3
 800b452:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b454:	683a      	ldr	r2, [r7, #0]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	429a      	cmp	r2, r3
 800b45a:	d2e1      	bcs.n	800b420 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b45c:	6979      	ldr	r1, [r7, #20]
 800b45e:	6938      	ldr	r0, [r7, #16]
 800b460:	f7ff fcf8 	bl	800ae54 <clust2sect>
 800b464:	4602      	mov	r2, r0
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	697a      	ldr	r2, [r7, #20]
 800b46e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	69db      	ldr	r3, [r3, #28]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d101      	bne.n	800b47c <dir_sdi+0xcc>
 800b478:	2302      	movs	r3, #2
 800b47a:	e010      	b.n	800b49e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	69da      	ldr	r2, [r3, #28]
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	0a5b      	lsrs	r3, r3, #9
 800b484:	441a      	add	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b496:	441a      	add	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b49c:	2300      	movs	r3, #0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3718      	adds	r7, #24
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b086      	sub	sp, #24
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
 800b4ae:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	695b      	ldr	r3, [r3, #20]
 800b4ba:	3320      	adds	r3, #32
 800b4bc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	69db      	ldr	r3, [r3, #28]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d003      	beq.n	800b4ce <dir_next+0x28>
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4cc:	d301      	bcc.n	800b4d2 <dir_next+0x2c>
 800b4ce:	2304      	movs	r3, #4
 800b4d0:	e0aa      	b.n	800b628 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	f040 8098 	bne.w	800b60e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	69db      	ldr	r3, [r3, #28]
 800b4e2:	1c5a      	adds	r2, r3, #1
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	699b      	ldr	r3, [r3, #24]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d10b      	bne.n	800b508 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	095b      	lsrs	r3, r3, #5
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	8912      	ldrh	r2, [r2, #8]
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	f0c0 8088 	bcc.w	800b60e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	61da      	str	r2, [r3, #28]
 800b504:	2304      	movs	r3, #4
 800b506:	e08f      	b.n	800b628 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	0a5b      	lsrs	r3, r3, #9
 800b50c:	68fa      	ldr	r2, [r7, #12]
 800b50e:	8952      	ldrh	r2, [r2, #10]
 800b510:	3a01      	subs	r2, #1
 800b512:	4013      	ands	r3, r2
 800b514:	2b00      	cmp	r3, #0
 800b516:	d17a      	bne.n	800b60e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	699b      	ldr	r3, [r3, #24]
 800b51e:	4619      	mov	r1, r3
 800b520:	4610      	mov	r0, r2
 800b522:	f7ff fcb6 	bl	800ae92 <get_fat>
 800b526:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d801      	bhi.n	800b532 <dir_next+0x8c>
 800b52e:	2302      	movs	r3, #2
 800b530:	e07a      	b.n	800b628 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b538:	d101      	bne.n	800b53e <dir_next+0x98>
 800b53a:	2301      	movs	r3, #1
 800b53c:	e074      	b.n	800b628 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	699b      	ldr	r3, [r3, #24]
 800b542:	697a      	ldr	r2, [r7, #20]
 800b544:	429a      	cmp	r2, r3
 800b546:	d358      	bcc.n	800b5fa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d104      	bne.n	800b558 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	61da      	str	r2, [r3, #28]
 800b554:	2304      	movs	r3, #4
 800b556:	e067      	b.n	800b628 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	699b      	ldr	r3, [r3, #24]
 800b55e:	4619      	mov	r1, r3
 800b560:	4610      	mov	r0, r2
 800b562:	f7ff fe8d 	bl	800b280 <create_chain>
 800b566:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d101      	bne.n	800b572 <dir_next+0xcc>
 800b56e:	2307      	movs	r3, #7
 800b570:	e05a      	b.n	800b628 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	2b01      	cmp	r3, #1
 800b576:	d101      	bne.n	800b57c <dir_next+0xd6>
 800b578:	2302      	movs	r3, #2
 800b57a:	e055      	b.n	800b628 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b582:	d101      	bne.n	800b588 <dir_next+0xe2>
 800b584:	2301      	movs	r3, #1
 800b586:	e04f      	b.n	800b628 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f7ff fb83 	bl	800ac94 <sync_window>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d001      	beq.n	800b598 <dir_next+0xf2>
 800b594:	2301      	movs	r3, #1
 800b596:	e047      	b.n	800b628 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	3334      	adds	r3, #52	; 0x34
 800b59c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7ff f9ad 	bl	800a902 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	613b      	str	r3, [r7, #16]
 800b5ac:	6979      	ldr	r1, [r7, #20]
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f7ff fc50 	bl	800ae54 <clust2sect>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	631a      	str	r2, [r3, #48]	; 0x30
 800b5ba:	e012      	b.n	800b5e2 <dir_next+0x13c>
						fs->wflag = 1;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b5c2:	68f8      	ldr	r0, [r7, #12]
 800b5c4:	f7ff fb66 	bl	800ac94 <sync_window>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d001      	beq.n	800b5d2 <dir_next+0x12c>
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e02a      	b.n	800b628 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	613b      	str	r3, [r7, #16]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5dc:	1c5a      	adds	r2, r3, #1
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	631a      	str	r2, [r3, #48]	; 0x30
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	895b      	ldrh	r3, [r3, #10]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d3e6      	bcc.n	800b5bc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	1ad2      	subs	r2, r2, r3
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	697a      	ldr	r2, [r7, #20]
 800b5fe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b600:	6979      	ldr	r1, [r7, #20]
 800b602:	68f8      	ldr	r0, [r7, #12]
 800b604:	f7ff fc26 	bl	800ae54 <clust2sect>
 800b608:	4602      	mov	r2, r0
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b620:	441a      	add	r2, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b626:	2300      	movs	r3, #0
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3718      	adds	r7, #24
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b640:	2100      	movs	r1, #0
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f7ff feb4 	bl	800b3b0 <dir_sdi>
 800b648:	4603      	mov	r3, r0
 800b64a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b64c:	7dfb      	ldrb	r3, [r7, #23]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d12b      	bne.n	800b6aa <dir_alloc+0x7a>
		n = 0;
 800b652:	2300      	movs	r3, #0
 800b654:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	69db      	ldr	r3, [r3, #28]
 800b65a:	4619      	mov	r1, r3
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	f7ff fb5d 	bl	800ad1c <move_window>
 800b662:	4603      	mov	r3, r0
 800b664:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b666:	7dfb      	ldrb	r3, [r7, #23]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d11d      	bne.n	800b6a8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a1b      	ldr	r3, [r3, #32]
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	2be5      	cmp	r3, #229	; 0xe5
 800b674:	d004      	beq.n	800b680 <dir_alloc+0x50>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a1b      	ldr	r3, [r3, #32]
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d107      	bne.n	800b690 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	3301      	adds	r3, #1
 800b684:	613b      	str	r3, [r7, #16]
 800b686:	693a      	ldr	r2, [r7, #16]
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d102      	bne.n	800b694 <dir_alloc+0x64>
 800b68e:	e00c      	b.n	800b6aa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b690:	2300      	movs	r3, #0
 800b692:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b694:	2101      	movs	r1, #1
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f7ff ff05 	bl	800b4a6 <dir_next>
 800b69c:	4603      	mov	r3, r0
 800b69e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b6a0:	7dfb      	ldrb	r3, [r7, #23]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d0d7      	beq.n	800b656 <dir_alloc+0x26>
 800b6a6:	e000      	b.n	800b6aa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b6a8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b6aa:	7dfb      	ldrb	r3, [r7, #23]
 800b6ac:	2b04      	cmp	r3, #4
 800b6ae:	d101      	bne.n	800b6b4 <dir_alloc+0x84>
 800b6b0:	2307      	movs	r3, #7
 800b6b2:	75fb      	strb	r3, [r7, #23]
	return res;
 800b6b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3718      	adds	r7, #24
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b084      	sub	sp, #16
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
 800b6c6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	331a      	adds	r3, #26
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7ff f875 	bl	800a7bc <ld_word>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	2b03      	cmp	r3, #3
 800b6dc:	d109      	bne.n	800b6f2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	3314      	adds	r3, #20
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7ff f86a 	bl	800a7bc <ld_word>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	041b      	lsls	r3, r3, #16
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3710      	adds	r7, #16
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	331a      	adds	r3, #26
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	b292      	uxth	r2, r2
 800b710:	4611      	mov	r1, r2
 800b712:	4618      	mov	r0, r3
 800b714:	f7ff f88d 	bl	800a832 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	2b03      	cmp	r3, #3
 800b71e:	d109      	bne.n	800b734 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	f103 0214 	add.w	r2, r3, #20
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	0c1b      	lsrs	r3, r3, #16
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	4619      	mov	r1, r3
 800b72e:	4610      	mov	r0, r2
 800b730:	f7ff f87f 	bl	800a832 <st_word>
	}
}
 800b734:	bf00      	nop
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b73c:	b590      	push	{r4, r7, lr}
 800b73e:	b087      	sub	sp, #28
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	331a      	adds	r3, #26
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7ff f836 	bl	800a7bc <ld_word>
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d001      	beq.n	800b75a <cmp_lfn+0x1e>
 800b756:	2300      	movs	r3, #0
 800b758:	e059      	b.n	800b80e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b762:	1e5a      	subs	r2, r3, #1
 800b764:	4613      	mov	r3, r2
 800b766:	005b      	lsls	r3, r3, #1
 800b768:	4413      	add	r3, r2
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	4413      	add	r3, r2
 800b76e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b770:	2301      	movs	r3, #1
 800b772:	81fb      	strh	r3, [r7, #14]
 800b774:	2300      	movs	r3, #0
 800b776:	613b      	str	r3, [r7, #16]
 800b778:	e033      	b.n	800b7e2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b77a:	4a27      	ldr	r2, [pc, #156]	; (800b818 <cmp_lfn+0xdc>)
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	4413      	add	r3, r2
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	461a      	mov	r2, r3
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	4413      	add	r3, r2
 800b788:	4618      	mov	r0, r3
 800b78a:	f7ff f817 	bl	800a7bc <ld_word>
 800b78e:	4603      	mov	r3, r0
 800b790:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b792:	89fb      	ldrh	r3, [r7, #14]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d01a      	beq.n	800b7ce <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	2bfe      	cmp	r3, #254	; 0xfe
 800b79c:	d812      	bhi.n	800b7c4 <cmp_lfn+0x88>
 800b79e:	89bb      	ldrh	r3, [r7, #12]
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f002 f86f 	bl	800d884 <ff_wtoupper>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	461c      	mov	r4, r3
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	1c5a      	adds	r2, r3, #1
 800b7ae:	617a      	str	r2, [r7, #20]
 800b7b0:	005b      	lsls	r3, r3, #1
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	881b      	ldrh	r3, [r3, #0]
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f002 f863 	bl	800d884 <ff_wtoupper>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	429c      	cmp	r4, r3
 800b7c2:	d001      	beq.n	800b7c8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	e022      	b.n	800b80e <cmp_lfn+0xd2>
			}
			wc = uc;
 800b7c8:	89bb      	ldrh	r3, [r7, #12]
 800b7ca:	81fb      	strh	r3, [r7, #14]
 800b7cc:	e006      	b.n	800b7dc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b7ce:	89bb      	ldrh	r3, [r7, #12]
 800b7d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d001      	beq.n	800b7dc <cmp_lfn+0xa0>
 800b7d8:	2300      	movs	r3, #0
 800b7da:	e018      	b.n	800b80e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	613b      	str	r3, [r7, #16]
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	2b0c      	cmp	r3, #12
 800b7e6:	d9c8      	bls.n	800b77a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d00b      	beq.n	800b80c <cmp_lfn+0xd0>
 800b7f4:	89fb      	ldrh	r3, [r7, #14]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d008      	beq.n	800b80c <cmp_lfn+0xd0>
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	005b      	lsls	r3, r3, #1
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	4413      	add	r3, r2
 800b802:	881b      	ldrh	r3, [r3, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d001      	beq.n	800b80c <cmp_lfn+0xd0>
 800b808:	2300      	movs	r3, #0
 800b80a:	e000      	b.n	800b80e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b80c:	2301      	movs	r3, #1
}
 800b80e:	4618      	mov	r0, r3
 800b810:	371c      	adds	r7, #28
 800b812:	46bd      	mov	sp, r7
 800b814:	bd90      	pop	{r4, r7, pc}
 800b816:	bf00      	nop
 800b818:	0800db00 	.word	0x0800db00

0800b81c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b086      	sub	sp, #24
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	331a      	adds	r3, #26
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fe ffc6 	bl	800a7bc <ld_word>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d001      	beq.n	800b83a <pick_lfn+0x1e>
 800b836:	2300      	movs	r3, #0
 800b838:	e04d      	b.n	800b8d6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b842:	1e5a      	subs	r2, r3, #1
 800b844:	4613      	mov	r3, r2
 800b846:	005b      	lsls	r3, r3, #1
 800b848:	4413      	add	r3, r2
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	4413      	add	r3, r2
 800b84e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b850:	2301      	movs	r3, #1
 800b852:	81fb      	strh	r3, [r7, #14]
 800b854:	2300      	movs	r3, #0
 800b856:	613b      	str	r3, [r7, #16]
 800b858:	e028      	b.n	800b8ac <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b85a:	4a21      	ldr	r2, [pc, #132]	; (800b8e0 <pick_lfn+0xc4>)
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	4413      	add	r3, r2
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	461a      	mov	r2, r3
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	4413      	add	r3, r2
 800b868:	4618      	mov	r0, r3
 800b86a:	f7fe ffa7 	bl	800a7bc <ld_word>
 800b86e:	4603      	mov	r3, r0
 800b870:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b872:	89fb      	ldrh	r3, [r7, #14]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00f      	beq.n	800b898 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	2bfe      	cmp	r3, #254	; 0xfe
 800b87c:	d901      	bls.n	800b882 <pick_lfn+0x66>
 800b87e:	2300      	movs	r3, #0
 800b880:	e029      	b.n	800b8d6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b882:	89bb      	ldrh	r3, [r7, #12]
 800b884:	81fb      	strh	r3, [r7, #14]
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	1c5a      	adds	r2, r3, #1
 800b88a:	617a      	str	r2, [r7, #20]
 800b88c:	005b      	lsls	r3, r3, #1
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	4413      	add	r3, r2
 800b892:	89fa      	ldrh	r2, [r7, #14]
 800b894:	801a      	strh	r2, [r3, #0]
 800b896:	e006      	b.n	800b8a6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b898:	89bb      	ldrh	r3, [r7, #12]
 800b89a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d001      	beq.n	800b8a6 <pick_lfn+0x8a>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	e017      	b.n	800b8d6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	613b      	str	r3, [r7, #16]
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	2b0c      	cmp	r3, #12
 800b8b0:	d9d3      	bls.n	800b85a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00a      	beq.n	800b8d4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	2bfe      	cmp	r3, #254	; 0xfe
 800b8c2:	d901      	bls.n	800b8c8 <pick_lfn+0xac>
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	e006      	b.n	800b8d6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	005b      	lsls	r3, r3, #1
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	4413      	add	r3, r2
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b8d4:	2301      	movs	r3, #1
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3718      	adds	r7, #24
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	0800db00 	.word	0x0800db00

0800b8e4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b088      	sub	sp, #32
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	4611      	mov	r1, r2
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	71fb      	strb	r3, [r7, #7]
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	330d      	adds	r3, #13
 800b8fe:	79ba      	ldrb	r2, [r7, #6]
 800b900:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	330b      	adds	r3, #11
 800b906:	220f      	movs	r2, #15
 800b908:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	330c      	adds	r3, #12
 800b90e:	2200      	movs	r2, #0
 800b910:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	331a      	adds	r3, #26
 800b916:	2100      	movs	r1, #0
 800b918:	4618      	mov	r0, r3
 800b91a:	f7fe ff8a 	bl	800a832 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b91e:	79fb      	ldrb	r3, [r7, #7]
 800b920:	1e5a      	subs	r2, r3, #1
 800b922:	4613      	mov	r3, r2
 800b924:	005b      	lsls	r3, r3, #1
 800b926:	4413      	add	r3, r2
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	4413      	add	r3, r2
 800b92c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b92e:	2300      	movs	r3, #0
 800b930:	82fb      	strh	r3, [r7, #22]
 800b932:	2300      	movs	r3, #0
 800b934:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b936:	8afb      	ldrh	r3, [r7, #22]
 800b938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d007      	beq.n	800b950 <put_lfn+0x6c>
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	1c5a      	adds	r2, r3, #1
 800b944:	61fa      	str	r2, [r7, #28]
 800b946:	005b      	lsls	r3, r3, #1
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	4413      	add	r3, r2
 800b94c:	881b      	ldrh	r3, [r3, #0]
 800b94e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b950:	4a17      	ldr	r2, [pc, #92]	; (800b9b0 <put_lfn+0xcc>)
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	4413      	add	r3, r2
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	461a      	mov	r2, r3
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	4413      	add	r3, r2
 800b95e:	8afa      	ldrh	r2, [r7, #22]
 800b960:	4611      	mov	r1, r2
 800b962:	4618      	mov	r0, r3
 800b964:	f7fe ff65 	bl	800a832 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b968:	8afb      	ldrh	r3, [r7, #22]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d102      	bne.n	800b974 <put_lfn+0x90>
 800b96e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b972:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	3301      	adds	r3, #1
 800b978:	61bb      	str	r3, [r7, #24]
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	2b0c      	cmp	r3, #12
 800b97e:	d9da      	bls.n	800b936 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b980:	8afb      	ldrh	r3, [r7, #22]
 800b982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b986:	4293      	cmp	r3, r2
 800b988:	d006      	beq.n	800b998 <put_lfn+0xb4>
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	005b      	lsls	r3, r3, #1
 800b98e:	68fa      	ldr	r2, [r7, #12]
 800b990:	4413      	add	r3, r2
 800b992:	881b      	ldrh	r3, [r3, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d103      	bne.n	800b9a0 <put_lfn+0xbc>
 800b998:	79fb      	ldrb	r3, [r7, #7]
 800b99a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b99e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	79fa      	ldrb	r2, [r7, #7]
 800b9a4:	701a      	strb	r2, [r3, #0]
}
 800b9a6:	bf00      	nop
 800b9a8:	3720      	adds	r7, #32
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	0800db00 	.word	0x0800db00

0800b9b4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b08c      	sub	sp, #48	; 0x30
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
 800b9c0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b9c2:	220b      	movs	r2, #11
 800b9c4:	68b9      	ldr	r1, [r7, #8]
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f7fe ff7a 	bl	800a8c0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	2b05      	cmp	r3, #5
 800b9d0:	d929      	bls.n	800ba26 <gen_numname+0x72>
		sr = seq;
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b9d6:	e020      	b.n	800ba1a <gen_numname+0x66>
			wc = *lfn++;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	1c9a      	adds	r2, r3, #2
 800b9dc:	607a      	str	r2, [r7, #4]
 800b9de:	881b      	ldrh	r3, [r3, #0]
 800b9e0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9e6:	e015      	b.n	800ba14 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	005a      	lsls	r2, r3, #1
 800b9ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b9ee:	f003 0301 	and.w	r3, r3, #1
 800b9f2:	4413      	add	r3, r2
 800b9f4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b9f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b9f8:	085b      	lsrs	r3, r3, #1
 800b9fa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d003      	beq.n	800ba0e <gen_numname+0x5a>
 800ba06:	69fa      	ldr	r2, [r7, #28]
 800ba08:	4b30      	ldr	r3, [pc, #192]	; (800bacc <gen_numname+0x118>)
 800ba0a:	4053      	eors	r3, r2
 800ba0c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ba0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba10:	3301      	adds	r3, #1
 800ba12:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba16:	2b0f      	cmp	r3, #15
 800ba18:	d9e6      	bls.n	800b9e8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	881b      	ldrh	r3, [r3, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d1da      	bne.n	800b9d8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ba22:	69fb      	ldr	r3, [r7, #28]
 800ba24:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ba26:	2307      	movs	r3, #7
 800ba28:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	f003 030f 	and.w	r3, r3, #15
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	3330      	adds	r3, #48	; 0x30
 800ba36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ba3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba3e:	2b39      	cmp	r3, #57	; 0x39
 800ba40:	d904      	bls.n	800ba4c <gen_numname+0x98>
 800ba42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba46:	3307      	adds	r3, #7
 800ba48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ba4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4e:	1e5a      	subs	r2, r3, #1
 800ba50:	62ba      	str	r2, [r7, #40]	; 0x28
 800ba52:	3330      	adds	r3, #48	; 0x30
 800ba54:	443b      	add	r3, r7
 800ba56:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ba5a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	091b      	lsrs	r3, r3, #4
 800ba62:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d1df      	bne.n	800ba2a <gen_numname+0x76>
	ns[i] = '~';
 800ba6a:	f107 0214 	add.w	r2, r7, #20
 800ba6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba70:	4413      	add	r3, r2
 800ba72:	227e      	movs	r2, #126	; 0x7e
 800ba74:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ba76:	2300      	movs	r3, #0
 800ba78:	627b      	str	r3, [r7, #36]	; 0x24
 800ba7a:	e002      	b.n	800ba82 <gen_numname+0xce>
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7e:	3301      	adds	r3, #1
 800ba80:	627b      	str	r3, [r7, #36]	; 0x24
 800ba82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d205      	bcs.n	800ba96 <gen_numname+0xe2>
 800ba8a:	68fa      	ldr	r2, [r7, #12]
 800ba8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8e:	4413      	add	r3, r2
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	2b20      	cmp	r3, #32
 800ba94:	d1f2      	bne.n	800ba7c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ba96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba98:	2b07      	cmp	r3, #7
 800ba9a:	d807      	bhi.n	800baac <gen_numname+0xf8>
 800ba9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9e:	1c5a      	adds	r2, r3, #1
 800baa0:	62ba      	str	r2, [r7, #40]	; 0x28
 800baa2:	3330      	adds	r3, #48	; 0x30
 800baa4:	443b      	add	r3, r7
 800baa6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800baaa:	e000      	b.n	800baae <gen_numname+0xfa>
 800baac:	2120      	movs	r1, #32
 800baae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab0:	1c5a      	adds	r2, r3, #1
 800bab2:	627a      	str	r2, [r7, #36]	; 0x24
 800bab4:	68fa      	ldr	r2, [r7, #12]
 800bab6:	4413      	add	r3, r2
 800bab8:	460a      	mov	r2, r1
 800baba:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800babc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babe:	2b07      	cmp	r3, #7
 800bac0:	d9e9      	bls.n	800ba96 <gen_numname+0xe2>
}
 800bac2:	bf00      	nop
 800bac4:	bf00      	nop
 800bac6:	3730      	adds	r7, #48	; 0x30
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	00011021 	.word	0x00011021

0800bad0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bad8:	2300      	movs	r3, #0
 800bada:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800badc:	230b      	movs	r3, #11
 800bade:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bae0:	7bfb      	ldrb	r3, [r7, #15]
 800bae2:	b2da      	uxtb	r2, r3
 800bae4:	0852      	lsrs	r2, r2, #1
 800bae6:	01db      	lsls	r3, r3, #7
 800bae8:	4313      	orrs	r3, r2
 800baea:	b2da      	uxtb	r2, r3
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	1c59      	adds	r1, r3, #1
 800baf0:	6079      	str	r1, [r7, #4]
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	4413      	add	r3, r2
 800baf6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	3b01      	subs	r3, #1
 800bafc:	60bb      	str	r3, [r7, #8]
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1ed      	bne.n	800bae0 <sum_sfn+0x10>
	return sum;
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3714      	adds	r7, #20
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr

0800bb12 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b086      	sub	sp, #24
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
 800bb1a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800bb1c:	2304      	movs	r3, #4
 800bb1e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800bb26:	23ff      	movs	r3, #255	; 0xff
 800bb28:	757b      	strb	r3, [r7, #21]
 800bb2a:	23ff      	movs	r3, #255	; 0xff
 800bb2c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800bb2e:	e081      	b.n	800bc34 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	69db      	ldr	r3, [r3, #28]
 800bb34:	4619      	mov	r1, r3
 800bb36:	6938      	ldr	r0, [r7, #16]
 800bb38:	f7ff f8f0 	bl	800ad1c <move_window>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bb40:	7dfb      	ldrb	r3, [r7, #23]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d17c      	bne.n	800bc40 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6a1b      	ldr	r3, [r3, #32]
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800bb4e:	7dbb      	ldrb	r3, [r7, #22]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d102      	bne.n	800bb5a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800bb54:	2304      	movs	r3, #4
 800bb56:	75fb      	strb	r3, [r7, #23]
 800bb58:	e077      	b.n	800bc4a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6a1b      	ldr	r3, [r3, #32]
 800bb5e:	330b      	adds	r3, #11
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb66:	73fb      	strb	r3, [r7, #15]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	7bfa      	ldrb	r2, [r7, #15]
 800bb6c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800bb6e:	7dbb      	ldrb	r3, [r7, #22]
 800bb70:	2be5      	cmp	r3, #229	; 0xe5
 800bb72:	d00e      	beq.n	800bb92 <dir_read+0x80>
 800bb74:	7dbb      	ldrb	r3, [r7, #22]
 800bb76:	2b2e      	cmp	r3, #46	; 0x2e
 800bb78:	d00b      	beq.n	800bb92 <dir_read+0x80>
 800bb7a:	7bfb      	ldrb	r3, [r7, #15]
 800bb7c:	f023 0320 	bic.w	r3, r3, #32
 800bb80:	2b08      	cmp	r3, #8
 800bb82:	bf0c      	ite	eq
 800bb84:	2301      	moveq	r3, #1
 800bb86:	2300      	movne	r3, #0
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d002      	beq.n	800bb98 <dir_read+0x86>
				ord = 0xFF;
 800bb92:	23ff      	movs	r3, #255	; 0xff
 800bb94:	757b      	strb	r3, [r7, #21]
 800bb96:	e044      	b.n	800bc22 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800bb98:	7bfb      	ldrb	r3, [r7, #15]
 800bb9a:	2b0f      	cmp	r3, #15
 800bb9c:	d12f      	bne.n	800bbfe <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800bb9e:	7dbb      	ldrb	r3, [r7, #22]
 800bba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d00d      	beq.n	800bbc4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6a1b      	ldr	r3, [r3, #32]
 800bbac:	7b5b      	ldrb	r3, [r3, #13]
 800bbae:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800bbb0:	7dbb      	ldrb	r3, [r7, #22]
 800bbb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbb6:	75bb      	strb	r3, [r7, #22]
 800bbb8:	7dbb      	ldrb	r3, [r7, #22]
 800bbba:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	695a      	ldr	r2, [r3, #20]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bbc4:	7dba      	ldrb	r2, [r7, #22]
 800bbc6:	7d7b      	ldrb	r3, [r7, #21]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d115      	bne.n	800bbf8 <dir_read+0xe6>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6a1b      	ldr	r3, [r3, #32]
 800bbd0:	330d      	adds	r3, #13
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	7d3a      	ldrb	r2, [r7, #20]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d10e      	bne.n	800bbf8 <dir_read+0xe6>
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	68da      	ldr	r2, [r3, #12]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a1b      	ldr	r3, [r3, #32]
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	4610      	mov	r0, r2
 800bbe6:	f7ff fe19 	bl	800b81c <pick_lfn>
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d003      	beq.n	800bbf8 <dir_read+0xe6>
 800bbf0:	7d7b      	ldrb	r3, [r7, #21]
 800bbf2:	3b01      	subs	r3, #1
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	e000      	b.n	800bbfa <dir_read+0xe8>
 800bbf8:	23ff      	movs	r3, #255	; 0xff
 800bbfa:	757b      	strb	r3, [r7, #21]
 800bbfc:	e011      	b.n	800bc22 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800bbfe:	7d7b      	ldrb	r3, [r7, #21]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d109      	bne.n	800bc18 <dir_read+0x106>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6a1b      	ldr	r3, [r3, #32]
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f7ff ff61 	bl	800bad0 <sum_sfn>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	461a      	mov	r2, r3
 800bc12:	7d3b      	ldrb	r3, [r7, #20]
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d015      	beq.n	800bc44 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc1e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800bc20:	e010      	b.n	800bc44 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800bc22:	2100      	movs	r1, #0
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f7ff fc3e 	bl	800b4a6 <dir_next>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bc2e:	7dfb      	ldrb	r3, [r7, #23]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d109      	bne.n	800bc48 <dir_read+0x136>
	while (dp->sect) {
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	69db      	ldr	r3, [r3, #28]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f47f af79 	bne.w	800bb30 <dir_read+0x1e>
 800bc3e:	e004      	b.n	800bc4a <dir_read+0x138>
		if (res != FR_OK) break;
 800bc40:	bf00      	nop
 800bc42:	e002      	b.n	800bc4a <dir_read+0x138>
					break;
 800bc44:	bf00      	nop
 800bc46:	e000      	b.n	800bc4a <dir_read+0x138>
		if (res != FR_OK) break;
 800bc48:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800bc4a:	7dfb      	ldrb	r3, [r7, #23]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d002      	beq.n	800bc56 <dir_read+0x144>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	61da      	str	r2, [r3, #28]
	return res;
 800bc56:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3718      	adds	r7, #24
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bc6e:	2100      	movs	r1, #0
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f7ff fb9d 	bl	800b3b0 <dir_sdi>
 800bc76:	4603      	mov	r3, r0
 800bc78:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bc7a:	7dfb      	ldrb	r3, [r7, #23]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d001      	beq.n	800bc84 <dir_find+0x24>
 800bc80:	7dfb      	ldrb	r3, [r7, #23]
 800bc82:	e0a9      	b.n	800bdd8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bc84:	23ff      	movs	r3, #255	; 0xff
 800bc86:	753b      	strb	r3, [r7, #20]
 800bc88:	7d3b      	ldrb	r3, [r7, #20]
 800bc8a:	757b      	strb	r3, [r7, #21]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc92:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	69db      	ldr	r3, [r3, #28]
 800bc98:	4619      	mov	r1, r3
 800bc9a:	6938      	ldr	r0, [r7, #16]
 800bc9c:	f7ff f83e 	bl	800ad1c <move_window>
 800bca0:	4603      	mov	r3, r0
 800bca2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bca4:	7dfb      	ldrb	r3, [r7, #23]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	f040 8090 	bne.w	800bdcc <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6a1b      	ldr	r3, [r3, #32]
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bcb4:	7dbb      	ldrb	r3, [r7, #22]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d102      	bne.n	800bcc0 <dir_find+0x60>
 800bcba:	2304      	movs	r3, #4
 800bcbc:	75fb      	strb	r3, [r7, #23]
 800bcbe:	e08a      	b.n	800bdd6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6a1b      	ldr	r3, [r3, #32]
 800bcc4:	330b      	adds	r3, #11
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bccc:	73fb      	strb	r3, [r7, #15]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	7bfa      	ldrb	r2, [r7, #15]
 800bcd2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bcd4:	7dbb      	ldrb	r3, [r7, #22]
 800bcd6:	2be5      	cmp	r3, #229	; 0xe5
 800bcd8:	d007      	beq.n	800bcea <dir_find+0x8a>
 800bcda:	7bfb      	ldrb	r3, [r7, #15]
 800bcdc:	f003 0308 	and.w	r3, r3, #8
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d009      	beq.n	800bcf8 <dir_find+0x98>
 800bce4:	7bfb      	ldrb	r3, [r7, #15]
 800bce6:	2b0f      	cmp	r3, #15
 800bce8:	d006      	beq.n	800bcf8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bcea:	23ff      	movs	r3, #255	; 0xff
 800bcec:	757b      	strb	r3, [r7, #21]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bcf4:	631a      	str	r2, [r3, #48]	; 0x30
 800bcf6:	e05e      	b.n	800bdb6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bcf8:	7bfb      	ldrb	r3, [r7, #15]
 800bcfa:	2b0f      	cmp	r3, #15
 800bcfc:	d136      	bne.n	800bd6c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bd04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d154      	bne.n	800bdb6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bd0c:	7dbb      	ldrb	r3, [r7, #22]
 800bd0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00d      	beq.n	800bd32 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6a1b      	ldr	r3, [r3, #32]
 800bd1a:	7b5b      	ldrb	r3, [r3, #13]
 800bd1c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bd1e:	7dbb      	ldrb	r3, [r7, #22]
 800bd20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd24:	75bb      	strb	r3, [r7, #22]
 800bd26:	7dbb      	ldrb	r3, [r7, #22]
 800bd28:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	695a      	ldr	r2, [r3, #20]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bd32:	7dba      	ldrb	r2, [r7, #22]
 800bd34:	7d7b      	ldrb	r3, [r7, #21]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d115      	bne.n	800bd66 <dir_find+0x106>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a1b      	ldr	r3, [r3, #32]
 800bd3e:	330d      	adds	r3, #13
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	7d3a      	ldrb	r2, [r7, #20]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d10e      	bne.n	800bd66 <dir_find+0x106>
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	68da      	ldr	r2, [r3, #12]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6a1b      	ldr	r3, [r3, #32]
 800bd50:	4619      	mov	r1, r3
 800bd52:	4610      	mov	r0, r2
 800bd54:	f7ff fcf2 	bl	800b73c <cmp_lfn>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d003      	beq.n	800bd66 <dir_find+0x106>
 800bd5e:	7d7b      	ldrb	r3, [r7, #21]
 800bd60:	3b01      	subs	r3, #1
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	e000      	b.n	800bd68 <dir_find+0x108>
 800bd66:	23ff      	movs	r3, #255	; 0xff
 800bd68:	757b      	strb	r3, [r7, #21]
 800bd6a:	e024      	b.n	800bdb6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bd6c:	7d7b      	ldrb	r3, [r7, #21]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d109      	bne.n	800bd86 <dir_find+0x126>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6a1b      	ldr	r3, [r3, #32]
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7ff feaa 	bl	800bad0 <sum_sfn>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	461a      	mov	r2, r3
 800bd80:	7d3b      	ldrb	r3, [r7, #20]
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d024      	beq.n	800bdd0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bd8c:	f003 0301 	and.w	r3, r3, #1
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10a      	bne.n	800bdaa <dir_find+0x14a>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6a18      	ldr	r0, [r3, #32]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	3324      	adds	r3, #36	; 0x24
 800bd9c:	220b      	movs	r2, #11
 800bd9e:	4619      	mov	r1, r3
 800bda0:	f7fe fdca 	bl	800a938 <mem_cmp>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d014      	beq.n	800bdd4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bdaa:	23ff      	movs	r3, #255	; 0xff
 800bdac:	757b      	strb	r3, [r7, #21]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bdb4:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bdb6:	2100      	movs	r1, #0
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f7ff fb74 	bl	800b4a6 <dir_next>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bdc2:	7dfb      	ldrb	r3, [r7, #23]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f43f af65 	beq.w	800bc94 <dir_find+0x34>
 800bdca:	e004      	b.n	800bdd6 <dir_find+0x176>
		if (res != FR_OK) break;
 800bdcc:	bf00      	nop
 800bdce:	e002      	b.n	800bdd6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bdd0:	bf00      	nop
 800bdd2:	e000      	b.n	800bdd6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bdd4:	bf00      	nop

	return res;
 800bdd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3718      	adds	r7, #24
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b08c      	sub	sp, #48	; 0x30
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bdf4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d001      	beq.n	800be00 <dir_register+0x20>
 800bdfc:	2306      	movs	r3, #6
 800bdfe:	e0e0      	b.n	800bfc2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800be00:	2300      	movs	r3, #0
 800be02:	627b      	str	r3, [r7, #36]	; 0x24
 800be04:	e002      	b.n	800be0c <dir_register+0x2c>
 800be06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be08:	3301      	adds	r3, #1
 800be0a:	627b      	str	r3, [r7, #36]	; 0x24
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	68da      	ldr	r2, [r3, #12]
 800be10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be12:	005b      	lsls	r3, r3, #1
 800be14:	4413      	add	r3, r2
 800be16:	881b      	ldrh	r3, [r3, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1f4      	bne.n	800be06 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800be22:	f107 030c 	add.w	r3, r7, #12
 800be26:	220c      	movs	r2, #12
 800be28:	4618      	mov	r0, r3
 800be2a:	f7fe fd49 	bl	800a8c0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800be2e:	7dfb      	ldrb	r3, [r7, #23]
 800be30:	f003 0301 	and.w	r3, r3, #1
 800be34:	2b00      	cmp	r3, #0
 800be36:	d032      	beq.n	800be9e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2240      	movs	r2, #64	; 0x40
 800be3c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800be40:	2301      	movs	r3, #1
 800be42:	62bb      	str	r3, [r7, #40]	; 0x28
 800be44:	e016      	b.n	800be74 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	68da      	ldr	r2, [r3, #12]
 800be50:	f107 010c 	add.w	r1, r7, #12
 800be54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be56:	f7ff fdad 	bl	800b9b4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f7ff ff00 	bl	800bc60 <dir_find>
 800be60:	4603      	mov	r3, r0
 800be62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800be66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d106      	bne.n	800be7c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800be6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be70:	3301      	adds	r3, #1
 800be72:	62bb      	str	r3, [r7, #40]	; 0x28
 800be74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be76:	2b63      	cmp	r3, #99	; 0x63
 800be78:	d9e5      	bls.n	800be46 <dir_register+0x66>
 800be7a:	e000      	b.n	800be7e <dir_register+0x9e>
			if (res != FR_OK) break;
 800be7c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800be7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be80:	2b64      	cmp	r3, #100	; 0x64
 800be82:	d101      	bne.n	800be88 <dir_register+0xa8>
 800be84:	2307      	movs	r3, #7
 800be86:	e09c      	b.n	800bfc2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800be88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be8c:	2b04      	cmp	r3, #4
 800be8e:	d002      	beq.n	800be96 <dir_register+0xb6>
 800be90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be94:	e095      	b.n	800bfc2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800be96:	7dfa      	ldrb	r2, [r7, #23]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800be9e:	7dfb      	ldrb	r3, [r7, #23]
 800bea0:	f003 0302 	and.w	r3, r3, #2
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d007      	beq.n	800beb8 <dir_register+0xd8>
 800bea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beaa:	330c      	adds	r3, #12
 800beac:	4a47      	ldr	r2, [pc, #284]	; (800bfcc <dir_register+0x1ec>)
 800beae:	fba2 2303 	umull	r2, r3, r2, r3
 800beb2:	089b      	lsrs	r3, r3, #2
 800beb4:	3301      	adds	r3, #1
 800beb6:	e000      	b.n	800beba <dir_register+0xda>
 800beb8:	2301      	movs	r3, #1
 800beba:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bebc:	6a39      	ldr	r1, [r7, #32]
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f7ff fbb6 	bl	800b630 <dir_alloc>
 800bec4:	4603      	mov	r3, r0
 800bec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800beca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d148      	bne.n	800bf64 <dir_register+0x184>
 800bed2:	6a3b      	ldr	r3, [r7, #32]
 800bed4:	3b01      	subs	r3, #1
 800bed6:	623b      	str	r3, [r7, #32]
 800bed8:	6a3b      	ldr	r3, [r7, #32]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d042      	beq.n	800bf64 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	695a      	ldr	r2, [r3, #20]
 800bee2:	6a3b      	ldr	r3, [r7, #32]
 800bee4:	015b      	lsls	r3, r3, #5
 800bee6:	1ad3      	subs	r3, r2, r3
 800bee8:	4619      	mov	r1, r3
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f7ff fa60 	bl	800b3b0 <dir_sdi>
 800bef0:	4603      	mov	r3, r0
 800bef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bef6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800befa:	2b00      	cmp	r3, #0
 800befc:	d132      	bne.n	800bf64 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	3324      	adds	r3, #36	; 0x24
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7ff fde4 	bl	800bad0 <sum_sfn>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	69db      	ldr	r3, [r3, #28]
 800bf10:	4619      	mov	r1, r3
 800bf12:	69f8      	ldr	r0, [r7, #28]
 800bf14:	f7fe ff02 	bl	800ad1c <move_window>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800bf1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d11d      	bne.n	800bf62 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	68d8      	ldr	r0, [r3, #12]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6a19      	ldr	r1, [r3, #32]
 800bf2e:	6a3b      	ldr	r3, [r7, #32]
 800bf30:	b2da      	uxtb	r2, r3
 800bf32:	7efb      	ldrb	r3, [r7, #27]
 800bf34:	f7ff fcd6 	bl	800b8e4 <put_lfn>
				fs->wflag = 1;
 800bf38:	69fb      	ldr	r3, [r7, #28]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800bf3e:	2100      	movs	r1, #0
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f7ff fab0 	bl	800b4a6 <dir_next>
 800bf46:	4603      	mov	r3, r0
 800bf48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800bf4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d107      	bne.n	800bf64 <dir_register+0x184>
 800bf54:	6a3b      	ldr	r3, [r7, #32]
 800bf56:	3b01      	subs	r3, #1
 800bf58:	623b      	str	r3, [r7, #32]
 800bf5a:	6a3b      	ldr	r3, [r7, #32]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d1d5      	bne.n	800bf0c <dir_register+0x12c>
 800bf60:	e000      	b.n	800bf64 <dir_register+0x184>
				if (res != FR_OK) break;
 800bf62:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bf64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d128      	bne.n	800bfbe <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	69db      	ldr	r3, [r3, #28]
 800bf70:	4619      	mov	r1, r3
 800bf72:	69f8      	ldr	r0, [r7, #28]
 800bf74:	f7fe fed2 	bl	800ad1c <move_window>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bf7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d11b      	bne.n	800bfbe <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	2220      	movs	r2, #32
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7fe fcb7 	bl	800a902 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6a18      	ldr	r0, [r3, #32]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	3324      	adds	r3, #36	; 0x24
 800bf9c:	220b      	movs	r2, #11
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	f7fe fc8e 	bl	800a8c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6a1b      	ldr	r3, [r3, #32]
 800bfae:	330c      	adds	r3, #12
 800bfb0:	f002 0218 	and.w	r2, r2, #24
 800bfb4:	b2d2      	uxtb	r2, r2
 800bfb6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bfbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3730      	adds	r7, #48	; 0x30
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	4ec4ec4f 	.word	0x4ec4ec4f

0800bfd0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b088      	sub	sp, #32
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	69db      	ldr	r3, [r3, #28]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	f000 80c9 	beq.w	800c182 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bff8:	d032      	beq.n	800c060 <get_fileinfo+0x90>
			i = j = 0;
 800bffa:	2300      	movs	r3, #0
 800bffc:	61bb      	str	r3, [r7, #24]
 800bffe:	69bb      	ldr	r3, [r7, #24]
 800c000:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c002:	e01b      	b.n	800c03c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c004:	89fb      	ldrh	r3, [r7, #14]
 800c006:	2100      	movs	r1, #0
 800c008:	4618      	mov	r0, r3
 800c00a:	f001 fbff 	bl	800d80c <ff_convert>
 800c00e:	4603      	mov	r3, r0
 800c010:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c012:	89fb      	ldrh	r3, [r7, #14]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d102      	bne.n	800c01e <get_fileinfo+0x4e>
 800c018:	2300      	movs	r3, #0
 800c01a:	61fb      	str	r3, [r7, #28]
 800c01c:	e01a      	b.n	800c054 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	2bfe      	cmp	r3, #254	; 0xfe
 800c022:	d902      	bls.n	800c02a <get_fileinfo+0x5a>
 800c024:	2300      	movs	r3, #0
 800c026:	61fb      	str	r3, [r7, #28]
 800c028:	e014      	b.n	800c054 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	1c5a      	adds	r2, r3, #1
 800c02e:	61fa      	str	r2, [r7, #28]
 800c030:	89fa      	ldrh	r2, [r7, #14]
 800c032:	b2d1      	uxtb	r1, r2
 800c034:	683a      	ldr	r2, [r7, #0]
 800c036:	4413      	add	r3, r2
 800c038:	460a      	mov	r2, r1
 800c03a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	68da      	ldr	r2, [r3, #12]
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	1c59      	adds	r1, r3, #1
 800c044:	61b9      	str	r1, [r7, #24]
 800c046:	005b      	lsls	r3, r3, #1
 800c048:	4413      	add	r3, r2
 800c04a:	881b      	ldrh	r3, [r3, #0]
 800c04c:	81fb      	strh	r3, [r7, #14]
 800c04e:	89fb      	ldrh	r3, [r7, #14]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1d7      	bne.n	800c004 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800c054:	683a      	ldr	r2, [r7, #0]
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	4413      	add	r3, r2
 800c05a:	3316      	adds	r3, #22
 800c05c:	2200      	movs	r2, #0
 800c05e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800c060:	2300      	movs	r3, #0
 800c062:	61bb      	str	r3, [r7, #24]
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800c068:	683a      	ldr	r2, [r7, #0]
 800c06a:	69fb      	ldr	r3, [r7, #28]
 800c06c:	4413      	add	r3, r2
 800c06e:	3316      	adds	r3, #22
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800c074:	e04c      	b.n	800c110 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6a1a      	ldr	r2, [r3, #32]
 800c07a:	69fb      	ldr	r3, [r7, #28]
 800c07c:	1c59      	adds	r1, r3, #1
 800c07e:	61f9      	str	r1, [r7, #28]
 800c080:	4413      	add	r3, r2
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c086:	7dfb      	ldrb	r3, [r7, #23]
 800c088:	2b20      	cmp	r3, #32
 800c08a:	d100      	bne.n	800c08e <get_fileinfo+0xbe>
 800c08c:	e040      	b.n	800c110 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c08e:	7dfb      	ldrb	r3, [r7, #23]
 800c090:	2b05      	cmp	r3, #5
 800c092:	d101      	bne.n	800c098 <get_fileinfo+0xc8>
 800c094:	23e5      	movs	r3, #229	; 0xe5
 800c096:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800c098:	69fb      	ldr	r3, [r7, #28]
 800c09a:	2b09      	cmp	r3, #9
 800c09c:	d10f      	bne.n	800c0be <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800c09e:	89bb      	ldrh	r3, [r7, #12]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d105      	bne.n	800c0b0 <get_fileinfo+0xe0>
 800c0a4:	683a      	ldr	r2, [r7, #0]
 800c0a6:	69bb      	ldr	r3, [r7, #24]
 800c0a8:	4413      	add	r3, r2
 800c0aa:	3316      	adds	r3, #22
 800c0ac:	222e      	movs	r2, #46	; 0x2e
 800c0ae:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800c0b0:	69bb      	ldr	r3, [r7, #24]
 800c0b2:	1c5a      	adds	r2, r3, #1
 800c0b4:	61ba      	str	r2, [r7, #24]
 800c0b6:	683a      	ldr	r2, [r7, #0]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	222e      	movs	r2, #46	; 0x2e
 800c0bc:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800c0be:	683a      	ldr	r2, [r7, #0]
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	4413      	add	r3, r2
 800c0c4:	3309      	adds	r3, #9
 800c0c6:	7dfa      	ldrb	r2, [r7, #23]
 800c0c8:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800c0ca:	89bb      	ldrh	r3, [r7, #12]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d11c      	bne.n	800c10a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c0d0:	7dfb      	ldrb	r3, [r7, #23]
 800c0d2:	2b40      	cmp	r3, #64	; 0x40
 800c0d4:	d913      	bls.n	800c0fe <get_fileinfo+0x12e>
 800c0d6:	7dfb      	ldrb	r3, [r7, #23]
 800c0d8:	2b5a      	cmp	r3, #90	; 0x5a
 800c0da:	d810      	bhi.n	800c0fe <get_fileinfo+0x12e>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6a1b      	ldr	r3, [r3, #32]
 800c0e0:	330c      	adds	r3, #12
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	2b08      	cmp	r3, #8
 800c0ea:	d901      	bls.n	800c0f0 <get_fileinfo+0x120>
 800c0ec:	2310      	movs	r3, #16
 800c0ee:	e000      	b.n	800c0f2 <get_fileinfo+0x122>
 800c0f0:	2308      	movs	r3, #8
 800c0f2:	4013      	ands	r3, r2
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d002      	beq.n	800c0fe <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800c0f8:	7dfb      	ldrb	r3, [r7, #23]
 800c0fa:	3320      	adds	r3, #32
 800c0fc:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800c0fe:	683a      	ldr	r2, [r7, #0]
 800c100:	69bb      	ldr	r3, [r7, #24]
 800c102:	4413      	add	r3, r2
 800c104:	3316      	adds	r3, #22
 800c106:	7dfa      	ldrb	r2, [r7, #23]
 800c108:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	3301      	adds	r3, #1
 800c10e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	2b0a      	cmp	r3, #10
 800c114:	d9af      	bls.n	800c076 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800c116:	89bb      	ldrh	r3, [r7, #12]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d10d      	bne.n	800c138 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800c11c:	683a      	ldr	r2, [r7, #0]
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	4413      	add	r3, r2
 800c122:	3316      	adds	r3, #22
 800c124:	2200      	movs	r2, #0
 800c126:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6a1b      	ldr	r3, [r3, #32]
 800c12c:	330c      	adds	r3, #12
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d101      	bne.n	800c138 <get_fileinfo+0x168>
 800c134:	2300      	movs	r3, #0
 800c136:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800c138:	683a      	ldr	r2, [r7, #0]
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	4413      	add	r3, r2
 800c13e:	3309      	adds	r3, #9
 800c140:	2200      	movs	r2, #0
 800c142:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6a1b      	ldr	r3, [r3, #32]
 800c148:	7ada      	ldrb	r2, [r3, #11]
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6a1b      	ldr	r3, [r3, #32]
 800c152:	331c      	adds	r3, #28
 800c154:	4618      	mov	r0, r3
 800c156:	f7fe fb49 	bl	800a7ec <ld_dword>
 800c15a:	4602      	mov	r2, r0
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6a1b      	ldr	r3, [r3, #32]
 800c164:	3316      	adds	r3, #22
 800c166:	4618      	mov	r0, r3
 800c168:	f7fe fb40 	bl	800a7ec <ld_dword>
 800c16c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	b29a      	uxth	r2, r3
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	80da      	strh	r2, [r3, #6]
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	0c1b      	lsrs	r3, r3, #16
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	809a      	strh	r2, [r3, #4]
 800c180:	e000      	b.n	800c184 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c182:	bf00      	nop
}
 800c184:	3720      	adds	r7, #32
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
	...

0800c18c <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b085      	sub	sp, #20
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	1c59      	adds	r1, r3, #1
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	6011      	str	r1, [r2, #0]
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800c1a2:	89fb      	ldrh	r3, [r7, #14]
 800c1a4:	2b60      	cmp	r3, #96	; 0x60
 800c1a6:	d905      	bls.n	800c1b4 <get_achar+0x28>
 800c1a8:	89fb      	ldrh	r3, [r7, #14]
 800c1aa:	2b7a      	cmp	r3, #122	; 0x7a
 800c1ac:	d802      	bhi.n	800c1b4 <get_achar+0x28>
 800c1ae:	89fb      	ldrh	r3, [r7, #14]
 800c1b0:	3b20      	subs	r3, #32
 800c1b2:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800c1b4:	89fb      	ldrh	r3, [r7, #14]
 800c1b6:	2b7f      	cmp	r3, #127	; 0x7f
 800c1b8:	d904      	bls.n	800c1c4 <get_achar+0x38>
 800c1ba:	89fb      	ldrh	r3, [r7, #14]
 800c1bc:	3b80      	subs	r3, #128	; 0x80
 800c1be:	4a05      	ldr	r2, [pc, #20]	; (800c1d4 <get_achar+0x48>)
 800c1c0:	5cd3      	ldrb	r3, [r2, r3]
 800c1c2:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800c1c4:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3714      	adds	r7, #20
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	0800da80 	.word	0x0800da80

0800c1d8 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b08a      	sub	sp, #40	; 0x28
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	607a      	str	r2, [r7, #4]
 800c1e4:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800c1e6:	e009      	b.n	800c1fc <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800c1e8:	f107 0308 	add.w	r3, r7, #8
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7ff ffcd 	bl	800c18c <get_achar>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d101      	bne.n	800c1fc <pattern_matching+0x24>
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	e064      	b.n	800c2c6 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	1e5a      	subs	r2, r3, #1
 800c200:	607a      	str	r2, [r7, #4]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d1f0      	bne.n	800c1e8 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d104      	bne.n	800c218 <pattern_matching+0x40>
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d001      	beq.n	800c218 <pattern_matching+0x40>
 800c214:	2301      	movs	r3, #1
 800c216:	e056      	b.n	800c2c6 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	617b      	str	r3, [r7, #20]
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	2b3f      	cmp	r3, #63	; 0x3f
 800c226:	d003      	beq.n	800c230 <pattern_matching+0x58>
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	2b2a      	cmp	r3, #42	; 0x2a
 800c22e:	d126      	bne.n	800c27e <pattern_matching+0xa6>
				nm = nx = 0;
 800c230:	2300      	movs	r3, #0
 800c232:	61fb      	str	r3, [r7, #28]
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	1c5a      	adds	r2, r3, #1
 800c23c:	617a      	str	r2, [r7, #20]
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	2b3f      	cmp	r3, #63	; 0x3f
 800c242:	d103      	bne.n	800c24c <pattern_matching+0x74>
 800c244:	6a3b      	ldr	r3, [r7, #32]
 800c246:	3301      	adds	r3, #1
 800c248:	623b      	str	r3, [r7, #32]
 800c24a:	e001      	b.n	800c250 <pattern_matching+0x78>
 800c24c:	2301      	movs	r3, #1
 800c24e:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	2b3f      	cmp	r3, #63	; 0x3f
 800c256:	d0ef      	beq.n	800c238 <pattern_matching+0x60>
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	2b2a      	cmp	r3, #42	; 0x2a
 800c25e:	d0eb      	beq.n	800c238 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800c260:	6978      	ldr	r0, [r7, #20]
 800c262:	6939      	ldr	r1, [r7, #16]
 800c264:	69fb      	ldr	r3, [r7, #28]
 800c266:	6a3a      	ldr	r2, [r7, #32]
 800c268:	f7ff ffb6 	bl	800c1d8 <pattern_matching>
 800c26c:	4603      	mov	r3, r0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d001      	beq.n	800c276 <pattern_matching+0x9e>
 800c272:	2301      	movs	r3, #1
 800c274:	e027      	b.n	800c2c6 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c27c:	e017      	b.n	800c2ae <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800c27e:	f107 0314 	add.w	r3, r7, #20
 800c282:	4618      	mov	r0, r3
 800c284:	f7ff ff82 	bl	800c18c <get_achar>
 800c288:	4603      	mov	r3, r0
 800c28a:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800c28c:	f107 0310 	add.w	r3, r7, #16
 800c290:	4618      	mov	r0, r3
 800c292:	f7ff ff7b 	bl	800c18c <get_achar>
 800c296:	4603      	mov	r3, r0
 800c298:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800c29a:	8b7a      	ldrh	r2, [r7, #26]
 800c29c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d104      	bne.n	800c2ac <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800c2a2:	8b7b      	ldrh	r3, [r7, #26]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1bb      	bne.n	800c220 <pattern_matching+0x48>
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	e00c      	b.n	800c2c6 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 800c2ac:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800c2ae:	f107 0308 	add.w	r3, r7, #8
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7ff ff6a 	bl	800c18c <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d002      	beq.n	800c2c4 <pattern_matching+0xec>
 800c2be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d1a9      	bne.n	800c218 <pattern_matching+0x40>

	return 0;
 800c2c4:	2300      	movs	r3, #0
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3728      	adds	r7, #40	; 0x28
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
	...

0800c2d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b08a      	sub	sp, #40	; 0x28
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	613b      	str	r3, [r7, #16]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	60fb      	str	r3, [r7, #12]
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	617b      	str	r3, [r7, #20]
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c2f0:	69bb      	ldr	r3, [r7, #24]
 800c2f2:	1c5a      	adds	r2, r3, #1
 800c2f4:	61ba      	str	r2, [r7, #24]
 800c2f6:	693a      	ldr	r2, [r7, #16]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c2fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c300:	2b1f      	cmp	r3, #31
 800c302:	d940      	bls.n	800c386 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c304:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c306:	2b2f      	cmp	r3, #47	; 0x2f
 800c308:	d006      	beq.n	800c318 <create_name+0x48>
 800c30a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c30c:	2b5c      	cmp	r3, #92	; 0x5c
 800c30e:	d110      	bne.n	800c332 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c310:	e002      	b.n	800c318 <create_name+0x48>
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	3301      	adds	r3, #1
 800c316:	61bb      	str	r3, [r7, #24]
 800c318:	693a      	ldr	r2, [r7, #16]
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	4413      	add	r3, r2
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	2b2f      	cmp	r3, #47	; 0x2f
 800c322:	d0f6      	beq.n	800c312 <create_name+0x42>
 800c324:	693a      	ldr	r2, [r7, #16]
 800c326:	69bb      	ldr	r3, [r7, #24]
 800c328:	4413      	add	r3, r2
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	2b5c      	cmp	r3, #92	; 0x5c
 800c32e:	d0f0      	beq.n	800c312 <create_name+0x42>
			break;
 800c330:	e02a      	b.n	800c388 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	2bfe      	cmp	r3, #254	; 0xfe
 800c336:	d901      	bls.n	800c33c <create_name+0x6c>
 800c338:	2306      	movs	r3, #6
 800c33a:	e17d      	b.n	800c638 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c33c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c33e:	b2db      	uxtb	r3, r3
 800c340:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c342:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c344:	2101      	movs	r1, #1
 800c346:	4618      	mov	r0, r3
 800c348:	f001 fa60 	bl	800d80c <ff_convert>
 800c34c:	4603      	mov	r3, r0
 800c34e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c350:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c352:	2b00      	cmp	r3, #0
 800c354:	d101      	bne.n	800c35a <create_name+0x8a>
 800c356:	2306      	movs	r3, #6
 800c358:	e16e      	b.n	800c638 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c35a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c35c:	2b7f      	cmp	r3, #127	; 0x7f
 800c35e:	d809      	bhi.n	800c374 <create_name+0xa4>
 800c360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c362:	4619      	mov	r1, r3
 800c364:	488d      	ldr	r0, [pc, #564]	; (800c59c <create_name+0x2cc>)
 800c366:	f7fe fb0e 	bl	800a986 <chk_chr>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d001      	beq.n	800c374 <create_name+0xa4>
 800c370:	2306      	movs	r3, #6
 800c372:	e161      	b.n	800c638 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	1c5a      	adds	r2, r3, #1
 800c378:	617a      	str	r2, [r7, #20]
 800c37a:	005b      	lsls	r3, r3, #1
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	4413      	add	r3, r2
 800c380:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c382:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c384:	e7b4      	b.n	800c2f0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c386:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c388:	693a      	ldr	r2, [r7, #16]
 800c38a:	69bb      	ldr	r3, [r7, #24]
 800c38c:	441a      	add	r2, r3
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c392:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c394:	2b1f      	cmp	r3, #31
 800c396:	d801      	bhi.n	800c39c <create_name+0xcc>
 800c398:	2304      	movs	r3, #4
 800c39a:	e000      	b.n	800c39e <create_name+0xce>
 800c39c:	2300      	movs	r3, #0
 800c39e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c3a2:	e011      	b.n	800c3c8 <create_name+0xf8>
		w = lfn[di - 1];
 800c3a4:	697a      	ldr	r2, [r7, #20]
 800c3a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c3aa:	4413      	add	r3, r2
 800c3ac:	005b      	lsls	r3, r3, #1
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	881b      	ldrh	r3, [r3, #0]
 800c3b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c3b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3b8:	2b20      	cmp	r3, #32
 800c3ba:	d002      	beq.n	800c3c2 <create_name+0xf2>
 800c3bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3be:	2b2e      	cmp	r3, #46	; 0x2e
 800c3c0:	d106      	bne.n	800c3d0 <create_name+0x100>
		di--;
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	3b01      	subs	r3, #1
 800c3c6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1ea      	bne.n	800c3a4 <create_name+0xd4>
 800c3ce:	e000      	b.n	800c3d2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c3d0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	005b      	lsls	r3, r3, #1
 800c3d6:	68fa      	ldr	r2, [r7, #12]
 800c3d8:	4413      	add	r3, r2
 800c3da:	2200      	movs	r2, #0
 800c3dc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d101      	bne.n	800c3e8 <create_name+0x118>
 800c3e4:	2306      	movs	r3, #6
 800c3e6:	e127      	b.n	800c638 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	3324      	adds	r3, #36	; 0x24
 800c3ec:	220b      	movs	r2, #11
 800c3ee:	2120      	movs	r1, #32
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7fe fa86 	bl	800a902 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	61bb      	str	r3, [r7, #24]
 800c3fa:	e002      	b.n	800c402 <create_name+0x132>
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	3301      	adds	r3, #1
 800c400:	61bb      	str	r3, [r7, #24]
 800c402:	69bb      	ldr	r3, [r7, #24]
 800c404:	005b      	lsls	r3, r3, #1
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	4413      	add	r3, r2
 800c40a:	881b      	ldrh	r3, [r3, #0]
 800c40c:	2b20      	cmp	r3, #32
 800c40e:	d0f5      	beq.n	800c3fc <create_name+0x12c>
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	005b      	lsls	r3, r3, #1
 800c414:	68fa      	ldr	r2, [r7, #12]
 800c416:	4413      	add	r3, r2
 800c418:	881b      	ldrh	r3, [r3, #0]
 800c41a:	2b2e      	cmp	r3, #46	; 0x2e
 800c41c:	d0ee      	beq.n	800c3fc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d009      	beq.n	800c438 <create_name+0x168>
 800c424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c428:	f043 0303 	orr.w	r3, r3, #3
 800c42c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c430:	e002      	b.n	800c438 <create_name+0x168>
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	3b01      	subs	r3, #1
 800c436:	617b      	str	r3, [r7, #20]
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d009      	beq.n	800c452 <create_name+0x182>
 800c43e:	697a      	ldr	r2, [r7, #20]
 800c440:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c444:	4413      	add	r3, r2
 800c446:	005b      	lsls	r3, r3, #1
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	4413      	add	r3, r2
 800c44c:	881b      	ldrh	r3, [r3, #0]
 800c44e:	2b2e      	cmp	r3, #46	; 0x2e
 800c450:	d1ef      	bne.n	800c432 <create_name+0x162>

	i = b = 0; ni = 8;
 800c452:	2300      	movs	r3, #0
 800c454:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c458:	2300      	movs	r3, #0
 800c45a:	623b      	str	r3, [r7, #32]
 800c45c:	2308      	movs	r3, #8
 800c45e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	1c5a      	adds	r2, r3, #1
 800c464:	61ba      	str	r2, [r7, #24]
 800c466:	005b      	lsls	r3, r3, #1
 800c468:	68fa      	ldr	r2, [r7, #12]
 800c46a:	4413      	add	r3, r2
 800c46c:	881b      	ldrh	r3, [r3, #0]
 800c46e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c472:	2b00      	cmp	r3, #0
 800c474:	f000 8090 	beq.w	800c598 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c478:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c47a:	2b20      	cmp	r3, #32
 800c47c:	d006      	beq.n	800c48c <create_name+0x1bc>
 800c47e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c480:	2b2e      	cmp	r3, #46	; 0x2e
 800c482:	d10a      	bne.n	800c49a <create_name+0x1ca>
 800c484:	69ba      	ldr	r2, [r7, #24]
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d006      	beq.n	800c49a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c490:	f043 0303 	orr.w	r3, r3, #3
 800c494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c498:	e07d      	b.n	800c596 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c49a:	6a3a      	ldr	r2, [r7, #32]
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d203      	bcs.n	800c4aa <create_name+0x1da>
 800c4a2:	69ba      	ldr	r2, [r7, #24]
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d123      	bne.n	800c4f2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	2b0b      	cmp	r3, #11
 800c4ae:	d106      	bne.n	800c4be <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4b4:	f043 0303 	orr.w	r3, r3, #3
 800c4b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c4bc:	e075      	b.n	800c5aa <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c4be:	69ba      	ldr	r2, [r7, #24]
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d005      	beq.n	800c4d2 <create_name+0x202>
 800c4c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4ca:	f043 0303 	orr.w	r3, r3, #3
 800c4ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c4d2:	69ba      	ldr	r2, [r7, #24]
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d866      	bhi.n	800c5a8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	61bb      	str	r3, [r7, #24]
 800c4de:	2308      	movs	r3, #8
 800c4e0:	623b      	str	r3, [r7, #32]
 800c4e2:	230b      	movs	r3, #11
 800c4e4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c4e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c4ea:	009b      	lsls	r3, r3, #2
 800c4ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c4f0:	e051      	b.n	800c596 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c4f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4f4:	2b7f      	cmp	r3, #127	; 0x7f
 800c4f6:	d914      	bls.n	800c522 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c4f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f001 f985 	bl	800d80c <ff_convert>
 800c502:	4603      	mov	r3, r0
 800c504:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d004      	beq.n	800c516 <create_name+0x246>
 800c50c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c50e:	3b80      	subs	r3, #128	; 0x80
 800c510:	4a23      	ldr	r2, [pc, #140]	; (800c5a0 <create_name+0x2d0>)
 800c512:	5cd3      	ldrb	r3, [r2, r3]
 800c514:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c51a:	f043 0302 	orr.w	r3, r3, #2
 800c51e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c522:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c524:	2b00      	cmp	r3, #0
 800c526:	d007      	beq.n	800c538 <create_name+0x268>
 800c528:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c52a:	4619      	mov	r1, r3
 800c52c:	481d      	ldr	r0, [pc, #116]	; (800c5a4 <create_name+0x2d4>)
 800c52e:	f7fe fa2a 	bl	800a986 <chk_chr>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d008      	beq.n	800c54a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c538:	235f      	movs	r3, #95	; 0x5f
 800c53a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c53c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c540:	f043 0303 	orr.w	r3, r3, #3
 800c544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c548:	e01b      	b.n	800c582 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c54a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c54c:	2b40      	cmp	r3, #64	; 0x40
 800c54e:	d909      	bls.n	800c564 <create_name+0x294>
 800c550:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c552:	2b5a      	cmp	r3, #90	; 0x5a
 800c554:	d806      	bhi.n	800c564 <create_name+0x294>
					b |= 2;
 800c556:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c55a:	f043 0302 	orr.w	r3, r3, #2
 800c55e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c562:	e00e      	b.n	800c582 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c564:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c566:	2b60      	cmp	r3, #96	; 0x60
 800c568:	d90b      	bls.n	800c582 <create_name+0x2b2>
 800c56a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c56c:	2b7a      	cmp	r3, #122	; 0x7a
 800c56e:	d808      	bhi.n	800c582 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c570:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c574:	f043 0301 	orr.w	r3, r3, #1
 800c578:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c57c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c57e:	3b20      	subs	r3, #32
 800c580:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c582:	6a3b      	ldr	r3, [r7, #32]
 800c584:	1c5a      	adds	r2, r3, #1
 800c586:	623a      	str	r2, [r7, #32]
 800c588:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c58a:	b2d1      	uxtb	r1, r2
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	4413      	add	r3, r2
 800c590:	460a      	mov	r2, r1
 800c592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c596:	e763      	b.n	800c460 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c598:	bf00      	nop
 800c59a:	e006      	b.n	800c5aa <create_name+0x2da>
 800c59c:	0800da14 	.word	0x0800da14
 800c5a0:	0800da80 	.word	0x0800da80
 800c5a4:	0800da20 	.word	0x0800da20
			if (si > di) break;			/* No extension */
 800c5a8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c5b0:	2be5      	cmp	r3, #229	; 0xe5
 800c5b2:	d103      	bne.n	800c5bc <create_name+0x2ec>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2205      	movs	r2, #5
 800c5b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	2b08      	cmp	r3, #8
 800c5c0:	d104      	bne.n	800c5cc <create_name+0x2fc>
 800c5c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c5cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c5d0:	f003 030c 	and.w	r3, r3, #12
 800c5d4:	2b0c      	cmp	r3, #12
 800c5d6:	d005      	beq.n	800c5e4 <create_name+0x314>
 800c5d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c5dc:	f003 0303 	and.w	r3, r3, #3
 800c5e0:	2b03      	cmp	r3, #3
 800c5e2:	d105      	bne.n	800c5f0 <create_name+0x320>
 800c5e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5e8:	f043 0302 	orr.w	r3, r3, #2
 800c5ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5f4:	f003 0302 	and.w	r3, r3, #2
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d117      	bne.n	800c62c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c5fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c600:	f003 0303 	and.w	r3, r3, #3
 800c604:	2b01      	cmp	r3, #1
 800c606:	d105      	bne.n	800c614 <create_name+0x344>
 800c608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c60c:	f043 0310 	orr.w	r3, r3, #16
 800c610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c618:	f003 030c 	and.w	r3, r3, #12
 800c61c:	2b04      	cmp	r3, #4
 800c61e:	d105      	bne.n	800c62c <create_name+0x35c>
 800c620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c624:	f043 0308 	orr.w	r3, r3, #8
 800c628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c632:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c636:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3728      	adds	r7, #40	; 0x28
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b086      	sub	sp, #24
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c654:	e002      	b.n	800c65c <follow_path+0x1c>
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	3301      	adds	r3, #1
 800c65a:	603b      	str	r3, [r7, #0]
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	2b2f      	cmp	r3, #47	; 0x2f
 800c662:	d0f8      	beq.n	800c656 <follow_path+0x16>
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	2b5c      	cmp	r3, #92	; 0x5c
 800c66a:	d0f4      	beq.n	800c656 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	2200      	movs	r2, #0
 800c670:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	2b1f      	cmp	r3, #31
 800c678:	d80a      	bhi.n	800c690 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2280      	movs	r2, #128	; 0x80
 800c67e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c682:	2100      	movs	r1, #0
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f7fe fe93 	bl	800b3b0 <dir_sdi>
 800c68a:	4603      	mov	r3, r0
 800c68c:	75fb      	strb	r3, [r7, #23]
 800c68e:	e043      	b.n	800c718 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c690:	463b      	mov	r3, r7
 800c692:	4619      	mov	r1, r3
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f7ff fe1b 	bl	800c2d0 <create_name>
 800c69a:	4603      	mov	r3, r0
 800c69c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c69e:	7dfb      	ldrb	r3, [r7, #23]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d134      	bne.n	800c70e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f7ff fadb 	bl	800bc60 <dir_find>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c6b4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c6b6:	7dfb      	ldrb	r3, [r7, #23]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d00a      	beq.n	800c6d2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c6bc:	7dfb      	ldrb	r3, [r7, #23]
 800c6be:	2b04      	cmp	r3, #4
 800c6c0:	d127      	bne.n	800c712 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c6c2:	7afb      	ldrb	r3, [r7, #11]
 800c6c4:	f003 0304 	and.w	r3, r3, #4
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d122      	bne.n	800c712 <follow_path+0xd2>
 800c6cc:	2305      	movs	r3, #5
 800c6ce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c6d0:	e01f      	b.n	800c712 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c6d2:	7afb      	ldrb	r3, [r7, #11]
 800c6d4:	f003 0304 	and.w	r3, r3, #4
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d11c      	bne.n	800c716 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	799b      	ldrb	r3, [r3, #6]
 800c6e0:	f003 0310 	and.w	r3, r3, #16
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d102      	bne.n	800c6ee <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c6e8:	2305      	movs	r3, #5
 800c6ea:	75fb      	strb	r3, [r7, #23]
 800c6ec:	e014      	b.n	800c718 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	695b      	ldr	r3, [r3, #20]
 800c6f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6fc:	4413      	add	r3, r2
 800c6fe:	4619      	mov	r1, r3
 800c700:	68f8      	ldr	r0, [r7, #12]
 800c702:	f7fe ffdc 	bl	800b6be <ld_clust>
 800c706:	4602      	mov	r2, r0
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c70c:	e7c0      	b.n	800c690 <follow_path+0x50>
			if (res != FR_OK) break;
 800c70e:	bf00      	nop
 800c710:	e002      	b.n	800c718 <follow_path+0xd8>
				break;
 800c712:	bf00      	nop
 800c714:	e000      	b.n	800c718 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c716:	bf00      	nop
			}
		}
	}

	return res;
 800c718:	7dfb      	ldrb	r3, [r7, #23]
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3718      	adds	r7, #24
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c722:	b480      	push	{r7}
 800c724:	b087      	sub	sp, #28
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c72a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c72e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d031      	beq.n	800c79c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	617b      	str	r3, [r7, #20]
 800c73e:	e002      	b.n	800c746 <get_ldnumber+0x24>
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	3301      	adds	r3, #1
 800c744:	617b      	str	r3, [r7, #20]
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	2b1f      	cmp	r3, #31
 800c74c:	d903      	bls.n	800c756 <get_ldnumber+0x34>
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	2b3a      	cmp	r3, #58	; 0x3a
 800c754:	d1f4      	bne.n	800c740 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	2b3a      	cmp	r3, #58	; 0x3a
 800c75c:	d11c      	bne.n	800c798 <get_ldnumber+0x76>
			tp = *path;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	1c5a      	adds	r2, r3, #1
 800c768:	60fa      	str	r2, [r7, #12]
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	3b30      	subs	r3, #48	; 0x30
 800c76e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	2b09      	cmp	r3, #9
 800c774:	d80e      	bhi.n	800c794 <get_ldnumber+0x72>
 800c776:	68fa      	ldr	r2, [r7, #12]
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d10a      	bne.n	800c794 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d107      	bne.n	800c794 <get_ldnumber+0x72>
					vol = (int)i;
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	3301      	adds	r3, #1
 800c78c:	617b      	str	r3, [r7, #20]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	697a      	ldr	r2, [r7, #20]
 800c792:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	e002      	b.n	800c79e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c798:	2300      	movs	r3, #0
 800c79a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c79c:	693b      	ldr	r3, [r7, #16]
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	371c      	adds	r7, #28
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr
	...

0800c7ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	70da      	strb	r2, [r3, #3]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7c2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c7c4:	6839      	ldr	r1, [r7, #0]
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f7fe faa8 	bl	800ad1c <move_window>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d001      	beq.n	800c7d6 <check_fs+0x2a>
 800c7d2:	2304      	movs	r3, #4
 800c7d4:	e038      	b.n	800c848 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	3334      	adds	r3, #52	; 0x34
 800c7da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7fd ffec 	bl	800a7bc <ld_word>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d001      	beq.n	800c7f4 <check_fs+0x48>
 800c7f0:	2303      	movs	r3, #3
 800c7f2:	e029      	b.n	800c848 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c7fa:	2be9      	cmp	r3, #233	; 0xe9
 800c7fc:	d009      	beq.n	800c812 <check_fs+0x66>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c804:	2beb      	cmp	r3, #235	; 0xeb
 800c806:	d11e      	bne.n	800c846 <check_fs+0x9a>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c80e:	2b90      	cmp	r3, #144	; 0x90
 800c810:	d119      	bne.n	800c846 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	3334      	adds	r3, #52	; 0x34
 800c816:	3336      	adds	r3, #54	; 0x36
 800c818:	4618      	mov	r0, r3
 800c81a:	f7fd ffe7 	bl	800a7ec <ld_dword>
 800c81e:	4603      	mov	r3, r0
 800c820:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c824:	4a0a      	ldr	r2, [pc, #40]	; (800c850 <check_fs+0xa4>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d101      	bne.n	800c82e <check_fs+0x82>
 800c82a:	2300      	movs	r3, #0
 800c82c:	e00c      	b.n	800c848 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	3334      	adds	r3, #52	; 0x34
 800c832:	3352      	adds	r3, #82	; 0x52
 800c834:	4618      	mov	r0, r3
 800c836:	f7fd ffd9 	bl	800a7ec <ld_dword>
 800c83a:	4603      	mov	r3, r0
 800c83c:	4a05      	ldr	r2, [pc, #20]	; (800c854 <check_fs+0xa8>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d101      	bne.n	800c846 <check_fs+0x9a>
 800c842:	2300      	movs	r3, #0
 800c844:	e000      	b.n	800c848 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c846:	2302      	movs	r3, #2
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3708      	adds	r7, #8
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	00544146 	.word	0x00544146
 800c854:	33544146 	.word	0x33544146

0800c858 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b096      	sub	sp, #88	; 0x58
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	4613      	mov	r3, r2
 800c864:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	2200      	movs	r2, #0
 800c86a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c86c:	68f8      	ldr	r0, [r7, #12]
 800c86e:	f7ff ff58 	bl	800c722 <get_ldnumber>
 800c872:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c876:	2b00      	cmp	r3, #0
 800c878:	da01      	bge.n	800c87e <find_volume+0x26>
 800c87a:	230b      	movs	r3, #11
 800c87c:	e230      	b.n	800cce0 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c87e:	4aa1      	ldr	r2, [pc, #644]	; (800cb04 <find_volume+0x2ac>)
 800c880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c886:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d101      	bne.n	800c892 <find_volume+0x3a>
 800c88e:	230c      	movs	r3, #12
 800c890:	e226      	b.n	800cce0 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c896:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c898:	79fb      	ldrb	r3, [r7, #7]
 800c89a:	f023 0301 	bic.w	r3, r3, #1
 800c89e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d01a      	beq.n	800c8de <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8aa:	785b      	ldrb	r3, [r3, #1]
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7fd fee7 	bl	800a680 <disk_status>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c8b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c8bc:	f003 0301 	and.w	r3, r3, #1
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d10c      	bne.n	800c8de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c8c4:	79fb      	ldrb	r3, [r7, #7]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d007      	beq.n	800c8da <find_volume+0x82>
 800c8ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c8ce:	f003 0304 	and.w	r3, r3, #4
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d001      	beq.n	800c8da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c8d6:	230a      	movs	r3, #10
 800c8d8:	e202      	b.n	800cce0 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800c8da:	2300      	movs	r3, #0
 800c8dc:	e200      	b.n	800cce0 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8e6:	b2da      	uxtb	r2, r3
 800c8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ee:	785b      	ldrb	r3, [r3, #1]
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f7fd fedf 	bl	800a6b4 <disk_initialize>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c8fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c900:	f003 0301 	and.w	r3, r3, #1
 800c904:	2b00      	cmp	r3, #0
 800c906:	d001      	beq.n	800c90c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c908:	2303      	movs	r3, #3
 800c90a:	e1e9      	b.n	800cce0 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c90c:	79fb      	ldrb	r3, [r7, #7]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d007      	beq.n	800c922 <find_volume+0xca>
 800c912:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c916:	f003 0304 	and.w	r3, r3, #4
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d001      	beq.n	800c922 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c91e:	230a      	movs	r3, #10
 800c920:	e1de      	b.n	800cce0 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c922:	2300      	movs	r3, #0
 800c924:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c926:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c928:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c92a:	f7ff ff3f 	bl	800c7ac <check_fs>
 800c92e:	4603      	mov	r3, r0
 800c930:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c934:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c938:	2b02      	cmp	r3, #2
 800c93a:	d149      	bne.n	800c9d0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c93c:	2300      	movs	r3, #0
 800c93e:	643b      	str	r3, [r7, #64]	; 0x40
 800c940:	e01e      	b.n	800c980 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c944:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c94a:	011b      	lsls	r3, r3, #4
 800c94c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c950:	4413      	add	r3, r2
 800c952:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c956:	3304      	adds	r3, #4
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d006      	beq.n	800c96c <find_volume+0x114>
 800c95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c960:	3308      	adds	r3, #8
 800c962:	4618      	mov	r0, r3
 800c964:	f7fd ff42 	bl	800a7ec <ld_dword>
 800c968:	4602      	mov	r2, r0
 800c96a:	e000      	b.n	800c96e <find_volume+0x116>
 800c96c:	2200      	movs	r2, #0
 800c96e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	3358      	adds	r3, #88	; 0x58
 800c974:	443b      	add	r3, r7
 800c976:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c97a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c97c:	3301      	adds	r3, #1
 800c97e:	643b      	str	r3, [r7, #64]	; 0x40
 800c980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c982:	2b03      	cmp	r3, #3
 800c984:	d9dd      	bls.n	800c942 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c986:	2300      	movs	r3, #0
 800c988:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c98a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d002      	beq.n	800c996 <find_volume+0x13e>
 800c990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c992:	3b01      	subs	r3, #1
 800c994:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c998:	009b      	lsls	r3, r3, #2
 800c99a:	3358      	adds	r3, #88	; 0x58
 800c99c:	443b      	add	r3, r7
 800c99e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c9a2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c9a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d005      	beq.n	800c9b6 <find_volume+0x15e>
 800c9aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c9ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c9ae:	f7ff fefd 	bl	800c7ac <check_fs>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	e000      	b.n	800c9b8 <find_volume+0x160>
 800c9b6:	2303      	movs	r3, #3
 800c9b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c9bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d905      	bls.n	800c9d0 <find_volume+0x178>
 800c9c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	643b      	str	r3, [r7, #64]	; 0x40
 800c9ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9cc:	2b03      	cmp	r3, #3
 800c9ce:	d9e2      	bls.n	800c996 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c9d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9d4:	2b04      	cmp	r3, #4
 800c9d6:	d101      	bne.n	800c9dc <find_volume+0x184>
 800c9d8:	2301      	movs	r3, #1
 800c9da:	e181      	b.n	800cce0 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c9dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d901      	bls.n	800c9e8 <find_volume+0x190>
 800c9e4:	230d      	movs	r3, #13
 800c9e6:	e17b      	b.n	800cce0 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ea:	3334      	adds	r3, #52	; 0x34
 800c9ec:	330b      	adds	r3, #11
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fd fee4 	bl	800a7bc <ld_word>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9fa:	d001      	beq.n	800ca00 <find_volume+0x1a8>
 800c9fc:	230d      	movs	r3, #13
 800c9fe:	e16f      	b.n	800cce0 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ca00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca02:	3334      	adds	r3, #52	; 0x34
 800ca04:	3316      	adds	r3, #22
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7fd fed8 	bl	800a7bc <ld_word>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ca10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d106      	bne.n	800ca24 <find_volume+0x1cc>
 800ca16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca18:	3334      	adds	r3, #52	; 0x34
 800ca1a:	3324      	adds	r3, #36	; 0x24
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f7fd fee5 	bl	800a7ec <ld_dword>
 800ca22:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ca24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca28:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ca2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ca30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca32:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ca34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca36:	789b      	ldrb	r3, [r3, #2]
 800ca38:	2b01      	cmp	r3, #1
 800ca3a:	d005      	beq.n	800ca48 <find_volume+0x1f0>
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3e:	789b      	ldrb	r3, [r3, #2]
 800ca40:	2b02      	cmp	r3, #2
 800ca42:	d001      	beq.n	800ca48 <find_volume+0x1f0>
 800ca44:	230d      	movs	r3, #13
 800ca46:	e14b      	b.n	800cce0 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ca48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4a:	789b      	ldrb	r3, [r3, #2]
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca50:	fb02 f303 	mul.w	r3, r2, r3
 800ca54:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ca56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca5c:	b29a      	uxth	r2, r3
 800ca5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca60:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ca62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca64:	895b      	ldrh	r3, [r3, #10]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d008      	beq.n	800ca7c <find_volume+0x224>
 800ca6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6c:	895b      	ldrh	r3, [r3, #10]
 800ca6e:	461a      	mov	r2, r3
 800ca70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca72:	895b      	ldrh	r3, [r3, #10]
 800ca74:	3b01      	subs	r3, #1
 800ca76:	4013      	ands	r3, r2
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d001      	beq.n	800ca80 <find_volume+0x228>
 800ca7c:	230d      	movs	r3, #13
 800ca7e:	e12f      	b.n	800cce0 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ca80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca82:	3334      	adds	r3, #52	; 0x34
 800ca84:	3311      	adds	r3, #17
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7fd fe98 	bl	800a7bc <ld_word>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	461a      	mov	r2, r3
 800ca90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca92:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ca94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca96:	891b      	ldrh	r3, [r3, #8]
 800ca98:	f003 030f 	and.w	r3, r3, #15
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d001      	beq.n	800caa6 <find_volume+0x24e>
 800caa2:	230d      	movs	r3, #13
 800caa4:	e11c      	b.n	800cce0 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800caa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa8:	3334      	adds	r3, #52	; 0x34
 800caaa:	3313      	adds	r3, #19
 800caac:	4618      	mov	r0, r3
 800caae:	f7fd fe85 	bl	800a7bc <ld_word>
 800cab2:	4603      	mov	r3, r0
 800cab4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d106      	bne.n	800caca <find_volume+0x272>
 800cabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cabe:	3334      	adds	r3, #52	; 0x34
 800cac0:	3320      	adds	r3, #32
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7fd fe92 	bl	800a7ec <ld_dword>
 800cac8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800caca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cacc:	3334      	adds	r3, #52	; 0x34
 800cace:	330e      	adds	r3, #14
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7fd fe73 	bl	800a7bc <ld_word>
 800cad6:	4603      	mov	r3, r0
 800cad8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cada:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d101      	bne.n	800cae4 <find_volume+0x28c>
 800cae0:	230d      	movs	r3, #13
 800cae2:	e0fd      	b.n	800cce0 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cae4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cae8:	4413      	add	r3, r2
 800caea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caec:	8912      	ldrh	r2, [r2, #8]
 800caee:	0912      	lsrs	r2, r2, #4
 800caf0:	b292      	uxth	r2, r2
 800caf2:	4413      	add	r3, r2
 800caf4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800caf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800caf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d204      	bcs.n	800cb08 <find_volume+0x2b0>
 800cafe:	230d      	movs	r3, #13
 800cb00:	e0ee      	b.n	800cce0 <find_volume+0x488>
 800cb02:	bf00      	nop
 800cb04:	20000718 	.word	0x20000718
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cb08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb0c:	1ad3      	subs	r3, r2, r3
 800cb0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb10:	8952      	ldrh	r2, [r2, #10]
 800cb12:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb16:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d101      	bne.n	800cb22 <find_volume+0x2ca>
 800cb1e:	230d      	movs	r3, #13
 800cb20:	e0de      	b.n	800cce0 <find_volume+0x488>
		fmt = FS_FAT32;
 800cb22:	2303      	movs	r3, #3
 800cb24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d802      	bhi.n	800cb38 <find_volume+0x2e0>
 800cb32:	2302      	movs	r3, #2
 800cb34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d802      	bhi.n	800cb48 <find_volume+0x2f0>
 800cb42:	2301      	movs	r3, #1
 800cb44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4a:	1c9a      	adds	r2, r3, #2
 800cb4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800cb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb54:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cb56:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb5a:	441a      	add	r2, r3
 800cb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800cb60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb64:	441a      	add	r2, r3
 800cb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb68:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800cb6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb6e:	2b03      	cmp	r3, #3
 800cb70:	d11e      	bne.n	800cbb0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb74:	3334      	adds	r3, #52	; 0x34
 800cb76:	332a      	adds	r3, #42	; 0x2a
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7fd fe1f 	bl	800a7bc <ld_word>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d001      	beq.n	800cb88 <find_volume+0x330>
 800cb84:	230d      	movs	r3, #13
 800cb86:	e0ab      	b.n	800cce0 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8a:	891b      	ldrh	r3, [r3, #8]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d001      	beq.n	800cb94 <find_volume+0x33c>
 800cb90:	230d      	movs	r3, #13
 800cb92:	e0a5      	b.n	800cce0 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb96:	3334      	adds	r3, #52	; 0x34
 800cb98:	332c      	adds	r3, #44	; 0x2c
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7fd fe26 	bl	800a7ec <ld_dword>
 800cba0:	4602      	mov	r2, r0
 800cba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba8:	699b      	ldr	r3, [r3, #24]
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	647b      	str	r3, [r7, #68]	; 0x44
 800cbae:	e01f      	b.n	800cbf0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb2:	891b      	ldrh	r3, [r3, #8]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d101      	bne.n	800cbbc <find_volume+0x364>
 800cbb8:	230d      	movs	r3, #13
 800cbba:	e091      	b.n	800cce0 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cbc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbc2:	441a      	add	r2, r3
 800cbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cbc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbcc:	2b02      	cmp	r3, #2
 800cbce:	d103      	bne.n	800cbd8 <find_volume+0x380>
 800cbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd2:	699b      	ldr	r3, [r3, #24]
 800cbd4:	005b      	lsls	r3, r3, #1
 800cbd6:	e00a      	b.n	800cbee <find_volume+0x396>
 800cbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbda:	699a      	ldr	r2, [r3, #24]
 800cbdc:	4613      	mov	r3, r2
 800cbde:	005b      	lsls	r3, r3, #1
 800cbe0:	4413      	add	r3, r2
 800cbe2:	085a      	lsrs	r2, r3, #1
 800cbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe6:	699b      	ldr	r3, [r3, #24]
 800cbe8:	f003 0301 	and.w	r3, r3, #1
 800cbec:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cbee:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf2:	69da      	ldr	r2, [r3, #28]
 800cbf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbf6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cbfa:	0a5b      	lsrs	r3, r3, #9
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d201      	bcs.n	800cc04 <find_volume+0x3ac>
 800cc00:	230d      	movs	r3, #13
 800cc02:	e06d      	b.n	800cce0 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc0a:	615a      	str	r2, [r3, #20]
 800cc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0e:	695a      	ldr	r2, [r3, #20]
 800cc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc12:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800cc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc16:	2280      	movs	r2, #128	; 0x80
 800cc18:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cc1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc1e:	2b03      	cmp	r3, #3
 800cc20:	d149      	bne.n	800ccb6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc24:	3334      	adds	r3, #52	; 0x34
 800cc26:	3330      	adds	r3, #48	; 0x30
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7fd fdc7 	bl	800a7bc <ld_word>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d140      	bne.n	800ccb6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cc34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc36:	3301      	adds	r3, #1
 800cc38:	4619      	mov	r1, r3
 800cc3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc3c:	f7fe f86e 	bl	800ad1c <move_window>
 800cc40:	4603      	mov	r3, r0
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d137      	bne.n	800ccb6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800cc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc48:	2200      	movs	r2, #0
 800cc4a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4e:	3334      	adds	r3, #52	; 0x34
 800cc50:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7fd fdb1 	bl	800a7bc <ld_word>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d127      	bne.n	800ccb6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc68:	3334      	adds	r3, #52	; 0x34
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7fd fdbe 	bl	800a7ec <ld_dword>
 800cc70:	4603      	mov	r3, r0
 800cc72:	4a1d      	ldr	r2, [pc, #116]	; (800cce8 <find_volume+0x490>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d11e      	bne.n	800ccb6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7a:	3334      	adds	r3, #52	; 0x34
 800cc7c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7fd fdb3 	bl	800a7ec <ld_dword>
 800cc86:	4603      	mov	r3, r0
 800cc88:	4a18      	ldr	r2, [pc, #96]	; (800ccec <find_volume+0x494>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d113      	bne.n	800ccb6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc90:	3334      	adds	r3, #52	; 0x34
 800cc92:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fd fda8 	bl	800a7ec <ld_dword>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca4:	3334      	adds	r3, #52	; 0x34
 800cca6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f7fd fd9e 	bl	800a7ec <ld_dword>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ccb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ccbc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ccbe:	4b0c      	ldr	r3, [pc, #48]	; (800ccf0 <find_volume+0x498>)
 800ccc0:	881b      	ldrh	r3, [r3, #0]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	b29a      	uxth	r2, r3
 800ccc6:	4b0a      	ldr	r3, [pc, #40]	; (800ccf0 <find_volume+0x498>)
 800ccc8:	801a      	strh	r2, [r3, #0]
 800ccca:	4b09      	ldr	r3, [pc, #36]	; (800ccf0 <find_volume+0x498>)
 800cccc:	881a      	ldrh	r2, [r3, #0]
 800ccce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd0:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ccd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd4:	4a07      	ldr	r2, [pc, #28]	; (800ccf4 <find_volume+0x49c>)
 800ccd6:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ccd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ccda:	f7fd ffb7 	bl	800ac4c <clear_lock>
#endif
	return FR_OK;
 800ccde:	2300      	movs	r3, #0
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3758      	adds	r7, #88	; 0x58
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	41615252 	.word	0x41615252
 800ccec:	61417272 	.word	0x61417272
 800ccf0:	2000071c 	.word	0x2000071c
 800ccf4:	20000740 	.word	0x20000740

0800ccf8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cd02:	2309      	movs	r3, #9
 800cd04:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d01c      	beq.n	800cd46 <validate+0x4e>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d018      	beq.n	800cd46 <validate+0x4e>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d013      	beq.n	800cd46 <validate+0x4e>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	889a      	ldrh	r2, [r3, #4]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	88db      	ldrh	r3, [r3, #6]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d10c      	bne.n	800cd46 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	785b      	ldrb	r3, [r3, #1]
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7fd fca4 	bl	800a680 <disk_status>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	f003 0301 	and.w	r3, r3, #1
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d101      	bne.n	800cd46 <validate+0x4e>
			res = FR_OK;
 800cd42:	2300      	movs	r3, #0
 800cd44:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cd46:	7bfb      	ldrb	r3, [r7, #15]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d102      	bne.n	800cd52 <validate+0x5a>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	e000      	b.n	800cd54 <validate+0x5c>
 800cd52:	2300      	movs	r3, #0
 800cd54:	683a      	ldr	r2, [r7, #0]
 800cd56:	6013      	str	r3, [r2, #0]
	return res;
 800cd58:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3710      	adds	r7, #16
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
	...

0800cd64 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b088      	sub	sp, #32
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cd76:	f107 0310 	add.w	r3, r7, #16
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7ff fcd1 	bl	800c722 <get_ldnumber>
 800cd80:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cd82:	69fb      	ldr	r3, [r7, #28]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	da01      	bge.n	800cd8c <f_mount+0x28>
 800cd88:	230b      	movs	r3, #11
 800cd8a:	e02b      	b.n	800cde4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cd8c:	4a17      	ldr	r2, [pc, #92]	; (800cdec <f_mount+0x88>)
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd94:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cd96:	69bb      	ldr	r3, [r7, #24]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d005      	beq.n	800cda8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cd9c:	69b8      	ldr	r0, [r7, #24]
 800cd9e:	f7fd ff55 	bl	800ac4c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cda2:	69bb      	ldr	r3, [r7, #24]
 800cda4:	2200      	movs	r2, #0
 800cda6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d002      	beq.n	800cdb4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	490d      	ldr	r1, [pc, #52]	; (800cdec <f_mount+0x88>)
 800cdb8:	69fb      	ldr	r3, [r7, #28]
 800cdba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d002      	beq.n	800cdca <f_mount+0x66>
 800cdc4:	79fb      	ldrb	r3, [r7, #7]
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d001      	beq.n	800cdce <f_mount+0x6a>
 800cdca:	2300      	movs	r3, #0
 800cdcc:	e00a      	b.n	800cde4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cdce:	f107 010c 	add.w	r1, r7, #12
 800cdd2:	f107 0308 	add.w	r3, r7, #8
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7ff fd3d 	bl	800c858 <find_volume>
 800cdde:	4603      	mov	r3, r0
 800cde0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cde2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3720      	adds	r7, #32
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	20000718 	.word	0x20000718

0800cdf0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b09a      	sub	sp, #104	; 0x68
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d101      	bne.n	800ce08 <f_open+0x18>
 800ce04:	2309      	movs	r3, #9
 800ce06:	e1aa      	b.n	800d15e <f_open+0x36e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ce08:	79fb      	ldrb	r3, [r7, #7]
 800ce0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce0e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ce10:	79fa      	ldrb	r2, [r7, #7]
 800ce12:	f107 0110 	add.w	r1, r7, #16
 800ce16:	f107 0308 	add.w	r3, r7, #8
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7ff fd1c 	bl	800c858 <find_volume>
 800ce20:	4603      	mov	r3, r0
 800ce22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ce26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	f040 818e 	bne.w	800d14c <f_open+0x35c>
		dj.obj.fs = fs;
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ce34:	68ba      	ldr	r2, [r7, #8]
 800ce36:	f107 0314 	add.w	r3, r7, #20
 800ce3a:	4611      	mov	r1, r2
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f7ff fbff 	bl	800c640 <follow_path>
 800ce42:	4603      	mov	r3, r0
 800ce44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ce48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d11a      	bne.n	800ce86 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ce50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ce54:	b25b      	sxtb	r3, r3
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	da03      	bge.n	800ce62 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ce5a:	2306      	movs	r3, #6
 800ce5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ce60:	e011      	b.n	800ce86 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ce62:	79fb      	ldrb	r3, [r7, #7]
 800ce64:	f023 0301 	bic.w	r3, r3, #1
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	bf14      	ite	ne
 800ce6c:	2301      	movne	r3, #1
 800ce6e:	2300      	moveq	r3, #0
 800ce70:	b2db      	uxtb	r3, r3
 800ce72:	461a      	mov	r2, r3
 800ce74:	f107 0314 	add.w	r3, r7, #20
 800ce78:	4611      	mov	r1, r2
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7fd fd9e 	bl	800a9bc <chk_lock>
 800ce80:	4603      	mov	r3, r0
 800ce82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ce86:	79fb      	ldrb	r3, [r7, #7]
 800ce88:	f003 031c 	and.w	r3, r3, #28
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d07f      	beq.n	800cf90 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ce90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d017      	beq.n	800cec8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ce98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce9c:	2b04      	cmp	r3, #4
 800ce9e:	d10e      	bne.n	800cebe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cea0:	f7fd fde8 	bl	800aa74 <enq_lock>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d006      	beq.n	800ceb8 <f_open+0xc8>
 800ceaa:	f107 0314 	add.w	r3, r7, #20
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7fe ff96 	bl	800bde0 <dir_register>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	e000      	b.n	800ceba <f_open+0xca>
 800ceb8:	2312      	movs	r3, #18
 800ceba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cebe:	79fb      	ldrb	r3, [r7, #7]
 800cec0:	f043 0308 	orr.w	r3, r3, #8
 800cec4:	71fb      	strb	r3, [r7, #7]
 800cec6:	e010      	b.n	800ceea <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cec8:	7ebb      	ldrb	r3, [r7, #26]
 800ceca:	f003 0311 	and.w	r3, r3, #17
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d003      	beq.n	800ceda <f_open+0xea>
					res = FR_DENIED;
 800ced2:	2307      	movs	r3, #7
 800ced4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ced8:	e007      	b.n	800ceea <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ceda:	79fb      	ldrb	r3, [r7, #7]
 800cedc:	f003 0304 	and.w	r3, r3, #4
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d002      	beq.n	800ceea <f_open+0xfa>
 800cee4:	2308      	movs	r3, #8
 800cee6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ceea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d168      	bne.n	800cfc4 <f_open+0x1d4>
 800cef2:	79fb      	ldrb	r3, [r7, #7]
 800cef4:	f003 0308 	and.w	r3, r3, #8
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d063      	beq.n	800cfc4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800cefc:	f7fd fa32 	bl	800a364 <get_fattime>
 800cf00:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cf02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf04:	330e      	adds	r3, #14
 800cf06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7fd fcad 	bl	800a868 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cf0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf10:	3316      	adds	r3, #22
 800cf12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7fd fca7 	bl	800a868 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cf1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf1c:	330b      	adds	r3, #11
 800cf1e:	2220      	movs	r2, #32
 800cf20:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf26:	4611      	mov	r1, r2
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f7fe fbc8 	bl	800b6be <ld_clust>
 800cf2e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cf34:	2200      	movs	r2, #0
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7fe fbe0 	bl	800b6fc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cf3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf3e:	331c      	adds	r3, #28
 800cf40:	2100      	movs	r1, #0
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fd fc90 	bl	800a868 <st_dword>
					fs->wflag = 1;
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cf4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d037      	beq.n	800cfc4 <f_open+0x1d4>
						dw = fs->winsect;
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf58:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800cf5a:	f107 0314 	add.w	r3, r7, #20
 800cf5e:	2200      	movs	r2, #0
 800cf60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7fe f927 	bl	800b1b6 <remove_chain>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800cf6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d126      	bne.n	800cfc4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7fd fece 	bl	800ad1c <move_window>
 800cf80:	4603      	mov	r3, r0
 800cf82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf8a:	3a01      	subs	r2, #1
 800cf8c:	611a      	str	r2, [r3, #16]
 800cf8e:	e019      	b.n	800cfc4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cf90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d115      	bne.n	800cfc4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cf98:	7ebb      	ldrb	r3, [r7, #26]
 800cf9a:	f003 0310 	and.w	r3, r3, #16
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d003      	beq.n	800cfaa <f_open+0x1ba>
					res = FR_NO_FILE;
 800cfa2:	2304      	movs	r3, #4
 800cfa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cfa8:	e00c      	b.n	800cfc4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cfaa:	79fb      	ldrb	r3, [r7, #7]
 800cfac:	f003 0302 	and.w	r3, r3, #2
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d007      	beq.n	800cfc4 <f_open+0x1d4>
 800cfb4:	7ebb      	ldrb	r3, [r7, #26]
 800cfb6:	f003 0301 	and.w	r3, r3, #1
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d002      	beq.n	800cfc4 <f_open+0x1d4>
						res = FR_DENIED;
 800cfbe:	2307      	movs	r3, #7
 800cfc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800cfc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d128      	bne.n	800d01e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cfcc:	79fb      	ldrb	r3, [r7, #7]
 800cfce:	f003 0308 	and.w	r3, r3, #8
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d003      	beq.n	800cfde <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800cfd6:	79fb      	ldrb	r3, [r7, #7]
 800cfd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfdc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cfe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cfec:	79fb      	ldrb	r3, [r7, #7]
 800cfee:	f023 0301 	bic.w	r3, r3, #1
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	bf14      	ite	ne
 800cff6:	2301      	movne	r3, #1
 800cff8:	2300      	moveq	r3, #0
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	461a      	mov	r2, r3
 800cffe:	f107 0314 	add.w	r3, r7, #20
 800d002:	4611      	mov	r1, r2
 800d004:	4618      	mov	r0, r3
 800d006:	f7fd fd57 	bl	800aab8 <inc_lock>
 800d00a:	4602      	mov	r2, r0
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	691b      	ldr	r3, [r3, #16]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d102      	bne.n	800d01e <f_open+0x22e>
 800d018:	2302      	movs	r3, #2
 800d01a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d01e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d022:	2b00      	cmp	r3, #0
 800d024:	f040 8092 	bne.w	800d14c <f_open+0x35c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d02c:	4611      	mov	r1, r2
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fe fb45 	bl	800b6be <ld_clust>
 800d034:	4602      	mov	r2, r0
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d03c:	331c      	adds	r3, #28
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fd fbd4 	bl	800a7ec <ld_dword>
 800d044:	4602      	mov	r2, r0
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d04a:	693a      	ldr	r2, [r7, #16]
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	88da      	ldrh	r2, [r3, #6]
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	79fa      	ldrb	r2, [r7, #7]
 800d05c:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2200      	movs	r2, #0
 800d062:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2200      	movs	r2, #0
 800d068:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2200      	movs	r2, #0
 800d06e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	332c      	adds	r3, #44	; 0x2c
 800d074:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d078:	2100      	movs	r1, #0
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7fd fc41 	bl	800a902 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d080:	79fb      	ldrb	r3, [r7, #7]
 800d082:	f003 0320 	and.w	r3, r3, #32
 800d086:	2b00      	cmp	r3, #0
 800d088:	d060      	beq.n	800d14c <f_open+0x35c>
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d05c      	beq.n	800d14c <f_open+0x35c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	68da      	ldr	r2, [r3, #12]
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	895b      	ldrh	r3, [r3, #10]
 800d09e:	025b      	lsls	r3, r3, #9
 800d0a0:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	689b      	ldr	r3, [r3, #8]
 800d0a6:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d0ae:	e016      	b.n	800d0de <f_open+0x2ee>
					clst = get_fat(&fp->obj, clst);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7fd feec 	bl	800ae92 <get_fat>
 800d0ba:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d0bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	d802      	bhi.n	800d0c8 <f_open+0x2d8>
 800d0c2:	2302      	movs	r3, #2
 800d0c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d0c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d0ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0ce:	d102      	bne.n	800d0d6 <f_open+0x2e6>
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d0d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d0d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0da:	1ad3      	subs	r3, r2, r3
 800d0dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d0de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d103      	bne.n	800d0ee <f_open+0x2fe>
 800d0e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d0e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d8e0      	bhi.n	800d0b0 <f_open+0x2c0>
				}
				fp->clust = clst;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d0f2:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d0f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d127      	bne.n	800d14c <f_open+0x35c>
 800d0fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d102:	2b00      	cmp	r3, #0
 800d104:	d022      	beq.n	800d14c <f_open+0x35c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fd fea2 	bl	800ae54 <clust2sect>
 800d110:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d114:	2b00      	cmp	r3, #0
 800d116:	d103      	bne.n	800d120 <f_open+0x330>
						res = FR_INT_ERR;
 800d118:	2302      	movs	r3, #2
 800d11a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d11e:	e015      	b.n	800d14c <f_open+0x35c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d122:	0a5a      	lsrs	r2, r3, #9
 800d124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d126:	441a      	add	r2, r3
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	7858      	ldrb	r0, [r3, #1]
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	6a1a      	ldr	r2, [r3, #32]
 800d13a:	2301      	movs	r3, #1
 800d13c:	f7fd fae0 	bl	800a700 <disk_read>
 800d140:	4603      	mov	r3, r0
 800d142:	2b00      	cmp	r3, #0
 800d144:	d002      	beq.n	800d14c <f_open+0x35c>
 800d146:	2301      	movs	r3, #1
 800d148:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d14c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d150:	2b00      	cmp	r3, #0
 800d152:	d002      	beq.n	800d15a <f_open+0x36a>
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2200      	movs	r2, #0
 800d158:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d15a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3768      	adds	r7, #104	; 0x68
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b08e      	sub	sp, #56	; 0x38
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	60f8      	str	r0, [r7, #12]
 800d16e:	60b9      	str	r1, [r7, #8]
 800d170:	607a      	str	r2, [r7, #4]
 800d172:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	2200      	movs	r2, #0
 800d17c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	f107 0214 	add.w	r2, r7, #20
 800d184:	4611      	mov	r1, r2
 800d186:	4618      	mov	r0, r3
 800d188:	f7ff fdb6 	bl	800ccf8 <validate>
 800d18c:	4603      	mov	r3, r0
 800d18e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d192:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d196:	2b00      	cmp	r3, #0
 800d198:	d107      	bne.n	800d1aa <f_read+0x44>
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	7d5b      	ldrb	r3, [r3, #21]
 800d19e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d1a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d002      	beq.n	800d1b0 <f_read+0x4a>
 800d1aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1ae:	e109      	b.n	800d3c4 <f_read+0x25e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	7d1b      	ldrb	r3, [r3, #20]
 800d1b4:	f003 0301 	and.w	r3, r3, #1
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d101      	bne.n	800d1c0 <f_read+0x5a>
 800d1bc:	2307      	movs	r3, #7
 800d1be:	e101      	b.n	800d3c4 <f_read+0x25e>
	remain = fp->obj.objsize - fp->fptr;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	68da      	ldr	r2, [r3, #12]
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	699b      	ldr	r3, [r3, #24]
 800d1c8:	1ad3      	subs	r3, r2, r3
 800d1ca:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	6a3b      	ldr	r3, [r7, #32]
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	f240 80f2 	bls.w	800d3ba <f_read+0x254>
 800d1d6:	6a3b      	ldr	r3, [r7, #32]
 800d1d8:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d1da:	e0ee      	b.n	800d3ba <f_read+0x254>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	699b      	ldr	r3, [r3, #24]
 800d1e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	f040 80ba 	bne.w	800d35e <f_read+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	699b      	ldr	r3, [r3, #24]
 800d1ee:	0a5b      	lsrs	r3, r3, #9
 800d1f0:	697a      	ldr	r2, [r7, #20]
 800d1f2:	8952      	ldrh	r2, [r2, #10]
 800d1f4:	3a01      	subs	r2, #1
 800d1f6:	4013      	ands	r3, r2
 800d1f8:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d1fa:	69fb      	ldr	r3, [r7, #28]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d123      	bne.n	800d248 <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	699b      	ldr	r3, [r3, #24]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d103      	bne.n	800d210 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	689b      	ldr	r3, [r3, #8]
 800d20c:	633b      	str	r3, [r7, #48]	; 0x30
 800d20e:	e007      	b.n	800d220 <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d210:	68fa      	ldr	r2, [r7, #12]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	69db      	ldr	r3, [r3, #28]
 800d216:	4619      	mov	r1, r3
 800d218:	4610      	mov	r0, r2
 800d21a:	f7fd fe3a 	bl	800ae92 <get_fat>
 800d21e:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d222:	2b01      	cmp	r3, #1
 800d224:	d804      	bhi.n	800d230 <f_read+0xca>
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2202      	movs	r2, #2
 800d22a:	755a      	strb	r2, [r3, #21]
 800d22c:	2302      	movs	r3, #2
 800d22e:	e0c9      	b.n	800d3c4 <f_read+0x25e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d236:	d104      	bne.n	800d242 <f_read+0xdc>
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2201      	movs	r2, #1
 800d23c:	755a      	strb	r2, [r3, #21]
 800d23e:	2301      	movs	r3, #1
 800d240:	e0c0      	b.n	800d3c4 <f_read+0x25e>
				fp->clust = clst;				/* Update current cluster */
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d246:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d248:	697a      	ldr	r2, [r7, #20]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	69db      	ldr	r3, [r3, #28]
 800d24e:	4619      	mov	r1, r3
 800d250:	4610      	mov	r0, r2
 800d252:	f7fd fdff 	bl	800ae54 <clust2sect>
 800d256:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d258:	69bb      	ldr	r3, [r7, #24]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d104      	bne.n	800d268 <f_read+0x102>
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	2202      	movs	r2, #2
 800d262:	755a      	strb	r2, [r3, #21]
 800d264:	2302      	movs	r3, #2
 800d266:	e0ad      	b.n	800d3c4 <f_read+0x25e>
			sect += csect;
 800d268:	69ba      	ldr	r2, [r7, #24]
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	4413      	add	r3, r2
 800d26e:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	0a5b      	lsrs	r3, r3, #9
 800d274:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d039      	beq.n	800d2f0 <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d27c:	69fa      	ldr	r2, [r7, #28]
 800d27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d280:	4413      	add	r3, r2
 800d282:	697a      	ldr	r2, [r7, #20]
 800d284:	8952      	ldrh	r2, [r2, #10]
 800d286:	4293      	cmp	r3, r2
 800d288:	d905      	bls.n	800d296 <f_read+0x130>
					cc = fs->csize - csect;
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	895b      	ldrh	r3, [r3, #10]
 800d28e:	461a      	mov	r2, r3
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	1ad3      	subs	r3, r2, r3
 800d294:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	7858      	ldrb	r0, [r3, #1]
 800d29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29c:	69ba      	ldr	r2, [r7, #24]
 800d29e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d2a0:	f7fd fa2e 	bl	800a700 <disk_read>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d004      	beq.n	800d2b4 <f_read+0x14e>
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	755a      	strb	r2, [r3, #21]
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e087      	b.n	800d3c4 <f_read+0x25e>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	7d1b      	ldrb	r3, [r3, #20]
 800d2b8:	b25b      	sxtb	r3, r3
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	da14      	bge.n	800d2e8 <f_read+0x182>
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6a1a      	ldr	r2, [r3, #32]
 800d2c2:	69bb      	ldr	r3, [r7, #24]
 800d2c4:	1ad3      	subs	r3, r2, r3
 800d2c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d90d      	bls.n	800d2e8 <f_read+0x182>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	6a1a      	ldr	r2, [r3, #32]
 800d2d0:	69bb      	ldr	r3, [r7, #24]
 800d2d2:	1ad3      	subs	r3, r2, r3
 800d2d4:	025b      	lsls	r3, r3, #9
 800d2d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2d8:	18d0      	adds	r0, r2, r3
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	332c      	adds	r3, #44	; 0x2c
 800d2de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	f7fd faec 	bl	800a8c0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ea:	025b      	lsls	r3, r3, #9
 800d2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d2ee:	e050      	b.n	800d392 <f_read+0x22c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	6a1b      	ldr	r3, [r3, #32]
 800d2f4:	69ba      	ldr	r2, [r7, #24]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d02e      	beq.n	800d358 <f_read+0x1f2>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	7d1b      	ldrb	r3, [r3, #20]
 800d2fe:	b25b      	sxtb	r3, r3
 800d300:	2b00      	cmp	r3, #0
 800d302:	da18      	bge.n	800d336 <f_read+0x1d0>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	7858      	ldrb	r0, [r3, #1]
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	6a1a      	ldr	r2, [r3, #32]
 800d312:	2301      	movs	r3, #1
 800d314:	f7fd fa14 	bl	800a740 <disk_write>
 800d318:	4603      	mov	r3, r0
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d004      	beq.n	800d328 <f_read+0x1c2>
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2201      	movs	r2, #1
 800d322:	755a      	strb	r2, [r3, #21]
 800d324:	2301      	movs	r3, #1
 800d326:	e04d      	b.n	800d3c4 <f_read+0x25e>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	7d1b      	ldrb	r3, [r3, #20]
 800d32c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d330:	b2da      	uxtb	r2, r3
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	7858      	ldrb	r0, [r3, #1]
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800d340:	2301      	movs	r3, #1
 800d342:	69ba      	ldr	r2, [r7, #24]
 800d344:	f7fd f9dc 	bl	800a700 <disk_read>
 800d348:	4603      	mov	r3, r0
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d004      	beq.n	800d358 <f_read+0x1f2>
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2201      	movs	r2, #1
 800d352:	755a      	strb	r2, [r3, #21]
 800d354:	2301      	movs	r3, #1
 800d356:	e035      	b.n	800d3c4 <f_read+0x25e>
			}
#endif
			fp->sect = sect;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	69ba      	ldr	r2, [r7, #24]
 800d35c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	699b      	ldr	r3, [r3, #24]
 800d362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d366:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d36a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d36c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	429a      	cmp	r2, r3
 800d372:	d901      	bls.n	800d378 <f_read+0x212>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	699b      	ldr	r3, [r3, #24]
 800d382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d386:	4413      	add	r3, r2
 800d388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d38a:	4619      	mov	r1, r3
 800d38c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d38e:	f7fd fa97 	bl	800a8c0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d396:	4413      	add	r3, r2
 800d398:	627b      	str	r3, [r7, #36]	; 0x24
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	699a      	ldr	r2, [r3, #24]
 800d39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a0:	441a      	add	r2, r3
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	619a      	str	r2, [r3, #24]
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ac:	441a      	add	r2, r3
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	601a      	str	r2, [r3, #0]
 800d3b2:	687a      	ldr	r2, [r7, #4]
 800d3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b6:	1ad3      	subs	r3, r2, r3
 800d3b8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f47f af0d 	bne.w	800d1dc <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d3c2:	2300      	movs	r3, #0
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3738      	adds	r7, #56	; 0x38
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b086      	sub	sp, #24
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f107 0208 	add.w	r2, r7, #8
 800d3da:	4611      	mov	r1, r2
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7ff fc8b 	bl	800ccf8 <validate>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d3e6:	7dfb      	ldrb	r3, [r7, #23]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d168      	bne.n	800d4be <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	7d1b      	ldrb	r3, [r3, #20]
 800d3f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d062      	beq.n	800d4be <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	7d1b      	ldrb	r3, [r3, #20]
 800d3fc:	b25b      	sxtb	r3, r3
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	da15      	bge.n	800d42e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	7858      	ldrb	r0, [r3, #1]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6a1a      	ldr	r2, [r3, #32]
 800d410:	2301      	movs	r3, #1
 800d412:	f7fd f995 	bl	800a740 <disk_write>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d001      	beq.n	800d420 <f_sync+0x54>
 800d41c:	2301      	movs	r3, #1
 800d41e:	e04f      	b.n	800d4c0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	7d1b      	ldrb	r3, [r3, #20]
 800d424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d428:	b2da      	uxtb	r2, r3
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d42e:	f7fc ff99 	bl	800a364 <get_fattime>
 800d432:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d434:	68ba      	ldr	r2, [r7, #8]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d43a:	4619      	mov	r1, r3
 800d43c:	4610      	mov	r0, r2
 800d43e:	f7fd fc6d 	bl	800ad1c <move_window>
 800d442:	4603      	mov	r3, r0
 800d444:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d446:	7dfb      	ldrb	r3, [r7, #23]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d138      	bne.n	800d4be <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d450:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	330b      	adds	r3, #11
 800d456:	781a      	ldrb	r2, [r3, #0]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	330b      	adds	r3, #11
 800d45c:	f042 0220 	orr.w	r2, r2, #32
 800d460:	b2d2      	uxtb	r2, r2
 800d462:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6818      	ldr	r0, [r3, #0]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	689b      	ldr	r3, [r3, #8]
 800d46c:	461a      	mov	r2, r3
 800d46e:	68f9      	ldr	r1, [r7, #12]
 800d470:	f7fe f944 	bl	800b6fc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f103 021c 	add.w	r2, r3, #28
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	68db      	ldr	r3, [r3, #12]
 800d47e:	4619      	mov	r1, r3
 800d480:	4610      	mov	r0, r2
 800d482:	f7fd f9f1 	bl	800a868 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	3316      	adds	r3, #22
 800d48a:	6939      	ldr	r1, [r7, #16]
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7fd f9eb 	bl	800a868 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	3312      	adds	r3, #18
 800d496:	2100      	movs	r1, #0
 800d498:	4618      	mov	r0, r3
 800d49a:	f7fd f9ca 	bl	800a832 <st_word>
					fs->wflag = 1;
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7fd fc66 	bl	800ad78 <sync_fs>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	7d1b      	ldrb	r3, [r3, #20]
 800d4b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4b8:	b2da      	uxtb	r2, r3
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d4be:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3718      	adds	r7, #24
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f7ff ff7b 	bl	800d3cc <f_sync>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d4da:	7bfb      	ldrb	r3, [r7, #15]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d118      	bne.n	800d512 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f107 0208 	add.w	r2, r7, #8
 800d4e6:	4611      	mov	r1, r2
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7ff fc05 	bl	800ccf8 <validate>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d4f2:	7bfb      	ldrb	r3, [r7, #15]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d10c      	bne.n	800d512 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	691b      	ldr	r3, [r3, #16]
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7fd fb69 	bl	800abd4 <dec_lock>
 800d502:	4603      	mov	r3, r0
 800d504:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d506:	7bfb      	ldrb	r3, [r7, #15]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d102      	bne.n	800d512 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2200      	movs	r2, #0
 800d510:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d512:	7bfb      	ldrb	r3, [r7, #15]
}
 800d514:	4618      	mov	r0, r3
 800d516:	3710      	adds	r7, #16
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b086      	sub	sp, #24
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d101      	bne.n	800d530 <f_opendir+0x14>
 800d52c:	2309      	movs	r3, #9
 800d52e:	e064      	b.n	800d5fa <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800d534:	f107 010c 	add.w	r1, r7, #12
 800d538:	463b      	mov	r3, r7
 800d53a:	2200      	movs	r2, #0
 800d53c:	4618      	mov	r0, r3
 800d53e:	f7ff f98b 	bl	800c858 <find_volume>
 800d542:	4603      	mov	r3, r0
 800d544:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d546:	7dfb      	ldrb	r3, [r7, #23]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d14f      	bne.n	800d5ec <f_opendir+0xd0>
		obj->fs = fs;
 800d54c:	68fa      	ldr	r2, [r7, #12]
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	4619      	mov	r1, r3
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f7ff f872 	bl	800c640 <follow_path>
 800d55c:	4603      	mov	r3, r0
 800d55e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800d560:	7dfb      	ldrb	r3, [r7, #23]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d13d      	bne.n	800d5e2 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d56c:	b25b      	sxtb	r3, r3
 800d56e:	2b00      	cmp	r3, #0
 800d570:	db12      	blt.n	800d598 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	799b      	ldrb	r3, [r3, #6]
 800d576:	f003 0310 	and.w	r3, r3, #16
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d00a      	beq.n	800d594 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d57e:	68fa      	ldr	r2, [r7, #12]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6a1b      	ldr	r3, [r3, #32]
 800d584:	4619      	mov	r1, r3
 800d586:	4610      	mov	r0, r2
 800d588:	f7fe f899 	bl	800b6be <ld_clust>
 800d58c:	4602      	mov	r2, r0
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	609a      	str	r2, [r3, #8]
 800d592:	e001      	b.n	800d598 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800d594:	2305      	movs	r3, #5
 800d596:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800d598:	7dfb      	ldrb	r3, [r7, #23]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d121      	bne.n	800d5e2 <f_opendir+0xc6>
				obj->id = fs->id;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	88da      	ldrh	r2, [r3, #6]
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d5a6:	2100      	movs	r1, #0
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f7fd ff01 	bl	800b3b0 <dir_sdi>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800d5b2:	7dfb      	ldrb	r3, [r7, #23]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d114      	bne.n	800d5e2 <f_opendir+0xc6>
					if (obj->sclust) {
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	689b      	ldr	r3, [r3, #8]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d00d      	beq.n	800d5dc <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d5c0:	2100      	movs	r1, #0
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f7fd fa78 	bl	800aab8 <inc_lock>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	691b      	ldr	r3, [r3, #16]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d105      	bne.n	800d5e2 <f_opendir+0xc6>
 800d5d6:	2312      	movs	r3, #18
 800d5d8:	75fb      	strb	r3, [r7, #23]
 800d5da:	e002      	b.n	800d5e2 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d5e2:	7dfb      	ldrb	r3, [r7, #23]
 800d5e4:	2b04      	cmp	r3, #4
 800d5e6:	d101      	bne.n	800d5ec <f_opendir+0xd0>
 800d5e8:	2305      	movs	r3, #5
 800d5ea:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d5ec:	7dfb      	ldrb	r3, [r7, #23]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d002      	beq.n	800d5f8 <f_opendir+0xdc>
 800d5f2:	693b      	ldr	r3, [r7, #16]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d5f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3718      	adds	r7, #24
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800d602:	b580      	push	{r7, lr}
 800d604:	b084      	sub	sp, #16
 800d606:	af00      	add	r7, sp, #0
 800d608:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f107 0208 	add.w	r2, r7, #8
 800d610:	4611      	mov	r1, r2
 800d612:	4618      	mov	r0, r3
 800d614:	f7ff fb70 	bl	800ccf8 <validate>
 800d618:	4603      	mov	r3, r0
 800d61a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d61c:	7bfb      	ldrb	r3, [r7, #15]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d110      	bne.n	800d644 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d006      	beq.n	800d638 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	691b      	ldr	r3, [r3, #16]
 800d62e:	4618      	mov	r0, r3
 800d630:	f7fd fad0 	bl	800abd4 <dec_lock>
 800d634:	4603      	mov	r3, r0
 800d636:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800d638:	7bfb      	ldrb	r3, [r7, #15]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d102      	bne.n	800d644 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2200      	movs	r2, #0
 800d642:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800d644:	7bfb      	ldrb	r3, [r7, #15]
}
 800d646:	4618      	mov	r0, r3
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}

0800d64e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	b084      	sub	sp, #16
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
 800d656:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f107 0208 	add.w	r2, r7, #8
 800d65e:	4611      	mov	r1, r2
 800d660:	4618      	mov	r0, r3
 800d662:	f7ff fb49 	bl	800ccf8 <validate>
 800d666:	4603      	mov	r3, r0
 800d668:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d66a:	7bfb      	ldrb	r3, [r7, #15]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d126      	bne.n	800d6be <f_readdir+0x70>
		if (!fno) {
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d106      	bne.n	800d684 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d676:	2100      	movs	r1, #0
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f7fd fe99 	bl	800b3b0 <dir_sdi>
 800d67e:	4603      	mov	r3, r0
 800d680:	73fb      	strb	r3, [r7, #15]
 800d682:	e01c      	b.n	800d6be <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800d684:	2100      	movs	r1, #0
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f7fe fa43 	bl	800bb12 <dir_read>
 800d68c:	4603      	mov	r3, r0
 800d68e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800d690:	7bfb      	ldrb	r3, [r7, #15]
 800d692:	2b04      	cmp	r3, #4
 800d694:	d101      	bne.n	800d69a <f_readdir+0x4c>
 800d696:	2300      	movs	r3, #0
 800d698:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800d69a:	7bfb      	ldrb	r3, [r7, #15]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d10e      	bne.n	800d6be <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d6a0:	6839      	ldr	r1, [r7, #0]
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f7fe fc94 	bl	800bfd0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f7fd fefb 	bl	800b4a6 <dir_next>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d6b4:	7bfb      	ldrb	r3, [r7, #15]
 800d6b6:	2b04      	cmp	r3, #4
 800d6b8:	d101      	bne.n	800d6be <f_readdir+0x70>
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800d6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3710      	adds	r7, #16
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b084      	sub	sp, #16
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800d6d2:	6839      	ldr	r1, [r7, #0]
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f7ff ffba 	bl	800d64e <f_readdir>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800d6de:	7bfb      	ldrb	r3, [r7, #15]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d114      	bne.n	800d70e <f_findnext+0x46>
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d011      	beq.n	800d70e <f_findnext+0x46>
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	7d9b      	ldrb	r3, [r3, #22]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d00d      	beq.n	800d70e <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	f103 0116 	add.w	r1, r3, #22
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	2200      	movs	r2, #0
 800d700:	f7fe fd6a 	bl	800c1d8 <pattern_matching>
 800d704:	4603      	mov	r3, r0
 800d706:	2b00      	cmp	r3, #0
 800d708:	d100      	bne.n	800d70c <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 800d70a:	e7e2      	b.n	800d6d2 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800d70c:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 800d70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d710:	4618      	mov	r0, r3
 800d712:	3710      	adds	r7, #16
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}

0800d718 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b086      	sub	sp, #24
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	60f8      	str	r0, [r7, #12]
 800d720:	60b9      	str	r1, [r7, #8]
 800d722:	607a      	str	r2, [r7, #4]
 800d724:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	683a      	ldr	r2, [r7, #0]
 800d72a:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 800d72c:	6879      	ldr	r1, [r7, #4]
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	f7ff fef4 	bl	800d51c <f_opendir>
 800d734:	4603      	mov	r3, r0
 800d736:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d738:	7dfb      	ldrb	r3, [r7, #23]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d105      	bne.n	800d74a <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 800d73e:	68b9      	ldr	r1, [r7, #8]
 800d740:	68f8      	ldr	r0, [r7, #12]
 800d742:	f7ff ffc1 	bl	800d6c8 <f_findnext>
 800d746:	4603      	mov	r3, r0
 800d748:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 800d74a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3718      	adds	r7, #24
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d754:	b480      	push	{r7}
 800d756:	b087      	sub	sp, #28
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	60b9      	str	r1, [r7, #8]
 800d75e:	4613      	mov	r3, r2
 800d760:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d762:	2301      	movs	r3, #1
 800d764:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d766:	2300      	movs	r3, #0
 800d768:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d76a:	4b1f      	ldr	r3, [pc, #124]	; (800d7e8 <FATFS_LinkDriverEx+0x94>)
 800d76c:	7a5b      	ldrb	r3, [r3, #9]
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	2b00      	cmp	r3, #0
 800d772:	d131      	bne.n	800d7d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d774:	4b1c      	ldr	r3, [pc, #112]	; (800d7e8 <FATFS_LinkDriverEx+0x94>)
 800d776:	7a5b      	ldrb	r3, [r3, #9]
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	461a      	mov	r2, r3
 800d77c:	4b1a      	ldr	r3, [pc, #104]	; (800d7e8 <FATFS_LinkDriverEx+0x94>)
 800d77e:	2100      	movs	r1, #0
 800d780:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d782:	4b19      	ldr	r3, [pc, #100]	; (800d7e8 <FATFS_LinkDriverEx+0x94>)
 800d784:	7a5b      	ldrb	r3, [r3, #9]
 800d786:	b2db      	uxtb	r3, r3
 800d788:	4a17      	ldr	r2, [pc, #92]	; (800d7e8 <FATFS_LinkDriverEx+0x94>)
 800d78a:	009b      	lsls	r3, r3, #2
 800d78c:	4413      	add	r3, r2
 800d78e:	68fa      	ldr	r2, [r7, #12]
 800d790:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d792:	4b15      	ldr	r3, [pc, #84]	; (800d7e8 <FATFS_LinkDriverEx+0x94>)
 800d794:	7a5b      	ldrb	r3, [r3, #9]
 800d796:	b2db      	uxtb	r3, r3
 800d798:	461a      	mov	r2, r3
 800d79a:	4b13      	ldr	r3, [pc, #76]	; (800d7e8 <FATFS_LinkDriverEx+0x94>)
 800d79c:	4413      	add	r3, r2
 800d79e:	79fa      	ldrb	r2, [r7, #7]
 800d7a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d7a2:	4b11      	ldr	r3, [pc, #68]	; (800d7e8 <FATFS_LinkDriverEx+0x94>)
 800d7a4:	7a5b      	ldrb	r3, [r3, #9]
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	1c5a      	adds	r2, r3, #1
 800d7aa:	b2d1      	uxtb	r1, r2
 800d7ac:	4a0e      	ldr	r2, [pc, #56]	; (800d7e8 <FATFS_LinkDriverEx+0x94>)
 800d7ae:	7251      	strb	r1, [r2, #9]
 800d7b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d7b2:	7dbb      	ldrb	r3, [r7, #22]
 800d7b4:	3330      	adds	r3, #48	; 0x30
 800d7b6:	b2da      	uxtb	r2, r3
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	3301      	adds	r3, #1
 800d7c0:	223a      	movs	r2, #58	; 0x3a
 800d7c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	3302      	adds	r3, #2
 800d7c8:	222f      	movs	r2, #47	; 0x2f
 800d7ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	3303      	adds	r3, #3
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d7d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	371c      	adds	r7, #28
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e4:	4770      	bx	lr
 800d7e6:	bf00      	nop
 800d7e8:	20000940 	.word	0x20000940

0800d7ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	6839      	ldr	r1, [r7, #0]
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f7ff ffaa 	bl	800d754 <FATFS_LinkDriverEx>
 800d800:	4603      	mov	r3, r0
}
 800d802:	4618      	mov	r0, r3
 800d804:	3708      	adds	r7, #8
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
	...

0800d80c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d80c:	b480      	push	{r7}
 800d80e:	b085      	sub	sp, #20
 800d810:	af00      	add	r7, sp, #0
 800d812:	4603      	mov	r3, r0
 800d814:	6039      	str	r1, [r7, #0]
 800d816:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d818:	88fb      	ldrh	r3, [r7, #6]
 800d81a:	2b7f      	cmp	r3, #127	; 0x7f
 800d81c:	d802      	bhi.n	800d824 <ff_convert+0x18>
		c = chr;
 800d81e:	88fb      	ldrh	r3, [r7, #6]
 800d820:	81fb      	strh	r3, [r7, #14]
 800d822:	e025      	b.n	800d870 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d00b      	beq.n	800d842 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d82a:	88fb      	ldrh	r3, [r7, #6]
 800d82c:	2bff      	cmp	r3, #255	; 0xff
 800d82e:	d805      	bhi.n	800d83c <ff_convert+0x30>
 800d830:	88fb      	ldrh	r3, [r7, #6]
 800d832:	3b80      	subs	r3, #128	; 0x80
 800d834:	4a12      	ldr	r2, [pc, #72]	; (800d880 <ff_convert+0x74>)
 800d836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d83a:	e000      	b.n	800d83e <ff_convert+0x32>
 800d83c:	2300      	movs	r3, #0
 800d83e:	81fb      	strh	r3, [r7, #14]
 800d840:	e016      	b.n	800d870 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d842:	2300      	movs	r3, #0
 800d844:	81fb      	strh	r3, [r7, #14]
 800d846:	e009      	b.n	800d85c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d848:	89fb      	ldrh	r3, [r7, #14]
 800d84a:	4a0d      	ldr	r2, [pc, #52]	; (800d880 <ff_convert+0x74>)
 800d84c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d850:	88fa      	ldrh	r2, [r7, #6]
 800d852:	429a      	cmp	r2, r3
 800d854:	d006      	beq.n	800d864 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d856:	89fb      	ldrh	r3, [r7, #14]
 800d858:	3301      	adds	r3, #1
 800d85a:	81fb      	strh	r3, [r7, #14]
 800d85c:	89fb      	ldrh	r3, [r7, #14]
 800d85e:	2b7f      	cmp	r3, #127	; 0x7f
 800d860:	d9f2      	bls.n	800d848 <ff_convert+0x3c>
 800d862:	e000      	b.n	800d866 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d864:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d866:	89fb      	ldrh	r3, [r7, #14]
 800d868:	3380      	adds	r3, #128	; 0x80
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	b2db      	uxtb	r3, r3
 800d86e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d870:	89fb      	ldrh	r3, [r7, #14]
}
 800d872:	4618      	mov	r0, r3
 800d874:	3714      	adds	r7, #20
 800d876:	46bd      	mov	sp, r7
 800d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87c:	4770      	bx	lr
 800d87e:	bf00      	nop
 800d880:	0800db10 	.word	0x0800db10

0800d884 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d884:	b480      	push	{r7}
 800d886:	b087      	sub	sp, #28
 800d888:	af00      	add	r7, sp, #0
 800d88a:	4603      	mov	r3, r0
 800d88c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d88e:	88fb      	ldrh	r3, [r7, #6]
 800d890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d894:	d201      	bcs.n	800d89a <ff_wtoupper+0x16>
 800d896:	4b3e      	ldr	r3, [pc, #248]	; (800d990 <ff_wtoupper+0x10c>)
 800d898:	e000      	b.n	800d89c <ff_wtoupper+0x18>
 800d89a:	4b3e      	ldr	r3, [pc, #248]	; (800d994 <ff_wtoupper+0x110>)
 800d89c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	1c9a      	adds	r2, r3, #2
 800d8a2:	617a      	str	r2, [r7, #20]
 800d8a4:	881b      	ldrh	r3, [r3, #0]
 800d8a6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d8a8:	8a7b      	ldrh	r3, [r7, #18]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d068      	beq.n	800d980 <ff_wtoupper+0xfc>
 800d8ae:	88fa      	ldrh	r2, [r7, #6]
 800d8b0:	8a7b      	ldrh	r3, [r7, #18]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d364      	bcc.n	800d980 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	1c9a      	adds	r2, r3, #2
 800d8ba:	617a      	str	r2, [r7, #20]
 800d8bc:	881b      	ldrh	r3, [r3, #0]
 800d8be:	823b      	strh	r3, [r7, #16]
 800d8c0:	8a3b      	ldrh	r3, [r7, #16]
 800d8c2:	0a1b      	lsrs	r3, r3, #8
 800d8c4:	81fb      	strh	r3, [r7, #14]
 800d8c6:	8a3b      	ldrh	r3, [r7, #16]
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d8cc:	88fa      	ldrh	r2, [r7, #6]
 800d8ce:	8a79      	ldrh	r1, [r7, #18]
 800d8d0:	8a3b      	ldrh	r3, [r7, #16]
 800d8d2:	440b      	add	r3, r1
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	da49      	bge.n	800d96c <ff_wtoupper+0xe8>
			switch (cmd) {
 800d8d8:	89fb      	ldrh	r3, [r7, #14]
 800d8da:	2b08      	cmp	r3, #8
 800d8dc:	d84f      	bhi.n	800d97e <ff_wtoupper+0xfa>
 800d8de:	a201      	add	r2, pc, #4	; (adr r2, 800d8e4 <ff_wtoupper+0x60>)
 800d8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e4:	0800d909 	.word	0x0800d909
 800d8e8:	0800d91b 	.word	0x0800d91b
 800d8ec:	0800d931 	.word	0x0800d931
 800d8f0:	0800d939 	.word	0x0800d939
 800d8f4:	0800d941 	.word	0x0800d941
 800d8f8:	0800d949 	.word	0x0800d949
 800d8fc:	0800d951 	.word	0x0800d951
 800d900:	0800d959 	.word	0x0800d959
 800d904:	0800d961 	.word	0x0800d961
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d908:	88fa      	ldrh	r2, [r7, #6]
 800d90a:	8a7b      	ldrh	r3, [r7, #18]
 800d90c:	1ad3      	subs	r3, r2, r3
 800d90e:	005b      	lsls	r3, r3, #1
 800d910:	697a      	ldr	r2, [r7, #20]
 800d912:	4413      	add	r3, r2
 800d914:	881b      	ldrh	r3, [r3, #0]
 800d916:	80fb      	strh	r3, [r7, #6]
 800d918:	e027      	b.n	800d96a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d91a:	88fa      	ldrh	r2, [r7, #6]
 800d91c:	8a7b      	ldrh	r3, [r7, #18]
 800d91e:	1ad3      	subs	r3, r2, r3
 800d920:	b29b      	uxth	r3, r3
 800d922:	f003 0301 	and.w	r3, r3, #1
 800d926:	b29b      	uxth	r3, r3
 800d928:	88fa      	ldrh	r2, [r7, #6]
 800d92a:	1ad3      	subs	r3, r2, r3
 800d92c:	80fb      	strh	r3, [r7, #6]
 800d92e:	e01c      	b.n	800d96a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d930:	88fb      	ldrh	r3, [r7, #6]
 800d932:	3b10      	subs	r3, #16
 800d934:	80fb      	strh	r3, [r7, #6]
 800d936:	e018      	b.n	800d96a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d938:	88fb      	ldrh	r3, [r7, #6]
 800d93a:	3b20      	subs	r3, #32
 800d93c:	80fb      	strh	r3, [r7, #6]
 800d93e:	e014      	b.n	800d96a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d940:	88fb      	ldrh	r3, [r7, #6]
 800d942:	3b30      	subs	r3, #48	; 0x30
 800d944:	80fb      	strh	r3, [r7, #6]
 800d946:	e010      	b.n	800d96a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d948:	88fb      	ldrh	r3, [r7, #6]
 800d94a:	3b1a      	subs	r3, #26
 800d94c:	80fb      	strh	r3, [r7, #6]
 800d94e:	e00c      	b.n	800d96a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d950:	88fb      	ldrh	r3, [r7, #6]
 800d952:	3308      	adds	r3, #8
 800d954:	80fb      	strh	r3, [r7, #6]
 800d956:	e008      	b.n	800d96a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d958:	88fb      	ldrh	r3, [r7, #6]
 800d95a:	3b50      	subs	r3, #80	; 0x50
 800d95c:	80fb      	strh	r3, [r7, #6]
 800d95e:	e004      	b.n	800d96a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d960:	88fb      	ldrh	r3, [r7, #6]
 800d962:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d966:	80fb      	strh	r3, [r7, #6]
 800d968:	bf00      	nop
			}
			break;
 800d96a:	e008      	b.n	800d97e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d96c:	89fb      	ldrh	r3, [r7, #14]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d195      	bne.n	800d89e <ff_wtoupper+0x1a>
 800d972:	8a3b      	ldrh	r3, [r7, #16]
 800d974:	005b      	lsls	r3, r3, #1
 800d976:	697a      	ldr	r2, [r7, #20]
 800d978:	4413      	add	r3, r2
 800d97a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d97c:	e78f      	b.n	800d89e <ff_wtoupper+0x1a>
			break;
 800d97e:	bf00      	nop
	}

	return chr;
 800d980:	88fb      	ldrh	r3, [r7, #6]
}
 800d982:	4618      	mov	r0, r3
 800d984:	371c      	adds	r7, #28
 800d986:	46bd      	mov	sp, r7
 800d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98c:	4770      	bx	lr
 800d98e:	bf00      	nop
 800d990:	0800dc10 	.word	0x0800dc10
 800d994:	0800de04 	.word	0x0800de04

0800d998 <memset>:
 800d998:	4402      	add	r2, r0
 800d99a:	4603      	mov	r3, r0
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d100      	bne.n	800d9a2 <memset+0xa>
 800d9a0:	4770      	bx	lr
 800d9a2:	f803 1b01 	strb.w	r1, [r3], #1
 800d9a6:	e7f9      	b.n	800d99c <memset+0x4>

0800d9a8 <__libc_init_array>:
 800d9a8:	b570      	push	{r4, r5, r6, lr}
 800d9aa:	4d0d      	ldr	r5, [pc, #52]	; (800d9e0 <__libc_init_array+0x38>)
 800d9ac:	4c0d      	ldr	r4, [pc, #52]	; (800d9e4 <__libc_init_array+0x3c>)
 800d9ae:	1b64      	subs	r4, r4, r5
 800d9b0:	10a4      	asrs	r4, r4, #2
 800d9b2:	2600      	movs	r6, #0
 800d9b4:	42a6      	cmp	r6, r4
 800d9b6:	d109      	bne.n	800d9cc <__libc_init_array+0x24>
 800d9b8:	4d0b      	ldr	r5, [pc, #44]	; (800d9e8 <__libc_init_array+0x40>)
 800d9ba:	4c0c      	ldr	r4, [pc, #48]	; (800d9ec <__libc_init_array+0x44>)
 800d9bc:	f000 fa80 	bl	800dec0 <_init>
 800d9c0:	1b64      	subs	r4, r4, r5
 800d9c2:	10a4      	asrs	r4, r4, #2
 800d9c4:	2600      	movs	r6, #0
 800d9c6:	42a6      	cmp	r6, r4
 800d9c8:	d105      	bne.n	800d9d6 <__libc_init_array+0x2e>
 800d9ca:	bd70      	pop	{r4, r5, r6, pc}
 800d9cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9d0:	4798      	blx	r3
 800d9d2:	3601      	adds	r6, #1
 800d9d4:	e7ee      	b.n	800d9b4 <__libc_init_array+0xc>
 800d9d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9da:	4798      	blx	r3
 800d9dc:	3601      	adds	r6, #1
 800d9de:	e7f2      	b.n	800d9c6 <__libc_init_array+0x1e>
 800d9e0:	0800ded8 	.word	0x0800ded8
 800d9e4:	0800ded8 	.word	0x0800ded8
 800d9e8:	0800ded8 	.word	0x0800ded8
 800d9ec:	0800dedc 	.word	0x0800dedc
 800d9f0:	63656c45 	.word	0x63656c45
 800d9f4:	736f7274 	.word	0x736f7274
 800d9f8:	6c656574 	.word	0x6c656574
 800d9fc:	6961445f 	.word	0x6961445f
 800da00:	415f7973 	.word	0x415f7973
 800da04:	6f696475 	.word	0x6f696475
 800da08:	6e69622e 	.word	0x6e69622e
	...
 800da14:	3c3a2a22 	.word	0x3c3a2a22
 800da18:	7f7c3f3e 	.word	0x7f7c3f3e
 800da1c:	00000000 	.word	0x00000000
 800da20:	3d3b2c2b 	.word	0x3d3b2c2b
 800da24:	00005d5b 	.word	0x00005d5b
 800da28:	4d90feeb 	.word	0x4d90feeb
 800da2c:	534f4453 	.word	0x534f4453
 800da30:	00302e35 	.word	0x00302e35
 800da34:	4e204f4e 	.word	0x4e204f4e
 800da38:	20454d41 	.word	0x20454d41
 800da3c:	46202020 	.word	0x46202020
 800da40:	32335441 	.word	0x32335441
 800da44:	00202020 	.word	0x00202020
 800da48:	4e204f4e 	.word	0x4e204f4e
 800da4c:	20454d41 	.word	0x20454d41
 800da50:	46202020 	.word	0x46202020
 800da54:	20205441 	.word	0x20205441
 800da58:	00202020 	.word	0x00202020

0800da5c <D1CorePrescTable>:
 800da5c:	00000000 04030201 04030201 09080706     ................

0800da6c <SD_Driver>:
 800da6c:	0800a4f5 0800a531 0800a54d 0800a58f     ....1...M.......
 800da7c:	0800a5d1                                ....

0800da80 <ExCvt>:
 800da80:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
 800da90:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
 800daa0:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
 800dab0:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
 800dac0:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
 800dad0:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
 800dae0:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
 800daf0:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0800db00 <LfnOfs>:
 800db00:	07050301 12100e09 1c181614 0000001e     ................

0800db10 <Tbl>:
 800db10:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
 800db20:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
 800db30:	00e600c9 00f400c6 00f200f6 00f900fb     ................
 800db40:	00d600ff 00f800dc 00d800a3 019200d7     ................
 800db50:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
 800db60:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
 800db70:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
 800db80:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
 800db90:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
 800dba0:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
 800dbb0:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
 800dbc0:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
 800dbd0:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
 800dbe0:	00da00de 00d900db 00dd00fd 00b400af     ................
 800dbf0:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
 800dc00:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0800dc10 <cvt1.1>:
 800dc10:	031a0061 031700e0 030700f8 000100ff     a...............
 800dc20:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
 800dc30:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
 800dc40:	01840182 01860184 01870187 018a0189     ................
 800dc50:	018b018b 018e018d 0190018f 01910191     ................
 800dc60:	01940193 019601f6 01980197 023d0198     ..............=.
 800dc70:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
 800dc80:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
 800dc90:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
 800dca0:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
 800dcb0:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
 800dcc0:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
 800dcd0:	01ca01cb 011001cd 000101dd 01de018e     ................
 800dce0:	01f30112 01f10003 01f401f4 012801f8     ..............(.
 800dcf0:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
 800dd00:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
 800dd10:	01810040 02550186 018a0189 018f0258     @.....U.....X...
 800dd20:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
 800dd30:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
 800dd40:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
 800dd50:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
 800dd60:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
 800dd70:	01a90282 02850284 02870286 024401ae     ..............D.
 800dd80:	01b201b1 028d0245 028f028e 02910290     ....E...........
 800dd90:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
 800dda0:	03880386 038a0389 031103b1 000203c2     ................
 800ddb0:	03a303a3 030803c4 000303cc 038e038c     ................
 800ddc0:	03d8038f 03f20118 03f9000a 03f403f3     ................
 800ddd0:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
 800dde0:	04500320 04600710 048a0122 04c10136      .P...`."...6...
 800ddf0:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
 800de00:	00000000                                ....

0800de04 <cvt2.0>:
 800de04:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
 800de14:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
 800de24:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
 800de34:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
 800de44:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
 800de54:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
 800de64:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
 800de74:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
 800de84:	1fec0001 00011ff2 214e1ffc 21320001     ..........N!..2!
 800de94:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
 800dea4:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
 800deb4:	2d000164 ff410826 0000031a              d..-&.A.....

0800dec0 <_init>:
 800dec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dec2:	bf00      	nop
 800dec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dec6:	bc08      	pop	{r3}
 800dec8:	469e      	mov	lr, r3
 800deca:	4770      	bx	lr

0800decc <_fini>:
 800decc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dece:	bf00      	nop
 800ded0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ded2:	bc08      	pop	{r3}
 800ded4:	469e      	mov	lr, r3
 800ded6:	4770      	bx	lr
