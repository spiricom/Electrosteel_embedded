
Electrosteel_Daisy_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000dcec  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  0800df84  0800df84  00020014  2**0
                  CONTENTS
  3 .exidx        00000000  0800df84  0800df84  00020014  2**0
                  CONTENTS
  4 .ARM.attributes 0000002e  0800df84  0800df84  00020014  2**0
                  CONTENTS, READONLY
  5 .init_array   00000004  0800df84  0800df84  0001df84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800df88  0800df88  0001df88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000014  20000000  0800df8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000938  20000014  0800dfa0  00020014  2**2
                  ALLOC
  9 .dtcmram_bss  00000000  2000094c  2000094c  00020042  2**0
                  CONTENTS
 10 .sram1_bss    00040000  24000000  24000000  00030000  2**5
                  ALLOC
 11 .userflash    00000020  38800000  38800000  00030000  2**5
                  ALLOC
 12 .sdram_bss    00000000  c0000000  c0000000  00020042  2**0
                  CONTENTS
 13 .qspiflash_text 00000000  90000000  90000000  00020042  2**0
                  CONTENTS
 14 .qspiflash_data 00000000  90000000  90000000  00020042  2**0
                  CONTENTS
 15 .qspiflash_bss 00040000  90000000  90000000  00030000  2**5
                  ALLOC
 16 .heap         00000000  2000094c  2000094c  00020042  2**0
                  CONTENTS
 17 .reserved_for_stack 00000000  2000094c  2000094c  00020042  2**0
                  CONTENTS
 18 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 19 .debug_info   00019aec  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 0000380f  00000000  00000000  00039b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00001388  00000000  00000000  0003d380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00000ee5  00000000  00000000  0003e708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  00039810  00000000  00000000  0003f5ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   0001c642  00000000  00000000  00078dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    0015c74c  00000000  00000000  0009543f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_frame  00005024  00000000  00000000  001f1b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000014 	.word	0x20000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800df84 	.word	0x0800df84

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000018 	.word	0x20000018
 80002d4:	0800df84 	.word	0x0800df84

080002d8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08e      	sub	sp, #56	; 0x38
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002ee:	4bb2      	ldr	r3, [pc, #712]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	4ab0      	ldr	r2, [pc, #704]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002fe:	4bae      	ldr	r3, [pc, #696]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000304:	f003 0310 	and.w	r3, r3, #16
 8000308:	623b      	str	r3, [r7, #32]
 800030a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800030c:	4baa      	ldr	r3, [pc, #680]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	4aa9      	ldr	r2, [pc, #676]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 8000314:	f043 0302 	orr.w	r3, r3, #2
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800031c:	4ba6      	ldr	r3, [pc, #664]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000322:	f003 0302 	and.w	r3, r3, #2
 8000326:	61fb      	str	r3, [r7, #28]
 8000328:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800032a:	4ba3      	ldr	r3, [pc, #652]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	4aa1      	ldr	r2, [pc, #644]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 8000332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800033a:	4b9f      	ldr	r3, [pc, #636]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 800033c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000344:	61bb      	str	r3, [r7, #24]
 8000346:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000348:	4b9b      	ldr	r3, [pc, #620]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 800034a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800034e:	4a9a      	ldr	r2, [pc, #616]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 8000350:	f043 0308 	orr.w	r3, r3, #8
 8000354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000358:	4b97      	ldr	r3, [pc, #604]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 800035a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800035e:	f003 0308 	and.w	r3, r3, #8
 8000362:	617b      	str	r3, [r7, #20]
 8000364:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000366:	4b94      	ldr	r3, [pc, #592]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 8000368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800036c:	4a92      	ldr	r2, [pc, #584]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 800036e:	f043 0304 	orr.w	r3, r3, #4
 8000372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000376:	4b90      	ldr	r3, [pc, #576]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 8000378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800037c:	f003 0304 	and.w	r3, r3, #4
 8000380:	613b      	str	r3, [r7, #16]
 8000382:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000384:	4b8c      	ldr	r3, [pc, #560]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 8000386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800038a:	4a8b      	ldr	r2, [pc, #556]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000394:	4b88      	ldr	r3, [pc, #544]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 8000396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80003a2:	4b85      	ldr	r3, [pc, #532]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 80003a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003a8:	4a83      	ldr	r2, [pc, #524]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 80003aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003b2:	4b81      	ldr	r3, [pc, #516]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 80003b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003c0:	4b7d      	ldr	r3, [pc, #500]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 80003c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003c6:	4a7c      	ldr	r2, [pc, #496]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 80003c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003d0:	4b79      	ldr	r3, [pc, #484]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 80003d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003de:	4b76      	ldr	r3, [pc, #472]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 80003e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003e4:	4a74      	ldr	r2, [pc, #464]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 80003e6:	f043 0320 	orr.w	r3, r3, #32
 80003ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003ee:	4b72      	ldr	r3, [pc, #456]	; (80005b8 <MX_GPIO_Init+0x2e0>)
 80003f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003f4:	f003 0320 	and.w	r3, r3, #32
 80003f8:	603b      	str	r3, [r7, #0]
 80003fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2180      	movs	r1, #128	; 0x80
 8000400:	486e      	ldr	r0, [pc, #440]	; (80005bc <MX_GPIO_Init+0x2e4>)
 8000402:	f002 fb5d 	bl	8002ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2180      	movs	r1, #128	; 0x80
 800040a:	486d      	ldr	r0, [pc, #436]	; (80005c0 <MX_GPIO_Init+0x2e8>)
 800040c:	f002 fb58 	bl	8002ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE1 PE0
                           PE4 PE5 PE6 PE13
                           PE8 PE9 PE11 PE14
                           PE7 PE10 PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 8000410:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000414:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_13
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000416:	2303      	movs	r3, #3
 8000418:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800041e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000422:	4619      	mov	r1, r3
 8000424:	4867      	ldr	r0, [pc, #412]	; (80005c4 <MX_GPIO_Init+0x2ec>)
 8000426:	f002 f879 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB4 PB2 PB13
                           PB1 PB0 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_13
 800042a:	f642 4337 	movw	r3, #11319	; 0x2c37
 800042e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000430:	2303      	movs	r3, #3
 8000432:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	2300      	movs	r3, #0
 8000436:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800043c:	4619      	mov	r1, r3
 800043e:	485f      	ldr	r0, [pc, #380]	; (80005bc <MX_GPIO_Init+0x2e4>)
 8000440:	f002 f86c 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG12
                           PG11 PG10 PG9 PG8
                           PG7 PG5 PG4 PG3
                           PG2 PG1 PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12
 8000444:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8000448:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800044a:	2303      	movs	r3, #3
 800044c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000456:	4619      	mov	r1, r3
 8000458:	485b      	ldr	r0, [pc, #364]	; (80005c8 <MX_GPIO_Init+0x2f0>)
 800045a:	f002 f85f 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD1 PD4 PD3 PD15
                           PD14 PD13 PD12 PD11
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 800045e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000462:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_15
                          |GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_11
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000464:	2303      	movs	r3, #3
 8000466:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800046c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000470:	4619      	mov	r1, r3
 8000472:	4856      	ldr	r0, [pc, #344]	; (80005cc <MX_GPIO_Init+0x2f4>)
 8000474:	f002 f852 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA9 PA8 PA0 PA4
                           PA6 PA5 PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 8000478:	f649 73f9 	movw	r3, #40953	; 0x9ff9
 800047c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800047e:	2303      	movs	r3, #3
 8000480:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800048a:	4619      	mov	r1, r3
 800048c:	4850      	ldr	r0, [pc, #320]	; (80005d0 <MX_GPIO_Init+0x2f8>)
 800048e:	f002 f845 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000492:	2380      	movs	r3, #128	; 0x80
 8000494:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000496:	2301      	movs	r3, #1
 8000498:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	2300      	movs	r3, #0
 80004a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004a6:	4619      	mov	r1, r3
 80004a8:	4844      	ldr	r0, [pc, #272]	; (80005bc <MX_GPIO_Init+0x2e4>)
 80004aa:	f002 f837 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004ae:	2340      	movs	r3, #64	; 0x40
 80004b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b2:	2300      	movs	r3, #0
 80004b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004b6:	2301      	movs	r3, #1
 80004b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004be:	4619      	mov	r1, r3
 80004c0:	483e      	ldr	r0, [pc, #248]	; (80005bc <MX_GPIO_Init+0x2e4>)
 80004c2:	f002 f82b 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI7 PI6 PI5 PI3
                           PI2 PI8 PI9 PI4
                           PI1 PI10 PI11 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
 80004c6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80004ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4
                          |GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004cc:	2303      	movs	r3, #3
 80004ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80004d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004d8:	4619      	mov	r1, r3
 80004da:	483e      	ldr	r0, [pc, #248]	; (80005d4 <MX_GPIO_Init+0x2fc>)
 80004dc:	f002 f81e 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 80004e0:	f24e 037f 	movw	r3, #57471	; 0xe07f
 80004e4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004e6:	2303      	movs	r3, #3
 80004e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f2:	4619      	mov	r1, r3
 80004f4:	4832      	ldr	r0, [pc, #200]	; (80005c0 <MX_GPIO_Init+0x2e8>)
 80004f6:	f002 f811 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH2
                           PH3 PH4 PH5 PH12
                           PH11 PH10 PH6 PH8
                           PH9 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
 80004fa:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80004fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000500:	2303      	movs	r3, #3
 8000502:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800050c:	4619      	mov	r1, r3
 800050e:	4832      	ldr	r0, [pc, #200]	; (80005d8 <MX_GPIO_Init+0x300>)
 8000510:	f002 f804 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF2 PF1 PF3
                           PF4 PF5 PF13 PF12
                           PF15 PF11 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 8000514:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000518:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800051a:	2303      	movs	r3, #3
 800051c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000526:	4619      	mov	r1, r3
 8000528:	482c      	ldr	r0, [pc, #176]	; (80005dc <MX_GPIO_Init+0x304>)
 800052a:	f001 fff7 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800052e:	2380      	movs	r3, #128	; 0x80
 8000530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000532:	2301      	movs	r3, #1
 8000534:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053a:	2300      	movs	r3, #0
 800053c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800053e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000542:	4619      	mov	r1, r3
 8000544:	481e      	ldr	r0, [pc, #120]	; (80005c0 <MX_GPIO_Init+0x2e8>)
 8000546:	f001 ffe9 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800054a:	2302      	movs	r3, #2
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800054e:	2300      	movs	r3, #0
 8000550:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000552:	2301      	movs	r3, #1
 8000554:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055a:	4619      	mov	r1, r3
 800055c:	481c      	ldr	r0, [pc, #112]	; (80005d0 <MX_GPIO_Init+0x2f8>)
 800055e:	f001 ffdd 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000562:	2304      	movs	r3, #4
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000566:	2300      	movs	r3, #0
 8000568:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800056a:	2302      	movs	r3, #2
 800056c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000572:	4619      	mov	r1, r3
 8000574:	4816      	ldr	r0, [pc, #88]	; (80005d0 <MX_GPIO_Init+0x2f8>)
 8000576:	f001 ffd1 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800057a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800057e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000580:	2300      	movs	r3, #0
 8000582:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800058c:	4619      	mov	r1, r3
 800058e:	480b      	ldr	r0, [pc, #44]	; (80005bc <MX_GPIO_Init+0x2e4>)
 8000590:	f001 ffc4 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000594:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059a:	2300      	movs	r3, #0
 800059c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800059e:	2302      	movs	r3, #2
 80005a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a6:	4619      	mov	r1, r3
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <MX_GPIO_Init+0x2e4>)
 80005aa:	f001 ffb7 	bl	800251c <HAL_GPIO_Init>

}
 80005ae:	bf00      	nop
 80005b0:	3738      	adds	r7, #56	; 0x38
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	58024400 	.word	0x58024400
 80005bc:	58020400 	.word	0x58020400
 80005c0:	58020800 	.word	0x58020800
 80005c4:	58021000 	.word	0x58021000
 80005c8:	58021800 	.word	0x58021800
 80005cc:	58020c00 	.word	0x58020c00
 80005d0:	58020000 	.word	0x58020000
 80005d4:	58022000 	.word	0x58022000
 80005d8:	58021c00 	.word	0x58021c00
 80005dc:	58021400 	.word	0x58021400

080005e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_I2C1_Init+0x78>)
 80005e6:	4a1d      	ldr	r2, [pc, #116]	; (800065c <MX_I2C1_Init+0x7c>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0050174F;
 80005ea:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <MX_I2C1_Init+0x78>)
 80005ec:	4a1c      	ldr	r2, [pc, #112]	; (8000660 <MX_I2C1_Init+0x80>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 68;
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_I2C1_Init+0x78>)
 80005f2:	2244      	movs	r2, #68	; 0x44
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <MX_I2C1_Init+0x78>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005fc:	4b16      	ldr	r3, [pc, #88]	; (8000658 <MX_I2C1_Init+0x78>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <MX_I2C1_Init+0x78>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000608:	4b13      	ldr	r3, [pc, #76]	; (8000658 <MX_I2C1_Init+0x78>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <MX_I2C1_Init+0x78>)
 8000610:	2200      	movs	r2, #0
 8000612:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <MX_I2C1_Init+0x78>)
 8000616:	2200      	movs	r2, #0
 8000618:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800061a:	480f      	ldr	r0, [pc, #60]	; (8000658 <MX_I2C1_Init+0x78>)
 800061c:	f002 fa84 	bl	8002b28 <HAL_I2C_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000626:	f001 f992 	bl	800194e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800062a:	2100      	movs	r1, #0
 800062c:	480a      	ldr	r0, [pc, #40]	; (8000658 <MX_I2C1_Init+0x78>)
 800062e:	f002 ffd1 	bl	80035d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000638:	f001 f989 	bl	800194e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800063c:	2100      	movs	r1, #0
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <MX_I2C1_Init+0x78>)
 8000640:	f003 f813 	bl	800366a <HAL_I2CEx_ConfigDigitalFilter>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800064a:	f001 f980 	bl	800194e <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800064e:	2001      	movs	r0, #1
 8000650:	f003 f858 	bl	8003704 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000030 	.word	0x20000030
 800065c:	40005400 	.word	0x40005400
 8000660:	0050174f 	.word	0x0050174f

08000664 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0ba      	sub	sp, #232	; 0xe8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800067c:	f107 0310 	add.w	r3, r7, #16
 8000680:	22c0      	movs	r2, #192	; 0xc0
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f00d f9dd 	bl	800da44 <memset>
  if(i2cHandle->Instance==I2C1)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a27      	ldr	r2, [pc, #156]	; (800072c <HAL_I2C_MspInit+0xc8>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d146      	bne.n	8000722 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000694:	f04f 0208 	mov.w	r2, #8
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006a6:	f107 0310 	add.w	r3, r7, #16
 80006aa:	4618      	mov	r0, r3
 80006ac:	f004 fdaa 	bl	8005204 <HAL_RCCEx_PeriphCLKConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80006b6:	f001 f94a 	bl	800194e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <HAL_I2C_MspInit+0xcc>)
 80006bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c0:	4a1b      	ldr	r2, [pc, #108]	; (8000730 <HAL_I2C_MspInit+0xcc>)
 80006c2:	f043 0302 	orr.w	r3, r3, #2
 80006c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <HAL_I2C_MspInit+0xcc>)
 80006cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d0:	f003 0302 	and.w	r3, r3, #2
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006e0:	2312      	movs	r3, #18
 80006e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ec:	2303      	movs	r3, #3
 80006ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006f2:	2304      	movs	r3, #4
 80006f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80006fc:	4619      	mov	r1, r3
 80006fe:	480d      	ldr	r0, [pc, #52]	; (8000734 <HAL_I2C_MspInit+0xd0>)
 8000700:	f001 ff0c 	bl	800251c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <HAL_I2C_MspInit+0xcc>)
 8000706:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800070a:	4a09      	ldr	r2, [pc, #36]	; (8000730 <HAL_I2C_MspInit+0xcc>)
 800070c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000710:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_I2C_MspInit+0xcc>)
 8000716:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800071a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000722:	bf00      	nop
 8000724:	37e8      	adds	r7, #232	; 0xe8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40005400 	.word	0x40005400
 8000730:	58024400 	.word	0x58024400
 8000734:	58020400 	.word	0x58020400

08000738 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a0c      	ldr	r2, [pc, #48]	; (8000778 <HAL_I2C_MspDeInit+0x40>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d111      	bne.n	800076e <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <HAL_I2C_MspDeInit+0x44>)
 800074c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000750:	4a0a      	ldr	r2, [pc, #40]	; (800077c <HAL_I2C_MspDeInit+0x44>)
 8000752:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000756:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800075a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075e:	4808      	ldr	r0, [pc, #32]	; (8000780 <HAL_I2C_MspDeInit+0x48>)
 8000760:	f002 f88c 	bl	800287c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8000764:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000768:	4805      	ldr	r0, [pc, #20]	; (8000780 <HAL_I2C_MspDeInit+0x48>)
 800076a:	f002 f887 	bl	800287c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40005400 	.word	0x40005400
 800077c:	58024400 	.word	0x58024400
 8000780:	58020400 	.word	0x58020400

08000784 <BSP_SD_IsDetected>:
	}
}


uint8_t BSP_SD_IsDetected(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800078a:	2301      	movs	r3, #1
 800078c:	71fb      	strb	r3, [r7, #7]
  //if (BSP_PlatformIsDetected() == 0x0)
  {
    //status = SD_NOT_PRESENT;
  }

  return status;
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	b2db      	uxtb	r3, r3
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
	...

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b092      	sub	sp, #72	; 0x48
 80007a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a6:	f001 fbb9 	bl	8001f1c <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007aa:	f001 f8a3 	bl	80018f4 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ae:	f000 fa71 	bl	8000c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b2:	f7ff fd91 	bl	80002d8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80007b6:	f001 f8cf 	bl	8001958 <MX_QUADSPI_Init>
  MX_SDMMC1_SD_Init();
 80007ba:	f001 f9d5 	bl	8001b68 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80007be:	f009 fe15 	bl	800a3ec <MX_FATFS_Init>
  MX_I2C1_Init();
 80007c2:	f7ff ff0d 	bl	80005e0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* Enable write access to Backup domain */
     PWR->CR1 |= PWR_CR1_DBP;
 80007c6:	4bad      	ldr	r3, [pc, #692]	; (8000a7c <main+0x2dc>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4aac      	ldr	r2, [pc, #688]	; (8000a7c <main+0x2dc>)
 80007cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007d0:	6013      	str	r3, [r2, #0]
     while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80007d2:	bf00      	nop
 80007d4:	4ba9      	ldr	r3, [pc, #676]	; (8000a7c <main+0x2dc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d0f9      	beq.n	80007d4 <main+0x34>
     {
  	   ;
     }
     /*Enable BKPRAM clock*/
     __HAL_RCC_BKPRAM_CLK_ENABLE();
 80007e0:	4ba7      	ldr	r3, [pc, #668]	; (8000a80 <main+0x2e0>)
 80007e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e6:	4aa6      	ldr	r2, [pc, #664]	; (8000a80 <main+0x2e0>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f0:	4ba3      	ldr	r3, [pc, #652]	; (8000a80 <main+0x2e0>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697b      	ldr	r3, [r7, #20]
     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	48a0      	ldr	r0, [pc, #640]	; (8000a84 <main+0x2e4>)
 8000804:	f002 f95c 	bl	8002ac0 <HAL_GPIO_WritePin>
     HAL_Delay(100);
 8000808:	2064      	movs	r0, #100	; 0x64
 800080a:	f001 fc7f 	bl	800210c <HAL_Delay>
 	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 800080e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000812:	489c      	ldr	r0, [pc, #624]	; (8000a84 <main+0x2e4>)
 8000814:	f002 f93c 	bl	8002a90 <HAL_GPIO_ReadPin>
 8000818:	4603      	mov	r3, r0
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
 	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800081c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000820:	4898      	ldr	r0, [pc, #608]	; (8000a84 <main+0x2e4>)
 8000822:	f002 f935 	bl	8002a90 <HAL_GPIO_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
 	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 800082a:	2104      	movs	r1, #4
 800082c:	4896      	ldr	r0, [pc, #600]	; (8000a88 <main+0x2e8>)
 800082e:	f002 f92f 	bl	8002a90 <HAL_GPIO_ReadPin>
 8000832:	4603      	mov	r3, r0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
 	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 8000836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000838:	b2db      	uxtb	r3, r3
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	b2da      	uxtb	r2, r3
 800083e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000840:	b2db      	uxtb	r3, r3
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4413      	add	r3, r2
 8000848:	b2da      	uxtb	r2, r3
 800084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4413      	add	r3, r2
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b8e      	ldr	r3, [pc, #568]	; (8000a8c <main+0x2ec>)
 8000854:	701a      	strb	r2, [r3, #0]
 	if (boardNumber == 0)
 8000856:	4b8d      	ldr	r3, [pc, #564]	; (8000a8c <main+0x2ec>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d12b      	bne.n	80008b6 <main+0x116>
 	{
		  //set up the master send control pin to signal other daisies to listen to I2C bus
		  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800085e:	2028      	movs	r0, #40	; 0x28
 8000860:	f001 fdc1 	bl	80023e6 <HAL_NVIC_DisableIRQ>

 		  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	463b      	mov	r3, r7
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
		  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000876:	603b      	str	r3, [r7, #0]
		  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	607b      	str	r3, [r7, #4]
		  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800087c:	2302      	movs	r3, #2
 800087e:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]

		  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	487e      	ldr	r0, [pc, #504]	; (8000a84 <main+0x2e4>)
 800088a:	f001 fe47 	bl	800251c <HAL_GPIO_Init>
 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000894:	487b      	ldr	r0, [pc, #492]	; (8000a84 <main+0x2e4>)
 8000896:	f002 f913 	bl	8002ac0 <HAL_GPIO_WritePin>


 		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0)
 800089a:	2140      	movs	r1, #64	; 0x40
 800089c:	4879      	ldr	r0, [pc, #484]	; (8000a84 <main+0x2e4>)
 800089e:	f002 f8f7 	bl	8002a90 <HAL_GPIO_ReadPin>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d103      	bne.n	80008b0 <main+0x110>
 		{
 			bootloader_button_pressed = 1;
 80008a8:	4b79      	ldr	r3, [pc, #484]	; (8000a90 <main+0x2f0>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	e002      	b.n	80008b6 <main+0x116>
 		}
 		else
 		{
 			bootloader_button_pressed = 0;
 80008b0:	4b77      	ldr	r3, [pc, #476]	; (8000a90 <main+0x2f0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
 		}
 	}
    //if (*(__IO uint32_t*)(0x38800000+36) != 12345678)

	qspi_initialize(INDIRECT_POLLING);
 80008b6:	2000      	movs	r0, #0
 80008b8:	f000 fc86 	bl	80011c8 <qspi_initialize>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2180      	movs	r1, #128	; 0x80
 80008c0:	4870      	ldr	r0, [pc, #448]	; (8000a84 <main+0x2e4>)
 80008c2:	f002 f8fd 	bl	8002ac0 <HAL_GPIO_WritePin>


	if (bootloader_button_pressed == 1)
 80008c6:	4b72      	ldr	r3, [pc, #456]	; (8000a90 <main+0x2f0>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	f040 80b7 	bne.w	8000a3e <main+0x29e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // tell the other ICs
 80008d0:	2201      	movs	r2, #1
 80008d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d6:	486b      	ldr	r0, [pc, #428]	; (8000a84 <main+0x2e4>)
 80008d8:	f002 f8f2 	bl	8002ac0 <HAL_GPIO_WritePin>

		MX_I2C1_Init();
 80008dc:	f7ff fe80 	bl	80005e0 <MX_I2C1_Init>
		MX_SDMMC1_SD_Init();
 80008e0:	f001 f942 	bl	8001b68 <MX_SDMMC1_SD_Init>
		MX_FATFS_Init();
 80008e4:	f009 fd82 	bl	800a3ec <MX_FATFS_Init>

		int i = 6;
 80008e8:	2306      	movs	r3, #6
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
		while(i--)
 80008ec:	e006      	b.n	80008fc <main+0x15c>
		{
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80008ee:	2180      	movs	r1, #128	; 0x80
 80008f0:	4868      	ldr	r0, [pc, #416]	; (8000a94 <main+0x2f4>)
 80008f2:	f002 f8fe 	bl	8002af2 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 80008f6:	2064      	movs	r0, #100	; 0x64
 80008f8:	f001 fc08 	bl	800210c <HAL_Delay>
		while(i--)
 80008fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008fe:	1e5a      	subs	r2, r3, #1
 8000900:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1f3      	bne.n	80008ee <main+0x14e>
		}

		FS_FileOperations();
 8000906:	f000 fe5b 	bl	80015c0 <FS_FileOperations>

		if (!memory_already_mapped)
 800090a:	4b63      	ldr	r3, [pc, #396]	; (8000a98 <main+0x2f8>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	2b00      	cmp	r3, #0
 8000912:	d101      	bne.n	8000918 <main+0x178>
		{
		  qspi_enable_memory_mapped();
 8000914:	f000 fc1a 	bl	800114c <qspi_enable_memory_mapped>
		}

		//copy qspi flash code into SRAM location on every boot.
		for (int i = 0; i < 262140; i++)
 8000918:	2300      	movs	r3, #0
 800091a:	63bb      	str	r3, [r7, #56]	; 0x38
 800091c:	e00b      	b.n	8000936 <main+0x196>
		{
		  tempBinaryBuffer[i] = flash_mem[i];
 800091e:	4a5f      	ldr	r2, [pc, #380]	; (8000a9c <main+0x2fc>)
 8000920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000922:	4413      	add	r3, r2
 8000924:	7819      	ldrb	r1, [r3, #0]
 8000926:	4a5e      	ldr	r2, [pc, #376]	; (8000aa0 <main+0x300>)
 8000928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800092a:	4413      	add	r3, r2
 800092c:	460a      	mov	r2, r1
 800092e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 262140; i++)
 8000930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000932:	3301      	adds	r3, #1
 8000934:	63bb      	str	r3, [r7, #56]	; 0x38
 8000936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000938:	4a5a      	ldr	r2, [pc, #360]	; (8000aa4 <main+0x304>)
 800093a:	4293      	cmp	r3, r2
 800093c:	ddef      	ble.n	800091e <main+0x17e>
		}

		//wait for manual bootloader button to go up (lets us test things by holding the device in this state)
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0)
 800093e:	bf00      	nop
 8000940:	2140      	movs	r1, #64	; 0x40
 8000942:	4850      	ldr	r0, [pc, #320]	; (8000a84 <main+0x2e4>)
 8000944:	f002 f8a4 	bl	8002a90 <HAL_GPIO_ReadPin>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d0f8      	beq.n	8000940 <main+0x1a0>
		{
		  ;
		}
		//bring signal pin down to tell the other chips we're ready to send firmware over I2C
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000954:	484b      	ldr	r0, [pc, #300]	; (8000a84 <main+0x2e4>)
 8000956:	f002 f8b3 	bl	8002ac0 <HAL_GPIO_WritePin>
		HAL_Delay(100); //wait for them to receive and get ready
 800095a:	2064      	movs	r0, #100	; 0x64
 800095c:	f001 fbd6 	bl	800210c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2180      	movs	r1, #128	; 0x80
 8000964:	484b      	ldr	r0, [pc, #300]	; (8000a94 <main+0x2f4>)
 8000966:	f002 f8ab 	bl	8002ac0 <HAL_GPIO_WritePin>
		HAL_I2C_Master_Transmit(&hi2c1, 34<<1, tempBinaryBuffer, 65535,
 800096a:	f242 7310 	movw	r3, #10000	; 0x2710
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000974:	4a4a      	ldr	r2, [pc, #296]	; (8000aa0 <main+0x300>)
 8000976:	2144      	movs	r1, #68	; 0x44
 8000978:	484b      	ldr	r0, [pc, #300]	; (8000aa8 <main+0x308>)
 800097a:	f002 f995 	bl	8002ca8 <HAL_I2C_Master_Transmit>
			10000);
		HAL_Delay(500);
 800097e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000982:	f001 fbc3 	bl	800210c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	4842      	ldr	r0, [pc, #264]	; (8000a94 <main+0x2f4>)
 800098c:	f002 f898 	bl	8002ac0 <HAL_GPIO_WritePin>
		HAL_I2C_Master_Transmit(&hi2c1, 34<<1, tempBinaryBuffer+65535, 65535,
 8000990:	4a46      	ldr	r2, [pc, #280]	; (8000aac <main+0x30c>)
 8000992:	f242 7310 	movw	r3, #10000	; 0x2710
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800099c:	2144      	movs	r1, #68	; 0x44
 800099e:	4842      	ldr	r0, [pc, #264]	; (8000aa8 <main+0x308>)
 80009a0:	f002 f982 	bl	8002ca8 <HAL_I2C_Master_Transmit>
			10000);
		HAL_Delay(500);
 80009a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a8:	f001 fbb0 	bl	800210c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2180      	movs	r1, #128	; 0x80
 80009b0:	4838      	ldr	r0, [pc, #224]	; (8000a94 <main+0x2f4>)
 80009b2:	f002 f885 	bl	8002ac0 <HAL_GPIO_WritePin>
		HAL_I2C_Master_Transmit(&hi2c1, 34<<1, tempBinaryBuffer+131070, 65535,
 80009b6:	4a3e      	ldr	r2, [pc, #248]	; (8000ab0 <main+0x310>)
 80009b8:	f242 7310 	movw	r3, #10000	; 0x2710
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009c2:	2144      	movs	r1, #68	; 0x44
 80009c4:	4838      	ldr	r0, [pc, #224]	; (8000aa8 <main+0x308>)
 80009c6:	f002 f96f 	bl	8002ca8 <HAL_I2C_Master_Transmit>
			10000);
		HAL_Delay(500);
 80009ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ce:	f001 fb9d 	bl	800210c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	482f      	ldr	r0, [pc, #188]	; (8000a94 <main+0x2f4>)
 80009d8:	f002 f872 	bl	8002ac0 <HAL_GPIO_WritePin>
		HAL_I2C_Master_Transmit(&hi2c1, 34<<1, tempBinaryBuffer+196605, 65535,
 80009dc:	4a35      	ldr	r2, [pc, #212]	; (8000ab4 <main+0x314>)
 80009de:	f242 7310 	movw	r3, #10000	; 0x2710
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e8:	2144      	movs	r1, #68	; 0x44
 80009ea:	482f      	ldr	r0, [pc, #188]	; (8000aa8 <main+0x308>)
 80009ec:	f002 f95c 	bl	8002ca8 <HAL_I2C_Master_Transmit>
			10000);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2180      	movs	r1, #128	; 0x80
 80009f4:	4827      	ldr	r0, [pc, #156]	; (8000a94 <main+0x2f4>)
 80009f6:	f002 f863 	bl	8002ac0 <HAL_GPIO_WritePin>


		HAL_Delay(6000);
 80009fa:	f241 7070 	movw	r0, #6000	; 0x1770
 80009fe:	f001 fb85 	bl	800210c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	4823      	ldr	r0, [pc, #140]	; (8000a94 <main+0x2f4>)
 8000a08:	f002 f85a 	bl	8002ac0 <HAL_GPIO_WritePin>
		HAL_QSPI_MspDeInit(&hqspi);
 8000a0c:	482a      	ldr	r0, [pc, #168]	; (8000ab8 <main+0x318>)
 8000a0e:	f001 f885 	bl	8001b1c <HAL_QSPI_MspDeInit>
		HAL_I2C_DeInit(&hi2c1);
 8000a12:	4825      	ldr	r0, [pc, #148]	; (8000aa8 <main+0x308>)
 8000a14:	f002 f918 	bl	8002c48 <HAL_I2C_DeInit>
		HAL_SD_MspDeInit(&hsd1);
 8000a18:	4828      	ldr	r0, [pc, #160]	; (8000abc <main+0x31c>)
 8000a1a:	f001 f959 	bl	8001cd0 <HAL_SD_MspDeInit>

		HAL_RCC_DeInit();
 8000a1e:	f003 faf7 	bl	8004010 <HAL_RCC_DeInit>
		HAL_DeInit();
 8000a22:	f001 fab7 	bl	8001f94 <HAL_DeInit>
		SysTick->CTRL = 0;
 8000a26:	4b26      	ldr	r3, [pc, #152]	; (8000ac0 <main+0x320>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0;
 8000a2c:	4b24      	ldr	r3, [pc, #144]	; (8000ac0 <main+0x320>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0;
 8000a32:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <main+0x320>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]

		HAL_NVIC_SystemReset();
 8000a38:	f001 fce3 	bl	8002402 <HAL_NVIC_SystemReset>
 8000a3c:	e111      	b.n	8000c62 <main+0x4c2>

	}

    else
    {
		int i = 6;
 8000a3e:	2306      	movs	r3, #6
 8000a40:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_Delay(10);
 8000a42:	200a      	movs	r0, #10
 8000a44:	f001 fb62 	bl	800210c <HAL_Delay>
		while(i--)
 8000a48:	e006      	b.n	8000a58 <main+0x2b8>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000a4a:	2180      	movs	r1, #128	; 0x80
 8000a4c:	4811      	ldr	r0, [pc, #68]	; (8000a94 <main+0x2f4>)
 8000a4e:	f002 f850 	bl	8002af2 <HAL_GPIO_TogglePin>
			HAL_Delay(60);
 8000a52:	203c      	movs	r0, #60	; 0x3c
 8000a54:	f001 fb5a 	bl	800210c <HAL_Delay>
		while(i--)
 8000a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a5a:	1e5a      	subs	r2, r3, #1
 8000a5c:	637a      	str	r2, [r7, #52]	; 0x34
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d1f3      	bne.n	8000a4a <main+0x2aa>
		}
		checkForNewFirmwareFromMainSynthBoard();
 8000a62:	f000 fe19 	bl	8001698 <checkForNewFirmwareFromMainSynthBoard>
		if (!memory_already_mapped)
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <main+0x2f8>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d101      	bne.n	8000a74 <main+0x2d4>
		{
		 	qspi_enable_memory_mapped();
 8000a70:	f000 fb6c 	bl	800114c <qspi_enable_memory_mapped>

		}
		//copy qspi flash code into SRAM location on every boot.
		for (int i = 0; i < 262140; i++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
 8000a78:	e030      	b.n	8000adc <main+0x33c>
 8000a7a:	bf00      	nop
 8000a7c:	58024800 	.word	0x58024800
 8000a80:	58024400 	.word	0x58024400
 8000a84:	58020400 	.word	0x58020400
 8000a88:	58020000 	.word	0x58020000
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	200001d8 	.word	0x200001d8
 8000a94:	58020800 	.word	0x58020800
 8000a98:	200001e0 	.word	0x200001e0
 8000a9c:	90000000 	.word	0x90000000
 8000aa0:	24000000 	.word	0x24000000
 8000aa4:	0003fffb 	.word	0x0003fffb
 8000aa8:	20000030 	.word	0x20000030
 8000aac:	2400ffff 	.word	0x2400ffff
 8000ab0:	2401fffe 	.word	0x2401fffe
 8000ab4:	2402fffd 	.word	0x2402fffd
 8000ab8:	200001e4 	.word	0x200001e4
 8000abc:	20000230 	.word	0x20000230
 8000ac0:	e000e010 	.word	0xe000e010
		{
			tempBinaryBuffer[i] = flash_mem[i];
 8000ac4:	4a67      	ldr	r2, [pc, #412]	; (8000c64 <main+0x4c4>)
 8000ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac8:	4413      	add	r3, r2
 8000aca:	7819      	ldrb	r1, [r3, #0]
 8000acc:	4a66      	ldr	r2, [pc, #408]	; (8000c68 <main+0x4c8>)
 8000ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad0:	4413      	add	r3, r2
 8000ad2:	460a      	mov	r2, r1
 8000ad4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 262140; i++)
 8000ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad8:	3301      	adds	r3, #1
 8000ada:	633b      	str	r3, [r7, #48]	; 0x30
 8000adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ade:	4a63      	ldr	r2, [pc, #396]	; (8000c6c <main+0x4cc>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	ddef      	ble.n	8000ac4 <main+0x324>
		}


		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	4862      	ldr	r0, [pc, #392]	; (8000c70 <main+0x4d0>)
 8000ae8:	f002 f803 	bl	8002af2 <HAL_GPIO_TogglePin>
		JumpToApplication = (pFunction) (*(__IO uint32_t*) (APPLICATION_ADDRESS+4));
 8000aec:	4b61      	ldr	r3, [pc, #388]	; (8000c74 <main+0x4d4>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b61      	ldr	r3, [pc, #388]	; (8000c78 <main+0x4d8>)
 8000af4:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	4860      	ldr	r0, [pc, #384]	; (8000c7c <main+0x4dc>)
 8000afc:	f001 ffe0 	bl	8002ac0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f001 fb03 	bl	800210c <HAL_Delay>
		if (((uint32_t)JumpToApplication > 0x30000000) ||  ((uint32_t)JumpToApplication < 0x24000000) )
 8000b06:	4b5c      	ldr	r3, [pc, #368]	; (8000c78 <main+0x4d8>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8000b0e:	d804      	bhi.n	8000b1a <main+0x37a>
 8000b10:	4b59      	ldr	r3, [pc, #356]	; (8000c78 <main+0x4d8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8000b18:	d20f      	bcs.n	8000b3a <main+0x39a>
		{
			//out of range, not a valid firmware
			while(1)
			{
				if (memory_already_mapped)
 8000b1a:	4b59      	ldr	r3, [pc, #356]	; (8000c80 <main+0x4e0>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <main+0x38a>
				{
					qspi_initialize(INDIRECT_POLLING);
 8000b24:	2000      	movs	r0, #0
 8000b26:	f000 fb4f 	bl	80011c8 <qspi_initialize>
				}
				HAL_Delay(1);
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f001 faee 	bl	800210c <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000b30:	2180      	movs	r1, #128	; 0x80
 8000b32:	484f      	ldr	r0, [pc, #316]	; (8000c70 <main+0x4d0>)
 8000b34:	f001 ffdd 	bl	8002af2 <HAL_GPIO_TogglePin>
				if (memory_already_mapped)
 8000b38:	e7ef      	b.n	8000b1a <main+0x37a>
			}
		}
		//otherwise, boot it up!
		HAL_QSPI_MspDeInit(&hqspi);
 8000b3a:	4852      	ldr	r0, [pc, #328]	; (8000c84 <main+0x4e4>)
 8000b3c:	f000 ffee 	bl	8001b1c <HAL_QSPI_MspDeInit>

		HAL_RCC_DeInit();
 8000b40:	f003 fa66 	bl	8004010 <HAL_RCC_DeInit>
		HAL_DeInit();
 8000b44:	f001 fa26 	bl	8001f94 <HAL_DeInit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
		__disable_irq();

		NVIC->ICER[0] = 0xFFFFFFFF;
 8000b4c:	4b4e      	ldr	r3, [pc, #312]	; (8000c88 <main+0x4e8>)
 8000b4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		NVIC->ICER[1] = 0xFFFFFFFF;
 8000b56:	4b4c      	ldr	r3, [pc, #304]	; (8000c88 <main+0x4e8>)
 8000b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		NVIC->ICER[2] = 0xFFFFFFFF;
 8000b60:	4b49      	ldr	r3, [pc, #292]	; (8000c88 <main+0x4e8>)
 8000b62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		NVIC->ICER[3] = 0xFFFFFFFF;
 8000b6a:	4b47      	ldr	r3, [pc, #284]	; (8000c88 <main+0x4e8>)
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		NVIC->ICER[4] = 0xFFFFFFFF;
 8000b74:	4b44      	ldr	r3, [pc, #272]	; (8000c88 <main+0x4e8>)
 8000b76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		NVIC->ICER[5] = 0xFFFFFFFF;
 8000b7e:	4b42      	ldr	r3, [pc, #264]	; (8000c88 <main+0x4e8>)
 8000b80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b84:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		NVIC->ICER[6] = 0xFFFFFFFF;
 8000b88:	4b3f      	ldr	r3, [pc, #252]	; (8000c88 <main+0x4e8>)
 8000b8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b8e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		NVIC->ICER[7] = 0xFFFFFFFF;
 8000b92:	4b3d      	ldr	r3, [pc, #244]	; (8000c88 <main+0x4e8>)
 8000b94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		NVIC->ICPR[0] = 0xFFFFFFFF;
 8000b9c:	4b3a      	ldr	r3, [pc, #232]	; (8000c88 <main+0x4e8>)
 8000b9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ba2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		NVIC->ICPR[1] = 0xFFFFFFFF;
 8000ba6:	4b38      	ldr	r3, [pc, #224]	; (8000c88 <main+0x4e8>)
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bac:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		NVIC->ICPR[2] = 0xFFFFFFFF;
 8000bb0:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <main+0x4e8>)
 8000bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bb6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		NVIC->ICPR[3] = 0xFFFFFFFF;
 8000bba:	4b33      	ldr	r3, [pc, #204]	; (8000c88 <main+0x4e8>)
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bc0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
		NVIC->ICPR[4] = 0xFFFFFFFF;
 8000bc4:	4b30      	ldr	r3, [pc, #192]	; (8000c88 <main+0x4e8>)
 8000bc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bca:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		NVIC->ICPR[5] = 0xFFFFFFFF;
 8000bce:	4b2e      	ldr	r3, [pc, #184]	; (8000c88 <main+0x4e8>)
 8000bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
		NVIC->ICPR[6] = 0xFFFFFFFF;
 8000bd8:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <main+0x4e8>)
 8000bda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bde:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
		NVIC->ICPR[7] = 0xFFFFFFFF;
 8000be2:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <main+0x4e8>)
 8000be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000be8:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

		SysTick->CTRL = 0;
 8000bec:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <main+0x4ec>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0; // Needed?
 8000bf2:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <main+0x4ec>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;  // Needed?
 8000bf8:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <main+0x4ec>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
		SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk;
 8000bfe:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <main+0x4f0>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	4a23      	ldr	r2, [pc, #140]	; (8000c90 <main+0x4f0>)
 8000c04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c08:	6053      	str	r3, [r2, #4]

		SCB->SHCSR &= ~(SCB_SHCSR_USGFAULTENA_Msk | //
 8000c0a:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <main+0x4f0>)
 8000c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0e:	4a20      	ldr	r2, [pc, #128]	; (8000c90 <main+0x4f0>)
 8000c10:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8000c14:	6253      	str	r3, [r2, #36]	; 0x24
						SCB_SHCSR_BUSFAULTENA_Msk | //
						SCB_SHCSR_MEMFAULTENA_Msk);

		__set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000c16:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	f383 8808 	msr	MSP, r3
}
 8000c24:	bf00      	nop
		__set_PSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000c26:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	f383 8809 	msr	PSP, r3
}
 8000c34:	bf00      	nop
		SCB->VTOR = APPLICATION_ADDRESS;
 8000c36:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <main+0x4f0>)
 8000c38:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000c42:	6a3b      	ldr	r3, [r7, #32]
 8000c44:	f383 8814 	msr	CONTROL, r3
}
 8000c48:	bf00      	nop
		__set_CONTROL(0);


		SysTick->CTRL = 0;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <main+0x4ec>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <main+0x4ec>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0;
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <main+0x4ec>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]

		JumpToApplication();
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <main+0x4d8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4798      	blx	r3

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000c62:	e7fe      	b.n	8000c62 <main+0x4c2>
 8000c64:	90000000 	.word	0x90000000
 8000c68:	24000000 	.word	0x24000000
 8000c6c:	0003fffb 	.word	0x0003fffb
 8000c70:	58020800 	.word	0x58020800
 8000c74:	24000004 	.word	0x24000004
 8000c78:	200001dc 	.word	0x200001dc
 8000c7c:	58020400 	.word	0x58020400
 8000c80:	200001e0 	.word	0x200001e0
 8000c84:	200001e4 	.word	0x200001e4
 8000c88:	e000e100 	.word	0xe000e100
 8000c8c:	e000e010 	.word	0xe000e010
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b09e      	sub	sp, #120	; 0x78
 8000c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9e:	224c      	movs	r2, #76	; 0x4c
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f00c fece 	bl	800da44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	2220      	movs	r2, #32
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f00c fec7 	bl	800da44 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f002 fd48 	bl	800374c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	4b48      	ldr	r3, [pc, #288]	; (8000de4 <SystemClock_Config+0x150>)
 8000cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc4:	4a47      	ldr	r2, [pc, #284]	; (8000de4 <SystemClock_Config+0x150>)
 8000cc6:	f023 0301 	bic.w	r3, r3, #1
 8000cca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ccc:	4b45      	ldr	r3, [pc, #276]	; (8000de4 <SystemClock_Config+0x150>)
 8000cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	4b44      	ldr	r3, [pc, #272]	; (8000de8 <SystemClock_Config+0x154>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	4a43      	ldr	r2, [pc, #268]	; (8000de8 <SystemClock_Config+0x154>)
 8000cdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ce0:	6193      	str	r3, [r2, #24]
 8000ce2:	4b41      	ldr	r3, [pc, #260]	; (8000de8 <SystemClock_Config+0x154>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cee:	bf00      	nop
 8000cf0:	4b3d      	ldr	r3, [pc, #244]	; (8000de8 <SystemClock_Config+0x154>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cfc:	d1f8      	bne.n	8000cf0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	4b3b      	ldr	r3, [pc, #236]	; (8000dec <SystemClock_Config+0x158>)
 8000d00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d04:	4a39      	ldr	r2, [pc, #228]	; (8000dec <SystemClock_Config+0x158>)
 8000d06:	f043 0302 	orr.w	r3, r3, #2
 8000d0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d0e:	4b37      	ldr	r3, [pc, #220]	; (8000dec <SystemClock_Config+0x158>)
 8000d10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	4b31      	ldr	r3, [pc, #196]	; (8000de8 <SystemClock_Config+0x154>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a30      	ldr	r2, [pc, #192]	; (8000de8 <SystemClock_Config+0x154>)
 8000d26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <SystemClock_Config+0x154>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d34:	603b      	str	r3, [r7, #0]
 8000d36:	4b2b      	ldr	r3, [pc, #172]	; (8000de4 <SystemClock_Config+0x150>)
 8000d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3a:	4a2a      	ldr	r2, [pc, #168]	; (8000de4 <SystemClock_Config+0x150>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d42:	4b28      	ldr	r3, [pc, #160]	; (8000de4 <SystemClock_Config+0x150>)
 8000d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d4e:	bf00      	nop
 8000d50:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <SystemClock_Config+0x154>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d5c:	d1f8      	bne.n	8000d50 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d70:	2301      	movs	r3, #1
 8000d72:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000d74:	233c      	movs	r3, #60	; 0x3c
 8000d76:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000d7c:	2306      	movs	r3, #6
 8000d7e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 8;
 8000d80:	2308      	movs	r3, #8
 8000d82:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d84:	230c      	movs	r3, #12
 8000d86:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d94:	4618      	mov	r0, r3
 8000d96:	f003 fa65 	bl	8004264 <HAL_RCC_OscConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000da0:	f000 fdd5 	bl	800194e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da4:	233f      	movs	r3, #63	; 0x3f
 8000da6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da8:	2303      	movs	r3, #3
 8000daa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000db0:	2308      	movs	r3, #8
 8000db2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000db4:	2340      	movs	r3, #64	; 0x40
 8000db6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000db8:	2340      	movs	r3, #64	; 0x40
 8000dba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dc2:	2340      	movs	r3, #64	; 0x40
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	2104      	movs	r1, #4
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f003 fea3 	bl	8004b18 <HAL_RCC_ClockConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000dd8:	f000 fdb9 	bl	800194e <Error_Handler>
  }
}
 8000ddc:	bf00      	nop
 8000dde:	3778      	adds	r7, #120	; 0x78
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	58000400 	.word	0x58000400
 8000de8:	58024800 	.word	0x58024800
 8000dec:	58024400 	.word	0x58024400

08000df0 <i2cError>:

/* USER CODE BEGIN 4 */
void i2cError(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2180      	movs	r1, #128	; 0x80
 8000df8:	4808      	ldr	r0, [pc, #32]	; (8000e1c <i2cError+0x2c>)
 8000dfa:	f001 fe61 	bl	8002ac0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000dfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e02:	f001 f983 	bl	800210c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	4804      	ldr	r0, [pc, #16]	; (8000e1c <i2cError+0x2c>)
 8000e0c:	f001 fe58 	bl	8002ac0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000e10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e14:	f001 f97a 	bl	800210c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000e18:	e7ec      	b.n	8000df4 <i2cError+0x4>
 8000e1a:	bf00      	nop
 8000e1c:	58020800 	.word	0x58020800

08000e20 <qspi_error>:
	}
}

void qspi_error(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2180      	movs	r1, #128	; 0x80
 8000e28:	4808      	ldr	r0, [pc, #32]	; (8000e4c <qspi_error+0x2c>)
 8000e2a:	f001 fe49 	bl	8002ac0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000e2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e32:	f001 f96b 	bl	800210c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2180      	movs	r1, #128	; 0x80
 8000e3a:	4804      	ldr	r0, [pc, #16]	; (8000e4c <qspi_error+0x2c>)
 8000e3c:	f001 fe40 	bl	8002ac0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000e40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e44:	f001 f962 	bl	800210c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000e48:	e7ec      	b.n	8000e24 <qspi_error+0x4>
 8000e4a:	bf00      	nop
 8000e4c:	58020800 	.word	0x58020800

08000e50 <AutopollingMemReady>:
	}

}

int AutopollingMemReady(int timeout)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b098      	sub	sp, #96	; 0x60
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	 int ok = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
	QSPI_CommandTypeDef     s_command;
	    QSPI_AutoPollingTypeDef s_config;

	    /* Configure automatic polling mode to wait for memory ready */
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e60:	63fb      	str	r3, [r7, #60]	; 0x3c
	    s_command.Instruction       = READ_STATUS_REG_CMD;
 8000e62:	2305      	movs	r3, #5
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
	    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	643b      	str	r3, [r7, #64]	; 0x40
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	647b      	str	r3, [r7, #68]	; 0x44
	    s_command.DataMode          = QSPI_DATA_1_LINE;
 8000e6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e72:	64bb      	str	r3, [r7, #72]	; 0x48
	    s_command.DummyCycles       = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	63bb      	str	r3, [r7, #56]	; 0x38
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	653b      	str	r3, [r7, #80]	; 0x50
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	657b      	str	r3, [r7, #84]	; 0x54
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000e80:	2300      	movs	r3, #0
 8000e82:	65bb      	str	r3, [r7, #88]	; 0x58

	    s_config.Match         = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
	    s_config.MatchMode     = QSPI_MATCH_MODE_AND;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
	    s_config.Interval      = 0x10;
 8000e8c:	2310      	movs	r3, #16
 8000e8e:	617b      	str	r3, [r7, #20]
	    s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000e90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e94:	623b      	str	r3, [r7, #32]
	    s_config.Mask          = IS25LP064A_SR_WIP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	613b      	str	r3, [r7, #16]
	    //s_config.Mask            = 0;
	    s_config.StatusBytesSize = 1;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	61bb      	str	r3, [r7, #24]

	    if(HAL_QSPI_AutoPolling(&hqspi, &s_command, &s_config, timeout)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f107 020c 	add.w	r2, r7, #12
 8000ea4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000ea8:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <AutopollingMemReady+0x78>)
 8000eaa:	f002 fe0d 	bl	8003ac8 <HAL_QSPI_AutoPolling>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <AutopollingMemReady+0x68>
	       != HAL_OK)
	    {
	    	qspi_error();
 8000eb4:	f7ff ffb4 	bl	8000e20 <qspi_error>
	    }

	    ok= 1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	65fb      	str	r3, [r7, #92]	; 0x5c
	    return ok;
 8000ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c

}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3760      	adds	r7, #96	; 0x60
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200001e4 	.word	0x200001e4

08000ecc <qspi_WriteEnable>:

int qspi_WriteEnable()
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b096      	sub	sp, #88	; 0x58
 8000ed0:	af00      	add	r7, sp, #0
	 int ok = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	657b      	str	r3, [r7, #84]	; 0x54
	QSPI_CommandTypeDef     s_command;
	    QSPI_AutoPollingTypeDef s_config;

	    /* Enable write operations */
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eda:	637b      	str	r3, [r7, #52]	; 0x34
	    s_command.Instruction       = WRITE_ENABLE_CMD;
 8000edc:	2306      	movs	r3, #6
 8000ede:	61fb      	str	r3, [r7, #28]
	    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	63bb      	str	r3, [r7, #56]	; 0x38
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
	    s_command.DataMode          = QSPI_DATA_NONE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	643b      	str	r3, [r7, #64]	; 0x40
	    s_command.DummyCycles       = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	64bb      	str	r3, [r7, #72]	; 0x48
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	653b      	str	r3, [r7, #80]	; 0x50

	    //RETURN_IF_ERR(CheckProgramMemory());

	    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f04:	4619      	mov	r1, r3
 8000f06:	4817      	ldr	r0, [pc, #92]	; (8000f64 <qspi_WriteEnable+0x98>)
 8000f08:	f002 fcee 	bl	80038e8 <HAL_QSPI_Command>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <qspi_WriteEnable+0x4a>
	       != HAL_OK)
	    {
	    	qspi_error();
 8000f12:	f7ff ff85 	bl	8000e20 <qspi_error>
	    }

	    /* Configure automatic polling mode to wait for write enabling */
	    //        s_config.Match           = IS25LP080D_SR_WREN | (IS25LP080D_SR_WREN << 8);
	    //        s_config.Mask            = IS25LP080D_SR_WREN | (IS25LP080D_SR_WREN << 8);
	    s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
	    s_config.Match           = IS25LP064A_SR_WREN;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	607b      	str	r3, [r7, #4]
	    s_config.Mask            = IS25LP064A_SR_WREN;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	60bb      	str	r3, [r7, #8]
	    s_config.Interval        = 0x10;
 8000f22:	2310      	movs	r3, #16
 8000f24:	60fb      	str	r3, [r7, #12]
	    s_config.StatusBytesSize = 1;
 8000f26:	2301      	movs	r3, #1
 8000f28:	613b      	str	r3, [r7, #16]
	    s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000f2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f2e:	61bb      	str	r3, [r7, #24]

	    s_command.Instruction = READ_STATUS_REG_CMD;
 8000f30:	2305      	movs	r3, #5
 8000f32:	61fb      	str	r3, [r7, #28]
	    s_command.DataMode    = QSPI_DATA_1_LINE;
 8000f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f38:	643b      	str	r3, [r7, #64]	; 0x40

	    if(HAL_QSPI_AutoPolling(
 8000f3a:	1d3a      	adds	r2, r7, #4
 8000f3c:	f107 011c 	add.w	r1, r7, #28
 8000f40:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f44:	4807      	ldr	r0, [pc, #28]	; (8000f64 <qspi_WriteEnable+0x98>)
 8000f46:	f002 fdbf 	bl	8003ac8 <HAL_QSPI_AutoPolling>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <qspi_WriteEnable+0x88>
	           &hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
	       != HAL_OK)
	    {
	    	qspi_error();
 8000f50:	f7ff ff66 	bl	8000e20 <qspi_error>
	    }

	    ok= 1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	657b      	str	r3, [r7, #84]	; 0x54
	    return ok;
 8000f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54

}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3758      	adds	r7, #88	; 0x58
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200001e4 	.word	0x200001e4

08000f68 <qspi_reset_memory>:

void qspi_reset_memory(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08e      	sub	sp, #56	; 0x38
 8000f6c:	af00      	add	r7, sp, #0
	//reset memory
		QSPI_CommandTypeDef s_command;

		    /* Initialize the reset enable command */
		    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f72:	61bb      	str	r3, [r7, #24]
		    s_command.Instruction       = RESET_ENABLE_CMD;
 8000f74:	2366      	movs	r3, #102	; 0x66
 8000f76:	603b      	str	r3, [r7, #0]
		    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
		    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
		    s_command.DataMode          = QSPI_DATA_NONE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
		    s_command.DummyCycles       = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
		    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
		    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
		    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000f90:	2300      	movs	r3, #0
 8000f92:	637b      	str	r3, [r7, #52]	; 0x34

		    /* Send the command */
		    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000f94:	463b      	mov	r3, r7
 8000f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4811      	ldr	r0, [pc, #68]	; (8000fe4 <qspi_reset_memory+0x7c>)
 8000f9e:	f002 fca3 	bl	80038e8 <HAL_QSPI_Command>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <qspi_reset_memory+0x44>
		       != HAL_OK)
		    {
		    	qspi_error();
 8000fa8:	f7ff ff3a 	bl	8000e20 <qspi_error>
		    }

		    /* Send the reset memory command */
		    s_command.Instruction = RESET_MEMORY_CMD;
 8000fac:	2399      	movs	r3, #153	; 0x99
 8000fae:	603b      	str	r3, [r7, #0]
		    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480a      	ldr	r0, [pc, #40]	; (8000fe4 <qspi_reset_memory+0x7c>)
 8000fba:	f002 fc95 	bl	80038e8 <HAL_QSPI_Command>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <qspi_reset_memory+0x60>
		       != HAL_OK)
		    {
		    	qspi_error();
 8000fc4:	f7ff ff2c 	bl	8000e20 <qspi_error>
		    }


		    /* Configure automatic polling mode to wait the memory is ready */
		    if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000fc8:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fcc:	f7ff ff40 	bl	8000e50 <AutopollingMemReady>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d001      	beq.n	8000fda <qspi_reset_memory+0x72>
		       != 1)
		    {
		    	qspi_error();
 8000fd6:	f7ff ff23 	bl	8000e20 <qspi_error>
		    }

}
 8000fda:	bf00      	nop
 8000fdc:	3738      	adds	r7, #56	; 0x38
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200001e4 	.word	0x200001e4

08000fe8 <qspi_dummy_cycles_config>:

void qspi_dummy_cycles_config()
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b090      	sub	sp, #64	; 0x40
 8000fec:	af00      	add	r7, sp, #0
	 QSPI_CommandTypeDef s_command;
	    uint16_t            reg     = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	80fb      	strh	r3, [r7, #6]
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff6:	623b      	str	r3, [r7, #32]
	    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
	    s_command.DataMode          = QSPI_DATA_1_LINE;
 8001000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
	    s_command.DummyCycles       = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
	    s_command.NbData            = 1;
 800100a:	2301      	movs	r3, #1
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001012:	2300      	movs	r3, #0
 8001014:	63bb      	str	r3, [r7, #56]	; 0x38
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001016:	2300      	movs	r3, #0
 8001018:	63fb      	str	r3, [r7, #60]	; 0x3c
	           // Dummy Cycles: (Config 3, bits 1 0)
	           // Drive Strength (50%, bits 1 1 1)
	           // Byte to write: 0b11110000 (0xF0)
	           // TODO: Probably expand Burst to maximum if that works out.

	           reg = 0xF0;
 800101a:	23f0      	movs	r3, #240	; 0xf0
 800101c:	80fb      	strh	r3, [r7, #6]
	           /* Update volatile configuration register (with new dummy cycles) */
	             s_command.Instruction = WRITE_READ_PARAM_REG_CMD;
 800101e:	23c0      	movs	r3, #192	; 0xc0
 8001020:	60bb      	str	r3, [r7, #8]
	             /* Configure the write volatile configuration register command */
	             if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001022:	f107 0308 	add.w	r3, r7, #8
 8001026:	f241 3288 	movw	r2, #5000	; 0x1388
 800102a:	4619      	mov	r1, r3
 800102c:	4810      	ldr	r0, [pc, #64]	; (8001070 <qspi_dummy_cycles_config+0x88>)
 800102e:	f002 fc5b 	bl	80038e8 <HAL_QSPI_Command>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <qspi_dummy_cycles_config+0x54>
	                != HAL_OK)
	             {
	            	 qspi_error();
 8001038:	f7ff fef2 	bl	8000e20 <qspi_error>
	             }

	             /* Transmission of the data */
	             if(HAL_QSPI_Transmit(
 800103c:	1dbb      	adds	r3, r7, #6
 800103e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001042:	4619      	mov	r1, r3
 8001044:	480a      	ldr	r0, [pc, #40]	; (8001070 <qspi_dummy_cycles_config+0x88>)
 8001046:	f002 fcad 	bl	80039a4 <HAL_QSPI_Transmit>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <qspi_dummy_cycles_config+0x6c>
	                    &hqspi, (uint8_t*)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
	                != HAL_OK)
	             {
	            	 qspi_error();
 8001050:	f7ff fee6 	bl	8000e20 <qspi_error>
	             }

	             /* Configure automatic polling mode to wait the memory is ready */
	             if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001054:	f241 3088 	movw	r0, #5000	; 0x1388
 8001058:	f7ff fefa 	bl	8000e50 <AutopollingMemReady>
 800105c:	4603      	mov	r3, r0
 800105e:	2b01      	cmp	r3, #1
 8001060:	d001      	beq.n	8001066 <qspi_dummy_cycles_config+0x7e>
	                != 1)
	             {
	            	 qspi_error();
 8001062:	f7ff fedd 	bl	8000e20 <qspi_error>
	             }
}
 8001066:	bf00      	nop
 8001068:	3740      	adds	r7, #64	; 0x40
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200001e4 	.word	0x200001e4

08001074 <qspi_quad_enable>:

void qspi_quad_enable()
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b096      	sub	sp, #88	; 0x58
 8001078:	af00      	add	r7, sp, #0
	 QSPI_CommandTypeDef     s_command;
	    QSPI_AutoPollingTypeDef s_config;
	    uint8_t                 reg = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	71fb      	strb	r3, [r7, #7]

	    /* Enable write operations */
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800107e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001082:	63bb      	str	r3, [r7, #56]	; 0x38
	    s_command.Instruction       = WRITE_STATUS_REG_CMD;
 8001084:	2301      	movs	r3, #1
 8001086:	623b      	str	r3, [r7, #32]
	    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001088:	2300      	movs	r3, #0
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800108c:	2300      	movs	r3, #0
 800108e:	643b      	str	r3, [r7, #64]	; 0x40
	    s_command.DataMode          = QSPI_DATA_1_LINE;
 8001090:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001094:	647b      	str	r3, [r7, #68]	; 0x44
	    s_command.DummyCycles       = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
	    s_command.NbData            = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	64bb      	str	r3, [r7, #72]	; 0x48
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80010a2:	2300      	movs	r3, #0
 80010a4:	653b      	str	r3, [r7, #80]	; 0x50
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80010a6:	2300      	movs	r3, #0
 80010a8:	657b      	str	r3, [r7, #84]	; 0x54

	    /* Enable write operations */
	    if(qspi_WriteEnable() != 1)
 80010aa:	f7ff ff0f 	bl	8000ecc <qspi_WriteEnable>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d001      	beq.n	80010b8 <qspi_quad_enable+0x44>
	    {
	    	qspi_error();
 80010b4:	f7ff feb4 	bl	8000e20 <qspi_error>
	    }

	    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80010b8:	f107 0320 	add.w	r3, r7, #32
 80010bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c0:	4619      	mov	r1, r3
 80010c2:	4821      	ldr	r0, [pc, #132]	; (8001148 <qspi_quad_enable+0xd4>)
 80010c4:	f002 fc10 	bl	80038e8 <HAL_QSPI_Command>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <qspi_quad_enable+0x5e>
	       != HAL_OK)
	    {
	    	qspi_error();
 80010ce:	f7ff fea7 	bl	8000e20 <qspi_error>

	    //    reg = 0;
	    //    MODIFY_REG(reg,
	    //        0xF0,
	    //        (IS25LP08D_SR_QE));
	    reg = IS25LP064A_SR_QE; // Set QE bit  to 1
 80010d2:	2340      	movs	r3, #64	; 0x40
 80010d4:	71fb      	strb	r3, [r7, #7]
	    /* Transmission of the data */
	    if(HAL_QSPI_Transmit(
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010dc:	4619      	mov	r1, r3
 80010de:	481a      	ldr	r0, [pc, #104]	; (8001148 <qspi_quad_enable+0xd4>)
 80010e0:	f002 fc60 	bl	80039a4 <HAL_QSPI_Transmit>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <qspi_quad_enable+0x7a>
	           &hqspi, (uint8_t*)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
	       != HAL_OK)
	    {
	    	qspi_error();
 80010ea:	f7ff fe99 	bl	8000e20 <qspi_error>
	    /* Configure automatic polling mode to wait for write enabling */
	    //    s_config.Match           = IS25LP08D_SR_WREN | (IS25LP08D_SR_WREN << 8);
	    //    s_config.Mask            = IS25LP08D_SR_WREN | (IS25LP08D_SR_WREN << 8);
	    //    s_config.MatchMode       = QSPI_MATCH_MODE_AND;
	    //    s_config.StatusBytesSize = 2;
	    s_config.Match           = IS25LP064A_SR_QE;
 80010ee:	2340      	movs	r3, #64	; 0x40
 80010f0:	60bb      	str	r3, [r7, #8]
	    s_config.Mask            = IS25LP064A_SR_QE;
 80010f2:	2340      	movs	r3, #64	; 0x40
 80010f4:	60fb      	str	r3, [r7, #12]
	    s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
	    s_config.StatusBytesSize = 1;
 80010fa:	2301      	movs	r3, #1
 80010fc:	617b      	str	r3, [r7, #20]

	    s_config.Interval      = 0x10;
 80010fe:	2310      	movs	r3, #16
 8001100:	613b      	str	r3, [r7, #16]
	    s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001102:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001106:	61fb      	str	r3, [r7, #28]

	    s_command.Instruction = READ_STATUS_REG_CMD;
 8001108:	2305      	movs	r3, #5
 800110a:	623b      	str	r3, [r7, #32]
	    s_command.DataMode    = QSPI_DATA_1_LINE;
 800110c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001110:	647b      	str	r3, [r7, #68]	; 0x44

	    if(HAL_QSPI_AutoPolling(
 8001112:	f107 0208 	add.w	r2, r7, #8
 8001116:	f107 0120 	add.w	r1, r7, #32
 800111a:	f241 3388 	movw	r3, #5000	; 0x1388
 800111e:	480a      	ldr	r0, [pc, #40]	; (8001148 <qspi_quad_enable+0xd4>)
 8001120:	f002 fcd2 	bl	8003ac8 <HAL_QSPI_AutoPolling>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <qspi_quad_enable+0xba>
	           &hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
	       != HAL_OK)
	    {
	    	qspi_error();
 800112a:	f7ff fe79 	bl	8000e20 <qspi_error>
	    }

	    /* Configure automatic polling mode to wait the memory is ready */
	    if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800112e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001132:	f7ff fe8d 	bl	8000e50 <AutopollingMemReady>
 8001136:	4603      	mov	r3, r0
 8001138:	2b01      	cmp	r3, #1
 800113a:	d001      	beq.n	8001140 <qspi_quad_enable+0xcc>
	       != 1)
	    {
	    	qspi_error();
 800113c:	f7ff fe70 	bl	8000e20 <qspi_error>
	    }

}
 8001140:	bf00      	nop
 8001142:	3758      	adds	r7, #88	; 0x58
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200001e4 	.word	0x200001e4

0800114c <qspi_enable_memory_mapped>:

void qspi_enable_memory_mapped()
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b092      	sub	sp, #72	; 0x48
 8001150:	af00      	add	r7, sp, #0
	   QSPI_CommandTypeDef      s_command;
	    QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

	    /* Configure the command for the read instruction */
	    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001152:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
	    s_command.Instruction     = QUAD_INOUT_FAST_READ_CMD;
 8001158:	23eb      	movs	r3, #235	; 0xeb
 800115a:	60fb      	str	r3, [r7, #12]
	    s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 800115c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
	    s_command.AddressSize     = QSPI_ADDRESS_24_BITS;
 8001162:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001166:	61bb      	str	r3, [r7, #24]
	    //    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
	    //s_command.DummyCycles       = IS25LP080D_DUMMY_CYCLES_READ_QUAD;
	    s_command.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 8001168:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
	    s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
	    s_command.AlternateBytes     = 0x000000A0;
 8001172:	23a0      	movs	r3, #160	; 0xa0
 8001174:	617b      	str	r3, [r7, #20]
	    s_command.DummyCycles        = 6;
 8001176:	2306      	movs	r3, #6
 8001178:	623b      	str	r3, [r7, #32]
	    s_command.DdrMode            = QSPI_DDR_MODE_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	63bb      	str	r3, [r7, #56]	; 0x38
	    s_command.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 800117e:	2300      	movs	r3, #0
 8001180:	63fb      	str	r3, [r7, #60]	; 0x3c
	    //s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
	    s_command.SIOOMode = QSPI_SIOO_INST_ONLY_FIRST_CMD;
 8001182:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001186:	643b      	str	r3, [r7, #64]	; 0x40
	    s_command.DataMode = QSPI_DATA_4_LINES;
 8001188:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800118c:	633b      	str	r3, [r7, #48]	; 0x30

	    /* Configure the memory mapped mode */
	    s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
	    s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
	    uint32_t qspiresult = HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg);
 8001196:	1d3a      	adds	r2, r7, #4
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	4619      	mov	r1, r3
 800119e:	4808      	ldr	r0, [pc, #32]	; (80011c0 <qspi_enable_memory_mapped+0x74>)
 80011a0:	f002 fd09 	bl	8003bb6 <HAL_QSPI_MemoryMapped>
 80011a4:	4603      	mov	r3, r0
 80011a6:	647b      	str	r3, [r7, #68]	; 0x44
	    if(qspiresult
 80011a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <qspi_enable_memory_mapped+0x66>
	       != HAL_OK)
	    {
	    	qspi_error();
 80011ae:	f7ff fe37 	bl	8000e20 <qspi_error>
	    }
	    memory_already_mapped = 1;
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <qspi_enable_memory_mapped+0x78>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
}
 80011b8:	bf00      	nop
 80011ba:	3748      	adds	r7, #72	; 0x48
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200001e4 	.word	0x200001e4
 80011c4:	200001e0 	.word	0x200001e0

080011c8 <qspi_initialize>:

void qspi_initialize(uint8_t mode)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	HAL_QSPI_DeInit(&hqspi);
 80011d2:	480c      	ldr	r0, [pc, #48]	; (8001204 <qspi_initialize+0x3c>)
 80011d4:	f002 fb68 	bl	80038a8 <HAL_QSPI_DeInit>
	HAL_QSPI_Init(&hqspi);
 80011d8:	480a      	ldr	r0, [pc, #40]	; (8001204 <qspi_initialize+0x3c>)
 80011da:	f002 faf1 	bl	80037c0 <HAL_QSPI_Init>

	qspi_reset_memory();
 80011de:	f7ff fec3 	bl	8000f68 <qspi_reset_memory>
	qspi_dummy_cycles_config();
 80011e2:	f7ff ff01 	bl	8000fe8 <qspi_dummy_cycles_config>
	qspi_quad_enable();
 80011e6:	f7ff ff45 	bl	8001074 <qspi_quad_enable>
	if (mode == MEMORY_MAPPED)
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d102      	bne.n	80011f6 <qspi_initialize+0x2e>
	{
		qspi_enable_memory_mapped();
 80011f0:	f7ff ffac 	bl	800114c <qspi_enable_memory_mapped>
	}
	else
	{
		memory_already_mapped = 0;
	}
}
 80011f4:	e002      	b.n	80011fc <qspi_initialize+0x34>
		memory_already_mapped = 0;
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <qspi_initialize+0x40>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200001e4 	.word	0x200001e4
 8001208:	200001e0 	.word	0x200001e0

0800120c <qspi_SetMode>:

void qspi_SetMode(uint8_t mode)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
	if (mode == INDIRECT_POLLING)
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d004      	beq.n	8001226 <qspi_SetMode+0x1a>
	{
		//qspi_initialize(INDIRECT_POLLING);
	}
	else if (mode == MEMORY_MAPPED)
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d101      	bne.n	8001226 <qspi_SetMode+0x1a>
	{
		qspi_enable_memory_mapped();
 8001222:	f7ff ff93 	bl	800114c <qspi_enable_memory_mapped>
	}

}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <qpsi_EraseSector>:

int qpsi_EraseSector(uint32_t address)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b092      	sub	sp, #72	; 0x48
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
    int ok = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t             use_qpi = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    QSPI_CommandTypeDef s_command;
    if(use_qpi)
 8001242:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001246:	2b00      	cmp	r3, #0
 8001248:	d008      	beq.n	800125c <qpsi_EraseSector+0x2c>
    {
        s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 800124a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800124e:	623b      	str	r3, [r7, #32]
        s_command.Instruction     = SECTOR_ERASE_QPI_CMD;
 8001250:	2320      	movs	r3, #32
 8001252:	60bb      	str	r3, [r7, #8]
        s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 8001254:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
 800125a:	e007      	b.n	800126c <qpsi_EraseSector+0x3c>
    }
    else
    {
        s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800125c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001260:	623b      	str	r3, [r7, #32]
        s_command.Instruction     = SECTOR_ERASE_CMD;
 8001262:	23d7      	movs	r3, #215	; 0xd7
 8001264:	60bb      	str	r3, [r7, #8]
        s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 8001266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 800126c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001270:	617b      	str	r3, [r7, #20]
    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001272:	2300      	movs	r3, #0
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.DataMode          = QSPI_DATA_NONE;
 8001276:	2300      	movs	r3, #0
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DummyCycles       = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
    s_command.NbData            = 1;
 800127e:	2301      	movs	r3, #1
 8001280:	633b      	str	r3, [r7, #48]	; 0x30
    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	637b      	str	r3, [r7, #52]	; 0x34
    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001286:	2300      	movs	r3, #0
 8001288:	63bb      	str	r3, [r7, #56]	; 0x38
    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800128a:	2300      	movs	r3, #0
 800128c:	63fb      	str	r3, [r7, #60]	; 0x3c
    s_command.Address           = address;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	60fb      	str	r3, [r7, #12]


    // Erasing takes a long time anyway, so not much point trying to
    // minimize reinitializations
    qspi_SetMode(INDIRECT_POLLING);
 8001292:	2000      	movs	r0, #0
 8001294:	f7ff ffba 	bl	800120c <qspi_SetMode>

    if(qspi_WriteEnable() != 1)
 8001298:	f7ff fe18 	bl	8000ecc <qspi_WriteEnable>
 800129c:	4603      	mov	r3, r0
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d001      	beq.n	80012a6 <qpsi_EraseSector+0x76>
    {
    	qspi_error();
 80012a2:	f7ff fdbd 	bl	8000e20 <qspi_error>
    }
    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ae:	4619      	mov	r1, r3
 80012b0:	480b      	ldr	r0, [pc, #44]	; (80012e0 <qpsi_EraseSector+0xb0>)
 80012b2:	f002 fb19 	bl	80038e8 <HAL_QSPI_Command>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <qpsi_EraseSector+0x90>
       != HAL_OK)
    {
    	qspi_error();
 80012bc:	f7ff fdb0 	bl	8000e20 <qspi_error>
    }
    if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80012c0:	f241 3088 	movw	r0, #5000	; 0x1388
 80012c4:	f7ff fdc4 	bl	8000e50 <AutopollingMemReady>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d001      	beq.n	80012d2 <qpsi_EraseSector+0xa2>
       != 1)
    {
    	qspi_error();
 80012ce:	f7ff fda7 	bl	8000e20 <qspi_error>
    }

    //qspi_SetMode(MEMORY_MAPPED);

    ok= 1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	647b      	str	r3, [r7, #68]	; 0x44
    return ok;
 80012d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44

}
 80012d8:	4618      	mov	r0, r3
 80012da:	3748      	adds	r7, #72	; 0x48
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200001e4 	.word	0x200001e4

080012e4 <qspi_Erase>:


void qspi_Erase(uint32_t start_addr, uint32_t end_addr)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
    uint32_t block_addr;
    uint32_t block_size = IS25LP064A_SECTOR_SIZE; // 4kB blocks for now.
 80012ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f2:	60fb      	str	r3, [r7, #12]
    // 64kB chunks for now.
    start_addr = start_addr - (start_addr % block_size);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80012fc:	68f9      	ldr	r1, [r7, #12]
 80012fe:	fb01 f202 	mul.w	r2, r1, r2
 8001302:	1a9b      	subs	r3, r3, r2
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	607b      	str	r3, [r7, #4]
    while(end_addr > start_addr)
 800130a:	e00f      	b.n	800132c <qspi_Erase+0x48>
    {
        block_addr = start_addr & 0x0FFFFFFF;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001312:	60bb      	str	r3, [r7, #8]
        if(qpsi_EraseSector(block_addr) != 1)
 8001314:	68b8      	ldr	r0, [r7, #8]
 8001316:	f7ff ff8b 	bl	8001230 <qpsi_EraseSector>
 800131a:	4603      	mov	r3, r0
 800131c:	2b01      	cmp	r3, #1
 800131e:	d001      	beq.n	8001324 <qspi_Erase+0x40>
        {
        	qspi_error();
 8001320:	f7ff fd7e 	bl	8000e20 <qspi_error>
        }
        start_addr += block_size;
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4413      	add	r3, r2
 800132a:	607b      	str	r3, [r7, #4]
    while(end_addr > start_addr)
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8eb      	bhi.n	800130c <qspi_Erase+0x28>
    }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <qspi_WritePage>:

int qspi_WritePage(uint32_t address, uint32_t size, uint8_t* buffer, uint8_t     reset_mode)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b094      	sub	sp, #80	; 0x50
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	70fb      	strb	r3, [r7, #3]
	  //RETURN_IF_ERR(CheckProgramMemory());
	int ok = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	64fb      	str	r3, [r7, #76]	; 0x4c

	qspi_SetMode(INDIRECT_POLLING);
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff ff5a 	bl	800120c <qspi_SetMode>

	    QSPI_CommandTypeDef s_command;
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001358:	f44f 7380 	mov.w	r3, #256	; 0x100
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
	    s_command.Instruction       = PAGE_PROG_CMD;
 800135e:	2302      	movs	r3, #2
 8001360:	617b      	str	r3, [r7, #20]
	    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8001362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001366:	633b      	str	r3, [r7, #48]	; 0x30
	    s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800136c:	623b      	str	r3, [r7, #32]
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800136e:	2300      	movs	r3, #0
 8001370:	637b      	str	r3, [r7, #52]	; 0x34
	    s_command.DataMode          = QSPI_DATA_1_LINE;
 8001372:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001376:	63bb      	str	r3, [r7, #56]	; 0x38
	    s_command.DummyCycles       = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
	    s_command.NbData            = size <= 256 ? size : 256;
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001382:	bf28      	it	cs
 8001384:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8001388:	63fb      	str	r3, [r7, #60]	; 0x3c
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	643b      	str	r3, [r7, #64]	; 0x40
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800138e:	2300      	movs	r3, #0
 8001390:	647b      	str	r3, [r7, #68]	; 0x44
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001392:	2300      	movs	r3, #0
 8001394:	64bb      	str	r3, [r7, #72]	; 0x48
	    s_command.Address           = address;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	61bb      	str	r3, [r7, #24]
	    if(qspi_WriteEnable() != 1)
 800139a:	f7ff fd97 	bl	8000ecc <qspi_WriteEnable>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d001      	beq.n	80013a8 <qspi_WritePage+0x68>
	    {
	    	qspi_error();
 80013a4:	f7ff fd3c 	bl	8000e20 <qspi_error>
	    }
	    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b0:	4619      	mov	r1, r3
 80013b2:	4814      	ldr	r0, [pc, #80]	; (8001404 <qspi_WritePage+0xc4>)
 80013b4:	f002 fa98 	bl	80038e8 <HAL_QSPI_Command>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <qspi_WritePage+0x82>
	       != HAL_OK)
	    {
	    	qspi_error();
 80013be:	f7ff fd2f 	bl	8000e20 <qspi_error>
	    }
	    if(HAL_QSPI_Transmit(
 80013c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	480e      	ldr	r0, [pc, #56]	; (8001404 <qspi_WritePage+0xc4>)
 80013ca:	f002 faeb 	bl	80039a4 <HAL_QSPI_Transmit>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <qspi_WritePage+0x98>
	           &hqspi, (uint8_t*)buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
	       != HAL_OK)
	    {
	    	qspi_error();
 80013d4:	f7ff fd24 	bl	8000e20 <qspi_error>
	    }
	    if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80013d8:	f241 3088 	movw	r0, #5000	; 0x1388
 80013dc:	f7ff fd38 	bl	8000e50 <AutopollingMemReady>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d001      	beq.n	80013ea <qspi_WritePage+0xaa>
	       != 1)
	    {
	    	qspi_error();
 80013e6:	f7ff fd1b 	bl	8000e20 <qspi_error>
	    }

	    if(reset_mode)
 80013ea:	78fb      	ldrb	r3, [r7, #3]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <qspi_WritePage+0xb6>
	    	qspi_SetMode(MEMORY_MAPPED);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff ff0b 	bl	800120c <qspi_SetMode>

	    ok= 1;
 80013f6:	2301      	movs	r3, #1
 80013f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	    return ok;
 80013fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3750      	adds	r7, #80	; 0x50
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200001e4 	.word	0x200001e4

08001408 <qspi_Write>:

void qspi_Write(uint32_t address, uint32_t size, uint8_t* buffer)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08c      	sub	sp, #48	; 0x30
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	 uint32_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001418:	2300      	movs	r3, #0
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
 800141c:	2300      	movs	r3, #0
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
	    uint32_t QSPI_DataNum    = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	61bb      	str	r3, [r7, #24]
	    uint32_t flash_page_size = IS25LP064A_PAGE_SIZE;
 800142c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001430:	617b      	str	r3, [r7, #20]
	    address                  = address & 0x0FFFFFFF;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001438:	60fb      	str	r3, [r7, #12]
	    Addr                     = address % flash_page_size;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001442:	6979      	ldr	r1, [r7, #20]
 8001444:	fb01 f202 	mul.w	r2, r1, r2
 8001448:	1a9b      	subs	r3, r3, r2
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
	    count                    = flash_page_size - Addr;
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	623b      	str	r3, [r7, #32]
	    NumOfPage                = size / flash_page_size;
 8001454:	68ba      	ldr	r2, [r7, #8]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	fbb2 f3f3 	udiv	r3, r2, r3
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
	    NumOfSingle              = size % flash_page_size;
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	fbb3 f2f2 	udiv	r2, r3, r2
 8001466:	6979      	ldr	r1, [r7, #20]
 8001468:	fb01 f202 	mul.w	r2, r1, r2
 800146c:	1a9b      	subs	r3, r3, r2
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28

	    if(Addr == 0) /*!< Address is QSPI_PAGESIZE aligned  */
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	2b00      	cmp	r3, #0
 8001474:	d12c      	bne.n	80014d0 <qspi_Write+0xc8>
	    {
	        if(NumOfPage == 0) /*!< NumByteToWrite < QSPI_PAGESIZE */
 8001476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001478:	2b00      	cmp	r3, #0
 800147a:	d118      	bne.n	80014ae <qspi_Write+0xa6>
	        {
	            QSPI_DataNum = size;
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	61bb      	str	r3, [r7, #24]
	            qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8001480:	2300      	movs	r3, #0
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	69b9      	ldr	r1, [r7, #24]
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f7ff ff5a 	bl	8001340 <qspi_WritePage>
 800148c:	e090      	b.n	80015b0 <qspi_Write+0x1a8>
	        }
	        else /*!< Size > QSPI_PAGESIZE */
	        {
	            while(NumOfPage--)
	            {
	                QSPI_DataNum = flash_page_size;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	61bb      	str	r3, [r7, #24]
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8001492:	2300      	movs	r3, #0
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	69b9      	ldr	r1, [r7, #24]
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f7ff ff51 	bl	8001340 <qspi_WritePage>
	                address += flash_page_size;
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	4413      	add	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
	                buffer += flash_page_size;
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	4413      	add	r3, r2
 80014ac:	607b      	str	r3, [r7, #4]
	            while(NumOfPage--)
 80014ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b0:	1e5a      	subs	r2, r3, #1
 80014b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1ea      	bne.n	800148e <qspi_Write+0x86>
	            }

	            QSPI_DataNum = NumOfSingle;
 80014b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ba:	61bb      	str	r3, [r7, #24]
	            if(QSPI_DataNum > 0)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d076      	beq.n	80015b0 <qspi_Write+0x1a8>
	            	qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 80014c2:	2300      	movs	r3, #0
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	69b9      	ldr	r1, [r7, #24]
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f7ff ff39 	bl	8001340 <qspi_WritePage>
 80014ce:	e06f      	b.n	80015b0 <qspi_Write+0x1a8>
	        }
	    }
	    else /*!< Address is not QSPI_PAGESIZE aligned  */
	    {
	        if(NumOfPage == 0) /*!< Size < QSPI_PAGESIZE */
 80014d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d129      	bne.n	800152a <qspi_Write+0x122>
	        {
	            if(NumOfSingle > count) /*!< (Size + Address) > QSPI_PAGESIZE */
 80014d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d91c      	bls.n	8001518 <qspi_Write+0x110>
	            {
	                temp         = NumOfSingle - count;
 80014de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	61fb      	str	r3, [r7, #28]
	                QSPI_DataNum = count;
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	61bb      	str	r3, [r7, #24]
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 80014ea:	2300      	movs	r3, #0
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	69b9      	ldr	r1, [r7, #24]
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f7ff ff25 	bl	8001340 <qspi_WritePage>
	                address += count;
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	4413      	add	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
	                buffer += count;
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	4413      	add	r3, r2
 8001504:	607b      	str	r3, [r7, #4]
	                QSPI_DataNum = temp;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	61bb      	str	r3, [r7, #24]
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 800150a:	2300      	movs	r3, #0
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	69b9      	ldr	r1, [r7, #24]
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f7ff ff15 	bl	8001340 <qspi_WritePage>
 8001516:	e04b      	b.n	80015b0 <qspi_Write+0x1a8>
	            }
	            else
	            {
	                QSPI_DataNum = size;
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	61bb      	str	r3, [r7, #24]
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 800151c:	2300      	movs	r3, #0
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	69b9      	ldr	r1, [r7, #24]
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f7ff ff0c 	bl	8001340 <qspi_WritePage>
 8001528:	e042      	b.n	80015b0 <qspi_Write+0x1a8>
	            }
	        }
	        else /*!< Size > QSPI_PAGESIZE */
	        {
	            size -= count;
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	60bb      	str	r3, [r7, #8]
	            NumOfPage    = size / flash_page_size;
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fbb2 f3f3 	udiv	r3, r2, r3
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
	            NumOfSingle  = size % flash_page_size;
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	fbb3 f2f2 	udiv	r2, r3, r2
 8001544:	6979      	ldr	r1, [r7, #20]
 8001546:	fb01 f202 	mul.w	r2, r1, r2
 800154a:	1a9b      	subs	r3, r3, r2
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
	            QSPI_DataNum = count;
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	61bb      	str	r3, [r7, #24]
	            qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8001552:	2300      	movs	r3, #0
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	69b9      	ldr	r1, [r7, #24]
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f7ff fef1 	bl	8001340 <qspi_WritePage>
	            address += count;
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	4413      	add	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
	            buffer += count;
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6a3b      	ldr	r3, [r7, #32]
 800156a:	4413      	add	r3, r2
 800156c:	607b      	str	r3, [r7, #4]

	            while(NumOfPage--)
 800156e:	e00f      	b.n	8001590 <qspi_Write+0x188>
	            {
	                QSPI_DataNum = flash_page_size;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	61bb      	str	r3, [r7, #24]
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8001574:	2300      	movs	r3, #0
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	69b9      	ldr	r1, [r7, #24]
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f7ff fee0 	bl	8001340 <qspi_WritePage>
	                address += flash_page_size;
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	4413      	add	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]
	                buffer += flash_page_size;
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	4413      	add	r3, r2
 800158e:	607b      	str	r3, [r7, #4]
	            while(NumOfPage--)
 8001590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001592:	1e5a      	subs	r2, r3, #1
 8001594:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1ea      	bne.n	8001570 <qspi_Write+0x168>
	            }

	            if(NumOfSingle != 0)
 800159a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159c:	2b00      	cmp	r3, #0
 800159e:	d007      	beq.n	80015b0 <qspi_Write+0x1a8>
	            {
	                QSPI_DataNum = NumOfSingle;
 80015a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a2:	61bb      	str	r3, [r7, #24]
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 80015a4:	2300      	movs	r3, #0
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	69b9      	ldr	r1, [r7, #24]
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f7ff fec8 	bl	8001340 <qspi_WritePage>
	            }
	        }
	    }

	    qspi_SetMode(MEMORY_MAPPED);
 80015b0:	2001      	movs	r0, #1
 80015b2:	f7ff fe2b 	bl	800120c <qspi_SetMode>


}
 80015b6:	bf00      	nop
 80015b8:	3730      	adds	r7, #48	; 0x30
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <FS_FileOperations>:



static void FS_FileOperations(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 80015c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015ca:	f000 fd9f 	bl	800210c <HAL_Delay>
	disk_initialize(0);
 80015ce:	2000      	movs	r0, #0
 80015d0:	f009 f8c6 	bl	800a760 <disk_initialize>
    disk_status(0);
 80015d4:	2000      	movs	r0, #0
 80015d6:	f009 f8a9 	bl	800a72c <disk_status>
    //{
      //ShowDiskStatus(status);
    //}


	if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 80015da:	2201      	movs	r2, #1
 80015dc:	4921      	ldr	r1, [pc, #132]	; (8001664 <FS_FileOperations+0xa4>)
 80015de:	4822      	ldr	r0, [pc, #136]	; (8001668 <FS_FileOperations+0xa8>)
 80015e0:	f00b fc16 	bl	800ce10 <f_mount>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d138      	bne.n	800165c <FS_FileOperations+0x9c>

		FRESULT res;


		//search for .bin firmware files
		res = f_findfirst(&dir, &fno, SDPath, "Electrosteel_Daisy_Audio.bin");
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <FS_FileOperations+0xac>)
 80015ec:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <FS_FileOperations+0xa4>)
 80015ee:	4920      	ldr	r1, [pc, #128]	; (8001670 <FS_FileOperations+0xb0>)
 80015f0:	4820      	ldr	r0, [pc, #128]	; (8001674 <FS_FileOperations+0xb4>)
 80015f2:	f00c f8e7 	bl	800d7c4 <f_findfirst>
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]

		/* Repeat while an item is found */
		if (fno.fname[0])
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <FS_FileOperations+0xb0>)
 80015fc:	7d9b      	ldrb	r3, [r3, #22]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d024      	beq.n	800164c <FS_FileOperations+0x8c>
		{
		  if(res == FR_OK)
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d121      	bne.n	800164c <FS_FileOperations+0x8c>
		  {
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 8001608:	2211      	movs	r2, #17
 800160a:	491b      	ldr	r1, [pc, #108]	; (8001678 <FS_FileOperations+0xb8>)
 800160c:	481b      	ldr	r0, [pc, #108]	; (800167c <FS_FileOperations+0xbc>)
 800160e:	f00b fc45 	bl	800ce9c <f_open>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d119      	bne.n	800164c <FS_FileOperations+0x8c>
				{

					//write to local SRAM, then copy that to QSPI flash for more permanent storage
					f_read(&SDFile, &tempBinaryBuffer, f_size(&SDFile), &bytesRead);
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <FS_FileOperations+0xbc>)
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	4b18      	ldr	r3, [pc, #96]	; (8001680 <FS_FileOperations+0xc0>)
 800161e:	4919      	ldr	r1, [pc, #100]	; (8001684 <FS_FileOperations+0xc4>)
 8001620:	4816      	ldr	r0, [pc, #88]	; (800167c <FS_FileOperations+0xbc>)
 8001622:	f00b fdf6 	bl	800d212 <f_read>



					if (bytesRead < 262140)
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <FS_FileOperations+0xc0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <FS_FileOperations+0xc8>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d80a      	bhi.n	8001646 <FS_FileOperations+0x86>
					{
						qspi_Erase(QSPI_START, QSPI_START+262140);
 8001630:	4916      	ldr	r1, [pc, #88]	; (800168c <FS_FileOperations+0xcc>)
 8001632:	f04f 4010 	mov.w	r0, #2415919104	; 0x90000000
 8001636:	f7ff fe55 	bl	80012e4 <qspi_Erase>
						qspi_Write(QSPI_START, 262140,(uint8_t*)tempBinaryBuffer);
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <FS_FileOperations+0xc4>)
 800163c:	4914      	ldr	r1, [pc, #80]	; (8001690 <FS_FileOperations+0xd0>)
 800163e:	f04f 4010 	mov.w	r0, #2415919104	; 0x90000000
 8001642:	f7ff fee1 	bl	8001408 <qspi_Write>
						//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
					}

					f_close(&SDFile);
 8001646:	480d      	ldr	r0, [pc, #52]	; (800167c <FS_FileOperations+0xbc>)
 8001648:	f00b ff94 	bl	800d574 <f_close>
			}


		  }

		f_closedir(&dir);
 800164c:	4809      	ldr	r0, [pc, #36]	; (8001674 <FS_FileOperations+0xb4>)
 800164e:	f00c f82e 	bl	800d6ae <f_closedir>
		f_mount(0, "", 0); //unmount
 8001652:	2200      	movs	r2, #0
 8001654:	490f      	ldr	r1, [pc, #60]	; (8001694 <FS_FileOperations+0xd4>)
 8001656:	2000      	movs	r0, #0
 8001658:	f00b fbda 	bl	800ce10 <f_mount>
	}


}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200002b4 	.word	0x200002b4
 8001668:	200002b8 	.word	0x200002b8
 800166c:	0800da9c 	.word	0x0800da9c
 8001670:	20000084 	.word	0x20000084
 8001674:	2000019c 	.word	0x2000019c
 8001678:	2000009a 	.word	0x2000009a
 800167c:	200004ec 	.word	0x200004ec
 8001680:	200001d4 	.word	0x200001d4
 8001684:	24000000 	.word	0x24000000
 8001688:	0003fffb 	.word	0x0003fffb
 800168c:	9003fffc 	.word	0x9003fffc
 8001690:	0003fffc 	.word	0x0003fffc
 8001694:	0800dabc 	.word	0x0800dabc

08001698 <checkForNewFirmwareFromMainSynthBoard>:

void checkForNewFirmwareFromMainSynthBoard(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
	if (boardNumber != 0)
 800169e:	4b88      	ldr	r3, [pc, #544]	; (80018c0 <checkForNewFirmwareFromMainSynthBoard+0x228>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 8107 	beq.w	80018b6 <checkForNewFirmwareFromMainSynthBoard+0x21e>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) ==  1)
 80016a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ac:	4885      	ldr	r0, [pc, #532]	; (80018c4 <checkForNewFirmwareFromMainSynthBoard+0x22c>)
 80016ae:	f001 f9ef 	bl	8002a90 <HAL_GPIO_ReadPin>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	f040 80fe 	bne.w	80018b6 <checkForNewFirmwareFromMainSynthBoard+0x21e>
		{
			HAL_StatusTypeDef returnVal = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	70fb      	strb	r3, [r7, #3]

			MX_I2C1_Init();
 80016be:	f7fe ff8f 	bl	80005e0 <MX_I2C1_Init>

			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) ==  1)
 80016c2:	e01f      	b.n	8001704 <checkForNewFirmwareFromMainSynthBoard+0x6c>
			{
				uint8_t fader = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	70bb      	strb	r3, [r7, #2]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80016c8:	2201      	movs	r2, #1
 80016ca:	2180      	movs	r1, #128	; 0x80
 80016cc:	487e      	ldr	r0, [pc, #504]	; (80018c8 <checkForNewFirmwareFromMainSynthBoard+0x230>)
 80016ce:	f001 f9f7 	bl	8002ac0 <HAL_GPIO_WritePin>
				HAL_Delay(63-fader);//wait for pin to go back low
 80016d2:	78bb      	ldrb	r3, [r7, #2]
 80016d4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 fd17 	bl	800210c <HAL_Delay>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	4879      	ldr	r0, [pc, #484]	; (80018c8 <checkForNewFirmwareFromMainSynthBoard+0x230>)
 80016e4:	f001 f9ec 	bl	8002ac0 <HAL_GPIO_WritePin>
				HAL_Delay(fader);//wait for pin to go back low
 80016e8:	78bb      	ldrb	r3, [r7, #2]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 fd0e 	bl	800210c <HAL_Delay>
				fader = (fader+1) % 64;
 80016f0:	78bb      	ldrb	r3, [r7, #2]
 80016f2:	3301      	adds	r3, #1
 80016f4:	425a      	negs	r2, r3
 80016f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80016fe:	bf58      	it	pl
 8001700:	4253      	negpl	r3, r2
 8001702:	70bb      	strb	r3, [r7, #2]
			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) ==  1)
 8001704:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001708:	486e      	ldr	r0, [pc, #440]	; (80018c4 <checkForNewFirmwareFromMainSynthBoard+0x22c>)
 800170a:	f001 f9c1 	bl	8002a90 <HAL_GPIO_ReadPin>
 800170e:	4603      	mov	r3, r0
 8001710:	2b01      	cmp	r3, #1
 8001712:	d0d7      	beq.n	80016c4 <checkForNewFirmwareFromMainSynthBoard+0x2c>

			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001714:	2201      	movs	r2, #1
 8001716:	2180      	movs	r1, #128	; 0x80
 8001718:	486b      	ldr	r0, [pc, #428]	; (80018c8 <checkForNewFirmwareFromMainSynthBoard+0x230>)
 800171a:	f001 f9d1 	bl	8002ac0 <HAL_GPIO_WritePin>
			returnVal = HAL_I2C_Slave_Receive(&hi2c1, tempBinaryBuffer, 65535,
 800171e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001726:	4969      	ldr	r1, [pc, #420]	; (80018cc <checkForNewFirmwareFromMainSynthBoard+0x234>)
 8001728:	4869      	ldr	r0, [pc, #420]	; (80018d0 <checkForNewFirmwareFromMainSynthBoard+0x238>)
 800172a:	f001 fbb1 	bl	8002e90 <HAL_I2C_Slave_Receive>
 800172e:	4603      	mov	r3, r0
 8001730:	70fb      	strb	r3, [r7, #3]
					10000);
			if (returnVal != HAL_OK)
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <checkForNewFirmwareFromMainSynthBoard+0xa4>
			{
				i2cError();
 8001738:	f7ff fb5a 	bl	8000df0 <i2cError>
			}
			int i = 6;
 800173c:	2306      	movs	r3, #6
 800173e:	607b      	str	r3, [r7, #4]
			while(i--)
 8001740:	e006      	b.n	8001750 <checkForNewFirmwareFromMainSynthBoard+0xb8>
			{
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8001742:	2180      	movs	r1, #128	; 0x80
 8001744:	4860      	ldr	r0, [pc, #384]	; (80018c8 <checkForNewFirmwareFromMainSynthBoard+0x230>)
 8001746:	f001 f9d4 	bl	8002af2 <HAL_GPIO_TogglePin>
				HAL_Delay(30);
 800174a:	201e      	movs	r0, #30
 800174c:	f000 fcde 	bl	800210c <HAL_Delay>
			while(i--)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	1e5a      	subs	r2, r3, #1
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f3      	bne.n	8001742 <checkForNewFirmwareFromMainSynthBoard+0xaa>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	2180      	movs	r1, #128	; 0x80
 800175e:	485a      	ldr	r0, [pc, #360]	; (80018c8 <checkForNewFirmwareFromMainSynthBoard+0x230>)
 8001760:	f001 f9ae 	bl	8002ac0 <HAL_GPIO_WritePin>
			returnVal = HAL_I2C_Slave_Receive(&hi2c1, tempBinaryBuffer+65535, 65535,
 8001764:	495b      	ldr	r1, [pc, #364]	; (80018d4 <checkForNewFirmwareFromMainSynthBoard+0x23c>)
 8001766:	f242 7310 	movw	r3, #10000	; 0x2710
 800176a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800176e:	4858      	ldr	r0, [pc, #352]	; (80018d0 <checkForNewFirmwareFromMainSynthBoard+0x238>)
 8001770:	f001 fb8e 	bl	8002e90 <HAL_I2C_Slave_Receive>
 8001774:	4603      	mov	r3, r0
 8001776:	70fb      	strb	r3, [r7, #3]
					10000);
			if (returnVal != HAL_OK)
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <checkForNewFirmwareFromMainSynthBoard+0xea>
			{
				i2cError();
 800177e:	f7ff fb37 	bl	8000df0 <i2cError>
			}
			i = 6;
 8001782:	2306      	movs	r3, #6
 8001784:	607b      	str	r3, [r7, #4]
			while(i--)
 8001786:	e006      	b.n	8001796 <checkForNewFirmwareFromMainSynthBoard+0xfe>
			{
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8001788:	2180      	movs	r1, #128	; 0x80
 800178a:	484f      	ldr	r0, [pc, #316]	; (80018c8 <checkForNewFirmwareFromMainSynthBoard+0x230>)
 800178c:	f001 f9b1 	bl	8002af2 <HAL_GPIO_TogglePin>
				HAL_Delay(30);
 8001790:	201e      	movs	r0, #30
 8001792:	f000 fcbb 	bl	800210c <HAL_Delay>
			while(i--)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	1e5a      	subs	r2, r3, #1
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1f3      	bne.n	8001788 <checkForNewFirmwareFromMainSynthBoard+0xf0>
			}

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80017a0:	2201      	movs	r2, #1
 80017a2:	2180      	movs	r1, #128	; 0x80
 80017a4:	4848      	ldr	r0, [pc, #288]	; (80018c8 <checkForNewFirmwareFromMainSynthBoard+0x230>)
 80017a6:	f001 f98b 	bl	8002ac0 <HAL_GPIO_WritePin>
			returnVal = HAL_I2C_Slave_Receive(&hi2c1, tempBinaryBuffer+131070, 65535,
 80017aa:	494b      	ldr	r1, [pc, #300]	; (80018d8 <checkForNewFirmwareFromMainSynthBoard+0x240>)
 80017ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80017b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b4:	4846      	ldr	r0, [pc, #280]	; (80018d0 <checkForNewFirmwareFromMainSynthBoard+0x238>)
 80017b6:	f001 fb6b 	bl	8002e90 <HAL_I2C_Slave_Receive>
 80017ba:	4603      	mov	r3, r0
 80017bc:	70fb      	strb	r3, [r7, #3]
					10000);
			if (returnVal != HAL_OK)
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <checkForNewFirmwareFromMainSynthBoard+0x130>
			{
				i2cError();
 80017c4:	f7ff fb14 	bl	8000df0 <i2cError>
			}
			i = 6;
 80017c8:	2306      	movs	r3, #6
 80017ca:	607b      	str	r3, [r7, #4]
			while(i--)
 80017cc:	e006      	b.n	80017dc <checkForNewFirmwareFromMainSynthBoard+0x144>
			{
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80017ce:	2180      	movs	r1, #128	; 0x80
 80017d0:	483d      	ldr	r0, [pc, #244]	; (80018c8 <checkForNewFirmwareFromMainSynthBoard+0x230>)
 80017d2:	f001 f98e 	bl	8002af2 <HAL_GPIO_TogglePin>
				HAL_Delay(30);
 80017d6:	201e      	movs	r0, #30
 80017d8:	f000 fc98 	bl	800210c <HAL_Delay>
			while(i--)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	1e5a      	subs	r2, r3, #1
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f3      	bne.n	80017ce <checkForNewFirmwareFromMainSynthBoard+0x136>
			}

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2180      	movs	r1, #128	; 0x80
 80017ea:	4837      	ldr	r0, [pc, #220]	; (80018c8 <checkForNewFirmwareFromMainSynthBoard+0x230>)
 80017ec:	f001 f968 	bl	8002ac0 <HAL_GPIO_WritePin>
			returnVal = HAL_I2C_Slave_Receive(&hi2c1, tempBinaryBuffer+196605, 65535,
 80017f0:	493a      	ldr	r1, [pc, #232]	; (80018dc <checkForNewFirmwareFromMainSynthBoard+0x244>)
 80017f2:	f242 7310 	movw	r3, #10000	; 0x2710
 80017f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017fa:	4835      	ldr	r0, [pc, #212]	; (80018d0 <checkForNewFirmwareFromMainSynthBoard+0x238>)
 80017fc:	f001 fb48 	bl	8002e90 <HAL_I2C_Slave_Receive>
 8001800:	4603      	mov	r3, r0
 8001802:	70fb      	strb	r3, [r7, #3]
					10000);
			if (returnVal != HAL_OK)
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <checkForNewFirmwareFromMainSynthBoard+0x176>
			{
				i2cError();
 800180a:	f7ff faf1 	bl	8000df0 <i2cError>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800180e:	2201      	movs	r2, #1
 8001810:	2180      	movs	r1, #128	; 0x80
 8001812:	482d      	ldr	r0, [pc, #180]	; (80018c8 <checkForNewFirmwareFromMainSynthBoard+0x230>)
 8001814:	f001 f954 	bl	8002ac0 <HAL_GPIO_WritePin>
			i = 6;
 8001818:	2306      	movs	r3, #6
 800181a:	607b      	str	r3, [r7, #4]
			while(i--)
 800181c:	e006      	b.n	800182c <checkForNewFirmwareFromMainSynthBoard+0x194>
			{
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 800181e:	2180      	movs	r1, #128	; 0x80
 8001820:	4829      	ldr	r0, [pc, #164]	; (80018c8 <checkForNewFirmwareFromMainSynthBoard+0x230>)
 8001822:	f001 f966 	bl	8002af2 <HAL_GPIO_TogglePin>
				HAL_Delay(30);
 8001826:	201e      	movs	r0, #30
 8001828:	f000 fc70 	bl	800210c <HAL_Delay>
			while(i--)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	1e5a      	subs	r2, r3, #1
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f3      	bne.n	800181e <checkForNewFirmwareFromMainSynthBoard+0x186>
			}

			qspi_Erase(QSPI_START, QSPI_START+262140);
 8001836:	492a      	ldr	r1, [pc, #168]	; (80018e0 <checkForNewFirmwareFromMainSynthBoard+0x248>)
 8001838:	f04f 4010 	mov.w	r0, #2415919104	; 0x90000000
 800183c:	f7ff fd52 	bl	80012e4 <qspi_Erase>
			qspi_Write(QSPI_START, 262140,(uint8_t*)tempBinaryBuffer);
 8001840:	4a22      	ldr	r2, [pc, #136]	; (80018cc <checkForNewFirmwareFromMainSynthBoard+0x234>)
 8001842:	4928      	ldr	r1, [pc, #160]	; (80018e4 <checkForNewFirmwareFromMainSynthBoard+0x24c>)
 8001844:	f04f 4010 	mov.w	r0, #2415919104	; 0x90000000
 8001848:	f7ff fdde 	bl	8001408 <qspi_Write>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	2180      	movs	r1, #128	; 0x80
 8001850:	481d      	ldr	r0, [pc, #116]	; (80018c8 <checkForNewFirmwareFromMainSynthBoard+0x230>)
 8001852:	f001 f935 	bl	8002ac0 <HAL_GPIO_WritePin>
			  if (!memory_already_mapped)
 8001856:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <checkForNewFirmwareFromMainSynthBoard+0x250>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <checkForNewFirmwareFromMainSynthBoard+0x1cc>
			  {
				  qspi_enable_memory_mapped();
 8001860:	f7ff fc74 	bl	800114c <qspi_enable_memory_mapped>

			  }
			  i = 6;
 8001864:	2306      	movs	r3, #6
 8001866:	607b      	str	r3, [r7, #4]
				while(i--)
 8001868:	e006      	b.n	8001878 <checkForNewFirmwareFromMainSynthBoard+0x1e0>
				{
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	4816      	ldr	r0, [pc, #88]	; (80018c8 <checkForNewFirmwareFromMainSynthBoard+0x230>)
 800186e:	f001 f940 	bl	8002af2 <HAL_GPIO_TogglePin>
					HAL_Delay(30);
 8001872:	201e      	movs	r0, #30
 8001874:	f000 fc4a 	bl	800210c <HAL_Delay>
				while(i--)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	1e5a      	subs	r2, r3, #1
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f3      	bne.n	800186a <checkForNewFirmwareFromMainSynthBoard+0x1d2>
				}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001882:	2201      	movs	r2, #1
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	4810      	ldr	r0, [pc, #64]	; (80018c8 <checkForNewFirmwareFromMainSynthBoard+0x230>)
 8001888:	f001 f91a 	bl	8002ac0 <HAL_GPIO_WritePin>

    	  HAL_I2C_DeInit(&hi2c1);
 800188c:	4810      	ldr	r0, [pc, #64]	; (80018d0 <checkForNewFirmwareFromMainSynthBoard+0x238>)
 800188e:	f001 f9db 	bl	8002c48 <HAL_I2C_DeInit>
	 	  HAL_QSPI_MspDeInit(&hqspi);
 8001892:	4816      	ldr	r0, [pc, #88]	; (80018ec <checkForNewFirmwareFromMainSynthBoard+0x254>)
 8001894:	f000 f942 	bl	8001b1c <HAL_QSPI_MspDeInit>
		  HAL_RCC_DeInit();
 8001898:	f002 fbba 	bl	8004010 <HAL_RCC_DeInit>
		  HAL_DeInit();
 800189c:	f000 fb7a 	bl	8001f94 <HAL_DeInit>
  	 	  SysTick->CTRL = 0;
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <checkForNewFirmwareFromMainSynthBoard+0x258>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
  	 	  SysTick->LOAD = 0;
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <checkForNewFirmwareFromMainSynthBoard+0x258>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
  	 	  SysTick->VAL  = 0;
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <checkForNewFirmwareFromMainSynthBoard+0x258>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  	 	  HAL_NVIC_SystemReset();
 80018b2:	f000 fda6 	bl	8002402 <HAL_NVIC_SystemReset>

		}
	}

}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000000 	.word	0x20000000
 80018c4:	58020400 	.word	0x58020400
 80018c8:	58020800 	.word	0x58020800
 80018cc:	24000000 	.word	0x24000000
 80018d0:	20000030 	.word	0x20000030
 80018d4:	2400ffff 	.word	0x2400ffff
 80018d8:	2401fffe 	.word	0x2401fffe
 80018dc:	2402fffd 	.word	0x2402fffd
 80018e0:	9003fffc 	.word	0x9003fffc
 80018e4:	0003fffc 	.word	0x0003fffc
 80018e8:	200001e0 	.word	0x200001e0
 80018ec:	200001e4 	.word	0x200001e4
 80018f0:	e000e010 	.word	0xe000e010

080018f4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80018fa:	463b      	mov	r3, r7
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001906:	f000 fd8d 	bl	8002424 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800190a:	2301      	movs	r3, #1
 800190c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800190e:	2300      	movs	r3, #0
 8001910:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8001912:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8001916:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8001918:	2316      	movs	r3, #22
 800191a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800191c:	2300      	movs	r3, #0
 800191e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001920:	2300      	movs	r3, #0
 8001922:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001924:	2303      	movs	r3, #3
 8001926:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001938:	463b      	mov	r3, r7
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fdaa 	bl	8002494 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001940:	2004      	movs	r0, #4
 8001942:	f000 fd87 	bl	8002454 <HAL_MPU_Enable>

}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001952:	b672      	cpsid	i
}
 8001954:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001956:	e7fe      	b.n	8001956 <Error_Handler+0x8>

08001958 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_QUADSPI_Init+0x50>)
 800195e:	4a13      	ldr	r2, [pc, #76]	; (80019ac <MX_QUADSPI_Init+0x54>)
 8001960:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_QUADSPI_Init+0x50>)
 8001964:	2201      	movs	r2, #1
 8001966:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_QUADSPI_Init+0x50>)
 800196a:	2201      	movs	r2, #1
 800196c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_QUADSPI_Init+0x50>)
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 19;
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_QUADSPI_Init+0x50>)
 8001976:	2213      	movs	r2, #19
 8001978:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <MX_QUADSPI_Init+0x50>)
 800197c:	2200      	movs	r2, #0
 800197e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_QUADSPI_Init+0x50>)
 8001982:	2200      	movs	r2, #0
 8001984:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <MX_QUADSPI_Init+0x50>)
 8001988:	2200      	movs	r2, #0
 800198a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_QUADSPI_Init+0x50>)
 800198e:	2200      	movs	r2, #0
 8001990:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_QUADSPI_Init+0x50>)
 8001994:	f001 ff14 	bl	80037c0 <HAL_QSPI_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800199e:	f7ff ffd6 	bl	800194e <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200001e4 	.word	0x200001e4
 80019ac:	52005000 	.word	0x52005000

080019b0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b0bc      	sub	sp, #240	; 0xf0
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c8:	f107 0318 	add.w	r3, r7, #24
 80019cc:	22c0      	movs	r2, #192	; 0xc0
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f00c f837 	bl	800da44 <memset>
  if(qspiHandle->Instance==QUADSPI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a4c      	ldr	r2, [pc, #304]	; (8001b0c <HAL_QSPI_MspInit+0x15c>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	f040 8091 	bne.w	8001b04 <HAL_QSPI_MspInit+0x154>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80019e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80019ee:	2301      	movs	r3, #1
 80019f0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 80019f2:	230c      	movs	r3, #12
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 80019f6:	2308      	movs	r3, #8
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80019fa:	2302      	movs	r3, #2
 80019fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80019fe:	2302      	movs	r3, #2
 8001a00:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001a02:	23c0      	movs	r3, #192	; 0xc0
 8001a04:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8001a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL2;
 8001a10:	2320      	movs	r3, #32
 8001a12:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a14:	f107 0318 	add.w	r3, r7, #24
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 fbf3 	bl	8005204 <HAL_RCCEx_PeriphCLKConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_QSPI_MspInit+0x78>
    {
      Error_Handler();
 8001a24:	f7ff ff93 	bl	800194e <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001a28:	4b39      	ldr	r3, [pc, #228]	; (8001b10 <HAL_QSPI_MspInit+0x160>)
 8001a2a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001a2e:	4a38      	ldr	r2, [pc, #224]	; (8001b10 <HAL_QSPI_MspInit+0x160>)
 8001a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a34:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001a38:	4b35      	ldr	r3, [pc, #212]	; (8001b10 <HAL_QSPI_MspInit+0x160>)
 8001a3a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a46:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <HAL_QSPI_MspInit+0x160>)
 8001a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4c:	4a30      	ldr	r2, [pc, #192]	; (8001b10 <HAL_QSPI_MspInit+0x160>)
 8001a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a56:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <HAL_QSPI_MspInit+0x160>)
 8001a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a64:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <HAL_QSPI_MspInit+0x160>)
 8001a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6a:	4a29      	ldr	r2, [pc, #164]	; (8001b10 <HAL_QSPI_MspInit+0x160>)
 8001a6c:	f043 0320 	orr.w	r3, r3, #32
 8001a70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a74:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <HAL_QSPI_MspInit+0x160>)
 8001a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7a:	f003 0320 	and.w	r3, r3, #32
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a82:	2340      	movs	r3, #64	; 0x40
 8001a84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a94:	2303      	movs	r3, #3
 8001a96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a9a:	230a      	movs	r3, #10
 8001a9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aa0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	481b      	ldr	r0, [pc, #108]	; (8001b14 <HAL_QSPI_MspInit+0x164>)
 8001aa8:	f000 fd38 	bl	800251c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
 8001aac:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001ab0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ac6:	2309      	movs	r3, #9
 8001ac8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001acc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4811      	ldr	r0, [pc, #68]	; (8001b18 <HAL_QSPI_MspInit+0x168>)
 8001ad4:	f000 fd22 	bl	800251c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001ad8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001adc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001af2:	230a      	movs	r3, #10
 8001af4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001af8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001afc:	4619      	mov	r1, r3
 8001afe:	4806      	ldr	r0, [pc, #24]	; (8001b18 <HAL_QSPI_MspInit+0x168>)
 8001b00:	f000 fd0c 	bl	800251c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001b04:	bf00      	nop
 8001b06:	37f0      	adds	r7, #240	; 0xf0
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	52005000 	.word	0x52005000
 8001b10:	58024400 	.word	0x58024400
 8001b14:	58021800 	.word	0x58021800
 8001b18:	58021400 	.word	0x58021400

08001b1c <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <HAL_QSPI_MspDeInit+0x3c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d110      	bne.n	8001b50 <HAL_QSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_QSPI_MspDeInit+0x40>)
 8001b30:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001b34:	4a09      	ldr	r2, [pc, #36]	; (8001b5c <HAL_QSPI_MspDeInit+0x40>)
 8001b36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b3a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_6);
 8001b3e:	2140      	movs	r1, #64	; 0x40
 8001b40:	4807      	ldr	r0, [pc, #28]	; (8001b60 <HAL_QSPI_MspDeInit+0x44>)
 8001b42:	f000 fe9b 	bl	800287c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 8001b46:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8001b4a:	4806      	ldr	r0, [pc, #24]	; (8001b64 <HAL_QSPI_MspDeInit+0x48>)
 8001b4c:	f000 fe96 	bl	800287c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	52005000 	.word	0x52005000
 8001b5c:	58024400 	.word	0x58024400
 8001b60:	58021800 	.word	0x58021800
 8001b64:	58021400 	.word	0x58021400

08001b68 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <MX_SDMMC1_SD_Init+0x34>)
 8001b6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ba0 <MX_SDMMC1_SD_Init+0x38>)
 8001b70:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <MX_SDMMC1_SD_Init+0x34>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <MX_SDMMC1_SD_Init+0x34>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <MX_SDMMC1_SD_Init+0x34>)
 8001b80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b84:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <MX_SDMMC1_SD_Init+0x34>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 25;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <MX_SDMMC1_SD_Init+0x34>)
 8001b8e:	2219      	movs	r2, #25
 8001b90:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	20000230 	.word	0x20000230
 8001ba0:	52007000 	.word	0x52007000

08001ba4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b0bc      	sub	sp, #240	; 0xf0
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bbc:	f107 0318 	add.w	r3, r7, #24
 8001bc0:	22c0      	movs	r2, #192	; 0xc0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f00b ff3d 	bl	800da44 <memset>
  if(sdHandle->Instance==SDMMC1)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a3c      	ldr	r2, [pc, #240]	; (8001cc0 <HAL_SD_MspInit+0x11c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d171      	bne.n	8001cb8 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001bd4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001be4:	f107 0318 	add.w	r3, r7, #24
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 fb0b 	bl	8005204 <HAL_RCCEx_PeriphCLKConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001bf4:	f7ff feab 	bl	800194e <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001bf8:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <HAL_SD_MspInit+0x120>)
 8001bfa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001bfe:	4a31      	ldr	r2, [pc, #196]	; (8001cc4 <HAL_SD_MspInit+0x120>)
 8001c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c04:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001c08:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <HAL_SD_MspInit+0x120>)
 8001c0a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c16:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <HAL_SD_MspInit+0x120>)
 8001c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1c:	4a29      	ldr	r2, [pc, #164]	; (8001cc4 <HAL_SD_MspInit+0x120>)
 8001c1e:	f043 0304 	orr.w	r3, r3, #4
 8001c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c26:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <HAL_SD_MspInit+0x120>)
 8001c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c34:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <HAL_SD_MspInit+0x120>)
 8001c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3a:	4a22      	ldr	r2, [pc, #136]	; (8001cc4 <HAL_SD_MspInit+0x120>)
 8001c3c:	f043 0308 	orr.w	r3, r3, #8
 8001c40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c44:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <HAL_SD_MspInit+0x120>)
 8001c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8001c52:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001c56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c66:	2303      	movs	r3, #3
 8001c68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001c6c:	230c      	movs	r3, #12
 8001c6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c72:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c76:	4619      	mov	r1, r3
 8001c78:	4813      	ldr	r0, [pc, #76]	; (8001cc8 <HAL_SD_MspInit+0x124>)
 8001c7a:	f000 fc4f 	bl	800251c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c7e:	2304      	movs	r3, #4
 8001c80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c90:	2303      	movs	r3, #3
 8001c92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001c96:	230c      	movs	r3, #12
 8001c98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	480a      	ldr	r0, [pc, #40]	; (8001ccc <HAL_SD_MspInit+0x128>)
 8001ca4:	f000 fc3a 	bl	800251c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 2, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2102      	movs	r1, #2
 8001cac:	2031      	movs	r0, #49	; 0x31
 8001cae:	f000 fb72 	bl	8002396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001cb2:	2031      	movs	r0, #49	; 0x31
 8001cb4:	f000 fb89 	bl	80023ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001cb8:	bf00      	nop
 8001cba:	37f0      	adds	r7, #240	; 0xf0
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	52007000 	.word	0x52007000
 8001cc4:	58024400 	.word	0x58024400
 8001cc8:	58020800 	.word	0x58020800
 8001ccc:	58020c00 	.word	0x58020c00

08001cd0 <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* sdHandle)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  if(sdHandle->Instance==SDMMC1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0d      	ldr	r2, [pc, #52]	; (8001d14 <HAL_SD_MspDeInit+0x44>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d113      	bne.n	8001d0a <HAL_SD_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

  /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <HAL_SD_MspDeInit+0x48>)
 8001ce4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001ce8:	4a0b      	ldr	r2, [pc, #44]	; (8001d18 <HAL_SD_MspDeInit+0x48>)
 8001cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cee:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8001cf2:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8001cf6:	4809      	ldr	r0, [pc, #36]	; (8001d1c <HAL_SD_MspDeInit+0x4c>)
 8001cf8:	f000 fdc0 	bl	800287c <HAL_GPIO_DeInit>
                          |GPIO_PIN_8);

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8001cfc:	2104      	movs	r1, #4
 8001cfe:	4808      	ldr	r0, [pc, #32]	; (8001d20 <HAL_SD_MspDeInit+0x50>)
 8001d00:	f000 fdbc 	bl	800287c <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 8001d04:	2031      	movs	r0, #49	; 0x31
 8001d06:	f000 fb6e 	bl	80023e6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	52007000 	.word	0x52007000
 8001d18:	58024400 	.word	0x58024400
 8001d1c:	58020800 	.word	0x58020800
 8001d20:	58020c00 	.word	0x58020c00

08001d24 <Reset_Handler>:
	#ifdef sram_layout
	asm ("ldr sp, =_estack");
	#endif

	void **pSource, **pDest;
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 8001d24:	4d0c      	ldr	r5, [pc, #48]	; (8001d58 <Reset_Handler+0x34>)
 8001d26:	4c0d      	ldr	r4, [pc, #52]	; (8001d5c <Reset_Handler+0x38>)
 8001d28:	e003      	b.n	8001d32 <Reset_Handler+0xe>
		*pDest = *pSource;
 8001d2a:	682b      	ldr	r3, [r5, #0]
 8001d2c:	6023      	str	r3, [r4, #0]
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 8001d2e:	3504      	adds	r5, #4
 8001d30:	3404      	adds	r4, #4
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <Reset_Handler+0x3c>)
 8001d34:	429c      	cmp	r4, r3
 8001d36:	d1f8      	bne.n	8001d2a <Reset_Handler+0x6>

	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 8001d38:	4c0a      	ldr	r4, [pc, #40]	; (8001d64 <Reset_Handler+0x40>)
 8001d3a:	e002      	b.n	8001d42 <Reset_Handler+0x1e>
		*pDest = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	6023      	str	r3, [r4, #0]
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 8001d40:	3404      	adds	r4, #4
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <Reset_Handler+0x44>)
 8001d44:	429c      	cmp	r4, r3
 8001d46:	d1f9      	bne.n	8001d3c <Reset_Handler+0x18>

	#ifndef BOOT_APP
	SystemInit();
 8001d48:	f000 f860 	bl	8001e0c <SystemInit>
	#endif
	__libc_init_array();
 8001d4c:	f00b fe82 	bl	800da54 <__libc_init_array>


	(void)main();
 8001d50:	f7fe fd26 	bl	80007a0 <main>
	for (;;) ;
 8001d54:	e7fe      	b.n	8001d54 <Reset_Handler+0x30>
 8001d56:	bf00      	nop
 8001d58:	0800df8c 	.word	0x0800df8c
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	20000014 	.word	0x20000014
 8001d64:	20000014 	.word	0x20000014
 8001d68:	2000094c 	.word	0x2000094c

08001d6c <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
 8001d6c:	e7fe      	b.n	8001d6c <Default_Handler>
	...

08001d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_MspInit+0x30>)
 8001d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d7c:	4a08      	ldr	r2, [pc, #32]	; (8001da0 <HAL_MspInit+0x30>)
 8001d7e:	f043 0302 	orr.w	r3, r3, #2
 8001d82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_MspInit+0x30>)
 8001d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	58024400 	.word	0x58024400

08001da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <NMI_Handler+0x4>

08001daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dae:	e7fe      	b.n	8001dae <HardFault_Handler+0x4>

08001db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <MemManage_Handler+0x4>

08001db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dba:	e7fe      	b.n	8001dba <BusFault_Handler+0x4>

08001dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <UsageFault_Handler+0x4>

08001dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df0:	f000 f96c 	bl	80020cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <SDMMC1_IRQHandler+0x10>)
 8001dfe:	f006 fb37 	bl	8008470 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000230 	.word	0x20000230

08001e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e10:	4b37      	ldr	r3, [pc, #220]	; (8001ef0 <SystemInit+0xe4>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e16:	4a36      	ldr	r2, [pc, #216]	; (8001ef0 <SystemInit+0xe4>)
 8001e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e20:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <SystemInit+0xe8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	2b06      	cmp	r3, #6
 8001e2a:	d807      	bhi.n	8001e3c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e2c:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <SystemInit+0xe8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f023 030f 	bic.w	r3, r3, #15
 8001e34:	4a2f      	ldr	r2, [pc, #188]	; (8001ef4 <SystemInit+0xe8>)
 8001e36:	f043 0307 	orr.w	r3, r3, #7
 8001e3a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ef8 <SystemInit+0xec>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a2d      	ldr	r2, [pc, #180]	; (8001ef8 <SystemInit+0xec>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e48:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <SystemInit+0xec>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e4e:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <SystemInit+0xec>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	4929      	ldr	r1, [pc, #164]	; (8001ef8 <SystemInit+0xec>)
 8001e54:	4b29      	ldr	r3, [pc, #164]	; (8001efc <SystemInit+0xf0>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e5a:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <SystemInit+0xe8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d007      	beq.n	8001e76 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e66:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <SystemInit+0xe8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 030f 	bic.w	r3, r3, #15
 8001e6e:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <SystemInit+0xe8>)
 8001e70:	f043 0307 	orr.w	r3, r3, #7
 8001e74:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001e76:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <SystemInit+0xec>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <SystemInit+0xec>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e82:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <SystemInit+0xec>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <SystemInit+0xec>)
 8001e8a:	4a1d      	ldr	r2, [pc, #116]	; (8001f00 <SystemInit+0xf4>)
 8001e8c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <SystemInit+0xec>)
 8001e90:	4a1c      	ldr	r2, [pc, #112]	; (8001f04 <SystemInit+0xf8>)
 8001e92:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e94:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <SystemInit+0xec>)
 8001e96:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <SystemInit+0xfc>)
 8001e98:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <SystemInit+0xec>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ea0:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <SystemInit+0xec>)
 8001ea2:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <SystemInit+0xfc>)
 8001ea4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <SystemInit+0xec>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <SystemInit+0xec>)
 8001eae:	4a16      	ldr	r2, [pc, #88]	; (8001f08 <SystemInit+0xfc>)
 8001eb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001eb2:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <SystemInit+0xec>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <SystemInit+0xec>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0e      	ldr	r2, [pc, #56]	; (8001ef8 <SystemInit+0xec>)
 8001ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <SystemInit+0xec>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001eca:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <SystemInit+0x100>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <SystemInit+0x104>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ed6:	d202      	bcs.n	8001ede <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <SystemInit+0x108>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <SystemInit+0x10c>)
 8001ee0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001ee4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001ee6:	bf00      	nop
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00
 8001ef4:	52002000 	.word	0x52002000
 8001ef8:	58024400 	.word	0x58024400
 8001efc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f00:	02020200 	.word	0x02020200
 8001f04:	01ff0000 	.word	0x01ff0000
 8001f08:	01010280 	.word	0x01010280
 8001f0c:	5c001000 	.word	0x5c001000
 8001f10:	ffff0000 	.word	0xffff0000
 8001f14:	51008108 	.word	0x51008108
 8001f18:	52004000 	.word	0x52004000

08001f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f22:	2003      	movs	r0, #3
 8001f24:	f000 fa2c 	bl	8002380 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f28:	f002 ffac 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_Init+0x68>)
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	0a1b      	lsrs	r3, r3, #8
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	4913      	ldr	r1, [pc, #76]	; (8001f88 <HAL_Init+0x6c>)
 8001f3a:	5ccb      	ldrb	r3, [r1, r3]
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
 8001f44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f46:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_Init+0x68>)
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	4a0e      	ldr	r2, [pc, #56]	; (8001f88 <HAL_Init+0x6c>)
 8001f50:	5cd3      	ldrb	r3, [r2, r3]
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5c:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <HAL_Init+0x70>)
 8001f5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f60:	4a0b      	ldr	r2, [pc, #44]	; (8001f90 <HAL_Init+0x74>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f66:	2000      	movs	r0, #0
 8001f68:	f000 f87a 	bl	8002060 <HAL_InitTick>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e002      	b.n	8001f7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f76:	f7ff fefb 	bl	8001d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	58024400 	.word	0x58024400
 8001f88:	0800db08 	.word	0x0800db08
 8001f8c:	20000008 	.word	0x20000008
 8001f90:	20000004 	.word	0x20000004

08001f94 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_AHB3_FORCE_RESET();
 8001f98:	4b26      	ldr	r3, [pc, #152]	; (8002034 <HAL_DeInit+0xa0>)
 8001f9a:	4a27      	ldr	r2, [pc, #156]	; (8002038 <HAL_DeInit+0xa4>)
 8001f9c:	67da      	str	r2, [r3, #124]	; 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001f9e:	4b25      	ldr	r3, [pc, #148]	; (8002034 <HAL_DeInit+0xa0>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_RCC_AHB1_FORCE_RESET();
 8001fa4:	4b23      	ldr	r3, [pc, #140]	; (8002034 <HAL_DeInit+0xa0>)
 8001fa6:	4a25      	ldr	r2, [pc, #148]	; (800203c <HAL_DeInit+0xa8>)
 8001fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001fac:	4b21      	ldr	r3, [pc, #132]	; (8002034 <HAL_DeInit+0xa0>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_RCC_AHB2_FORCE_RESET();
 8001fb4:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <HAL_DeInit+0xa0>)
 8001fb6:	f240 2271 	movw	r2, #625	; 0x271
 8001fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_DeInit+0xa0>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_RCC_AHB4_FORCE_RESET();
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <HAL_DeInit+0xa0>)
 8001fc8:	4a1d      	ldr	r2, [pc, #116]	; (8002040 <HAL_DeInit+0xac>)
 8001fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();
 8001fce:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_DeInit+0xa0>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_RCC_APB3_FORCE_RESET();
 8001fd6:	4b17      	ldr	r3, [pc, #92]	; (8002034 <HAL_DeInit+0xa0>)
 8001fd8:	2218      	movs	r2, #24
 8001fda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();
 8001fde:	4b15      	ldr	r3, [pc, #84]	; (8002034 <HAL_DeInit+0xa0>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  __HAL_RCC_APB1L_FORCE_RESET();
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <HAL_DeInit+0xa0>)
 8001fe8:	4a16      	ldr	r2, [pc, #88]	; (8002044 <HAL_DeInit+0xb0>)
 8001fea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_DeInit+0xa0>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  __HAL_RCC_APB1H_FORCE_RESET();
 8001ff6:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <HAL_DeInit+0xa0>)
 8001ff8:	f44f 729b 	mov.w	r2, #310	; 0x136
 8001ffc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <HAL_DeInit+0xa0>)
 8002002:	2200      	movs	r2, #0
 8002004:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

   __HAL_RCC_APB2_FORCE_RESET();
 8002008:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_DeInit+0xa0>)
 800200a:	4a0f      	ldr	r2, [pc, #60]	; (8002048 <HAL_DeInit+0xb4>)
 800200c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   __HAL_RCC_APB2_RELEASE_RESET();
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_DeInit+0xa0>)
 8002012:	2200      	movs	r2, #0
 8002014:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  __HAL_RCC_APB4_FORCE_RESET();
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_DeInit+0xa0>)
 800201a:	4a0c      	ldr	r2, [pc, #48]	; (800204c <HAL_DeInit+0xb8>)
 800201c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <HAL_DeInit+0xa0>)
 8002022:	2200      	movs	r2, #0
 8002024:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8002028:	f000 f812 	bl	8002050 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	58024400 	.word	0x58024400
 8002038:	00015031 	.word	0x00015031
 800203c:	0a00c023 	.word	0x0a00c023
 8002040:	032807ff 	.word	0x032807ff
 8002044:	e8ffc3ff 	.word	0xe8ffc3ff
 8002048:	31d73033 	.word	0x31d73033
 800204c:	0020deaa 	.word	0x0020deaa

08002050 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002068:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <HAL_InitTick+0x60>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e021      	b.n	80020b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002074:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <HAL_InitTick+0x64>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <HAL_InitTick+0x60>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002082:	fbb3 f3f1 	udiv	r3, r3, r1
 8002086:	fbb2 f3f3 	udiv	r3, r2, r3
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f9bd 	bl	800240a <HAL_SYSTICK_Config>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e00e      	b.n	80020b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b0f      	cmp	r3, #15
 800209e:	d80a      	bhi.n	80020b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a0:	2200      	movs	r2, #0
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020a8:	f000 f975 	bl	8002396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020ac:	4a06      	ldr	r2, [pc, #24]	; (80020c8 <HAL_InitTick+0x68>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e000      	b.n	80020b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000010 	.word	0x20000010
 80020c4:	20000004 	.word	0x20000004
 80020c8:	2000000c 	.word	0x2000000c

080020cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_IncTick+0x20>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_IncTick+0x24>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <HAL_IncTick+0x24>)
 80020de:	6013      	str	r3, [r2, #0]
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000010 	.word	0x20000010
 80020f0:	200002ac 	.word	0x200002ac

080020f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return uwTick;
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <HAL_GetTick+0x14>)
 80020fa:	681b      	ldr	r3, [r3, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	200002ac 	.word	0x200002ac

0800210c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002114:	f7ff ffee 	bl	80020f4 <HAL_GetTick>
 8002118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002124:	d005      	beq.n	8002132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_Delay+0x44>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4413      	add	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002132:	bf00      	nop
 8002134:	f7ff ffde 	bl	80020f4 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	429a      	cmp	r2, r3
 8002142:	d8f7      	bhi.n	8002134 <HAL_Delay+0x28>
  {
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000010 	.word	0x20000010

08002154 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <HAL_GetREVID+0x14>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0c1b      	lsrs	r3, r3, #16
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	5c001000 	.word	0x5c001000

0800216c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <__NVIC_SetPriorityGrouping+0x40>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002188:	4013      	ands	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <__NVIC_SetPriorityGrouping+0x44>)
 8002196:	4313      	orrs	r3, r2
 8002198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219a:	4a04      	ldr	r2, [pc, #16]	; (80021ac <__NVIC_SetPriorityGrouping+0x40>)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	60d3      	str	r3, [r2, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00
 80021b0:	05fa0000 	.word	0x05fa0000

080021b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <__NVIC_GetPriorityGrouping+0x18>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	0a1b      	lsrs	r3, r3, #8
 80021be:	f003 0307 	and.w	r3, r3, #7
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	db0b      	blt.n	80021fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	4907      	ldr	r1, [pc, #28]	; (8002208 <__NVIC_EnableIRQ+0x38>)
 80021ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	2001      	movs	r0, #1
 80021f2:	fa00 f202 	lsl.w	r2, r0, r2
 80021f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000e100 	.word	0xe000e100

0800220c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800221a:	2b00      	cmp	r3, #0
 800221c:	db12      	blt.n	8002244 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	f003 021f 	and.w	r2, r3, #31
 8002224:	490a      	ldr	r1, [pc, #40]	; (8002250 <__NVIC_DisableIRQ+0x44>)
 8002226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800222a:	095b      	lsrs	r3, r3, #5
 800222c:	2001      	movs	r0, #1
 800222e:	fa00 f202 	lsl.w	r2, r0, r2
 8002232:	3320      	adds	r3, #32
 8002234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002238:	f3bf 8f4f 	dsb	sy
}
 800223c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800223e:	f3bf 8f6f 	isb	sy
}
 8002242:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000e100 	.word	0xe000e100

08002254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	6039      	str	r1, [r7, #0]
 800225e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002260:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002264:	2b00      	cmp	r3, #0
 8002266:	db0a      	blt.n	800227e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	b2da      	uxtb	r2, r3
 800226c:	490c      	ldr	r1, [pc, #48]	; (80022a0 <__NVIC_SetPriority+0x4c>)
 800226e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002272:	0112      	lsls	r2, r2, #4
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	440b      	add	r3, r1
 8002278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800227c:	e00a      	b.n	8002294 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4908      	ldr	r1, [pc, #32]	; (80022a4 <__NVIC_SetPriority+0x50>)
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	3b04      	subs	r3, #4
 800228c:	0112      	lsls	r2, r2, #4
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	440b      	add	r3, r1
 8002292:	761a      	strb	r2, [r3, #24]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000e100 	.word	0xe000e100
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b089      	sub	sp, #36	; 0x24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f1c3 0307 	rsb	r3, r3, #7
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	bf28      	it	cs
 80022c6:	2304      	movcs	r3, #4
 80022c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2b06      	cmp	r3, #6
 80022d0:	d902      	bls.n	80022d8 <NVIC_EncodePriority+0x30>
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3b03      	subs	r3, #3
 80022d6:	e000      	b.n	80022da <NVIC_EncodePriority+0x32>
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43da      	mvns	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	401a      	ands	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	43d9      	mvns	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	4313      	orrs	r3, r2
         );
}
 8002302:	4618      	mov	r0, r3
 8002304:	3724      	adds	r7, #36	; 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002314:	f3bf 8f4f 	dsb	sy
}
 8002318:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <__NVIC_SystemReset+0x24>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002322:	4904      	ldr	r1, [pc, #16]	; (8002334 <__NVIC_SystemReset+0x24>)
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <__NVIC_SystemReset+0x28>)
 8002326:	4313      	orrs	r3, r2
 8002328:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800232a:	f3bf 8f4f 	dsb	sy
}
 800232e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002330:	bf00      	nop
 8002332:	e7fd      	b.n	8002330 <__NVIC_SystemReset+0x20>
 8002334:	e000ed00 	.word	0xe000ed00
 8002338:	05fa0004 	.word	0x05fa0004

0800233c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800234c:	d301      	bcc.n	8002352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800234e:	2301      	movs	r3, #1
 8002350:	e00f      	b.n	8002372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <SysTick_Config+0x40>)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235a:	210f      	movs	r1, #15
 800235c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002360:	f7ff ff78 	bl	8002254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <SysTick_Config+0x40>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236a:	4b04      	ldr	r3, [pc, #16]	; (800237c <SysTick_Config+0x40>)
 800236c:	2207      	movs	r2, #7
 800236e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	e000e010 	.word	0xe000e010

08002380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff feef 	bl	800216c <__NVIC_SetPriorityGrouping>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023a4:	f7ff ff06 	bl	80021b4 <__NVIC_GetPriorityGrouping>
 80023a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	6978      	ldr	r0, [r7, #20]
 80023b0:	f7ff ff7a 	bl	80022a8 <NVIC_EncodePriority>
 80023b4:	4602      	mov	r2, r0
 80023b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff49 	bl	8002254 <__NVIC_SetPriority>
}
 80023c2:	bf00      	nop
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fef9 	bl	80021d0 <__NVIC_EnableIRQ>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80023f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff09 	bl	800220c <__NVIC_DisableIRQ>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002406:	f7ff ff83 	bl	8002310 <__NVIC_SystemReset>

0800240a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ff92 	bl	800233c <SysTick_Config>
 8002418:	4603      	mov	r3, r0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002428:	f3bf 8f5f 	dmb	sy
}
 800242c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <HAL_MPU_Disable+0x28>)
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	4a06      	ldr	r2, [pc, #24]	; (800244c <HAL_MPU_Disable+0x28>)
 8002434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002438:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_MPU_Disable+0x2c>)
 800243c:	2200      	movs	r2, #0
 800243e:	605a      	str	r2, [r3, #4]
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000ed00 	.word	0xe000ed00
 8002450:	e000ed90 	.word	0xe000ed90

08002454 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800245c:	4a0b      	ldr	r2, [pc, #44]	; (800248c <HAL_MPU_Enable+0x38>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_MPU_Enable+0x3c>)
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	4a09      	ldr	r2, [pc, #36]	; (8002490 <HAL_MPU_Enable+0x3c>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002470:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002472:	f3bf 8f4f 	dsb	sy
}
 8002476:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002478:	f3bf 8f6f 	isb	sy
}
 800247c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000ed90 	.word	0xe000ed90
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	785a      	ldrb	r2, [r3, #1]
 80024a0:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <HAL_MPU_ConfigRegion+0x84>)
 80024a2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d029      	beq.n	8002500 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80024ac:	4a1a      	ldr	r2, [pc, #104]	; (8002518 <HAL_MPU_ConfigRegion+0x84>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	7b1b      	ldrb	r3, [r3, #12]
 80024b8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	7adb      	ldrb	r3, [r3, #11]
 80024be:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	7a9b      	ldrb	r3, [r3, #10]
 80024c6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80024c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	7b5b      	ldrb	r3, [r3, #13]
 80024ce:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80024d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	7b9b      	ldrb	r3, [r3, #14]
 80024d6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80024d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	7bdb      	ldrb	r3, [r3, #15]
 80024de:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80024e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7a5b      	ldrb	r3, [r3, #9]
 80024e6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80024e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	7a1b      	ldrb	r3, [r3, #8]
 80024ee:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80024f0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	7812      	ldrb	r2, [r2, #0]
 80024f6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024f8:	4a07      	ldr	r2, [pc, #28]	; (8002518 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80024fa:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024fc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80024fe:	e005      	b.n	800250c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <HAL_MPU_ConfigRegion+0x84>)
 8002502:	2200      	movs	r2, #0
 8002504:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002506:	4b04      	ldr	r3, [pc, #16]	; (8002518 <HAL_MPU_ConfigRegion+0x84>)
 8002508:	2200      	movs	r2, #0
 800250a:	611a      	str	r2, [r3, #16]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000ed90 	.word	0xe000ed90

0800251c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800252a:	4b89      	ldr	r3, [pc, #548]	; (8002750 <HAL_GPIO_Init+0x234>)
 800252c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800252e:	e194      	b.n	800285a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	2101      	movs	r1, #1
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa01 f303 	lsl.w	r3, r1, r3
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 8186 	beq.w	8002854 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b01      	cmp	r3, #1
 8002552:	d005      	beq.n	8002560 <HAL_GPIO_Init+0x44>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d130      	bne.n	80025c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002596:	2201      	movs	r2, #1
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	f003 0201 	and.w	r2, r3, #1
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	d017      	beq.n	80025fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	2203      	movs	r2, #3
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d123      	bne.n	8002652 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	08da      	lsrs	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3208      	adds	r2, #8
 8002612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	220f      	movs	r2, #15
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	08da      	lsrs	r2, r3, #3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3208      	adds	r2, #8
 800264c:	69b9      	ldr	r1, [r7, #24]
 800264e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	2203      	movs	r2, #3
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 0203 	and.w	r2, r3, #3
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 80e0 	beq.w	8002854 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002694:	4b2f      	ldr	r3, [pc, #188]	; (8002754 <HAL_GPIO_Init+0x238>)
 8002696:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800269a:	4a2e      	ldr	r2, [pc, #184]	; (8002754 <HAL_GPIO_Init+0x238>)
 800269c:	f043 0302 	orr.w	r3, r3, #2
 80026a0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80026a4:	4b2b      	ldr	r3, [pc, #172]	; (8002754 <HAL_GPIO_Init+0x238>)
 80026a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026b2:	4a29      	ldr	r2, [pc, #164]	; (8002758 <HAL_GPIO_Init+0x23c>)
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	3302      	adds	r3, #2
 80026ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	220f      	movs	r2, #15
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a20      	ldr	r2, [pc, #128]	; (800275c <HAL_GPIO_Init+0x240>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d052      	beq.n	8002784 <HAL_GPIO_Init+0x268>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a1f      	ldr	r2, [pc, #124]	; (8002760 <HAL_GPIO_Init+0x244>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d031      	beq.n	800274a <HAL_GPIO_Init+0x22e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a1e      	ldr	r2, [pc, #120]	; (8002764 <HAL_GPIO_Init+0x248>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d02b      	beq.n	8002746 <HAL_GPIO_Init+0x22a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <HAL_GPIO_Init+0x24c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d025      	beq.n	8002742 <HAL_GPIO_Init+0x226>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a1c      	ldr	r2, [pc, #112]	; (800276c <HAL_GPIO_Init+0x250>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d01f      	beq.n	800273e <HAL_GPIO_Init+0x222>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a1b      	ldr	r2, [pc, #108]	; (8002770 <HAL_GPIO_Init+0x254>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d019      	beq.n	800273a <HAL_GPIO_Init+0x21e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a1a      	ldr	r2, [pc, #104]	; (8002774 <HAL_GPIO_Init+0x258>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d013      	beq.n	8002736 <HAL_GPIO_Init+0x21a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a19      	ldr	r2, [pc, #100]	; (8002778 <HAL_GPIO_Init+0x25c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00d      	beq.n	8002732 <HAL_GPIO_Init+0x216>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a18      	ldr	r2, [pc, #96]	; (800277c <HAL_GPIO_Init+0x260>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d007      	beq.n	800272e <HAL_GPIO_Init+0x212>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a17      	ldr	r2, [pc, #92]	; (8002780 <HAL_GPIO_Init+0x264>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d101      	bne.n	800272a <HAL_GPIO_Init+0x20e>
 8002726:	2309      	movs	r3, #9
 8002728:	e02d      	b.n	8002786 <HAL_GPIO_Init+0x26a>
 800272a:	230a      	movs	r3, #10
 800272c:	e02b      	b.n	8002786 <HAL_GPIO_Init+0x26a>
 800272e:	2308      	movs	r3, #8
 8002730:	e029      	b.n	8002786 <HAL_GPIO_Init+0x26a>
 8002732:	2307      	movs	r3, #7
 8002734:	e027      	b.n	8002786 <HAL_GPIO_Init+0x26a>
 8002736:	2306      	movs	r3, #6
 8002738:	e025      	b.n	8002786 <HAL_GPIO_Init+0x26a>
 800273a:	2305      	movs	r3, #5
 800273c:	e023      	b.n	8002786 <HAL_GPIO_Init+0x26a>
 800273e:	2304      	movs	r3, #4
 8002740:	e021      	b.n	8002786 <HAL_GPIO_Init+0x26a>
 8002742:	2303      	movs	r3, #3
 8002744:	e01f      	b.n	8002786 <HAL_GPIO_Init+0x26a>
 8002746:	2302      	movs	r3, #2
 8002748:	e01d      	b.n	8002786 <HAL_GPIO_Init+0x26a>
 800274a:	2301      	movs	r3, #1
 800274c:	e01b      	b.n	8002786 <HAL_GPIO_Init+0x26a>
 800274e:	bf00      	nop
 8002750:	58000080 	.word	0x58000080
 8002754:	58024400 	.word	0x58024400
 8002758:	58000400 	.word	0x58000400
 800275c:	58020000 	.word	0x58020000
 8002760:	58020400 	.word	0x58020400
 8002764:	58020800 	.word	0x58020800
 8002768:	58020c00 	.word	0x58020c00
 800276c:	58021000 	.word	0x58021000
 8002770:	58021400 	.word	0x58021400
 8002774:	58021800 	.word	0x58021800
 8002778:	58021c00 	.word	0x58021c00
 800277c:	58022000 	.word	0x58022000
 8002780:	58022400 	.word	0x58022400
 8002784:	2300      	movs	r3, #0
 8002786:	69fa      	ldr	r2, [r7, #28]
 8002788:	f002 0203 	and.w	r2, r2, #3
 800278c:	0092      	lsls	r2, r2, #2
 800278e:	4093      	lsls	r3, r2
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002796:	4938      	ldr	r1, [pc, #224]	; (8002878 <HAL_GPIO_Init+0x35c>)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	089b      	lsrs	r3, r3, #2
 800279c:	3302      	adds	r3, #2
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80027ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80027f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	3301      	adds	r3, #1
 8002858:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	f47f ae63 	bne.w	8002530 <HAL_GPIO_Init+0x14>
  }
}
 800286a:	bf00      	nop
 800286c:	bf00      	nop
 800286e:	3724      	adds	r7, #36	; 0x24
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	58000400 	.word	0x58000400

0800287c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800288a:	4b75      	ldr	r3, [pc, #468]	; (8002a60 <HAL_GPIO_DeInit+0x1e4>)
 800288c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800288e:	e0d9      	b.n	8002a44 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8002890:	2201      	movs	r2, #1
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	4013      	ands	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80cc 	beq.w	8002a3e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80028a6:	4a6f      	ldr	r2, [pc, #444]	; (8002a64 <HAL_GPIO_DeInit+0x1e8>)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	089b      	lsrs	r3, r3, #2
 80028ac:	3302      	adds	r3, #2
 80028ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	220f      	movs	r2, #15
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	4013      	ands	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a67      	ldr	r2, [pc, #412]	; (8002a68 <HAL_GPIO_DeInit+0x1ec>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d037      	beq.n	8002940 <HAL_GPIO_DeInit+0xc4>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a66      	ldr	r2, [pc, #408]	; (8002a6c <HAL_GPIO_DeInit+0x1f0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d031      	beq.n	800293c <HAL_GPIO_DeInit+0xc0>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a65      	ldr	r2, [pc, #404]	; (8002a70 <HAL_GPIO_DeInit+0x1f4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d02b      	beq.n	8002938 <HAL_GPIO_DeInit+0xbc>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a64      	ldr	r2, [pc, #400]	; (8002a74 <HAL_GPIO_DeInit+0x1f8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d025      	beq.n	8002934 <HAL_GPIO_DeInit+0xb8>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a63      	ldr	r2, [pc, #396]	; (8002a78 <HAL_GPIO_DeInit+0x1fc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d01f      	beq.n	8002930 <HAL_GPIO_DeInit+0xb4>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a62      	ldr	r2, [pc, #392]	; (8002a7c <HAL_GPIO_DeInit+0x200>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d019      	beq.n	800292c <HAL_GPIO_DeInit+0xb0>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a61      	ldr	r2, [pc, #388]	; (8002a80 <HAL_GPIO_DeInit+0x204>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d013      	beq.n	8002928 <HAL_GPIO_DeInit+0xac>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a60      	ldr	r2, [pc, #384]	; (8002a84 <HAL_GPIO_DeInit+0x208>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00d      	beq.n	8002924 <HAL_GPIO_DeInit+0xa8>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a5f      	ldr	r2, [pc, #380]	; (8002a88 <HAL_GPIO_DeInit+0x20c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d007      	beq.n	8002920 <HAL_GPIO_DeInit+0xa4>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a5e      	ldr	r2, [pc, #376]	; (8002a8c <HAL_GPIO_DeInit+0x210>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d101      	bne.n	800291c <HAL_GPIO_DeInit+0xa0>
 8002918:	2309      	movs	r3, #9
 800291a:	e012      	b.n	8002942 <HAL_GPIO_DeInit+0xc6>
 800291c:	230a      	movs	r3, #10
 800291e:	e010      	b.n	8002942 <HAL_GPIO_DeInit+0xc6>
 8002920:	2308      	movs	r3, #8
 8002922:	e00e      	b.n	8002942 <HAL_GPIO_DeInit+0xc6>
 8002924:	2307      	movs	r3, #7
 8002926:	e00c      	b.n	8002942 <HAL_GPIO_DeInit+0xc6>
 8002928:	2306      	movs	r3, #6
 800292a:	e00a      	b.n	8002942 <HAL_GPIO_DeInit+0xc6>
 800292c:	2305      	movs	r3, #5
 800292e:	e008      	b.n	8002942 <HAL_GPIO_DeInit+0xc6>
 8002930:	2304      	movs	r3, #4
 8002932:	e006      	b.n	8002942 <HAL_GPIO_DeInit+0xc6>
 8002934:	2303      	movs	r3, #3
 8002936:	e004      	b.n	8002942 <HAL_GPIO_DeInit+0xc6>
 8002938:	2302      	movs	r3, #2
 800293a:	e002      	b.n	8002942 <HAL_GPIO_DeInit+0xc6>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_GPIO_DeInit+0xc6>
 8002940:	2300      	movs	r3, #0
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	f002 0203 	and.w	r2, r2, #3
 8002948:	0092      	lsls	r2, r2, #2
 800294a:	4093      	lsls	r3, r2
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	429a      	cmp	r2, r3
 8002950:	d136      	bne.n	80029c0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	43db      	mvns	r3, r3
 800295a:	401a      	ands	r2, r3
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	43db      	mvns	r3, r3
 8002968:	401a      	ands	r2, r3
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800296e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	43db      	mvns	r3, r3
 8002978:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800297c:	4013      	ands	r3, r2
 800297e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	43db      	mvns	r3, r3
 800298a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800298e:	4013      	ands	r3, r2
 8002990:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	220f      	movs	r2, #15
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80029a2:	4a30      	ldr	r2, [pc, #192]	; (8002a64 <HAL_GPIO_DeInit+0x1e8>)
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	089b      	lsrs	r3, r3, #2
 80029a8:	3302      	adds	r3, #2
 80029aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	43da      	mvns	r2, r3
 80029b2:	482c      	ldr	r0, [pc, #176]	; (8002a64 <HAL_GPIO_DeInit+0x1e8>)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	400a      	ands	r2, r1
 80029ba:	3302      	adds	r3, #2
 80029bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	2103      	movs	r1, #3
 80029ca:	fa01 f303 	lsl.w	r3, r1, r3
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	08da      	lsrs	r2, r3, #3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3208      	adds	r2, #8
 80029dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	220f      	movs	r2, #15
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	08d2      	lsrs	r2, r2, #3
 80029f4:	4019      	ands	r1, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3208      	adds	r2, #8
 80029fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	2103      	movs	r1, #3
 8002a08:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	401a      	ands	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	2101      	movs	r1, #1
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	401a      	ands	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	2103      	movs	r1, #3
 8002a32:	fa01 f303 	lsl.w	r3, r1, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	401a      	ands	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	3301      	adds	r3, #1
 8002a42:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f47f af1f 	bne.w	8002890 <HAL_GPIO_DeInit+0x14>
  }
}
 8002a52:	bf00      	nop
 8002a54:	bf00      	nop
 8002a56:	371c      	adds	r7, #28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	58000080 	.word	0x58000080
 8002a64:	58000400 	.word	0x58000400
 8002a68:	58020000 	.word	0x58020000
 8002a6c:	58020400 	.word	0x58020400
 8002a70:	58020800 	.word	0x58020800
 8002a74:	58020c00 	.word	0x58020c00
 8002a78:	58021000 	.word	0x58021000
 8002a7c:	58021400 	.word	0x58021400
 8002a80:	58021800 	.word	0x58021800
 8002a84:	58021c00 	.word	0x58021c00
 8002a88:	58022000 	.word	0x58022000
 8002a8c:	58022400 	.word	0x58022400

08002a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	887b      	ldrh	r3, [r7, #2]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
 8002aac:	e001      	b.n	8002ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]
 8002acc:	4613      	mov	r3, r2
 8002ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ad0:	787b      	ldrb	r3, [r7, #1]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ad6:	887a      	ldrh	r2, [r7, #2]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002adc:	e003      	b.n	8002ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ade:	887b      	ldrh	r3, [r7, #2]
 8002ae0:	041a      	lsls	r2, r3, #16
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	619a      	str	r2, [r3, #24]
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b085      	sub	sp, #20
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	460b      	mov	r3, r1
 8002afc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b04:	887a      	ldrh	r2, [r7, #2]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	041a      	lsls	r2, r3, #16
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	43d9      	mvns	r1, r3
 8002b10:	887b      	ldrh	r3, [r7, #2]
 8002b12:	400b      	ands	r3, r1
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	619a      	str	r2, [r3, #24]
}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e07f      	b.n	8002c3a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fd fd88 	bl	8000664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2224      	movs	r2, #36	; 0x24
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0201 	bic.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d107      	bne.n	8002ba2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	e006      	b.n	8002bb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002bae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d104      	bne.n	8002bc2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_I2C_Init+0x11c>)
 8002bce:	430b      	orrs	r3, r1
 8002bd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002be0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69d9      	ldr	r1, [r3, #28]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1a      	ldr	r2, [r3, #32]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	02008000 	.word	0x02008000

08002c48 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e021      	b.n	8002c9e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2224      	movs	r2, #36	; 0x24
 8002c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0201 	bic.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fd fd60 	bl	8000738 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af02      	add	r7, sp, #8
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	817b      	strh	r3, [r7, #10]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	f040 80da 	bne.w	8002e7e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_I2C_Master_Transmit+0x30>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e0d3      	b.n	8002e80 <HAL_I2C_Master_Transmit+0x1d8>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ce0:	f7ff fa08 	bl	80020f4 <HAL_GetTick>
 8002ce4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	2319      	movs	r3, #25
 8002cec:	2201      	movs	r2, #1
 8002cee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 fa00 	bl	80030f8 <I2C_WaitOnFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e0be      	b.n	8002e80 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2221      	movs	r2, #33	; 0x21
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2210      	movs	r2, #16
 8002d0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	893a      	ldrh	r2, [r7, #8]
 8002d22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2bff      	cmp	r3, #255	; 0xff
 8002d32:	d90e      	bls.n	8002d52 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	22ff      	movs	r2, #255	; 0xff
 8002d38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	8979      	ldrh	r1, [r7, #10]
 8002d42:	4b51      	ldr	r3, [pc, #324]	; (8002e88 <HAL_I2C_Master_Transmit+0x1e0>)
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 fc10 	bl	8003570 <I2C_TransferConfig>
 8002d50:	e06c      	b.n	8002e2c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	8979      	ldrh	r1, [r7, #10]
 8002d64:	4b48      	ldr	r3, [pc, #288]	; (8002e88 <HAL_I2C_Master_Transmit+0x1e0>)
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 fbff 	bl	8003570 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002d72:	e05b      	b.n	8002e2c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	6a39      	ldr	r1, [r7, #32]
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 fa0c 	bl	8003196 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e07b      	b.n	8002e80 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d034      	beq.n	8002e2c <HAL_I2C_Master_Transmit+0x184>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d130      	bne.n	8002e2c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2180      	movs	r1, #128	; 0x80
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f98f 	bl	80030f8 <I2C_WaitOnFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e04d      	b.n	8002e80 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2bff      	cmp	r3, #255	; 0xff
 8002dec:	d90e      	bls.n	8002e0c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	22ff      	movs	r2, #255	; 0xff
 8002df2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	8979      	ldrh	r1, [r7, #10]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 fbb3 	bl	8003570 <I2C_TransferConfig>
 8002e0a:	e00f      	b.n	8002e2c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	8979      	ldrh	r1, [r7, #10]
 8002e1e:	2300      	movs	r3, #0
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 fba2 	bl	8003570 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d19e      	bne.n	8002d74 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	6a39      	ldr	r1, [r7, #32]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f9f2 	bl	8003224 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e01a      	b.n	8002e80 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6859      	ldr	r1, [r3, #4]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <HAL_I2C_Master_Transmit+0x1e4>)
 8002e5e:	400b      	ands	r3, r1
 8002e60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e000      	b.n	8002e80 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002e7e:	2302      	movs	r3, #2
  }
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	80002000 	.word	0x80002000
 8002e8c:	fe00e800 	.word	0xfe00e800

08002e90 <HAL_I2C_Slave_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                        uint32_t Timeout)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	f040 80fc 	bne.w	80030a6 <HAL_I2C_Slave_Receive+0x216>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <HAL_I2C_Slave_Receive+0x2a>
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d105      	bne.n	8002ec6 <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0f0      	b.n	80030a8 <HAL_I2C_Slave_Receive+0x218>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_I2C_Slave_Receive+0x44>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e0e9      	b.n	80030a8 <HAL_I2C_Slave_Receive+0x218>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002edc:	f7ff f90a 	bl	80020f4 <HAL_GetTick>
 8002ee0:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2222      	movs	r2, #34	; 0x22
 8002ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2220      	movs	r2, #32
 8002eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	88fa      	ldrh	r2, [r7, #6]
 8002f02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize = hi2c->XferCount;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferISR   = NULL;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f22:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2108      	movs	r1, #8
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 f8e2 	bl	80030f8 <I2C_WaitOnFlagUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d009      	beq.n	8002f4e <HAL_I2C_Slave_Receive+0xbe>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f48:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e0ac      	b.n	80030a8 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2208      	movs	r2, #8
 8002f54:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f8c8 	bl	80030f8 <I2C_WaitOnFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d054      	beq.n	8003018 <HAL_I2C_Slave_Receive+0x188>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f7c:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e092      	b.n	80030a8 <HAL_I2C_Slave_Receive+0x218>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	6839      	ldr	r1, [r7, #0]
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f990 	bl	80032ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d029      	beq.n	8002fe6 <HAL_I2C_Slave_Receive+0x156>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fa0:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d118      	bne.n	8002fe2 <HAL_I2C_Slave_Receive+0x152>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
          hi2c->XferSize--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	851a      	strh	r2, [r3, #40]	; 0x28
        }

        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e060      	b.n	80030a8 <HAL_I2C_Slave_Receive+0x218>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1af      	bne.n	8002f82 <HAL_I2C_Slave_Receive+0xf2>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	6839      	ldr	r1, [r7, #0]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f8fc 	bl	8003224 <I2C_WaitOnSTOPFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003040:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e030      	b.n	80030a8 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2220      	movs	r2, #32
 800304c:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2201      	movs	r2, #1
 8003056:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f84c 	bl	80030f8 <I2C_WaitOnFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <HAL_I2C_Slave_Receive+0x1ea>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003074:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e016      	b.n	80030a8 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003088:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e000      	b.n	80030a8 <HAL_I2C_Slave_Receive+0x218>
  }
  else
  {
    return HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
  }
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d103      	bne.n	80030ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2200      	movs	r2, #0
 80030cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d007      	beq.n	80030ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	619a      	str	r2, [r3, #24]
  }
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	4613      	mov	r3, r2
 8003106:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003108:	e031      	b.n	800316e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003110:	d02d      	beq.n	800316e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003112:	f7fe ffef 	bl	80020f4 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d302      	bcc.n	8003128 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d122      	bne.n	800316e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699a      	ldr	r2, [r3, #24]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	4013      	ands	r3, r2
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	429a      	cmp	r2, r3
 8003136:	bf0c      	ite	eq
 8003138:	2301      	moveq	r3, #1
 800313a:	2300      	movne	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	461a      	mov	r2, r3
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	429a      	cmp	r2, r3
 8003144:	d113      	bne.n	800316e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	f043 0220 	orr.w	r2, r3, #32
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e00f      	b.n	800318e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	699a      	ldr	r2, [r3, #24]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	4013      	ands	r3, r2
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	429a      	cmp	r2, r3
 800317c:	bf0c      	ite	eq
 800317e:	2301      	moveq	r3, #1
 8003180:	2300      	movne	r3, #0
 8003182:	b2db      	uxtb	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	429a      	cmp	r2, r3
 800318a:	d0be      	beq.n	800310a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031a2:	e033      	b.n	800320c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	68b9      	ldr	r1, [r7, #8]
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 f901 	bl	80033b0 <I2C_IsErrorOccurred>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e031      	b.n	800321c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031be:	d025      	beq.n	800320c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c0:	f7fe ff98 	bl	80020f4 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d302      	bcc.n	80031d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d11a      	bne.n	800320c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d013      	beq.n	800320c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e8:	f043 0220 	orr.w	r2, r3, #32
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e007      	b.n	800321c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b02      	cmp	r3, #2
 8003218:	d1c4      	bne.n	80031a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003230:	e02f      	b.n	8003292 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	68b9      	ldr	r1, [r7, #8]
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f8ba 	bl	80033b0 <I2C_IsErrorOccurred>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e02d      	b.n	80032a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003246:	f7fe ff55 	bl	80020f4 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	429a      	cmp	r2, r3
 8003254:	d302      	bcc.n	800325c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d11a      	bne.n	8003292 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	f003 0320 	and.w	r3, r3, #32
 8003266:	2b20      	cmp	r3, #32
 8003268:	d013      	beq.n	8003292 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	f043 0220 	orr.w	r2, r3, #32
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e007      	b.n	80032a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b20      	cmp	r3, #32
 800329e:	d1c8      	bne.n	8003232 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032b8:	e06b      	b.n	8003392 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f876 	bl	80033b0 <I2C_IsErrorOccurred>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e069      	b.n	80033a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d138      	bne.n	800334e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d105      	bne.n	80032f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e055      	b.n	80033a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b10      	cmp	r3, #16
 8003302:	d107      	bne.n	8003314 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2210      	movs	r2, #16
 800330a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2204      	movs	r2, #4
 8003310:	645a      	str	r2, [r3, #68]	; 0x44
 8003312:	e002      	b.n	800331a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2220      	movs	r2, #32
 8003320:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6859      	ldr	r1, [r3, #4]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4b1f      	ldr	r3, [pc, #124]	; (80033ac <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800332e:	400b      	ands	r3, r1
 8003330:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e029      	b.n	80033a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334e:	f7fe fed1 	bl	80020f4 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	429a      	cmp	r2, r3
 800335c:	d302      	bcc.n	8003364 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d116      	bne.n	8003392 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b04      	cmp	r3, #4
 8003370:	d00f      	beq.n	8003392 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	f043 0220 	orr.w	r2, r3, #32
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e007      	b.n	80033a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b04      	cmp	r3, #4
 800339e:	d18c      	bne.n	80032ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	fe00e800 	.word	0xfe00e800

080033b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08a      	sub	sp, #40	; 0x28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d068      	beq.n	80034ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2210      	movs	r2, #16
 80033e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033e4:	e049      	b.n	800347a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ec:	d045      	beq.n	800347a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033ee:	f7fe fe81 	bl	80020f4 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d302      	bcc.n	8003404 <I2C_IsErrorOccurred+0x54>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d13a      	bne.n	800347a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003416:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003426:	d121      	bne.n	800346c <I2C_IsErrorOccurred+0xbc>
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800342e:	d01d      	beq.n	800346c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003430:	7cfb      	ldrb	r3, [r7, #19]
 8003432:	2b20      	cmp	r3, #32
 8003434:	d01a      	beq.n	800346c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003444:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003446:	f7fe fe55 	bl	80020f4 <HAL_GetTick>
 800344a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800344c:	e00e      	b.n	800346c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800344e:	f7fe fe51 	bl	80020f4 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b19      	cmp	r3, #25
 800345a:	d907      	bls.n	800346c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	f043 0320 	orr.w	r3, r3, #32
 8003462:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800346a:	e006      	b.n	800347a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b20      	cmp	r3, #32
 8003478:	d1e9      	bne.n	800344e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	2b20      	cmp	r3, #32
 8003486:	d003      	beq.n	8003490 <I2C_IsErrorOccurred+0xe0>
 8003488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0aa      	beq.n	80033e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003494:	2b00      	cmp	r3, #0
 8003496:	d103      	bne.n	80034a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2220      	movs	r2, #32
 800349e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	f043 0304 	orr.w	r3, r3, #4
 80034a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00b      	beq.n	80034d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00b      	beq.n	80034fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	f043 0308 	orr.w	r3, r3, #8
 80034e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00b      	beq.n	800351c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	f043 0302 	orr.w	r3, r3, #2
 800350a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003514:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800351c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003520:	2b00      	cmp	r3, #0
 8003522:	d01c      	beq.n	800355e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff fdc3 	bl	80030b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6859      	ldr	r1, [r3, #4]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4b0d      	ldr	r3, [pc, #52]	; (800356c <I2C_IsErrorOccurred+0x1bc>)
 8003536:	400b      	ands	r3, r1
 8003538:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	431a      	orrs	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800355e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003562:	4618      	mov	r0, r3
 8003564:	3728      	adds	r7, #40	; 0x28
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	fe00e800 	.word	0xfe00e800

08003570 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	607b      	str	r3, [r7, #4]
 800357a:	460b      	mov	r3, r1
 800357c:	817b      	strh	r3, [r7, #10]
 800357e:	4613      	mov	r3, r2
 8003580:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003582:	897b      	ldrh	r3, [r7, #10]
 8003584:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003588:	7a7b      	ldrb	r3, [r7, #9]
 800358a:	041b      	lsls	r3, r3, #16
 800358c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003590:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	4313      	orrs	r3, r2
 800359a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800359e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	0d5b      	lsrs	r3, r3, #21
 80035aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80035ae:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <I2C_TransferConfig+0x60>)
 80035b0:	430b      	orrs	r3, r1
 80035b2:	43db      	mvns	r3, r3
 80035b4:	ea02 0103 	and.w	r1, r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035c2:	bf00      	nop
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	03ff63ff 	.word	0x03ff63ff

080035d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d138      	bne.n	800365c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035f4:	2302      	movs	r3, #2
 80035f6:	e032      	b.n	800365e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2224      	movs	r2, #36	; 0x24
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0201 	bic.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003626:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6819      	ldr	r1, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	e000      	b.n	800365e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800365c:	2302      	movs	r3, #2
  }
}
 800365e:	4618      	mov	r0, r3
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800366a:	b480      	push	{r7}
 800366c:	b085      	sub	sp, #20
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b20      	cmp	r3, #32
 800367e:	d139      	bne.n	80036f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800368a:	2302      	movs	r3, #2
 800368c:	e033      	b.n	80036f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2224      	movs	r2, #36	; 0x24
 800369a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0201 	bic.w	r2, r2, #1
 80036ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	021b      	lsls	r3, r3, #8
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e000      	b.n	80036f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036f4:	2302      	movs	r3, #2
  }
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
	...

08003704 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800370c:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800370e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003712:	4a0c      	ldr	r2, [pc, #48]	; (8003744 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8003714:	f043 0302 	orr.w	r3, r3, #2
 8003718:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800371c:	4b09      	ldr	r3, [pc, #36]	; (8003744 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800371e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800372a:	4b07      	ldr	r3, [pc, #28]	; (8003748 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	4906      	ldr	r1, [pc, #24]	; (8003748 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4313      	orrs	r3, r2
 8003734:	604b      	str	r3, [r1, #4]
}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	58024400 	.word	0x58024400
 8003748:	58000400 	.word	0x58000400

0800374c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003754:	4b19      	ldr	r3, [pc, #100]	; (80037bc <HAL_PWREx_ConfigSupply+0x70>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b04      	cmp	r3, #4
 800375e:	d00a      	beq.n	8003776 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003760:	4b16      	ldr	r3, [pc, #88]	; (80037bc <HAL_PWREx_ConfigSupply+0x70>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	429a      	cmp	r2, r3
 800376c:	d001      	beq.n	8003772 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e01f      	b.n	80037b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	e01d      	b.n	80037b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003776:	4b11      	ldr	r3, [pc, #68]	; (80037bc <HAL_PWREx_ConfigSupply+0x70>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f023 0207 	bic.w	r2, r3, #7
 800377e:	490f      	ldr	r1, [pc, #60]	; (80037bc <HAL_PWREx_ConfigSupply+0x70>)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4313      	orrs	r3, r2
 8003784:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003786:	f7fe fcb5 	bl	80020f4 <HAL_GetTick>
 800378a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800378c:	e009      	b.n	80037a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800378e:	f7fe fcb1 	bl	80020f4 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800379c:	d901      	bls.n	80037a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e007      	b.n	80037b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037a2:	4b06      	ldr	r3, [pc, #24]	; (80037bc <HAL_PWREx_ConfigSupply+0x70>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ae:	d1ee      	bne.n	800378e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	58024800 	.word	0x58024800

080037c0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80037c8:	f7fe fc94 	bl	80020f4 <HAL_GetTick>
 80037cc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e05f      	b.n	8003898 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d107      	bne.n	80037f4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7fe f8e3 	bl	80019b0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80037ea:	f241 3188 	movw	r1, #5000	; 0x1388
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fa43 	bl	8003c7a <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	3b01      	subs	r3, #1
 8003804:	021a      	lsls	r2, r3, #8
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	2120      	movs	r1, #32
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fa3b 	bl	8003c96 <QSPI_WaitFlagStateUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003824:	7afb      	ldrb	r3, [r7, #11]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d135      	bne.n	8003896 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <HAL_QSPI_Init+0xe0>)
 8003832:	4013      	ands	r3, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6852      	ldr	r2, [r2, #4]
 8003838:	0611      	lsls	r1, r2, #24
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68d2      	ldr	r2, [r2, #12]
 800383e:	4311      	orrs	r1, r2
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	69d2      	ldr	r2, [r2, #28]
 8003844:	4311      	orrs	r1, r2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6a12      	ldr	r2, [r2, #32]
 800384a:	4311      	orrs	r1, r2
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	430b      	orrs	r3, r1
 8003852:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <HAL_QSPI_Init+0xe4>)
 800385c:	4013      	ands	r3, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6912      	ldr	r2, [r2, #16]
 8003862:	0411      	lsls	r1, r2, #16
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6952      	ldr	r2, [r2, #20]
 8003868:	4311      	orrs	r1, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6992      	ldr	r2, [r2, #24]
 800386e:	4311      	orrs	r1, r2
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	430b      	orrs	r3, r1
 8003876:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0201 	orr.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003896:	7afb      	ldrb	r3, [r7, #11]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	00ffff2f 	.word	0x00ffff2f
 80038a4:	ffe0f8fe 	.word	0xffe0f8fe

080038a8 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e012      	b.n	80038e0 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0201 	bic.w	r2, r2, #1
 80038c8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fe f926 	bl	8001b1c <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80038f4:	f7fe fbfe 	bl	80020f4 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_QSPI_Command+0x22>
 8003906:	2302      	movs	r3, #2
 8003908:	e048      	b.n	800399c <HAL_QSPI_Command+0xb4>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b01      	cmp	r3, #1
 800391c:	d137      	bne.n	800398e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2200      	movs	r2, #0
 8003934:	2120      	movs	r1, #32
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f9ad 	bl	8003c96 <QSPI_WaitFlagStateUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003940:	7dfb      	ldrb	r3, [r7, #23]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d125      	bne.n	8003992 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003946:	2200      	movs	r2, #0
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f9da 	bl	8003d04 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	2b00      	cmp	r3, #0
 8003956:	d115      	bne.n	8003984 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	2201      	movs	r2, #1
 8003960:	2102      	movs	r1, #2
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f997 	bl	8003c96 <QSPI_WaitFlagStateUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800396c:	7dfb      	ldrb	r3, [r7, #23]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10f      	bne.n	8003992 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2202      	movs	r2, #2
 8003978:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003982:	e006      	b.n	8003992 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800398c:	e001      	b.n	8003992 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800398e:	2302      	movs	r3, #2
 8003990:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800399a:	7dfb      	ldrb	r3, [r7, #23]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08a      	sub	sp, #40	; 0x28
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80039b4:	f7fe fb9e 	bl	80020f4 <HAL_GetTick>
 80039b8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3320      	adds	r3, #32
 80039c0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_QSPI_Transmit+0x2e>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e076      	b.n	8003ac0 <HAL_QSPI_Transmit+0x11c>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d165      	bne.n	8003ab2 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d056      	beq.n	8003aa0 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2212      	movs	r2, #18
 80039f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695a      	ldr	r2, [r3, #20]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003a26:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8003a28:	e01b      	b.n	8003a62 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2201      	movs	r2, #1
 8003a32:	2104      	movs	r1, #4
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 f92e 	bl	8003c96 <QSPI_WaitFlagStateUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003a3e:	7ffb      	ldrb	r3, [r7, #31]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d113      	bne.n	8003a6c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	781a      	ldrb	r2, [r3, #0]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	1e5a      	subs	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1df      	bne.n	8003a2a <HAL_QSPI_Transmit+0x86>
 8003a6a:	e000      	b.n	8003a6e <HAL_QSPI_Transmit+0xca>
          break;
 8003a6c:	bf00      	nop
      }

      if (status == HAL_OK)
 8003a6e:	7ffb      	ldrb	r3, [r7, #31]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d110      	bne.n	8003a96 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f909 	bl	8003c96 <QSPI_WaitFlagStateUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003a88:	7ffb      	ldrb	r3, [r7, #31]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d103      	bne.n	8003a96 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2202      	movs	r2, #2
 8003a94:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a9e:	e00a      	b.n	8003ab6 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa4:	f043 0208 	orr.w	r2, r3, #8
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	77fb      	strb	r3, [r7, #31]
 8003ab0:	e001      	b.n	8003ab6 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8003abe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3720      	adds	r7, #32
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003ad6:	f7fe fb0d 	bl	80020f4 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_QSPI_AutoPolling+0x24>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e060      	b.n	8003bae <HAL_QSPI_AutoPolling+0xe6>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d14f      	bne.n	8003ba0 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2242      	movs	r2, #66	; 0x42
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	2200      	movs	r2, #0
 8003b16:	2120      	movs	r1, #32
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f8bc 	bl	8003c96 <QSPI_WaitFlagStateUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003b22:	7dfb      	ldrb	r3, [r7, #23]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d13d      	bne.n	8003ba4 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6852      	ldr	r2, [r2, #4]
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6892      	ldr	r2, [r2, #8]
 8003b44:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003b5e:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003b68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f8c8 	bl	8003d04 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	2108      	movs	r1, #8
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 f889 	bl	8003c96 <QSPI_WaitFlagStateUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003b88:	7dfb      	ldrb	r3, [r7, #23]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10a      	bne.n	8003ba4 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2208      	movs	r2, #8
 8003b94:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b9e:	e001      	b.n	8003ba4 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b088      	sub	sp, #32
 8003bba:	af02      	add	r7, sp, #8
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003bc2:	f7fe fa97 	bl	80020f4 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_QSPI_MemoryMapped+0x22>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e04c      	b.n	8003c72 <HAL_QSPI_MemoryMapped+0xbc>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d13b      	bne.n	8003c64 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2282      	movs	r2, #130	; 0x82
 8003bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2200      	movs	r2, #0
 8003c04:	2120      	movs	r1, #32
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f845 	bl	8003c96 <QSPI_WaitFlagStateUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d128      	bne.n	8003c68 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f023 0108 	bic.w	r1, r3, #8
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d110      	bne.n	8003c56 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6812      	ldr	r2, [r2, #0]
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2210      	movs	r2, #16
 8003c44:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003c54:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8003c56:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003c5a:	68b9      	ldr	r1, [r7, #8]
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 f851 	bl	8003d04 <QSPI_Config>
 8003c62:	e001      	b.n	8003c68 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003c64:	2302      	movs	r3, #2
 8003c66:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b084      	sub	sp, #16
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	603b      	str	r3, [r7, #0]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003ca6:	e01a      	b.n	8003cde <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cae:	d016      	beq.n	8003cde <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb0:	f7fe fa20 	bl	80020f4 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d302      	bcc.n	8003cc6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10b      	bne.n	8003cde <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2204      	movs	r2, #4
 8003cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	f043 0201 	orr.w	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e00e      	b.n	8003cfc <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bf14      	ite	ne
 8003cec:	2301      	movne	r3, #1
 8003cee:	2300      	moveq	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	79fb      	ldrb	r3, [r7, #7]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d1d6      	bne.n	8003ca8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d009      	beq.n	8003d2c <QSPI_Config+0x28>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003d1e:	d005      	beq.n	8003d2c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3a01      	subs	r2, #1
 8003d2a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80b9 	beq.w	8003ea8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d05f      	beq.n	8003dfe <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	6892      	ldr	r2, [r2, #8]
 8003d46:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d031      	beq.n	8003db4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	431a      	orrs	r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	049b      	lsls	r3, r3, #18
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	431a      	orrs	r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	ea42 0103 	orr.w	r1, r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003da4:	f000 812e 	beq.w	8004004 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	6852      	ldr	r2, [r2, #4]
 8003db0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8003db2:	e127      	b.n	8004004 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	049b      	lsls	r3, r3, #18
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	ea42 0103 	orr.w	r1, r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	615a      	str	r2, [r3, #20]
}
 8003dfc:	e102      	b.n	8004004 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d02e      	beq.n	8003e64 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e14:	431a      	orrs	r2, r3
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	049b      	lsls	r3, r3, #18
 8003e22:	431a      	orrs	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	431a      	orrs	r2, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	ea42 0103 	orr.w	r1, r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003e54:	f000 80d6 	beq.w	8004004 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	6852      	ldr	r2, [r2, #4]
 8003e60:	619a      	str	r2, [r3, #24]
}
 8003e62:	e0cf      	b.n	8004004 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e72:	431a      	orrs	r2, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	049b      	lsls	r3, r3, #18
 8003e80:	431a      	orrs	r2, r3
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	431a      	orrs	r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	ea42 0103 	orr.w	r1, r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	615a      	str	r2, [r3, #20]
}
 8003ea6:	e0ad      	b.n	8004004 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d058      	beq.n	8003f62 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	6892      	ldr	r2, [r2, #8]
 8003eb8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d02d      	beq.n	8003f1e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	049b      	lsls	r3, r3, #18
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	431a      	orrs	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	ea42 0103 	orr.w	r1, r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003f10:	d078      	beq.n	8004004 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	6852      	ldr	r2, [r2, #4]
 8003f1a:	619a      	str	r2, [r3, #24]
}
 8003f1c:	e072      	b.n	8004004 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	431a      	orrs	r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	431a      	orrs	r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	049b      	lsls	r3, r3, #18
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	431a      	orrs	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	ea42 0103 	orr.w	r1, r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	615a      	str	r2, [r3, #20]
}
 8003f60:	e050      	b.n	8004004 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d02a      	beq.n	8003fc0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	431a      	orrs	r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	049b      	lsls	r3, r3, #18
 8003f86:	431a      	orrs	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	ea42 0103 	orr.w	r1, r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003fb2:	d027      	beq.n	8004004 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	6852      	ldr	r2, [r2, #4]
 8003fbc:	619a      	str	r2, [r3, #24]
}
 8003fbe:	e021      	b.n	8004004 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d01d      	beq.n	8004004 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	049b      	lsls	r3, r3, #18
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	431a      	orrs	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	ea42 0103 	orr.w	r1, r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	430a      	orrs	r2, r1
 8004002:	615a      	str	r2, [r3, #20]
}
 8004004:	bf00      	nop
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 8004016:	4b89      	ldr	r3, [pc, #548]	; (800423c <HAL_RCC_DeInit+0x22c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	2b06      	cmp	r3, #6
 8004020:	d80f      	bhi.n	8004042 <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8004022:	4b86      	ldr	r3, [pc, #536]	; (800423c <HAL_RCC_DeInit+0x22c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 030f 	bic.w	r3, r3, #15
 800402a:	4a84      	ldr	r2, [pc, #528]	; (800423c <HAL_RCC_DeInit+0x22c>)
 800402c:	f043 0307 	orr.w	r3, r3, #7
 8004030:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8004032:	4b82      	ldr	r3, [pc, #520]	; (800423c <HAL_RCC_DeInit+0x22c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	2b07      	cmp	r3, #7
 800403c:	d001      	beq.n	8004042 <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e0f7      	b.n	8004232 <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004042:	f7fe f857 	bl	80020f4 <HAL_GetTick>
 8004046:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004048:	4b7d      	ldr	r3, [pc, #500]	; (8004240 <HAL_RCC_DeInit+0x230>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a7c      	ldr	r2, [pc, #496]	; (8004240 <HAL_RCC_DeInit+0x230>)
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004054:	e008      	b.n	8004068 <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004056:	f7fe f84d 	bl	80020f4 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e0e4      	b.n	8004232 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004068:	4b75      	ldr	r3, [pc, #468]	; (8004240 <HAL_RCC_DeInit+0x230>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 8004074:	4b72      	ldr	r3, [pc, #456]	; (8004240 <HAL_RCC_DeInit+0x230>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	4a71      	ldr	r2, [pc, #452]	; (8004240 <HAL_RCC_DeInit+0x230>)
 800407a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800407e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8004080:	4b6f      	ldr	r3, [pc, #444]	; (8004240 <HAL_RCC_DeInit+0x230>)
 8004082:	2200      	movs	r2, #0
 8004084:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 8004086:	4b6f      	ldr	r3, [pc, #444]	; (8004244 <HAL_RCC_DeInit+0x234>)
 8004088:	4a6f      	ldr	r2, [pc, #444]	; (8004248 <HAL_RCC_DeInit+0x238>)
 800408a:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
 800408c:	4b6f      	ldr	r3, [pc, #444]	; (800424c <HAL_RCC_DeInit+0x23c>)
 800408e:	4a6e      	ldr	r2, [pc, #440]	; (8004248 <HAL_RCC_DeInit+0x238>)
 8004090:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004092:	4b6f      	ldr	r3, [pc, #444]	; (8004250 <HAL_RCC_DeInit+0x240>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f7fd ffe2 	bl	8002060 <HAL_InitTick>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e0c5      	b.n	8004232 <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80040a6:	f7fe f825 	bl	80020f4 <HAL_GetTick>
 80040aa:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80040ac:	e00a      	b.n	80040c4 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ae:	f7fe f821 	bl	80020f4 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040bc:	4293      	cmp	r3, r2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e0b6      	b.n	8004232 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80040c4:	4b5e      	ldr	r3, [pc, #376]	; (8004240 <HAL_RCC_DeInit+0x230>)
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1ee      	bne.n	80040ae <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80040d0:	f7fe f810 	bl	80020f4 <HAL_GetTick>
 80040d4:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON | RCC_CR_HSIDIV | RCC_CR_HSIDIVF | RCC_CR_CSION | RCC_CR_CSIKERON  \
 80040d6:	4b5a      	ldr	r3, [pc, #360]	; (8004240 <HAL_RCC_DeInit+0x230>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4959      	ldr	r1, [pc, #356]	; (8004240 <HAL_RCC_DeInit+0x230>)
 80040dc:	4b5d      	ldr	r3, [pc, #372]	; (8004254 <HAL_RCC_DeInit+0x244>)
 80040de:	4013      	ands	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]
            | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e4:	f7fe f806 	bl	80020f4 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b64      	cmp	r3, #100	; 0x64
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e09d      	b.n	8004232 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040f6:	4b52      	ldr	r3, [pc, #328]	; (8004240 <HAL_RCC_DeInit+0x230>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f0      	bne.n	80040e4 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004102:	f7fd fff7 	bl	80020f4 <HAL_GetTick>
 8004106:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8004108:	4b4d      	ldr	r3, [pc, #308]	; (8004240 <HAL_RCC_DeInit+0x230>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a4c      	ldr	r2, [pc, #304]	; (8004240 <HAL_RCC_DeInit+0x230>)
 800410e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004112:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004114:	e008      	b.n	8004128 <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004116:	f7fd ffed 	bl	80020f4 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e084      	b.n	8004232 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004128:	4b45      	ldr	r3, [pc, #276]	; (8004240 <HAL_RCC_DeInit+0x230>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f0      	bne.n	8004116 <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004134:	f7fd ffde 	bl	80020f4 <HAL_GetTick>
 8004138:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 800413a:	4b41      	ldr	r3, [pc, #260]	; (8004240 <HAL_RCC_DeInit+0x230>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a40      	ldr	r2, [pc, #256]	; (8004240 <HAL_RCC_DeInit+0x230>)
 8004140:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004144:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8004146:	e008      	b.n	800415a <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004148:	f7fd ffd4 	bl	80020f4 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e06b      	b.n	8004232 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 800415a:	4b39      	ldr	r3, [pc, #228]	; (8004240 <HAL_RCC_DeInit+0x230>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f0      	bne.n	8004148 <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004166:	f7fd ffc5 	bl	80020f4 <HAL_GetTick>
 800416a:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 800416c:	4b34      	ldr	r3, [pc, #208]	; (8004240 <HAL_RCC_DeInit+0x230>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a33      	ldr	r2, [pc, #204]	; (8004240 <HAL_RCC_DeInit+0x230>)
 8004172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004176:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8004178:	e008      	b.n	800418c <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800417a:	f7fd ffbb 	bl	80020f4 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e052      	b.n	8004232 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 800418c:	4b2c      	ldr	r3, [pc, #176]	; (8004240 <HAL_RCC_DeInit+0x230>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1f0      	bne.n	800417a <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 8004198:	4b29      	ldr	r3, [pc, #164]	; (8004240 <HAL_RCC_DeInit+0x230>)
 800419a:	2200      	movs	r2, #0
 800419c:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 800419e:	4b28      	ldr	r3, [pc, #160]	; (8004240 <HAL_RCC_DeInit+0x230>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 80041a4:	4b26      	ldr	r3, [pc, #152]	; (8004240 <HAL_RCC_DeInit+0x230>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM1_5 | RCC_PLLCKSELR_DIVM2_5 | RCC_PLLCKSELR_DIVM3_5;
 80041aa:	4b25      	ldr	r3, [pc, #148]	; (8004240 <HAL_RCC_DeInit+0x230>)
 80041ac:	4a2a      	ldr	r2, [pc, #168]	; (8004258 <HAL_RCC_DeInit+0x248>)
 80041ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 80041b0:	4b23      	ldr	r3, [pc, #140]	; (8004240 <HAL_RCC_DeInit+0x230>)
 80041b2:	4a2a      	ldr	r2, [pc, #168]	; (800425c <HAL_RCC_DeInit+0x24c>)
 80041b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 80041b6:	4b22      	ldr	r3, [pc, #136]	; (8004240 <HAL_RCC_DeInit+0x230>)
 80041b8:	4a29      	ldr	r2, [pc, #164]	; (8004260 <HAL_RCC_DeInit+0x250>)
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 80041bc:	4b20      	ldr	r3, [pc, #128]	; (8004240 <HAL_RCC_DeInit+0x230>)
 80041be:	2200      	movs	r2, #0
 80041c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 80041c2:	4b1f      	ldr	r3, [pc, #124]	; (8004240 <HAL_RCC_DeInit+0x230>)
 80041c4:	4a26      	ldr	r2, [pc, #152]	; (8004260 <HAL_RCC_DeInit+0x250>)
 80041c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 80041c8:	4b1d      	ldr	r3, [pc, #116]	; (8004240 <HAL_RCC_DeInit+0x230>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 80041ce:	4b1c      	ldr	r3, [pc, #112]	; (8004240 <HAL_RCC_DeInit+0x230>)
 80041d0:	4a23      	ldr	r2, [pc, #140]	; (8004260 <HAL_RCC_DeInit+0x250>)
 80041d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 80041d4:	4b1a      	ldr	r3, [pc, #104]	; (8004240 <HAL_RCC_DeInit+0x230>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80041da:	4b19      	ldr	r3, [pc, #100]	; (8004240 <HAL_RCC_DeInit+0x230>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a18      	ldr	r2, [pc, #96]	; (8004240 <HAL_RCC_DeInit+0x230>)
 80041e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041e4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 80041e6:	4b16      	ldr	r3, [pc, #88]	; (8004240 <HAL_RCC_DeInit+0x230>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 80041ec:	4b14      	ldr	r3, [pc, #80]	; (8004240 <HAL_RCC_DeInit+0x230>)
 80041ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041f2:	669a      	str	r2, [r3, #104]	; 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 80041f4:	4b12      	ldr	r3, [pc, #72]	; (8004240 <HAL_RCC_DeInit+0x230>)
 80041f6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80041fa:	4a11      	ldr	r2, [pc, #68]	; (8004240 <HAL_RCC_DeInit+0x230>)
 80041fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004200:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 8004204:	4b0d      	ldr	r3, [pc, #52]	; (800423c <HAL_RCC_DeInit+0x22c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00f      	beq.n	8004230 <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8004210:	4b0a      	ldr	r3, [pc, #40]	; (800423c <HAL_RCC_DeInit+0x22c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f023 030f 	bic.w	r3, r3, #15
 8004218:	4a08      	ldr	r2, [pc, #32]	; (800423c <HAL_RCC_DeInit+0x22c>)
 800421a:	f043 0307 	orr.w	r3, r3, #7
 800421e:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8004220:	4b06      	ldr	r3, [pc, #24]	; (800423c <HAL_RCC_DeInit+0x22c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	2b07      	cmp	r3, #7
 800422a:	d001      	beq.n	8004230 <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e000      	b.n	8004232 <HAL_RCC_DeInit+0x222>
    }

  }

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	52002000 	.word	0x52002000
 8004240:	58024400 	.word	0x58024400
 8004244:	20000004 	.word	0x20000004
 8004248:	03d09000 	.word	0x03d09000
 800424c:	20000008 	.word	0x20000008
 8004250:	2000000c 	.word	0x2000000c
 8004254:	fff6ed45 	.word	0xfff6ed45
 8004258:	02020200 	.word	0x02020200
 800425c:	01ff0000 	.word	0x01ff0000
 8004260:	01010280 	.word	0x01010280

08004264 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08c      	sub	sp, #48	; 0x30
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d102      	bne.n	8004278 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	f000 bc48 	b.w	8004b08 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 8088 	beq.w	8004396 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004286:	4b99      	ldr	r3, [pc, #612]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800428e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004290:	4b96      	ldr	r3, [pc, #600]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 8004292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004294:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004298:	2b10      	cmp	r3, #16
 800429a:	d007      	beq.n	80042ac <HAL_RCC_OscConfig+0x48>
 800429c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429e:	2b18      	cmp	r3, #24
 80042a0:	d111      	bne.n	80042c6 <HAL_RCC_OscConfig+0x62>
 80042a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d10c      	bne.n	80042c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ac:	4b8f      	ldr	r3, [pc, #572]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d06d      	beq.n	8004394 <HAL_RCC_OscConfig+0x130>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d169      	bne.n	8004394 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	f000 bc21 	b.w	8004b08 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ce:	d106      	bne.n	80042de <HAL_RCC_OscConfig+0x7a>
 80042d0:	4b86      	ldr	r3, [pc, #536]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a85      	ldr	r2, [pc, #532]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 80042d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	e02e      	b.n	800433c <HAL_RCC_OscConfig+0xd8>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10c      	bne.n	8004300 <HAL_RCC_OscConfig+0x9c>
 80042e6:	4b81      	ldr	r3, [pc, #516]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a80      	ldr	r2, [pc, #512]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 80042ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	4b7e      	ldr	r3, [pc, #504]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a7d      	ldr	r2, [pc, #500]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 80042f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	e01d      	b.n	800433c <HAL_RCC_OscConfig+0xd8>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004308:	d10c      	bne.n	8004324 <HAL_RCC_OscConfig+0xc0>
 800430a:	4b78      	ldr	r3, [pc, #480]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a77      	ldr	r2, [pc, #476]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 8004310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	4b75      	ldr	r3, [pc, #468]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a74      	ldr	r2, [pc, #464]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 800431c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	e00b      	b.n	800433c <HAL_RCC_OscConfig+0xd8>
 8004324:	4b71      	ldr	r3, [pc, #452]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a70      	ldr	r2, [pc, #448]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 800432a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	4b6e      	ldr	r3, [pc, #440]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a6d      	ldr	r2, [pc, #436]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 8004336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800433a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d013      	beq.n	800436c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004344:	f7fd fed6 	bl	80020f4 <HAL_GetTick>
 8004348:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800434c:	f7fd fed2 	bl	80020f4 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b64      	cmp	r3, #100	; 0x64
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e3d4      	b.n	8004b08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800435e:	4b63      	ldr	r3, [pc, #396]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0xe8>
 800436a:	e014      	b.n	8004396 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436c:	f7fd fec2 	bl	80020f4 <HAL_GetTick>
 8004370:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004374:	f7fd febe 	bl	80020f4 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b64      	cmp	r3, #100	; 0x64
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e3c0      	b.n	8004b08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004386:	4b59      	ldr	r3, [pc, #356]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x110>
 8004392:	e000      	b.n	8004396 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 80ca 	beq.w	8004538 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043a4:	4b51      	ldr	r3, [pc, #324]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043ae:	4b4f      	ldr	r3, [pc, #316]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 80043b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <HAL_RCC_OscConfig+0x166>
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	2b18      	cmp	r3, #24
 80043be:	d156      	bne.n	800446e <HAL_RCC_OscConfig+0x20a>
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d151      	bne.n	800446e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043ca:	4b48      	ldr	r3, [pc, #288]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_RCC_OscConfig+0x17e>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e392      	b.n	8004b08 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043e2:	4b42      	ldr	r3, [pc, #264]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f023 0219 	bic.w	r2, r3, #25
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	493f      	ldr	r1, [pc, #252]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f4:	f7fd fe7e 	bl	80020f4 <HAL_GetTick>
 80043f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043fc:	f7fd fe7a 	bl	80020f4 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e37c      	b.n	8004b08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800440e:	4b37      	ldr	r3, [pc, #220]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f0      	beq.n	80043fc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800441a:	f7fd fe9b 	bl	8002154 <HAL_GetREVID>
 800441e:	4603      	mov	r3, r0
 8004420:	f241 0203 	movw	r2, #4099	; 0x1003
 8004424:	4293      	cmp	r3, r2
 8004426:	d817      	bhi.n	8004458 <HAL_RCC_OscConfig+0x1f4>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	2b40      	cmp	r3, #64	; 0x40
 800442e:	d108      	bne.n	8004442 <HAL_RCC_OscConfig+0x1de>
 8004430:	4b2e      	ldr	r3, [pc, #184]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004438:	4a2c      	ldr	r2, [pc, #176]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 800443a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800443e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004440:	e07a      	b.n	8004538 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004442:	4b2a      	ldr	r3, [pc, #168]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	031b      	lsls	r3, r3, #12
 8004450:	4926      	ldr	r1, [pc, #152]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 8004452:	4313      	orrs	r3, r2
 8004454:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004456:	e06f      	b.n	8004538 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004458:	4b24      	ldr	r3, [pc, #144]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	061b      	lsls	r3, r3, #24
 8004466:	4921      	ldr	r1, [pc, #132]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 8004468:	4313      	orrs	r3, r2
 800446a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800446c:	e064      	b.n	8004538 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d047      	beq.n	8004506 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004476:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f023 0219 	bic.w	r2, r3, #25
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	491a      	ldr	r1, [pc, #104]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 8004484:	4313      	orrs	r3, r2
 8004486:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004488:	f7fd fe34 	bl	80020f4 <HAL_GetTick>
 800448c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004490:	f7fd fe30 	bl	80020f4 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e332      	b.n	8004b08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044a2:	4b12      	ldr	r3, [pc, #72]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0f0      	beq.n	8004490 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ae:	f7fd fe51 	bl	8002154 <HAL_GetREVID>
 80044b2:	4603      	mov	r3, r0
 80044b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d819      	bhi.n	80044f0 <HAL_RCC_OscConfig+0x28c>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	2b40      	cmp	r3, #64	; 0x40
 80044c2:	d108      	bne.n	80044d6 <HAL_RCC_OscConfig+0x272>
 80044c4:	4b09      	ldr	r3, [pc, #36]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80044cc:	4a07      	ldr	r2, [pc, #28]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 80044ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d2:	6053      	str	r3, [r2, #4]
 80044d4:	e030      	b.n	8004538 <HAL_RCC_OscConfig+0x2d4>
 80044d6:	4b05      	ldr	r3, [pc, #20]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	031b      	lsls	r3, r3, #12
 80044e4:	4901      	ldr	r1, [pc, #4]	; (80044ec <HAL_RCC_OscConfig+0x288>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	604b      	str	r3, [r1, #4]
 80044ea:	e025      	b.n	8004538 <HAL_RCC_OscConfig+0x2d4>
 80044ec:	58024400 	.word	0x58024400
 80044f0:	4b9a      	ldr	r3, [pc, #616]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	061b      	lsls	r3, r3, #24
 80044fe:	4997      	ldr	r1, [pc, #604]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 8004500:	4313      	orrs	r3, r2
 8004502:	604b      	str	r3, [r1, #4]
 8004504:	e018      	b.n	8004538 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004506:	4b95      	ldr	r3, [pc, #596]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a94      	ldr	r2, [pc, #592]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004512:	f7fd fdef 	bl	80020f4 <HAL_GetTick>
 8004516:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800451a:	f7fd fdeb 	bl	80020f4 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e2ed      	b.n	8004b08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800452c:	4b8b      	ldr	r3, [pc, #556]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f0      	bne.n	800451a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 80a9 	beq.w	8004698 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004546:	4b85      	ldr	r3, [pc, #532]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800454e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004550:	4b82      	ldr	r3, [pc, #520]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 8004552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004554:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	2b08      	cmp	r3, #8
 800455a:	d007      	beq.n	800456c <HAL_RCC_OscConfig+0x308>
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2b18      	cmp	r3, #24
 8004560:	d13a      	bne.n	80045d8 <HAL_RCC_OscConfig+0x374>
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f003 0303 	and.w	r3, r3, #3
 8004568:	2b01      	cmp	r3, #1
 800456a:	d135      	bne.n	80045d8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800456c:	4b7b      	ldr	r3, [pc, #492]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_RCC_OscConfig+0x320>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	2b80      	cmp	r3, #128	; 0x80
 800457e:	d001      	beq.n	8004584 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e2c1      	b.n	8004b08 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004584:	f7fd fde6 	bl	8002154 <HAL_GetREVID>
 8004588:	4603      	mov	r3, r0
 800458a:	f241 0203 	movw	r2, #4099	; 0x1003
 800458e:	4293      	cmp	r3, r2
 8004590:	d817      	bhi.n	80045c2 <HAL_RCC_OscConfig+0x35e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	2b20      	cmp	r3, #32
 8004598:	d108      	bne.n	80045ac <HAL_RCC_OscConfig+0x348>
 800459a:	4b70      	ldr	r3, [pc, #448]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80045a2:	4a6e      	ldr	r2, [pc, #440]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 80045a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045a8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045aa:	e075      	b.n	8004698 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045ac:	4b6b      	ldr	r3, [pc, #428]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	069b      	lsls	r3, r3, #26
 80045ba:	4968      	ldr	r1, [pc, #416]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045c0:	e06a      	b.n	8004698 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045c2:	4b66      	ldr	r3, [pc, #408]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	061b      	lsls	r3, r3, #24
 80045d0:	4962      	ldr	r1, [pc, #392]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045d6:	e05f      	b.n	8004698 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d042      	beq.n	8004666 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80045e0:	4b5e      	ldr	r3, [pc, #376]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a5d      	ldr	r2, [pc, #372]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 80045e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ec:	f7fd fd82 	bl	80020f4 <HAL_GetTick>
 80045f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80045f4:	f7fd fd7e 	bl	80020f4 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e280      	b.n	8004b08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004606:	4b55      	ldr	r3, [pc, #340]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004612:	f7fd fd9f 	bl	8002154 <HAL_GetREVID>
 8004616:	4603      	mov	r3, r0
 8004618:	f241 0203 	movw	r2, #4099	; 0x1003
 800461c:	4293      	cmp	r3, r2
 800461e:	d817      	bhi.n	8004650 <HAL_RCC_OscConfig+0x3ec>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	2b20      	cmp	r3, #32
 8004626:	d108      	bne.n	800463a <HAL_RCC_OscConfig+0x3d6>
 8004628:	4b4c      	ldr	r3, [pc, #304]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004630:	4a4a      	ldr	r2, [pc, #296]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 8004632:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004636:	6053      	str	r3, [r2, #4]
 8004638:	e02e      	b.n	8004698 <HAL_RCC_OscConfig+0x434>
 800463a:	4b48      	ldr	r3, [pc, #288]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	069b      	lsls	r3, r3, #26
 8004648:	4944      	ldr	r1, [pc, #272]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 800464a:	4313      	orrs	r3, r2
 800464c:	604b      	str	r3, [r1, #4]
 800464e:	e023      	b.n	8004698 <HAL_RCC_OscConfig+0x434>
 8004650:	4b42      	ldr	r3, [pc, #264]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	061b      	lsls	r3, r3, #24
 800465e:	493f      	ldr	r1, [pc, #252]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 8004660:	4313      	orrs	r3, r2
 8004662:	60cb      	str	r3, [r1, #12]
 8004664:	e018      	b.n	8004698 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004666:	4b3d      	ldr	r3, [pc, #244]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a3c      	ldr	r2, [pc, #240]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 800466c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004672:	f7fd fd3f 	bl	80020f4 <HAL_GetTick>
 8004676:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800467a:	f7fd fd3b 	bl	80020f4 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e23d      	b.n	8004b08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800468c:	4b33      	ldr	r3, [pc, #204]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f0      	bne.n	800467a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d036      	beq.n	8004712 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d019      	beq.n	80046e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ac:	4b2b      	ldr	r3, [pc, #172]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 80046ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b0:	4a2a      	ldr	r2, [pc, #168]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b8:	f7fd fd1c 	bl	80020f4 <HAL_GetTick>
 80046bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c0:	f7fd fd18 	bl	80020f4 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e21a      	b.n	8004b08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046d2:	4b22      	ldr	r3, [pc, #136]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 80046d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0x45c>
 80046de:	e018      	b.n	8004712 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046e0:	4b1e      	ldr	r3, [pc, #120]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 80046e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e4:	4a1d      	ldr	r2, [pc, #116]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 80046e6:	f023 0301 	bic.w	r3, r3, #1
 80046ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ec:	f7fd fd02 	bl	80020f4 <HAL_GetTick>
 80046f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f4:	f7fd fcfe 	bl	80020f4 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e200      	b.n	8004b08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004706:	4b15      	ldr	r3, [pc, #84]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 8004708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b00      	cmp	r3, #0
 800471c:	d039      	beq.n	8004792 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d01c      	beq.n	8004760 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004726:	4b0d      	ldr	r3, [pc, #52]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a0c      	ldr	r2, [pc, #48]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 800472c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004730:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004732:	f7fd fcdf 	bl	80020f4 <HAL_GetTick>
 8004736:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800473a:	f7fd fcdb 	bl	80020f4 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e1dd      	b.n	8004b08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800474c:	4b03      	ldr	r3, [pc, #12]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0f0      	beq.n	800473a <HAL_RCC_OscConfig+0x4d6>
 8004758:	e01b      	b.n	8004792 <HAL_RCC_OscConfig+0x52e>
 800475a:	bf00      	nop
 800475c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004760:	4b9b      	ldr	r3, [pc, #620]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a9a      	ldr	r2, [pc, #616]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 8004766:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800476a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800476c:	f7fd fcc2 	bl	80020f4 <HAL_GetTick>
 8004770:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004774:	f7fd fcbe 	bl	80020f4 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e1c0      	b.n	8004b08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004786:	4b92      	ldr	r3, [pc, #584]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1f0      	bne.n	8004774 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 8081 	beq.w	80048a2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047a0:	4b8c      	ldr	r3, [pc, #560]	; (80049d4 <HAL_RCC_OscConfig+0x770>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a8b      	ldr	r2, [pc, #556]	; (80049d4 <HAL_RCC_OscConfig+0x770>)
 80047a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047ac:	f7fd fca2 	bl	80020f4 <HAL_GetTick>
 80047b0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b4:	f7fd fc9e 	bl	80020f4 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	; 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e1a0      	b.n	8004b08 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047c6:	4b83      	ldr	r3, [pc, #524]	; (80049d4 <HAL_RCC_OscConfig+0x770>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d106      	bne.n	80047e8 <HAL_RCC_OscConfig+0x584>
 80047da:	4b7d      	ldr	r3, [pc, #500]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 80047dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047de:	4a7c      	ldr	r2, [pc, #496]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 80047e0:	f043 0301 	orr.w	r3, r3, #1
 80047e4:	6713      	str	r3, [r2, #112]	; 0x70
 80047e6:	e02d      	b.n	8004844 <HAL_RCC_OscConfig+0x5e0>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10c      	bne.n	800480a <HAL_RCC_OscConfig+0x5a6>
 80047f0:	4b77      	ldr	r3, [pc, #476]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	4a76      	ldr	r2, [pc, #472]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 80047f6:	f023 0301 	bic.w	r3, r3, #1
 80047fa:	6713      	str	r3, [r2, #112]	; 0x70
 80047fc:	4b74      	ldr	r3, [pc, #464]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 80047fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004800:	4a73      	ldr	r2, [pc, #460]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 8004802:	f023 0304 	bic.w	r3, r3, #4
 8004806:	6713      	str	r3, [r2, #112]	; 0x70
 8004808:	e01c      	b.n	8004844 <HAL_RCC_OscConfig+0x5e0>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b05      	cmp	r3, #5
 8004810:	d10c      	bne.n	800482c <HAL_RCC_OscConfig+0x5c8>
 8004812:	4b6f      	ldr	r3, [pc, #444]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	4a6e      	ldr	r2, [pc, #440]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 8004818:	f043 0304 	orr.w	r3, r3, #4
 800481c:	6713      	str	r3, [r2, #112]	; 0x70
 800481e:	4b6c      	ldr	r3, [pc, #432]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004822:	4a6b      	ldr	r2, [pc, #428]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	6713      	str	r3, [r2, #112]	; 0x70
 800482a:	e00b      	b.n	8004844 <HAL_RCC_OscConfig+0x5e0>
 800482c:	4b68      	ldr	r3, [pc, #416]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 800482e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004830:	4a67      	ldr	r2, [pc, #412]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 8004832:	f023 0301 	bic.w	r3, r3, #1
 8004836:	6713      	str	r3, [r2, #112]	; 0x70
 8004838:	4b65      	ldr	r3, [pc, #404]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 800483a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483c:	4a64      	ldr	r2, [pc, #400]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 800483e:	f023 0304 	bic.w	r3, r3, #4
 8004842:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d015      	beq.n	8004878 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484c:	f7fd fc52 	bl	80020f4 <HAL_GetTick>
 8004850:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004852:	e00a      	b.n	800486a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004854:	f7fd fc4e 	bl	80020f4 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e14e      	b.n	8004b08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800486a:	4b59      	ldr	r3, [pc, #356]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 800486c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0ee      	beq.n	8004854 <HAL_RCC_OscConfig+0x5f0>
 8004876:	e014      	b.n	80048a2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004878:	f7fd fc3c 	bl	80020f4 <HAL_GetTick>
 800487c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800487e:	e00a      	b.n	8004896 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004880:	f7fd fc38 	bl	80020f4 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f241 3288 	movw	r2, #5000	; 0x1388
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e138      	b.n	8004b08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004896:	4b4e      	ldr	r3, [pc, #312]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 8004898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1ee      	bne.n	8004880 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 812d 	beq.w	8004b06 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80048ac:	4b48      	ldr	r3, [pc, #288]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048b4:	2b18      	cmp	r3, #24
 80048b6:	f000 80bd 	beq.w	8004a34 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	2b02      	cmp	r3, #2
 80048c0:	f040 809e 	bne.w	8004a00 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c4:	4b42      	ldr	r3, [pc, #264]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a41      	ldr	r2, [pc, #260]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 80048ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d0:	f7fd fc10 	bl	80020f4 <HAL_GetTick>
 80048d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d8:	f7fd fc0c 	bl	80020f4 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e10e      	b.n	8004b08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048ea:	4b39      	ldr	r3, [pc, #228]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048f6:	4b36      	ldr	r3, [pc, #216]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 80048f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048fa:	4b37      	ldr	r3, [pc, #220]	; (80049d8 <HAL_RCC_OscConfig+0x774>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004906:	0112      	lsls	r2, r2, #4
 8004908:	430a      	orrs	r2, r1
 800490a:	4931      	ldr	r1, [pc, #196]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 800490c:	4313      	orrs	r3, r2
 800490e:	628b      	str	r3, [r1, #40]	; 0x28
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	3b01      	subs	r3, #1
 8004916:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491e:	3b01      	subs	r3, #1
 8004920:	025b      	lsls	r3, r3, #9
 8004922:	b29b      	uxth	r3, r3
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	3b01      	subs	r3, #1
 800492c:	041b      	lsls	r3, r3, #16
 800492e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004938:	3b01      	subs	r3, #1
 800493a:	061b      	lsls	r3, r3, #24
 800493c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004940:	4923      	ldr	r1, [pc, #140]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 8004942:	4313      	orrs	r3, r2
 8004944:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004946:	4b22      	ldr	r3, [pc, #136]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	4a21      	ldr	r2, [pc, #132]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 800494c:	f023 0301 	bic.w	r3, r3, #1
 8004950:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004952:	4b1f      	ldr	r3, [pc, #124]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 8004954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004956:	4b21      	ldr	r3, [pc, #132]	; (80049dc <HAL_RCC_OscConfig+0x778>)
 8004958:	4013      	ands	r3, r2
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800495e:	00d2      	lsls	r2, r2, #3
 8004960:	491b      	ldr	r1, [pc, #108]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 8004962:	4313      	orrs	r3, r2
 8004964:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004966:	4b1a      	ldr	r3, [pc, #104]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 8004968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496a:	f023 020c 	bic.w	r2, r3, #12
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	4917      	ldr	r1, [pc, #92]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 8004974:	4313      	orrs	r3, r2
 8004976:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004978:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	f023 0202 	bic.w	r2, r3, #2
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004984:	4912      	ldr	r1, [pc, #72]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 8004986:	4313      	orrs	r3, r2
 8004988:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800498a:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 800498c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498e:	4a10      	ldr	r2, [pc, #64]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 8004990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004994:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004996:	4b0e      	ldr	r3, [pc, #56]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 8004998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499a:	4a0d      	ldr	r2, [pc, #52]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 800499c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80049a2:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	4a0a      	ldr	r2, [pc, #40]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 80049a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80049ae:	4b08      	ldr	r3, [pc, #32]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	4a07      	ldr	r2, [pc, #28]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ba:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a04      	ldr	r2, [pc, #16]	; (80049d0 <HAL_RCC_OscConfig+0x76c>)
 80049c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c6:	f7fd fb95 	bl	80020f4 <HAL_GetTick>
 80049ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049cc:	e011      	b.n	80049f2 <HAL_RCC_OscConfig+0x78e>
 80049ce:	bf00      	nop
 80049d0:	58024400 	.word	0x58024400
 80049d4:	58024800 	.word	0x58024800
 80049d8:	fffffc0c 	.word	0xfffffc0c
 80049dc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e0:	f7fd fb88 	bl	80020f4 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e08a      	b.n	8004b08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049f2:	4b47      	ldr	r3, [pc, #284]	; (8004b10 <HAL_RCC_OscConfig+0x8ac>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0f0      	beq.n	80049e0 <HAL_RCC_OscConfig+0x77c>
 80049fe:	e082      	b.n	8004b06 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a00:	4b43      	ldr	r3, [pc, #268]	; (8004b10 <HAL_RCC_OscConfig+0x8ac>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a42      	ldr	r2, [pc, #264]	; (8004b10 <HAL_RCC_OscConfig+0x8ac>)
 8004a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fd fb72 	bl	80020f4 <HAL_GetTick>
 8004a10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a14:	f7fd fb6e 	bl	80020f4 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e070      	b.n	8004b08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a26:	4b3a      	ldr	r3, [pc, #232]	; (8004b10 <HAL_RCC_OscConfig+0x8ac>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f0      	bne.n	8004a14 <HAL_RCC_OscConfig+0x7b0>
 8004a32:	e068      	b.n	8004b06 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004a34:	4b36      	ldr	r3, [pc, #216]	; (8004b10 <HAL_RCC_OscConfig+0x8ac>)
 8004a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a38:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a3a:	4b35      	ldr	r3, [pc, #212]	; (8004b10 <HAL_RCC_OscConfig+0x8ac>)
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d031      	beq.n	8004aac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f003 0203 	and.w	r2, r3, #3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d12a      	bne.n	8004aac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d122      	bne.n	8004aac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d11a      	bne.n	8004aac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	0a5b      	lsrs	r3, r3, #9
 8004a7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a82:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d111      	bne.n	8004aac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	0c1b      	lsrs	r3, r3, #16
 8004a8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a94:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d108      	bne.n	8004aac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	0e1b      	lsrs	r3, r3, #24
 8004a9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e02b      	b.n	8004b08 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004ab0:	4b17      	ldr	r3, [pc, #92]	; (8004b10 <HAL_RCC_OscConfig+0x8ac>)
 8004ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab4:	08db      	lsrs	r3, r3, #3
 8004ab6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004aba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d01f      	beq.n	8004b06 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004ac6:	4b12      	ldr	r3, [pc, #72]	; (8004b10 <HAL_RCC_OscConfig+0x8ac>)
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	4a11      	ldr	r2, [pc, #68]	; (8004b10 <HAL_RCC_OscConfig+0x8ac>)
 8004acc:	f023 0301 	bic.w	r3, r3, #1
 8004ad0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ad2:	f7fd fb0f 	bl	80020f4 <HAL_GetTick>
 8004ad6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004ad8:	bf00      	nop
 8004ada:	f7fd fb0b 	bl	80020f4 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d0f9      	beq.n	8004ada <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ae6:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <HAL_RCC_OscConfig+0x8ac>)
 8004ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aea:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <HAL_RCC_OscConfig+0x8b0>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004af2:	00d2      	lsls	r2, r2, #3
 8004af4:	4906      	ldr	r1, [pc, #24]	; (8004b10 <HAL_RCC_OscConfig+0x8ac>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004afa:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <HAL_RCC_OscConfig+0x8ac>)
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	4a04      	ldr	r2, [pc, #16]	; (8004b10 <HAL_RCC_OscConfig+0x8ac>)
 8004b00:	f043 0301 	orr.w	r3, r3, #1
 8004b04:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3730      	adds	r7, #48	; 0x30
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	58024400 	.word	0x58024400
 8004b14:	ffff0007 	.word	0xffff0007

08004b18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e19c      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b2c:	4b8a      	ldr	r3, [pc, #552]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 030f 	and.w	r3, r3, #15
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d910      	bls.n	8004b5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3a:	4b87      	ldr	r3, [pc, #540]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f023 020f 	bic.w	r2, r3, #15
 8004b42:	4985      	ldr	r1, [pc, #532]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4a:	4b83      	ldr	r3, [pc, #524]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d001      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e184      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d010      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	4b7b      	ldr	r3, [pc, #492]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d908      	bls.n	8004b8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b78:	4b78      	ldr	r3, [pc, #480]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	4975      	ldr	r1, [pc, #468]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d010      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695a      	ldr	r2, [r3, #20]
 8004b9a:	4b70      	ldr	r3, [pc, #448]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d908      	bls.n	8004bb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ba6:	4b6d      	ldr	r3, [pc, #436]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	496a      	ldr	r1, [pc, #424]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d010      	beq.n	8004be6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699a      	ldr	r2, [r3, #24]
 8004bc8:	4b64      	ldr	r3, [pc, #400]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d908      	bls.n	8004be6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004bd4:	4b61      	ldr	r3, [pc, #388]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	495e      	ldr	r1, [pc, #376]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d010      	beq.n	8004c14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69da      	ldr	r2, [r3, #28]
 8004bf6:	4b59      	ldr	r3, [pc, #356]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d908      	bls.n	8004c14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c02:	4b56      	ldr	r3, [pc, #344]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	4953      	ldr	r1, [pc, #332]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d010      	beq.n	8004c42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	4b4d      	ldr	r3, [pc, #308]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d908      	bls.n	8004c42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c30:	4b4a      	ldr	r3, [pc, #296]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f023 020f 	bic.w	r2, r3, #15
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4947      	ldr	r1, [pc, #284]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d055      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c4e:	4b43      	ldr	r3, [pc, #268]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	4940      	ldr	r1, [pc, #256]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d107      	bne.n	8004c78 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c68:	4b3c      	ldr	r3, [pc, #240]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d121      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e0f6      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d107      	bne.n	8004c90 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c80:	4b36      	ldr	r3, [pc, #216]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d115      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e0ea      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d107      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c98:	4b30      	ldr	r3, [pc, #192]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d109      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e0de      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ca8:	4b2c      	ldr	r3, [pc, #176]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0d6      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cb8:	4b28      	ldr	r3, [pc, #160]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	f023 0207 	bic.w	r2, r3, #7
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	4925      	ldr	r1, [pc, #148]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cca:	f7fd fa13 	bl	80020f4 <HAL_GetTick>
 8004cce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cd0:	e00a      	b.n	8004ce8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd2:	f7fd fa0f 	bl	80020f4 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e0be      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce8:	4b1c      	ldr	r3, [pc, #112]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d1eb      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d010      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	4b14      	ldr	r3, [pc, #80]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d208      	bcs.n	8004d28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d16:	4b11      	ldr	r3, [pc, #68]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f023 020f 	bic.w	r2, r3, #15
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	490e      	ldr	r1, [pc, #56]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d28:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d214      	bcs.n	8004d60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d36:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f023 020f 	bic.w	r2, r3, #15
 8004d3e:	4906      	ldr	r1, [pc, #24]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d46:	4b04      	ldr	r3, [pc, #16]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d005      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e086      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>
 8004d58:	52002000 	.word	0x52002000
 8004d5c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d010      	beq.n	8004d8e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	4b3f      	ldr	r3, [pc, #252]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d208      	bcs.n	8004d8e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d7c:	4b3c      	ldr	r3, [pc, #240]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	4939      	ldr	r1, [pc, #228]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d010      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695a      	ldr	r2, [r3, #20]
 8004d9e:	4b34      	ldr	r3, [pc, #208]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d208      	bcs.n	8004dbc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004daa:	4b31      	ldr	r3, [pc, #196]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	492e      	ldr	r1, [pc, #184]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d010      	beq.n	8004dea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699a      	ldr	r2, [r3, #24]
 8004dcc:	4b28      	ldr	r3, [pc, #160]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d208      	bcs.n	8004dea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004dd8:	4b25      	ldr	r3, [pc, #148]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	4922      	ldr	r1, [pc, #136]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d010      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69da      	ldr	r2, [r3, #28]
 8004dfa:	4b1d      	ldr	r3, [pc, #116]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d208      	bcs.n	8004e18 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e06:	4b1a      	ldr	r3, [pc, #104]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	4917      	ldr	r1, [pc, #92]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e18:	f000 f834 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	4b14      	ldr	r3, [pc, #80]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	0a1b      	lsrs	r3, r3, #8
 8004e24:	f003 030f 	and.w	r3, r3, #15
 8004e28:	4912      	ldr	r1, [pc, #72]	; (8004e74 <HAL_RCC_ClockConfig+0x35c>)
 8004e2a:	5ccb      	ldrb	r3, [r1, r3]
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	fa22 f303 	lsr.w	r3, r2, r3
 8004e34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e36:	4b0e      	ldr	r3, [pc, #56]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	4a0d      	ldr	r2, [pc, #52]	; (8004e74 <HAL_RCC_ClockConfig+0x35c>)
 8004e40:	5cd3      	ldrb	r3, [r2, r3]
 8004e42:	f003 031f 	and.w	r3, r3, #31
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4c:	4a0a      	ldr	r2, [pc, #40]	; (8004e78 <HAL_RCC_ClockConfig+0x360>)
 8004e4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e50:	4a0a      	ldr	r2, [pc, #40]	; (8004e7c <HAL_RCC_ClockConfig+0x364>)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004e56:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <HAL_RCC_ClockConfig+0x368>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fd f900 	bl	8002060 <HAL_InitTick>
 8004e60:	4603      	mov	r3, r0
 8004e62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	58024400 	.word	0x58024400
 8004e74:	0800db08 	.word	0x0800db08
 8004e78:	20000008 	.word	0x20000008
 8004e7c:	20000004 	.word	0x20000004
 8004e80:	2000000c 	.word	0x2000000c

08004e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b089      	sub	sp, #36	; 0x24
 8004e88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e8a:	4bb3      	ldr	r3, [pc, #716]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e92:	2b18      	cmp	r3, #24
 8004e94:	f200 8155 	bhi.w	8005142 <HAL_RCC_GetSysClockFreq+0x2be>
 8004e98:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9e:	bf00      	nop
 8004ea0:	08004f05 	.word	0x08004f05
 8004ea4:	08005143 	.word	0x08005143
 8004ea8:	08005143 	.word	0x08005143
 8004eac:	08005143 	.word	0x08005143
 8004eb0:	08005143 	.word	0x08005143
 8004eb4:	08005143 	.word	0x08005143
 8004eb8:	08005143 	.word	0x08005143
 8004ebc:	08005143 	.word	0x08005143
 8004ec0:	08004f2b 	.word	0x08004f2b
 8004ec4:	08005143 	.word	0x08005143
 8004ec8:	08005143 	.word	0x08005143
 8004ecc:	08005143 	.word	0x08005143
 8004ed0:	08005143 	.word	0x08005143
 8004ed4:	08005143 	.word	0x08005143
 8004ed8:	08005143 	.word	0x08005143
 8004edc:	08005143 	.word	0x08005143
 8004ee0:	08004f31 	.word	0x08004f31
 8004ee4:	08005143 	.word	0x08005143
 8004ee8:	08005143 	.word	0x08005143
 8004eec:	08005143 	.word	0x08005143
 8004ef0:	08005143 	.word	0x08005143
 8004ef4:	08005143 	.word	0x08005143
 8004ef8:	08005143 	.word	0x08005143
 8004efc:	08005143 	.word	0x08005143
 8004f00:	08004f37 	.word	0x08004f37
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f04:	4b94      	ldr	r3, [pc, #592]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d009      	beq.n	8004f24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f10:	4b91      	ldr	r3, [pc, #580]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	08db      	lsrs	r3, r3, #3
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	4a90      	ldr	r2, [pc, #576]	; (800515c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004f22:	e111      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f24:	4b8d      	ldr	r3, [pc, #564]	; (800515c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f26:	61bb      	str	r3, [r7, #24]
      break;
 8004f28:	e10e      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004f2a:	4b8d      	ldr	r3, [pc, #564]	; (8005160 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f2c:	61bb      	str	r3, [r7, #24]
      break;
 8004f2e:	e10b      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004f30:	4b8c      	ldr	r3, [pc, #560]	; (8005164 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004f32:	61bb      	str	r3, [r7, #24]
      break;
 8004f34:	e108      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f36:	4b88      	ldr	r3, [pc, #544]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004f40:	4b85      	ldr	r3, [pc, #532]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f44:	091b      	lsrs	r3, r3, #4
 8004f46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f4a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f4c:	4b82      	ldr	r3, [pc, #520]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004f56:	4b80      	ldr	r3, [pc, #512]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5a:	08db      	lsrs	r3, r3, #3
 8004f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	fb02 f303 	mul.w	r3, r2, r3
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80e1 	beq.w	800513c <HAL_RCC_GetSysClockFreq+0x2b8>
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	f000 8083 	beq.w	8005088 <HAL_RCC_GetSysClockFreq+0x204>
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	f200 80a1 	bhi.w	80050cc <HAL_RCC_GetSysClockFreq+0x248>
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_RCC_GetSysClockFreq+0x114>
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d056      	beq.n	8005044 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004f96:	e099      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f98:	4b6f      	ldr	r3, [pc, #444]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d02d      	beq.n	8005000 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fa4:	4b6c      	ldr	r3, [pc, #432]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	08db      	lsrs	r3, r3, #3
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	4a6b      	ldr	r2, [pc, #428]	; (800515c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	ee07 3a90 	vmov	s15, r3
 8004fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fce:	4b62      	ldr	r3, [pc, #392]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd6:	ee07 3a90 	vmov	s15, r3
 8004fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fde:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fe2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005168 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004ffe:	e087      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800516c <HAL_RCC_GetSysClockFreq+0x2e8>
 800500e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005012:	4b51      	ldr	r3, [pc, #324]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501a:	ee07 3a90 	vmov	s15, r3
 800501e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005022:	ed97 6a02 	vldr	s12, [r7, #8]
 8005026:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005168 <HAL_RCC_GetSysClockFreq+0x2e4>
 800502a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800502e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800503a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800503e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005042:	e065      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005170 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005056:	4b40      	ldr	r3, [pc, #256]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005066:	ed97 6a02 	vldr	s12, [r7, #8]
 800506a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005168 <HAL_RCC_GetSysClockFreq+0x2e4>
 800506e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800507a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800507e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005082:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005086:	e043      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005092:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005174 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800509a:	4b2f      	ldr	r3, [pc, #188]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80050ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005168 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050ca:	e021      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005170 <HAL_RCC_GetSysClockFreq+0x2ec>
 80050da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050de:	4b1e      	ldr	r3, [pc, #120]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80050f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005168 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800510e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005110:	4b11      	ldr	r3, [pc, #68]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005114:	0a5b      	lsrs	r3, r3, #9
 8005116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800511a:	3301      	adds	r3, #1
 800511c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	ee07 3a90 	vmov	s15, r3
 8005124:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005128:	edd7 6a07 	vldr	s13, [r7, #28]
 800512c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005134:	ee17 3a90 	vmov	r3, s15
 8005138:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800513a:	e005      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	61bb      	str	r3, [r7, #24]
      break;
 8005140:	e002      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005142:	4b07      	ldr	r3, [pc, #28]	; (8005160 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005144:	61bb      	str	r3, [r7, #24]
      break;
 8005146:	bf00      	nop
  }

  return sysclockfreq;
 8005148:	69bb      	ldr	r3, [r7, #24]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3724      	adds	r7, #36	; 0x24
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	58024400 	.word	0x58024400
 800515c:	03d09000 	.word	0x03d09000
 8005160:	003d0900 	.word	0x003d0900
 8005164:	00f42400 	.word	0x00f42400
 8005168:	46000000 	.word	0x46000000
 800516c:	4c742400 	.word	0x4c742400
 8005170:	4a742400 	.word	0x4a742400
 8005174:	4b742400 	.word	0x4b742400

08005178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800517e:	f7ff fe81 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8005182:	4602      	mov	r2, r0
 8005184:	4b10      	ldr	r3, [pc, #64]	; (80051c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	0a1b      	lsrs	r3, r3, #8
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	490f      	ldr	r1, [pc, #60]	; (80051cc <HAL_RCC_GetHCLKFreq+0x54>)
 8005190:	5ccb      	ldrb	r3, [r1, r3]
 8005192:	f003 031f 	and.w	r3, r3, #31
 8005196:	fa22 f303 	lsr.w	r3, r2, r3
 800519a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800519c:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	4a09      	ldr	r2, [pc, #36]	; (80051cc <HAL_RCC_GetHCLKFreq+0x54>)
 80051a6:	5cd3      	ldrb	r3, [r2, r3]
 80051a8:	f003 031f 	and.w	r3, r3, #31
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	fa22 f303 	lsr.w	r3, r2, r3
 80051b2:	4a07      	ldr	r2, [pc, #28]	; (80051d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80051b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051b6:	4a07      	ldr	r2, [pc, #28]	; (80051d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80051bc:	4b04      	ldr	r3, [pc, #16]	; (80051d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80051be:	681b      	ldr	r3, [r3, #0]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	58024400 	.word	0x58024400
 80051cc:	0800db08 	.word	0x0800db08
 80051d0:	20000008 	.word	0x20000008
 80051d4:	20000004 	.word	0x20000004

080051d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80051dc:	f7ff ffcc 	bl	8005178 <HAL_RCC_GetHCLKFreq>
 80051e0:	4602      	mov	r2, r0
 80051e2:	4b06      	ldr	r3, [pc, #24]	; (80051fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	091b      	lsrs	r3, r3, #4
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	4904      	ldr	r1, [pc, #16]	; (8005200 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051ee:	5ccb      	ldrb	r3, [r1, r3]
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	58024400 	.word	0x58024400
 8005200:	0800db08 	.word	0x0800db08

08005204 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005208:	b0ca      	sub	sp, #296	; 0x128
 800520a:	af00      	add	r7, sp, #0
 800520c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005210:	2300      	movs	r3, #0
 8005212:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005216:	2300      	movs	r3, #0
 8005218:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005228:	2500      	movs	r5, #0
 800522a:	ea54 0305 	orrs.w	r3, r4, r5
 800522e:	d049      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005236:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800523a:	d02f      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800523c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005240:	d828      	bhi.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005242:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005246:	d01a      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005248:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800524c:	d822      	bhi.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005256:	d007      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005258:	e01c      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800525a:	4bb8      	ldr	r3, [pc, #736]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	4ab7      	ldr	r2, [pc, #732]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005264:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005266:	e01a      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800526c:	3308      	adds	r3, #8
 800526e:	2102      	movs	r1, #2
 8005270:	4618      	mov	r0, r3
 8005272:	f002 fb61 	bl	8007938 <RCCEx_PLL2_Config>
 8005276:	4603      	mov	r3, r0
 8005278:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800527c:	e00f      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800527e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005282:	3328      	adds	r3, #40	; 0x28
 8005284:	2102      	movs	r1, #2
 8005286:	4618      	mov	r0, r3
 8005288:	f002 fc08 	bl	8007a9c <RCCEx_PLL3_Config>
 800528c:	4603      	mov	r3, r0
 800528e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005292:	e004      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800529a:	e000      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800529c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800529e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10a      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80052a6:	4ba5      	ldr	r3, [pc, #660]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80052ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052b4:	4aa1      	ldr	r2, [pc, #644]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052b6:	430b      	orrs	r3, r1
 80052b8:	6513      	str	r3, [r2, #80]	; 0x50
 80052ba:	e003      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80052d0:	f04f 0900 	mov.w	r9, #0
 80052d4:	ea58 0309 	orrs.w	r3, r8, r9
 80052d8:	d047      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80052da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d82a      	bhi.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80052e4:	a201      	add	r2, pc, #4	; (adr r2, 80052ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80052e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ea:	bf00      	nop
 80052ec:	08005301 	.word	0x08005301
 80052f0:	0800530f 	.word	0x0800530f
 80052f4:	08005325 	.word	0x08005325
 80052f8:	08005343 	.word	0x08005343
 80052fc:	08005343 	.word	0x08005343
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005300:	4b8e      	ldr	r3, [pc, #568]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005304:	4a8d      	ldr	r2, [pc, #564]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800530a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800530c:	e01a      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800530e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005312:	3308      	adds	r3, #8
 8005314:	2100      	movs	r1, #0
 8005316:	4618      	mov	r0, r3
 8005318:	f002 fb0e 	bl	8007938 <RCCEx_PLL2_Config>
 800531c:	4603      	mov	r3, r0
 800531e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005322:	e00f      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005328:	3328      	adds	r3, #40	; 0x28
 800532a:	2100      	movs	r1, #0
 800532c:	4618      	mov	r0, r3
 800532e:	f002 fbb5 	bl	8007a9c <RCCEx_PLL3_Config>
 8005332:	4603      	mov	r3, r0
 8005334:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005338:	e004      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005340:	e000      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005344:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10a      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800534c:	4b7b      	ldr	r3, [pc, #492]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800534e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005350:	f023 0107 	bic.w	r1, r3, #7
 8005354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535a:	4a78      	ldr	r2, [pc, #480]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800535c:	430b      	orrs	r3, r1
 800535e:	6513      	str	r3, [r2, #80]	; 0x50
 8005360:	e003      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005366:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800536a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005372:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005376:	f04f 0b00 	mov.w	fp, #0
 800537a:	ea5a 030b 	orrs.w	r3, sl, fp
 800537e:	d04c      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800538a:	d030      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800538c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005390:	d829      	bhi.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005392:	2bc0      	cmp	r3, #192	; 0xc0
 8005394:	d02d      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005396:	2bc0      	cmp	r3, #192	; 0xc0
 8005398:	d825      	bhi.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800539a:	2b80      	cmp	r3, #128	; 0x80
 800539c:	d018      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800539e:	2b80      	cmp	r3, #128	; 0x80
 80053a0:	d821      	bhi.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80053a6:	2b40      	cmp	r3, #64	; 0x40
 80053a8:	d007      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80053aa:	e01c      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ac:	4b63      	ldr	r3, [pc, #396]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b0:	4a62      	ldr	r2, [pc, #392]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80053b8:	e01c      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053be:	3308      	adds	r3, #8
 80053c0:	2100      	movs	r1, #0
 80053c2:	4618      	mov	r0, r3
 80053c4:	f002 fab8 	bl	8007938 <RCCEx_PLL2_Config>
 80053c8:	4603      	mov	r3, r0
 80053ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80053ce:	e011      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d4:	3328      	adds	r3, #40	; 0x28
 80053d6:	2100      	movs	r1, #0
 80053d8:	4618      	mov	r0, r3
 80053da:	f002 fb5f 	bl	8007a9c <RCCEx_PLL3_Config>
 80053de:	4603      	mov	r3, r0
 80053e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80053e4:	e006      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053ec:	e002      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80053ee:	bf00      	nop
 80053f0:	e000      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80053f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80053fc:	4b4f      	ldr	r3, [pc, #316]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005400:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540a:	4a4c      	ldr	r2, [pc, #304]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800540c:	430b      	orrs	r3, r1
 800540e:	6513      	str	r3, [r2, #80]	; 0x50
 8005410:	e003      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005416:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800541a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800541e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005422:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005426:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800542a:	2300      	movs	r3, #0
 800542c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005430:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005434:	460b      	mov	r3, r1
 8005436:	4313      	orrs	r3, r2
 8005438:	d053      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800543a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800543e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005442:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005446:	d035      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005448:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800544c:	d82e      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800544e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005452:	d031      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005454:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005458:	d828      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800545a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800545e:	d01a      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005464:	d822      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800546a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800546e:	d007      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005470:	e01c      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005472:	4b32      	ldr	r3, [pc, #200]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005476:	4a31      	ldr	r2, [pc, #196]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800547c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800547e:	e01c      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005484:	3308      	adds	r3, #8
 8005486:	2100      	movs	r1, #0
 8005488:	4618      	mov	r0, r3
 800548a:	f002 fa55 	bl	8007938 <RCCEx_PLL2_Config>
 800548e:	4603      	mov	r3, r0
 8005490:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005494:	e011      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800549a:	3328      	adds	r3, #40	; 0x28
 800549c:	2100      	movs	r1, #0
 800549e:	4618      	mov	r0, r3
 80054a0:	f002 fafc 	bl	8007a9c <RCCEx_PLL3_Config>
 80054a4:	4603      	mov	r3, r0
 80054a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054aa:	e006      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054b2:	e002      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80054b4:	bf00      	nop
 80054b6:	e000      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80054b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10b      	bne.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80054c2:	4b1e      	ldr	r3, [pc, #120]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80054ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054d2:	4a1a      	ldr	r2, [pc, #104]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054d4:	430b      	orrs	r3, r1
 80054d6:	6593      	str	r3, [r2, #88]	; 0x58
 80054d8:	e003      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80054e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ea:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80054ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80054f2:	2300      	movs	r3, #0
 80054f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80054f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80054fc:	460b      	mov	r3, r1
 80054fe:	4313      	orrs	r3, r2
 8005500:	d056      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005506:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800550a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800550e:	d038      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005510:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005514:	d831      	bhi.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005516:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800551a:	d034      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800551c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005520:	d82b      	bhi.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005522:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005526:	d01d      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005528:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800552c:	d825      	bhi.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800552e:	2b00      	cmp	r3, #0
 8005530:	d006      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005532:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005536:	d00a      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005538:	e01f      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800553a:	bf00      	nop
 800553c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005540:	4ba2      	ldr	r3, [pc, #648]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	4aa1      	ldr	r2, [pc, #644]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800554a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800554c:	e01c      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800554e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005552:	3308      	adds	r3, #8
 8005554:	2100      	movs	r1, #0
 8005556:	4618      	mov	r0, r3
 8005558:	f002 f9ee 	bl	8007938 <RCCEx_PLL2_Config>
 800555c:	4603      	mov	r3, r0
 800555e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005562:	e011      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005568:	3328      	adds	r3, #40	; 0x28
 800556a:	2100      	movs	r1, #0
 800556c:	4618      	mov	r0, r3
 800556e:	f002 fa95 	bl	8007a9c <RCCEx_PLL3_Config>
 8005572:	4603      	mov	r3, r0
 8005574:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005578:	e006      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005580:	e002      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005582:	bf00      	nop
 8005584:	e000      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005588:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10b      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005590:	4b8e      	ldr	r3, [pc, #568]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005594:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800559c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80055a0:	4a8a      	ldr	r2, [pc, #552]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055a2:	430b      	orrs	r3, r1
 80055a4:	6593      	str	r3, [r2, #88]	; 0x58
 80055a6:	e003      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80055b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80055bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80055c0:	2300      	movs	r3, #0
 80055c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80055ca:	460b      	mov	r3, r1
 80055cc:	4313      	orrs	r3, r2
 80055ce:	d03a      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80055d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d6:	2b30      	cmp	r3, #48	; 0x30
 80055d8:	d01f      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80055da:	2b30      	cmp	r3, #48	; 0x30
 80055dc:	d819      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80055de:	2b20      	cmp	r3, #32
 80055e0:	d00c      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	d815      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d019      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80055ea:	2b10      	cmp	r3, #16
 80055ec:	d111      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ee:	4b77      	ldr	r3, [pc, #476]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f2:	4a76      	ldr	r2, [pc, #472]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80055fa:	e011      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005600:	3308      	adds	r3, #8
 8005602:	2102      	movs	r1, #2
 8005604:	4618      	mov	r0, r3
 8005606:	f002 f997 	bl	8007938 <RCCEx_PLL2_Config>
 800560a:	4603      	mov	r3, r0
 800560c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005610:	e006      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005618:	e002      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800561a:	bf00      	nop
 800561c:	e000      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800561e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005620:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005628:	4b68      	ldr	r3, [pc, #416]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800562a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800562c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005636:	4a65      	ldr	r2, [pc, #404]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005638:	430b      	orrs	r3, r1
 800563a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800563c:	e003      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005642:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005652:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005656:	2300      	movs	r3, #0
 8005658:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800565c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005660:	460b      	mov	r3, r1
 8005662:	4313      	orrs	r3, r2
 8005664:	d051      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800566a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800566c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005670:	d035      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005672:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005676:	d82e      	bhi.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005678:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800567c:	d031      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800567e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005682:	d828      	bhi.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005688:	d01a      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800568a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800568e:	d822      	bhi.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005690:	2b00      	cmp	r3, #0
 8005692:	d003      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005698:	d007      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800569a:	e01c      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800569c:	4b4b      	ldr	r3, [pc, #300]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	4a4a      	ldr	r2, [pc, #296]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056a8:	e01c      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ae:	3308      	adds	r3, #8
 80056b0:	2100      	movs	r1, #0
 80056b2:	4618      	mov	r0, r3
 80056b4:	f002 f940 	bl	8007938 <RCCEx_PLL2_Config>
 80056b8:	4603      	mov	r3, r0
 80056ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056be:	e011      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c4:	3328      	adds	r3, #40	; 0x28
 80056c6:	2100      	movs	r1, #0
 80056c8:	4618      	mov	r0, r3
 80056ca:	f002 f9e7 	bl	8007a9c <RCCEx_PLL3_Config>
 80056ce:	4603      	mov	r3, r0
 80056d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056d4:	e006      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056dc:	e002      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80056de:	bf00      	nop
 80056e0:	e000      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80056e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10a      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80056ec:	4b37      	ldr	r3, [pc, #220]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80056f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056fa:	4a34      	ldr	r2, [pc, #208]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056fc:	430b      	orrs	r3, r1
 80056fe:	6513      	str	r3, [r2, #80]	; 0x50
 8005700:	e003      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005702:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005706:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800570a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005712:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005716:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800571a:	2300      	movs	r3, #0
 800571c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005720:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005724:	460b      	mov	r3, r1
 8005726:	4313      	orrs	r3, r2
 8005728:	d056      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800572a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800572e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005734:	d033      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005736:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800573a:	d82c      	bhi.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800573c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005740:	d02f      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005742:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005746:	d826      	bhi.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005748:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800574c:	d02b      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800574e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005752:	d820      	bhi.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005754:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005758:	d012      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800575a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800575e:	d81a      	bhi.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005760:	2b00      	cmp	r3, #0
 8005762:	d022      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005768:	d115      	bne.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800576a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800576e:	3308      	adds	r3, #8
 8005770:	2101      	movs	r1, #1
 8005772:	4618      	mov	r0, r3
 8005774:	f002 f8e0 	bl	8007938 <RCCEx_PLL2_Config>
 8005778:	4603      	mov	r3, r0
 800577a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800577e:	e015      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005784:	3328      	adds	r3, #40	; 0x28
 8005786:	2101      	movs	r1, #1
 8005788:	4618      	mov	r0, r3
 800578a:	f002 f987 	bl	8007a9c <RCCEx_PLL3_Config>
 800578e:	4603      	mov	r3, r0
 8005790:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005794:	e00a      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800579c:	e006      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800579e:	bf00      	nop
 80057a0:	e004      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057a2:	bf00      	nop
 80057a4:	e002      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057a6:	bf00      	nop
 80057a8:	e000      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10d      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80057b4:	4b05      	ldr	r3, [pc, #20]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80057bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057c2:	4a02      	ldr	r2, [pc, #8]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057c4:	430b      	orrs	r3, r1
 80057c6:	6513      	str	r3, [r2, #80]	; 0x50
 80057c8:	e006      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80057ca:	bf00      	nop
 80057cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80057d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80057e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057e8:	2300      	movs	r3, #0
 80057ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057ee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4313      	orrs	r3, r2
 80057f6:	d055      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80057f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005800:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005804:	d033      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800580a:	d82c      	bhi.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800580c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005810:	d02f      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005816:	d826      	bhi.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005818:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800581c:	d02b      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800581e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005822:	d820      	bhi.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005828:	d012      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800582a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800582e:	d81a      	bhi.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005830:	2b00      	cmp	r3, #0
 8005832:	d022      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005834:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005838:	d115      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800583a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800583e:	3308      	adds	r3, #8
 8005840:	2101      	movs	r1, #1
 8005842:	4618      	mov	r0, r3
 8005844:	f002 f878 	bl	8007938 <RCCEx_PLL2_Config>
 8005848:	4603      	mov	r3, r0
 800584a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800584e:	e015      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005854:	3328      	adds	r3, #40	; 0x28
 8005856:	2101      	movs	r1, #1
 8005858:	4618      	mov	r0, r3
 800585a:	f002 f91f 	bl	8007a9c <RCCEx_PLL3_Config>
 800585e:	4603      	mov	r3, r0
 8005860:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005864:	e00a      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800586c:	e006      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800586e:	bf00      	nop
 8005870:	e004      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005872:	bf00      	nop
 8005874:	e002      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005876:	bf00      	nop
 8005878:	e000      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800587a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800587c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10b      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005884:	4ba3      	ldr	r3, [pc, #652]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005888:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800588c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005890:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005894:	4a9f      	ldr	r2, [pc, #636]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005896:	430b      	orrs	r3, r1
 8005898:	6593      	str	r3, [r2, #88]	; 0x58
 800589a:	e003      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800589c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80058b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058b4:	2300      	movs	r3, #0
 80058b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80058ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058be:	460b      	mov	r3, r1
 80058c0:	4313      	orrs	r3, r2
 80058c2:	d037      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80058c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ce:	d00e      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80058d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058d4:	d816      	bhi.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d018      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80058da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058de:	d111      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e0:	4b8c      	ldr	r3, [pc, #560]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	4a8b      	ldr	r2, [pc, #556]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80058ec:	e00f      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f2:	3308      	adds	r3, #8
 80058f4:	2101      	movs	r1, #1
 80058f6:	4618      	mov	r0, r3
 80058f8:	f002 f81e 	bl	8007938 <RCCEx_PLL2_Config>
 80058fc:	4603      	mov	r3, r0
 80058fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005902:	e004      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800590a:	e000      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800590c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800590e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10a      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005916:	4b7f      	ldr	r3, [pc, #508]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800591a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800591e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005924:	4a7b      	ldr	r2, [pc, #492]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005926:	430b      	orrs	r3, r1
 8005928:	6513      	str	r3, [r2, #80]	; 0x50
 800592a:	e003      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005930:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005940:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005944:	2300      	movs	r3, #0
 8005946:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800594a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800594e:	460b      	mov	r3, r1
 8005950:	4313      	orrs	r3, r2
 8005952:	d039      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800595a:	2b03      	cmp	r3, #3
 800595c:	d81c      	bhi.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800595e:	a201      	add	r2, pc, #4	; (adr r2, 8005964 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005964:	080059a1 	.word	0x080059a1
 8005968:	08005975 	.word	0x08005975
 800596c:	08005983 	.word	0x08005983
 8005970:	080059a1 	.word	0x080059a1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005974:	4b67      	ldr	r3, [pc, #412]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	4a66      	ldr	r2, [pc, #408]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800597a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800597e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005980:	e00f      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005986:	3308      	adds	r3, #8
 8005988:	2102      	movs	r1, #2
 800598a:	4618      	mov	r0, r3
 800598c:	f001 ffd4 	bl	8007938 <RCCEx_PLL2_Config>
 8005990:	4603      	mov	r3, r0
 8005992:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005996:	e004      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800599e:	e000      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80059a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10a      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80059aa:	4b5a      	ldr	r3, [pc, #360]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ae:	f023 0103 	bic.w	r1, r3, #3
 80059b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b8:	4a56      	ldr	r2, [pc, #344]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059ba:	430b      	orrs	r3, r1
 80059bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059be:	e003      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80059d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059d8:	2300      	movs	r3, #0
 80059da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80059e2:	460b      	mov	r3, r1
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f000 809f 	beq.w	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059ea:	4b4b      	ldr	r3, [pc, #300]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a4a      	ldr	r2, [pc, #296]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80059f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059f6:	f7fc fb7d 	bl	80020f4 <HAL_GetTick>
 80059fa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059fe:	e00b      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a00:	f7fc fb78 	bl	80020f4 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b64      	cmp	r3, #100	; 0x64
 8005a0e:	d903      	bls.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a16:	e005      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a18:	4b3f      	ldr	r3, [pc, #252]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0ed      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005a24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d179      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005a2c:	4b39      	ldr	r3, [pc, #228]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a38:	4053      	eors	r3, r2
 8005a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d015      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a42:	4b34      	ldr	r3, [pc, #208]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a4e:	4b31      	ldr	r3, [pc, #196]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a52:	4a30      	ldr	r2, [pc, #192]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a58:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a5a:	4b2e      	ldr	r3, [pc, #184]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5e:	4a2d      	ldr	r2, [pc, #180]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a64:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005a66:	4a2b      	ldr	r2, [pc, #172]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a6c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a7a:	d118      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7c:	f7fc fb3a 	bl	80020f4 <HAL_GetTick>
 8005a80:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a84:	e00d      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a86:	f7fc fb35 	bl	80020f4 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a90:	1ad2      	subs	r2, r2, r3
 8005a92:	f241 3388 	movw	r3, #5000	; 0x1388
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d903      	bls.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005aa0:	e005      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005aa2:	4b1c      	ldr	r3, [pc, #112]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0eb      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005aae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d129      	bne.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ac6:	d10e      	bne.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005ac8:	4b12      	ldr	r3, [pc, #72]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ad4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ad8:	091a      	lsrs	r2, r3, #4
 8005ada:	4b10      	ldr	r3, [pc, #64]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	4a0d      	ldr	r2, [pc, #52]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ae0:	430b      	orrs	r3, r1
 8005ae2:	6113      	str	r3, [r2, #16]
 8005ae4:	e005      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005ae6:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	4a0a      	ldr	r2, [pc, #40]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005aec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005af0:	6113      	str	r3, [r2, #16]
 8005af2:	4b08      	ldr	r3, [pc, #32]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005af4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005afa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b02:	4a04      	ldr	r2, [pc, #16]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b04:	430b      	orrs	r3, r1
 8005b06:	6713      	str	r3, [r2, #112]	; 0x70
 8005b08:	e00e      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005b12:	e009      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005b14:	58024400 	.word	0x58024400
 8005b18:	58024800 	.word	0x58024800
 8005b1c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b30:	f002 0301 	and.w	r3, r2, #1
 8005b34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b3e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f000 8089 	beq.w	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b50:	2b28      	cmp	r3, #40	; 0x28
 8005b52:	d86b      	bhi.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005b54:	a201      	add	r2, pc, #4	; (adr r2, 8005b5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5a:	bf00      	nop
 8005b5c:	08005c35 	.word	0x08005c35
 8005b60:	08005c2d 	.word	0x08005c2d
 8005b64:	08005c2d 	.word	0x08005c2d
 8005b68:	08005c2d 	.word	0x08005c2d
 8005b6c:	08005c2d 	.word	0x08005c2d
 8005b70:	08005c2d 	.word	0x08005c2d
 8005b74:	08005c2d 	.word	0x08005c2d
 8005b78:	08005c2d 	.word	0x08005c2d
 8005b7c:	08005c01 	.word	0x08005c01
 8005b80:	08005c2d 	.word	0x08005c2d
 8005b84:	08005c2d 	.word	0x08005c2d
 8005b88:	08005c2d 	.word	0x08005c2d
 8005b8c:	08005c2d 	.word	0x08005c2d
 8005b90:	08005c2d 	.word	0x08005c2d
 8005b94:	08005c2d 	.word	0x08005c2d
 8005b98:	08005c2d 	.word	0x08005c2d
 8005b9c:	08005c17 	.word	0x08005c17
 8005ba0:	08005c2d 	.word	0x08005c2d
 8005ba4:	08005c2d 	.word	0x08005c2d
 8005ba8:	08005c2d 	.word	0x08005c2d
 8005bac:	08005c2d 	.word	0x08005c2d
 8005bb0:	08005c2d 	.word	0x08005c2d
 8005bb4:	08005c2d 	.word	0x08005c2d
 8005bb8:	08005c2d 	.word	0x08005c2d
 8005bbc:	08005c35 	.word	0x08005c35
 8005bc0:	08005c2d 	.word	0x08005c2d
 8005bc4:	08005c2d 	.word	0x08005c2d
 8005bc8:	08005c2d 	.word	0x08005c2d
 8005bcc:	08005c2d 	.word	0x08005c2d
 8005bd0:	08005c2d 	.word	0x08005c2d
 8005bd4:	08005c2d 	.word	0x08005c2d
 8005bd8:	08005c2d 	.word	0x08005c2d
 8005bdc:	08005c35 	.word	0x08005c35
 8005be0:	08005c2d 	.word	0x08005c2d
 8005be4:	08005c2d 	.word	0x08005c2d
 8005be8:	08005c2d 	.word	0x08005c2d
 8005bec:	08005c2d 	.word	0x08005c2d
 8005bf0:	08005c2d 	.word	0x08005c2d
 8005bf4:	08005c2d 	.word	0x08005c2d
 8005bf8:	08005c2d 	.word	0x08005c2d
 8005bfc:	08005c35 	.word	0x08005c35
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c04:	3308      	adds	r3, #8
 8005c06:	2101      	movs	r1, #1
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f001 fe95 	bl	8007938 <RCCEx_PLL2_Config>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c14:	e00f      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c1a:	3328      	adds	r3, #40	; 0x28
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f001 ff3c 	bl	8007a9c <RCCEx_PLL3_Config>
 8005c24:	4603      	mov	r3, r0
 8005c26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c2a:	e004      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c32:	e000      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10a      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005c3e:	4bbf      	ldr	r3, [pc, #764]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c42:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c4c:	4abb      	ldr	r2, [pc, #748]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c4e:	430b      	orrs	r3, r1
 8005c50:	6553      	str	r3, [r2, #84]	; 0x54
 8005c52:	e003      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	f002 0302 	and.w	r3, r2, #2
 8005c68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005c72:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005c76:	460b      	mov	r3, r1
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	d041      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c82:	2b05      	cmp	r3, #5
 8005c84:	d824      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005c86:	a201      	add	r2, pc, #4	; (adr r2, 8005c8c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8c:	08005cd9 	.word	0x08005cd9
 8005c90:	08005ca5 	.word	0x08005ca5
 8005c94:	08005cbb 	.word	0x08005cbb
 8005c98:	08005cd9 	.word	0x08005cd9
 8005c9c:	08005cd9 	.word	0x08005cd9
 8005ca0:	08005cd9 	.word	0x08005cd9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ca8:	3308      	adds	r3, #8
 8005caa:	2101      	movs	r1, #1
 8005cac:	4618      	mov	r0, r3
 8005cae:	f001 fe43 	bl	8007938 <RCCEx_PLL2_Config>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005cb8:	e00f      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cbe:	3328      	adds	r3, #40	; 0x28
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f001 feea 	bl	8007a9c <RCCEx_PLL3_Config>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005cce:	e004      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005cd6:	e000      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10a      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005ce2:	4b96      	ldr	r3, [pc, #600]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce6:	f023 0107 	bic.w	r1, r3, #7
 8005cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cf0:	4a92      	ldr	r2, [pc, #584]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cf2:	430b      	orrs	r3, r1
 8005cf4:	6553      	str	r3, [r2, #84]	; 0x54
 8005cf6:	e003      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d08:	f002 0304 	and.w	r3, r2, #4
 8005d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d10:	2300      	movs	r3, #0
 8005d12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d16:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	d044      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d28:	2b05      	cmp	r3, #5
 8005d2a:	d825      	bhi.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005d2c:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d32:	bf00      	nop
 8005d34:	08005d81 	.word	0x08005d81
 8005d38:	08005d4d 	.word	0x08005d4d
 8005d3c:	08005d63 	.word	0x08005d63
 8005d40:	08005d81 	.word	0x08005d81
 8005d44:	08005d81 	.word	0x08005d81
 8005d48:	08005d81 	.word	0x08005d81
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d50:	3308      	adds	r3, #8
 8005d52:	2101      	movs	r1, #1
 8005d54:	4618      	mov	r0, r3
 8005d56:	f001 fdef 	bl	8007938 <RCCEx_PLL2_Config>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005d60:	e00f      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d66:	3328      	adds	r3, #40	; 0x28
 8005d68:	2101      	movs	r1, #1
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f001 fe96 	bl	8007a9c <RCCEx_PLL3_Config>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005d76:	e004      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d7e:	e000      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10b      	bne.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d8a:	4b6c      	ldr	r3, [pc, #432]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8e:	f023 0107 	bic.w	r1, r3, #7
 8005d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d9a:	4a68      	ldr	r2, [pc, #416]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d9c:	430b      	orrs	r3, r1
 8005d9e:	6593      	str	r3, [r2, #88]	; 0x58
 8005da0:	e003      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005da6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db2:	f002 0320 	and.w	r3, r2, #32
 8005db6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005dc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	d055      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dd6:	d033      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ddc:	d82c      	bhi.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de2:	d02f      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de8:	d826      	bhi.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005dea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dee:	d02b      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005df0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005df4:	d820      	bhi.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dfa:	d012      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e00:	d81a      	bhi.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d022      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005e06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e0a:	d115      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e10:	3308      	adds	r3, #8
 8005e12:	2100      	movs	r1, #0
 8005e14:	4618      	mov	r0, r3
 8005e16:	f001 fd8f 	bl	8007938 <RCCEx_PLL2_Config>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e20:	e015      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e26:	3328      	adds	r3, #40	; 0x28
 8005e28:	2102      	movs	r1, #2
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f001 fe36 	bl	8007a9c <RCCEx_PLL3_Config>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e36:	e00a      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e3e:	e006      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005e40:	bf00      	nop
 8005e42:	e004      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005e44:	bf00      	nop
 8005e46:	e002      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005e48:	bf00      	nop
 8005e4a:	e000      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10b      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e56:	4b39      	ldr	r3, [pc, #228]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e66:	4a35      	ldr	r2, [pc, #212]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	6553      	str	r3, [r2, #84]	; 0x54
 8005e6c:	e003      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005e82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e86:	2300      	movs	r3, #0
 8005e88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e8c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4313      	orrs	r3, r2
 8005e94:	d058      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e9e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005ea2:	d033      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005ea4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005ea8:	d82c      	bhi.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eae:	d02f      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb4:	d826      	bhi.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005eb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005eba:	d02b      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005ebc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ec0:	d820      	bhi.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005ec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec6:	d012      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005ec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ecc:	d81a      	bhi.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d022      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed6:	d115      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005edc:	3308      	adds	r3, #8
 8005ede:	2100      	movs	r1, #0
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f001 fd29 	bl	8007938 <RCCEx_PLL2_Config>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005eec:	e015      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ef2:	3328      	adds	r3, #40	; 0x28
 8005ef4:	2102      	movs	r1, #2
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f001 fdd0 	bl	8007a9c <RCCEx_PLL3_Config>
 8005efc:	4603      	mov	r3, r0
 8005efe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f02:	e00a      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f0a:	e006      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f0c:	bf00      	nop
 8005f0e:	e004      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f10:	bf00      	nop
 8005f12:	e002      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f14:	bf00      	nop
 8005f16:	e000      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10e      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f22:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f26:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f32:	4a02      	ldr	r2, [pc, #8]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f34:	430b      	orrs	r3, r1
 8005f36:	6593      	str	r3, [r2, #88]	; 0x58
 8005f38:	e006      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005f3a:	bf00      	nop
 8005f3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f50:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005f54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f5e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005f62:	460b      	mov	r3, r1
 8005f64:	4313      	orrs	r3, r2
 8005f66:	d055      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f70:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005f74:	d033      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005f76:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005f7a:	d82c      	bhi.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f80:	d02f      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f86:	d826      	bhi.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005f88:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005f8c:	d02b      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005f8e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005f92:	d820      	bhi.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005f94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f98:	d012      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005f9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f9e:	d81a      	bhi.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d022      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fa8:	d115      	bne.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fae:	3308      	adds	r3, #8
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f001 fcc0 	bl	8007938 <RCCEx_PLL2_Config>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005fbe:	e015      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fc4:	3328      	adds	r3, #40	; 0x28
 8005fc6:	2102      	movs	r1, #2
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 fd67 	bl	8007a9c <RCCEx_PLL3_Config>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005fd4:	e00a      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005fdc:	e006      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005fde:	bf00      	nop
 8005fe0:	e004      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005fe2:	bf00      	nop
 8005fe4:	e002      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005fe6:	bf00      	nop
 8005fe8:	e000      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005fea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10b      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005ff4:	4ba1      	ldr	r3, [pc, #644]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006000:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006004:	4a9d      	ldr	r2, [pc, #628]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006006:	430b      	orrs	r3, r1
 8006008:	6593      	str	r3, [r2, #88]	; 0x58
 800600a:	e003      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800600c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006010:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601c:	f002 0308 	and.w	r3, r2, #8
 8006020:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006024:	2300      	movs	r3, #0
 8006026:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800602a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800602e:	460b      	mov	r3, r1
 8006030:	4313      	orrs	r3, r2
 8006032:	d01e      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800603c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006040:	d10c      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006046:	3328      	adds	r3, #40	; 0x28
 8006048:	2102      	movs	r1, #2
 800604a:	4618      	mov	r0, r3
 800604c:	f001 fd26 	bl	8007a9c <RCCEx_PLL3_Config>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800605c:	4b87      	ldr	r3, [pc, #540]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800605e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006060:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800606c:	4a83      	ldr	r2, [pc, #524]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800606e:	430b      	orrs	r3, r1
 8006070:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607a:	f002 0310 	and.w	r3, r2, #16
 800607e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006082:	2300      	movs	r3, #0
 8006084:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006088:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800608c:	460b      	mov	r3, r1
 800608e:	4313      	orrs	r3, r2
 8006090:	d01e      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006096:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800609a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800609e:	d10c      	bne.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80060a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a4:	3328      	adds	r3, #40	; 0x28
 80060a6:	2102      	movs	r1, #2
 80060a8:	4618      	mov	r0, r3
 80060aa:	f001 fcf7 	bl	8007a9c <RCCEx_PLL3_Config>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060ba:	4b70      	ldr	r3, [pc, #448]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060ca:	4a6c      	ldr	r2, [pc, #432]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060cc:	430b      	orrs	r3, r1
 80060ce:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80060dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060e0:	2300      	movs	r3, #0
 80060e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80060ea:	460b      	mov	r3, r1
 80060ec:	4313      	orrs	r3, r2
 80060ee:	d03e      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80060f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80060f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060fc:	d022      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80060fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006102:	d81b      	bhi.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006104:	2b00      	cmp	r3, #0
 8006106:	d003      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800610c:	d00b      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800610e:	e015      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006114:	3308      	adds	r3, #8
 8006116:	2100      	movs	r1, #0
 8006118:	4618      	mov	r0, r3
 800611a:	f001 fc0d 	bl	8007938 <RCCEx_PLL2_Config>
 800611e:	4603      	mov	r3, r0
 8006120:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006124:	e00f      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800612a:	3328      	adds	r3, #40	; 0x28
 800612c:	2102      	movs	r1, #2
 800612e:	4618      	mov	r0, r3
 8006130:	f001 fcb4 	bl	8007a9c <RCCEx_PLL3_Config>
 8006134:	4603      	mov	r3, r0
 8006136:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800613a:	e004      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006142:	e000      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006146:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10b      	bne.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800614e:	4b4b      	ldr	r3, [pc, #300]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006152:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800615a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800615e:	4a47      	ldr	r2, [pc, #284]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006160:	430b      	orrs	r3, r1
 8006162:	6593      	str	r3, [r2, #88]	; 0x58
 8006164:	e003      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006166:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800616a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800616e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006176:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800617a:	67bb      	str	r3, [r7, #120]	; 0x78
 800617c:	2300      	movs	r3, #0
 800617e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006180:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006184:	460b      	mov	r3, r1
 8006186:	4313      	orrs	r3, r2
 8006188:	d03b      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800618a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800618e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006192:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006196:	d01f      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006198:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800619c:	d818      	bhi.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800619e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061a2:	d003      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80061a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061a8:	d007      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80061aa:	e011      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ac:	4b33      	ldr	r3, [pc, #204]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	4a32      	ldr	r2, [pc, #200]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80061b8:	e00f      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061be:	3328      	adds	r3, #40	; 0x28
 80061c0:	2101      	movs	r1, #1
 80061c2:	4618      	mov	r0, r3
 80061c4:	f001 fc6a 	bl	8007a9c <RCCEx_PLL3_Config>
 80061c8:	4603      	mov	r3, r0
 80061ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80061ce:	e004      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061d6:	e000      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80061d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10b      	bne.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061e2:	4b26      	ldr	r3, [pc, #152]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80061ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f2:	4a22      	ldr	r2, [pc, #136]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061f4:	430b      	orrs	r3, r1
 80061f6:	6553      	str	r3, [r2, #84]	; 0x54
 80061f8:	e003      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800620e:	673b      	str	r3, [r7, #112]	; 0x70
 8006210:	2300      	movs	r3, #0
 8006212:	677b      	str	r3, [r7, #116]	; 0x74
 8006214:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006218:	460b      	mov	r3, r1
 800621a:	4313      	orrs	r3, r2
 800621c:	d034      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800621e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800622c:	d007      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800622e:	e011      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006230:	4b12      	ldr	r3, [pc, #72]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006234:	4a11      	ldr	r2, [pc, #68]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800623a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800623c:	e00e      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800623e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006242:	3308      	adds	r3, #8
 8006244:	2102      	movs	r1, #2
 8006246:	4618      	mov	r0, r3
 8006248:	f001 fb76 	bl	8007938 <RCCEx_PLL2_Config>
 800624c:	4603      	mov	r3, r0
 800624e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006252:	e003      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800625a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800625c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10d      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006264:	4b05      	ldr	r3, [pc, #20]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006268:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800626c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006272:	4a02      	ldr	r2, [pc, #8]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006274:	430b      	orrs	r3, r1
 8006276:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006278:	e006      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800627a:	bf00      	nop
 800627c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006280:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006284:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006294:	66bb      	str	r3, [r7, #104]	; 0x68
 8006296:	2300      	movs	r3, #0
 8006298:	66fb      	str	r3, [r7, #108]	; 0x6c
 800629a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800629e:	460b      	mov	r3, r1
 80062a0:	4313      	orrs	r3, r2
 80062a2:	d00c      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a8:	3328      	adds	r3, #40	; 0x28
 80062aa:	2102      	movs	r1, #2
 80062ac:	4618      	mov	r0, r3
 80062ae:	f001 fbf5 	bl	8007a9c <RCCEx_PLL3_Config>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80062be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80062ca:	663b      	str	r3, [r7, #96]	; 0x60
 80062cc:	2300      	movs	r3, #0
 80062ce:	667b      	str	r3, [r7, #100]	; 0x64
 80062d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80062d4:	460b      	mov	r3, r1
 80062d6:	4313      	orrs	r3, r2
 80062d8:	d038      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80062da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062e6:	d018      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80062e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ec:	d811      	bhi.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80062ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062f2:	d014      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80062f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062f8:	d80b      	bhi.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d011      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80062fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006302:	d106      	bne.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006304:	4bc3      	ldr	r3, [pc, #780]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	4ac2      	ldr	r2, [pc, #776]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800630a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800630e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006310:	e008      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006318:	e004      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800631a:	bf00      	nop
 800631c:	e002      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800631e:	bf00      	nop
 8006320:	e000      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006322:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006324:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10b      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800632c:	4bb9      	ldr	r3, [pc, #740]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800632e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006330:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006338:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800633c:	4ab5      	ldr	r2, [pc, #724]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800633e:	430b      	orrs	r3, r1
 8006340:	6553      	str	r3, [r2, #84]	; 0x54
 8006342:	e003      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006344:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006348:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800634c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006358:	65bb      	str	r3, [r7, #88]	; 0x58
 800635a:	2300      	movs	r3, #0
 800635c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800635e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006362:	460b      	mov	r3, r1
 8006364:	4313      	orrs	r3, r2
 8006366:	d009      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006368:	4baa      	ldr	r3, [pc, #680]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800636a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006376:	4aa7      	ldr	r2, [pc, #668]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006378:	430b      	orrs	r3, r1
 800637a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800637c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006384:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006388:	653b      	str	r3, [r7, #80]	; 0x50
 800638a:	2300      	movs	r3, #0
 800638c:	657b      	str	r3, [r7, #84]	; 0x54
 800638e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006392:	460b      	mov	r3, r1
 8006394:	4313      	orrs	r3, r2
 8006396:	d00a      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006398:	4b9e      	ldr	r3, [pc, #632]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80063a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80063a8:	4a9a      	ldr	r2, [pc, #616]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063aa:	430b      	orrs	r3, r1
 80063ac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80063ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80063bc:	2300      	movs	r3, #0
 80063be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80063c4:	460b      	mov	r3, r1
 80063c6:	4313      	orrs	r3, r2
 80063c8:	d009      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063ca:	4b92      	ldr	r3, [pc, #584]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ce:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80063d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063d8:	4a8e      	ldr	r2, [pc, #568]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063da:	430b      	orrs	r3, r1
 80063dc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80063de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80063ea:	643b      	str	r3, [r7, #64]	; 0x40
 80063ec:	2300      	movs	r3, #0
 80063ee:	647b      	str	r3, [r7, #68]	; 0x44
 80063f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80063f4:	460b      	mov	r3, r1
 80063f6:	4313      	orrs	r3, r2
 80063f8:	d00e      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80063fa:	4b86      	ldr	r3, [pc, #536]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	4a85      	ldr	r2, [pc, #532]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006400:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006404:	6113      	str	r3, [r2, #16]
 8006406:	4b83      	ldr	r3, [pc, #524]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006408:	6919      	ldr	r1, [r3, #16]
 800640a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800640e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006412:	4a80      	ldr	r2, [pc, #512]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006414:	430b      	orrs	r3, r1
 8006416:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006424:	63bb      	str	r3, [r7, #56]	; 0x38
 8006426:	2300      	movs	r3, #0
 8006428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800642a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800642e:	460b      	mov	r3, r1
 8006430:	4313      	orrs	r3, r2
 8006432:	d009      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006434:	4b77      	ldr	r3, [pc, #476]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006438:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800643c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006442:	4a74      	ldr	r2, [pc, #464]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006444:	430b      	orrs	r3, r1
 8006446:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006454:	633b      	str	r3, [r7, #48]	; 0x30
 8006456:	2300      	movs	r3, #0
 8006458:	637b      	str	r3, [r7, #52]	; 0x34
 800645a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800645e:	460b      	mov	r3, r1
 8006460:	4313      	orrs	r3, r2
 8006462:	d00a      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006464:	4b6b      	ldr	r3, [pc, #428]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006468:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800646c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006474:	4a67      	ldr	r2, [pc, #412]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006476:	430b      	orrs	r3, r1
 8006478:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800647a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	2100      	movs	r1, #0
 8006484:	62b9      	str	r1, [r7, #40]	; 0x28
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800648c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006490:	460b      	mov	r3, r1
 8006492:	4313      	orrs	r3, r2
 8006494:	d011      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800649a:	3308      	adds	r3, #8
 800649c:	2100      	movs	r1, #0
 800649e:	4618      	mov	r0, r3
 80064a0:	f001 fa4a 	bl	8007938 <RCCEx_PLL2_Config>
 80064a4:	4603      	mov	r3, r0
 80064a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80064aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80064ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c2:	2100      	movs	r1, #0
 80064c4:	6239      	str	r1, [r7, #32]
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
 80064cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80064d0:	460b      	mov	r3, r1
 80064d2:	4313      	orrs	r3, r2
 80064d4:	d011      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064da:	3308      	adds	r3, #8
 80064dc:	2101      	movs	r1, #1
 80064de:	4618      	mov	r0, r3
 80064e0:	f001 fa2a 	bl	8007938 <RCCEx_PLL2_Config>
 80064e4:	4603      	mov	r3, r0
 80064e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80064ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80064fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006502:	2100      	movs	r1, #0
 8006504:	61b9      	str	r1, [r7, #24]
 8006506:	f003 0304 	and.w	r3, r3, #4
 800650a:	61fb      	str	r3, [r7, #28]
 800650c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006510:	460b      	mov	r3, r1
 8006512:	4313      	orrs	r3, r2
 8006514:	d011      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800651a:	3308      	adds	r3, #8
 800651c:	2102      	movs	r1, #2
 800651e:	4618      	mov	r0, r3
 8006520:	f001 fa0a 	bl	8007938 <RCCEx_PLL2_Config>
 8006524:	4603      	mov	r3, r0
 8006526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800652a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006532:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006536:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800653a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800653e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006542:	2100      	movs	r1, #0
 8006544:	6139      	str	r1, [r7, #16]
 8006546:	f003 0308 	and.w	r3, r3, #8
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006550:	460b      	mov	r3, r1
 8006552:	4313      	orrs	r3, r2
 8006554:	d011      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800655a:	3328      	adds	r3, #40	; 0x28
 800655c:	2100      	movs	r1, #0
 800655e:	4618      	mov	r0, r3
 8006560:	f001 fa9c 	bl	8007a9c <RCCEx_PLL3_Config>
 8006564:	4603      	mov	r3, r0
 8006566:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800656a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006572:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006576:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800657a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006582:	2100      	movs	r1, #0
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	f003 0310 	and.w	r3, r3, #16
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006590:	460b      	mov	r3, r1
 8006592:	4313      	orrs	r3, r2
 8006594:	d011      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800659a:	3328      	adds	r3, #40	; 0x28
 800659c:	2101      	movs	r1, #1
 800659e:	4618      	mov	r0, r3
 80065a0:	f001 fa7c 	bl	8007a9c <RCCEx_PLL3_Config>
 80065a4:	4603      	mov	r3, r0
 80065a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80065aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80065ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c2:	2100      	movs	r1, #0
 80065c4:	6039      	str	r1, [r7, #0]
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	607b      	str	r3, [r7, #4]
 80065cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80065d0:	460b      	mov	r3, r1
 80065d2:	4313      	orrs	r3, r2
 80065d4:	d011      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065da:	3328      	adds	r3, #40	; 0x28
 80065dc:	2102      	movs	r1, #2
 80065de:	4618      	mov	r0, r3
 80065e0:	f001 fa5c 	bl	8007a9c <RCCEx_PLL3_Config>
 80065e4:	4603      	mov	r3, r0
 80065e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80065ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80065fa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	e000      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
}
 8006608:	4618      	mov	r0, r3
 800660a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800660e:	46bd      	mov	sp, r7
 8006610:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006614:	58024400 	.word	0x58024400

08006618 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b090      	sub	sp, #64	; 0x40
 800661c:	af00      	add	r7, sp, #0
 800661e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006622:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006626:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800662a:	430b      	orrs	r3, r1
 800662c:	f040 8094 	bne.w	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006630:	4b9e      	ldr	r3, [pc, #632]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	2b04      	cmp	r3, #4
 800663e:	f200 8087 	bhi.w	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006642:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006648:	0800665d 	.word	0x0800665d
 800664c:	08006685 	.word	0x08006685
 8006650:	080066ad 	.word	0x080066ad
 8006654:	08006749 	.word	0x08006749
 8006658:	080066d5 	.word	0x080066d5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800665c:	4b93      	ldr	r3, [pc, #588]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006664:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006668:	d108      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800666a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800666e:	4618      	mov	r0, r3
 8006670:	f001 f810 	bl	8007694 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006678:	f000 bd45 	b.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800667c:	2300      	movs	r3, #0
 800667e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006680:	f000 bd41 	b.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006684:	4b89      	ldr	r3, [pc, #548]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800668c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006690:	d108      	bne.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006692:	f107 0318 	add.w	r3, r7, #24
 8006696:	4618      	mov	r0, r3
 8006698:	f000 fd54 	bl	8007144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066a0:	f000 bd31 	b.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066a4:	2300      	movs	r3, #0
 80066a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066a8:	f000 bd2d 	b.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066ac:	4b7f      	ldr	r3, [pc, #508]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066b8:	d108      	bne.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066ba:	f107 030c 	add.w	r3, r7, #12
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 fe94 	bl	80073ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066c8:	f000 bd1d 	b.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066cc:	2300      	movs	r3, #0
 80066ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066d0:	f000 bd19 	b.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066d4:	4b75      	ldr	r3, [pc, #468]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066dc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066de:	4b73      	ldr	r3, [pc, #460]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0304 	and.w	r3, r3, #4
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	d10c      	bne.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80066ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d109      	bne.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066f0:	4b6e      	ldr	r3, [pc, #440]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	08db      	lsrs	r3, r3, #3
 80066f6:	f003 0303 	and.w	r3, r3, #3
 80066fa:	4a6d      	ldr	r2, [pc, #436]	; (80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80066fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006700:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006702:	e01f      	b.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006704:	4b69      	ldr	r3, [pc, #420]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800670c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006710:	d106      	bne.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006714:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006718:	d102      	bne.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800671a:	4b66      	ldr	r3, [pc, #408]	; (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800671c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800671e:	e011      	b.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006720:	4b62      	ldr	r3, [pc, #392]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006728:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800672c:	d106      	bne.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800672e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006734:	d102      	bne.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006736:	4b60      	ldr	r3, [pc, #384]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800673a:	e003      	b.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800673c:	2300      	movs	r3, #0
 800673e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006740:	f000 bce1 	b.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006744:	f000 bcdf 	b.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006748:	4b5c      	ldr	r3, [pc, #368]	; (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800674a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800674c:	f000 bcdb 	b.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006750:	2300      	movs	r3, #0
 8006752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006754:	f000 bcd7 	b.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800675c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006760:	430b      	orrs	r3, r1
 8006762:	f040 80ad 	bne.w	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006766:	4b51      	ldr	r3, [pc, #324]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800676a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800676e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006776:	d056      	beq.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800677e:	f200 8090 	bhi.w	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	2bc0      	cmp	r3, #192	; 0xc0
 8006786:	f000 8088 	beq.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	2bc0      	cmp	r3, #192	; 0xc0
 800678e:	f200 8088 	bhi.w	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	2b80      	cmp	r3, #128	; 0x80
 8006796:	d032      	beq.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679a:	2b80      	cmp	r3, #128	; 0x80
 800679c:	f200 8081 	bhi.w	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80067a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	2b40      	cmp	r3, #64	; 0x40
 80067aa:	d014      	beq.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80067ac:	e079      	b.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067ae:	4b3f      	ldr	r3, [pc, #252]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067ba:	d108      	bne.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 ff67 	bl	8007694 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067ca:	f000 bc9c 	b.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067ce:	2300      	movs	r3, #0
 80067d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067d2:	f000 bc98 	b.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067d6:	4b35      	ldr	r3, [pc, #212]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067e2:	d108      	bne.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067e4:	f107 0318 	add.w	r3, r7, #24
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fcab 	bl	8007144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067f2:	f000 bc88 	b.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067f6:	2300      	movs	r3, #0
 80067f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067fa:	f000 bc84 	b.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067fe:	4b2b      	ldr	r3, [pc, #172]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800680a:	d108      	bne.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800680c:	f107 030c 	add.w	r3, r7, #12
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fdeb 	bl	80073ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800681a:	f000 bc74 	b.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800681e:	2300      	movs	r3, #0
 8006820:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006822:	f000 bc70 	b.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006826:	4b21      	ldr	r3, [pc, #132]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800682a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800682e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006830:	4b1e      	ldr	r3, [pc, #120]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0304 	and.w	r3, r3, #4
 8006838:	2b04      	cmp	r3, #4
 800683a:	d10c      	bne.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800683c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800683e:	2b00      	cmp	r3, #0
 8006840:	d109      	bne.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006842:	4b1a      	ldr	r3, [pc, #104]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	08db      	lsrs	r3, r3, #3
 8006848:	f003 0303 	and.w	r3, r3, #3
 800684c:	4a18      	ldr	r2, [pc, #96]	; (80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800684e:	fa22 f303 	lsr.w	r3, r2, r3
 8006852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006854:	e01f      	b.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006856:	4b15      	ldr	r3, [pc, #84]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006862:	d106      	bne.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800686a:	d102      	bne.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800686c:	4b11      	ldr	r3, [pc, #68]	; (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800686e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006870:	e011      	b.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006872:	4b0e      	ldr	r3, [pc, #56]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800687a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800687e:	d106      	bne.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006882:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006886:	d102      	bne.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006888:	4b0b      	ldr	r3, [pc, #44]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800688a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800688c:	e003      	b.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800688e:	2300      	movs	r3, #0
 8006890:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006892:	f000 bc38 	b.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006896:	f000 bc36 	b.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800689a:	4b08      	ldr	r3, [pc, #32]	; (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800689c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800689e:	f000 bc32 	b.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80068a2:	2300      	movs	r3, #0
 80068a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068a6:	f000 bc2e 	b.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80068aa:	bf00      	nop
 80068ac:	58024400 	.word	0x58024400
 80068b0:	03d09000 	.word	0x03d09000
 80068b4:	003d0900 	.word	0x003d0900
 80068b8:	00f42400 	.word	0x00f42400
 80068bc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80068c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068c4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80068c8:	430b      	orrs	r3, r1
 80068ca:	f040 809c 	bne.w	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80068ce:	4b9e      	ldr	r3, [pc, #632]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80068d6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80068d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068de:	d054      	beq.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80068e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068e6:	f200 808b 	bhi.w	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80068f0:	f000 8083 	beq.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80068fa:	f200 8081 	bhi.w	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006904:	d02f      	beq.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800690c:	d878      	bhi.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006910:	2b00      	cmp	r3, #0
 8006912:	d004      	beq.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006916:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800691a:	d012      	beq.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800691c:	e070      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800691e:	4b8a      	ldr	r3, [pc, #552]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006926:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800692a:	d107      	bne.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800692c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006930:	4618      	mov	r0, r3
 8006932:	f000 feaf 	bl	8007694 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800693a:	e3e4      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006940:	e3e1      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006942:	4b81      	ldr	r3, [pc, #516]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800694a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800694e:	d107      	bne.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006950:	f107 0318 	add.w	r3, r7, #24
 8006954:	4618      	mov	r0, r3
 8006956:	f000 fbf5 	bl	8007144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800695e:	e3d2      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006960:	2300      	movs	r3, #0
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006964:	e3cf      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006966:	4b78      	ldr	r3, [pc, #480]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800696e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006972:	d107      	bne.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006974:	f107 030c 	add.w	r3, r7, #12
 8006978:	4618      	mov	r0, r3
 800697a:	f000 fd37 	bl	80073ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006982:	e3c0      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006984:	2300      	movs	r3, #0
 8006986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006988:	e3bd      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800698a:	4b6f      	ldr	r3, [pc, #444]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800698c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800698e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006992:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006994:	4b6c      	ldr	r3, [pc, #432]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0304 	and.w	r3, r3, #4
 800699c:	2b04      	cmp	r3, #4
 800699e:	d10c      	bne.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80069a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d109      	bne.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069a6:	4b68      	ldr	r3, [pc, #416]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	08db      	lsrs	r3, r3, #3
 80069ac:	f003 0303 	and.w	r3, r3, #3
 80069b0:	4a66      	ldr	r2, [pc, #408]	; (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80069b2:	fa22 f303 	lsr.w	r3, r2, r3
 80069b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b8:	e01e      	b.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069ba:	4b63      	ldr	r3, [pc, #396]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069c6:	d106      	bne.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80069c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069ce:	d102      	bne.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80069d0:	4b5f      	ldr	r3, [pc, #380]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069d4:	e010      	b.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069d6:	4b5c      	ldr	r3, [pc, #368]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069e2:	d106      	bne.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80069e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ea:	d102      	bne.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80069ec:	4b59      	ldr	r3, [pc, #356]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80069ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069f0:	e002      	b.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80069f6:	e386      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069f8:	e385      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80069fa:	4b57      	ldr	r3, [pc, #348]	; (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80069fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069fe:	e382      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006a00:	2300      	movs	r3, #0
 8006a02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a04:	e37f      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006a06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a0a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006a0e:	430b      	orrs	r3, r1
 8006a10:	f040 80a7 	bne.w	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006a14:	4b4c      	ldr	r3, [pc, #304]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a18:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006a1c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a24:	d055      	beq.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a2c:	f200 8096 	bhi.w	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a36:	f000 8084 	beq.w	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a40:	f200 808c 	bhi.w	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a4a:	d030      	beq.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a52:	f200 8083 	bhi.w	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d004      	beq.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a62:	d012      	beq.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006a64:	e07a      	b.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a66:	4b38      	ldr	r3, [pc, #224]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a72:	d107      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 fe0b 	bl	8007694 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a82:	e340      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a88:	e33d      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a8a:	4b2f      	ldr	r3, [pc, #188]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a96:	d107      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a98:	f107 0318 	add.w	r3, r7, #24
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 fb51 	bl	8007144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aa6:	e32e      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aac:	e32b      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006aae:	4b26      	ldr	r3, [pc, #152]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aba:	d107      	bne.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006abc:	f107 030c 	add.w	r3, r7, #12
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 fc93 	bl	80073ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aca:	e31c      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006acc:	2300      	movs	r3, #0
 8006ace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ad0:	e319      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ad2:	4b1d      	ldr	r3, [pc, #116]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ada:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006adc:	4b1a      	ldr	r3, [pc, #104]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	d10c      	bne.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d109      	bne.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006aee:	4b16      	ldr	r3, [pc, #88]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	08db      	lsrs	r3, r3, #3
 8006af4:	f003 0303 	and.w	r3, r3, #3
 8006af8:	4a14      	ldr	r2, [pc, #80]	; (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006afa:	fa22 f303 	lsr.w	r3, r2, r3
 8006afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b00:	e01e      	b.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b02:	4b11      	ldr	r3, [pc, #68]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b0e:	d106      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b16:	d102      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b18:	4b0d      	ldr	r3, [pc, #52]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b1c:	e010      	b.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b1e:	4b0a      	ldr	r3, [pc, #40]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b2a:	d106      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b32:	d102      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b34:	4b07      	ldr	r3, [pc, #28]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b38:	e002      	b.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006b3e:	e2e2      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b40:	e2e1      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b42:	4b05      	ldr	r3, [pc, #20]	; (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006b44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b46:	e2de      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b48:	58024400 	.word	0x58024400
 8006b4c:	03d09000 	.word	0x03d09000
 8006b50:	003d0900 	.word	0x003d0900
 8006b54:	00f42400 	.word	0x00f42400
 8006b58:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b60:	e2d1      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006b62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b66:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006b6a:	430b      	orrs	r3, r1
 8006b6c:	f040 809c 	bne.w	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006b70:	4b93      	ldr	r3, [pc, #588]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b74:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006b78:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b80:	d054      	beq.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b88:	f200 808b 	bhi.w	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b92:	f000 8083 	beq.w	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b9c:	f200 8081 	bhi.w	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba6:	d02f      	beq.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bae:	d878      	bhi.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d004      	beq.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bbc:	d012      	beq.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006bbe:	e070      	b.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bc0:	4b7f      	ldr	r3, [pc, #508]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bcc:	d107      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fd5e 	bl	8007694 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bdc:	e293      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006be2:	e290      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006be4:	4b76      	ldr	r3, [pc, #472]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bf0:	d107      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bf2:	f107 0318 	add.w	r3, r7, #24
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 faa4 	bl	8007144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c00:	e281      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c06:	e27e      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c08:	4b6d      	ldr	r3, [pc, #436]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c14:	d107      	bne.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c16:	f107 030c 	add.w	r3, r7, #12
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 fbe6 	bl	80073ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c24:	e26f      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c26:	2300      	movs	r3, #0
 8006c28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c2a:	e26c      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c2c:	4b64      	ldr	r3, [pc, #400]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c34:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c36:	4b62      	ldr	r3, [pc, #392]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0304 	and.w	r3, r3, #4
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d10c      	bne.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d109      	bne.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c48:	4b5d      	ldr	r3, [pc, #372]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	08db      	lsrs	r3, r3, #3
 8006c4e:	f003 0303 	and.w	r3, r3, #3
 8006c52:	4a5c      	ldr	r2, [pc, #368]	; (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006c54:	fa22 f303 	lsr.w	r3, r2, r3
 8006c58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c5a:	e01e      	b.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c5c:	4b58      	ldr	r3, [pc, #352]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c68:	d106      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c70:	d102      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c72:	4b55      	ldr	r3, [pc, #340]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c76:	e010      	b.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c78:	4b51      	ldr	r3, [pc, #324]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c84:	d106      	bne.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c8c:	d102      	bne.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c8e:	4b4f      	ldr	r3, [pc, #316]	; (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c92:	e002      	b.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c94:	2300      	movs	r3, #0
 8006c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006c98:	e235      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c9a:	e234      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c9c:	4b4c      	ldr	r3, [pc, #304]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ca0:	e231      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ca6:	e22e      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006ca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cac:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006cb0:	430b      	orrs	r3, r1
 8006cb2:	f040 808f 	bne.w	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006cb6:	4b42      	ldr	r3, [pc, #264]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cba:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006cbe:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cc6:	d06b      	beq.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cce:	d874      	bhi.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cd6:	d056      	beq.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cde:	d86c      	bhi.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ce6:	d03b      	beq.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cee:	d864      	bhi.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cf6:	d021      	beq.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cfe:	d85c      	bhi.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d004      	beq.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d0c:	d004      	beq.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006d0e:	e054      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006d10:	f7fe fa62 	bl	80051d8 <HAL_RCC_GetPCLK1Freq>
 8006d14:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d16:	e1f6      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d18:	4b29      	ldr	r3, [pc, #164]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d24:	d107      	bne.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d26:	f107 0318 	add.w	r3, r7, #24
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fa0a 	bl	8007144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d34:	e1e7      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d36:	2300      	movs	r3, #0
 8006d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d3a:	e1e4      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d3c:	4b20      	ldr	r3, [pc, #128]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d48:	d107      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d4a:	f107 030c 	add.w	r3, r7, #12
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fb4c 	bl	80073ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d58:	e1d5      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d5e:	e1d2      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d60:	4b17      	ldr	r3, [pc, #92]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b04      	cmp	r3, #4
 8006d6a:	d109      	bne.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d6c:	4b14      	ldr	r3, [pc, #80]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	08db      	lsrs	r3, r3, #3
 8006d72:	f003 0303 	and.w	r3, r3, #3
 8006d76:	4a13      	ldr	r2, [pc, #76]	; (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006d78:	fa22 f303 	lsr.w	r3, r2, r3
 8006d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d7e:	e1c2      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d80:	2300      	movs	r3, #0
 8006d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d84:	e1bf      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006d86:	4b0e      	ldr	r3, [pc, #56]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d92:	d102      	bne.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006d94:	4b0c      	ldr	r3, [pc, #48]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d98:	e1b5      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d9e:	e1b2      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006da0:	4b07      	ldr	r3, [pc, #28]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dac:	d102      	bne.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006dae:	4b07      	ldr	r3, [pc, #28]	; (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006db0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006db2:	e1a8      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006db4:	2300      	movs	r3, #0
 8006db6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006db8:	e1a5      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dbe:	e1a2      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006dc0:	58024400 	.word	0x58024400
 8006dc4:	03d09000 	.word	0x03d09000
 8006dc8:	003d0900 	.word	0x003d0900
 8006dcc:	00f42400 	.word	0x00f42400
 8006dd0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dd8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006ddc:	430b      	orrs	r3, r1
 8006dde:	d173      	bne.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006de0:	4b9c      	ldr	r3, [pc, #624]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006de8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006df0:	d02f      	beq.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006df8:	d863      	bhi.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d004      	beq.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e06:	d012      	beq.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006e08:	e05b      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e0a:	4b92      	ldr	r3, [pc, #584]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e16:	d107      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e18:	f107 0318 	add.w	r3, r7, #24
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 f991 	bl	8007144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e26:	e16e      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e2c:	e16b      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e2e:	4b89      	ldr	r3, [pc, #548]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e3a:	d107      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e3c:	f107 030c 	add.w	r3, r7, #12
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 fad3 	bl	80073ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e4a:	e15c      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e50:	e159      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e52:	4b80      	ldr	r3, [pc, #512]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e5a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e5c:	4b7d      	ldr	r3, [pc, #500]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d10c      	bne.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d109      	bne.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e6e:	4b79      	ldr	r3, [pc, #484]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	08db      	lsrs	r3, r3, #3
 8006e74:	f003 0303 	and.w	r3, r3, #3
 8006e78:	4a77      	ldr	r2, [pc, #476]	; (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e80:	e01e      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e82:	4b74      	ldr	r3, [pc, #464]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e8e:	d106      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e96:	d102      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e98:	4b70      	ldr	r3, [pc, #448]	; (800705c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e9c:	e010      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e9e:	4b6d      	ldr	r3, [pc, #436]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eaa:	d106      	bne.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eb2:	d102      	bne.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006eb4:	4b6a      	ldr	r3, [pc, #424]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eb8:	e002      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006ebe:	e122      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ec0:	e121      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ec6:	e11e      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ecc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006ed0:	430b      	orrs	r3, r1
 8006ed2:	d133      	bne.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006ed4:	4b5f      	ldr	r3, [pc, #380]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006edc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d004      	beq.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eea:	d012      	beq.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006eec:	e023      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006eee:	4b59      	ldr	r3, [pc, #356]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006efa:	d107      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 fbc7 	bl	8007694 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f0a:	e0fc      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f10:	e0f9      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f12:	4b50      	ldr	r3, [pc, #320]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f1e:	d107      	bne.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f20:	f107 0318 	add.w	r3, r7, #24
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 f90d 	bl	8007144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f2e:	e0ea      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f34:	e0e7      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006f36:	2300      	movs	r3, #0
 8006f38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f3a:	e0e4      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006f3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f40:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006f44:	430b      	orrs	r3, r1
 8006f46:	f040 808d 	bne.w	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006f4a:	4b42      	ldr	r3, [pc, #264]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f4e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006f52:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f5a:	d06b      	beq.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f62:	d874      	bhi.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f6a:	d056      	beq.n	800701a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f72:	d86c      	bhi.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f7a:	d03b      	beq.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f82:	d864      	bhi.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f8a:	d021      	beq.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f92:	d85c      	bhi.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d004      	beq.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fa0:	d004      	beq.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006fa2:	e054      	b.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006fa4:	f000 f8b8 	bl	8007118 <HAL_RCCEx_GetD3PCLK1Freq>
 8006fa8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006faa:	e0ac      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fac:	4b29      	ldr	r3, [pc, #164]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fb8:	d107      	bne.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fba:	f107 0318 	add.w	r3, r7, #24
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 f8c0 	bl	8007144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fc8:	e09d      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fce:	e09a      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fd0:	4b20      	ldr	r3, [pc, #128]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fdc:	d107      	bne.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fde:	f107 030c 	add.w	r3, r7, #12
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 fa02 	bl	80073ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fec:	e08b      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ff2:	e088      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ff4:	4b17      	ldr	r3, [pc, #92]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d109      	bne.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007000:	4b14      	ldr	r3, [pc, #80]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	08db      	lsrs	r3, r3, #3
 8007006:	f003 0303 	and.w	r3, r3, #3
 800700a:	4a13      	ldr	r2, [pc, #76]	; (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800700c:	fa22 f303 	lsr.w	r3, r2, r3
 8007010:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007012:	e078      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007014:	2300      	movs	r3, #0
 8007016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007018:	e075      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800701a:	4b0e      	ldr	r3, [pc, #56]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007026:	d102      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007028:	4b0c      	ldr	r3, [pc, #48]	; (800705c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800702a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800702c:	e06b      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800702e:	2300      	movs	r3, #0
 8007030:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007032:	e068      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007034:	4b07      	ldr	r3, [pc, #28]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800703c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007040:	d102      	bne.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007042:	4b07      	ldr	r3, [pc, #28]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007044:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007046:	e05e      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007048:	2300      	movs	r3, #0
 800704a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800704c:	e05b      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800704e:	2300      	movs	r3, #0
 8007050:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007052:	e058      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007054:	58024400 	.word	0x58024400
 8007058:	03d09000 	.word	0x03d09000
 800705c:	003d0900 	.word	0x003d0900
 8007060:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007068:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800706c:	430b      	orrs	r3, r1
 800706e:	d148      	bne.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007070:	4b27      	ldr	r3, [pc, #156]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007074:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007078:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800707a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007080:	d02a      	beq.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007088:	d838      	bhi.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800708a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708c:	2b00      	cmp	r3, #0
 800708e:	d004      	beq.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007092:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007096:	d00d      	beq.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007098:	e030      	b.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800709a:	4b1d      	ldr	r3, [pc, #116]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070a6:	d102      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80070a8:	4b1a      	ldr	r3, [pc, #104]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80070aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ac:	e02b      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070ae:	2300      	movs	r3, #0
 80070b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070b2:	e028      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070b4:	4b16      	ldr	r3, [pc, #88]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070c0:	d107      	bne.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 fae4 	bl	8007694 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070d0:	e019      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070d2:	2300      	movs	r3, #0
 80070d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070d6:	e016      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070d8:	4b0d      	ldr	r3, [pc, #52]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070e4:	d107      	bne.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070e6:	f107 0318 	add.w	r3, r7, #24
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 f82a 	bl	8007144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070f4:	e007      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070fa:	e004      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80070fc:	2300      	movs	r3, #0
 80070fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007100:	e001      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007102:	2300      	movs	r3, #0
 8007104:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007108:	4618      	mov	r0, r3
 800710a:	3740      	adds	r7, #64	; 0x40
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	58024400 	.word	0x58024400
 8007114:	00f42400 	.word	0x00f42400

08007118 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800711c:	f7fe f82c 	bl	8005178 <HAL_RCC_GetHCLKFreq>
 8007120:	4602      	mov	r2, r0
 8007122:	4b06      	ldr	r3, [pc, #24]	; (800713c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	091b      	lsrs	r3, r3, #4
 8007128:	f003 0307 	and.w	r3, r3, #7
 800712c:	4904      	ldr	r1, [pc, #16]	; (8007140 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800712e:	5ccb      	ldrb	r3, [r1, r3]
 8007130:	f003 031f 	and.w	r3, r3, #31
 8007134:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007138:	4618      	mov	r0, r3
 800713a:	bd80      	pop	{r7, pc}
 800713c:	58024400 	.word	0x58024400
 8007140:	0800db08 	.word	0x0800db08

08007144 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007144:	b480      	push	{r7}
 8007146:	b089      	sub	sp, #36	; 0x24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800714c:	4ba1      	ldr	r3, [pc, #644]	; (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800714e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007150:	f003 0303 	and.w	r3, r3, #3
 8007154:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007156:	4b9f      	ldr	r3, [pc, #636]	; (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715a:	0b1b      	lsrs	r3, r3, #12
 800715c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007160:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007162:	4b9c      	ldr	r3, [pc, #624]	; (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007166:	091b      	lsrs	r3, r3, #4
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800716e:	4b99      	ldr	r3, [pc, #612]	; (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007172:	08db      	lsrs	r3, r3, #3
 8007174:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	fb02 f303 	mul.w	r3, r2, r3
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007186:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 8111 	beq.w	80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	2b02      	cmp	r3, #2
 8007196:	f000 8083 	beq.w	80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	2b02      	cmp	r3, #2
 800719e:	f200 80a1 	bhi.w	80072e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d003      	beq.n	80071b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d056      	beq.n	800725c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80071ae:	e099      	b.n	80072e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071b0:	4b88      	ldr	r3, [pc, #544]	; (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0320 	and.w	r3, r3, #32
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d02d      	beq.n	8007218 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071bc:	4b85      	ldr	r3, [pc, #532]	; (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	08db      	lsrs	r3, r3, #3
 80071c2:	f003 0303 	and.w	r3, r3, #3
 80071c6:	4a84      	ldr	r2, [pc, #528]	; (80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80071c8:	fa22 f303 	lsr.w	r3, r2, r3
 80071cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	ee07 3a90 	vmov	s15, r3
 80071d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e6:	4b7b      	ldr	r3, [pc, #492]	; (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80073dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800720a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007212:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007216:	e087      	b.n	8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007222:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722a:	4b6a      	ldr	r3, [pc, #424]	; (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800722c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723a:	ed97 6a03 	vldr	s12, [r7, #12]
 800723e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80073dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800724e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800725a:	e065      	b.n	8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007266:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80073e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800726a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726e:	4b59      	ldr	r3, [pc, #356]	; (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800727e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007282:	eddf 5a56 	vldr	s11, [pc, #344]	; 80073dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800728e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800729e:	e043      	b.n	8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80072ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b2:	4b48      	ldr	r3, [pc, #288]	; (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80073dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072e2:	e021      	b.n	8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80073e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072f6:	4b37      	ldr	r3, [pc, #220]	; (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007306:	ed97 6a03 	vldr	s12, [r7, #12]
 800730a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80073dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800730e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800731a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800731e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007322:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007326:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007328:	4b2a      	ldr	r3, [pc, #168]	; (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800732a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732c:	0a5b      	lsrs	r3, r3, #9
 800732e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800733e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007342:	edd7 6a07 	vldr	s13, [r7, #28]
 8007346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800734a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800734e:	ee17 2a90 	vmov	r2, s15
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007356:	4b1f      	ldr	r3, [pc, #124]	; (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735a:	0c1b      	lsrs	r3, r3, #16
 800735c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007360:	ee07 3a90 	vmov	s15, r3
 8007364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007368:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800736c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007370:	edd7 6a07 	vldr	s13, [r7, #28]
 8007374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800737c:	ee17 2a90 	vmov	r2, s15
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007384:	4b13      	ldr	r3, [pc, #76]	; (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007388:	0e1b      	lsrs	r3, r3, #24
 800738a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800739a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800739e:	edd7 6a07 	vldr	s13, [r7, #28]
 80073a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073aa:	ee17 2a90 	vmov	r2, s15
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80073b2:	e008      	b.n	80073c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	609a      	str	r2, [r3, #8]
}
 80073c6:	bf00      	nop
 80073c8:	3724      	adds	r7, #36	; 0x24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	58024400 	.word	0x58024400
 80073d8:	03d09000 	.word	0x03d09000
 80073dc:	46000000 	.word	0x46000000
 80073e0:	4c742400 	.word	0x4c742400
 80073e4:	4a742400 	.word	0x4a742400
 80073e8:	4b742400 	.word	0x4b742400

080073ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b089      	sub	sp, #36	; 0x24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073f4:	4ba1      	ldr	r3, [pc, #644]	; (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80073fe:	4b9f      	ldr	r3, [pc, #636]	; (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007402:	0d1b      	lsrs	r3, r3, #20
 8007404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007408:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800740a:	4b9c      	ldr	r3, [pc, #624]	; (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800740c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740e:	0a1b      	lsrs	r3, r3, #8
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007416:	4b99      	ldr	r3, [pc, #612]	; (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741a:	08db      	lsrs	r3, r3, #3
 800741c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	fb02 f303 	mul.w	r3, r2, r3
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 8111 	beq.w	800765c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	2b02      	cmp	r3, #2
 800743e:	f000 8083 	beq.w	8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	2b02      	cmp	r3, #2
 8007446:	f200 80a1 	bhi.w	800758c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d003      	beq.n	8007458 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d056      	beq.n	8007504 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007456:	e099      	b.n	800758c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007458:	4b88      	ldr	r3, [pc, #544]	; (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0320 	and.w	r3, r3, #32
 8007460:	2b00      	cmp	r3, #0
 8007462:	d02d      	beq.n	80074c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007464:	4b85      	ldr	r3, [pc, #532]	; (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	08db      	lsrs	r3, r3, #3
 800746a:	f003 0303 	and.w	r3, r3, #3
 800746e:	4a84      	ldr	r2, [pc, #528]	; (8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007470:	fa22 f303 	lsr.w	r3, r2, r3
 8007474:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	ee07 3a90 	vmov	s15, r3
 800747c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	ee07 3a90 	vmov	s15, r3
 8007486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800748e:	4b7b      	ldr	r3, [pc, #492]	; (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007496:	ee07 3a90 	vmov	s15, r3
 800749a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749e:	ed97 6a03 	vldr	s12, [r7, #12]
 80074a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80074be:	e087      	b.n	80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80074ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d2:	4b6a      	ldr	r3, [pc, #424]	; (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074da:	ee07 3a90 	vmov	s15, r3
 80074de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007502:	e065      	b.n	80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800768c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007516:	4b59      	ldr	r3, [pc, #356]	; (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007526:	ed97 6a03 	vldr	s12, [r7, #12]
 800752a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800752e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800753a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007546:	e043      	b.n	80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007552:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800755a:	4b48      	ldr	r3, [pc, #288]	; (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756a:	ed97 6a03 	vldr	s12, [r7, #12]
 800756e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800757a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800757e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800758a:	e021      	b.n	80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007596:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800768c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800759a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759e:	4b37      	ldr	r3, [pc, #220]	; (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80075b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80075d0:	4b2a      	ldr	r3, [pc, #168]	; (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d4:	0a5b      	lsrs	r3, r3, #9
 80075d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075f6:	ee17 2a90 	vmov	r2, s15
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80075fe:	4b1f      	ldr	r3, [pc, #124]	; (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007602:	0c1b      	lsrs	r3, r3, #16
 8007604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007608:	ee07 3a90 	vmov	s15, r3
 800760c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007610:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007614:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007618:	edd7 6a07 	vldr	s13, [r7, #28]
 800761c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007624:	ee17 2a90 	vmov	r2, s15
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800762c:	4b13      	ldr	r3, [pc, #76]	; (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800762e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007630:	0e1b      	lsrs	r3, r3, #24
 8007632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007642:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007646:	edd7 6a07 	vldr	s13, [r7, #28]
 800764a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800764e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007652:	ee17 2a90 	vmov	r2, s15
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800765a:	e008      	b.n	800766e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	609a      	str	r2, [r3, #8]
}
 800766e:	bf00      	nop
 8007670:	3724      	adds	r7, #36	; 0x24
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	58024400 	.word	0x58024400
 8007680:	03d09000 	.word	0x03d09000
 8007684:	46000000 	.word	0x46000000
 8007688:	4c742400 	.word	0x4c742400
 800768c:	4a742400 	.word	0x4a742400
 8007690:	4b742400 	.word	0x4b742400

08007694 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007694:	b480      	push	{r7}
 8007696:	b089      	sub	sp, #36	; 0x24
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800769c:	4ba0      	ldr	r3, [pc, #640]	; (8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800769e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a0:	f003 0303 	and.w	r3, r3, #3
 80076a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80076a6:	4b9e      	ldr	r3, [pc, #632]	; (8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076aa:	091b      	lsrs	r3, r3, #4
 80076ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80076b2:	4b9b      	ldr	r3, [pc, #620]	; (8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80076bc:	4b98      	ldr	r3, [pc, #608]	; (8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c0:	08db      	lsrs	r3, r3, #3
 80076c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	fb02 f303 	mul.w	r3, r2, r3
 80076cc:	ee07 3a90 	vmov	s15, r3
 80076d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 8111 	beq.w	8007902 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	f000 8083 	beq.w	80077ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	f200 80a1 	bhi.w	8007832 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d056      	beq.n	80077aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80076fc:	e099      	b.n	8007832 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076fe:	4b88      	ldr	r3, [pc, #544]	; (8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0320 	and.w	r3, r3, #32
 8007706:	2b00      	cmp	r3, #0
 8007708:	d02d      	beq.n	8007766 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800770a:	4b85      	ldr	r3, [pc, #532]	; (8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	08db      	lsrs	r3, r3, #3
 8007710:	f003 0303 	and.w	r3, r3, #3
 8007714:	4a83      	ldr	r2, [pc, #524]	; (8007924 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007716:	fa22 f303 	lsr.w	r3, r2, r3
 800771a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	ee07 3a90 	vmov	s15, r3
 8007722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	ee07 3a90 	vmov	s15, r3
 800772c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007734:	4b7a      	ldr	r3, [pc, #488]	; (8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800773c:	ee07 3a90 	vmov	s15, r3
 8007740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007744:	ed97 6a03 	vldr	s12, [r7, #12]
 8007748:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007928 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800774c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007750:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007754:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007758:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800775c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007760:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007764:	e087      	b.n	8007876 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	ee07 3a90 	vmov	s15, r3
 800776c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007770:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800792c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007774:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007778:	4b69      	ldr	r3, [pc, #420]	; (8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800777a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007780:	ee07 3a90 	vmov	s15, r3
 8007784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007788:	ed97 6a03 	vldr	s12, [r7, #12]
 800778c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007928 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007790:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007794:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007798:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800779c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077a8:	e065      	b.n	8007876 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	ee07 3a90 	vmov	s15, r3
 80077b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007930 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80077b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077bc:	4b58      	ldr	r3, [pc, #352]	; (8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c4:	ee07 3a90 	vmov	s15, r3
 80077c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80077d0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007928 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077ec:	e043      	b.n	8007876 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	ee07 3a90 	vmov	s15, r3
 80077f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007934 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80077fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007800:	4b47      	ldr	r3, [pc, #284]	; (8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007808:	ee07 3a90 	vmov	s15, r3
 800780c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007810:	ed97 6a03 	vldr	s12, [r7, #12]
 8007814:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007928 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007818:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800781c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007820:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007824:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800782c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007830:	e021      	b.n	8007876 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	ee07 3a90 	vmov	s15, r3
 8007838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800792c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007840:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007844:	4b36      	ldr	r3, [pc, #216]	; (8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784c:	ee07 3a90 	vmov	s15, r3
 8007850:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007854:	ed97 6a03 	vldr	s12, [r7, #12]
 8007858:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007928 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800785c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007860:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007864:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007868:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800786c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007870:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007874:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007876:	4b2a      	ldr	r3, [pc, #168]	; (8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787a:	0a5b      	lsrs	r3, r3, #9
 800787c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007880:	ee07 3a90 	vmov	s15, r3
 8007884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007888:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800788c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007890:	edd7 6a07 	vldr	s13, [r7, #28]
 8007894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800789c:	ee17 2a90 	vmov	r2, s15
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80078a4:	4b1e      	ldr	r3, [pc, #120]	; (8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a8:	0c1b      	lsrs	r3, r3, #16
 80078aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078be:	edd7 6a07 	vldr	s13, [r7, #28]
 80078c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ca:	ee17 2a90 	vmov	r2, s15
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80078d2:	4b13      	ldr	r3, [pc, #76]	; (8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d6:	0e1b      	lsrs	r3, r3, #24
 80078d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078dc:	ee07 3a90 	vmov	s15, r3
 80078e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80078f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078f8:	ee17 2a90 	vmov	r2, s15
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007900:	e008      	b.n	8007914 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	609a      	str	r2, [r3, #8]
}
 8007914:	bf00      	nop
 8007916:	3724      	adds	r7, #36	; 0x24
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	58024400 	.word	0x58024400
 8007924:	03d09000 	.word	0x03d09000
 8007928:	46000000 	.word	0x46000000
 800792c:	4c742400 	.word	0x4c742400
 8007930:	4a742400 	.word	0x4a742400
 8007934:	4b742400 	.word	0x4b742400

08007938 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007946:	4b53      	ldr	r3, [pc, #332]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 8007948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794a:	f003 0303 	and.w	r3, r3, #3
 800794e:	2b03      	cmp	r3, #3
 8007950:	d101      	bne.n	8007956 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e099      	b.n	8007a8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007956:	4b4f      	ldr	r3, [pc, #316]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a4e      	ldr	r2, [pc, #312]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 800795c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007960:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007962:	f7fa fbc7 	bl	80020f4 <HAL_GetTick>
 8007966:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007968:	e008      	b.n	800797c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800796a:	f7fa fbc3 	bl	80020f4 <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	2b02      	cmp	r3, #2
 8007976:	d901      	bls.n	800797c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e086      	b.n	8007a8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800797c:	4b45      	ldr	r3, [pc, #276]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1f0      	bne.n	800796a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007988:	4b42      	ldr	r3, [pc, #264]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 800798a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	031b      	lsls	r3, r3, #12
 8007996:	493f      	ldr	r1, [pc, #252]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 8007998:	4313      	orrs	r3, r2
 800799a:	628b      	str	r3, [r1, #40]	; 0x28
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	3b01      	subs	r3, #1
 80079a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	025b      	lsls	r3, r3, #9
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	431a      	orrs	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	041b      	lsls	r3, r3, #16
 80079ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80079be:	431a      	orrs	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	3b01      	subs	r3, #1
 80079c6:	061b      	lsls	r3, r3, #24
 80079c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079cc:	4931      	ldr	r1, [pc, #196]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 80079ce:	4313      	orrs	r3, r2
 80079d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80079d2:	4b30      	ldr	r3, [pc, #192]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 80079d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	492d      	ldr	r1, [pc, #180]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 80079e0:	4313      	orrs	r3, r2
 80079e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80079e4:	4b2b      	ldr	r3, [pc, #172]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 80079e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e8:	f023 0220 	bic.w	r2, r3, #32
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	4928      	ldr	r1, [pc, #160]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80079f6:	4b27      	ldr	r3, [pc, #156]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 80079f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fa:	4a26      	ldr	r2, [pc, #152]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 80079fc:	f023 0310 	bic.w	r3, r3, #16
 8007a00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a02:	4b24      	ldr	r3, [pc, #144]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 8007a04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a06:	4b24      	ldr	r3, [pc, #144]	; (8007a98 <RCCEx_PLL2_Config+0x160>)
 8007a08:	4013      	ands	r3, r2
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	69d2      	ldr	r2, [r2, #28]
 8007a0e:	00d2      	lsls	r2, r2, #3
 8007a10:	4920      	ldr	r1, [pc, #128]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a16:	4b1f      	ldr	r3, [pc, #124]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 8007a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1a:	4a1e      	ldr	r2, [pc, #120]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 8007a1c:	f043 0310 	orr.w	r3, r3, #16
 8007a20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d106      	bne.n	8007a36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a28:	4b1a      	ldr	r3, [pc, #104]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 8007a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2c:	4a19      	ldr	r2, [pc, #100]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 8007a2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a34:	e00f      	b.n	8007a56 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d106      	bne.n	8007a4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a3c:	4b15      	ldr	r3, [pc, #84]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 8007a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a40:	4a14      	ldr	r2, [pc, #80]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 8007a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a48:	e005      	b.n	8007a56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a4a:	4b12      	ldr	r3, [pc, #72]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 8007a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4e:	4a11      	ldr	r2, [pc, #68]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 8007a50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007a56:	4b0f      	ldr	r3, [pc, #60]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a0e      	ldr	r2, [pc, #56]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 8007a5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a62:	f7fa fb47 	bl	80020f4 <HAL_GetTick>
 8007a66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a68:	e008      	b.n	8007a7c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a6a:	f7fa fb43 	bl	80020f4 <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d901      	bls.n	8007a7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e006      	b.n	8007a8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a7c:	4b05      	ldr	r3, [pc, #20]	; (8007a94 <RCCEx_PLL2_Config+0x15c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d0f0      	beq.n	8007a6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	58024400 	.word	0x58024400
 8007a98:	ffff0007 	.word	0xffff0007

08007a9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007aaa:	4b53      	ldr	r3, [pc, #332]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aae:	f003 0303 	and.w	r3, r3, #3
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d101      	bne.n	8007aba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e099      	b.n	8007bee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007aba:	4b4f      	ldr	r3, [pc, #316]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a4e      	ldr	r2, [pc, #312]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ac4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ac6:	f7fa fb15 	bl	80020f4 <HAL_GetTick>
 8007aca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007acc:	e008      	b.n	8007ae0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ace:	f7fa fb11 	bl	80020f4 <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d901      	bls.n	8007ae0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e086      	b.n	8007bee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ae0:	4b45      	ldr	r3, [pc, #276]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1f0      	bne.n	8007ace <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007aec:	4b42      	ldr	r3, [pc, #264]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	051b      	lsls	r3, r3, #20
 8007afa:	493f      	ldr	r1, [pc, #252]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007afc:	4313      	orrs	r3, r2
 8007afe:	628b      	str	r3, [r1, #40]	; 0x28
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	3b01      	subs	r3, #1
 8007b06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	025b      	lsls	r3, r3, #9
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	431a      	orrs	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	041b      	lsls	r3, r3, #16
 8007b1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b22:	431a      	orrs	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	061b      	lsls	r3, r3, #24
 8007b2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b30:	4931      	ldr	r1, [pc, #196]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007b32:	4313      	orrs	r3, r2
 8007b34:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b36:	4b30      	ldr	r3, [pc, #192]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	492d      	ldr	r1, [pc, #180]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b48:	4b2b      	ldr	r3, [pc, #172]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	4928      	ldr	r1, [pc, #160]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007b5a:	4b27      	ldr	r3, [pc, #156]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5e:	4a26      	ldr	r2, [pc, #152]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b66:	4b24      	ldr	r3, [pc, #144]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b6a:	4b24      	ldr	r3, [pc, #144]	; (8007bfc <RCCEx_PLL3_Config+0x160>)
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	69d2      	ldr	r2, [r2, #28]
 8007b72:	00d2      	lsls	r2, r2, #3
 8007b74:	4920      	ldr	r1, [pc, #128]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b7a:	4b1f      	ldr	r3, [pc, #124]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7e:	4a1e      	ldr	r2, [pc, #120]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d106      	bne.n	8007b9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b8c:	4b1a      	ldr	r3, [pc, #104]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	4a19      	ldr	r2, [pc, #100]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007b92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b98:	e00f      	b.n	8007bba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d106      	bne.n	8007bae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007ba0:	4b15      	ldr	r3, [pc, #84]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	4a14      	ldr	r2, [pc, #80]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007ba6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007baa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007bac:	e005      	b.n	8007bba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007bae:	4b12      	ldr	r3, [pc, #72]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb2:	4a11      	ldr	r2, [pc, #68]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007bb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007bba:	4b0f      	ldr	r3, [pc, #60]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a0e      	ldr	r2, [pc, #56]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bc6:	f7fa fa95 	bl	80020f4 <HAL_GetTick>
 8007bca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bcc:	e008      	b.n	8007be0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bce:	f7fa fa91 	bl	80020f4 <HAL_GetTick>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d901      	bls.n	8007be0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e006      	b.n	8007bee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007be0:	4b05      	ldr	r3, [pc, #20]	; (8007bf8 <RCCEx_PLL3_Config+0x15c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d0f0      	beq.n	8007bce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	58024400 	.word	0x58024400
 8007bfc:	ffff0007 	.word	0xffff0007

08007c00 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b08a      	sub	sp, #40	; 0x28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e075      	b.n	8007cfe <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d105      	bne.n	8007c2a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f7f9 ffbd 	bl	8001ba4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2204      	movs	r2, #4
 8007c2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f868 	bl	8007d08 <HAL_SD_InitCard>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e05d      	b.n	8007cfe <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007c42:	f107 0308 	add.w	r3, r7, #8
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 ff77 	bl	8008b3c <HAL_SD_GetCardStatus>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e052      	b.n	8007cfe <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007c58:	7e3b      	ldrb	r3, [r7, #24]
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007c5e:	7e7b      	ldrb	r3, [r7, #25]
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d10a      	bne.n	8007c82 <HAL_SD_Init+0x82>
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d102      	bne.n	8007c78 <HAL_SD_Init+0x78>
 8007c72:	6a3b      	ldr	r3, [r7, #32]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d004      	beq.n	8007c82 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c7e:	659a      	str	r2, [r3, #88]	; 0x58
 8007c80:	e00b      	b.n	8007c9a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d104      	bne.n	8007c94 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c90:	659a      	str	r2, [r3, #88]	; 0x58
 8007c92:	e002      	b.n	8007c9a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f001 f835 	bl	8008d10 <HAL_SD_ConfigWideBusOperation>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e026      	b.n	8007cfe <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007cb0:	f7fa fa20 	bl	80020f4 <HAL_GetTick>
 8007cb4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007cb6:	e011      	b.n	8007cdc <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007cb8:	f7fa fa1c 	bl	80020f4 <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cc6:	d109      	bne.n	8007cdc <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007cce:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e010      	b.n	8007cfe <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f001 f929 	bl	8008f34 <HAL_SD_GetCardState>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b04      	cmp	r3, #4
 8007ce6:	d1e7      	bne.n	8007cb8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3728      	adds	r7, #40	; 0x28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
	...

08007d08 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d08:	b590      	push	{r4, r7, lr}
 8007d0a:	b08d      	sub	sp, #52	; 0x34
 8007d0c:	af02      	add	r7, sp, #8
 8007d0e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007d10:	2300      	movs	r3, #0
 8007d12:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007d14:	2300      	movs	r3, #0
 8007d16:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007d20:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007d24:	f04f 0100 	mov.w	r1, #0
 8007d28:	f7fe fc76 	bl	8006618 <HAL_RCCEx_GetPeriphCLKFreq>
 8007d2c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d109      	bne.n	8007d48 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007d42:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e070      	b.n	8007e2a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	0a1b      	lsrs	r3, r3, #8
 8007d4c:	4a39      	ldr	r2, [pc, #228]	; (8007e34 <HAL_SD_InitCard+0x12c>)
 8007d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d52:	091b      	lsrs	r3, r3, #4
 8007d54:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681c      	ldr	r4, [r3, #0]
 8007d5a:	466a      	mov	r2, sp
 8007d5c:	f107 0318 	add.w	r3, r7, #24
 8007d60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007d64:	e882 0003 	stmia.w	r2, {r0, r1}
 8007d68:	f107 030c 	add.w	r3, r7, #12
 8007d6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f001 fd72 	bl	8009858 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f001 fdb5 	bl	80098e8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d005      	beq.n	8007d90 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d8e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d007      	beq.n	8007da6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007d96:	4a28      	ldr	r2, [pc, #160]	; (8007e38 <HAL_SD_InitCard+0x130>)
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d9e:	3301      	adds	r3, #1
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fa f9b3 	bl	800210c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f001 f9b2 	bl	8009110 <SD_PowerON>
 8007dac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00b      	beq.n	8007dcc <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dc0:	6a3b      	ldr	r3, [r7, #32]
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e02e      	b.n	8007e2a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f001 f8d1 	bl	8008f74 <SD_InitCard>
 8007dd2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007dd4:	6a3b      	ldr	r3, [r7, #32]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00b      	beq.n	8007df2 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	431a      	orrs	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e01b      	b.n	8007e2a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f001 fe0a 	bl	8009a14 <SDMMC_CmdBlockLength>
 8007e00:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00f      	beq.n	8007e28 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a0b      	ldr	r2, [pc, #44]	; (8007e3c <HAL_SD_InitCard+0x134>)
 8007e0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	431a      	orrs	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e000      	b.n	8007e2a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	372c      	adds	r7, #44	; 0x2c
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd90      	pop	{r4, r7, pc}
 8007e32:	bf00      	nop
 8007e34:	014f8b59 	.word	0x014f8b59
 8007e38:	00012110 	.word	0x00012110
 8007e3c:	1fe00fff 	.word	0x1fe00fff

08007e40 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b092      	sub	sp, #72	; 0x48
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007e4e:	f7fa f951 	bl	80020f4 <HAL_GetTick>
 8007e52:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d107      	bne.n	8007e72 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e167      	b.n	8008142 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	f040 815a 	bne.w	8008134 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007e86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	441a      	add	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d907      	bls.n	8007ea4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e98:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e14e      	b.n	8008142 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2203      	movs	r2, #3
 8007ea8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d002      	beq.n	8007ec2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebe:	025b      	lsls	r3, r3, #9
 8007ec0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ec6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	025b      	lsls	r3, r3, #9
 8007ecc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007ece:	2390      	movs	r3, #144	; 0x90
 8007ed0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007ed2:	2302      	movs	r3, #2
 8007ed4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007eda:	2300      	movs	r3, #0
 8007edc:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f107 0214 	add.w	r2, r7, #20
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f001 fd67 	bl	80099bc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68da      	ldr	r2, [r3, #12]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007efc:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d90a      	bls.n	8007f1a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2202      	movs	r2, #2
 8007f08:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f10:	4618      	mov	r0, r3
 8007f12:	f001 fdc5 	bl	8009aa0 <SDMMC_CmdReadMultiBlock>
 8007f16:	6478      	str	r0, [r7, #68]	; 0x44
 8007f18:	e009      	b.n	8007f2e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f26:	4618      	mov	r0, r3
 8007f28:	f001 fd97 	bl	8009a5a <SDMMC_CmdReadSingleBlock>
 8007f2c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d012      	beq.n	8007f5a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a84      	ldr	r2, [pc, #528]	; (800814c <HAL_SD_ReadBlocks+0x30c>)
 8007f3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f42:	431a      	orrs	r2, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e0f3      	b.n	8008142 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007f5e:	e058      	b.n	8008012 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d033      	beq.n	8007fd6 <HAL_SD_ReadBlocks+0x196>
 8007f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f70:	2b1f      	cmp	r3, #31
 8007f72:	d930      	bls.n	8007fd6 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8007f74:	2300      	movs	r3, #0
 8007f76:	643b      	str	r3, [r7, #64]	; 0x40
 8007f78:	e027      	b.n	8007fca <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f001 fc94 	bl	80098ac <SDMMC_ReadFIFO>
 8007f84:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f8c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f90:	3301      	adds	r3, #1
 8007f92:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f96:	0a1b      	lsrs	r3, r3, #8
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa6:	0c1b      	lsrs	r3, r3, #16
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fac:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb6:	0e1b      	lsrs	r3, r3, #24
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fbc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8007fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	643b      	str	r3, [r7, #64]	; 0x40
 8007fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fcc:	2b07      	cmp	r3, #7
 8007fce:	d9d4      	bls.n	8007f7a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd2:	3b20      	subs	r3, #32
 8007fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007fd6:	f7fa f88d 	bl	80020f4 <HAL_GetTick>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d902      	bls.n	8007fec <HAL_SD_ReadBlocks+0x1ac>
 8007fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d112      	bne.n	8008012 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a56      	ldr	r2, [pc, #344]	; (800814c <HAL_SD_ReadBlocks+0x30c>)
 8007ff2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e097      	b.n	8008142 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008018:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800801c:	2b00      	cmp	r3, #0
 800801e:	d09f      	beq.n	8007f60 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68da      	ldr	r2, [r3, #12]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800802e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800803a:	2b00      	cmp	r3, #0
 800803c:	d022      	beq.n	8008084 <HAL_SD_ReadBlocks+0x244>
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d91f      	bls.n	8008084 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008048:	2b03      	cmp	r3, #3
 800804a:	d01b      	beq.n	8008084 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4618      	mov	r0, r3
 8008052:	f001 fd8f 	bl	8009b74 <SDMMC_CmdStopTransfer>
 8008056:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800805a:	2b00      	cmp	r3, #0
 800805c:	d012      	beq.n	8008084 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a3a      	ldr	r2, [pc, #232]	; (800814c <HAL_SD_ReadBlocks+0x30c>)
 8008064:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800806a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800806c:	431a      	orrs	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e05e      	b.n	8008142 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800808a:	f003 0308 	and.w	r3, r3, #8
 800808e:	2b00      	cmp	r3, #0
 8008090:	d012      	beq.n	80080b8 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a2d      	ldr	r2, [pc, #180]	; (800814c <HAL_SD_ReadBlocks+0x30c>)
 8008098:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800809e:	f043 0208 	orr.w	r2, r3, #8
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e044      	b.n	8008142 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080be:	f003 0302 	and.w	r3, r3, #2
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d012      	beq.n	80080ec <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a20      	ldr	r2, [pc, #128]	; (800814c <HAL_SD_ReadBlocks+0x30c>)
 80080cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d2:	f043 0202 	orr.w	r2, r3, #2
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e02a      	b.n	8008142 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f2:	f003 0320 	and.w	r3, r3, #32
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d012      	beq.n	8008120 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a13      	ldr	r2, [pc, #76]	; (800814c <HAL_SD_ReadBlocks+0x30c>)
 8008100:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008106:	f043 0220 	orr.w	r2, r3, #32
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e010      	b.n	8008142 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a0a      	ldr	r2, [pc, #40]	; (8008150 <HAL_SD_ReadBlocks+0x310>)
 8008126:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	e006      	b.n	8008142 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008138:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
  }
}
 8008142:	4618      	mov	r0, r3
 8008144:	3748      	adds	r7, #72	; 0x48
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	1fe00fff 	.word	0x1fe00fff
 8008150:	18000f3a 	.word	0x18000f3a

08008154 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b092      	sub	sp, #72	; 0x48
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
 8008160:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008162:	f7f9 ffc7 	bl	80020f4 <HAL_GetTick>
 8008166:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d107      	bne.n	8008186 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e16b      	b.n	800845e <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b01      	cmp	r3, #1
 8008190:	f040 815e 	bne.w	8008450 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800819a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	441a      	add	r2, r3
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d907      	bls.n	80081b8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e152      	b.n	800845e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2203      	movs	r2, #3
 80081bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2200      	movs	r2, #0
 80081c6:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d002      	beq.n	80081d6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80081d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d2:	025b      	lsls	r3, r3, #9
 80081d4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80081d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081da:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	025b      	lsls	r3, r3, #9
 80081e0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80081e2:	2390      	movs	r3, #144	; 0x90
 80081e4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80081e6:	2300      	movs	r3, #0
 80081e8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80081ee:	2300      	movs	r3, #0
 80081f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f107 0218 	add.w	r2, r7, #24
 80081fa:	4611      	mov	r1, r2
 80081fc:	4618      	mov	r0, r3
 80081fe:	f001 fbdd 	bl	80099bc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68da      	ldr	r2, [r3, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008210:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d90a      	bls.n	800822e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2220      	movs	r2, #32
 800821c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008224:	4618      	mov	r0, r3
 8008226:	f001 fc81 	bl	8009b2c <SDMMC_CmdWriteMultiBlock>
 800822a:	6478      	str	r0, [r7, #68]	; 0x44
 800822c:	e009      	b.n	8008242 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2210      	movs	r2, #16
 8008232:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800823a:	4618      	mov	r0, r3
 800823c:	f001 fc53 	bl	8009ae6 <SDMMC_CmdWriteSingleBlock>
 8008240:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008244:	2b00      	cmp	r3, #0
 8008246:	d012      	beq.n	800826e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a86      	ldr	r2, [pc, #536]	; (8008468 <HAL_SD_WriteBlocks+0x314>)
 800824e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008256:	431a      	orrs	r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e0f7      	b.n	800845e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008272:	e05c      	b.n	800832e <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800827a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d037      	beq.n	80082f2 <HAL_SD_WriteBlocks+0x19e>
 8008282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008284:	2b1f      	cmp	r3, #31
 8008286:	d934      	bls.n	80082f2 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8008288:	2300      	movs	r3, #0
 800828a:	643b      	str	r3, [r7, #64]	; 0x40
 800828c:	e02b      	b.n	80082e6 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800828e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008296:	3301      	adds	r3, #1
 8008298:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800829a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	021a      	lsls	r2, r3, #8
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80082a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a8:	3301      	adds	r3, #1
 80082aa:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 80082ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	041a      	lsls	r2, r3, #16
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80082b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ba:	3301      	adds	r3, #1
 80082bc:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80082be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	061a      	lsls	r2, r3, #24
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80082ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082cc:	3301      	adds	r3, #1
 80082ce:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f107 0214 	add.w	r2, r7, #20
 80082d8:	4611      	mov	r1, r2
 80082da:	4618      	mov	r0, r3
 80082dc:	f001 faf3 	bl	80098c6 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80082e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082e2:	3301      	adds	r3, #1
 80082e4:	643b      	str	r3, [r7, #64]	; 0x40
 80082e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082e8:	2b07      	cmp	r3, #7
 80082ea:	d9d0      	bls.n	800828e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80082ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ee:	3b20      	subs	r3, #32
 80082f0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80082f2:	f7f9 feff 	bl	80020f4 <HAL_GetTick>
 80082f6:	4602      	mov	r2, r0
 80082f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082fe:	429a      	cmp	r2, r3
 8008300:	d902      	bls.n	8008308 <HAL_SD_WriteBlocks+0x1b4>
 8008302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008304:	2b00      	cmp	r3, #0
 8008306:	d112      	bne.n	800832e <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a56      	ldr	r2, [pc, #344]	; (8008468 <HAL_SD_WriteBlocks+0x314>)
 800830e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008316:	431a      	orrs	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	e097      	b.n	800845e <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008334:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008338:	2b00      	cmp	r3, #0
 800833a:	d09b      	beq.n	8008274 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68da      	ldr	r2, [r3, #12]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800834a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008356:	2b00      	cmp	r3, #0
 8008358:	d022      	beq.n	80083a0 <HAL_SD_WriteBlocks+0x24c>
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d91f      	bls.n	80083a0 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008364:	2b03      	cmp	r3, #3
 8008366:	d01b      	beq.n	80083a0 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4618      	mov	r0, r3
 800836e:	f001 fc01 	bl	8009b74 <SDMMC_CmdStopTransfer>
 8008372:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008376:	2b00      	cmp	r3, #0
 8008378:	d012      	beq.n	80083a0 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a3a      	ldr	r2, [pc, #232]	; (8008468 <HAL_SD_WriteBlocks+0x314>)
 8008380:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008388:	431a      	orrs	r2, r3
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	e05e      	b.n	800845e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a6:	f003 0308 	and.w	r3, r3, #8
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d012      	beq.n	80083d4 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a2d      	ldr	r2, [pc, #180]	; (8008468 <HAL_SD_WriteBlocks+0x314>)
 80083b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ba:	f043 0208 	orr.w	r2, r3, #8
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e044      	b.n	800845e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083da:	f003 0302 	and.w	r3, r3, #2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d012      	beq.n	8008408 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a20      	ldr	r2, [pc, #128]	; (8008468 <HAL_SD_WriteBlocks+0x314>)
 80083e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ee:	f043 0202 	orr.w	r2, r3, #2
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e02a      	b.n	800845e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840e:	f003 0310 	and.w	r3, r3, #16
 8008412:	2b00      	cmp	r3, #0
 8008414:	d012      	beq.n	800843c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a13      	ldr	r2, [pc, #76]	; (8008468 <HAL_SD_WriteBlocks+0x314>)
 800841c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008422:	f043 0210 	orr.w	r2, r3, #16
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e010      	b.n	800845e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a0a      	ldr	r2, [pc, #40]	; (800846c <HAL_SD_WriteBlocks+0x318>)
 8008442:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 800844c:	2300      	movs	r3, #0
 800844e:	e006      	b.n	800845e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008454:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
  }
}
 800845e:	4618      	mov	r0, r3
 8008460:	3748      	adds	r7, #72	; 0x48
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	1fe00fff 	.word	0x1fe00fff
 800846c:	18000f3a 	.word	0x18000f3a

08008470 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d008      	beq.n	800849e <HAL_SD_IRQHandler+0x2e>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f003 0308 	and.w	r3, r3, #8
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f001 f926 	bl	80096e8 <SD_Read_IT>
 800849c:	e19a      	b.n	80087d4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f000 80ac 	beq.w	8008606 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084b6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	4b59      	ldr	r3, [pc, #356]	; (8008628 <HAL_SD_IRQHandler+0x1b8>)
 80084c4:	400b      	ands	r3, r1
 80084c6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80084d6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68da      	ldr	r2, [r3, #12]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084e6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f003 0308 	and.w	r3, r3, #8
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d038      	beq.n	8008564 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f003 0302 	and.w	r3, r3, #2
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d104      	bne.n	8008506 <HAL_SD_IRQHandler+0x96>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f003 0320 	and.w	r3, r3, #32
 8008502:	2b00      	cmp	r3, #0
 8008504:	d011      	beq.n	800852a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4618      	mov	r0, r3
 800850c:	f001 fb32 	bl	8009b74 <SDMMC_CmdStopTransfer>
 8008510:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d008      	beq.n	800852a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	431a      	orrs	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f95b 	bl	80087e0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a3f      	ldr	r2, [pc, #252]	; (800862c <HAL_SD_IRQHandler+0x1bc>)
 8008530:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2201      	movs	r2, #1
 8008536:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	d104      	bne.n	8008554 <HAL_SD_IRQHandler+0xe4>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f003 0302 	and.w	r3, r3, #2
 8008550:	2b00      	cmp	r3, #0
 8008552:	d003      	beq.n	800855c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f001 ffed 	bl	800a534 <HAL_SD_RxCpltCallback>
 800855a:	e13b      	b.n	80087d4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f001 ffdf 	bl	800a520 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008562:	e137      	b.n	80087d4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 8132 	beq.w	80087d4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2200      	movs	r2, #0
 8008576:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2200      	movs	r2, #0
 800857e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2200      	movs	r2, #0
 8008586:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f003 0302 	and.w	r3, r3, #2
 800858e:	2b00      	cmp	r3, #0
 8008590:	d104      	bne.n	800859c <HAL_SD_IRQHandler+0x12c>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f003 0320 	and.w	r3, r3, #32
 8008598:	2b00      	cmp	r3, #0
 800859a:	d011      	beq.n	80085c0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4618      	mov	r0, r3
 80085a2:	f001 fae7 	bl	8009b74 <SDMMC_CmdStopTransfer>
 80085a6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d008      	beq.n	80085c0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	431a      	orrs	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f910 	bl	80087e0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f003 0310 	and.w	r3, r3, #16
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d104      	bne.n	80085e2 <HAL_SD_IRQHandler+0x172>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f003 0320 	and.w	r3, r3, #32
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d002      	beq.n	80085e8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f001 ff9c 	bl	800a520 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d105      	bne.n	80085fe <HAL_SD_IRQHandler+0x18e>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f003 0302 	and.w	r3, r3, #2
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f000 80eb 	beq.w	80087d4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f001 ff98 	bl	800a534 <HAL_SD_RxCpltCallback>
}
 8008604:	e0e6      	b.n	80087d4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800860c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00d      	beq.n	8008630 <HAL_SD_IRQHandler+0x1c0>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f003 0308 	and.w	r3, r3, #8
 800861a:	2b00      	cmp	r3, #0
 800861c:	d008      	beq.n	8008630 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f001 f8a8 	bl	8009774 <SD_Write_IT>
 8008624:	e0d6      	b.n	80087d4 <HAL_SD_IRQHandler+0x364>
 8008626:	bf00      	nop
 8008628:	ffff3ec5 	.word	0xffff3ec5
 800862c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008636:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800863a:	2b00      	cmp	r3, #0
 800863c:	f000 809d 	beq.w	800877a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	2b00      	cmp	r3, #0
 800864c:	d005      	beq.n	800865a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008652:	f043 0202 	orr.w	r2, r3, #2
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008660:	f003 0308 	and.w	r3, r3, #8
 8008664:	2b00      	cmp	r3, #0
 8008666:	d005      	beq.n	8008674 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800866c:	f043 0208 	orr.w	r2, r3, #8
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800867a:	f003 0320 	and.w	r3, r3, #32
 800867e:	2b00      	cmp	r3, #0
 8008680:	d005      	beq.n	800868e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008686:	f043 0220 	orr.w	r2, r3, #32
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008694:	f003 0310 	and.w	r3, r3, #16
 8008698:	2b00      	cmp	r3, #0
 800869a:	d005      	beq.n	80086a8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a0:	f043 0210 	orr.w	r2, r3, #16
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a4b      	ldr	r2, [pc, #300]	; (80087dc <HAL_SD_IRQHandler+0x36c>)
 80086ae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80086be:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68da      	ldr	r2, [r3, #12]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086ce:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086de:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68da      	ldr	r2, [r3, #12]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80086ee:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f001 fa3d 	bl	8009b74 <SDMMC_CmdStopTransfer>
 80086fa:	4602      	mov	r2, r0
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008700:	431a      	orrs	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68da      	ldr	r2, [r3, #12]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008714:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800871e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f003 0308 	and.w	r3, r3, #8
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00a      	beq.n	8008740 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f851 	bl	80087e0 <HAL_SD_ErrorCallback>
}
 800873e:	e049      	b.n	80087d4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008746:	2b00      	cmp	r3, #0
 8008748:	d044      	beq.n	80087d4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800874e:	2b00      	cmp	r3, #0
 8008750:	d040      	beq.n	80087d4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008760:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2200      	movs	r2, #0
 8008768:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f834 	bl	80087e0 <HAL_SD_ErrorCallback>
}
 8008778:	e02c      	b.n	80087d4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d025      	beq.n	80087d4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008790:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008798:	f003 0304 	and.w	r3, r3, #4
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10c      	bne.n	80087ba <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f003 0320 	and.w	r3, r3, #32
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f001 f84a 	bl	8009844 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80087b0:	e010      	b.n	80087d4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f001 f832 	bl	800981c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80087b8:	e00c      	b.n	80087d4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f003 0320 	and.w	r3, r3, #32
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d003      	beq.n	80087cc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f001 f833 	bl	8009830 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80087ca:	e003      	b.n	80087d4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f001 f81b 	bl	8009808 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80087d2:	e7ff      	b.n	80087d4 <HAL_SD_IRQHandler+0x364>
 80087d4:	bf00      	nop
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	18000f3a 	.word	0x18000f3a

080087e0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008802:	0f9b      	lsrs	r3, r3, #30
 8008804:	b2da      	uxtb	r2, r3
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800880e:	0e9b      	lsrs	r3, r3, #26
 8008810:	b2db      	uxtb	r3, r3
 8008812:	f003 030f 	and.w	r3, r3, #15
 8008816:	b2da      	uxtb	r2, r3
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008820:	0e1b      	lsrs	r3, r3, #24
 8008822:	b2db      	uxtb	r3, r3
 8008824:	f003 0303 	and.w	r3, r3, #3
 8008828:	b2da      	uxtb	r2, r3
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008832:	0c1b      	lsrs	r3, r3, #16
 8008834:	b2da      	uxtb	r2, r3
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800883e:	0a1b      	lsrs	r3, r3, #8
 8008840:	b2da      	uxtb	r2, r3
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800884a:	b2da      	uxtb	r2, r3
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008854:	0d1b      	lsrs	r3, r3, #20
 8008856:	b29a      	uxth	r2, r3
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008860:	0c1b      	lsrs	r3, r3, #16
 8008862:	b2db      	uxtb	r3, r3
 8008864:	f003 030f 	and.w	r3, r3, #15
 8008868:	b2da      	uxtb	r2, r3
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008872:	0bdb      	lsrs	r3, r3, #15
 8008874:	b2db      	uxtb	r3, r3
 8008876:	f003 0301 	and.w	r3, r3, #1
 800887a:	b2da      	uxtb	r2, r3
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008884:	0b9b      	lsrs	r3, r3, #14
 8008886:	b2db      	uxtb	r3, r3
 8008888:	f003 0301 	and.w	r3, r3, #1
 800888c:	b2da      	uxtb	r2, r3
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008896:	0b5b      	lsrs	r3, r3, #13
 8008898:	b2db      	uxtb	r3, r3
 800889a:	f003 0301 	and.w	r3, r3, #1
 800889e:	b2da      	uxtb	r2, r3
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088a8:	0b1b      	lsrs	r3, r3, #12
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	f003 0301 	and.w	r3, r3, #1
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	2200      	movs	r2, #0
 80088ba:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d163      	bne.n	800898c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088c8:	009a      	lsls	r2, r3, #2
 80088ca:	f640 73fc 	movw	r3, #4092	; 0xffc
 80088ce:	4013      	ands	r3, r2
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80088d4:	0f92      	lsrs	r2, r2, #30
 80088d6:	431a      	orrs	r2, r3
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088e0:	0edb      	lsrs	r3, r3, #27
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	f003 0307 	and.w	r3, r3, #7
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088f2:	0e1b      	lsrs	r3, r3, #24
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	f003 0307 	and.w	r3, r3, #7
 80088fa:	b2da      	uxtb	r2, r3
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008904:	0d5b      	lsrs	r3, r3, #21
 8008906:	b2db      	uxtb	r3, r3
 8008908:	f003 0307 	and.w	r3, r3, #7
 800890c:	b2da      	uxtb	r2, r3
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008916:	0c9b      	lsrs	r3, r3, #18
 8008918:	b2db      	uxtb	r3, r3
 800891a:	f003 0307 	and.w	r3, r3, #7
 800891e:	b2da      	uxtb	r2, r3
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008928:	0bdb      	lsrs	r3, r3, #15
 800892a:	b2db      	uxtb	r3, r3
 800892c:	f003 0307 	and.w	r3, r3, #7
 8008930:	b2da      	uxtb	r2, r3
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	1c5a      	adds	r2, r3, #1
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	7e1b      	ldrb	r3, [r3, #24]
 8008944:	b2db      	uxtb	r3, r3
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	3302      	adds	r3, #2
 800894c:	2201      	movs	r2, #1
 800894e:	fa02 f303 	lsl.w	r3, r2, r3
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008956:	fb03 f202 	mul.w	r2, r3, r2
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	7a1b      	ldrb	r3, [r3, #8]
 8008962:	b2db      	uxtb	r3, r3
 8008964:	f003 030f 	and.w	r3, r3, #15
 8008968:	2201      	movs	r2, #1
 800896a:	409a      	lsls	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008978:	0a52      	lsrs	r2, r2, #9
 800897a:	fb03 f202 	mul.w	r2, r3, r2
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008988:	655a      	str	r2, [r3, #84]	; 0x54
 800898a:	e031      	b.n	80089f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008990:	2b01      	cmp	r3, #1
 8008992:	d11d      	bne.n	80089d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008998:	041b      	lsls	r3, r3, #16
 800899a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089a2:	0c1b      	lsrs	r3, r3, #16
 80089a4:	431a      	orrs	r2, r3
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	3301      	adds	r3, #1
 80089b0:	029a      	lsls	r2, r3, #10
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089c4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	655a      	str	r2, [r3, #84]	; 0x54
 80089ce:	e00f      	b.n	80089f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a58      	ldr	r2, [pc, #352]	; (8008b38 <HAL_SD_GetCardCSD+0x344>)
 80089d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e09d      	b.n	8008b2c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089f4:	0b9b      	lsrs	r3, r3, #14
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a06:	09db      	lsrs	r3, r3, #7
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a28:	0fdb      	lsrs	r3, r3, #31
 8008a2a:	b2da      	uxtb	r2, r3
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a34:	0f5b      	lsrs	r3, r3, #29
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	f003 0303 	and.w	r3, r3, #3
 8008a3c:	b2da      	uxtb	r2, r3
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a46:	0e9b      	lsrs	r3, r3, #26
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	f003 0307 	and.w	r3, r3, #7
 8008a4e:	b2da      	uxtb	r2, r3
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a58:	0d9b      	lsrs	r3, r3, #22
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	f003 030f 	and.w	r3, r3, #15
 8008a60:	b2da      	uxtb	r2, r3
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a6a:	0d5b      	lsrs	r3, r3, #21
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	b2da      	uxtb	r2, r3
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a86:	0c1b      	lsrs	r3, r3, #16
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a9a:	0bdb      	lsrs	r3, r3, #15
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aae:	0b9b      	lsrs	r3, r3, #14
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	f003 0301 	and.w	r3, r3, #1
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ac2:	0b5b      	lsrs	r3, r3, #13
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ad6:	0b1b      	lsrs	r3, r3, #12
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aea:	0a9b      	lsrs	r3, r3, #10
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	f003 0303 	and.w	r3, r3, #3
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008afe:	0a1b      	lsrs	r3, r3, #8
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	f003 0303 	and.w	r3, r3, #3
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b12:	085b      	lsrs	r3, r3, #1
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr
 8008b38:	1fe00fff 	.word	0x1fe00fff

08008b3c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b094      	sub	sp, #80	; 0x50
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008b46:	2300      	movs	r3, #0
 8008b48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b03      	cmp	r3, #3
 8008b56:	d101      	bne.n	8008b5c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e0a7      	b.n	8008cac <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008b5c:	f107 0308 	add.w	r3, r7, #8
 8008b60:	4619      	mov	r1, r3
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fb62 	bl	800922c <SD_SendSDStatus>
 8008b68:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d011      	beq.n	8008b94 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a4f      	ldr	r2, [pc, #316]	; (8008cb4 <HAL_SD_GetCardStatus+0x178>)
 8008b76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b7e:	431a      	orrs	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008b92:	e070      	b.n	8008c76 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	099b      	lsrs	r3, r3, #6
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	f003 0303 	and.w	r3, r3, #3
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	095b      	lsrs	r3, r3, #5
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	f003 0301 	and.w	r3, r3, #1
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	0a1b      	lsrs	r3, r3, #8
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	0e1b      	lsrs	r3, r3, #24
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	061a      	lsls	r2, r3, #24
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	021b      	lsls	r3, r3, #8
 8008bd6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008bda:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	0a1b      	lsrs	r3, r3, #8
 8008be0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008be4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	0e1b      	lsrs	r3, r3, #24
 8008bea:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	0a1b      	lsrs	r3, r3, #8
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	0d1b      	lsrs	r3, r3, #20
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	f003 030f 	and.w	r3, r3, #15
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	0c1b      	lsrs	r3, r3, #16
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	4313      	orrs	r3, r2
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	0a9b      	lsrs	r3, r3, #10
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	0a1b      	lsrs	r3, r3, #8
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	f003 0303 	and.w	r3, r3, #3
 8008c48:	b2da      	uxtb	r2, r3
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	091b      	lsrs	r3, r3, #4
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	f003 030f 	and.w	r3, r3, #15
 8008c58:	b2da      	uxtb	r2, r3
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	f003 030f 	and.w	r3, r3, #15
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	0e1b      	lsrs	r3, r3, #24
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 fec8 	bl	8009a14 <SDMMC_CmdBlockLength>
 8008c84:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d00d      	beq.n	8008ca8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a08      	ldr	r2, [pc, #32]	; (8008cb4 <HAL_SD_GetCardStatus+0x178>)
 8008c92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c98:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8008ca8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3750      	adds	r7, #80	; 0x50
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	1fe00fff 	.word	0x1fe00fff

08008cb8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008d10:	b590      	push	{r4, r7, lr}
 8008d12:	b08d      	sub	sp, #52	; 0x34
 8008d14:	af02      	add	r7, sp, #8
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2203      	movs	r2, #3
 8008d24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2c:	2b03      	cmp	r3, #3
 8008d2e:	d02e      	beq.n	8008d8e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d36:	d106      	bne.n	8008d46 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	635a      	str	r2, [r3, #52]	; 0x34
 8008d44:	e029      	b.n	8008d9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d4c:	d10a      	bne.n	8008d64 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fb64 	bl	800941c <SD_WideBus_Enable>
 8008d54:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d5a:	6a3b      	ldr	r3, [r7, #32]
 8008d5c:	431a      	orrs	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	635a      	str	r2, [r3, #52]	; 0x34
 8008d62:	e01a      	b.n	8008d9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10a      	bne.n	8008d80 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fba1 	bl	80094b2 <SD_WideBus_Disable>
 8008d70:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	431a      	orrs	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	635a      	str	r2, [r3, #52]	; 0x34
 8008d7e:	e00c      	b.n	8008d9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d84:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	635a      	str	r2, [r3, #52]	; 0x34
 8008d8c:	e005      	b.n	8008d9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d92:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d007      	beq.n	8008db2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a5f      	ldr	r2, [pc, #380]	; (8008f24 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008da8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008db0:	e096      	b.n	8008ee0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008db2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008db6:	f04f 0100 	mov.w	r1, #0
 8008dba:	f7fd fc2d 	bl	8006618 <HAL_RCCEx_GetPeriphCLKFreq>
 8008dbe:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f000 8083 	beq.w	8008ece <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	695a      	ldr	r2, [r3, #20]
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	4950      	ldr	r1, [pc, #320]	; (8008f28 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008de6:	fba1 1303 	umull	r1, r3, r1, r3
 8008dea:	0e1b      	lsrs	r3, r3, #24
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d303      	bcc.n	8008df8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	695b      	ldr	r3, [r3, #20]
 8008df4:	61bb      	str	r3, [r7, #24]
 8008df6:	e05a      	b.n	8008eae <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e00:	d103      	bne.n	8008e0a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	695b      	ldr	r3, [r3, #20]
 8008e06:	61bb      	str	r3, [r7, #24]
 8008e08:	e051      	b.n	8008eae <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e12:	d126      	bne.n	8008e62 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	695b      	ldr	r3, [r3, #20]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10e      	bne.n	8008e3a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	4a43      	ldr	r2, [pc, #268]	; (8008f2c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d906      	bls.n	8008e32 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	4a40      	ldr	r2, [pc, #256]	; (8008f28 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008e28:	fba2 2303 	umull	r2, r3, r2, r3
 8008e2c:	0e5b      	lsrs	r3, r3, #25
 8008e2e:	61bb      	str	r3, [r7, #24]
 8008e30:	e03d      	b.n	8008eae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	61bb      	str	r3, [r7, #24]
 8008e38:	e039      	b.n	8008eae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	005b      	lsls	r3, r3, #1
 8008e40:	69fa      	ldr	r2, [r7, #28]
 8008e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e46:	4a39      	ldr	r2, [pc, #228]	; (8008f2c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d906      	bls.n	8008e5a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	4a36      	ldr	r2, [pc, #216]	; (8008f28 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008e50:	fba2 2303 	umull	r2, r3, r2, r3
 8008e54:	0e5b      	lsrs	r3, r3, #25
 8008e56:	61bb      	str	r3, [r7, #24]
 8008e58:	e029      	b.n	8008eae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	61bb      	str	r3, [r7, #24]
 8008e60:	e025      	b.n	8008eae <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	695b      	ldr	r3, [r3, #20]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10e      	bne.n	8008e88 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	4a30      	ldr	r2, [pc, #192]	; (8008f30 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d906      	bls.n	8008e80 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	4a2c      	ldr	r2, [pc, #176]	; (8008f28 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008e76:	fba2 2303 	umull	r2, r3, r2, r3
 8008e7a:	0e1b      	lsrs	r3, r3, #24
 8008e7c:	61bb      	str	r3, [r7, #24]
 8008e7e:	e016      	b.n	8008eae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	61bb      	str	r3, [r7, #24]
 8008e86:	e012      	b.n	8008eae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	695b      	ldr	r3, [r3, #20]
 8008e8c:	005b      	lsls	r3, r3, #1
 8008e8e:	69fa      	ldr	r2, [r7, #28]
 8008e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e94:	4a26      	ldr	r2, [pc, #152]	; (8008f30 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d906      	bls.n	8008ea8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	4a22      	ldr	r2, [pc, #136]	; (8008f28 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea2:	0e1b      	lsrs	r3, r3, #24
 8008ea4:	61bb      	str	r3, [r7, #24]
 8008ea6:	e002      	b.n	8008eae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681c      	ldr	r4, [r3, #0]
 8008eb2:	466a      	mov	r2, sp
 8008eb4:	f107 0314 	add.w	r3, r7, #20
 8008eb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008ebc:	e882 0003 	stmia.w	r2, {r0, r1}
 8008ec0:	f107 0308 	add.w	r3, r7, #8
 8008ec4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f000 fcc6 	bl	8009858 <SDMMC_Init>
 8008ecc:	e008      	b.n	8008ee0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f000 fd93 	bl	8009a14 <SDMMC_CmdBlockLength>
 8008eee:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ef0:	6a3b      	ldr	r3, [r7, #32]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00c      	beq.n	8008f10 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a0a      	ldr	r2, [pc, #40]	; (8008f24 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008efc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f02:	6a3b      	ldr	r3, [r7, #32]
 8008f04:	431a      	orrs	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8008f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	372c      	adds	r7, #44	; 0x2c
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd90      	pop	{r4, r7, pc}
 8008f24:	1fe00fff 	.word	0x1fe00fff
 8008f28:	55e63b89 	.word	0x55e63b89
 8008f2c:	02faf080 	.word	0x02faf080
 8008f30:	017d7840 	.word	0x017d7840

08008f34 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b086      	sub	sp, #24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008f40:	f107 030c 	add.w	r3, r7, #12
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fa40 	bl	80093cc <SD_SendStatus>
 8008f4c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d005      	beq.n	8008f60 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	431a      	orrs	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	0a5b      	lsrs	r3, r3, #9
 8008f64:	f003 030f 	and.w	r3, r3, #15
 8008f68:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008f6a:	693b      	ldr	r3, [r7, #16]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3718      	adds	r7, #24
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b090      	sub	sp, #64	; 0x40
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008f80:	f7f9 f8b8 	bl	80020f4 <HAL_GetTick>
 8008f84:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 fcbd 	bl	800990a <SDMMC_GetPowerState>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d102      	bne.n	8008f9c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008f96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008f9a:	e0b5      	b.n	8009108 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa0:	2b03      	cmp	r3, #3
 8008fa2:	d02e      	beq.n	8009002 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f000 ff08 	bl	8009dbe <SDMMC_CmdSendCID>
 8008fae:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d001      	beq.n	8008fba <SD_InitCard+0x46>
    {
      return errorstate;
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb8:	e0a6      	b.n	8009108 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 fce8 	bl	8009996 <SDMMC_GetResponse>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2104      	movs	r1, #4
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 fcdf 	bl	8009996 <SDMMC_GetResponse>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2108      	movs	r1, #8
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 fcd6 	bl	8009996 <SDMMC_GetResponse>
 8008fea:	4602      	mov	r2, r0
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	210c      	movs	r1, #12
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 fccd 	bl	8009996 <SDMMC_GetResponse>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009006:	2b03      	cmp	r3, #3
 8009008:	d01d      	beq.n	8009046 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800900a:	e019      	b.n	8009040 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f107 020a 	add.w	r2, r7, #10
 8009014:	4611      	mov	r1, r2
 8009016:	4618      	mov	r0, r3
 8009018:	f000 ff10 	bl	8009e3c <SDMMC_CmdSetRelAdd>
 800901c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800901e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009020:	2b00      	cmp	r3, #0
 8009022:	d001      	beq.n	8009028 <SD_InitCard+0xb4>
      {
        return errorstate;
 8009024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009026:	e06f      	b.n	8009108 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009028:	f7f9 f864 	bl	80020f4 <HAL_GetTick>
 800902c:	4602      	mov	r2, r0
 800902e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	f241 3287 	movw	r2, #4999	; 0x1387
 8009036:	4293      	cmp	r3, r2
 8009038:	d902      	bls.n	8009040 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800903a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800903e:	e063      	b.n	8009108 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009040:	897b      	ldrh	r3, [r7, #10]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d0e2      	beq.n	800900c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904a:	2b03      	cmp	r3, #3
 800904c:	d036      	beq.n	80090bc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800904e:	897b      	ldrh	r3, [r7, #10]
 8009050:	461a      	mov	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800905e:	041b      	lsls	r3, r3, #16
 8009060:	4619      	mov	r1, r3
 8009062:	4610      	mov	r0, r2
 8009064:	f000 feca 	bl	8009dfc <SDMMC_CmdSendCSD>
 8009068:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800906a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <SD_InitCard+0x100>
    {
      return errorstate;
 8009070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009072:	e049      	b.n	8009108 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2100      	movs	r1, #0
 800907a:	4618      	mov	r0, r3
 800907c:	f000 fc8b 	bl	8009996 <SDMMC_GetResponse>
 8009080:	4602      	mov	r2, r0
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2104      	movs	r1, #4
 800908c:	4618      	mov	r0, r3
 800908e:	f000 fc82 	bl	8009996 <SDMMC_GetResponse>
 8009092:	4602      	mov	r2, r0
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2108      	movs	r1, #8
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 fc79 	bl	8009996 <SDMMC_GetResponse>
 80090a4:	4602      	mov	r2, r0
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	210c      	movs	r1, #12
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 fc70 	bl	8009996 <SDMMC_GetResponse>
 80090b6:	4602      	mov	r2, r0
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2104      	movs	r1, #4
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 fc67 	bl	8009996 <SDMMC_GetResponse>
 80090c8:	4603      	mov	r3, r0
 80090ca:	0d1a      	lsrs	r2, r3, #20
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80090d0:	f107 030c 	add.w	r3, r7, #12
 80090d4:	4619      	mov	r1, r3
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7ff fb8c 	bl	80087f4 <HAL_SD_GetCardCSD>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d002      	beq.n	80090e8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80090e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80090e6:	e00f      	b.n	8009108 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090f0:	041b      	lsls	r3, r3, #16
 80090f2:	4619      	mov	r1, r3
 80090f4:	4610      	mov	r0, r2
 80090f6:	f000 fd79 	bl	8009bec <SDMMC_CmdSelDesel>
 80090fa:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80090fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <SD_InitCard+0x192>
  {
    return errorstate;
 8009102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009104:	e000      	b.n	8009108 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3740      	adds	r7, #64	; 0x40
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009118:	2300      	movs	r3, #0
 800911a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800911c:	2300      	movs	r3, #0
 800911e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009120:	2300      	movs	r3, #0
 8009122:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4618      	mov	r0, r3
 800912a:	f000 fd82 	bl	8009c32 <SDMMC_CmdGoIdleState>
 800912e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	e072      	b.n	8009220 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4618      	mov	r0, r3
 8009140:	f000 fd95 	bl	8009c6e <SDMMC_CmdOperCond>
 8009144:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800914c:	d10d      	bne.n	800916a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4618      	mov	r0, r3
 800915a:	f000 fd6a 	bl	8009c32 <SDMMC_CmdGoIdleState>
 800915e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d004      	beq.n	8009170 <SD_PowerON+0x60>
    {
      return errorstate;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	e05a      	b.n	8009220 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2201      	movs	r2, #1
 800916e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009174:	2b01      	cmp	r3, #1
 8009176:	d137      	bne.n	80091e8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2100      	movs	r1, #0
 800917e:	4618      	mov	r0, r3
 8009180:	f000 fd95 	bl	8009cae <SDMMC_CmdAppCommand>
 8009184:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d02d      	beq.n	80091e8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800918c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009190:	e046      	b.n	8009220 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2100      	movs	r1, #0
 8009198:	4618      	mov	r0, r3
 800919a:	f000 fd88 	bl	8009cae <SDMMC_CmdAppCommand>
 800919e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d001      	beq.n	80091aa <SD_PowerON+0x9a>
    {
      return errorstate;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	e03a      	b.n	8009220 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	491e      	ldr	r1, [pc, #120]	; (8009228 <SD_PowerON+0x118>)
 80091b0:	4618      	mov	r0, r3
 80091b2:	f000 fd9f 	bl	8009cf4 <SDMMC_CmdAppOperCommand>
 80091b6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d002      	beq.n	80091c4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091c2:	e02d      	b.n	8009220 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2100      	movs	r1, #0
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 fbe3 	bl	8009996 <SDMMC_GetResponse>
 80091d0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	0fdb      	lsrs	r3, r3, #31
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d101      	bne.n	80091de <SD_PowerON+0xce>
 80091da:	2301      	movs	r3, #1
 80091dc:	e000      	b.n	80091e0 <SD_PowerON+0xd0>
 80091de:	2300      	movs	r3, #0
 80091e0:	613b      	str	r3, [r7, #16]

    count++;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	3301      	adds	r3, #1
 80091e6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d802      	bhi.n	80091f8 <SD_PowerON+0xe8>
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d0cc      	beq.n	8009192 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80091fe:	4293      	cmp	r3, r2
 8009200:	d902      	bls.n	8009208 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009202:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009206:	e00b      	b.n	8009220 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	3718      	adds	r7, #24
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	c1100000 	.word	0xc1100000

0800922c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b08c      	sub	sp, #48	; 0x30
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009236:	f7f8 ff5d 	bl	80020f4 <HAL_GetTick>
 800923a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2100      	movs	r1, #0
 8009246:	4618      	mov	r0, r3
 8009248:	f000 fba5 	bl	8009996 <SDMMC_GetResponse>
 800924c:	4603      	mov	r3, r0
 800924e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009252:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009256:	d102      	bne.n	800925e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009258:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800925c:	e0b0      	b.n	80093c0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2140      	movs	r1, #64	; 0x40
 8009264:	4618      	mov	r0, r3
 8009266:	f000 fbd5 	bl	8009a14 <SDMMC_CmdBlockLength>
 800926a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800926c:	6a3b      	ldr	r3, [r7, #32]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d005      	beq.n	800927e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800927a:	6a3b      	ldr	r3, [r7, #32]
 800927c:	e0a0      	b.n	80093c0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009286:	041b      	lsls	r3, r3, #16
 8009288:	4619      	mov	r1, r3
 800928a:	4610      	mov	r0, r2
 800928c:	f000 fd0f 	bl	8009cae <SDMMC_CmdAppCommand>
 8009290:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009292:	6a3b      	ldr	r3, [r7, #32]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d005      	beq.n	80092a4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80092a0:	6a3b      	ldr	r3, [r7, #32]
 80092a2:	e08d      	b.n	80093c0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80092a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092a8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80092aa:	2340      	movs	r3, #64	; 0x40
 80092ac:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80092ae:	2360      	movs	r3, #96	; 0x60
 80092b0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80092b2:	2302      	movs	r3, #2
 80092b4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80092ba:	2301      	movs	r3, #1
 80092bc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f107 0208 	add.w	r2, r7, #8
 80092c6:	4611      	mov	r1, r2
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 fb77 	bl	80099bc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 fdf7 	bl	8009ec6 <SDMMC_CmdStatusRegister>
 80092d8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80092da:	6a3b      	ldr	r3, [r7, #32]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d02b      	beq.n	8009338 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80092e8:	6a3b      	ldr	r3, [r7, #32]
 80092ea:	e069      	b.n	80093c0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d013      	beq.n	8009322 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80092fa:	2300      	movs	r3, #0
 80092fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092fe:	e00d      	b.n	800931c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4618      	mov	r0, r3
 8009306:	f000 fad1 	bl	80098ac <SDMMC_ReadFIFO>
 800930a:	4602      	mov	r2, r0
 800930c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930e:	601a      	str	r2, [r3, #0]
        pData++;
 8009310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009312:	3304      	adds	r3, #4
 8009314:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8009316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009318:	3301      	adds	r3, #1
 800931a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800931c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931e:	2b07      	cmp	r3, #7
 8009320:	d9ee      	bls.n	8009300 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009322:	f7f8 fee7 	bl	80020f4 <HAL_GetTick>
 8009326:	4602      	mov	r2, r0
 8009328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009330:	d102      	bne.n	8009338 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009332:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009336:	e043      	b.n	80093c0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800933e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009342:	2b00      	cmp	r3, #0
 8009344:	d0d2      	beq.n	80092ec <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800934c:	f003 0308 	and.w	r3, r3, #8
 8009350:	2b00      	cmp	r3, #0
 8009352:	d001      	beq.n	8009358 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009354:	2308      	movs	r3, #8
 8009356:	e033      	b.n	80093c0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800935e:	f003 0302 	and.w	r3, r3, #2
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009366:	2302      	movs	r3, #2
 8009368:	e02a      	b.n	80093c0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009370:	f003 0320 	and.w	r3, r3, #32
 8009374:	2b00      	cmp	r3, #0
 8009376:	d017      	beq.n	80093a8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009378:	2320      	movs	r3, #32
 800937a:	e021      	b.n	80093c0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4618      	mov	r0, r3
 8009382:	f000 fa93 	bl	80098ac <SDMMC_ReadFIFO>
 8009386:	4602      	mov	r2, r0
 8009388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938a:	601a      	str	r2, [r3, #0]
    pData++;
 800938c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938e:	3304      	adds	r3, #4
 8009390:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009392:	f7f8 feaf 	bl	80020f4 <HAL_GetTick>
 8009396:	4602      	mov	r2, r0
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093a0:	d102      	bne.n	80093a8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80093a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093a6:	e00b      	b.n	80093c0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1e2      	bne.n	800937c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a03      	ldr	r2, [pc, #12]	; (80093c8 <SD_SendSDStatus+0x19c>)
 80093bc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3730      	adds	r7, #48	; 0x30
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	18000f3a 	.word	0x18000f3a

080093cc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d102      	bne.n	80093e2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80093dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80093e0:	e018      	b.n	8009414 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ea:	041b      	lsls	r3, r3, #16
 80093ec:	4619      	mov	r1, r3
 80093ee:	4610      	mov	r0, r2
 80093f0:	f000 fd46 	bl	8009e80 <SDMMC_CmdSendStatus>
 80093f4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d001      	beq.n	8009400 <SD_SendStatus+0x34>
  {
    return errorstate;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	e009      	b.n	8009414 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2100      	movs	r1, #0
 8009406:	4618      	mov	r0, r3
 8009408:	f000 fac5 	bl	8009996 <SDMMC_GetResponse>
 800940c:	4602      	mov	r2, r0
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009424:	2300      	movs	r3, #0
 8009426:	60fb      	str	r3, [r7, #12]
 8009428:	2300      	movs	r3, #0
 800942a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2100      	movs	r1, #0
 8009432:	4618      	mov	r0, r3
 8009434:	f000 faaf 	bl	8009996 <SDMMC_GetResponse>
 8009438:	4603      	mov	r3, r0
 800943a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800943e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009442:	d102      	bne.n	800944a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009444:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009448:	e02f      	b.n	80094aa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800944a:	f107 030c 	add.w	r3, r7, #12
 800944e:	4619      	mov	r1, r3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 f879 	bl	8009548 <SD_FindSCR>
 8009456:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d001      	beq.n	8009462 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	e023      	b.n	80094aa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009468:	2b00      	cmp	r3, #0
 800946a:	d01c      	beq.n	80094a6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009474:	041b      	lsls	r3, r3, #16
 8009476:	4619      	mov	r1, r3
 8009478:	4610      	mov	r0, r2
 800947a:	f000 fc18 	bl	8009cae <SDMMC_CmdAppCommand>
 800947e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	e00f      	b.n	80094aa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2102      	movs	r1, #2
 8009490:	4618      	mov	r0, r3
 8009492:	f000 fc4f 	bl	8009d34 <SDMMC_CmdBusWidth>
 8009496:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	e003      	b.n	80094aa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80094a2:	2300      	movs	r3, #0
 80094a4:	e001      	b.n	80094aa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80094a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3718      	adds	r7, #24
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b086      	sub	sp, #24
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80094ba:	2300      	movs	r3, #0
 80094bc:	60fb      	str	r3, [r7, #12]
 80094be:	2300      	movs	r3, #0
 80094c0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2100      	movs	r1, #0
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 fa64 	bl	8009996 <SDMMC_GetResponse>
 80094ce:	4603      	mov	r3, r0
 80094d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094d8:	d102      	bne.n	80094e0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80094da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80094de:	e02f      	b.n	8009540 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80094e0:	f107 030c 	add.w	r3, r7, #12
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f82e 	bl	8009548 <SD_FindSCR>
 80094ec:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	e023      	b.n	8009540 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d01c      	beq.n	800953c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800950a:	041b      	lsls	r3, r3, #16
 800950c:	4619      	mov	r1, r3
 800950e:	4610      	mov	r0, r2
 8009510:	f000 fbcd 	bl	8009cae <SDMMC_CmdAppCommand>
 8009514:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d001      	beq.n	8009520 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	e00f      	b.n	8009540 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2100      	movs	r1, #0
 8009526:	4618      	mov	r0, r3
 8009528:	f000 fc04 	bl	8009d34 <SDMMC_CmdBusWidth>
 800952c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d001      	beq.n	8009538 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	e003      	b.n	8009540 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009538:	2300      	movs	r3, #0
 800953a:	e001      	b.n	8009540 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800953c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009540:	4618      	mov	r0, r3
 8009542:	3718      	adds	r7, #24
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b08e      	sub	sp, #56	; 0x38
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009552:	f7f8 fdcf 	bl	80020f4 <HAL_GetTick>
 8009556:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009558:	2300      	movs	r3, #0
 800955a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800955c:	2300      	movs	r3, #0
 800955e:	60bb      	str	r3, [r7, #8]
 8009560:	2300      	movs	r3, #0
 8009562:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2108      	movs	r1, #8
 800956e:	4618      	mov	r0, r3
 8009570:	f000 fa50 	bl	8009a14 <SDMMC_CmdBlockLength>
 8009574:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <SD_FindSCR+0x38>
  {
    return errorstate;
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	e0ad      	b.n	80096dc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009588:	041b      	lsls	r3, r3, #16
 800958a:	4619      	mov	r1, r3
 800958c:	4610      	mov	r0, r2
 800958e:	f000 fb8e 	bl	8009cae <SDMMC_CmdAppCommand>
 8009592:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <SD_FindSCR+0x56>
  {
    return errorstate;
 800959a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959c:	e09e      	b.n	80096dc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800959e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095a2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80095a4:	2308      	movs	r3, #8
 80095a6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80095a8:	2330      	movs	r3, #48	; 0x30
 80095aa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80095ac:	2302      	movs	r3, #2
 80095ae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80095b0:	2300      	movs	r3, #0
 80095b2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80095b4:	2301      	movs	r3, #1
 80095b6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f107 0210 	add.w	r2, r7, #16
 80095c0:	4611      	mov	r1, r2
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 f9fa 	bl	80099bc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4618      	mov	r0, r3
 80095ce:	f000 fbd4 	bl	8009d7a <SDMMC_CmdSendSCR>
 80095d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d027      	beq.n	800962a <SD_FindSCR+0xe2>
  {
    return errorstate;
 80095da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095dc:	e07e      	b.n	80096dc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d113      	bne.n	8009614 <SD_FindSCR+0xcc>
 80095ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d110      	bne.n	8009614 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 f958 	bl	80098ac <SDMMC_ReadFIFO>
 80095fc:	4603      	mov	r3, r0
 80095fe:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4618      	mov	r0, r3
 8009606:	f000 f951 	bl	80098ac <SDMMC_ReadFIFO>
 800960a:	4603      	mov	r3, r0
 800960c:	60fb      	str	r3, [r7, #12]
      index++;
 800960e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009610:	3301      	adds	r3, #1
 8009612:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009614:	f7f8 fd6e 	bl	80020f4 <HAL_GetTick>
 8009618:	4602      	mov	r2, r0
 800961a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961c:	1ad3      	subs	r3, r2, r3
 800961e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009622:	d102      	bne.n	800962a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009624:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009628:	e058      	b.n	80096dc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009630:	f240 532a 	movw	r3, #1322	; 0x52a
 8009634:	4013      	ands	r3, r2
 8009636:	2b00      	cmp	r3, #0
 8009638:	d0d1      	beq.n	80095de <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009640:	f003 0308 	and.w	r3, r3, #8
 8009644:	2b00      	cmp	r3, #0
 8009646:	d005      	beq.n	8009654 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2208      	movs	r2, #8
 800964e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009650:	2308      	movs	r3, #8
 8009652:	e043      	b.n	80096dc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800965a:	f003 0302 	and.w	r3, r3, #2
 800965e:	2b00      	cmp	r3, #0
 8009660:	d005      	beq.n	800966e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2202      	movs	r2, #2
 8009668:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800966a:	2302      	movs	r3, #2
 800966c:	e036      	b.n	80096dc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009674:	f003 0320 	and.w	r3, r3, #32
 8009678:	2b00      	cmp	r3, #0
 800967a:	d005      	beq.n	8009688 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2220      	movs	r2, #32
 8009682:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009684:	2320      	movs	r3, #32
 8009686:	e029      	b.n	80096dc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a15      	ldr	r2, [pc, #84]	; (80096e4 <SD_FindSCR+0x19c>)
 800968e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	061a      	lsls	r2, r3, #24
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	021b      	lsls	r3, r3, #8
 8009698:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800969c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	0a1b      	lsrs	r3, r3, #8
 80096a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80096a6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	0e1b      	lsrs	r3, r3, #24
 80096ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80096ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b0:	601a      	str	r2, [r3, #0]
    scr++;
 80096b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b4:	3304      	adds	r3, #4
 80096b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	061a      	lsls	r2, r3, #24
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	021b      	lsls	r3, r3, #8
 80096c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80096c4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	0a1b      	lsrs	r3, r3, #8
 80096ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80096ce:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	0e1b      	lsrs	r3, r3, #24
 80096d4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80096d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3738      	adds	r7, #56	; 0x38
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	18000f3a 	.word	0x18000f3a

080096e8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096fa:	2b1f      	cmp	r3, #31
 80096fc:	d936      	bls.n	800976c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80096fe:	2300      	movs	r3, #0
 8009700:	617b      	str	r3, [r7, #20]
 8009702:	e027      	b.n	8009754 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4618      	mov	r0, r3
 800970a:	f000 f8cf 	bl	80098ac <SDMMC_ReadFIFO>
 800970e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	b2da      	uxtb	r2, r3
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	3301      	adds	r3, #1
 800971c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	0a1b      	lsrs	r3, r3, #8
 8009722:	b2da      	uxtb	r2, r3
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	3301      	adds	r3, #1
 800972c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	0c1b      	lsrs	r3, r3, #16
 8009732:	b2da      	uxtb	r2, r3
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	3301      	adds	r3, #1
 800973c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	0e1b      	lsrs	r3, r3, #24
 8009742:	b2da      	uxtb	r2, r3
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	3301      	adds	r3, #1
 800974c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	3301      	adds	r3, #1
 8009752:	617b      	str	r3, [r7, #20]
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	2b07      	cmp	r3, #7
 8009758:	d9d4      	bls.n	8009704 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	693a      	ldr	r2, [r7, #16]
 800975e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009764:	f1a3 0220 	sub.w	r2, r3, #32
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800976c:	bf00      	nop
 800976e:	3718      	adds	r7, #24
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	69db      	ldr	r3, [r3, #28]
 8009780:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a1b      	ldr	r3, [r3, #32]
 8009786:	2b1f      	cmp	r3, #31
 8009788:	d93a      	bls.n	8009800 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800978a:	2300      	movs	r3, #0
 800978c:	617b      	str	r3, [r7, #20]
 800978e:	e02b      	b.n	80097e8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	3301      	adds	r3, #1
 800979a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	021a      	lsls	r2, r3, #8
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	60fb      	str	r3, [r7, #12]
      tmp++;
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	3301      	adds	r3, #1
 80097ac:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	041a      	lsls	r2, r3, #16
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	60fb      	str	r3, [r7, #12]
      tmp++;
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	3301      	adds	r3, #1
 80097be:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	061a      	lsls	r2, r3, #24
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	60fb      	str	r3, [r7, #12]
      tmp++;
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	3301      	adds	r3, #1
 80097d0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f107 020c 	add.w	r2, r7, #12
 80097da:	4611      	mov	r1, r2
 80097dc:	4618      	mov	r0, r3
 80097de:	f000 f872 	bl	80098c6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	3301      	adds	r3, #1
 80097e6:	617b      	str	r3, [r7, #20]
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	2b07      	cmp	r3, #7
 80097ec:	d9d0      	bls.n	8009790 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a1b      	ldr	r3, [r3, #32]
 80097f8:	f1a3 0220 	sub.w	r2, r3, #32
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	621a      	str	r2, [r3, #32]
  }
}
 8009800:	bf00      	nop
 8009802:	3718      	adds	r7, #24
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009858:	b084      	sub	sp, #16
 800985a:	b480      	push	{r7}
 800985c:	b085      	sub	sp, #20
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	f107 001c 	add.w	r0, r7, #28
 8009866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800986a:	2300      	movs	r3, #0
 800986c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800986e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009870:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8009872:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8009876:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009878:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800987a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800987c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800987e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	4313      	orrs	r3, r2
 8009884:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	685a      	ldr	r2, [r3, #4]
 800988a:	4b07      	ldr	r3, [pc, #28]	; (80098a8 <SDMMC_Init+0x50>)
 800988c:	4013      	ands	r3, r2
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	431a      	orrs	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3714      	adds	r7, #20
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	b004      	add	sp, #16
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	ffc02c00 	.word	0xffc02c00

080098ac <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	370c      	adds	r7, #12
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr

080098c6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80098c6:	b480      	push	{r7}
 80098c8:	b083      	sub	sp, #12
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80098da:	2300      	movs	r3, #0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f043 0203 	orr.w	r2, r3, #3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800990a:	b480      	push	{r7}
 800990c:	b083      	sub	sp, #12
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f003 0303 	and.w	r3, r3, #3
}
 800991a:	4618      	mov	r0, r3
 800991c:	370c      	adds	r7, #12
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr
	...

08009928 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009932:	2300      	movs	r3, #0
 8009934:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009946:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800994c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8009952:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	4313      	orrs	r3, r2
 8009958:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68da      	ldr	r2, [r3, #12]
 800995e:	4b06      	ldr	r3, [pc, #24]	; (8009978 <SDMMC_SendCommand+0x50>)
 8009960:	4013      	ands	r3, r2
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	431a      	orrs	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800996a:	2300      	movs	r3, #0
}
 800996c:	4618      	mov	r0, r3
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	fffee0c0 	.word	0xfffee0c0

0800997c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	b2db      	uxtb	r3, r3
}
 800998a:	4618      	mov	r0, r3
 800998c:	370c      	adds	r7, #12
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr

08009996 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009996:	b480      	push	{r7}
 8009998:	b085      	sub	sp, #20
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	3314      	adds	r3, #20
 80099a4:	461a      	mov	r2, r3
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	4413      	add	r3, r2
 80099aa:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3714      	adds	r7, #20
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80099c6:	2300      	movs	r3, #0
 80099c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	685a      	ldr	r2, [r3, #4]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80099e2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80099e8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80099ee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	431a      	orrs	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009a06:	2300      	movs	r3, #0

}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b088      	sub	sp, #32
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009a22:	2310      	movs	r3, #16
 8009a24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a36:	f107 0308 	add.w	r3, r7, #8
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f7ff ff73 	bl	8009928 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a46:	2110      	movs	r1, #16
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fa5f 	bl	8009f0c <SDMMC_GetCmdResp1>
 8009a4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a50:	69fb      	ldr	r3, [r7, #28]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3720      	adds	r7, #32
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b088      	sub	sp, #32
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
 8009a62:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009a68:	2311      	movs	r3, #17
 8009a6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a72:	2300      	movs	r3, #0
 8009a74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a7c:	f107 0308 	add.w	r3, r7, #8
 8009a80:	4619      	mov	r1, r3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f7ff ff50 	bl	8009928 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a8c:	2111      	movs	r1, #17
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fa3c 	bl	8009f0c <SDMMC_GetCmdResp1>
 8009a94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a96:	69fb      	ldr	r3, [r7, #28]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3720      	adds	r7, #32
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b088      	sub	sp, #32
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009aae:	2312      	movs	r3, #18
 8009ab0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ab6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ac0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ac2:	f107 0308 	add.w	r3, r7, #8
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f7ff ff2d 	bl	8009928 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ad2:	2112      	movs	r1, #18
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fa19 	bl	8009f0c <SDMMC_GetCmdResp1>
 8009ada:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009adc:	69fb      	ldr	r3, [r7, #28]
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3720      	adds	r7, #32
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b088      	sub	sp, #32
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
 8009aee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009af4:	2318      	movs	r3, #24
 8009af6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009afc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009afe:	2300      	movs	r3, #0
 8009b00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b08:	f107 0308 	add.w	r3, r7, #8
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7ff ff0a 	bl	8009928 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b18:	2118      	movs	r1, #24
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f9f6 	bl	8009f0c <SDMMC_GetCmdResp1>
 8009b20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b22:	69fb      	ldr	r3, [r7, #28]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3720      	adds	r7, #32
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b088      	sub	sp, #32
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009b3a:	2319      	movs	r3, #25
 8009b3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b44:	2300      	movs	r3, #0
 8009b46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b4e:	f107 0308 	add.w	r3, r7, #8
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f7ff fee7 	bl	8009928 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b5e:	2119      	movs	r1, #25
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 f9d3 	bl	8009f0c <SDMMC_GetCmdResp1>
 8009b66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b68:	69fb      	ldr	r3, [r7, #28]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3720      	adds	r7, #32
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
	...

08009b74 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b088      	sub	sp, #32
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009b80:	230c      	movs	r3, #12
 8009b82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b92:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bac:	f107 0308 	add.w	r3, r7, #8
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7ff feb8 	bl	8009928 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009bb8:	4a0b      	ldr	r2, [pc, #44]	; (8009be8 <SDMMC_CmdStopTransfer+0x74>)
 8009bba:	210c      	movs	r1, #12
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f9a5 	bl	8009f0c <SDMMC_GetCmdResp1>
 8009bc2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bd6:	d101      	bne.n	8009bdc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8009bdc:	69fb      	ldr	r3, [r7, #28]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3720      	adds	r7, #32
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	05f5e100 	.word	0x05f5e100

08009bec <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b088      	sub	sp, #32
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009bfa:	2307      	movs	r3, #7
 8009bfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c04:	2300      	movs	r3, #0
 8009c06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c0e:	f107 0308 	add.w	r3, r7, #8
 8009c12:	4619      	mov	r1, r3
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f7ff fe87 	bl	8009928 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c1e:	2107      	movs	r1, #7
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f973 	bl	8009f0c <SDMMC_GetCmdResp1>
 8009c26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c28:	69fb      	ldr	r3, [r7, #28]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3720      	adds	r7, #32
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b088      	sub	sp, #32
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009c42:	2300      	movs	r3, #0
 8009c44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c46:	2300      	movs	r3, #0
 8009c48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c50:	f107 0308 	add.w	r3, r7, #8
 8009c54:	4619      	mov	r1, r3
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f7ff fe66 	bl	8009928 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fb97 	bl	800a390 <SDMMC_GetCmdError>
 8009c62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c64:	69fb      	ldr	r3, [r7, #28]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3720      	adds	r7, #32
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b088      	sub	sp, #32
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009c76:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009c7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009c7c:	2308      	movs	r3, #8
 8009c7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c86:	2300      	movs	r3, #0
 8009c88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c90:	f107 0308 	add.w	r3, r7, #8
 8009c94:	4619      	mov	r1, r3
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7ff fe46 	bl	8009928 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fb29 	bl	800a2f4 <SDMMC_GetCmdResp7>
 8009ca2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ca4:	69fb      	ldr	r3, [r7, #28]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3720      	adds	r7, #32
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b088      	sub	sp, #32
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009cbc:	2337      	movs	r3, #55	; 0x37
 8009cbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cd0:	f107 0308 	add.w	r3, r7, #8
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7ff fe26 	bl	8009928 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ce0:	2137      	movs	r1, #55	; 0x37
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f912 	bl	8009f0c <SDMMC_GetCmdResp1>
 8009ce8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cea:	69fb      	ldr	r3, [r7, #28]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3720      	adds	r7, #32
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b088      	sub	sp, #32
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009d02:	2329      	movs	r3, #41	; 0x29
 8009d04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d16:	f107 0308 	add.w	r3, r7, #8
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f7ff fe03 	bl	8009928 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fa2e 	bl	800a184 <SDMMC_GetCmdResp3>
 8009d28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d2a:	69fb      	ldr	r3, [r7, #28]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3720      	adds	r7, #32
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b088      	sub	sp, #32
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009d42:	2306      	movs	r3, #6
 8009d44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d56:	f107 0308 	add.w	r3, r7, #8
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7ff fde3 	bl	8009928 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d66:	2106      	movs	r1, #6
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f8cf 	bl	8009f0c <SDMMC_GetCmdResp1>
 8009d6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d70:	69fb      	ldr	r3, [r7, #28]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3720      	adds	r7, #32
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b088      	sub	sp, #32
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009d82:	2300      	movs	r3, #0
 8009d84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009d86:	2333      	movs	r3, #51	; 0x33
 8009d88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d90:	2300      	movs	r3, #0
 8009d92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d9a:	f107 0308 	add.w	r3, r7, #8
 8009d9e:	4619      	mov	r1, r3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f7ff fdc1 	bl	8009928 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009daa:	2133      	movs	r1, #51	; 0x33
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 f8ad 	bl	8009f0c <SDMMC_GetCmdResp1>
 8009db2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009db4:	69fb      	ldr	r3, [r7, #28]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3720      	adds	r7, #32
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b088      	sub	sp, #32
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009dca:	2302      	movs	r3, #2
 8009dcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009dce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009dd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ddc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009dde:	f107 0308 	add.w	r3, r7, #8
 8009de2:	4619      	mov	r1, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7ff fd9f 	bl	8009928 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 f980 	bl	800a0f0 <SDMMC_GetCmdResp2>
 8009df0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009df2:	69fb      	ldr	r3, [r7, #28]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3720      	adds	r7, #32
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b088      	sub	sp, #32
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009e0a:	2309      	movs	r3, #9
 8009e0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009e0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009e12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e14:	2300      	movs	r3, #0
 8009e16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e1e:	f107 0308 	add.w	r3, r7, #8
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f7ff fd7f 	bl	8009928 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 f960 	bl	800a0f0 <SDMMC_GetCmdResp2>
 8009e30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e32:	69fb      	ldr	r3, [r7, #28]
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3720      	adds	r7, #32
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b088      	sub	sp, #32
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009e46:	2300      	movs	r3, #0
 8009e48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e54:	2300      	movs	r3, #0
 8009e56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e5e:	f107 0308 	add.w	r3, r7, #8
 8009e62:	4619      	mov	r1, r3
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7ff fd5f 	bl	8009928 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009e6a:	683a      	ldr	r2, [r7, #0]
 8009e6c:	2103      	movs	r1, #3
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f9c8 	bl	800a204 <SDMMC_GetCmdResp6>
 8009e74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e76:	69fb      	ldr	r3, [r7, #28]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3720      	adds	r7, #32
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009e8e:	230d      	movs	r3, #13
 8009e90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ea0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ea2:	f107 0308 	add.w	r3, r7, #8
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f7ff fd3d 	bl	8009928 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eb2:	210d      	movs	r1, #13
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 f829 	bl	8009f0c <SDMMC_GetCmdResp1>
 8009eba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ebc:	69fb      	ldr	r3, [r7, #28]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3720      	adds	r7, #32
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b088      	sub	sp, #32
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009ed2:	230d      	movs	r3, #13
 8009ed4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009eda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009edc:	2300      	movs	r3, #0
 8009ede:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ee4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ee6:	f107 0308 	add.w	r3, r7, #8
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f7ff fd1b 	bl	8009928 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ef6:	210d      	movs	r1, #13
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 f807 	bl	8009f0c <SDMMC_GetCmdResp1>
 8009efe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f00:	69fb      	ldr	r3, [r7, #28]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3720      	adds	r7, #32
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
	...

08009f0c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b088      	sub	sp, #32
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	460b      	mov	r3, r1
 8009f16:	607a      	str	r2, [r7, #4]
 8009f18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009f1a:	4b70      	ldr	r3, [pc, #448]	; (800a0dc <SDMMC_GetCmdResp1+0x1d0>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a70      	ldr	r2, [pc, #448]	; (800a0e0 <SDMMC_GetCmdResp1+0x1d4>)
 8009f20:	fba2 2303 	umull	r2, r3, r2, r3
 8009f24:	0a5a      	lsrs	r2, r3, #9
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	fb02 f303 	mul.w	r3, r2, r3
 8009f2c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	1e5a      	subs	r2, r3, #1
 8009f32:	61fa      	str	r2, [r7, #28]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d102      	bne.n	8009f3e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f3c:	e0c9      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f42:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009f44:	69ba      	ldr	r2, [r7, #24]
 8009f46:	4b67      	ldr	r3, [pc, #412]	; (800a0e4 <SDMMC_GetCmdResp1+0x1d8>)
 8009f48:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d0ef      	beq.n	8009f2e <SDMMC_GetCmdResp1+0x22>
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d1ea      	bne.n	8009f2e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d004      	beq.n	8009f6e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2204      	movs	r2, #4
 8009f68:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f6a:	2304      	movs	r3, #4
 8009f6c:	e0b1      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f72:	f003 0301 	and.w	r3, r3, #1
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d004      	beq.n	8009f84 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f80:	2301      	movs	r3, #1
 8009f82:	e0a6      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	4a58      	ldr	r2, [pc, #352]	; (800a0e8 <SDMMC_GetCmdResp1+0x1dc>)
 8009f88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f7ff fcf6 	bl	800997c <SDMMC_GetCommandResponse>
 8009f90:	4603      	mov	r3, r0
 8009f92:	461a      	mov	r2, r3
 8009f94:	7afb      	ldrb	r3, [r7, #11]
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d001      	beq.n	8009f9e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e099      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f7ff fcf8 	bl	8009996 <SDMMC_GetResponse>
 8009fa6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009fa8:	697a      	ldr	r2, [r7, #20]
 8009faa:	4b50      	ldr	r3, [pc, #320]	; (800a0ec <SDMMC_GetCmdResp1+0x1e0>)
 8009fac:	4013      	ands	r3, r2
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d101      	bne.n	8009fb6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	e08d      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	da02      	bge.n	8009fc2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009fbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009fc0:	e087      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d001      	beq.n	8009fd0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009fcc:	2340      	movs	r3, #64	; 0x40
 8009fce:	e080      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d001      	beq.n	8009fde <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009fda:	2380      	movs	r3, #128	; 0x80
 8009fdc:	e079      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d002      	beq.n	8009fee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fec:	e071      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d002      	beq.n	8009ffe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ffc:	e069      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a004:	2b00      	cmp	r3, #0
 800a006:	d002      	beq.n	800a00e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a00c:	e061      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a014:	2b00      	cmp	r3, #0
 800a016:	d002      	beq.n	800a01e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a018:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a01c:	e059      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a024:	2b00      	cmp	r3, #0
 800a026:	d002      	beq.n	800a02e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a02c:	e051      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a034:	2b00      	cmp	r3, #0
 800a036:	d002      	beq.n	800a03e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a03c:	e049      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a044:	2b00      	cmp	r3, #0
 800a046:	d002      	beq.n	800a04e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a048:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a04c:	e041      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d002      	beq.n	800a05e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a05c:	e039      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a064:	2b00      	cmp	r3, #0
 800a066:	d002      	beq.n	800a06e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a068:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a06c:	e031      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a074:	2b00      	cmp	r3, #0
 800a076:	d002      	beq.n	800a07e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a078:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a07c:	e029      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a084:	2b00      	cmp	r3, #0
 800a086:	d002      	beq.n	800a08e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a088:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a08c:	e021      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d002      	beq.n	800a09e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a098:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a09c:	e019      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a0a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a0ac:	e011      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d002      	beq.n	800a0be <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a0b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a0bc:	e009      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	f003 0308 	and.w	r3, r3, #8
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d002      	beq.n	800a0ce <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a0c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a0cc:	e001      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a0ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3720      	adds	r7, #32
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20000004 	.word	0x20000004
 800a0e0:	10624dd3 	.word	0x10624dd3
 800a0e4:	00200045 	.word	0x00200045
 800a0e8:	002000c5 	.word	0x002000c5
 800a0ec:	fdffe008 	.word	0xfdffe008

0800a0f0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a0f8:	4b1f      	ldr	r3, [pc, #124]	; (800a178 <SDMMC_GetCmdResp2+0x88>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a1f      	ldr	r2, [pc, #124]	; (800a17c <SDMMC_GetCmdResp2+0x8c>)
 800a0fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a102:	0a5b      	lsrs	r3, r3, #9
 800a104:	f241 3288 	movw	r2, #5000	; 0x1388
 800a108:	fb02 f303 	mul.w	r3, r2, r3
 800a10c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	1e5a      	subs	r2, r3, #1
 800a112:	60fa      	str	r2, [r7, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d102      	bne.n	800a11e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a118:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a11c:	e026      	b.n	800a16c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a122:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d0ef      	beq.n	800a10e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a134:	2b00      	cmp	r3, #0
 800a136:	d1ea      	bne.n	800a10e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a13c:	f003 0304 	and.w	r3, r3, #4
 800a140:	2b00      	cmp	r3, #0
 800a142:	d004      	beq.n	800a14e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2204      	movs	r2, #4
 800a148:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a14a:	2304      	movs	r3, #4
 800a14c:	e00e      	b.n	800a16c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a152:	f003 0301 	and.w	r3, r3, #1
 800a156:	2b00      	cmp	r3, #0
 800a158:	d004      	beq.n	800a164 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2201      	movs	r2, #1
 800a15e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a160:	2301      	movs	r3, #1
 800a162:	e003      	b.n	800a16c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a06      	ldr	r2, [pc, #24]	; (800a180 <SDMMC_GetCmdResp2+0x90>)
 800a168:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3714      	adds	r7, #20
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	20000004 	.word	0x20000004
 800a17c:	10624dd3 	.word	0x10624dd3
 800a180:	002000c5 	.word	0x002000c5

0800a184 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a184:	b480      	push	{r7}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a18c:	4b1a      	ldr	r3, [pc, #104]	; (800a1f8 <SDMMC_GetCmdResp3+0x74>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a1a      	ldr	r2, [pc, #104]	; (800a1fc <SDMMC_GetCmdResp3+0x78>)
 800a192:	fba2 2303 	umull	r2, r3, r2, r3
 800a196:	0a5b      	lsrs	r3, r3, #9
 800a198:	f241 3288 	movw	r2, #5000	; 0x1388
 800a19c:	fb02 f303 	mul.w	r3, r2, r3
 800a1a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	1e5a      	subs	r2, r3, #1
 800a1a6:	60fa      	str	r2, [r7, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d102      	bne.n	800a1b2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1b0:	e01b      	b.n	800a1ea <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1b6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d0ef      	beq.n	800a1a2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d1ea      	bne.n	800a1a2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d0:	f003 0304 	and.w	r3, r3, #4
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d004      	beq.n	800a1e2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2204      	movs	r2, #4
 800a1dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1de:	2304      	movs	r3, #4
 800a1e0:	e003      	b.n	800a1ea <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a06      	ldr	r2, [pc, #24]	; (800a200 <SDMMC_GetCmdResp3+0x7c>)
 800a1e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	20000004 	.word	0x20000004
 800a1fc:	10624dd3 	.word	0x10624dd3
 800a200:	002000c5 	.word	0x002000c5

0800a204 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b088      	sub	sp, #32
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	460b      	mov	r3, r1
 800a20e:	607a      	str	r2, [r7, #4]
 800a210:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a212:	4b35      	ldr	r3, [pc, #212]	; (800a2e8 <SDMMC_GetCmdResp6+0xe4>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a35      	ldr	r2, [pc, #212]	; (800a2ec <SDMMC_GetCmdResp6+0xe8>)
 800a218:	fba2 2303 	umull	r2, r3, r2, r3
 800a21c:	0a5b      	lsrs	r3, r3, #9
 800a21e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a222:	fb02 f303 	mul.w	r3, r2, r3
 800a226:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	1e5a      	subs	r2, r3, #1
 800a22c:	61fa      	str	r2, [r7, #28]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d102      	bne.n	800a238 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a232:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a236:	e052      	b.n	800a2de <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a23c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a244:	2b00      	cmp	r3, #0
 800a246:	d0ef      	beq.n	800a228 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1ea      	bne.n	800a228 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a256:	f003 0304 	and.w	r3, r3, #4
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d004      	beq.n	800a268 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2204      	movs	r2, #4
 800a262:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a264:	2304      	movs	r3, #4
 800a266:	e03a      	b.n	800a2de <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a26c:	f003 0301 	and.w	r3, r3, #1
 800a270:	2b00      	cmp	r3, #0
 800a272:	d004      	beq.n	800a27e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2201      	movs	r2, #1
 800a278:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e02f      	b.n	800a2de <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f7ff fb7c 	bl	800997c <SDMMC_GetCommandResponse>
 800a284:	4603      	mov	r3, r0
 800a286:	461a      	mov	r2, r3
 800a288:	7afb      	ldrb	r3, [r7, #11]
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d001      	beq.n	800a292 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a28e:	2301      	movs	r3, #1
 800a290:	e025      	b.n	800a2de <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	4a16      	ldr	r2, [pc, #88]	; (800a2f0 <SDMMC_GetCmdResp6+0xec>)
 800a296:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a298:	2100      	movs	r1, #0
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f7ff fb7b 	bl	8009996 <SDMMC_GetResponse>
 800a2a0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d106      	bne.n	800a2ba <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	0c1b      	lsrs	r3, r3, #16
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	e011      	b.n	800a2de <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d002      	beq.n	800a2ca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a2c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2c8:	e009      	b.n	800a2de <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d002      	beq.n	800a2da <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a2d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2d8:	e001      	b.n	800a2de <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a2da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3720      	adds	r7, #32
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20000004 	.word	0x20000004
 800a2ec:	10624dd3 	.word	0x10624dd3
 800a2f0:	002000c5 	.word	0x002000c5

0800a2f4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a2fc:	4b22      	ldr	r3, [pc, #136]	; (800a388 <SDMMC_GetCmdResp7+0x94>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a22      	ldr	r2, [pc, #136]	; (800a38c <SDMMC_GetCmdResp7+0x98>)
 800a302:	fba2 2303 	umull	r2, r3, r2, r3
 800a306:	0a5b      	lsrs	r3, r3, #9
 800a308:	f241 3288 	movw	r2, #5000	; 0x1388
 800a30c:	fb02 f303 	mul.w	r3, r2, r3
 800a310:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	1e5a      	subs	r2, r3, #1
 800a316:	60fa      	str	r2, [r7, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d102      	bne.n	800a322 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a31c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a320:	e02c      	b.n	800a37c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a326:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d0ef      	beq.n	800a312 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1ea      	bne.n	800a312 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a340:	f003 0304 	and.w	r3, r3, #4
 800a344:	2b00      	cmp	r3, #0
 800a346:	d004      	beq.n	800a352 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2204      	movs	r2, #4
 800a34c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a34e:	2304      	movs	r3, #4
 800a350:	e014      	b.n	800a37c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a356:	f003 0301 	and.w	r3, r3, #1
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d004      	beq.n	800a368 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2201      	movs	r2, #1
 800a362:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a364:	2301      	movs	r3, #1
 800a366:	e009      	b.n	800a37c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a36c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a370:	2b00      	cmp	r3, #0
 800a372:	d002      	beq.n	800a37a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2240      	movs	r2, #64	; 0x40
 800a378:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a37a:	2300      	movs	r3, #0

}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr
 800a388:	20000004 	.word	0x20000004
 800a38c:	10624dd3 	.word	0x10624dd3

0800a390 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a398:	4b11      	ldr	r3, [pc, #68]	; (800a3e0 <SDMMC_GetCmdError+0x50>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a11      	ldr	r2, [pc, #68]	; (800a3e4 <SDMMC_GetCmdError+0x54>)
 800a39e:	fba2 2303 	umull	r2, r3, r2, r3
 800a3a2:	0a5b      	lsrs	r3, r3, #9
 800a3a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3a8:	fb02 f303 	mul.w	r3, r2, r3
 800a3ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	1e5a      	subs	r2, r3, #1
 800a3b2:	60fa      	str	r2, [r7, #12]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d102      	bne.n	800a3be <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a3bc:	e009      	b.n	800a3d2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d0f1      	beq.n	800a3ae <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4a06      	ldr	r2, [pc, #24]	; (800a3e8 <SDMMC_GetCmdError+0x58>)
 800a3ce:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	20000004 	.word	0x20000004
 800a3e4:	10624dd3 	.word	0x10624dd3
 800a3e8:	002000c5 	.word	0x002000c5

0800a3ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a3f0:	4904      	ldr	r1, [pc, #16]	; (800a404 <MX_FATFS_Init+0x18>)
 800a3f2:	4805      	ldr	r0, [pc, #20]	; (800a408 <MX_FATFS_Init+0x1c>)
 800a3f4:	f003 fa50 	bl	800d898 <FATFS_LinkDriver>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	4b03      	ldr	r3, [pc, #12]	; (800a40c <MX_FATFS_Init+0x20>)
 800a3fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a400:	bf00      	nop
 800a402:	bd80      	pop	{r7, pc}
 800a404:	200002b4 	.word	0x200002b4
 800a408:	0800db18 	.word	0x0800db18
 800a40c:	200002b0 	.word	0x200002b0

0800a410 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a410:	b480      	push	{r7}
 800a412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a414:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a416:	4618      	mov	r0, r3
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a426:	2300      	movs	r3, #0
 800a428:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a42a:	f7f6 f9ab 	bl	8000784 <BSP_SD_IsDetected>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b01      	cmp	r3, #1
 800a432:	d001      	beq.n	800a438 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a434:	2302      	movs	r3, #2
 800a436:	e012      	b.n	800a45e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a438:	480b      	ldr	r0, [pc, #44]	; (800a468 <BSP_SD_Init+0x48>)
 800a43a:	f7fd fbe1 	bl	8007c00 <HAL_SD_Init>
 800a43e:	4603      	mov	r3, r0
 800a440:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a442:	79fb      	ldrb	r3, [r7, #7]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d109      	bne.n	800a45c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a448:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a44c:	4806      	ldr	r0, [pc, #24]	; (800a468 <BSP_SD_Init+0x48>)
 800a44e:	f7fe fc5f 	bl	8008d10 <HAL_SD_ConfigWideBusOperation>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d001      	beq.n	800a45c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a45c:	79fb      	ldrb	r3, [r7, #7]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	20000230 	.word	0x20000230

0800a46c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b088      	sub	sp, #32
 800a470:	af02      	add	r7, sp, #8
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
 800a478:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a47a:	2300      	movs	r3, #0
 800a47c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	68ba      	ldr	r2, [r7, #8]
 800a486:	68f9      	ldr	r1, [r7, #12]
 800a488:	4806      	ldr	r0, [pc, #24]	; (800a4a4 <BSP_SD_ReadBlocks+0x38>)
 800a48a:	f7fd fcd9 	bl	8007e40 <HAL_SD_ReadBlocks>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d001      	beq.n	800a498 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a498:	7dfb      	ldrb	r3, [r7, #23]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3718      	adds	r7, #24
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	20000230 	.word	0x20000230

0800a4a8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b088      	sub	sp, #32
 800a4ac:	af02      	add	r7, sp, #8
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	607a      	str	r2, [r7, #4]
 800a4b4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	68f9      	ldr	r1, [r7, #12]
 800a4c4:	4806      	ldr	r0, [pc, #24]	; (800a4e0 <BSP_SD_WriteBlocks+0x38>)
 800a4c6:	f7fd fe45 	bl	8008154 <HAL_SD_WriteBlocks>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d001      	beq.n	800a4d4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a4d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3718      	adds	r7, #24
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	20000230 	.word	0x20000230

0800a4e4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a4e8:	4805      	ldr	r0, [pc, #20]	; (800a500 <BSP_SD_GetCardState+0x1c>)
 800a4ea:	f7fe fd23 	bl	8008f34 <HAL_SD_GetCardState>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b04      	cmp	r3, #4
 800a4f2:	bf14      	ite	ne
 800a4f4:	2301      	movne	r3, #1
 800a4f6:	2300      	moveq	r3, #0
 800a4f8:	b2db      	uxtb	r3, r3
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	20000230 	.word	0x20000230

0800a504 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a50c:	6879      	ldr	r1, [r7, #4]
 800a50e:	4803      	ldr	r0, [pc, #12]	; (800a51c <BSP_SD_GetCardInfo+0x18>)
 800a510:	f7fe fbd2 	bl	8008cb8 <HAL_SD_GetCardInfo>
}
 800a514:	bf00      	nop
 800a516:	3708      	adds	r7, #8
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	20000230 	.word	0x20000230

0800a520 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a528:	f000 f80e 	bl	800a548 <BSP_SD_WriteCpltCallback>
}
 800a52c:	bf00      	nop
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a53c:	f000 f80b 	bl	800a556 <BSP_SD_ReadCpltCallback>
}
 800a540:	bf00      	nop
 800a542:	3708      	adds	r7, #8
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800a548:	b480      	push	{r7}
 800a54a:	af00      	add	r7, sp, #0

}
 800a54c:	bf00      	nop
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr

0800a556 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800a556:	b480      	push	{r7}
 800a558:	af00      	add	r7, sp, #0

}
 800a55a:	bf00      	nop
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	4603      	mov	r3, r0
 800a56c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a56e:	4b0b      	ldr	r3, [pc, #44]	; (800a59c <SD_CheckStatus+0x38>)
 800a570:	2201      	movs	r2, #1
 800a572:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a574:	f7ff ffb6 	bl	800a4e4 <BSP_SD_GetCardState>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d107      	bne.n	800a58e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a57e:	4b07      	ldr	r3, [pc, #28]	; (800a59c <SD_CheckStatus+0x38>)
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	b2db      	uxtb	r3, r3
 800a584:	f023 0301 	bic.w	r3, r3, #1
 800a588:	b2da      	uxtb	r2, r3
 800a58a:	4b04      	ldr	r3, [pc, #16]	; (800a59c <SD_CheckStatus+0x38>)
 800a58c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a58e:	4b03      	ldr	r3, [pc, #12]	; (800a59c <SD_CheckStatus+0x38>)
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	b2db      	uxtb	r3, r3
}
 800a594:	4618      	mov	r0, r3
 800a596:	3708      	adds	r7, #8
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	20000011 	.word	0x20000011

0800a5a0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a5aa:	4b0b      	ldr	r3, [pc, #44]	; (800a5d8 <SD_initialize+0x38>)
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a5b0:	f7ff ff36 	bl	800a420 <BSP_SD_Init>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d107      	bne.n	800a5ca <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a5ba:	79fb      	ldrb	r3, [r7, #7]
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7ff ffd1 	bl	800a564 <SD_CheckStatus>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	4b04      	ldr	r3, [pc, #16]	; (800a5d8 <SD_initialize+0x38>)
 800a5c8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a5ca:	4b03      	ldr	r3, [pc, #12]	; (800a5d8 <SD_initialize+0x38>)
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	b2db      	uxtb	r3, r3
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3708      	adds	r7, #8
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	20000011 	.word	0x20000011

0800a5dc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a5e6:	79fb      	ldrb	r3, [r7, #7]
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7ff ffbb 	bl	800a564 <SD_CheckStatus>
 800a5ee:	4603      	mov	r3, r0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3708      	adds	r7, #8
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b086      	sub	sp, #24
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60b9      	str	r1, [r7, #8]
 800a600:	607a      	str	r2, [r7, #4]
 800a602:	603b      	str	r3, [r7, #0]
 800a604:	4603      	mov	r3, r0
 800a606:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a60c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a610:	683a      	ldr	r2, [r7, #0]
 800a612:	6879      	ldr	r1, [r7, #4]
 800a614:	68b8      	ldr	r0, [r7, #8]
 800a616:	f7ff ff29 	bl	800a46c <BSP_SD_ReadBlocks>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d107      	bne.n	800a630 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a620:	bf00      	nop
 800a622:	f7ff ff5f 	bl	800a4e4 <BSP_SD_GetCardState>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1fa      	bne.n	800a622 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a62c:	2300      	movs	r3, #0
 800a62e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a630:	7dfb      	ldrb	r3, [r7, #23]
}
 800a632:	4618      	mov	r0, r3
 800a634:	3718      	adds	r7, #24
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b086      	sub	sp, #24
 800a63e:	af00      	add	r7, sp, #0
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	607a      	str	r2, [r7, #4]
 800a644:	603b      	str	r3, [r7, #0]
 800a646:	4603      	mov	r3, r0
 800a648:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a64e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	6879      	ldr	r1, [r7, #4]
 800a656:	68b8      	ldr	r0, [r7, #8]
 800a658:	f7ff ff26 	bl	800a4a8 <BSP_SD_WriteBlocks>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d107      	bne.n	800a672 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a662:	bf00      	nop
 800a664:	f7ff ff3e 	bl	800a4e4 <BSP_SD_GetCardState>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d1fa      	bne.n	800a664 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a66e:	2300      	movs	r3, #0
 800a670:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a672:	7dfb      	ldrb	r3, [r7, #23]
}
 800a674:	4618      	mov	r0, r3
 800a676:	3718      	adds	r7, #24
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b08c      	sub	sp, #48	; 0x30
 800a680:	af00      	add	r7, sp, #0
 800a682:	4603      	mov	r3, r0
 800a684:	603a      	str	r2, [r7, #0]
 800a686:	71fb      	strb	r3, [r7, #7]
 800a688:	460b      	mov	r3, r1
 800a68a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a692:	4b25      	ldr	r3, [pc, #148]	; (800a728 <SD_ioctl+0xac>)
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	b2db      	uxtb	r3, r3
 800a698:	f003 0301 	and.w	r3, r3, #1
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d001      	beq.n	800a6a4 <SD_ioctl+0x28>
 800a6a0:	2303      	movs	r3, #3
 800a6a2:	e03c      	b.n	800a71e <SD_ioctl+0xa2>

  switch (cmd)
 800a6a4:	79bb      	ldrb	r3, [r7, #6]
 800a6a6:	2b03      	cmp	r3, #3
 800a6a8:	d834      	bhi.n	800a714 <SD_ioctl+0x98>
 800a6aa:	a201      	add	r2, pc, #4	; (adr r2, 800a6b0 <SD_ioctl+0x34>)
 800a6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b0:	0800a6c1 	.word	0x0800a6c1
 800a6b4:	0800a6c9 	.word	0x0800a6c9
 800a6b8:	0800a6e1 	.word	0x0800a6e1
 800a6bc:	0800a6fb 	.word	0x0800a6fb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a6c6:	e028      	b.n	800a71a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a6c8:	f107 0308 	add.w	r3, r7, #8
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7ff ff19 	bl	800a504 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a6d2:	6a3a      	ldr	r2, [r7, #32]
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a6de:	e01c      	b.n	800a71a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a6e0:	f107 0308 	add.w	r3, r7, #8
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7ff ff0d 	bl	800a504 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a6f8:	e00f      	b.n	800a71a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a6fa:	f107 0308 	add.w	r3, r7, #8
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7ff ff00 	bl	800a504 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a706:	0a5a      	lsrs	r2, r3, #9
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a70c:	2300      	movs	r3, #0
 800a70e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a712:	e002      	b.n	800a71a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a714:	2304      	movs	r3, #4
 800a716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a71a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3730      	adds	r7, #48	; 0x30
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	20000011 	.word	0x20000011

0800a72c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	4603      	mov	r3, r0
 800a734:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a736:	79fb      	ldrb	r3, [r7, #7]
 800a738:	4a08      	ldr	r2, [pc, #32]	; (800a75c <disk_status+0x30>)
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	4413      	add	r3, r2
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	79fa      	ldrb	r2, [r7, #7]
 800a744:	4905      	ldr	r1, [pc, #20]	; (800a75c <disk_status+0x30>)
 800a746:	440a      	add	r2, r1
 800a748:	7a12      	ldrb	r2, [r2, #8]
 800a74a:	4610      	mov	r0, r2
 800a74c:	4798      	blx	r3
 800a74e:	4603      	mov	r3, r0
 800a750:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a752:	7bfb      	ldrb	r3, [r7, #15]
}
 800a754:	4618      	mov	r0, r3
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	20000940 	.word	0x20000940

0800a760 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	4603      	mov	r3, r0
 800a768:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a76a:	2300      	movs	r3, #0
 800a76c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a76e:	79fb      	ldrb	r3, [r7, #7]
 800a770:	4a0d      	ldr	r2, [pc, #52]	; (800a7a8 <disk_initialize+0x48>)
 800a772:	5cd3      	ldrb	r3, [r2, r3]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d111      	bne.n	800a79c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a778:	79fb      	ldrb	r3, [r7, #7]
 800a77a:	4a0b      	ldr	r2, [pc, #44]	; (800a7a8 <disk_initialize+0x48>)
 800a77c:	2101      	movs	r1, #1
 800a77e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a780:	79fb      	ldrb	r3, [r7, #7]
 800a782:	4a09      	ldr	r2, [pc, #36]	; (800a7a8 <disk_initialize+0x48>)
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	4413      	add	r3, r2
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	79fa      	ldrb	r2, [r7, #7]
 800a78e:	4906      	ldr	r1, [pc, #24]	; (800a7a8 <disk_initialize+0x48>)
 800a790:	440a      	add	r2, r1
 800a792:	7a12      	ldrb	r2, [r2, #8]
 800a794:	4610      	mov	r0, r2
 800a796:	4798      	blx	r3
 800a798:	4603      	mov	r3, r0
 800a79a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a79c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20000940 	.word	0x20000940

0800a7ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a7ac:	b590      	push	{r4, r7, lr}
 800a7ae:	b087      	sub	sp, #28
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60b9      	str	r1, [r7, #8]
 800a7b4:	607a      	str	r2, [r7, #4]
 800a7b6:	603b      	str	r3, [r7, #0]
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a7bc:	7bfb      	ldrb	r3, [r7, #15]
 800a7be:	4a0a      	ldr	r2, [pc, #40]	; (800a7e8 <disk_read+0x3c>)
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	4413      	add	r3, r2
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	689c      	ldr	r4, [r3, #8]
 800a7c8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ca:	4a07      	ldr	r2, [pc, #28]	; (800a7e8 <disk_read+0x3c>)
 800a7cc:	4413      	add	r3, r2
 800a7ce:	7a18      	ldrb	r0, [r3, #8]
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	68b9      	ldr	r1, [r7, #8]
 800a7d6:	47a0      	blx	r4
 800a7d8:	4603      	mov	r3, r0
 800a7da:	75fb      	strb	r3, [r7, #23]
  return res;
 800a7dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	371c      	adds	r7, #28
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd90      	pop	{r4, r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	20000940 	.word	0x20000940

0800a7ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a7ec:	b590      	push	{r4, r7, lr}
 800a7ee:	b087      	sub	sp, #28
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60b9      	str	r1, [r7, #8]
 800a7f4:	607a      	str	r2, [r7, #4]
 800a7f6:	603b      	str	r3, [r7, #0]
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
 800a7fe:	4a0a      	ldr	r2, [pc, #40]	; (800a828 <disk_write+0x3c>)
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	4413      	add	r3, r2
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	68dc      	ldr	r4, [r3, #12]
 800a808:	7bfb      	ldrb	r3, [r7, #15]
 800a80a:	4a07      	ldr	r2, [pc, #28]	; (800a828 <disk_write+0x3c>)
 800a80c:	4413      	add	r3, r2
 800a80e:	7a18      	ldrb	r0, [r3, #8]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	68b9      	ldr	r1, [r7, #8]
 800a816:	47a0      	blx	r4
 800a818:	4603      	mov	r3, r0
 800a81a:	75fb      	strb	r3, [r7, #23]
  return res;
 800a81c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	371c      	adds	r7, #28
 800a822:	46bd      	mov	sp, r7
 800a824:	bd90      	pop	{r4, r7, pc}
 800a826:	bf00      	nop
 800a828:	20000940 	.word	0x20000940

0800a82c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	4603      	mov	r3, r0
 800a834:	603a      	str	r2, [r7, #0]
 800a836:	71fb      	strb	r3, [r7, #7]
 800a838:	460b      	mov	r3, r1
 800a83a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a83c:	79fb      	ldrb	r3, [r7, #7]
 800a83e:	4a09      	ldr	r2, [pc, #36]	; (800a864 <disk_ioctl+0x38>)
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	4413      	add	r3, r2
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	79fa      	ldrb	r2, [r7, #7]
 800a84a:	4906      	ldr	r1, [pc, #24]	; (800a864 <disk_ioctl+0x38>)
 800a84c:	440a      	add	r2, r1
 800a84e:	7a10      	ldrb	r0, [r2, #8]
 800a850:	79b9      	ldrb	r1, [r7, #6]
 800a852:	683a      	ldr	r2, [r7, #0]
 800a854:	4798      	blx	r3
 800a856:	4603      	mov	r3, r0
 800a858:	73fb      	strb	r3, [r7, #15]
  return res;
 800a85a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3710      	adds	r7, #16
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	20000940 	.word	0x20000940

0800a868 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	3301      	adds	r3, #1
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a878:	89fb      	ldrh	r3, [r7, #14]
 800a87a:	021b      	lsls	r3, r3, #8
 800a87c:	b21a      	sxth	r2, r3
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	b21b      	sxth	r3, r3
 800a884:	4313      	orrs	r3, r2
 800a886:	b21b      	sxth	r3, r3
 800a888:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a88a:	89fb      	ldrh	r3, [r7, #14]
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3714      	adds	r7, #20
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	3303      	adds	r3, #3
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	021b      	lsls	r3, r3, #8
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	3202      	adds	r2, #2
 800a8b0:	7812      	ldrb	r2, [r2, #0]
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	021b      	lsls	r3, r3, #8
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	3201      	adds	r2, #1
 800a8be:	7812      	ldrb	r2, [r2, #0]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	021b      	lsls	r3, r3, #8
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	7812      	ldrb	r2, [r2, #0]
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	60fb      	str	r3, [r7, #12]
	return rv;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3714      	adds	r7, #20
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr

0800a8de <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a8de:	b480      	push	{r7}
 800a8e0:	b083      	sub	sp, #12
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	1c5a      	adds	r2, r3, #1
 800a8ee:	607a      	str	r2, [r7, #4]
 800a8f0:	887a      	ldrh	r2, [r7, #2]
 800a8f2:	b2d2      	uxtb	r2, r2
 800a8f4:	701a      	strb	r2, [r3, #0]
 800a8f6:	887b      	ldrh	r3, [r7, #2]
 800a8f8:	0a1b      	lsrs	r3, r3, #8
 800a8fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	1c5a      	adds	r2, r3, #1
 800a900:	607a      	str	r2, [r7, #4]
 800a902:	887a      	ldrh	r2, [r7, #2]
 800a904:	b2d2      	uxtb	r2, r2
 800a906:	701a      	strb	r2, [r3, #0]
}
 800a908:	bf00      	nop
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	1c5a      	adds	r2, r3, #1
 800a922:	607a      	str	r2, [r7, #4]
 800a924:	683a      	ldr	r2, [r7, #0]
 800a926:	b2d2      	uxtb	r2, r2
 800a928:	701a      	strb	r2, [r3, #0]
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	0a1b      	lsrs	r3, r3, #8
 800a92e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	1c5a      	adds	r2, r3, #1
 800a934:	607a      	str	r2, [r7, #4]
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	b2d2      	uxtb	r2, r2
 800a93a:	701a      	strb	r2, [r3, #0]
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	0a1b      	lsrs	r3, r3, #8
 800a940:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	1c5a      	adds	r2, r3, #1
 800a946:	607a      	str	r2, [r7, #4]
 800a948:	683a      	ldr	r2, [r7, #0]
 800a94a:	b2d2      	uxtb	r2, r2
 800a94c:	701a      	strb	r2, [r3, #0]
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	0a1b      	lsrs	r3, r3, #8
 800a952:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	1c5a      	adds	r2, r3, #1
 800a958:	607a      	str	r2, [r7, #4]
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	b2d2      	uxtb	r2, r2
 800a95e:	701a      	strb	r2, [r3, #0]
}
 800a960:	bf00      	nop
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a96c:	b480      	push	{r7}
 800a96e:	b087      	sub	sp, #28
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00d      	beq.n	800a9a2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a986:	693a      	ldr	r2, [r7, #16]
 800a988:	1c53      	adds	r3, r2, #1
 800a98a:	613b      	str	r3, [r7, #16]
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	1c59      	adds	r1, r3, #1
 800a990:	6179      	str	r1, [r7, #20]
 800a992:	7812      	ldrb	r2, [r2, #0]
 800a994:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	3b01      	subs	r3, #1
 800a99a:	607b      	str	r3, [r7, #4]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1f1      	bne.n	800a986 <mem_cpy+0x1a>
	}
}
 800a9a2:	bf00      	nop
 800a9a4:	371c      	adds	r7, #28
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr

0800a9ae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a9ae:	b480      	push	{r7}
 800a9b0:	b087      	sub	sp, #28
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	60f8      	str	r0, [r7, #12]
 800a9b6:	60b9      	str	r1, [r7, #8]
 800a9b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	1c5a      	adds	r2, r3, #1
 800a9c2:	617a      	str	r2, [r7, #20]
 800a9c4:	68ba      	ldr	r2, [r7, #8]
 800a9c6:	b2d2      	uxtb	r2, r2
 800a9c8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	607b      	str	r3, [r7, #4]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1f3      	bne.n	800a9be <mem_set+0x10>
}
 800a9d6:	bf00      	nop
 800a9d8:	bf00      	nop
 800a9da:	371c      	adds	r7, #28
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a9e4:	b480      	push	{r7}
 800a9e6:	b089      	sub	sp, #36	; 0x24
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	61fb      	str	r3, [r7, #28]
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	1c5a      	adds	r2, r3, #1
 800aa00:	61fa      	str	r2, [r7, #28]
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	4619      	mov	r1, r3
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	1c5a      	adds	r2, r3, #1
 800aa0a:	61ba      	str	r2, [r7, #24]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	1acb      	subs	r3, r1, r3
 800aa10:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	3b01      	subs	r3, #1
 800aa16:	607b      	str	r3, [r7, #4]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d002      	beq.n	800aa24 <mem_cmp+0x40>
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d0eb      	beq.n	800a9fc <mem_cmp+0x18>

	return r;
 800aa24:	697b      	ldr	r3, [r7, #20]
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3724      	adds	r7, #36	; 0x24
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800aa32:	b480      	push	{r7}
 800aa34:	b083      	sub	sp, #12
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800aa3c:	e002      	b.n	800aa44 <chk_chr+0x12>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	3301      	adds	r3, #1
 800aa42:	607b      	str	r3, [r7, #4]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d005      	beq.n	800aa58 <chk_chr+0x26>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	461a      	mov	r2, r3
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d1f2      	bne.n	800aa3e <chk_chr+0xc>
	return *str;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aa72:	2300      	movs	r3, #0
 800aa74:	60bb      	str	r3, [r7, #8]
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	60fb      	str	r3, [r7, #12]
 800aa7a:	e029      	b.n	800aad0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800aa7c:	4a27      	ldr	r2, [pc, #156]	; (800ab1c <chk_lock+0xb4>)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	011b      	lsls	r3, r3, #4
 800aa82:	4413      	add	r3, r2
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d01d      	beq.n	800aac6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aa8a:	4a24      	ldr	r2, [pc, #144]	; (800ab1c <chk_lock+0xb4>)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	011b      	lsls	r3, r3, #4
 800aa90:	4413      	add	r3, r2
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d116      	bne.n	800aaca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800aa9c:	4a1f      	ldr	r2, [pc, #124]	; (800ab1c <chk_lock+0xb4>)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	011b      	lsls	r3, r3, #4
 800aaa2:	4413      	add	r3, r2
 800aaa4:	3304      	adds	r3, #4
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d10c      	bne.n	800aaca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aab0:	4a1a      	ldr	r2, [pc, #104]	; (800ab1c <chk_lock+0xb4>)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	011b      	lsls	r3, r3, #4
 800aab6:	4413      	add	r3, r2
 800aab8:	3308      	adds	r3, #8
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d102      	bne.n	800aaca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aac4:	e007      	b.n	800aad6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800aac6:	2301      	movs	r3, #1
 800aac8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	3301      	adds	r3, #1
 800aace:	60fb      	str	r3, [r7, #12]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d9d2      	bls.n	800aa7c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2b02      	cmp	r3, #2
 800aada:	d109      	bne.n	800aaf0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d102      	bne.n	800aae8 <chk_lock+0x80>
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d101      	bne.n	800aaec <chk_lock+0x84>
 800aae8:	2300      	movs	r3, #0
 800aaea:	e010      	b.n	800ab0e <chk_lock+0xa6>
 800aaec:	2312      	movs	r3, #18
 800aaee:	e00e      	b.n	800ab0e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d108      	bne.n	800ab08 <chk_lock+0xa0>
 800aaf6:	4a09      	ldr	r2, [pc, #36]	; (800ab1c <chk_lock+0xb4>)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	011b      	lsls	r3, r3, #4
 800aafc:	4413      	add	r3, r2
 800aafe:	330c      	adds	r3, #12
 800ab00:	881b      	ldrh	r3, [r3, #0]
 800ab02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab06:	d101      	bne.n	800ab0c <chk_lock+0xa4>
 800ab08:	2310      	movs	r3, #16
 800ab0a:	e000      	b.n	800ab0e <chk_lock+0xa6>
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3714      	adds	r7, #20
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	20000720 	.word	0x20000720

0800ab20 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ab26:	2300      	movs	r3, #0
 800ab28:	607b      	str	r3, [r7, #4]
 800ab2a:	e002      	b.n	800ab32 <enq_lock+0x12>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	3301      	adds	r3, #1
 800ab30:	607b      	str	r3, [r7, #4]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d806      	bhi.n	800ab46 <enq_lock+0x26>
 800ab38:	4a09      	ldr	r2, [pc, #36]	; (800ab60 <enq_lock+0x40>)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	011b      	lsls	r3, r3, #4
 800ab3e:	4413      	add	r3, r2
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1f2      	bne.n	800ab2c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	bf14      	ite	ne
 800ab4c:	2301      	movne	r3, #1
 800ab4e:	2300      	moveq	r3, #0
 800ab50:	b2db      	uxtb	r3, r3
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	370c      	adds	r7, #12
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	20000720 	.word	0x20000720

0800ab64 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ab6e:	2300      	movs	r3, #0
 800ab70:	60fb      	str	r3, [r7, #12]
 800ab72:	e01f      	b.n	800abb4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ab74:	4a41      	ldr	r2, [pc, #260]	; (800ac7c <inc_lock+0x118>)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	011b      	lsls	r3, r3, #4
 800ab7a:	4413      	add	r3, r2
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d113      	bne.n	800abae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ab86:	4a3d      	ldr	r2, [pc, #244]	; (800ac7c <inc_lock+0x118>)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	011b      	lsls	r3, r3, #4
 800ab8c:	4413      	add	r3, r2
 800ab8e:	3304      	adds	r3, #4
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d109      	bne.n	800abae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ab9a:	4a38      	ldr	r2, [pc, #224]	; (800ac7c <inc_lock+0x118>)
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	011b      	lsls	r3, r3, #4
 800aba0:	4413      	add	r3, r2
 800aba2:	3308      	adds	r3, #8
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800abaa:	429a      	cmp	r2, r3
 800abac:	d006      	beq.n	800abbc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	3301      	adds	r3, #1
 800abb2:	60fb      	str	r3, [r7, #12]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d9dc      	bls.n	800ab74 <inc_lock+0x10>
 800abba:	e000      	b.n	800abbe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800abbc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	d132      	bne.n	800ac2a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800abc4:	2300      	movs	r3, #0
 800abc6:	60fb      	str	r3, [r7, #12]
 800abc8:	e002      	b.n	800abd0 <inc_lock+0x6c>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	3301      	adds	r3, #1
 800abce:	60fb      	str	r3, [r7, #12]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d806      	bhi.n	800abe4 <inc_lock+0x80>
 800abd6:	4a29      	ldr	r2, [pc, #164]	; (800ac7c <inc_lock+0x118>)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	011b      	lsls	r3, r3, #4
 800abdc:	4413      	add	r3, r2
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d1f2      	bne.n	800abca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2b02      	cmp	r3, #2
 800abe8:	d101      	bne.n	800abee <inc_lock+0x8a>
 800abea:	2300      	movs	r3, #0
 800abec:	e040      	b.n	800ac70 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	4922      	ldr	r1, [pc, #136]	; (800ac7c <inc_lock+0x118>)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	011b      	lsls	r3, r3, #4
 800abf8:	440b      	add	r3, r1
 800abfa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	689a      	ldr	r2, [r3, #8]
 800ac00:	491e      	ldr	r1, [pc, #120]	; (800ac7c <inc_lock+0x118>)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	011b      	lsls	r3, r3, #4
 800ac06:	440b      	add	r3, r1
 800ac08:	3304      	adds	r3, #4
 800ac0a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	695a      	ldr	r2, [r3, #20]
 800ac10:	491a      	ldr	r1, [pc, #104]	; (800ac7c <inc_lock+0x118>)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	011b      	lsls	r3, r3, #4
 800ac16:	440b      	add	r3, r1
 800ac18:	3308      	adds	r3, #8
 800ac1a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ac1c:	4a17      	ldr	r2, [pc, #92]	; (800ac7c <inc_lock+0x118>)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	011b      	lsls	r3, r3, #4
 800ac22:	4413      	add	r3, r2
 800ac24:	330c      	adds	r3, #12
 800ac26:	2200      	movs	r2, #0
 800ac28:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d009      	beq.n	800ac44 <inc_lock+0xe0>
 800ac30:	4a12      	ldr	r2, [pc, #72]	; (800ac7c <inc_lock+0x118>)
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	011b      	lsls	r3, r3, #4
 800ac36:	4413      	add	r3, r2
 800ac38:	330c      	adds	r3, #12
 800ac3a:	881b      	ldrh	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d001      	beq.n	800ac44 <inc_lock+0xe0>
 800ac40:	2300      	movs	r3, #0
 800ac42:	e015      	b.n	800ac70 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d108      	bne.n	800ac5c <inc_lock+0xf8>
 800ac4a:	4a0c      	ldr	r2, [pc, #48]	; (800ac7c <inc_lock+0x118>)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	011b      	lsls	r3, r3, #4
 800ac50:	4413      	add	r3, r2
 800ac52:	330c      	adds	r3, #12
 800ac54:	881b      	ldrh	r3, [r3, #0]
 800ac56:	3301      	adds	r3, #1
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	e001      	b.n	800ac60 <inc_lock+0xfc>
 800ac5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac60:	4906      	ldr	r1, [pc, #24]	; (800ac7c <inc_lock+0x118>)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	011b      	lsls	r3, r3, #4
 800ac66:	440b      	add	r3, r1
 800ac68:	330c      	adds	r3, #12
 800ac6a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	3301      	adds	r3, #1
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3714      	adds	r7, #20
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr
 800ac7c:	20000720 	.word	0x20000720

0800ac80 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	3b01      	subs	r3, #1
 800ac8c:	607b      	str	r3, [r7, #4]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d825      	bhi.n	800ace0 <dec_lock+0x60>
		n = Files[i].ctr;
 800ac94:	4a17      	ldr	r2, [pc, #92]	; (800acf4 <dec_lock+0x74>)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	011b      	lsls	r3, r3, #4
 800ac9a:	4413      	add	r3, r2
 800ac9c:	330c      	adds	r3, #12
 800ac9e:	881b      	ldrh	r3, [r3, #0]
 800aca0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800aca2:	89fb      	ldrh	r3, [r7, #14]
 800aca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aca8:	d101      	bne.n	800acae <dec_lock+0x2e>
 800acaa:	2300      	movs	r3, #0
 800acac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800acae:	89fb      	ldrh	r3, [r7, #14]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d002      	beq.n	800acba <dec_lock+0x3a>
 800acb4:	89fb      	ldrh	r3, [r7, #14]
 800acb6:	3b01      	subs	r3, #1
 800acb8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800acba:	4a0e      	ldr	r2, [pc, #56]	; (800acf4 <dec_lock+0x74>)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	011b      	lsls	r3, r3, #4
 800acc0:	4413      	add	r3, r2
 800acc2:	330c      	adds	r3, #12
 800acc4:	89fa      	ldrh	r2, [r7, #14]
 800acc6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800acc8:	89fb      	ldrh	r3, [r7, #14]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d105      	bne.n	800acda <dec_lock+0x5a>
 800acce:	4a09      	ldr	r2, [pc, #36]	; (800acf4 <dec_lock+0x74>)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	011b      	lsls	r3, r3, #4
 800acd4:	4413      	add	r3, r2
 800acd6:	2200      	movs	r2, #0
 800acd8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800acda:	2300      	movs	r3, #0
 800acdc:	737b      	strb	r3, [r7, #13]
 800acde:	e001      	b.n	800ace4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ace0:	2302      	movs	r3, #2
 800ace2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ace4:	7b7b      	ldrb	r3, [r7, #13]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	20000720 	.word	0x20000720

0800acf8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ad00:	2300      	movs	r3, #0
 800ad02:	60fb      	str	r3, [r7, #12]
 800ad04:	e010      	b.n	800ad28 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ad06:	4a0d      	ldr	r2, [pc, #52]	; (800ad3c <clear_lock+0x44>)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	011b      	lsls	r3, r3, #4
 800ad0c:	4413      	add	r3, r2
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d105      	bne.n	800ad22 <clear_lock+0x2a>
 800ad16:	4a09      	ldr	r2, [pc, #36]	; (800ad3c <clear_lock+0x44>)
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	011b      	lsls	r3, r3, #4
 800ad1c:	4413      	add	r3, r2
 800ad1e:	2200      	movs	r2, #0
 800ad20:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	3301      	adds	r3, #1
 800ad26:	60fb      	str	r3, [r7, #12]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d9eb      	bls.n	800ad06 <clear_lock+0xe>
	}
}
 800ad2e:	bf00      	nop
 800ad30:	bf00      	nop
 800ad32:	3714      	adds	r7, #20
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr
 800ad3c:	20000720 	.word	0x20000720

0800ad40 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	78db      	ldrb	r3, [r3, #3]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d034      	beq.n	800adbe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad58:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	7858      	ldrb	r0, [r3, #1]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ad64:	2301      	movs	r3, #1
 800ad66:	697a      	ldr	r2, [r7, #20]
 800ad68:	f7ff fd40 	bl	800a7ec <disk_write>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d002      	beq.n	800ad78 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ad72:	2301      	movs	r3, #1
 800ad74:	73fb      	strb	r3, [r7, #15]
 800ad76:	e022      	b.n	800adbe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	1ad2      	subs	r2, r2, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	69db      	ldr	r3, [r3, #28]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d217      	bcs.n	800adbe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	789b      	ldrb	r3, [r3, #2]
 800ad92:	613b      	str	r3, [r7, #16]
 800ad94:	e010      	b.n	800adb8 <sync_window+0x78>
					wsect += fs->fsize;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	69db      	ldr	r3, [r3, #28]
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	7858      	ldrb	r0, [r3, #1]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800adaa:	2301      	movs	r3, #1
 800adac:	697a      	ldr	r2, [r7, #20]
 800adae:	f7ff fd1d 	bl	800a7ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	3b01      	subs	r3, #1
 800adb6:	613b      	str	r3, [r7, #16]
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	2b01      	cmp	r3, #1
 800adbc:	d8eb      	bhi.n	800ad96 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800adbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3718      	adds	r7, #24
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800add2:	2300      	movs	r3, #0
 800add4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adda:	683a      	ldr	r2, [r7, #0]
 800addc:	429a      	cmp	r2, r3
 800adde:	d01b      	beq.n	800ae18 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f7ff ffad 	bl	800ad40 <sync_window>
 800ade6:	4603      	mov	r3, r0
 800ade8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800adea:	7bfb      	ldrb	r3, [r7, #15]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d113      	bne.n	800ae18 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	7858      	ldrb	r0, [r3, #1]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800adfa:	2301      	movs	r3, #1
 800adfc:	683a      	ldr	r2, [r7, #0]
 800adfe:	f7ff fcd5 	bl	800a7ac <disk_read>
 800ae02:	4603      	mov	r3, r0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d004      	beq.n	800ae12 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ae08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae0c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	683a      	ldr	r2, [r7, #0]
 800ae16:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800ae18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
	...

0800ae24 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7ff ff87 	bl	800ad40 <sync_window>
 800ae32:	4603      	mov	r3, r0
 800ae34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ae36:	7bfb      	ldrb	r3, [r7, #15]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d158      	bne.n	800aeee <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	2b03      	cmp	r3, #3
 800ae42:	d148      	bne.n	800aed6 <sync_fs+0xb2>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	791b      	ldrb	r3, [r3, #4]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d144      	bne.n	800aed6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	3334      	adds	r3, #52	; 0x34
 800ae50:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae54:	2100      	movs	r1, #0
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7ff fda9 	bl	800a9ae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	3334      	adds	r3, #52	; 0x34
 800ae60:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ae64:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7ff fd38 	bl	800a8de <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	3334      	adds	r3, #52	; 0x34
 800ae72:	4921      	ldr	r1, [pc, #132]	; (800aef8 <sync_fs+0xd4>)
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7ff fd4d 	bl	800a914 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	3334      	adds	r3, #52	; 0x34
 800ae7e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ae82:	491e      	ldr	r1, [pc, #120]	; (800aefc <sync_fs+0xd8>)
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7ff fd45 	bl	800a914 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	3334      	adds	r3, #52	; 0x34
 800ae8e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	695b      	ldr	r3, [r3, #20]
 800ae96:	4619      	mov	r1, r3
 800ae98:	4610      	mov	r0, r2
 800ae9a:	f7ff fd3b 	bl	800a914 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	3334      	adds	r3, #52	; 0x34
 800aea2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	691b      	ldr	r3, [r3, #16]
 800aeaa:	4619      	mov	r1, r3
 800aeac:	4610      	mov	r0, r2
 800aeae:	f7ff fd31 	bl	800a914 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a1b      	ldr	r3, [r3, #32]
 800aeb6:	1c5a      	adds	r2, r3, #1
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	7858      	ldrb	r0, [r3, #1]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aeca:	2301      	movs	r3, #1
 800aecc:	f7ff fc8e 	bl	800a7ec <disk_write>
			fs->fsi_flag = 0;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	785b      	ldrb	r3, [r3, #1]
 800aeda:	2200      	movs	r2, #0
 800aedc:	2100      	movs	r1, #0
 800aede:	4618      	mov	r0, r3
 800aee0:	f7ff fca4 	bl	800a82c <disk_ioctl>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d001      	beq.n	800aeee <sync_fs+0xca>
 800aeea:	2301      	movs	r3, #1
 800aeec:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800aeee:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	41615252 	.word	0x41615252
 800aefc:	61417272 	.word	0x61417272

0800af00 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	3b02      	subs	r3, #2
 800af0e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	699b      	ldr	r3, [r3, #24]
 800af14:	3b02      	subs	r3, #2
 800af16:	683a      	ldr	r2, [r7, #0]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d301      	bcc.n	800af20 <clust2sect+0x20>
 800af1c:	2300      	movs	r3, #0
 800af1e:	e008      	b.n	800af32 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	895b      	ldrh	r3, [r3, #10]
 800af24:	461a      	mov	r2, r3
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	fb03 f202 	mul.w	r2, r3, r2
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af30:	4413      	add	r3, r2
}
 800af32:	4618      	mov	r0, r3
 800af34:	370c      	adds	r7, #12
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr

0800af3e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800af3e:	b580      	push	{r7, lr}
 800af40:	b086      	sub	sp, #24
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
 800af46:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d904      	bls.n	800af5e <get_fat+0x20>
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	699b      	ldr	r3, [r3, #24]
 800af58:	683a      	ldr	r2, [r7, #0]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d302      	bcc.n	800af64 <get_fat+0x26>
		val = 1;	/* Internal error */
 800af5e:	2301      	movs	r3, #1
 800af60:	617b      	str	r3, [r7, #20]
 800af62:	e08f      	b.n	800b084 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800af64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af68:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	2b03      	cmp	r3, #3
 800af70:	d062      	beq.n	800b038 <get_fat+0xfa>
 800af72:	2b03      	cmp	r3, #3
 800af74:	dc7c      	bgt.n	800b070 <get_fat+0x132>
 800af76:	2b01      	cmp	r3, #1
 800af78:	d002      	beq.n	800af80 <get_fat+0x42>
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	d042      	beq.n	800b004 <get_fat+0xc6>
 800af7e:	e077      	b.n	800b070 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	60fb      	str	r3, [r7, #12]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	085b      	lsrs	r3, r3, #1
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	4413      	add	r3, r2
 800af8c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	0a5b      	lsrs	r3, r3, #9
 800af96:	4413      	add	r3, r2
 800af98:	4619      	mov	r1, r3
 800af9a:	6938      	ldr	r0, [r7, #16]
 800af9c:	f7ff ff14 	bl	800adc8 <move_window>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d167      	bne.n	800b076 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	1c5a      	adds	r2, r3, #1
 800afaa:	60fa      	str	r2, [r7, #12]
 800afac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afb0:	693a      	ldr	r2, [r7, #16]
 800afb2:	4413      	add	r3, r2
 800afb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800afb8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	0a5b      	lsrs	r3, r3, #9
 800afc2:	4413      	add	r3, r2
 800afc4:	4619      	mov	r1, r3
 800afc6:	6938      	ldr	r0, [r7, #16]
 800afc8:	f7ff fefe 	bl	800adc8 <move_window>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d153      	bne.n	800b07a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afd8:	693a      	ldr	r2, [r7, #16]
 800afda:	4413      	add	r3, r2
 800afdc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800afe0:	021b      	lsls	r3, r3, #8
 800afe2:	461a      	mov	r2, r3
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	f003 0301 	and.w	r3, r3, #1
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d002      	beq.n	800affa <get_fat+0xbc>
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	091b      	lsrs	r3, r3, #4
 800aff8:	e002      	b.n	800b000 <get_fat+0xc2>
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b000:	617b      	str	r3, [r7, #20]
			break;
 800b002:	e03f      	b.n	800b084 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	0a1b      	lsrs	r3, r3, #8
 800b00c:	4413      	add	r3, r2
 800b00e:	4619      	mov	r1, r3
 800b010:	6938      	ldr	r0, [r7, #16]
 800b012:	f7ff fed9 	bl	800adc8 <move_window>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d130      	bne.n	800b07e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	005b      	lsls	r3, r3, #1
 800b026:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b02a:	4413      	add	r3, r2
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7ff fc1b 	bl	800a868 <ld_word>
 800b032:	4603      	mov	r3, r0
 800b034:	617b      	str	r3, [r7, #20]
			break;
 800b036:	e025      	b.n	800b084 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	09db      	lsrs	r3, r3, #7
 800b040:	4413      	add	r3, r2
 800b042:	4619      	mov	r1, r3
 800b044:	6938      	ldr	r0, [r7, #16]
 800b046:	f7ff febf 	bl	800adc8 <move_window>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d118      	bne.n	800b082 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b05e:	4413      	add	r3, r2
 800b060:	4618      	mov	r0, r3
 800b062:	f7ff fc19 	bl	800a898 <ld_dword>
 800b066:	4603      	mov	r3, r0
 800b068:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b06c:	617b      	str	r3, [r7, #20]
			break;
 800b06e:	e009      	b.n	800b084 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b070:	2301      	movs	r3, #1
 800b072:	617b      	str	r3, [r7, #20]
 800b074:	e006      	b.n	800b084 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b076:	bf00      	nop
 800b078:	e004      	b.n	800b084 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b07a:	bf00      	nop
 800b07c:	e002      	b.n	800b084 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b07e:	bf00      	nop
 800b080:	e000      	b.n	800b084 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b082:	bf00      	nop
		}
	}

	return val;
 800b084:	697b      	ldr	r3, [r7, #20]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3718      	adds	r7, #24
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b08e:	b590      	push	{r4, r7, lr}
 800b090:	b089      	sub	sp, #36	; 0x24
 800b092:	af00      	add	r7, sp, #0
 800b094:	60f8      	str	r0, [r7, #12]
 800b096:	60b9      	str	r1, [r7, #8]
 800b098:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b09a:	2302      	movs	r3, #2
 800b09c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	f240 80d9 	bls.w	800b258 <put_fat+0x1ca>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	699b      	ldr	r3, [r3, #24]
 800b0aa:	68ba      	ldr	r2, [r7, #8]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	f080 80d3 	bcs.w	800b258 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	2b03      	cmp	r3, #3
 800b0b8:	f000 8096 	beq.w	800b1e8 <put_fat+0x15a>
 800b0bc:	2b03      	cmp	r3, #3
 800b0be:	f300 80cb 	bgt.w	800b258 <put_fat+0x1ca>
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d002      	beq.n	800b0cc <put_fat+0x3e>
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d06e      	beq.n	800b1a8 <put_fat+0x11a>
 800b0ca:	e0c5      	b.n	800b258 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	61bb      	str	r3, [r7, #24]
 800b0d0:	69bb      	ldr	r3, [r7, #24]
 800b0d2:	085b      	lsrs	r3, r3, #1
 800b0d4:	69ba      	ldr	r2, [r7, #24]
 800b0d6:	4413      	add	r3, r2
 800b0d8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0de:	69bb      	ldr	r3, [r7, #24]
 800b0e0:	0a5b      	lsrs	r3, r3, #9
 800b0e2:	4413      	add	r3, r2
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	68f8      	ldr	r0, [r7, #12]
 800b0e8:	f7ff fe6e 	bl	800adc8 <move_window>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b0f0:	7ffb      	ldrb	r3, [r7, #31]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f040 80a9 	bne.w	800b24a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b0fe:	69bb      	ldr	r3, [r7, #24]
 800b100:	1c59      	adds	r1, r3, #1
 800b102:	61b9      	str	r1, [r7, #24]
 800b104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b108:	4413      	add	r3, r2
 800b10a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	f003 0301 	and.w	r3, r3, #1
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00d      	beq.n	800b132 <put_fat+0xa4>
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	b25b      	sxtb	r3, r3
 800b11c:	f003 030f 	and.w	r3, r3, #15
 800b120:	b25a      	sxtb	r2, r3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	b2db      	uxtb	r3, r3
 800b126:	011b      	lsls	r3, r3, #4
 800b128:	b25b      	sxtb	r3, r3
 800b12a:	4313      	orrs	r3, r2
 800b12c:	b25b      	sxtb	r3, r3
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	e001      	b.n	800b136 <put_fat+0xa8>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	b2db      	uxtb	r3, r3
 800b136:	697a      	ldr	r2, [r7, #20]
 800b138:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2201      	movs	r2, #1
 800b13e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	0a5b      	lsrs	r3, r3, #9
 800b148:	4413      	add	r3, r2
 800b14a:	4619      	mov	r1, r3
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f7ff fe3b 	bl	800adc8 <move_window>
 800b152:	4603      	mov	r3, r0
 800b154:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b156:	7ffb      	ldrb	r3, [r7, #31]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d178      	bne.n	800b24e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b168:	4413      	add	r3, r2
 800b16a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	f003 0301 	and.w	r3, r3, #1
 800b172:	2b00      	cmp	r3, #0
 800b174:	d003      	beq.n	800b17e <put_fat+0xf0>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	091b      	lsrs	r3, r3, #4
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	e00e      	b.n	800b19c <put_fat+0x10e>
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	b25b      	sxtb	r3, r3
 800b184:	f023 030f 	bic.w	r3, r3, #15
 800b188:	b25a      	sxtb	r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	0a1b      	lsrs	r3, r3, #8
 800b18e:	b25b      	sxtb	r3, r3
 800b190:	f003 030f 	and.w	r3, r3, #15
 800b194:	b25b      	sxtb	r3, r3
 800b196:	4313      	orrs	r3, r2
 800b198:	b25b      	sxtb	r3, r3
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	697a      	ldr	r2, [r7, #20]
 800b19e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	70da      	strb	r2, [r3, #3]
			break;
 800b1a6:	e057      	b.n	800b258 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	0a1b      	lsrs	r3, r3, #8
 800b1b0:	4413      	add	r3, r2
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	68f8      	ldr	r0, [r7, #12]
 800b1b6:	f7ff fe07 	bl	800adc8 <move_window>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b1be:	7ffb      	ldrb	r3, [r7, #31]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d146      	bne.n	800b252 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	005b      	lsls	r3, r3, #1
 800b1ce:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b1d2:	4413      	add	r3, r2
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	b292      	uxth	r2, r2
 800b1d8:	4611      	mov	r1, r2
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7ff fb7f 	bl	800a8de <st_word>
			fs->wflag = 1;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	70da      	strb	r2, [r3, #3]
			break;
 800b1e6:	e037      	b.n	800b258 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	09db      	lsrs	r3, r3, #7
 800b1f0:	4413      	add	r3, r2
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f7ff fde7 	bl	800adc8 <move_window>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b1fe:	7ffb      	ldrb	r3, [r7, #31]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d128      	bne.n	800b256 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b218:	4413      	add	r3, r2
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7ff fb3c 	bl	800a898 <ld_dword>
 800b220:	4603      	mov	r3, r0
 800b222:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b226:	4323      	orrs	r3, r4
 800b228:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b238:	4413      	add	r3, r2
 800b23a:	6879      	ldr	r1, [r7, #4]
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7ff fb69 	bl	800a914 <st_dword>
			fs->wflag = 1;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2201      	movs	r2, #1
 800b246:	70da      	strb	r2, [r3, #3]
			break;
 800b248:	e006      	b.n	800b258 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b24a:	bf00      	nop
 800b24c:	e004      	b.n	800b258 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b24e:	bf00      	nop
 800b250:	e002      	b.n	800b258 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b252:	bf00      	nop
 800b254:	e000      	b.n	800b258 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b256:	bf00      	nop
		}
	}
	return res;
 800b258:	7ffb      	ldrb	r3, [r7, #31]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3724      	adds	r7, #36	; 0x24
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd90      	pop	{r4, r7, pc}

0800b262 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b088      	sub	sp, #32
 800b266:	af00      	add	r7, sp, #0
 800b268:	60f8      	str	r0, [r7, #12]
 800b26a:	60b9      	str	r1, [r7, #8]
 800b26c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b26e:	2300      	movs	r3, #0
 800b270:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d904      	bls.n	800b288 <remove_chain+0x26>
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	699b      	ldr	r3, [r3, #24]
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	429a      	cmp	r2, r3
 800b286:	d301      	bcc.n	800b28c <remove_chain+0x2a>
 800b288:	2302      	movs	r3, #2
 800b28a:	e04b      	b.n	800b324 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d00c      	beq.n	800b2ac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b296:	6879      	ldr	r1, [r7, #4]
 800b298:	69b8      	ldr	r0, [r7, #24]
 800b29a:	f7ff fef8 	bl	800b08e <put_fat>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b2a2:	7ffb      	ldrb	r3, [r7, #31]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d001      	beq.n	800b2ac <remove_chain+0x4a>
 800b2a8:	7ffb      	ldrb	r3, [r7, #31]
 800b2aa:	e03b      	b.n	800b324 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b2ac:	68b9      	ldr	r1, [r7, #8]
 800b2ae:	68f8      	ldr	r0, [r7, #12]
 800b2b0:	f7ff fe45 	bl	800af3e <get_fat>
 800b2b4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d031      	beq.n	800b320 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d101      	bne.n	800b2c6 <remove_chain+0x64>
 800b2c2:	2302      	movs	r3, #2
 800b2c4:	e02e      	b.n	800b324 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2cc:	d101      	bne.n	800b2d2 <remove_chain+0x70>
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	e028      	b.n	800b324 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	68b9      	ldr	r1, [r7, #8]
 800b2d6:	69b8      	ldr	r0, [r7, #24]
 800b2d8:	f7ff fed9 	bl	800b08e <put_fat>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b2e0:	7ffb      	ldrb	r3, [r7, #31]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d001      	beq.n	800b2ea <remove_chain+0x88>
 800b2e6:	7ffb      	ldrb	r3, [r7, #31]
 800b2e8:	e01c      	b.n	800b324 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b2ea:	69bb      	ldr	r3, [r7, #24]
 800b2ec:	695a      	ldr	r2, [r3, #20]
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	699b      	ldr	r3, [r3, #24]
 800b2f2:	3b02      	subs	r3, #2
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d20b      	bcs.n	800b310 <remove_chain+0xae>
			fs->free_clst++;
 800b2f8:	69bb      	ldr	r3, [r7, #24]
 800b2fa:	695b      	ldr	r3, [r3, #20]
 800b2fc:	1c5a      	adds	r2, r3, #1
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	791b      	ldrb	r3, [r3, #4]
 800b306:	f043 0301 	orr.w	r3, r3, #1
 800b30a:	b2da      	uxtb	r2, r3
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	699b      	ldr	r3, [r3, #24]
 800b318:	68ba      	ldr	r2, [r7, #8]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d3c6      	bcc.n	800b2ac <remove_chain+0x4a>
 800b31e:	e000      	b.n	800b322 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b320:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b322:	2300      	movs	r3, #0
}
 800b324:	4618      	mov	r0, r3
 800b326:	3720      	adds	r7, #32
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b088      	sub	sp, #32
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10d      	bne.n	800b35e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	691b      	ldr	r3, [r3, #16]
 800b346:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d004      	beq.n	800b358 <create_chain+0x2c>
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	699b      	ldr	r3, [r3, #24]
 800b352:	69ba      	ldr	r2, [r7, #24]
 800b354:	429a      	cmp	r2, r3
 800b356:	d31b      	bcc.n	800b390 <create_chain+0x64>
 800b358:	2301      	movs	r3, #1
 800b35a:	61bb      	str	r3, [r7, #24]
 800b35c:	e018      	b.n	800b390 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f7ff fdec 	bl	800af3e <get_fat>
 800b366:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d801      	bhi.n	800b372 <create_chain+0x46>
 800b36e:	2301      	movs	r3, #1
 800b370:	e070      	b.n	800b454 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b378:	d101      	bne.n	800b37e <create_chain+0x52>
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	e06a      	b.n	800b454 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	699b      	ldr	r3, [r3, #24]
 800b382:	68fa      	ldr	r2, [r7, #12]
 800b384:	429a      	cmp	r2, r3
 800b386:	d201      	bcs.n	800b38c <create_chain+0x60>
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	e063      	b.n	800b454 <create_chain+0x128>
		scl = clst;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	3301      	adds	r3, #1
 800b398:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	699b      	ldr	r3, [r3, #24]
 800b39e:	69fa      	ldr	r2, [r7, #28]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d307      	bcc.n	800b3b4 <create_chain+0x88>
				ncl = 2;
 800b3a4:	2302      	movs	r3, #2
 800b3a6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b3a8:	69fa      	ldr	r2, [r7, #28]
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d901      	bls.n	800b3b4 <create_chain+0x88>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	e04f      	b.n	800b454 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b3b4:	69f9      	ldr	r1, [r7, #28]
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f7ff fdc1 	bl	800af3e <get_fat>
 800b3bc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00e      	beq.n	800b3e2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d003      	beq.n	800b3d2 <create_chain+0xa6>
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3d0:	d101      	bne.n	800b3d6 <create_chain+0xaa>
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	e03e      	b.n	800b454 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b3d6:	69fa      	ldr	r2, [r7, #28]
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d1da      	bne.n	800b394 <create_chain+0x68>
 800b3de:	2300      	movs	r3, #0
 800b3e0:	e038      	b.n	800b454 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b3e2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b3e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b3e8:	69f9      	ldr	r1, [r7, #28]
 800b3ea:	6938      	ldr	r0, [r7, #16]
 800b3ec:	f7ff fe4f 	bl	800b08e <put_fat>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b3f4:	7dfb      	ldrb	r3, [r7, #23]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d109      	bne.n	800b40e <create_chain+0xe2>
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d006      	beq.n	800b40e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b400:	69fa      	ldr	r2, [r7, #28]
 800b402:	6839      	ldr	r1, [r7, #0]
 800b404:	6938      	ldr	r0, [r7, #16]
 800b406:	f7ff fe42 	bl	800b08e <put_fat>
 800b40a:	4603      	mov	r3, r0
 800b40c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b40e:	7dfb      	ldrb	r3, [r7, #23]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d116      	bne.n	800b442 <create_chain+0x116>
		fs->last_clst = ncl;
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	69fa      	ldr	r2, [r7, #28]
 800b418:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	695a      	ldr	r2, [r3, #20]
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	699b      	ldr	r3, [r3, #24]
 800b422:	3b02      	subs	r3, #2
 800b424:	429a      	cmp	r2, r3
 800b426:	d804      	bhi.n	800b432 <create_chain+0x106>
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	695b      	ldr	r3, [r3, #20]
 800b42c:	1e5a      	subs	r2, r3, #1
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	791b      	ldrb	r3, [r3, #4]
 800b436:	f043 0301 	orr.w	r3, r3, #1
 800b43a:	b2da      	uxtb	r2, r3
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	711a      	strb	r2, [r3, #4]
 800b440:	e007      	b.n	800b452 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b442:	7dfb      	ldrb	r3, [r7, #23]
 800b444:	2b01      	cmp	r3, #1
 800b446:	d102      	bne.n	800b44e <create_chain+0x122>
 800b448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b44c:	e000      	b.n	800b450 <create_chain+0x124>
 800b44e:	2301      	movs	r3, #1
 800b450:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b452:	69fb      	ldr	r3, [r7, #28]
}
 800b454:	4618      	mov	r0, r3
 800b456:	3720      	adds	r7, #32
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b086      	sub	sp, #24
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b472:	d204      	bcs.n	800b47e <dir_sdi+0x22>
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	f003 031f 	and.w	r3, r3, #31
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d001      	beq.n	800b482 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b47e:	2302      	movs	r3, #2
 800b480:	e063      	b.n	800b54a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	683a      	ldr	r2, [r7, #0]
 800b486:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d106      	bne.n	800b4a2 <dir_sdi+0x46>
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	2b02      	cmp	r3, #2
 800b49a:	d902      	bls.n	800b4a2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4a0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d10c      	bne.n	800b4c2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	095b      	lsrs	r3, r3, #5
 800b4ac:	693a      	ldr	r2, [r7, #16]
 800b4ae:	8912      	ldrh	r2, [r2, #8]
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d301      	bcc.n	800b4b8 <dir_sdi+0x5c>
 800b4b4:	2302      	movs	r3, #2
 800b4b6:	e048      	b.n	800b54a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	61da      	str	r2, [r3, #28]
 800b4c0:	e029      	b.n	800b516 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	895b      	ldrh	r3, [r3, #10]
 800b4c6:	025b      	lsls	r3, r3, #9
 800b4c8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b4ca:	e019      	b.n	800b500 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6979      	ldr	r1, [r7, #20]
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7ff fd34 	bl	800af3e <get_fat>
 800b4d6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4de:	d101      	bne.n	800b4e4 <dir_sdi+0x88>
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	e032      	b.n	800b54a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d904      	bls.n	800b4f4 <dir_sdi+0x98>
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	699b      	ldr	r3, [r3, #24]
 800b4ee:	697a      	ldr	r2, [r7, #20]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d301      	bcc.n	800b4f8 <dir_sdi+0x9c>
 800b4f4:	2302      	movs	r3, #2
 800b4f6:	e028      	b.n	800b54a <dir_sdi+0xee>
			ofs -= csz;
 800b4f8:	683a      	ldr	r2, [r7, #0]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	1ad3      	subs	r3, r2, r3
 800b4fe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b500:	683a      	ldr	r2, [r7, #0]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	429a      	cmp	r2, r3
 800b506:	d2e1      	bcs.n	800b4cc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b508:	6979      	ldr	r1, [r7, #20]
 800b50a:	6938      	ldr	r0, [r7, #16]
 800b50c:	f7ff fcf8 	bl	800af00 <clust2sect>
 800b510:	4602      	mov	r2, r0
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	697a      	ldr	r2, [r7, #20]
 800b51a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	69db      	ldr	r3, [r3, #28]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d101      	bne.n	800b528 <dir_sdi+0xcc>
 800b524:	2302      	movs	r3, #2
 800b526:	e010      	b.n	800b54a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	69da      	ldr	r2, [r3, #28]
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	0a5b      	lsrs	r3, r3, #9
 800b530:	441a      	add	r2, r3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b542:	441a      	add	r2, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b548:	2300      	movs	r3, #0
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3718      	adds	r7, #24
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b552:	b580      	push	{r7, lr}
 800b554:	b086      	sub	sp, #24
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
 800b55a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	695b      	ldr	r3, [r3, #20]
 800b566:	3320      	adds	r3, #32
 800b568:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	69db      	ldr	r3, [r3, #28]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d003      	beq.n	800b57a <dir_next+0x28>
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b578:	d301      	bcc.n	800b57e <dir_next+0x2c>
 800b57a:	2304      	movs	r3, #4
 800b57c:	e0aa      	b.n	800b6d4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b584:	2b00      	cmp	r3, #0
 800b586:	f040 8098 	bne.w	800b6ba <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	69db      	ldr	r3, [r3, #28]
 800b58e:	1c5a      	adds	r2, r3, #1
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	699b      	ldr	r3, [r3, #24]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d10b      	bne.n	800b5b4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	095b      	lsrs	r3, r3, #5
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	8912      	ldrh	r2, [r2, #8]
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	f0c0 8088 	bcc.w	800b6ba <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	61da      	str	r2, [r3, #28]
 800b5b0:	2304      	movs	r3, #4
 800b5b2:	e08f      	b.n	800b6d4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	0a5b      	lsrs	r3, r3, #9
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	8952      	ldrh	r2, [r2, #10]
 800b5bc:	3a01      	subs	r2, #1
 800b5be:	4013      	ands	r3, r2
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d17a      	bne.n	800b6ba <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	699b      	ldr	r3, [r3, #24]
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	4610      	mov	r0, r2
 800b5ce:	f7ff fcb6 	bl	800af3e <get_fat>
 800b5d2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d801      	bhi.n	800b5de <dir_next+0x8c>
 800b5da:	2302      	movs	r3, #2
 800b5dc:	e07a      	b.n	800b6d4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5e4:	d101      	bne.n	800b5ea <dir_next+0x98>
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e074      	b.n	800b6d4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	699b      	ldr	r3, [r3, #24]
 800b5ee:	697a      	ldr	r2, [r7, #20]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d358      	bcc.n	800b6a6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d104      	bne.n	800b604 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	61da      	str	r2, [r3, #28]
 800b600:	2304      	movs	r3, #4
 800b602:	e067      	b.n	800b6d4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	699b      	ldr	r3, [r3, #24]
 800b60a:	4619      	mov	r1, r3
 800b60c:	4610      	mov	r0, r2
 800b60e:	f7ff fe8d 	bl	800b32c <create_chain>
 800b612:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d101      	bne.n	800b61e <dir_next+0xcc>
 800b61a:	2307      	movs	r3, #7
 800b61c:	e05a      	b.n	800b6d4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	2b01      	cmp	r3, #1
 800b622:	d101      	bne.n	800b628 <dir_next+0xd6>
 800b624:	2302      	movs	r3, #2
 800b626:	e055      	b.n	800b6d4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b62e:	d101      	bne.n	800b634 <dir_next+0xe2>
 800b630:	2301      	movs	r3, #1
 800b632:	e04f      	b.n	800b6d4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f7ff fb83 	bl	800ad40 <sync_window>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d001      	beq.n	800b644 <dir_next+0xf2>
 800b640:	2301      	movs	r3, #1
 800b642:	e047      	b.n	800b6d4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	3334      	adds	r3, #52	; 0x34
 800b648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b64c:	2100      	movs	r1, #0
 800b64e:	4618      	mov	r0, r3
 800b650:	f7ff f9ad 	bl	800a9ae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b654:	2300      	movs	r3, #0
 800b656:	613b      	str	r3, [r7, #16]
 800b658:	6979      	ldr	r1, [r7, #20]
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7ff fc50 	bl	800af00 <clust2sect>
 800b660:	4602      	mov	r2, r0
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	631a      	str	r2, [r3, #48]	; 0x30
 800b666:	e012      	b.n	800b68e <dir_next+0x13c>
						fs->wflag = 1;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2201      	movs	r2, #1
 800b66c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b66e:	68f8      	ldr	r0, [r7, #12]
 800b670:	f7ff fb66 	bl	800ad40 <sync_window>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d001      	beq.n	800b67e <dir_next+0x12c>
 800b67a:	2301      	movs	r3, #1
 800b67c:	e02a      	b.n	800b6d4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	3301      	adds	r3, #1
 800b682:	613b      	str	r3, [r7, #16]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b688:	1c5a      	adds	r2, r3, #1
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	631a      	str	r2, [r3, #48]	; 0x30
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	895b      	ldrh	r3, [r3, #10]
 800b692:	461a      	mov	r2, r3
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	4293      	cmp	r3, r2
 800b698:	d3e6      	bcc.n	800b668 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	1ad2      	subs	r2, r2, r3
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	697a      	ldr	r2, [r7, #20]
 800b6aa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b6ac:	6979      	ldr	r1, [r7, #20]
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f7ff fc26 	bl	800af00 <clust2sect>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6cc:	441a      	add	r2, r3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b6d2:	2300      	movs	r3, #0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3718      	adds	r7, #24
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b086      	sub	sp, #24
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f7ff feb4 	bl	800b45c <dir_sdi>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b6f8:	7dfb      	ldrb	r3, [r7, #23]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d12b      	bne.n	800b756 <dir_alloc+0x7a>
		n = 0;
 800b6fe:	2300      	movs	r3, #0
 800b700:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	69db      	ldr	r3, [r3, #28]
 800b706:	4619      	mov	r1, r3
 800b708:	68f8      	ldr	r0, [r7, #12]
 800b70a:	f7ff fb5d 	bl	800adc8 <move_window>
 800b70e:	4603      	mov	r3, r0
 800b710:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b712:	7dfb      	ldrb	r3, [r7, #23]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d11d      	bne.n	800b754 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6a1b      	ldr	r3, [r3, #32]
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	2be5      	cmp	r3, #229	; 0xe5
 800b720:	d004      	beq.n	800b72c <dir_alloc+0x50>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6a1b      	ldr	r3, [r3, #32]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d107      	bne.n	800b73c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	3301      	adds	r3, #1
 800b730:	613b      	str	r3, [r7, #16]
 800b732:	693a      	ldr	r2, [r7, #16]
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	429a      	cmp	r2, r3
 800b738:	d102      	bne.n	800b740 <dir_alloc+0x64>
 800b73a:	e00c      	b.n	800b756 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b73c:	2300      	movs	r3, #0
 800b73e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b740:	2101      	movs	r1, #1
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f7ff ff05 	bl	800b552 <dir_next>
 800b748:	4603      	mov	r3, r0
 800b74a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b74c:	7dfb      	ldrb	r3, [r7, #23]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d0d7      	beq.n	800b702 <dir_alloc+0x26>
 800b752:	e000      	b.n	800b756 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b754:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b756:	7dfb      	ldrb	r3, [r7, #23]
 800b758:	2b04      	cmp	r3, #4
 800b75a:	d101      	bne.n	800b760 <dir_alloc+0x84>
 800b75c:	2307      	movs	r3, #7
 800b75e:	75fb      	strb	r3, [r7, #23]
	return res;
 800b760:	7dfb      	ldrb	r3, [r7, #23]
}
 800b762:	4618      	mov	r0, r3
 800b764:	3718      	adds	r7, #24
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b084      	sub	sp, #16
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
 800b772:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	331a      	adds	r3, #26
 800b778:	4618      	mov	r0, r3
 800b77a:	f7ff f875 	bl	800a868 <ld_word>
 800b77e:	4603      	mov	r3, r0
 800b780:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	2b03      	cmp	r3, #3
 800b788:	d109      	bne.n	800b79e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	3314      	adds	r3, #20
 800b78e:	4618      	mov	r0, r3
 800b790:	f7ff f86a 	bl	800a868 <ld_word>
 800b794:	4603      	mov	r3, r0
 800b796:	041b      	lsls	r3, r3, #16
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	4313      	orrs	r3, r2
 800b79c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b79e:	68fb      	ldr	r3, [r7, #12]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3710      	adds	r7, #16
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	331a      	adds	r3, #26
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	b292      	uxth	r2, r2
 800b7bc:	4611      	mov	r1, r2
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7ff f88d 	bl	800a8de <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	2b03      	cmp	r3, #3
 800b7ca:	d109      	bne.n	800b7e0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	f103 0214 	add.w	r2, r3, #20
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	0c1b      	lsrs	r3, r3, #16
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	4619      	mov	r1, r3
 800b7da:	4610      	mov	r0, r2
 800b7dc:	f7ff f87f 	bl	800a8de <st_word>
	}
}
 800b7e0:	bf00      	nop
 800b7e2:	3710      	adds	r7, #16
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b7e8:	b590      	push	{r4, r7, lr}
 800b7ea:	b087      	sub	sp, #28
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	331a      	adds	r3, #26
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7ff f836 	bl	800a868 <ld_word>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d001      	beq.n	800b806 <cmp_lfn+0x1e>
 800b802:	2300      	movs	r3, #0
 800b804:	e059      	b.n	800b8ba <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b80e:	1e5a      	subs	r2, r3, #1
 800b810:	4613      	mov	r3, r2
 800b812:	005b      	lsls	r3, r3, #1
 800b814:	4413      	add	r3, r2
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	4413      	add	r3, r2
 800b81a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b81c:	2301      	movs	r3, #1
 800b81e:	81fb      	strh	r3, [r7, #14]
 800b820:	2300      	movs	r3, #0
 800b822:	613b      	str	r3, [r7, #16]
 800b824:	e033      	b.n	800b88e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b826:	4a27      	ldr	r2, [pc, #156]	; (800b8c4 <cmp_lfn+0xdc>)
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	4413      	add	r3, r2
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	461a      	mov	r2, r3
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	4413      	add	r3, r2
 800b834:	4618      	mov	r0, r3
 800b836:	f7ff f817 	bl	800a868 <ld_word>
 800b83a:	4603      	mov	r3, r0
 800b83c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b83e:	89fb      	ldrh	r3, [r7, #14]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d01a      	beq.n	800b87a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	2bfe      	cmp	r3, #254	; 0xfe
 800b848:	d812      	bhi.n	800b870 <cmp_lfn+0x88>
 800b84a:	89bb      	ldrh	r3, [r7, #12]
 800b84c:	4618      	mov	r0, r3
 800b84e:	f002 f86f 	bl	800d930 <ff_wtoupper>
 800b852:	4603      	mov	r3, r0
 800b854:	461c      	mov	r4, r3
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	1c5a      	adds	r2, r3, #1
 800b85a:	617a      	str	r2, [r7, #20]
 800b85c:	005b      	lsls	r3, r3, #1
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	4413      	add	r3, r2
 800b862:	881b      	ldrh	r3, [r3, #0]
 800b864:	4618      	mov	r0, r3
 800b866:	f002 f863 	bl	800d930 <ff_wtoupper>
 800b86a:	4603      	mov	r3, r0
 800b86c:	429c      	cmp	r4, r3
 800b86e:	d001      	beq.n	800b874 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b870:	2300      	movs	r3, #0
 800b872:	e022      	b.n	800b8ba <cmp_lfn+0xd2>
			}
			wc = uc;
 800b874:	89bb      	ldrh	r3, [r7, #12]
 800b876:	81fb      	strh	r3, [r7, #14]
 800b878:	e006      	b.n	800b888 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b87a:	89bb      	ldrh	r3, [r7, #12]
 800b87c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b880:	4293      	cmp	r3, r2
 800b882:	d001      	beq.n	800b888 <cmp_lfn+0xa0>
 800b884:	2300      	movs	r3, #0
 800b886:	e018      	b.n	800b8ba <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	3301      	adds	r3, #1
 800b88c:	613b      	str	r3, [r7, #16]
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	2b0c      	cmp	r3, #12
 800b892:	d9c8      	bls.n	800b826 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d00b      	beq.n	800b8b8 <cmp_lfn+0xd0>
 800b8a0:	89fb      	ldrh	r3, [r7, #14]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d008      	beq.n	800b8b8 <cmp_lfn+0xd0>
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	005b      	lsls	r3, r3, #1
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	881b      	ldrh	r3, [r3, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d001      	beq.n	800b8b8 <cmp_lfn+0xd0>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	e000      	b.n	800b8ba <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b8b8:	2301      	movs	r3, #1
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	371c      	adds	r7, #28
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd90      	pop	{r4, r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	0800dbac 	.word	0x0800dbac

0800b8c8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b086      	sub	sp, #24
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	331a      	adds	r3, #26
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7fe ffc6 	bl	800a868 <ld_word>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d001      	beq.n	800b8e6 <pick_lfn+0x1e>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	e04d      	b.n	800b982 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8ee:	1e5a      	subs	r2, r3, #1
 800b8f0:	4613      	mov	r3, r2
 800b8f2:	005b      	lsls	r3, r3, #1
 800b8f4:	4413      	add	r3, r2
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	4413      	add	r3, r2
 800b8fa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	81fb      	strh	r3, [r7, #14]
 800b900:	2300      	movs	r3, #0
 800b902:	613b      	str	r3, [r7, #16]
 800b904:	e028      	b.n	800b958 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b906:	4a21      	ldr	r2, [pc, #132]	; (800b98c <pick_lfn+0xc4>)
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	4413      	add	r3, r2
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	461a      	mov	r2, r3
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	4413      	add	r3, r2
 800b914:	4618      	mov	r0, r3
 800b916:	f7fe ffa7 	bl	800a868 <ld_word>
 800b91a:	4603      	mov	r3, r0
 800b91c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b91e:	89fb      	ldrh	r3, [r7, #14]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00f      	beq.n	800b944 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	2bfe      	cmp	r3, #254	; 0xfe
 800b928:	d901      	bls.n	800b92e <pick_lfn+0x66>
 800b92a:	2300      	movs	r3, #0
 800b92c:	e029      	b.n	800b982 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b92e:	89bb      	ldrh	r3, [r7, #12]
 800b930:	81fb      	strh	r3, [r7, #14]
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	1c5a      	adds	r2, r3, #1
 800b936:	617a      	str	r2, [r7, #20]
 800b938:	005b      	lsls	r3, r3, #1
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	4413      	add	r3, r2
 800b93e:	89fa      	ldrh	r2, [r7, #14]
 800b940:	801a      	strh	r2, [r3, #0]
 800b942:	e006      	b.n	800b952 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b944:	89bb      	ldrh	r3, [r7, #12]
 800b946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d001      	beq.n	800b952 <pick_lfn+0x8a>
 800b94e:	2300      	movs	r3, #0
 800b950:	e017      	b.n	800b982 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	3301      	adds	r3, #1
 800b956:	613b      	str	r3, [r7, #16]
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	2b0c      	cmp	r3, #12
 800b95c:	d9d3      	bls.n	800b906 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b966:	2b00      	cmp	r3, #0
 800b968:	d00a      	beq.n	800b980 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	2bfe      	cmp	r3, #254	; 0xfe
 800b96e:	d901      	bls.n	800b974 <pick_lfn+0xac>
 800b970:	2300      	movs	r3, #0
 800b972:	e006      	b.n	800b982 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	005b      	lsls	r3, r3, #1
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	4413      	add	r3, r2
 800b97c:	2200      	movs	r2, #0
 800b97e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b980:	2301      	movs	r3, #1
}
 800b982:	4618      	mov	r0, r3
 800b984:	3718      	adds	r7, #24
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	0800dbac 	.word	0x0800dbac

0800b990 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b088      	sub	sp, #32
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	4611      	mov	r1, r2
 800b99c:	461a      	mov	r2, r3
 800b99e:	460b      	mov	r3, r1
 800b9a0:	71fb      	strb	r3, [r7, #7]
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	330d      	adds	r3, #13
 800b9aa:	79ba      	ldrb	r2, [r7, #6]
 800b9ac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	330b      	adds	r3, #11
 800b9b2:	220f      	movs	r2, #15
 800b9b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	330c      	adds	r3, #12
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	331a      	adds	r3, #26
 800b9c2:	2100      	movs	r1, #0
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7fe ff8a 	bl	800a8de <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b9ca:	79fb      	ldrb	r3, [r7, #7]
 800b9cc:	1e5a      	subs	r2, r3, #1
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	005b      	lsls	r3, r3, #1
 800b9d2:	4413      	add	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	4413      	add	r3, r2
 800b9d8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	82fb      	strh	r3, [r7, #22]
 800b9de:	2300      	movs	r3, #0
 800b9e0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b9e2:	8afb      	ldrh	r3, [r7, #22]
 800b9e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d007      	beq.n	800b9fc <put_lfn+0x6c>
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	1c5a      	adds	r2, r3, #1
 800b9f0:	61fa      	str	r2, [r7, #28]
 800b9f2:	005b      	lsls	r3, r3, #1
 800b9f4:	68fa      	ldr	r2, [r7, #12]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	881b      	ldrh	r3, [r3, #0]
 800b9fa:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b9fc:	4a17      	ldr	r2, [pc, #92]	; (800ba5c <put_lfn+0xcc>)
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	4413      	add	r3, r2
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	461a      	mov	r2, r3
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	4413      	add	r3, r2
 800ba0a:	8afa      	ldrh	r2, [r7, #22]
 800ba0c:	4611      	mov	r1, r2
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7fe ff65 	bl	800a8de <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ba14:	8afb      	ldrh	r3, [r7, #22]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d102      	bne.n	800ba20 <put_lfn+0x90>
 800ba1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba1e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	3301      	adds	r3, #1
 800ba24:	61bb      	str	r3, [r7, #24]
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	2b0c      	cmp	r3, #12
 800ba2a:	d9da      	bls.n	800b9e2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ba2c:	8afb      	ldrh	r3, [r7, #22]
 800ba2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d006      	beq.n	800ba44 <put_lfn+0xb4>
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	005b      	lsls	r3, r3, #1
 800ba3a:	68fa      	ldr	r2, [r7, #12]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	881b      	ldrh	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d103      	bne.n	800ba4c <put_lfn+0xbc>
 800ba44:	79fb      	ldrb	r3, [r7, #7]
 800ba46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba4a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	79fa      	ldrb	r2, [r7, #7]
 800ba50:	701a      	strb	r2, [r3, #0]
}
 800ba52:	bf00      	nop
 800ba54:	3720      	adds	r7, #32
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	0800dbac 	.word	0x0800dbac

0800ba60 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b08c      	sub	sp, #48	; 0x30
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	607a      	str	r2, [r7, #4]
 800ba6c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ba6e:	220b      	movs	r2, #11
 800ba70:	68b9      	ldr	r1, [r7, #8]
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	f7fe ff7a 	bl	800a96c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	2b05      	cmp	r3, #5
 800ba7c:	d929      	bls.n	800bad2 <gen_numname+0x72>
		sr = seq;
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ba82:	e020      	b.n	800bac6 <gen_numname+0x66>
			wc = *lfn++;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	1c9a      	adds	r2, r3, #2
 800ba88:	607a      	str	r2, [r7, #4]
 800ba8a:	881b      	ldrh	r3, [r3, #0]
 800ba8c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ba8e:	2300      	movs	r3, #0
 800ba90:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba92:	e015      	b.n	800bac0 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	005a      	lsls	r2, r3, #1
 800ba98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba9a:	f003 0301 	and.w	r3, r3, #1
 800ba9e:	4413      	add	r3, r2
 800baa0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800baa2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800baa4:	085b      	lsrs	r3, r3, #1
 800baa6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800baa8:	69fb      	ldr	r3, [r7, #28]
 800baaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d003      	beq.n	800baba <gen_numname+0x5a>
 800bab2:	69fa      	ldr	r2, [r7, #28]
 800bab4:	4b30      	ldr	r3, [pc, #192]	; (800bb78 <gen_numname+0x118>)
 800bab6:	4053      	eors	r3, r2
 800bab8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800baba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800babc:	3301      	adds	r3, #1
 800babe:	62bb      	str	r3, [r7, #40]	; 0x28
 800bac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac2:	2b0f      	cmp	r3, #15
 800bac4:	d9e6      	bls.n	800ba94 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	881b      	ldrh	r3, [r3, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d1da      	bne.n	800ba84 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bad2:	2307      	movs	r3, #7
 800bad4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	f003 030f 	and.w	r3, r3, #15
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	3330      	adds	r3, #48	; 0x30
 800bae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800bae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800baea:	2b39      	cmp	r3, #57	; 0x39
 800baec:	d904      	bls.n	800baf8 <gen_numname+0x98>
 800baee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800baf2:	3307      	adds	r3, #7
 800baf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800baf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafa:	1e5a      	subs	r2, r3, #1
 800bafc:	62ba      	str	r2, [r7, #40]	; 0x28
 800bafe:	3330      	adds	r3, #48	; 0x30
 800bb00:	443b      	add	r3, r7
 800bb02:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bb06:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	091b      	lsrs	r3, r3, #4
 800bb0e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d1df      	bne.n	800bad6 <gen_numname+0x76>
	ns[i] = '~';
 800bb16:	f107 0214 	add.w	r2, r7, #20
 800bb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1c:	4413      	add	r3, r2
 800bb1e:	227e      	movs	r2, #126	; 0x7e
 800bb20:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bb22:	2300      	movs	r3, #0
 800bb24:	627b      	str	r3, [r7, #36]	; 0x24
 800bb26:	e002      	b.n	800bb2e <gen_numname+0xce>
 800bb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	627b      	str	r3, [r7, #36]	; 0x24
 800bb2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d205      	bcs.n	800bb42 <gen_numname+0xe2>
 800bb36:	68fa      	ldr	r2, [r7, #12]
 800bb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3a:	4413      	add	r3, r2
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	2b20      	cmp	r3, #32
 800bb40:	d1f2      	bne.n	800bb28 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb44:	2b07      	cmp	r3, #7
 800bb46:	d807      	bhi.n	800bb58 <gen_numname+0xf8>
 800bb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4a:	1c5a      	adds	r2, r3, #1
 800bb4c:	62ba      	str	r2, [r7, #40]	; 0x28
 800bb4e:	3330      	adds	r3, #48	; 0x30
 800bb50:	443b      	add	r3, r7
 800bb52:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800bb56:	e000      	b.n	800bb5a <gen_numname+0xfa>
 800bb58:	2120      	movs	r1, #32
 800bb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5c:	1c5a      	adds	r2, r3, #1
 800bb5e:	627a      	str	r2, [r7, #36]	; 0x24
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	4413      	add	r3, r2
 800bb64:	460a      	mov	r2, r1
 800bb66:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800bb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6a:	2b07      	cmp	r3, #7
 800bb6c:	d9e9      	bls.n	800bb42 <gen_numname+0xe2>
}
 800bb6e:	bf00      	nop
 800bb70:	bf00      	nop
 800bb72:	3730      	adds	r7, #48	; 0x30
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	00011021 	.word	0x00011021

0800bb7c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b085      	sub	sp, #20
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bb84:	2300      	movs	r3, #0
 800bb86:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bb88:	230b      	movs	r3, #11
 800bb8a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bb8c:	7bfb      	ldrb	r3, [r7, #15]
 800bb8e:	b2da      	uxtb	r2, r3
 800bb90:	0852      	lsrs	r2, r2, #1
 800bb92:	01db      	lsls	r3, r3, #7
 800bb94:	4313      	orrs	r3, r2
 800bb96:	b2da      	uxtb	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	1c59      	adds	r1, r3, #1
 800bb9c:	6079      	str	r1, [r7, #4]
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	4413      	add	r3, r2
 800bba2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	3b01      	subs	r3, #1
 800bba8:	60bb      	str	r3, [r7, #8]
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d1ed      	bne.n	800bb8c <sum_sfn+0x10>
	return sum;
 800bbb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3714      	adds	r7, #20
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr

0800bbbe <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b086      	sub	sp, #24
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
 800bbc6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800bbc8:	2304      	movs	r3, #4
 800bbca:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800bbd2:	23ff      	movs	r3, #255	; 0xff
 800bbd4:	757b      	strb	r3, [r7, #21]
 800bbd6:	23ff      	movs	r3, #255	; 0xff
 800bbd8:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800bbda:	e081      	b.n	800bce0 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	69db      	ldr	r3, [r3, #28]
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	6938      	ldr	r0, [r7, #16]
 800bbe4:	f7ff f8f0 	bl	800adc8 <move_window>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bbec:	7dfb      	ldrb	r3, [r7, #23]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d17c      	bne.n	800bcec <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6a1b      	ldr	r3, [r3, #32]
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800bbfa:	7dbb      	ldrb	r3, [r7, #22]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d102      	bne.n	800bc06 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800bc00:	2304      	movs	r3, #4
 800bc02:	75fb      	strb	r3, [r7, #23]
 800bc04:	e077      	b.n	800bcf6 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a1b      	ldr	r3, [r3, #32]
 800bc0a:	330b      	adds	r3, #11
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc12:	73fb      	strb	r3, [r7, #15]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	7bfa      	ldrb	r2, [r7, #15]
 800bc18:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800bc1a:	7dbb      	ldrb	r3, [r7, #22]
 800bc1c:	2be5      	cmp	r3, #229	; 0xe5
 800bc1e:	d00e      	beq.n	800bc3e <dir_read+0x80>
 800bc20:	7dbb      	ldrb	r3, [r7, #22]
 800bc22:	2b2e      	cmp	r3, #46	; 0x2e
 800bc24:	d00b      	beq.n	800bc3e <dir_read+0x80>
 800bc26:	7bfb      	ldrb	r3, [r7, #15]
 800bc28:	f023 0320 	bic.w	r3, r3, #32
 800bc2c:	2b08      	cmp	r3, #8
 800bc2e:	bf0c      	ite	eq
 800bc30:	2301      	moveq	r3, #1
 800bc32:	2300      	movne	r3, #0
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	461a      	mov	r2, r3
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d002      	beq.n	800bc44 <dir_read+0x86>
				ord = 0xFF;
 800bc3e:	23ff      	movs	r3, #255	; 0xff
 800bc40:	757b      	strb	r3, [r7, #21]
 800bc42:	e044      	b.n	800bcce <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800bc44:	7bfb      	ldrb	r3, [r7, #15]
 800bc46:	2b0f      	cmp	r3, #15
 800bc48:	d12f      	bne.n	800bcaa <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800bc4a:	7dbb      	ldrb	r3, [r7, #22]
 800bc4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d00d      	beq.n	800bc70 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6a1b      	ldr	r3, [r3, #32]
 800bc58:	7b5b      	ldrb	r3, [r3, #13]
 800bc5a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800bc5c:	7dbb      	ldrb	r3, [r7, #22]
 800bc5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc62:	75bb      	strb	r3, [r7, #22]
 800bc64:	7dbb      	ldrb	r3, [r7, #22]
 800bc66:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	695a      	ldr	r2, [r3, #20]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bc70:	7dba      	ldrb	r2, [r7, #22]
 800bc72:	7d7b      	ldrb	r3, [r7, #21]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d115      	bne.n	800bca4 <dir_read+0xe6>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a1b      	ldr	r3, [r3, #32]
 800bc7c:	330d      	adds	r3, #13
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	7d3a      	ldrb	r2, [r7, #20]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d10e      	bne.n	800bca4 <dir_read+0xe6>
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	68da      	ldr	r2, [r3, #12]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6a1b      	ldr	r3, [r3, #32]
 800bc8e:	4619      	mov	r1, r3
 800bc90:	4610      	mov	r0, r2
 800bc92:	f7ff fe19 	bl	800b8c8 <pick_lfn>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d003      	beq.n	800bca4 <dir_read+0xe6>
 800bc9c:	7d7b      	ldrb	r3, [r7, #21]
 800bc9e:	3b01      	subs	r3, #1
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	e000      	b.n	800bca6 <dir_read+0xe8>
 800bca4:	23ff      	movs	r3, #255	; 0xff
 800bca6:	757b      	strb	r3, [r7, #21]
 800bca8:	e011      	b.n	800bcce <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800bcaa:	7d7b      	ldrb	r3, [r7, #21]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d109      	bne.n	800bcc4 <dir_read+0x106>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6a1b      	ldr	r3, [r3, #32]
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7ff ff61 	bl	800bb7c <sum_sfn>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	7d3b      	ldrb	r3, [r7, #20]
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d015      	beq.n	800bcf0 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bcca:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800bccc:	e010      	b.n	800bcf0 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800bcce:	2100      	movs	r1, #0
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f7ff fc3e 	bl	800b552 <dir_next>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bcda:	7dfb      	ldrb	r3, [r7, #23]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d109      	bne.n	800bcf4 <dir_read+0x136>
	while (dp->sect) {
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	69db      	ldr	r3, [r3, #28]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f47f af79 	bne.w	800bbdc <dir_read+0x1e>
 800bcea:	e004      	b.n	800bcf6 <dir_read+0x138>
		if (res != FR_OK) break;
 800bcec:	bf00      	nop
 800bcee:	e002      	b.n	800bcf6 <dir_read+0x138>
					break;
 800bcf0:	bf00      	nop
 800bcf2:	e000      	b.n	800bcf6 <dir_read+0x138>
		if (res != FR_OK) break;
 800bcf4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800bcf6:	7dfb      	ldrb	r3, [r7, #23]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d002      	beq.n	800bd02 <dir_read+0x144>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	61da      	str	r2, [r3, #28]
	return res;
 800bd02:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3718      	adds	r7, #24
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b086      	sub	sp, #24
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f7ff fb9d 	bl	800b45c <dir_sdi>
 800bd22:	4603      	mov	r3, r0
 800bd24:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bd26:	7dfb      	ldrb	r3, [r7, #23]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d001      	beq.n	800bd30 <dir_find+0x24>
 800bd2c:	7dfb      	ldrb	r3, [r7, #23]
 800bd2e:	e0a9      	b.n	800be84 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bd30:	23ff      	movs	r3, #255	; 0xff
 800bd32:	753b      	strb	r3, [r7, #20]
 800bd34:	7d3b      	ldrb	r3, [r7, #20]
 800bd36:	757b      	strb	r3, [r7, #21]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd3e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	69db      	ldr	r3, [r3, #28]
 800bd44:	4619      	mov	r1, r3
 800bd46:	6938      	ldr	r0, [r7, #16]
 800bd48:	f7ff f83e 	bl	800adc8 <move_window>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bd50:	7dfb      	ldrb	r3, [r7, #23]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	f040 8090 	bne.w	800be78 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6a1b      	ldr	r3, [r3, #32]
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bd60:	7dbb      	ldrb	r3, [r7, #22]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d102      	bne.n	800bd6c <dir_find+0x60>
 800bd66:	2304      	movs	r3, #4
 800bd68:	75fb      	strb	r3, [r7, #23]
 800bd6a:	e08a      	b.n	800be82 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6a1b      	ldr	r3, [r3, #32]
 800bd70:	330b      	adds	r3, #11
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd78:	73fb      	strb	r3, [r7, #15]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	7bfa      	ldrb	r2, [r7, #15]
 800bd7e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bd80:	7dbb      	ldrb	r3, [r7, #22]
 800bd82:	2be5      	cmp	r3, #229	; 0xe5
 800bd84:	d007      	beq.n	800bd96 <dir_find+0x8a>
 800bd86:	7bfb      	ldrb	r3, [r7, #15]
 800bd88:	f003 0308 	and.w	r3, r3, #8
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d009      	beq.n	800bda4 <dir_find+0x98>
 800bd90:	7bfb      	ldrb	r3, [r7, #15]
 800bd92:	2b0f      	cmp	r3, #15
 800bd94:	d006      	beq.n	800bda4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bd96:	23ff      	movs	r3, #255	; 0xff
 800bd98:	757b      	strb	r3, [r7, #21]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bda0:	631a      	str	r2, [r3, #48]	; 0x30
 800bda2:	e05e      	b.n	800be62 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bda4:	7bfb      	ldrb	r3, [r7, #15]
 800bda6:	2b0f      	cmp	r3, #15
 800bda8:	d136      	bne.n	800be18 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bdb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d154      	bne.n	800be62 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bdb8:	7dbb      	ldrb	r3, [r7, #22]
 800bdba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00d      	beq.n	800bdde <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6a1b      	ldr	r3, [r3, #32]
 800bdc6:	7b5b      	ldrb	r3, [r3, #13]
 800bdc8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bdca:	7dbb      	ldrb	r3, [r7, #22]
 800bdcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdd0:	75bb      	strb	r3, [r7, #22]
 800bdd2:	7dbb      	ldrb	r3, [r7, #22]
 800bdd4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	695a      	ldr	r2, [r3, #20]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bdde:	7dba      	ldrb	r2, [r7, #22]
 800bde0:	7d7b      	ldrb	r3, [r7, #21]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d115      	bne.n	800be12 <dir_find+0x106>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6a1b      	ldr	r3, [r3, #32]
 800bdea:	330d      	adds	r3, #13
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	7d3a      	ldrb	r2, [r7, #20]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d10e      	bne.n	800be12 <dir_find+0x106>
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	68da      	ldr	r2, [r3, #12]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6a1b      	ldr	r3, [r3, #32]
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	4610      	mov	r0, r2
 800be00:	f7ff fcf2 	bl	800b7e8 <cmp_lfn>
 800be04:	4603      	mov	r3, r0
 800be06:	2b00      	cmp	r3, #0
 800be08:	d003      	beq.n	800be12 <dir_find+0x106>
 800be0a:	7d7b      	ldrb	r3, [r7, #21]
 800be0c:	3b01      	subs	r3, #1
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	e000      	b.n	800be14 <dir_find+0x108>
 800be12:	23ff      	movs	r3, #255	; 0xff
 800be14:	757b      	strb	r3, [r7, #21]
 800be16:	e024      	b.n	800be62 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800be18:	7d7b      	ldrb	r3, [r7, #21]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d109      	bne.n	800be32 <dir_find+0x126>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6a1b      	ldr	r3, [r3, #32]
 800be22:	4618      	mov	r0, r3
 800be24:	f7ff feaa 	bl	800bb7c <sum_sfn>
 800be28:	4603      	mov	r3, r0
 800be2a:	461a      	mov	r2, r3
 800be2c:	7d3b      	ldrb	r3, [r7, #20]
 800be2e:	4293      	cmp	r3, r2
 800be30:	d024      	beq.n	800be7c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800be38:	f003 0301 	and.w	r3, r3, #1
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d10a      	bne.n	800be56 <dir_find+0x14a>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6a18      	ldr	r0, [r3, #32]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	3324      	adds	r3, #36	; 0x24
 800be48:	220b      	movs	r2, #11
 800be4a:	4619      	mov	r1, r3
 800be4c:	f7fe fdca 	bl	800a9e4 <mem_cmp>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d014      	beq.n	800be80 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800be56:	23ff      	movs	r3, #255	; 0xff
 800be58:	757b      	strb	r3, [r7, #21]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be60:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800be62:	2100      	movs	r1, #0
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f7ff fb74 	bl	800b552 <dir_next>
 800be6a:	4603      	mov	r3, r0
 800be6c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800be6e:	7dfb      	ldrb	r3, [r7, #23]
 800be70:	2b00      	cmp	r3, #0
 800be72:	f43f af65 	beq.w	800bd40 <dir_find+0x34>
 800be76:	e004      	b.n	800be82 <dir_find+0x176>
		if (res != FR_OK) break;
 800be78:	bf00      	nop
 800be7a:	e002      	b.n	800be82 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800be7c:	bf00      	nop
 800be7e:	e000      	b.n	800be82 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800be80:	bf00      	nop

	return res;
 800be82:	7dfb      	ldrb	r3, [r7, #23]
}
 800be84:	4618      	mov	r0, r3
 800be86:	3718      	adds	r7, #24
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b08c      	sub	sp, #48	; 0x30
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bea0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d001      	beq.n	800beac <dir_register+0x20>
 800bea8:	2306      	movs	r3, #6
 800beaa:	e0e0      	b.n	800c06e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800beac:	2300      	movs	r3, #0
 800beae:	627b      	str	r3, [r7, #36]	; 0x24
 800beb0:	e002      	b.n	800beb8 <dir_register+0x2c>
 800beb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb4:	3301      	adds	r3, #1
 800beb6:	627b      	str	r3, [r7, #36]	; 0x24
 800beb8:	69fb      	ldr	r3, [r7, #28]
 800beba:	68da      	ldr	r2, [r3, #12]
 800bebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebe:	005b      	lsls	r3, r3, #1
 800bec0:	4413      	add	r3, r2
 800bec2:	881b      	ldrh	r3, [r3, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d1f4      	bne.n	800beb2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800bece:	f107 030c 	add.w	r3, r7, #12
 800bed2:	220c      	movs	r2, #12
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7fe fd49 	bl	800a96c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800beda:	7dfb      	ldrb	r3, [r7, #23]
 800bedc:	f003 0301 	and.w	r3, r3, #1
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d032      	beq.n	800bf4a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2240      	movs	r2, #64	; 0x40
 800bee8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800beec:	2301      	movs	r3, #1
 800beee:	62bb      	str	r3, [r7, #40]	; 0x28
 800bef0:	e016      	b.n	800bf20 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	68da      	ldr	r2, [r3, #12]
 800befc:	f107 010c 	add.w	r1, r7, #12
 800bf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf02:	f7ff fdad 	bl	800ba60 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f7ff ff00 	bl	800bd0c <dir_find>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800bf12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d106      	bne.n	800bf28 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800bf1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf22:	2b63      	cmp	r3, #99	; 0x63
 800bf24:	d9e5      	bls.n	800bef2 <dir_register+0x66>
 800bf26:	e000      	b.n	800bf2a <dir_register+0x9e>
			if (res != FR_OK) break;
 800bf28:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2c:	2b64      	cmp	r3, #100	; 0x64
 800bf2e:	d101      	bne.n	800bf34 <dir_register+0xa8>
 800bf30:	2307      	movs	r3, #7
 800bf32:	e09c      	b.n	800c06e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bf34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf38:	2b04      	cmp	r3, #4
 800bf3a:	d002      	beq.n	800bf42 <dir_register+0xb6>
 800bf3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf40:	e095      	b.n	800c06e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bf42:	7dfa      	ldrb	r2, [r7, #23]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bf4a:	7dfb      	ldrb	r3, [r7, #23]
 800bf4c:	f003 0302 	and.w	r3, r3, #2
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d007      	beq.n	800bf64 <dir_register+0xd8>
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf56:	330c      	adds	r3, #12
 800bf58:	4a47      	ldr	r2, [pc, #284]	; (800c078 <dir_register+0x1ec>)
 800bf5a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf5e:	089b      	lsrs	r3, r3, #2
 800bf60:	3301      	adds	r3, #1
 800bf62:	e000      	b.n	800bf66 <dir_register+0xda>
 800bf64:	2301      	movs	r3, #1
 800bf66:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bf68:	6a39      	ldr	r1, [r7, #32]
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f7ff fbb6 	bl	800b6dc <dir_alloc>
 800bf70:	4603      	mov	r3, r0
 800bf72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bf76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d148      	bne.n	800c010 <dir_register+0x184>
 800bf7e:	6a3b      	ldr	r3, [r7, #32]
 800bf80:	3b01      	subs	r3, #1
 800bf82:	623b      	str	r3, [r7, #32]
 800bf84:	6a3b      	ldr	r3, [r7, #32]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d042      	beq.n	800c010 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	695a      	ldr	r2, [r3, #20]
 800bf8e:	6a3b      	ldr	r3, [r7, #32]
 800bf90:	015b      	lsls	r3, r3, #5
 800bf92:	1ad3      	subs	r3, r2, r3
 800bf94:	4619      	mov	r1, r3
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f7ff fa60 	bl	800b45c <dir_sdi>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bfa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d132      	bne.n	800c010 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	3324      	adds	r3, #36	; 0x24
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7ff fde4 	bl	800bb7c <sum_sfn>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	69db      	ldr	r3, [r3, #28]
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	69f8      	ldr	r0, [r7, #28]
 800bfc0:	f7fe ff02 	bl	800adc8 <move_window>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800bfca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d11d      	bne.n	800c00e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	68d8      	ldr	r0, [r3, #12]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6a19      	ldr	r1, [r3, #32]
 800bfda:	6a3b      	ldr	r3, [r7, #32]
 800bfdc:	b2da      	uxtb	r2, r3
 800bfde:	7efb      	ldrb	r3, [r7, #27]
 800bfe0:	f7ff fcd6 	bl	800b990 <put_lfn>
				fs->wflag = 1;
 800bfe4:	69fb      	ldr	r3, [r7, #28]
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800bfea:	2100      	movs	r1, #0
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f7ff fab0 	bl	800b552 <dir_next>
 800bff2:	4603      	mov	r3, r0
 800bff4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800bff8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d107      	bne.n	800c010 <dir_register+0x184>
 800c000:	6a3b      	ldr	r3, [r7, #32]
 800c002:	3b01      	subs	r3, #1
 800c004:	623b      	str	r3, [r7, #32]
 800c006:	6a3b      	ldr	r3, [r7, #32]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d1d5      	bne.n	800bfb8 <dir_register+0x12c>
 800c00c:	e000      	b.n	800c010 <dir_register+0x184>
				if (res != FR_OK) break;
 800c00e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c010:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c014:	2b00      	cmp	r3, #0
 800c016:	d128      	bne.n	800c06a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	69db      	ldr	r3, [r3, #28]
 800c01c:	4619      	mov	r1, r3
 800c01e:	69f8      	ldr	r0, [r7, #28]
 800c020:	f7fe fed2 	bl	800adc8 <move_window>
 800c024:	4603      	mov	r3, r0
 800c026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c02a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d11b      	bne.n	800c06a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a1b      	ldr	r3, [r3, #32]
 800c036:	2220      	movs	r2, #32
 800c038:	2100      	movs	r1, #0
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fe fcb7 	bl	800a9ae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6a18      	ldr	r0, [r3, #32]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	3324      	adds	r3, #36	; 0x24
 800c048:	220b      	movs	r2, #11
 800c04a:	4619      	mov	r1, r3
 800c04c:	f7fe fc8e 	bl	800a96c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6a1b      	ldr	r3, [r3, #32]
 800c05a:	330c      	adds	r3, #12
 800c05c:	f002 0218 	and.w	r2, r2, #24
 800c060:	b2d2      	uxtb	r2, r2
 800c062:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	2201      	movs	r2, #1
 800c068:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c06a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3730      	adds	r7, #48	; 0x30
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	4ec4ec4f 	.word	0x4ec4ec4f

0800c07c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b088      	sub	sp, #32
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	2200      	movs	r2, #0
 800c090:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	69db      	ldr	r3, [r3, #28]
 800c096:	2b00      	cmp	r3, #0
 800c098:	f000 80c9 	beq.w	800c22e <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0a4:	d032      	beq.n	800c10c <get_fileinfo+0x90>
			i = j = 0;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	61bb      	str	r3, [r7, #24]
 800c0aa:	69bb      	ldr	r3, [r7, #24]
 800c0ac:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c0ae:	e01b      	b.n	800c0e8 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c0b0:	89fb      	ldrh	r3, [r7, #14]
 800c0b2:	2100      	movs	r1, #0
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f001 fbff 	bl	800d8b8 <ff_convert>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c0be:	89fb      	ldrh	r3, [r7, #14]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d102      	bne.n	800c0ca <get_fileinfo+0x4e>
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	61fb      	str	r3, [r7, #28]
 800c0c8:	e01a      	b.n	800c100 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	2bfe      	cmp	r3, #254	; 0xfe
 800c0ce:	d902      	bls.n	800c0d6 <get_fileinfo+0x5a>
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	61fb      	str	r3, [r7, #28]
 800c0d4:	e014      	b.n	800c100 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	1c5a      	adds	r2, r3, #1
 800c0da:	61fa      	str	r2, [r7, #28]
 800c0dc:	89fa      	ldrh	r2, [r7, #14]
 800c0de:	b2d1      	uxtb	r1, r2
 800c0e0:	683a      	ldr	r2, [r7, #0]
 800c0e2:	4413      	add	r3, r2
 800c0e4:	460a      	mov	r2, r1
 800c0e6:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	68da      	ldr	r2, [r3, #12]
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	1c59      	adds	r1, r3, #1
 800c0f0:	61b9      	str	r1, [r7, #24]
 800c0f2:	005b      	lsls	r3, r3, #1
 800c0f4:	4413      	add	r3, r2
 800c0f6:	881b      	ldrh	r3, [r3, #0]
 800c0f8:	81fb      	strh	r3, [r7, #14]
 800c0fa:	89fb      	ldrh	r3, [r7, #14]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d1d7      	bne.n	800c0b0 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800c100:	683a      	ldr	r2, [r7, #0]
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	4413      	add	r3, r2
 800c106:	3316      	adds	r3, #22
 800c108:	2200      	movs	r2, #0
 800c10a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800c10c:	2300      	movs	r3, #0
 800c10e:	61bb      	str	r3, [r7, #24]
 800c110:	69bb      	ldr	r3, [r7, #24]
 800c112:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800c114:	683a      	ldr	r2, [r7, #0]
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	4413      	add	r3, r2
 800c11a:	3316      	adds	r3, #22
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800c120:	e04c      	b.n	800c1bc <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6a1a      	ldr	r2, [r3, #32]
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	1c59      	adds	r1, r3, #1
 800c12a:	61f9      	str	r1, [r7, #28]
 800c12c:	4413      	add	r3, r2
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c132:	7dfb      	ldrb	r3, [r7, #23]
 800c134:	2b20      	cmp	r3, #32
 800c136:	d100      	bne.n	800c13a <get_fileinfo+0xbe>
 800c138:	e040      	b.n	800c1bc <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c13a:	7dfb      	ldrb	r3, [r7, #23]
 800c13c:	2b05      	cmp	r3, #5
 800c13e:	d101      	bne.n	800c144 <get_fileinfo+0xc8>
 800c140:	23e5      	movs	r3, #229	; 0xe5
 800c142:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	2b09      	cmp	r3, #9
 800c148:	d10f      	bne.n	800c16a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800c14a:	89bb      	ldrh	r3, [r7, #12]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d105      	bne.n	800c15c <get_fileinfo+0xe0>
 800c150:	683a      	ldr	r2, [r7, #0]
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	4413      	add	r3, r2
 800c156:	3316      	adds	r3, #22
 800c158:	222e      	movs	r2, #46	; 0x2e
 800c15a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800c15c:	69bb      	ldr	r3, [r7, #24]
 800c15e:	1c5a      	adds	r2, r3, #1
 800c160:	61ba      	str	r2, [r7, #24]
 800c162:	683a      	ldr	r2, [r7, #0]
 800c164:	4413      	add	r3, r2
 800c166:	222e      	movs	r2, #46	; 0x2e
 800c168:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800c16a:	683a      	ldr	r2, [r7, #0]
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	4413      	add	r3, r2
 800c170:	3309      	adds	r3, #9
 800c172:	7dfa      	ldrb	r2, [r7, #23]
 800c174:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800c176:	89bb      	ldrh	r3, [r7, #12]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d11c      	bne.n	800c1b6 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c17c:	7dfb      	ldrb	r3, [r7, #23]
 800c17e:	2b40      	cmp	r3, #64	; 0x40
 800c180:	d913      	bls.n	800c1aa <get_fileinfo+0x12e>
 800c182:	7dfb      	ldrb	r3, [r7, #23]
 800c184:	2b5a      	cmp	r3, #90	; 0x5a
 800c186:	d810      	bhi.n	800c1aa <get_fileinfo+0x12e>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6a1b      	ldr	r3, [r3, #32]
 800c18c:	330c      	adds	r3, #12
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	461a      	mov	r2, r3
 800c192:	69fb      	ldr	r3, [r7, #28]
 800c194:	2b08      	cmp	r3, #8
 800c196:	d901      	bls.n	800c19c <get_fileinfo+0x120>
 800c198:	2310      	movs	r3, #16
 800c19a:	e000      	b.n	800c19e <get_fileinfo+0x122>
 800c19c:	2308      	movs	r3, #8
 800c19e:	4013      	ands	r3, r2
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d002      	beq.n	800c1aa <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800c1a4:	7dfb      	ldrb	r3, [r7, #23]
 800c1a6:	3320      	adds	r3, #32
 800c1a8:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800c1aa:	683a      	ldr	r2, [r7, #0]
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	4413      	add	r3, r2
 800c1b0:	3316      	adds	r3, #22
 800c1b2:	7dfa      	ldrb	r2, [r7, #23]
 800c1b4:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800c1bc:	69fb      	ldr	r3, [r7, #28]
 800c1be:	2b0a      	cmp	r3, #10
 800c1c0:	d9af      	bls.n	800c122 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800c1c2:	89bb      	ldrh	r3, [r7, #12]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d10d      	bne.n	800c1e4 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800c1c8:	683a      	ldr	r2, [r7, #0]
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	3316      	adds	r3, #22
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6a1b      	ldr	r3, [r3, #32]
 800c1d8:	330c      	adds	r3, #12
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d101      	bne.n	800c1e4 <get_fileinfo+0x168>
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800c1e4:	683a      	ldr	r2, [r7, #0]
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	4413      	add	r3, r2
 800c1ea:	3309      	adds	r3, #9
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6a1b      	ldr	r3, [r3, #32]
 800c1f4:	7ada      	ldrb	r2, [r3, #11]
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6a1b      	ldr	r3, [r3, #32]
 800c1fe:	331c      	adds	r3, #28
 800c200:	4618      	mov	r0, r3
 800c202:	f7fe fb49 	bl	800a898 <ld_dword>
 800c206:	4602      	mov	r2, r0
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6a1b      	ldr	r3, [r3, #32]
 800c210:	3316      	adds	r3, #22
 800c212:	4618      	mov	r0, r3
 800c214:	f7fe fb40 	bl	800a898 <ld_dword>
 800c218:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	b29a      	uxth	r2, r3
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	80da      	strh	r2, [r3, #6]
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	0c1b      	lsrs	r3, r3, #16
 800c226:	b29a      	uxth	r2, r3
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	809a      	strh	r2, [r3, #4]
 800c22c:	e000      	b.n	800c230 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c22e:	bf00      	nop
}
 800c230:	3720      	adds	r7, #32
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
	...

0800c238 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	1c59      	adds	r1, r3, #1
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	6011      	str	r1, [r2, #0]
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800c24e:	89fb      	ldrh	r3, [r7, #14]
 800c250:	2b60      	cmp	r3, #96	; 0x60
 800c252:	d905      	bls.n	800c260 <get_achar+0x28>
 800c254:	89fb      	ldrh	r3, [r7, #14]
 800c256:	2b7a      	cmp	r3, #122	; 0x7a
 800c258:	d802      	bhi.n	800c260 <get_achar+0x28>
 800c25a:	89fb      	ldrh	r3, [r7, #14]
 800c25c:	3b20      	subs	r3, #32
 800c25e:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800c260:	89fb      	ldrh	r3, [r7, #14]
 800c262:	2b7f      	cmp	r3, #127	; 0x7f
 800c264:	d904      	bls.n	800c270 <get_achar+0x38>
 800c266:	89fb      	ldrh	r3, [r7, #14]
 800c268:	3b80      	subs	r3, #128	; 0x80
 800c26a:	4a05      	ldr	r2, [pc, #20]	; (800c280 <get_achar+0x48>)
 800c26c:	5cd3      	ldrb	r3, [r2, r3]
 800c26e:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800c270:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800c272:	4618      	mov	r0, r3
 800c274:	3714      	adds	r7, #20
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop
 800c280:	0800db2c 	.word	0x0800db2c

0800c284 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b08a      	sub	sp, #40	; 0x28
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
 800c290:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800c292:	e009      	b.n	800c2a8 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800c294:	f107 0308 	add.w	r3, r7, #8
 800c298:	4618      	mov	r0, r3
 800c29a:	f7ff ffcd 	bl	800c238 <get_achar>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d101      	bne.n	800c2a8 <pattern_matching+0x24>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	e064      	b.n	800c372 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	1e5a      	subs	r2, r3, #1
 800c2ac:	607a      	str	r2, [r7, #4]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d1f0      	bne.n	800c294 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d104      	bne.n	800c2c4 <pattern_matching+0x40>
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d001      	beq.n	800c2c4 <pattern_matching+0x40>
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	e056      	b.n	800c372 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	617b      	str	r3, [r7, #20]
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	2b3f      	cmp	r3, #63	; 0x3f
 800c2d2:	d003      	beq.n	800c2dc <pattern_matching+0x58>
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	2b2a      	cmp	r3, #42	; 0x2a
 800c2da:	d126      	bne.n	800c32a <pattern_matching+0xa6>
				nm = nx = 0;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	61fb      	str	r3, [r7, #28]
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	1c5a      	adds	r2, r3, #1
 800c2e8:	617a      	str	r2, [r7, #20]
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	2b3f      	cmp	r3, #63	; 0x3f
 800c2ee:	d103      	bne.n	800c2f8 <pattern_matching+0x74>
 800c2f0:	6a3b      	ldr	r3, [r7, #32]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	623b      	str	r3, [r7, #32]
 800c2f6:	e001      	b.n	800c2fc <pattern_matching+0x78>
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	2b3f      	cmp	r3, #63	; 0x3f
 800c302:	d0ef      	beq.n	800c2e4 <pattern_matching+0x60>
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	781b      	ldrb	r3, [r3, #0]
 800c308:	2b2a      	cmp	r3, #42	; 0x2a
 800c30a:	d0eb      	beq.n	800c2e4 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800c30c:	6978      	ldr	r0, [r7, #20]
 800c30e:	6939      	ldr	r1, [r7, #16]
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	6a3a      	ldr	r2, [r7, #32]
 800c314:	f7ff ffb6 	bl	800c284 <pattern_matching>
 800c318:	4603      	mov	r3, r0
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d001      	beq.n	800c322 <pattern_matching+0x9e>
 800c31e:	2301      	movs	r3, #1
 800c320:	e027      	b.n	800c372 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c328:	e017      	b.n	800c35a <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800c32a:	f107 0314 	add.w	r3, r7, #20
 800c32e:	4618      	mov	r0, r3
 800c330:	f7ff ff82 	bl	800c238 <get_achar>
 800c334:	4603      	mov	r3, r0
 800c336:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800c338:	f107 0310 	add.w	r3, r7, #16
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7ff ff7b 	bl	800c238 <get_achar>
 800c342:	4603      	mov	r3, r0
 800c344:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800c346:	8b7a      	ldrh	r2, [r7, #26]
 800c348:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d104      	bne.n	800c358 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800c34e:	8b7b      	ldrh	r3, [r7, #26]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d1bb      	bne.n	800c2cc <pattern_matching+0x48>
 800c354:	2301      	movs	r3, #1
 800c356:	e00c      	b.n	800c372 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 800c358:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800c35a:	f107 0308 	add.w	r3, r7, #8
 800c35e:	4618      	mov	r0, r3
 800c360:	f7ff ff6a 	bl	800c238 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d002      	beq.n	800c370 <pattern_matching+0xec>
 800c36a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d1a9      	bne.n	800c2c4 <pattern_matching+0x40>

	return 0;
 800c370:	2300      	movs	r3, #0
}
 800c372:	4618      	mov	r0, r3
 800c374:	3728      	adds	r7, #40	; 0x28
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
	...

0800c37c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b08a      	sub	sp, #40	; 0x28
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	613b      	str	r3, [r7, #16]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	68db      	ldr	r3, [r3, #12]
 800c392:	60fb      	str	r3, [r7, #12]
 800c394:	2300      	movs	r3, #0
 800c396:	617b      	str	r3, [r7, #20]
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	1c5a      	adds	r2, r3, #1
 800c3a0:	61ba      	str	r2, [r7, #24]
 800c3a2:	693a      	ldr	r2, [r7, #16]
 800c3a4:	4413      	add	r3, r2
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c3aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3ac:	2b1f      	cmp	r3, #31
 800c3ae:	d940      	bls.n	800c432 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c3b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3b2:	2b2f      	cmp	r3, #47	; 0x2f
 800c3b4:	d006      	beq.n	800c3c4 <create_name+0x48>
 800c3b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3b8:	2b5c      	cmp	r3, #92	; 0x5c
 800c3ba:	d110      	bne.n	800c3de <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c3bc:	e002      	b.n	800c3c4 <create_name+0x48>
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	61bb      	str	r3, [r7, #24]
 800c3c4:	693a      	ldr	r2, [r7, #16]
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	2b2f      	cmp	r3, #47	; 0x2f
 800c3ce:	d0f6      	beq.n	800c3be <create_name+0x42>
 800c3d0:	693a      	ldr	r2, [r7, #16]
 800c3d2:	69bb      	ldr	r3, [r7, #24]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	2b5c      	cmp	r3, #92	; 0x5c
 800c3da:	d0f0      	beq.n	800c3be <create_name+0x42>
			break;
 800c3dc:	e02a      	b.n	800c434 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	2bfe      	cmp	r3, #254	; 0xfe
 800c3e2:	d901      	bls.n	800c3e8 <create_name+0x6c>
 800c3e4:	2306      	movs	r3, #6
 800c3e6:	e17d      	b.n	800c6e4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c3e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c3ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3f0:	2101      	movs	r1, #1
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f001 fa60 	bl	800d8b8 <ff_convert>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c3fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d101      	bne.n	800c406 <create_name+0x8a>
 800c402:	2306      	movs	r3, #6
 800c404:	e16e      	b.n	800c6e4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c406:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c408:	2b7f      	cmp	r3, #127	; 0x7f
 800c40a:	d809      	bhi.n	800c420 <create_name+0xa4>
 800c40c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c40e:	4619      	mov	r1, r3
 800c410:	488d      	ldr	r0, [pc, #564]	; (800c648 <create_name+0x2cc>)
 800c412:	f7fe fb0e 	bl	800aa32 <chk_chr>
 800c416:	4603      	mov	r3, r0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d001      	beq.n	800c420 <create_name+0xa4>
 800c41c:	2306      	movs	r3, #6
 800c41e:	e161      	b.n	800c6e4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	1c5a      	adds	r2, r3, #1
 800c424:	617a      	str	r2, [r7, #20]
 800c426:	005b      	lsls	r3, r3, #1
 800c428:	68fa      	ldr	r2, [r7, #12]
 800c42a:	4413      	add	r3, r2
 800c42c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c42e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c430:	e7b4      	b.n	800c39c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c432:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c434:	693a      	ldr	r2, [r7, #16]
 800c436:	69bb      	ldr	r3, [r7, #24]
 800c438:	441a      	add	r2, r3
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c43e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c440:	2b1f      	cmp	r3, #31
 800c442:	d801      	bhi.n	800c448 <create_name+0xcc>
 800c444:	2304      	movs	r3, #4
 800c446:	e000      	b.n	800c44a <create_name+0xce>
 800c448:	2300      	movs	r3, #0
 800c44a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c44e:	e011      	b.n	800c474 <create_name+0xf8>
		w = lfn[di - 1];
 800c450:	697a      	ldr	r2, [r7, #20]
 800c452:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c456:	4413      	add	r3, r2
 800c458:	005b      	lsls	r3, r3, #1
 800c45a:	68fa      	ldr	r2, [r7, #12]
 800c45c:	4413      	add	r3, r2
 800c45e:	881b      	ldrh	r3, [r3, #0]
 800c460:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c464:	2b20      	cmp	r3, #32
 800c466:	d002      	beq.n	800c46e <create_name+0xf2>
 800c468:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c46a:	2b2e      	cmp	r3, #46	; 0x2e
 800c46c:	d106      	bne.n	800c47c <create_name+0x100>
		di--;
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	3b01      	subs	r3, #1
 800c472:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d1ea      	bne.n	800c450 <create_name+0xd4>
 800c47a:	e000      	b.n	800c47e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c47c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	005b      	lsls	r3, r3, #1
 800c482:	68fa      	ldr	r2, [r7, #12]
 800c484:	4413      	add	r3, r2
 800c486:	2200      	movs	r2, #0
 800c488:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d101      	bne.n	800c494 <create_name+0x118>
 800c490:	2306      	movs	r3, #6
 800c492:	e127      	b.n	800c6e4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	3324      	adds	r3, #36	; 0x24
 800c498:	220b      	movs	r2, #11
 800c49a:	2120      	movs	r1, #32
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7fe fa86 	bl	800a9ae <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	61bb      	str	r3, [r7, #24]
 800c4a6:	e002      	b.n	800c4ae <create_name+0x132>
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	61bb      	str	r3, [r7, #24]
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	005b      	lsls	r3, r3, #1
 800c4b2:	68fa      	ldr	r2, [r7, #12]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	881b      	ldrh	r3, [r3, #0]
 800c4b8:	2b20      	cmp	r3, #32
 800c4ba:	d0f5      	beq.n	800c4a8 <create_name+0x12c>
 800c4bc:	69bb      	ldr	r3, [r7, #24]
 800c4be:	005b      	lsls	r3, r3, #1
 800c4c0:	68fa      	ldr	r2, [r7, #12]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	881b      	ldrh	r3, [r3, #0]
 800c4c6:	2b2e      	cmp	r3, #46	; 0x2e
 800c4c8:	d0ee      	beq.n	800c4a8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c4ca:	69bb      	ldr	r3, [r7, #24]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d009      	beq.n	800c4e4 <create_name+0x168>
 800c4d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4d4:	f043 0303 	orr.w	r3, r3, #3
 800c4d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c4dc:	e002      	b.n	800c4e4 <create_name+0x168>
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	3b01      	subs	r3, #1
 800c4e2:	617b      	str	r3, [r7, #20]
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d009      	beq.n	800c4fe <create_name+0x182>
 800c4ea:	697a      	ldr	r2, [r7, #20]
 800c4ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c4f0:	4413      	add	r3, r2
 800c4f2:	005b      	lsls	r3, r3, #1
 800c4f4:	68fa      	ldr	r2, [r7, #12]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	881b      	ldrh	r3, [r3, #0]
 800c4fa:	2b2e      	cmp	r3, #46	; 0x2e
 800c4fc:	d1ef      	bne.n	800c4de <create_name+0x162>

	i = b = 0; ni = 8;
 800c4fe:	2300      	movs	r3, #0
 800c500:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c504:	2300      	movs	r3, #0
 800c506:	623b      	str	r3, [r7, #32]
 800c508:	2308      	movs	r3, #8
 800c50a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c50c:	69bb      	ldr	r3, [r7, #24]
 800c50e:	1c5a      	adds	r2, r3, #1
 800c510:	61ba      	str	r2, [r7, #24]
 800c512:	005b      	lsls	r3, r3, #1
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	4413      	add	r3, r2
 800c518:	881b      	ldrh	r3, [r3, #0]
 800c51a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c51c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c51e:	2b00      	cmp	r3, #0
 800c520:	f000 8090 	beq.w	800c644 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c524:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c526:	2b20      	cmp	r3, #32
 800c528:	d006      	beq.n	800c538 <create_name+0x1bc>
 800c52a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c52c:	2b2e      	cmp	r3, #46	; 0x2e
 800c52e:	d10a      	bne.n	800c546 <create_name+0x1ca>
 800c530:	69ba      	ldr	r2, [r7, #24]
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	429a      	cmp	r2, r3
 800c536:	d006      	beq.n	800c546 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c53c:	f043 0303 	orr.w	r3, r3, #3
 800c540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c544:	e07d      	b.n	800c642 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c546:	6a3a      	ldr	r2, [r7, #32]
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d203      	bcs.n	800c556 <create_name+0x1da>
 800c54e:	69ba      	ldr	r2, [r7, #24]
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	429a      	cmp	r2, r3
 800c554:	d123      	bne.n	800c59e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c556:	69fb      	ldr	r3, [r7, #28]
 800c558:	2b0b      	cmp	r3, #11
 800c55a:	d106      	bne.n	800c56a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c55c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c560:	f043 0303 	orr.w	r3, r3, #3
 800c564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c568:	e075      	b.n	800c656 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c56a:	69ba      	ldr	r2, [r7, #24]
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d005      	beq.n	800c57e <create_name+0x202>
 800c572:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c576:	f043 0303 	orr.w	r3, r3, #3
 800c57a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c57e:	69ba      	ldr	r2, [r7, #24]
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	429a      	cmp	r2, r3
 800c584:	d866      	bhi.n	800c654 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	61bb      	str	r3, [r7, #24]
 800c58a:	2308      	movs	r3, #8
 800c58c:	623b      	str	r3, [r7, #32]
 800c58e:	230b      	movs	r3, #11
 800c590:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c592:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c59c:	e051      	b.n	800c642 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c59e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5a0:	2b7f      	cmp	r3, #127	; 0x7f
 800c5a2:	d914      	bls.n	800c5ce <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c5a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f001 f985 	bl	800d8b8 <ff_convert>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c5b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d004      	beq.n	800c5c2 <create_name+0x246>
 800c5b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5ba:	3b80      	subs	r3, #128	; 0x80
 800c5bc:	4a23      	ldr	r2, [pc, #140]	; (800c64c <create_name+0x2d0>)
 800c5be:	5cd3      	ldrb	r3, [r2, r3]
 800c5c0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c5c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5c6:	f043 0302 	orr.w	r3, r3, #2
 800c5ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c5ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d007      	beq.n	800c5e4 <create_name+0x268>
 800c5d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	481d      	ldr	r0, [pc, #116]	; (800c650 <create_name+0x2d4>)
 800c5da:	f7fe fa2a 	bl	800aa32 <chk_chr>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d008      	beq.n	800c5f6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c5e4:	235f      	movs	r3, #95	; 0x5f
 800c5e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c5e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5ec:	f043 0303 	orr.w	r3, r3, #3
 800c5f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5f4:	e01b      	b.n	800c62e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c5f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5f8:	2b40      	cmp	r3, #64	; 0x40
 800c5fa:	d909      	bls.n	800c610 <create_name+0x294>
 800c5fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5fe:	2b5a      	cmp	r3, #90	; 0x5a
 800c600:	d806      	bhi.n	800c610 <create_name+0x294>
					b |= 2;
 800c602:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c606:	f043 0302 	orr.w	r3, r3, #2
 800c60a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c60e:	e00e      	b.n	800c62e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c612:	2b60      	cmp	r3, #96	; 0x60
 800c614:	d90b      	bls.n	800c62e <create_name+0x2b2>
 800c616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c618:	2b7a      	cmp	r3, #122	; 0x7a
 800c61a:	d808      	bhi.n	800c62e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c61c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c620:	f043 0301 	orr.w	r3, r3, #1
 800c624:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c628:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c62a:	3b20      	subs	r3, #32
 800c62c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c62e:	6a3b      	ldr	r3, [r7, #32]
 800c630:	1c5a      	adds	r2, r3, #1
 800c632:	623a      	str	r2, [r7, #32]
 800c634:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c636:	b2d1      	uxtb	r1, r2
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	4413      	add	r3, r2
 800c63c:	460a      	mov	r2, r1
 800c63e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c642:	e763      	b.n	800c50c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c644:	bf00      	nop
 800c646:	e006      	b.n	800c656 <create_name+0x2da>
 800c648:	0800dac0 	.word	0x0800dac0
 800c64c:	0800db2c 	.word	0x0800db2c
 800c650:	0800dacc 	.word	0x0800dacc
			if (si > di) break;			/* No extension */
 800c654:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c65c:	2be5      	cmp	r3, #229	; 0xe5
 800c65e:	d103      	bne.n	800c668 <create_name+0x2ec>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2205      	movs	r2, #5
 800c664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c668:	69fb      	ldr	r3, [r7, #28]
 800c66a:	2b08      	cmp	r3, #8
 800c66c:	d104      	bne.n	800c678 <create_name+0x2fc>
 800c66e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c678:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c67c:	f003 030c 	and.w	r3, r3, #12
 800c680:	2b0c      	cmp	r3, #12
 800c682:	d005      	beq.n	800c690 <create_name+0x314>
 800c684:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c688:	f003 0303 	and.w	r3, r3, #3
 800c68c:	2b03      	cmp	r3, #3
 800c68e:	d105      	bne.n	800c69c <create_name+0x320>
 800c690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c694:	f043 0302 	orr.w	r3, r3, #2
 800c698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c69c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6a0:	f003 0302 	and.w	r3, r3, #2
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d117      	bne.n	800c6d8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c6a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6ac:	f003 0303 	and.w	r3, r3, #3
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d105      	bne.n	800c6c0 <create_name+0x344>
 800c6b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6b8:	f043 0310 	orr.w	r3, r3, #16
 800c6bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c6c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6c4:	f003 030c 	and.w	r3, r3, #12
 800c6c8:	2b04      	cmp	r3, #4
 800c6ca:	d105      	bne.n	800c6d8 <create_name+0x35c>
 800c6cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6d0:	f043 0308 	orr.w	r3, r3, #8
 800c6d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c6de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c6e2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3728      	adds	r7, #40	; 0x28
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b086      	sub	sp, #24
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c700:	e002      	b.n	800c708 <follow_path+0x1c>
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	3301      	adds	r3, #1
 800c706:	603b      	str	r3, [r7, #0]
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	2b2f      	cmp	r3, #47	; 0x2f
 800c70e:	d0f8      	beq.n	800c702 <follow_path+0x16>
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	2b5c      	cmp	r3, #92	; 0x5c
 800c716:	d0f4      	beq.n	800c702 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	2200      	movs	r2, #0
 800c71c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	2b1f      	cmp	r3, #31
 800c724:	d80a      	bhi.n	800c73c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2280      	movs	r2, #128	; 0x80
 800c72a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c72e:	2100      	movs	r1, #0
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f7fe fe93 	bl	800b45c <dir_sdi>
 800c736:	4603      	mov	r3, r0
 800c738:	75fb      	strb	r3, [r7, #23]
 800c73a:	e043      	b.n	800c7c4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c73c:	463b      	mov	r3, r7
 800c73e:	4619      	mov	r1, r3
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f7ff fe1b 	bl	800c37c <create_name>
 800c746:	4603      	mov	r3, r0
 800c748:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c74a:	7dfb      	ldrb	r3, [r7, #23]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d134      	bne.n	800c7ba <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f7ff fadb 	bl	800bd0c <dir_find>
 800c756:	4603      	mov	r3, r0
 800c758:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c760:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c762:	7dfb      	ldrb	r3, [r7, #23]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d00a      	beq.n	800c77e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c768:	7dfb      	ldrb	r3, [r7, #23]
 800c76a:	2b04      	cmp	r3, #4
 800c76c:	d127      	bne.n	800c7be <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c76e:	7afb      	ldrb	r3, [r7, #11]
 800c770:	f003 0304 	and.w	r3, r3, #4
 800c774:	2b00      	cmp	r3, #0
 800c776:	d122      	bne.n	800c7be <follow_path+0xd2>
 800c778:	2305      	movs	r3, #5
 800c77a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c77c:	e01f      	b.n	800c7be <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c77e:	7afb      	ldrb	r3, [r7, #11]
 800c780:	f003 0304 	and.w	r3, r3, #4
 800c784:	2b00      	cmp	r3, #0
 800c786:	d11c      	bne.n	800c7c2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	799b      	ldrb	r3, [r3, #6]
 800c78c:	f003 0310 	and.w	r3, r3, #16
 800c790:	2b00      	cmp	r3, #0
 800c792:	d102      	bne.n	800c79a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c794:	2305      	movs	r3, #5
 800c796:	75fb      	strb	r3, [r7, #23]
 800c798:	e014      	b.n	800c7c4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	695b      	ldr	r3, [r3, #20]
 800c7a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7a8:	4413      	add	r3, r2
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	68f8      	ldr	r0, [r7, #12]
 800c7ae:	f7fe ffdc 	bl	800b76a <ld_clust>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c7b8:	e7c0      	b.n	800c73c <follow_path+0x50>
			if (res != FR_OK) break;
 800c7ba:	bf00      	nop
 800c7bc:	e002      	b.n	800c7c4 <follow_path+0xd8>
				break;
 800c7be:	bf00      	nop
 800c7c0:	e000      	b.n	800c7c4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c7c2:	bf00      	nop
			}
		}
	}

	return res;
 800c7c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3718      	adds	r7, #24
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}

0800c7ce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c7ce:	b480      	push	{r7}
 800c7d0:	b087      	sub	sp, #28
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c7d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7da:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d031      	beq.n	800c848 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	617b      	str	r3, [r7, #20]
 800c7ea:	e002      	b.n	800c7f2 <get_ldnumber+0x24>
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	617b      	str	r3, [r7, #20]
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	2b1f      	cmp	r3, #31
 800c7f8:	d903      	bls.n	800c802 <get_ldnumber+0x34>
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	2b3a      	cmp	r3, #58	; 0x3a
 800c800:	d1f4      	bne.n	800c7ec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	2b3a      	cmp	r3, #58	; 0x3a
 800c808:	d11c      	bne.n	800c844 <get_ldnumber+0x76>
			tp = *path;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	1c5a      	adds	r2, r3, #1
 800c814:	60fa      	str	r2, [r7, #12]
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	3b30      	subs	r3, #48	; 0x30
 800c81a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	2b09      	cmp	r3, #9
 800c820:	d80e      	bhi.n	800c840 <get_ldnumber+0x72>
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	429a      	cmp	r2, r3
 800c828:	d10a      	bne.n	800c840 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d107      	bne.n	800c840 <get_ldnumber+0x72>
					vol = (int)i;
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	3301      	adds	r3, #1
 800c838:	617b      	str	r3, [r7, #20]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	697a      	ldr	r2, [r7, #20]
 800c83e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	e002      	b.n	800c84a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c844:	2300      	movs	r3, #0
 800c846:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c848:	693b      	ldr	r3, [r7, #16]
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	371c      	adds	r7, #28
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr
	...

0800c858 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	70da      	strb	r2, [r3, #3]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c86e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c870:	6839      	ldr	r1, [r7, #0]
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f7fe faa8 	bl	800adc8 <move_window>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d001      	beq.n	800c882 <check_fs+0x2a>
 800c87e:	2304      	movs	r3, #4
 800c880:	e038      	b.n	800c8f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	3334      	adds	r3, #52	; 0x34
 800c886:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7fd ffec 	bl	800a868 <ld_word>
 800c890:	4603      	mov	r3, r0
 800c892:	461a      	mov	r2, r3
 800c894:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c898:	429a      	cmp	r2, r3
 800c89a:	d001      	beq.n	800c8a0 <check_fs+0x48>
 800c89c:	2303      	movs	r3, #3
 800c89e:	e029      	b.n	800c8f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c8a6:	2be9      	cmp	r3, #233	; 0xe9
 800c8a8:	d009      	beq.n	800c8be <check_fs+0x66>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c8b0:	2beb      	cmp	r3, #235	; 0xeb
 800c8b2:	d11e      	bne.n	800c8f2 <check_fs+0x9a>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c8ba:	2b90      	cmp	r3, #144	; 0x90
 800c8bc:	d119      	bne.n	800c8f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	3334      	adds	r3, #52	; 0x34
 800c8c2:	3336      	adds	r3, #54	; 0x36
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7fd ffe7 	bl	800a898 <ld_dword>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c8d0:	4a0a      	ldr	r2, [pc, #40]	; (800c8fc <check_fs+0xa4>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d101      	bne.n	800c8da <check_fs+0x82>
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	e00c      	b.n	800c8f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	3334      	adds	r3, #52	; 0x34
 800c8de:	3352      	adds	r3, #82	; 0x52
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7fd ffd9 	bl	800a898 <ld_dword>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	4a05      	ldr	r2, [pc, #20]	; (800c900 <check_fs+0xa8>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d101      	bne.n	800c8f2 <check_fs+0x9a>
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	e000      	b.n	800c8f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c8f2:	2302      	movs	r3, #2
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3708      	adds	r7, #8
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	00544146 	.word	0x00544146
 800c900:	33544146 	.word	0x33544146

0800c904 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b096      	sub	sp, #88	; 0x58
 800c908:	af00      	add	r7, sp, #0
 800c90a:	60f8      	str	r0, [r7, #12]
 800c90c:	60b9      	str	r1, [r7, #8]
 800c90e:	4613      	mov	r3, r2
 800c910:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	2200      	movs	r2, #0
 800c916:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c918:	68f8      	ldr	r0, [r7, #12]
 800c91a:	f7ff ff58 	bl	800c7ce <get_ldnumber>
 800c91e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c922:	2b00      	cmp	r3, #0
 800c924:	da01      	bge.n	800c92a <find_volume+0x26>
 800c926:	230b      	movs	r3, #11
 800c928:	e230      	b.n	800cd8c <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c92a:	4aa1      	ldr	r2, [pc, #644]	; (800cbb0 <find_volume+0x2ac>)
 800c92c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c92e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c932:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c936:	2b00      	cmp	r3, #0
 800c938:	d101      	bne.n	800c93e <find_volume+0x3a>
 800c93a:	230c      	movs	r3, #12
 800c93c:	e226      	b.n	800cd8c <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c942:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c944:	79fb      	ldrb	r3, [r7, #7]
 800c946:	f023 0301 	bic.w	r3, r3, #1
 800c94a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d01a      	beq.n	800c98a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c956:	785b      	ldrb	r3, [r3, #1]
 800c958:	4618      	mov	r0, r3
 800c95a:	f7fd fee7 	bl	800a72c <disk_status>
 800c95e:	4603      	mov	r3, r0
 800c960:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c964:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c968:	f003 0301 	and.w	r3, r3, #1
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d10c      	bne.n	800c98a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c970:	79fb      	ldrb	r3, [r7, #7]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d007      	beq.n	800c986 <find_volume+0x82>
 800c976:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c97a:	f003 0304 	and.w	r3, r3, #4
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d001      	beq.n	800c986 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c982:	230a      	movs	r3, #10
 800c984:	e202      	b.n	800cd8c <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800c986:	2300      	movs	r3, #0
 800c988:	e200      	b.n	800cd8c <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c98c:	2200      	movs	r2, #0
 800c98e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c992:	b2da      	uxtb	r2, r3
 800c994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c996:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99a:	785b      	ldrb	r3, [r3, #1]
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7fd fedf 	bl	800a760 <disk_initialize>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c9a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9ac:	f003 0301 	and.w	r3, r3, #1
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d001      	beq.n	800c9b8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c9b4:	2303      	movs	r3, #3
 800c9b6:	e1e9      	b.n	800cd8c <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c9b8:	79fb      	ldrb	r3, [r7, #7]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d007      	beq.n	800c9ce <find_volume+0xca>
 800c9be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9c2:	f003 0304 	and.w	r3, r3, #4
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d001      	beq.n	800c9ce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c9ca:	230a      	movs	r3, #10
 800c9cc:	e1de      	b.n	800cd8c <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c9d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c9d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c9d6:	f7ff ff3f 	bl	800c858 <check_fs>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c9e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9e4:	2b02      	cmp	r3, #2
 800c9e6:	d149      	bne.n	800ca7c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	643b      	str	r3, [r7, #64]	; 0x40
 800c9ec:	e01e      	b.n	800ca2c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c9f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9f6:	011b      	lsls	r3, r3, #4
 800c9f8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c9fc:	4413      	add	r3, r2
 800c9fe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ca00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca02:	3304      	adds	r3, #4
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d006      	beq.n	800ca18 <find_volume+0x114>
 800ca0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca0c:	3308      	adds	r3, #8
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fd ff42 	bl	800a898 <ld_dword>
 800ca14:	4602      	mov	r2, r0
 800ca16:	e000      	b.n	800ca1a <find_volume+0x116>
 800ca18:	2200      	movs	r2, #0
 800ca1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	3358      	adds	r3, #88	; 0x58
 800ca20:	443b      	add	r3, r7
 800ca22:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca28:	3301      	adds	r3, #1
 800ca2a:	643b      	str	r3, [r7, #64]	; 0x40
 800ca2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca2e:	2b03      	cmp	r3, #3
 800ca30:	d9dd      	bls.n	800c9ee <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ca32:	2300      	movs	r3, #0
 800ca34:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ca36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d002      	beq.n	800ca42 <find_volume+0x13e>
 800ca3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca3e:	3b01      	subs	r3, #1
 800ca40:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ca42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca44:	009b      	lsls	r3, r3, #2
 800ca46:	3358      	adds	r3, #88	; 0x58
 800ca48:	443b      	add	r3, r7
 800ca4a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ca4e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ca50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d005      	beq.n	800ca62 <find_volume+0x15e>
 800ca56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ca58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ca5a:	f7ff fefd 	bl	800c858 <check_fs>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	e000      	b.n	800ca64 <find_volume+0x160>
 800ca62:	2303      	movs	r3, #3
 800ca64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ca68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d905      	bls.n	800ca7c <find_volume+0x178>
 800ca70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca72:	3301      	adds	r3, #1
 800ca74:	643b      	str	r3, [r7, #64]	; 0x40
 800ca76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca78:	2b03      	cmp	r3, #3
 800ca7a:	d9e2      	bls.n	800ca42 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ca7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca80:	2b04      	cmp	r3, #4
 800ca82:	d101      	bne.n	800ca88 <find_volume+0x184>
 800ca84:	2301      	movs	r3, #1
 800ca86:	e181      	b.n	800cd8c <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ca88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d901      	bls.n	800ca94 <find_volume+0x190>
 800ca90:	230d      	movs	r3, #13
 800ca92:	e17b      	b.n	800cd8c <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ca94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca96:	3334      	adds	r3, #52	; 0x34
 800ca98:	330b      	adds	r3, #11
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7fd fee4 	bl	800a868 <ld_word>
 800caa0:	4603      	mov	r3, r0
 800caa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800caa6:	d001      	beq.n	800caac <find_volume+0x1a8>
 800caa8:	230d      	movs	r3, #13
 800caaa:	e16f      	b.n	800cd8c <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800caac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caae:	3334      	adds	r3, #52	; 0x34
 800cab0:	3316      	adds	r3, #22
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7fd fed8 	bl	800a868 <ld_word>
 800cab8:	4603      	mov	r3, r0
 800caba:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cabc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d106      	bne.n	800cad0 <find_volume+0x1cc>
 800cac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac4:	3334      	adds	r3, #52	; 0x34
 800cac6:	3324      	adds	r3, #36	; 0x24
 800cac8:	4618      	mov	r0, r3
 800caca:	f7fd fee5 	bl	800a898 <ld_dword>
 800cace:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cad4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800cadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cade:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae2:	789b      	ldrb	r3, [r3, #2]
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d005      	beq.n	800caf4 <find_volume+0x1f0>
 800cae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caea:	789b      	ldrb	r3, [r3, #2]
 800caec:	2b02      	cmp	r3, #2
 800caee:	d001      	beq.n	800caf4 <find_volume+0x1f0>
 800caf0:	230d      	movs	r3, #13
 800caf2:	e14b      	b.n	800cd8c <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800caf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf6:	789b      	ldrb	r3, [r3, #2]
 800caf8:	461a      	mov	r2, r3
 800cafa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cafc:	fb02 f303 	mul.w	r3, r2, r3
 800cb00:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb08:	b29a      	uxth	r2, r3
 800cb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb10:	895b      	ldrh	r3, [r3, #10]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d008      	beq.n	800cb28 <find_volume+0x224>
 800cb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb18:	895b      	ldrh	r3, [r3, #10]
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1e:	895b      	ldrh	r3, [r3, #10]
 800cb20:	3b01      	subs	r3, #1
 800cb22:	4013      	ands	r3, r2
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d001      	beq.n	800cb2c <find_volume+0x228>
 800cb28:	230d      	movs	r3, #13
 800cb2a:	e12f      	b.n	800cd8c <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2e:	3334      	adds	r3, #52	; 0x34
 800cb30:	3311      	adds	r3, #17
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7fd fe98 	bl	800a868 <ld_word>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb42:	891b      	ldrh	r3, [r3, #8]
 800cb44:	f003 030f 	and.w	r3, r3, #15
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d001      	beq.n	800cb52 <find_volume+0x24e>
 800cb4e:	230d      	movs	r3, #13
 800cb50:	e11c      	b.n	800cd8c <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb54:	3334      	adds	r3, #52	; 0x34
 800cb56:	3313      	adds	r3, #19
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7fd fe85 	bl	800a868 <ld_word>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cb62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d106      	bne.n	800cb76 <find_volume+0x272>
 800cb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6a:	3334      	adds	r3, #52	; 0x34
 800cb6c:	3320      	adds	r3, #32
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7fd fe92 	bl	800a898 <ld_dword>
 800cb74:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb78:	3334      	adds	r3, #52	; 0x34
 800cb7a:	330e      	adds	r3, #14
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7fd fe73 	bl	800a868 <ld_word>
 800cb82:	4603      	mov	r3, r0
 800cb84:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cb86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d101      	bne.n	800cb90 <find_volume+0x28c>
 800cb8c:	230d      	movs	r3, #13
 800cb8e:	e0fd      	b.n	800cd8c <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cb90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb94:	4413      	add	r3, r2
 800cb96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb98:	8912      	ldrh	r2, [r2, #8]
 800cb9a:	0912      	lsrs	r2, r2, #4
 800cb9c:	b292      	uxth	r2, r2
 800cb9e:	4413      	add	r3, r2
 800cba0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cba2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d204      	bcs.n	800cbb4 <find_volume+0x2b0>
 800cbaa:	230d      	movs	r3, #13
 800cbac:	e0ee      	b.n	800cd8c <find_volume+0x488>
 800cbae:	bf00      	nop
 800cbb0:	20000718 	.word	0x20000718
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cbb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb8:	1ad3      	subs	r3, r2, r3
 800cbba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbbc:	8952      	ldrh	r2, [r2, #10]
 800cbbe:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbc2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d101      	bne.n	800cbce <find_volume+0x2ca>
 800cbca:	230d      	movs	r3, #13
 800cbcc:	e0de      	b.n	800cd8c <find_volume+0x488>
		fmt = FS_FAT32;
 800cbce:	2303      	movs	r3, #3
 800cbd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d802      	bhi.n	800cbe4 <find_volume+0x2e0>
 800cbde:	2302      	movs	r3, #2
 800cbe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d802      	bhi.n	800cbf4 <find_volume+0x2f0>
 800cbee:	2301      	movs	r3, #1
 800cbf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf6:	1c9a      	adds	r2, r3, #2
 800cbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfa:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800cbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc00:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cc02:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cc04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc06:	441a      	add	r2, r3
 800cc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800cc0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc10:	441a      	add	r2, r3
 800cc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc14:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800cc16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc1a:	2b03      	cmp	r3, #3
 800cc1c:	d11e      	bne.n	800cc5c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc20:	3334      	adds	r3, #52	; 0x34
 800cc22:	332a      	adds	r3, #42	; 0x2a
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7fd fe1f 	bl	800a868 <ld_word>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d001      	beq.n	800cc34 <find_volume+0x330>
 800cc30:	230d      	movs	r3, #13
 800cc32:	e0ab      	b.n	800cd8c <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc36:	891b      	ldrh	r3, [r3, #8]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d001      	beq.n	800cc40 <find_volume+0x33c>
 800cc3c:	230d      	movs	r3, #13
 800cc3e:	e0a5      	b.n	800cd8c <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc42:	3334      	adds	r3, #52	; 0x34
 800cc44:	332c      	adds	r3, #44	; 0x2c
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7fd fe26 	bl	800a898 <ld_dword>
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc50:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc54:	699b      	ldr	r3, [r3, #24]
 800cc56:	009b      	lsls	r3, r3, #2
 800cc58:	647b      	str	r3, [r7, #68]	; 0x44
 800cc5a:	e01f      	b.n	800cc9c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5e:	891b      	ldrh	r3, [r3, #8]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d101      	bne.n	800cc68 <find_volume+0x364>
 800cc64:	230d      	movs	r3, #13
 800cc66:	e091      	b.n	800cd8c <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc6e:	441a      	add	r2, r3
 800cc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc72:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cc74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc78:	2b02      	cmp	r3, #2
 800cc7a:	d103      	bne.n	800cc84 <find_volume+0x380>
 800cc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7e:	699b      	ldr	r3, [r3, #24]
 800cc80:	005b      	lsls	r3, r3, #1
 800cc82:	e00a      	b.n	800cc9a <find_volume+0x396>
 800cc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc86:	699a      	ldr	r2, [r3, #24]
 800cc88:	4613      	mov	r3, r2
 800cc8a:	005b      	lsls	r3, r3, #1
 800cc8c:	4413      	add	r3, r2
 800cc8e:	085a      	lsrs	r2, r3, #1
 800cc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc92:	699b      	ldr	r3, [r3, #24]
 800cc94:	f003 0301 	and.w	r3, r3, #1
 800cc98:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cc9a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9e:	69da      	ldr	r2, [r3, #28]
 800cca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cca2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cca6:	0a5b      	lsrs	r3, r3, #9
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d201      	bcs.n	800ccb0 <find_volume+0x3ac>
 800ccac:	230d      	movs	r3, #13
 800ccae:	e06d      	b.n	800cd8c <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ccb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccb6:	615a      	str	r2, [r3, #20]
 800ccb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccba:	695a      	ldr	r2, [r3, #20]
 800ccbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccbe:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ccc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc2:	2280      	movs	r2, #128	; 0x80
 800ccc4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ccc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ccca:	2b03      	cmp	r3, #3
 800cccc:	d149      	bne.n	800cd62 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ccce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd0:	3334      	adds	r3, #52	; 0x34
 800ccd2:	3330      	adds	r3, #48	; 0x30
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7fd fdc7 	bl	800a868 <ld_word>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d140      	bne.n	800cd62 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cce2:	3301      	adds	r3, #1
 800cce4:	4619      	mov	r1, r3
 800cce6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cce8:	f7fe f86e 	bl	800adc8 <move_window>
 800ccec:	4603      	mov	r3, r0
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d137      	bne.n	800cd62 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ccf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ccf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfa:	3334      	adds	r3, #52	; 0x34
 800ccfc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7fd fdb1 	bl	800a868 <ld_word>
 800cd06:	4603      	mov	r3, r0
 800cd08:	461a      	mov	r2, r3
 800cd0a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d127      	bne.n	800cd62 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd14:	3334      	adds	r3, #52	; 0x34
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fd fdbe 	bl	800a898 <ld_dword>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	4a1d      	ldr	r2, [pc, #116]	; (800cd94 <find_volume+0x490>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d11e      	bne.n	800cd62 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd26:	3334      	adds	r3, #52	; 0x34
 800cd28:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7fd fdb3 	bl	800a898 <ld_dword>
 800cd32:	4603      	mov	r3, r0
 800cd34:	4a18      	ldr	r2, [pc, #96]	; (800cd98 <find_volume+0x494>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d113      	bne.n	800cd62 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3c:	3334      	adds	r3, #52	; 0x34
 800cd3e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7fd fda8 	bl	800a898 <ld_dword>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd50:	3334      	adds	r3, #52	; 0x34
 800cd52:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fd fd9e 	bl	800a898 <ld_dword>
 800cd5c:	4602      	mov	r2, r0
 800cd5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd60:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd64:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cd68:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cd6a:	4b0c      	ldr	r3, [pc, #48]	; (800cd9c <find_volume+0x498>)
 800cd6c:	881b      	ldrh	r3, [r3, #0]
 800cd6e:	3301      	adds	r3, #1
 800cd70:	b29a      	uxth	r2, r3
 800cd72:	4b0a      	ldr	r3, [pc, #40]	; (800cd9c <find_volume+0x498>)
 800cd74:	801a      	strh	r2, [r3, #0]
 800cd76:	4b09      	ldr	r3, [pc, #36]	; (800cd9c <find_volume+0x498>)
 800cd78:	881a      	ldrh	r2, [r3, #0]
 800cd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800cd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd80:	4a07      	ldr	r2, [pc, #28]	; (800cda0 <find_volume+0x49c>)
 800cd82:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cd84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cd86:	f7fd ffb7 	bl	800acf8 <clear_lock>
#endif
	return FR_OK;
 800cd8a:	2300      	movs	r3, #0
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3758      	adds	r7, #88	; 0x58
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	41615252 	.word	0x41615252
 800cd98:	61417272 	.word	0x61417272
 800cd9c:	2000071c 	.word	0x2000071c
 800cda0:	20000740 	.word	0x20000740

0800cda4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cdae:	2309      	movs	r3, #9
 800cdb0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d01c      	beq.n	800cdf2 <validate+0x4e>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d018      	beq.n	800cdf2 <validate+0x4e>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d013      	beq.n	800cdf2 <validate+0x4e>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	889a      	ldrh	r2, [r3, #4]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	88db      	ldrh	r3, [r3, #6]
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d10c      	bne.n	800cdf2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	785b      	ldrb	r3, [r3, #1]
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7fd fca4 	bl	800a72c <disk_status>
 800cde4:	4603      	mov	r3, r0
 800cde6:	f003 0301 	and.w	r3, r3, #1
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d101      	bne.n	800cdf2 <validate+0x4e>
			res = FR_OK;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cdf2:	7bfb      	ldrb	r3, [r7, #15]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d102      	bne.n	800cdfe <validate+0x5a>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	e000      	b.n	800ce00 <validate+0x5c>
 800cdfe:	2300      	movs	r3, #0
 800ce00:	683a      	ldr	r2, [r7, #0]
 800ce02:	6013      	str	r3, [r2, #0]
	return res;
 800ce04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3710      	adds	r7, #16
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
	...

0800ce10 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b088      	sub	sp, #32
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	4613      	mov	r3, r2
 800ce1c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ce22:	f107 0310 	add.w	r3, r7, #16
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7ff fcd1 	bl	800c7ce <get_ldnumber>
 800ce2c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	da01      	bge.n	800ce38 <f_mount+0x28>
 800ce34:	230b      	movs	r3, #11
 800ce36:	e02b      	b.n	800ce90 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ce38:	4a17      	ldr	r2, [pc, #92]	; (800ce98 <f_mount+0x88>)
 800ce3a:	69fb      	ldr	r3, [r7, #28]
 800ce3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce40:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d005      	beq.n	800ce54 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ce48:	69b8      	ldr	r0, [r7, #24]
 800ce4a:	f7fd ff55 	bl	800acf8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ce4e:	69bb      	ldr	r3, [r7, #24]
 800ce50:	2200      	movs	r2, #0
 800ce52:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d002      	beq.n	800ce60 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ce60:	68fa      	ldr	r2, [r7, #12]
 800ce62:	490d      	ldr	r1, [pc, #52]	; (800ce98 <f_mount+0x88>)
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d002      	beq.n	800ce76 <f_mount+0x66>
 800ce70:	79fb      	ldrb	r3, [r7, #7]
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	d001      	beq.n	800ce7a <f_mount+0x6a>
 800ce76:	2300      	movs	r3, #0
 800ce78:	e00a      	b.n	800ce90 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ce7a:	f107 010c 	add.w	r1, r7, #12
 800ce7e:	f107 0308 	add.w	r3, r7, #8
 800ce82:	2200      	movs	r2, #0
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7ff fd3d 	bl	800c904 <find_volume>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ce8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3720      	adds	r7, #32
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	20000718 	.word	0x20000718

0800ce9c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b09a      	sub	sp, #104	; 0x68
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	4613      	mov	r3, r2
 800cea8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d101      	bne.n	800ceb4 <f_open+0x18>
 800ceb0:	2309      	movs	r3, #9
 800ceb2:	e1aa      	b.n	800d20a <f_open+0x36e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ceb4:	79fb      	ldrb	r3, [r7, #7]
 800ceb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ceba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cebc:	79fa      	ldrb	r2, [r7, #7]
 800cebe:	f107 0110 	add.w	r1, r7, #16
 800cec2:	f107 0308 	add.w	r3, r7, #8
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7ff fd1c 	bl	800c904 <find_volume>
 800cecc:	4603      	mov	r3, r0
 800cece:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ced2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	f040 818e 	bne.w	800d1f8 <f_open+0x35c>
		dj.obj.fs = fs;
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cee0:	68ba      	ldr	r2, [r7, #8]
 800cee2:	f107 0314 	add.w	r3, r7, #20
 800cee6:	4611      	mov	r1, r2
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7ff fbff 	bl	800c6ec <follow_path>
 800ceee:	4603      	mov	r3, r0
 800cef0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cef4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d11a      	bne.n	800cf32 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cefc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cf00:	b25b      	sxtb	r3, r3
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	da03      	bge.n	800cf0e <f_open+0x72>
				res = FR_INVALID_NAME;
 800cf06:	2306      	movs	r3, #6
 800cf08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cf0c:	e011      	b.n	800cf32 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cf0e:	79fb      	ldrb	r3, [r7, #7]
 800cf10:	f023 0301 	bic.w	r3, r3, #1
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	bf14      	ite	ne
 800cf18:	2301      	movne	r3, #1
 800cf1a:	2300      	moveq	r3, #0
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	461a      	mov	r2, r3
 800cf20:	f107 0314 	add.w	r3, r7, #20
 800cf24:	4611      	mov	r1, r2
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7fd fd9e 	bl	800aa68 <chk_lock>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cf32:	79fb      	ldrb	r3, [r7, #7]
 800cf34:	f003 031c 	and.w	r3, r3, #28
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d07f      	beq.n	800d03c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800cf3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d017      	beq.n	800cf74 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cf44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf48:	2b04      	cmp	r3, #4
 800cf4a:	d10e      	bne.n	800cf6a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cf4c:	f7fd fde8 	bl	800ab20 <enq_lock>
 800cf50:	4603      	mov	r3, r0
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d006      	beq.n	800cf64 <f_open+0xc8>
 800cf56:	f107 0314 	add.w	r3, r7, #20
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7fe ff96 	bl	800be8c <dir_register>
 800cf60:	4603      	mov	r3, r0
 800cf62:	e000      	b.n	800cf66 <f_open+0xca>
 800cf64:	2312      	movs	r3, #18
 800cf66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cf6a:	79fb      	ldrb	r3, [r7, #7]
 800cf6c:	f043 0308 	orr.w	r3, r3, #8
 800cf70:	71fb      	strb	r3, [r7, #7]
 800cf72:	e010      	b.n	800cf96 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cf74:	7ebb      	ldrb	r3, [r7, #26]
 800cf76:	f003 0311 	and.w	r3, r3, #17
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d003      	beq.n	800cf86 <f_open+0xea>
					res = FR_DENIED;
 800cf7e:	2307      	movs	r3, #7
 800cf80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cf84:	e007      	b.n	800cf96 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cf86:	79fb      	ldrb	r3, [r7, #7]
 800cf88:	f003 0304 	and.w	r3, r3, #4
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d002      	beq.n	800cf96 <f_open+0xfa>
 800cf90:	2308      	movs	r3, #8
 800cf92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cf96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d168      	bne.n	800d070 <f_open+0x1d4>
 800cf9e:	79fb      	ldrb	r3, [r7, #7]
 800cfa0:	f003 0308 	and.w	r3, r3, #8
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d063      	beq.n	800d070 <f_open+0x1d4>
				dw = GET_FATTIME();
 800cfa8:	f7fd fa32 	bl	800a410 <get_fattime>
 800cfac:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cfae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfb0:	330e      	adds	r3, #14
 800cfb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7fd fcad 	bl	800a914 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cfba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfbc:	3316      	adds	r3, #22
 800cfbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7fd fca7 	bl	800a914 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cfc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfc8:	330b      	adds	r3, #11
 800cfca:	2220      	movs	r2, #32
 800cfcc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfd2:	4611      	mov	r1, r2
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f7fe fbc8 	bl	800b76a <ld_clust>
 800cfda:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7fe fbe0 	bl	800b7a8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cfe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfea:	331c      	adds	r3, #28
 800cfec:	2100      	movs	r1, #0
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7fd fc90 	bl	800a914 <st_dword>
					fs->wflag = 1;
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	2201      	movs	r2, #1
 800cff8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d037      	beq.n	800d070 <f_open+0x1d4>
						dw = fs->winsect;
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d004:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800d006:	f107 0314 	add.w	r3, r7, #20
 800d00a:	2200      	movs	r2, #0
 800d00c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d00e:	4618      	mov	r0, r3
 800d010:	f7fe f927 	bl	800b262 <remove_chain>
 800d014:	4603      	mov	r3, r0
 800d016:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d01a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d126      	bne.n	800d070 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d026:	4618      	mov	r0, r3
 800d028:	f7fd fece 	bl	800adc8 <move_window>
 800d02c:	4603      	mov	r3, r0
 800d02e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d036:	3a01      	subs	r2, #1
 800d038:	611a      	str	r2, [r3, #16]
 800d03a:	e019      	b.n	800d070 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d03c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d040:	2b00      	cmp	r3, #0
 800d042:	d115      	bne.n	800d070 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d044:	7ebb      	ldrb	r3, [r7, #26]
 800d046:	f003 0310 	and.w	r3, r3, #16
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d003      	beq.n	800d056 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d04e:	2304      	movs	r3, #4
 800d050:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d054:	e00c      	b.n	800d070 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d056:	79fb      	ldrb	r3, [r7, #7]
 800d058:	f003 0302 	and.w	r3, r3, #2
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d007      	beq.n	800d070 <f_open+0x1d4>
 800d060:	7ebb      	ldrb	r3, [r7, #26]
 800d062:	f003 0301 	and.w	r3, r3, #1
 800d066:	2b00      	cmp	r3, #0
 800d068:	d002      	beq.n	800d070 <f_open+0x1d4>
						res = FR_DENIED;
 800d06a:	2307      	movs	r3, #7
 800d06c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d070:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d074:	2b00      	cmp	r3, #0
 800d076:	d128      	bne.n	800d0ca <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d078:	79fb      	ldrb	r3, [r7, #7]
 800d07a:	f003 0308 	and.w	r3, r3, #8
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d003      	beq.n	800d08a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d082:	79fb      	ldrb	r3, [r7, #7]
 800d084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d088:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d098:	79fb      	ldrb	r3, [r7, #7]
 800d09a:	f023 0301 	bic.w	r3, r3, #1
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	bf14      	ite	ne
 800d0a2:	2301      	movne	r3, #1
 800d0a4:	2300      	moveq	r3, #0
 800d0a6:	b2db      	uxtb	r3, r3
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	f107 0314 	add.w	r3, r7, #20
 800d0ae:	4611      	mov	r1, r2
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7fd fd57 	bl	800ab64 <inc_lock>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	691b      	ldr	r3, [r3, #16]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d102      	bne.n	800d0ca <f_open+0x22e>
 800d0c4:	2302      	movs	r3, #2
 800d0c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d0ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	f040 8092 	bne.w	800d1f8 <f_open+0x35c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0d8:	4611      	mov	r1, r2
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7fe fb45 	bl	800b76a <ld_clust>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0e8:	331c      	adds	r3, #28
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7fd fbd4 	bl	800a898 <ld_dword>
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d0f6:	693a      	ldr	r2, [r7, #16]
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	88da      	ldrh	r2, [r3, #6]
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	79fa      	ldrb	r2, [r7, #7]
 800d108:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2200      	movs	r2, #0
 800d10e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2200      	movs	r2, #0
 800d114:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2200      	movs	r2, #0
 800d11a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	332c      	adds	r3, #44	; 0x2c
 800d120:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d124:	2100      	movs	r1, #0
 800d126:	4618      	mov	r0, r3
 800d128:	f7fd fc41 	bl	800a9ae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d12c:	79fb      	ldrb	r3, [r7, #7]
 800d12e:	f003 0320 	and.w	r3, r3, #32
 800d132:	2b00      	cmp	r3, #0
 800d134:	d060      	beq.n	800d1f8 <f_open+0x35c>
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d05c      	beq.n	800d1f8 <f_open+0x35c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	68da      	ldr	r2, [r3, #12]
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	895b      	ldrh	r3, [r3, #10]
 800d14a:	025b      	lsls	r3, r3, #9
 800d14c:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	689b      	ldr	r3, [r3, #8]
 800d152:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d15a:	e016      	b.n	800d18a <f_open+0x2ee>
					clst = get_fat(&fp->obj, clst);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d160:	4618      	mov	r0, r3
 800d162:	f7fd feec 	bl	800af3e <get_fat>
 800d166:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d168:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d802      	bhi.n	800d174 <f_open+0x2d8>
 800d16e:	2302      	movs	r3, #2
 800d170:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d174:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d17a:	d102      	bne.n	800d182 <f_open+0x2e6>
 800d17c:	2301      	movs	r3, #1
 800d17e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d182:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d186:	1ad3      	subs	r3, r2, r3
 800d188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d18a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d103      	bne.n	800d19a <f_open+0x2fe>
 800d192:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d196:	429a      	cmp	r2, r3
 800d198:	d8e0      	bhi.n	800d15c <f_open+0x2c0>
				}
				fp->clust = clst;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d19e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d1a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d127      	bne.n	800d1f8 <f_open+0x35c>
 800d1a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d022      	beq.n	800d1f8 <f_open+0x35c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7fd fea2 	bl	800af00 <clust2sect>
 800d1bc:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d1be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d103      	bne.n	800d1cc <f_open+0x330>
						res = FR_INT_ERR;
 800d1c4:	2302      	movs	r3, #2
 800d1c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d1ca:	e015      	b.n	800d1f8 <f_open+0x35c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d1cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1ce:	0a5a      	lsrs	r2, r3, #9
 800d1d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1d2:	441a      	add	r2, r3
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	7858      	ldrb	r0, [r3, #1]
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	6a1a      	ldr	r2, [r3, #32]
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	f7fd fae0 	bl	800a7ac <disk_read>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d002      	beq.n	800d1f8 <f_open+0x35c>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d1f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d002      	beq.n	800d206 <f_open+0x36a>
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2200      	movs	r2, #0
 800d204:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d206:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3768      	adds	r7, #104	; 0x68
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}

0800d212 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d212:	b580      	push	{r7, lr}
 800d214:	b08e      	sub	sp, #56	; 0x38
 800d216:	af00      	add	r7, sp, #0
 800d218:	60f8      	str	r0, [r7, #12]
 800d21a:	60b9      	str	r1, [r7, #8]
 800d21c:	607a      	str	r2, [r7, #4]
 800d21e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	2200      	movs	r2, #0
 800d228:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f107 0214 	add.w	r2, r7, #20
 800d230:	4611      	mov	r1, r2
 800d232:	4618      	mov	r0, r3
 800d234:	f7ff fdb6 	bl	800cda4 <validate>
 800d238:	4603      	mov	r3, r0
 800d23a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d23e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d242:	2b00      	cmp	r3, #0
 800d244:	d107      	bne.n	800d256 <f_read+0x44>
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	7d5b      	ldrb	r3, [r3, #21]
 800d24a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d24e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d252:	2b00      	cmp	r3, #0
 800d254:	d002      	beq.n	800d25c <f_read+0x4a>
 800d256:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d25a:	e109      	b.n	800d470 <f_read+0x25e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	7d1b      	ldrb	r3, [r3, #20]
 800d260:	f003 0301 	and.w	r3, r3, #1
 800d264:	2b00      	cmp	r3, #0
 800d266:	d101      	bne.n	800d26c <f_read+0x5a>
 800d268:	2307      	movs	r3, #7
 800d26a:	e101      	b.n	800d470 <f_read+0x25e>
	remain = fp->obj.objsize - fp->fptr;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	68da      	ldr	r2, [r3, #12]
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	699b      	ldr	r3, [r3, #24]
 800d274:	1ad3      	subs	r3, r2, r3
 800d276:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d278:	687a      	ldr	r2, [r7, #4]
 800d27a:	6a3b      	ldr	r3, [r7, #32]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	f240 80f2 	bls.w	800d466 <f_read+0x254>
 800d282:	6a3b      	ldr	r3, [r7, #32]
 800d284:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d286:	e0ee      	b.n	800d466 <f_read+0x254>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	699b      	ldr	r3, [r3, #24]
 800d28c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d290:	2b00      	cmp	r3, #0
 800d292:	f040 80ba 	bne.w	800d40a <f_read+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	699b      	ldr	r3, [r3, #24]
 800d29a:	0a5b      	lsrs	r3, r3, #9
 800d29c:	697a      	ldr	r2, [r7, #20]
 800d29e:	8952      	ldrh	r2, [r2, #10]
 800d2a0:	3a01      	subs	r2, #1
 800d2a2:	4013      	ands	r3, r2
 800d2a4:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d2a6:	69fb      	ldr	r3, [r7, #28]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d123      	bne.n	800d2f4 <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	699b      	ldr	r3, [r3, #24]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d103      	bne.n	800d2bc <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	689b      	ldr	r3, [r3, #8]
 800d2b8:	633b      	str	r3, [r7, #48]	; 0x30
 800d2ba:	e007      	b.n	800d2cc <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d2bc:	68fa      	ldr	r2, [r7, #12]
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	69db      	ldr	r3, [r3, #28]
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	4610      	mov	r0, r2
 800d2c6:	f7fd fe3a 	bl	800af3e <get_fat>
 800d2ca:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d804      	bhi.n	800d2dc <f_read+0xca>
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2202      	movs	r2, #2
 800d2d6:	755a      	strb	r2, [r3, #21]
 800d2d8:	2302      	movs	r3, #2
 800d2da:	e0c9      	b.n	800d470 <f_read+0x25e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2e2:	d104      	bne.n	800d2ee <f_read+0xdc>
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	755a      	strb	r2, [r3, #21]
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	e0c0      	b.n	800d470 <f_read+0x25e>
				fp->clust = clst;				/* Update current cluster */
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2f2:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d2f4:	697a      	ldr	r2, [r7, #20]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	69db      	ldr	r3, [r3, #28]
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	4610      	mov	r0, r2
 800d2fe:	f7fd fdff 	bl	800af00 <clust2sect>
 800d302:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d304:	69bb      	ldr	r3, [r7, #24]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d104      	bne.n	800d314 <f_read+0x102>
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2202      	movs	r2, #2
 800d30e:	755a      	strb	r2, [r3, #21]
 800d310:	2302      	movs	r3, #2
 800d312:	e0ad      	b.n	800d470 <f_read+0x25e>
			sect += csect;
 800d314:	69ba      	ldr	r2, [r7, #24]
 800d316:	69fb      	ldr	r3, [r7, #28]
 800d318:	4413      	add	r3, r2
 800d31a:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	0a5b      	lsrs	r3, r3, #9
 800d320:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d324:	2b00      	cmp	r3, #0
 800d326:	d039      	beq.n	800d39c <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d328:	69fa      	ldr	r2, [r7, #28]
 800d32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32c:	4413      	add	r3, r2
 800d32e:	697a      	ldr	r2, [r7, #20]
 800d330:	8952      	ldrh	r2, [r2, #10]
 800d332:	4293      	cmp	r3, r2
 800d334:	d905      	bls.n	800d342 <f_read+0x130>
					cc = fs->csize - csect;
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	895b      	ldrh	r3, [r3, #10]
 800d33a:	461a      	mov	r2, r3
 800d33c:	69fb      	ldr	r3, [r7, #28]
 800d33e:	1ad3      	subs	r3, r2, r3
 800d340:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	7858      	ldrb	r0, [r3, #1]
 800d346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d348:	69ba      	ldr	r2, [r7, #24]
 800d34a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d34c:	f7fd fa2e 	bl	800a7ac <disk_read>
 800d350:	4603      	mov	r3, r0
 800d352:	2b00      	cmp	r3, #0
 800d354:	d004      	beq.n	800d360 <f_read+0x14e>
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2201      	movs	r2, #1
 800d35a:	755a      	strb	r2, [r3, #21]
 800d35c:	2301      	movs	r3, #1
 800d35e:	e087      	b.n	800d470 <f_read+0x25e>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	7d1b      	ldrb	r3, [r3, #20]
 800d364:	b25b      	sxtb	r3, r3
 800d366:	2b00      	cmp	r3, #0
 800d368:	da14      	bge.n	800d394 <f_read+0x182>
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	6a1a      	ldr	r2, [r3, #32]
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	1ad3      	subs	r3, r2, r3
 800d372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d374:	429a      	cmp	r2, r3
 800d376:	d90d      	bls.n	800d394 <f_read+0x182>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	6a1a      	ldr	r2, [r3, #32]
 800d37c:	69bb      	ldr	r3, [r7, #24]
 800d37e:	1ad3      	subs	r3, r2, r3
 800d380:	025b      	lsls	r3, r3, #9
 800d382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d384:	18d0      	adds	r0, r2, r3
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	332c      	adds	r3, #44	; 0x2c
 800d38a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d38e:	4619      	mov	r1, r3
 800d390:	f7fd faec 	bl	800a96c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d396:	025b      	lsls	r3, r3, #9
 800d398:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d39a:	e050      	b.n	800d43e <f_read+0x22c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6a1b      	ldr	r3, [r3, #32]
 800d3a0:	69ba      	ldr	r2, [r7, #24]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d02e      	beq.n	800d404 <f_read+0x1f2>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	7d1b      	ldrb	r3, [r3, #20]
 800d3aa:	b25b      	sxtb	r3, r3
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	da18      	bge.n	800d3e2 <f_read+0x1d0>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	7858      	ldrb	r0, [r3, #1]
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	6a1a      	ldr	r2, [r3, #32]
 800d3be:	2301      	movs	r3, #1
 800d3c0:	f7fd fa14 	bl	800a7ec <disk_write>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d004      	beq.n	800d3d4 <f_read+0x1c2>
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	755a      	strb	r2, [r3, #21]
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	e04d      	b.n	800d470 <f_read+0x25e>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	7d1b      	ldrb	r3, [r3, #20]
 800d3d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3dc:	b2da      	uxtb	r2, r3
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	7858      	ldrb	r0, [r3, #1]
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	69ba      	ldr	r2, [r7, #24]
 800d3f0:	f7fd f9dc 	bl	800a7ac <disk_read>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d004      	beq.n	800d404 <f_read+0x1f2>
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	755a      	strb	r2, [r3, #21]
 800d400:	2301      	movs	r3, #1
 800d402:	e035      	b.n	800d470 <f_read+0x25e>
			}
#endif
			fp->sect = sect;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	69ba      	ldr	r2, [r7, #24]
 800d408:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	699b      	ldr	r3, [r3, #24]
 800d40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d412:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d416:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d901      	bls.n	800d424 <f_read+0x212>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	699b      	ldr	r3, [r3, #24]
 800d42e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d432:	4413      	add	r3, r2
 800d434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d436:	4619      	mov	r1, r3
 800d438:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d43a:	f7fd fa97 	bl	800a96c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d43e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d442:	4413      	add	r3, r2
 800d444:	627b      	str	r3, [r7, #36]	; 0x24
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	699a      	ldr	r2, [r3, #24]
 800d44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44c:	441a      	add	r2, r3
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	619a      	str	r2, [r3, #24]
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	681a      	ldr	r2, [r3, #0]
 800d456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d458:	441a      	add	r2, r3
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	601a      	str	r2, [r3, #0]
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d462:	1ad3      	subs	r3, r2, r3
 800d464:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	f47f af0d 	bne.w	800d288 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d46e:	2300      	movs	r3, #0
}
 800d470:	4618      	mov	r0, r3
 800d472:	3738      	adds	r7, #56	; 0x38
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b086      	sub	sp, #24
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f107 0208 	add.w	r2, r7, #8
 800d486:	4611      	mov	r1, r2
 800d488:	4618      	mov	r0, r3
 800d48a:	f7ff fc8b 	bl	800cda4 <validate>
 800d48e:	4603      	mov	r3, r0
 800d490:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d492:	7dfb      	ldrb	r3, [r7, #23]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d168      	bne.n	800d56a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	7d1b      	ldrb	r3, [r3, #20]
 800d49c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d062      	beq.n	800d56a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	7d1b      	ldrb	r3, [r3, #20]
 800d4a8:	b25b      	sxtb	r3, r3
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	da15      	bge.n	800d4da <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	7858      	ldrb	r0, [r3, #1]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6a1a      	ldr	r2, [r3, #32]
 800d4bc:	2301      	movs	r3, #1
 800d4be:	f7fd f995 	bl	800a7ec <disk_write>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d001      	beq.n	800d4cc <f_sync+0x54>
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	e04f      	b.n	800d56c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	7d1b      	ldrb	r3, [r3, #20]
 800d4d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4d4:	b2da      	uxtb	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d4da:	f7fc ff99 	bl	800a410 <get_fattime>
 800d4de:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d4e0:	68ba      	ldr	r2, [r7, #8]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	4610      	mov	r0, r2
 800d4ea:	f7fd fc6d 	bl	800adc8 <move_window>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d4f2:	7dfb      	ldrb	r3, [r7, #23]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d138      	bne.n	800d56a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4fc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	330b      	adds	r3, #11
 800d502:	781a      	ldrb	r2, [r3, #0]
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	330b      	adds	r3, #11
 800d508:	f042 0220 	orr.w	r2, r2, #32
 800d50c:	b2d2      	uxtb	r2, r2
 800d50e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6818      	ldr	r0, [r3, #0]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	689b      	ldr	r3, [r3, #8]
 800d518:	461a      	mov	r2, r3
 800d51a:	68f9      	ldr	r1, [r7, #12]
 800d51c:	f7fe f944 	bl	800b7a8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f103 021c 	add.w	r2, r3, #28
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	68db      	ldr	r3, [r3, #12]
 800d52a:	4619      	mov	r1, r3
 800d52c:	4610      	mov	r0, r2
 800d52e:	f7fd f9f1 	bl	800a914 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	3316      	adds	r3, #22
 800d536:	6939      	ldr	r1, [r7, #16]
 800d538:	4618      	mov	r0, r3
 800d53a:	f7fd f9eb 	bl	800a914 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	3312      	adds	r3, #18
 800d542:	2100      	movs	r1, #0
 800d544:	4618      	mov	r0, r3
 800d546:	f7fd f9ca 	bl	800a8de <st_word>
					fs->wflag = 1;
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	2201      	movs	r2, #1
 800d54e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	4618      	mov	r0, r3
 800d554:	f7fd fc66 	bl	800ae24 <sync_fs>
 800d558:	4603      	mov	r3, r0
 800d55a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	7d1b      	ldrb	r3, [r3, #20]
 800d560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d564:	b2da      	uxtb	r2, r3
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d56a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3718      	adds	r7, #24
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b084      	sub	sp, #16
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f7ff ff7b 	bl	800d478 <f_sync>
 800d582:	4603      	mov	r3, r0
 800d584:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d586:	7bfb      	ldrb	r3, [r7, #15]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d118      	bne.n	800d5be <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f107 0208 	add.w	r2, r7, #8
 800d592:	4611      	mov	r1, r2
 800d594:	4618      	mov	r0, r3
 800d596:	f7ff fc05 	bl	800cda4 <validate>
 800d59a:	4603      	mov	r3, r0
 800d59c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d59e:	7bfb      	ldrb	r3, [r7, #15]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d10c      	bne.n	800d5be <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	691b      	ldr	r3, [r3, #16]
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7fd fb69 	bl	800ac80 <dec_lock>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d5b2:	7bfb      	ldrb	r3, [r7, #15]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d102      	bne.n	800d5be <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3710      	adds	r7, #16
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b086      	sub	sp, #24
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d101      	bne.n	800d5dc <f_opendir+0x14>
 800d5d8:	2309      	movs	r3, #9
 800d5da:	e064      	b.n	800d6a6 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800d5e0:	f107 010c 	add.w	r1, r7, #12
 800d5e4:	463b      	mov	r3, r7
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f7ff f98b 	bl	800c904 <find_volume>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d5f2:	7dfb      	ldrb	r3, [r7, #23]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d14f      	bne.n	800d698 <f_opendir+0xd0>
		obj->fs = fs;
 800d5f8:	68fa      	ldr	r2, [r7, #12]
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	4619      	mov	r1, r3
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f7ff f872 	bl	800c6ec <follow_path>
 800d608:	4603      	mov	r3, r0
 800d60a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800d60c:	7dfb      	ldrb	r3, [r7, #23]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d13d      	bne.n	800d68e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d618:	b25b      	sxtb	r3, r3
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	db12      	blt.n	800d644 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	799b      	ldrb	r3, [r3, #6]
 800d622:	f003 0310 	and.w	r3, r3, #16
 800d626:	2b00      	cmp	r3, #0
 800d628:	d00a      	beq.n	800d640 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d62a:	68fa      	ldr	r2, [r7, #12]
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6a1b      	ldr	r3, [r3, #32]
 800d630:	4619      	mov	r1, r3
 800d632:	4610      	mov	r0, r2
 800d634:	f7fe f899 	bl	800b76a <ld_clust>
 800d638:	4602      	mov	r2, r0
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	609a      	str	r2, [r3, #8]
 800d63e:	e001      	b.n	800d644 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800d640:	2305      	movs	r3, #5
 800d642:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800d644:	7dfb      	ldrb	r3, [r7, #23]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d121      	bne.n	800d68e <f_opendir+0xc6>
				obj->id = fs->id;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	88da      	ldrh	r2, [r3, #6]
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d652:	2100      	movs	r1, #0
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f7fd ff01 	bl	800b45c <dir_sdi>
 800d65a:	4603      	mov	r3, r0
 800d65c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800d65e:	7dfb      	ldrb	r3, [r7, #23]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d114      	bne.n	800d68e <f_opendir+0xc6>
					if (obj->sclust) {
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	689b      	ldr	r3, [r3, #8]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d00d      	beq.n	800d688 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d66c:	2100      	movs	r1, #0
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f7fd fa78 	bl	800ab64 <inc_lock>
 800d674:	4602      	mov	r2, r0
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	691b      	ldr	r3, [r3, #16]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d105      	bne.n	800d68e <f_opendir+0xc6>
 800d682:	2312      	movs	r3, #18
 800d684:	75fb      	strb	r3, [r7, #23]
 800d686:	e002      	b.n	800d68e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	2200      	movs	r2, #0
 800d68c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d68e:	7dfb      	ldrb	r3, [r7, #23]
 800d690:	2b04      	cmp	r3, #4
 800d692:	d101      	bne.n	800d698 <f_opendir+0xd0>
 800d694:	2305      	movs	r3, #5
 800d696:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d698:	7dfb      	ldrb	r3, [r7, #23]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d002      	beq.n	800d6a4 <f_opendir+0xdc>
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d6a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3718      	adds	r7, #24
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b084      	sub	sp, #16
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f107 0208 	add.w	r2, r7, #8
 800d6bc:	4611      	mov	r1, r2
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7ff fb70 	bl	800cda4 <validate>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d6c8:	7bfb      	ldrb	r3, [r7, #15]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d110      	bne.n	800d6f0 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	691b      	ldr	r3, [r3, #16]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d006      	beq.n	800d6e4 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	691b      	ldr	r3, [r3, #16]
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7fd fad0 	bl	800ac80 <dec_lock>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800d6e4:	7bfb      	ldrb	r3, [r7, #15]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d102      	bne.n	800d6f0 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800d6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3710      	adds	r7, #16
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}

0800d6fa <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d6fa:	b580      	push	{r7, lr}
 800d6fc:	b084      	sub	sp, #16
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	6078      	str	r0, [r7, #4]
 800d702:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f107 0208 	add.w	r2, r7, #8
 800d70a:	4611      	mov	r1, r2
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7ff fb49 	bl	800cda4 <validate>
 800d712:	4603      	mov	r3, r0
 800d714:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d716:	7bfb      	ldrb	r3, [r7, #15]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d126      	bne.n	800d76a <f_readdir+0x70>
		if (!fno) {
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d106      	bne.n	800d730 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d722:	2100      	movs	r1, #0
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f7fd fe99 	bl	800b45c <dir_sdi>
 800d72a:	4603      	mov	r3, r0
 800d72c:	73fb      	strb	r3, [r7, #15]
 800d72e:	e01c      	b.n	800d76a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800d730:	2100      	movs	r1, #0
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f7fe fa43 	bl	800bbbe <dir_read>
 800d738:	4603      	mov	r3, r0
 800d73a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800d73c:	7bfb      	ldrb	r3, [r7, #15]
 800d73e:	2b04      	cmp	r3, #4
 800d740:	d101      	bne.n	800d746 <f_readdir+0x4c>
 800d742:	2300      	movs	r3, #0
 800d744:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800d746:	7bfb      	ldrb	r3, [r7, #15]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10e      	bne.n	800d76a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d74c:	6839      	ldr	r1, [r7, #0]
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f7fe fc94 	bl	800c07c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d754:	2100      	movs	r1, #0
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f7fd fefb 	bl	800b552 <dir_next>
 800d75c:	4603      	mov	r3, r0
 800d75e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d760:	7bfb      	ldrb	r3, [r7, #15]
 800d762:	2b04      	cmp	r3, #4
 800d764:	d101      	bne.n	800d76a <f_readdir+0x70>
 800d766:	2300      	movs	r3, #0
 800d768:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800d76a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3710      	adds	r7, #16
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}

0800d774 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800d77e:	6839      	ldr	r1, [r7, #0]
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f7ff ffba 	bl	800d6fa <f_readdir>
 800d786:	4603      	mov	r3, r0
 800d788:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800d78a:	7bfb      	ldrb	r3, [r7, #15]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d114      	bne.n	800d7ba <f_findnext+0x46>
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d011      	beq.n	800d7ba <f_findnext+0x46>
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	7d9b      	ldrb	r3, [r3, #22]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d00d      	beq.n	800d7ba <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	f103 0116 	add.w	r1, r3, #22
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f7fe fd6a 	bl	800c284 <pattern_matching>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d100      	bne.n	800d7b8 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 800d7b6:	e7e2      	b.n	800d77e <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800d7b8:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 800d7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3710      	adds	r7, #16
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b086      	sub	sp, #24
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	607a      	str	r2, [r7, #4]
 800d7d0:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	683a      	ldr	r2, [r7, #0]
 800d7d6:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 800d7d8:	6879      	ldr	r1, [r7, #4]
 800d7da:	68f8      	ldr	r0, [r7, #12]
 800d7dc:	f7ff fef4 	bl	800d5c8 <f_opendir>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d7e4:	7dfb      	ldrb	r3, [r7, #23]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d105      	bne.n	800d7f6 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 800d7ea:	68b9      	ldr	r1, [r7, #8]
 800d7ec:	68f8      	ldr	r0, [r7, #12]
 800d7ee:	f7ff ffc1 	bl	800d774 <f_findnext>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 800d7f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3718      	adds	r7, #24
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d800:	b480      	push	{r7}
 800d802:	b087      	sub	sp, #28
 800d804:	af00      	add	r7, sp, #0
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	4613      	mov	r3, r2
 800d80c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d80e:	2301      	movs	r3, #1
 800d810:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d812:	2300      	movs	r3, #0
 800d814:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d816:	4b1f      	ldr	r3, [pc, #124]	; (800d894 <FATFS_LinkDriverEx+0x94>)
 800d818:	7a5b      	ldrb	r3, [r3, #9]
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d131      	bne.n	800d884 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d820:	4b1c      	ldr	r3, [pc, #112]	; (800d894 <FATFS_LinkDriverEx+0x94>)
 800d822:	7a5b      	ldrb	r3, [r3, #9]
 800d824:	b2db      	uxtb	r3, r3
 800d826:	461a      	mov	r2, r3
 800d828:	4b1a      	ldr	r3, [pc, #104]	; (800d894 <FATFS_LinkDriverEx+0x94>)
 800d82a:	2100      	movs	r1, #0
 800d82c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d82e:	4b19      	ldr	r3, [pc, #100]	; (800d894 <FATFS_LinkDriverEx+0x94>)
 800d830:	7a5b      	ldrb	r3, [r3, #9]
 800d832:	b2db      	uxtb	r3, r3
 800d834:	4a17      	ldr	r2, [pc, #92]	; (800d894 <FATFS_LinkDriverEx+0x94>)
 800d836:	009b      	lsls	r3, r3, #2
 800d838:	4413      	add	r3, r2
 800d83a:	68fa      	ldr	r2, [r7, #12]
 800d83c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d83e:	4b15      	ldr	r3, [pc, #84]	; (800d894 <FATFS_LinkDriverEx+0x94>)
 800d840:	7a5b      	ldrb	r3, [r3, #9]
 800d842:	b2db      	uxtb	r3, r3
 800d844:	461a      	mov	r2, r3
 800d846:	4b13      	ldr	r3, [pc, #76]	; (800d894 <FATFS_LinkDriverEx+0x94>)
 800d848:	4413      	add	r3, r2
 800d84a:	79fa      	ldrb	r2, [r7, #7]
 800d84c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d84e:	4b11      	ldr	r3, [pc, #68]	; (800d894 <FATFS_LinkDriverEx+0x94>)
 800d850:	7a5b      	ldrb	r3, [r3, #9]
 800d852:	b2db      	uxtb	r3, r3
 800d854:	1c5a      	adds	r2, r3, #1
 800d856:	b2d1      	uxtb	r1, r2
 800d858:	4a0e      	ldr	r2, [pc, #56]	; (800d894 <FATFS_LinkDriverEx+0x94>)
 800d85a:	7251      	strb	r1, [r2, #9]
 800d85c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d85e:	7dbb      	ldrb	r3, [r7, #22]
 800d860:	3330      	adds	r3, #48	; 0x30
 800d862:	b2da      	uxtb	r2, r3
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	3301      	adds	r3, #1
 800d86c:	223a      	movs	r2, #58	; 0x3a
 800d86e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	3302      	adds	r3, #2
 800d874:	222f      	movs	r2, #47	; 0x2f
 800d876:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	3303      	adds	r3, #3
 800d87c:	2200      	movs	r2, #0
 800d87e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d880:	2300      	movs	r3, #0
 800d882:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d884:	7dfb      	ldrb	r3, [r7, #23]
}
 800d886:	4618      	mov	r0, r3
 800d888:	371c      	adds	r7, #28
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr
 800d892:	bf00      	nop
 800d894:	20000940 	.word	0x20000940

0800d898 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	6839      	ldr	r1, [r7, #0]
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f7ff ffaa 	bl	800d800 <FATFS_LinkDriverEx>
 800d8ac:	4603      	mov	r3, r0
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3708      	adds	r7, #8
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
	...

0800d8b8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	4603      	mov	r3, r0
 800d8c0:	6039      	str	r1, [r7, #0]
 800d8c2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d8c4:	88fb      	ldrh	r3, [r7, #6]
 800d8c6:	2b7f      	cmp	r3, #127	; 0x7f
 800d8c8:	d802      	bhi.n	800d8d0 <ff_convert+0x18>
		c = chr;
 800d8ca:	88fb      	ldrh	r3, [r7, #6]
 800d8cc:	81fb      	strh	r3, [r7, #14]
 800d8ce:	e025      	b.n	800d91c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d00b      	beq.n	800d8ee <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d8d6:	88fb      	ldrh	r3, [r7, #6]
 800d8d8:	2bff      	cmp	r3, #255	; 0xff
 800d8da:	d805      	bhi.n	800d8e8 <ff_convert+0x30>
 800d8dc:	88fb      	ldrh	r3, [r7, #6]
 800d8de:	3b80      	subs	r3, #128	; 0x80
 800d8e0:	4a12      	ldr	r2, [pc, #72]	; (800d92c <ff_convert+0x74>)
 800d8e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8e6:	e000      	b.n	800d8ea <ff_convert+0x32>
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	81fb      	strh	r3, [r7, #14]
 800d8ec:	e016      	b.n	800d91c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	81fb      	strh	r3, [r7, #14]
 800d8f2:	e009      	b.n	800d908 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d8f4:	89fb      	ldrh	r3, [r7, #14]
 800d8f6:	4a0d      	ldr	r2, [pc, #52]	; (800d92c <ff_convert+0x74>)
 800d8f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8fc:	88fa      	ldrh	r2, [r7, #6]
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d006      	beq.n	800d910 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d902:	89fb      	ldrh	r3, [r7, #14]
 800d904:	3301      	adds	r3, #1
 800d906:	81fb      	strh	r3, [r7, #14]
 800d908:	89fb      	ldrh	r3, [r7, #14]
 800d90a:	2b7f      	cmp	r3, #127	; 0x7f
 800d90c:	d9f2      	bls.n	800d8f4 <ff_convert+0x3c>
 800d90e:	e000      	b.n	800d912 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d910:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d912:	89fb      	ldrh	r3, [r7, #14]
 800d914:	3380      	adds	r3, #128	; 0x80
 800d916:	b29b      	uxth	r3, r3
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d91c:	89fb      	ldrh	r3, [r7, #14]
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3714      	adds	r7, #20
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr
 800d92a:	bf00      	nop
 800d92c:	0800dbbc 	.word	0x0800dbbc

0800d930 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d930:	b480      	push	{r7}
 800d932:	b087      	sub	sp, #28
 800d934:	af00      	add	r7, sp, #0
 800d936:	4603      	mov	r3, r0
 800d938:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d93a:	88fb      	ldrh	r3, [r7, #6]
 800d93c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d940:	d201      	bcs.n	800d946 <ff_wtoupper+0x16>
 800d942:	4b3e      	ldr	r3, [pc, #248]	; (800da3c <ff_wtoupper+0x10c>)
 800d944:	e000      	b.n	800d948 <ff_wtoupper+0x18>
 800d946:	4b3e      	ldr	r3, [pc, #248]	; (800da40 <ff_wtoupper+0x110>)
 800d948:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	1c9a      	adds	r2, r3, #2
 800d94e:	617a      	str	r2, [r7, #20]
 800d950:	881b      	ldrh	r3, [r3, #0]
 800d952:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d954:	8a7b      	ldrh	r3, [r7, #18]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d068      	beq.n	800da2c <ff_wtoupper+0xfc>
 800d95a:	88fa      	ldrh	r2, [r7, #6]
 800d95c:	8a7b      	ldrh	r3, [r7, #18]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d364      	bcc.n	800da2c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	1c9a      	adds	r2, r3, #2
 800d966:	617a      	str	r2, [r7, #20]
 800d968:	881b      	ldrh	r3, [r3, #0]
 800d96a:	823b      	strh	r3, [r7, #16]
 800d96c:	8a3b      	ldrh	r3, [r7, #16]
 800d96e:	0a1b      	lsrs	r3, r3, #8
 800d970:	81fb      	strh	r3, [r7, #14]
 800d972:	8a3b      	ldrh	r3, [r7, #16]
 800d974:	b2db      	uxtb	r3, r3
 800d976:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d978:	88fa      	ldrh	r2, [r7, #6]
 800d97a:	8a79      	ldrh	r1, [r7, #18]
 800d97c:	8a3b      	ldrh	r3, [r7, #16]
 800d97e:	440b      	add	r3, r1
 800d980:	429a      	cmp	r2, r3
 800d982:	da49      	bge.n	800da18 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d984:	89fb      	ldrh	r3, [r7, #14]
 800d986:	2b08      	cmp	r3, #8
 800d988:	d84f      	bhi.n	800da2a <ff_wtoupper+0xfa>
 800d98a:	a201      	add	r2, pc, #4	; (adr r2, 800d990 <ff_wtoupper+0x60>)
 800d98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d990:	0800d9b5 	.word	0x0800d9b5
 800d994:	0800d9c7 	.word	0x0800d9c7
 800d998:	0800d9dd 	.word	0x0800d9dd
 800d99c:	0800d9e5 	.word	0x0800d9e5
 800d9a0:	0800d9ed 	.word	0x0800d9ed
 800d9a4:	0800d9f5 	.word	0x0800d9f5
 800d9a8:	0800d9fd 	.word	0x0800d9fd
 800d9ac:	0800da05 	.word	0x0800da05
 800d9b0:	0800da0d 	.word	0x0800da0d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d9b4:	88fa      	ldrh	r2, [r7, #6]
 800d9b6:	8a7b      	ldrh	r3, [r7, #18]
 800d9b8:	1ad3      	subs	r3, r2, r3
 800d9ba:	005b      	lsls	r3, r3, #1
 800d9bc:	697a      	ldr	r2, [r7, #20]
 800d9be:	4413      	add	r3, r2
 800d9c0:	881b      	ldrh	r3, [r3, #0]
 800d9c2:	80fb      	strh	r3, [r7, #6]
 800d9c4:	e027      	b.n	800da16 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d9c6:	88fa      	ldrh	r2, [r7, #6]
 800d9c8:	8a7b      	ldrh	r3, [r7, #18]
 800d9ca:	1ad3      	subs	r3, r2, r3
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	f003 0301 	and.w	r3, r3, #1
 800d9d2:	b29b      	uxth	r3, r3
 800d9d4:	88fa      	ldrh	r2, [r7, #6]
 800d9d6:	1ad3      	subs	r3, r2, r3
 800d9d8:	80fb      	strh	r3, [r7, #6]
 800d9da:	e01c      	b.n	800da16 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d9dc:	88fb      	ldrh	r3, [r7, #6]
 800d9de:	3b10      	subs	r3, #16
 800d9e0:	80fb      	strh	r3, [r7, #6]
 800d9e2:	e018      	b.n	800da16 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d9e4:	88fb      	ldrh	r3, [r7, #6]
 800d9e6:	3b20      	subs	r3, #32
 800d9e8:	80fb      	strh	r3, [r7, #6]
 800d9ea:	e014      	b.n	800da16 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d9ec:	88fb      	ldrh	r3, [r7, #6]
 800d9ee:	3b30      	subs	r3, #48	; 0x30
 800d9f0:	80fb      	strh	r3, [r7, #6]
 800d9f2:	e010      	b.n	800da16 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d9f4:	88fb      	ldrh	r3, [r7, #6]
 800d9f6:	3b1a      	subs	r3, #26
 800d9f8:	80fb      	strh	r3, [r7, #6]
 800d9fa:	e00c      	b.n	800da16 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d9fc:	88fb      	ldrh	r3, [r7, #6]
 800d9fe:	3308      	adds	r3, #8
 800da00:	80fb      	strh	r3, [r7, #6]
 800da02:	e008      	b.n	800da16 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800da04:	88fb      	ldrh	r3, [r7, #6]
 800da06:	3b50      	subs	r3, #80	; 0x50
 800da08:	80fb      	strh	r3, [r7, #6]
 800da0a:	e004      	b.n	800da16 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800da0c:	88fb      	ldrh	r3, [r7, #6]
 800da0e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800da12:	80fb      	strh	r3, [r7, #6]
 800da14:	bf00      	nop
			}
			break;
 800da16:	e008      	b.n	800da2a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800da18:	89fb      	ldrh	r3, [r7, #14]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d195      	bne.n	800d94a <ff_wtoupper+0x1a>
 800da1e:	8a3b      	ldrh	r3, [r7, #16]
 800da20:	005b      	lsls	r3, r3, #1
 800da22:	697a      	ldr	r2, [r7, #20]
 800da24:	4413      	add	r3, r2
 800da26:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800da28:	e78f      	b.n	800d94a <ff_wtoupper+0x1a>
			break;
 800da2a:	bf00      	nop
	}

	return chr;
 800da2c:	88fb      	ldrh	r3, [r7, #6]
}
 800da2e:	4618      	mov	r0, r3
 800da30:	371c      	adds	r7, #28
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop
 800da3c:	0800dcbc 	.word	0x0800dcbc
 800da40:	0800deb0 	.word	0x0800deb0

0800da44 <memset>:
 800da44:	4402      	add	r2, r0
 800da46:	4603      	mov	r3, r0
 800da48:	4293      	cmp	r3, r2
 800da4a:	d100      	bne.n	800da4e <memset+0xa>
 800da4c:	4770      	bx	lr
 800da4e:	f803 1b01 	strb.w	r1, [r3], #1
 800da52:	e7f9      	b.n	800da48 <memset+0x4>

0800da54 <__libc_init_array>:
 800da54:	b570      	push	{r4, r5, r6, lr}
 800da56:	4d0d      	ldr	r5, [pc, #52]	; (800da8c <__libc_init_array+0x38>)
 800da58:	4c0d      	ldr	r4, [pc, #52]	; (800da90 <__libc_init_array+0x3c>)
 800da5a:	1b64      	subs	r4, r4, r5
 800da5c:	10a4      	asrs	r4, r4, #2
 800da5e:	2600      	movs	r6, #0
 800da60:	42a6      	cmp	r6, r4
 800da62:	d109      	bne.n	800da78 <__libc_init_array+0x24>
 800da64:	4d0b      	ldr	r5, [pc, #44]	; (800da94 <__libc_init_array+0x40>)
 800da66:	4c0c      	ldr	r4, [pc, #48]	; (800da98 <__libc_init_array+0x44>)
 800da68:	f000 fa80 	bl	800df6c <_init>
 800da6c:	1b64      	subs	r4, r4, r5
 800da6e:	10a4      	asrs	r4, r4, #2
 800da70:	2600      	movs	r6, #0
 800da72:	42a6      	cmp	r6, r4
 800da74:	d105      	bne.n	800da82 <__libc_init_array+0x2e>
 800da76:	bd70      	pop	{r4, r5, r6, pc}
 800da78:	f855 3b04 	ldr.w	r3, [r5], #4
 800da7c:	4798      	blx	r3
 800da7e:	3601      	adds	r6, #1
 800da80:	e7ee      	b.n	800da60 <__libc_init_array+0xc>
 800da82:	f855 3b04 	ldr.w	r3, [r5], #4
 800da86:	4798      	blx	r3
 800da88:	3601      	adds	r6, #1
 800da8a:	e7f2      	b.n	800da72 <__libc_init_array+0x1e>
 800da8c:	0800df84 	.word	0x0800df84
 800da90:	0800df84 	.word	0x0800df84
 800da94:	0800df84 	.word	0x0800df84
 800da98:	0800df88 	.word	0x0800df88
 800da9c:	63656c45 	.word	0x63656c45
 800daa0:	736f7274 	.word	0x736f7274
 800daa4:	6c656574 	.word	0x6c656574
 800daa8:	6961445f 	.word	0x6961445f
 800daac:	415f7973 	.word	0x415f7973
 800dab0:	6f696475 	.word	0x6f696475
 800dab4:	6e69622e 	.word	0x6e69622e
	...
 800dac0:	3c3a2a22 	.word	0x3c3a2a22
 800dac4:	7f7c3f3e 	.word	0x7f7c3f3e
 800dac8:	00000000 	.word	0x00000000
 800dacc:	3d3b2c2b 	.word	0x3d3b2c2b
 800dad0:	00005d5b 	.word	0x00005d5b
 800dad4:	4d90feeb 	.word	0x4d90feeb
 800dad8:	534f4453 	.word	0x534f4453
 800dadc:	00302e35 	.word	0x00302e35
 800dae0:	4e204f4e 	.word	0x4e204f4e
 800dae4:	20454d41 	.word	0x20454d41
 800dae8:	46202020 	.word	0x46202020
 800daec:	32335441 	.word	0x32335441
 800daf0:	00202020 	.word	0x00202020
 800daf4:	4e204f4e 	.word	0x4e204f4e
 800daf8:	20454d41 	.word	0x20454d41
 800dafc:	46202020 	.word	0x46202020
 800db00:	20205441 	.word	0x20205441
 800db04:	00202020 	.word	0x00202020

0800db08 <D1CorePrescTable>:
 800db08:	00000000 04030201 04030201 09080706     ................

0800db18 <SD_Driver>:
 800db18:	0800a5a1 0800a5dd 0800a5f9 0800a63b     ............;...
 800db28:	0800a67d                                }...

0800db2c <ExCvt>:
 800db2c:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
 800db3c:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
 800db4c:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
 800db5c:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
 800db6c:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
 800db7c:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
 800db8c:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
 800db9c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0800dbac <LfnOfs>:
 800dbac:	07050301 12100e09 1c181614 0000001e     ................

0800dbbc <Tbl>:
 800dbbc:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
 800dbcc:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
 800dbdc:	00e600c9 00f400c6 00f200f6 00f900fb     ................
 800dbec:	00d600ff 00f800dc 00d800a3 019200d7     ................
 800dbfc:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
 800dc0c:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
 800dc1c:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
 800dc2c:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
 800dc3c:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
 800dc4c:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
 800dc5c:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
 800dc6c:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
 800dc7c:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
 800dc8c:	00da00de 00d900db 00dd00fd 00b400af     ................
 800dc9c:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
 800dcac:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0800dcbc <cvt1.1>:
 800dcbc:	031a0061 031700e0 030700f8 000100ff     a...............
 800dccc:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
 800dcdc:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
 800dcec:	01840182 01860184 01870187 018a0189     ................
 800dcfc:	018b018b 018e018d 0190018f 01910191     ................
 800dd0c:	01940193 019601f6 01980197 023d0198     ..............=.
 800dd1c:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
 800dd2c:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
 800dd3c:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
 800dd4c:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
 800dd5c:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
 800dd6c:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
 800dd7c:	01ca01cb 011001cd 000101dd 01de018e     ................
 800dd8c:	01f30112 01f10003 01f401f4 012801f8     ..............(.
 800dd9c:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
 800ddac:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
 800ddbc:	01810040 02550186 018a0189 018f0258     @.....U.....X...
 800ddcc:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
 800dddc:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
 800ddec:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
 800ddfc:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
 800de0c:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
 800de1c:	01a90282 02850284 02870286 024401ae     ..............D.
 800de2c:	01b201b1 028d0245 028f028e 02910290     ....E...........
 800de3c:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
 800de4c:	03880386 038a0389 031103b1 000203c2     ................
 800de5c:	03a303a3 030803c4 000303cc 038e038c     ................
 800de6c:	03d8038f 03f20118 03f9000a 03f403f3     ................
 800de7c:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
 800de8c:	04500320 04600710 048a0122 04c10136      .P...`."...6...
 800de9c:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
 800deac:	00000000                                ....

0800deb0 <cvt2.0>:
 800deb0:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
 800dec0:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
 800ded0:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
 800dee0:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
 800def0:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
 800df00:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
 800df10:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
 800df20:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
 800df30:	1fec0001 00011ff2 214e1ffc 21320001     ..........N!..2!
 800df40:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
 800df50:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
 800df60:	2d000164 ff410826 0000031a              d..-&.A.....

0800df6c <_init>:
 800df6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df6e:	bf00      	nop
 800df70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df72:	bc08      	pop	{r3}
 800df74:	469e      	mov	lr, r3
 800df76:	4770      	bx	lr

0800df78 <_fini>:
 800df78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df7a:	bf00      	nop
 800df7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df7e:	bc08      	pop	{r3}
 800df80:	469e      	mov	lr, r3
 800df82:	4770      	bx	lr
