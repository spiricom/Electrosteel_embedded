
Electrobass_Daisy_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007f5c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  080081f4  080081f4  00020014  2**0
                  CONTENTS
  3 .exidx        00000000  080081f4  080081f4  00020014  2**0
                  CONTENTS
  4 .ARM.attributes 0000002e  080081f4  080081f4  00020014  2**0
                  CONTENTS, READONLY
  5 .init_array   00000004  080081f4  080081f4  000181f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080081f8  080081f8  000181f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000014  20000000  080081fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000008e0  20000014  08008210  00020014  2**2
                  ALLOC
  9 .dtcmram_bss  00000000  200008f4  200008f4  00020042  2**0
                  CONTENTS
 10 .sram1_bss    0007a120  24000000  24000000  00030000  2**5
                  ALLOC
 11 .userflash    00000020  38800000  38800000  00030000  2**5
                  ALLOC
 12 .sdram_bss    00000000  c0000000  c0000000  00020042  2**0
                  CONTENTS
 13 .qspiflash_text 00000000  90000000  90000000  00020042  2**0
                  CONTENTS
 14 .qspiflash_data 00000000  90000000  90000000  00020042  2**0
                  CONTENTS
 15 .qspiflash_bss 0007a120  90000000  90000000  00030000  2**5
                  ALLOC
 16 .heap         00000000  200008f4  200008f4  00020042  2**0
                  CONTENTS
 17 .reserved_for_stack 00000000  200008f4  200008f4  00020042  2**0
                  CONTENTS
 18 .debug_info   0001ba19  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 000033f5  00000000  00000000  0003ba5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00000fe0  00000000  00000000  0003ee50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000fd8  00000000  00000000  0003fe30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00038d95  00000000  00000000  00040e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   0001c27c  00000000  00000000  00079b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    0015b4fc  00000000  00000000  00095e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      00000050  00000000  00000000  001f1315  2**0
                  CONTENTS, READONLY
 26 .debug_frame  00002bc0  00000000  00000000  001f1368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_loc    0000fe73  00000000  00000000  001f3f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000014 	.word	0x20000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080081f4 	.word	0x080081f4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000018 	.word	0x20000018
 80002d4:	080081f4 	.word	0x080081f4

080002d8 <MX_GPIO_Init>:
     PA5   ------> COMP_DAC12_group
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80002d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80002dc:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	2400      	movs	r4, #0
 80002e0:	9409      	str	r4, [sp, #36]	; 0x24
 80002e2:	940a      	str	r4, [sp, #40]	; 0x28
 80002e4:	940b      	str	r4, [sp, #44]	; 0x2c
 80002e6:	940c      	str	r4, [sp, #48]	; 0x30
 80002e8:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002ea:	4b7f      	ldr	r3, [pc, #508]	; (80004e8 <MX_GPIO_Init+0x210>)
 80002ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80002f0:	f042 0210 	orr.w	r2, r2, #16
 80002f4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80002f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80002fc:	f002 0210 	and.w	r2, r2, #16
 8000300:	9200      	str	r2, [sp, #0]
 8000302:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000304:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000308:	f042 0202 	orr.w	r2, r2, #2
 800030c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000310:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000314:	f002 0202 	and.w	r2, r2, #2
 8000318:	9201      	str	r2, [sp, #4]
 800031a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800031c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000324:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000328:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800032c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000330:	9202      	str	r2, [sp, #8]
 8000332:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000334:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000338:	f042 0208 	orr.w	r2, r2, #8
 800033c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000340:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000344:	f002 0208 	and.w	r2, r2, #8
 8000348:	9203      	str	r2, [sp, #12]
 800034a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000350:	f042 0204 	orr.w	r2, r2, #4
 8000354:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000358:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800035c:	f002 0204 	and.w	r2, r2, #4
 8000360:	9204      	str	r2, [sp, #16]
 8000362:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000364:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000368:	f042 0201 	orr.w	r2, r2, #1
 800036c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000370:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000374:	f002 0201 	and.w	r2, r2, #1
 8000378:	9205      	str	r2, [sp, #20]
 800037a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800037c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000384:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000388:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800038c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000390:	9206      	str	r2, [sp, #24]
 8000392:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000394:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000398:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800039c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80003a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80003a4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80003a8:	9207      	str	r2, [sp, #28]
 80003aa:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80003b0:	f042 0220 	orr.w	r2, r2, #32
 80003b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80003b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003bc:	f003 0320 	and.w	r3, r3, #32
 80003c0:	9308      	str	r3, [sp, #32]
 80003c2:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80003c4:	4f49      	ldr	r7, [pc, #292]	; (80004ec <MX_GPIO_Init+0x214>)
 80003c6:	4622      	mov	r2, r4
 80003c8:	2180      	movs	r1, #128	; 0x80
 80003ca:	4638      	mov	r0, r7
 80003cc:	f001 fa54 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE1 PE0
                           PE4 PE5 PE6 PE13
                           PE8 PE9 PE11 PE14
                           PE7 PE10 PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 80003d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003d4:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_13
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003d6:	2503      	movs	r5, #3
 80003d8:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003da:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003dc:	a909      	add	r1, sp, #36	; 0x24
 80003de:	4844      	ldr	r0, [pc, #272]	; (80004f0 <MX_GPIO_Init+0x218>)
 80003e0:	f001 f892 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB9
                           PB7 PB6 PB2 PB13
                           PB1 PB0 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_9
 80003e4:	f642 73f7 	movw	r3, #12279	; 0x2ff7
 80003e8:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_2|GPIO_PIN_13
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003ea:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ee:	4e41      	ldr	r6, [pc, #260]	; (80004f4 <MX_GPIO_Init+0x21c>)
 80003f0:	a909      	add	r1, sp, #36	; 0x24
 80003f2:	4630      	mov	r0, r6
 80003f4:	f001 f888 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG12
                           PG11 PG10 PG9 PG8
                           PG7 PG5 PG4 PG3
                           PG2 PG1 PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12
 80003f8:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80003fc:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003fe:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000402:	a909      	add	r1, sp, #36	; 0x24
 8000404:	483c      	ldr	r0, [pc, #240]	; (80004f8 <MX_GPIO_Init+0x220>)
 8000406:	f001 f87f 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD1 PD4 PD3 PD15
                           PD14 PD13 PD12 PD11
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 800040a:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800040e:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_15
                          |GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_11
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000410:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000412:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000414:	a909      	add	r1, sp, #36	; 0x24
 8000416:	4839      	ldr	r0, [pc, #228]	; (80004fc <MX_GPIO_Init+0x224>)
 8000418:	f001 f876 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA9 PA8 PA0 PA4
                           PA2 PA6 PA5 PA3
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 800041c:	f649 73fd 	movw	r3, #40957	; 0x9ffd
 8000420:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000422:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000424:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000426:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 800050c <MX_GPIO_Init+0x234>
 800042a:	a909      	add	r1, sp, #36	; 0x24
 800042c:	4640      	mov	r0, r8
 800042e:	f001 f86b 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI7 PI6 PI5 PI3
                           PI2 PI8 PI9 PI4
                           PI1 PI10 PI11 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
 8000432:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000436:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4
                          |GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000438:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800043c:	a909      	add	r1, sp, #36	; 0x24
 800043e:	4830      	ldr	r0, [pc, #192]	; (8000500 <MX_GPIO_Init+0x228>)
 8000440:	f001 f862 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 8000444:	f24e 037f 	movw	r3, #57471	; 0xe07f
 8000448:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800044a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800044e:	a909      	add	r1, sp, #36	; 0x24
 8000450:	4638      	mov	r0, r7
 8000452:	f001 f859 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH2
                           PH3 PH4 PH5 PH12
                           PH11 PH10 PH6 PH8
                           PH9 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
 8000456:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800045a:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800045c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000460:	a909      	add	r1, sp, #36	; 0x24
 8000462:	4828      	ldr	r0, [pc, #160]	; (8000504 <MX_GPIO_Init+0x22c>)
 8000464:	f001 f850 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF2 PF1 PF3
                           PF4 PF5 PF13 PF12
                           PF15 PF11 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 8000468:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800046c:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800046e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000472:	a909      	add	r1, sp, #36	; 0x24
 8000474:	4824      	ldr	r0, [pc, #144]	; (8000508 <MX_GPIO_Init+0x230>)
 8000476:	f001 f847 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800047a:	2380      	movs	r3, #128	; 0x80
 800047c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	f04f 0901 	mov.w	r9, #1
 8000482:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000488:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800048a:	a909      	add	r1, sp, #36	; 0x24
 800048c:	4638      	mov	r0, r7
 800048e:	f001 f83b 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000492:	2502      	movs	r5, #2
 8000494:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000496:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000498:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049c:	a909      	add	r1, sp, #36	; 0x24
 800049e:	4640      	mov	r0, r8
 80004a0:	f001 f832 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80004a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80004aa:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80004ae:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b2:	a909      	add	r1, sp, #36	; 0x24
 80004b4:	4630      	mov	r0, r6
 80004b6:	f001 f827 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80004ba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80004be:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c0:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 80004c6:	230c      	movs	r3, #12
 80004c8:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ca:	a909      	add	r1, sp, #36	; 0x24
 80004cc:	4630      	mov	r0, r6
 80004ce:	f001 f81b 	bl	8001508 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004d2:	4622      	mov	r2, r4
 80004d4:	4621      	mov	r1, r4
 80004d6:	2028      	movs	r0, #40	; 0x28
 80004d8:	f000 ff9a 	bl	8001410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004dc:	2028      	movs	r0, #40	; 0x28
 80004de:	f000 ffcd 	bl	800147c <HAL_NVIC_EnableIRQ>

}
 80004e2:	b00f      	add	sp, #60	; 0x3c
 80004e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80004e8:	58024400 	.word	0x58024400
 80004ec:	58020800 	.word	0x58020800
 80004f0:	58021000 	.word	0x58021000
 80004f4:	58020400 	.word	0x58020400
 80004f8:	58021800 	.word	0x58021800
 80004fc:	58020c00 	.word	0x58020c00
 8000500:	58022000 	.word	0x58022000
 8000504:	58021c00 	.word	0x58021c00
 8000508:	58021400 	.word	0x58021400
 800050c:	58020000 	.word	0x58020000

08000510 <FlushECC>:

#define APPLICATION_ADDRESS (uint32_t)0x24000000
uint8_t memory_already_mapped = 0;

void FlushECC(void *ptr, int bytes)
{
 8000510:	b084      	sub	sp, #16

	uint32_t addr = (uint32_t)ptr;
	/* Check if accessing AXI SRAM => 64-bit words*/
	if(addr >= 0x24000000 && addr < 0x24080000){
 8000512:	f100 435c 	add.w	r3, r0, #3690987520	; 0xdc000000
 8000516:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800051a:	d210      	bcs.n	800053e <FlushECC+0x2e>
		volatile uint64_t temp;
		volatile uint64_t* flush_ptr = (uint64_t*) (addr & 0xFFFFFFF8);
 800051c:	f020 0307 	bic.w	r3, r0, #7
		uint64_t *end_ptr = (uint64_t*) ((addr+bytes) & 0xFFFFFFF8);
 8000520:	1842      	adds	r2, r0, r1
 8000522:	f022 0207 	bic.w	r2, r2, #7

		do{
			temp = *flush_ptr;
 8000526:	e9d3 0100 	ldrd	r0, r1, [r3]
 800052a:	e9cd 0102 	strd	r0, r1, [sp, #8]
			*flush_ptr = temp;
 800052e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000532:	e8e3 0102 	strd	r0, r1, [r3], #8
			flush_ptr++;
		}while(flush_ptr != end_ptr);
 8000536:	429a      	cmp	r2, r3
 8000538:	d1f5      	bne.n	8000526 <FlushECC+0x16>
			temp = *flush_ptr;
			*flush_ptr = temp;
			flush_ptr++;
		}while(flush_ptr != end_ptr);
	}
}
 800053a:	b004      	add	sp, #16
 800053c:	4770      	bx	lr
		volatile uint32_t* flush_ptr = (uint32_t*) (addr & 0xFFFFFFFC);
 800053e:	f020 0303 	bic.w	r3, r0, #3
		uint32_t *end_ptr = (uint32_t*) ((addr+bytes) & 0xFFFFFFFC);
 8000542:	1842      	adds	r2, r0, r1
 8000544:	f022 0203 	bic.w	r2, r2, #3
			temp = *flush_ptr;
 8000548:	6819      	ldr	r1, [r3, #0]
 800054a:	9101      	str	r1, [sp, #4]
			*flush_ptr = temp;
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	f843 1b04 	str.w	r1, [r3], #4
		}while(flush_ptr != end_ptr);
 8000552:	429a      	cmp	r2, r3
 8000554:	d1f8      	bne.n	8000548 <FlushECC+0x38>
 8000556:	e7f0      	b.n	800053a <FlushECC+0x2a>

08000558 <BSP_SD_IsDetected>:


uint8_t BSP_SD_IsDetected(void)
{
 8000558:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 800055a:	2301      	movs	r3, #1
 800055c:	f88d 3007 	strb.w	r3, [sp, #7]
  //if (BSP_PlatformIsDetected() == 0x0)
  {
    //status = SD_NOT_PRESENT;
  }

  return status;
 8000560:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8000564:	b002      	add	sp, #8
 8000566:	4770      	bx	lr

08000568 <qspi_error>:

/* USER CODE BEGIN 4 */


void qspi_error(void)
{
 8000568:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800056a:	2201      	movs	r2, #1
 800056c:	2180      	movs	r1, #128	; 0x80
 800056e:	4802      	ldr	r0, [pc, #8]	; (8000578 <qspi_error+0x10>)
 8000570:	f001 f982 	bl	8001878 <HAL_GPIO_WritePin>
}
 8000574:	bd08      	pop	{r3, pc}
 8000576:	bf00      	nop
 8000578:	58020800 	.word	0x58020800

0800057c <AutopollingMemReady>:

int AutopollingMemReady(int timeout)
{
 800057c:	b500      	push	{lr}
 800057e:	b095      	sub	sp, #84	; 0x54
 8000580:	4603      	mov	r3, r0
	 int ok = 0;
	QSPI_CommandTypeDef     s_command;
	    QSPI_AutoPollingTypeDef s_config;

	    /* Configure automatic polling mode to wait for memory ready */
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000582:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000586:	920c      	str	r2, [sp, #48]	; 0x30
	    s_command.Instruction       = READ_STATUS_REG_CMD;
 8000588:	2205      	movs	r2, #5
 800058a:	9206      	str	r2, [sp, #24]
	    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800058c:	2200      	movs	r2, #0
 800058e:	920d      	str	r2, [sp, #52]	; 0x34
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000590:	920e      	str	r2, [sp, #56]	; 0x38
	    s_command.DataMode          = QSPI_DATA_1_LINE;
 8000592:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000596:	910f      	str	r1, [sp, #60]	; 0x3c
	    s_command.DummyCycles       = 0;
 8000598:	920b      	str	r2, [sp, #44]	; 0x2c
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800059a:	9211      	str	r2, [sp, #68]	; 0x44
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800059c:	9212      	str	r2, [sp, #72]	; 0x48
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800059e:	9213      	str	r2, [sp, #76]	; 0x4c

	    s_config.Match         = 0;
 80005a0:	9200      	str	r2, [sp, #0]
	    s_config.MatchMode     = QSPI_MATCH_MODE_AND;
 80005a2:	9204      	str	r2, [sp, #16]
	    s_config.Interval      = 0x10;
 80005a4:	2210      	movs	r2, #16
 80005a6:	9202      	str	r2, [sp, #8]
	    s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80005a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80005ac:	9205      	str	r2, [sp, #20]
	    s_config.Mask          = IS25LP064A_SR_WIP;
 80005ae:	2201      	movs	r2, #1
 80005b0:	9201      	str	r2, [sp, #4]
	    //s_config.Mask            = 0;
	    s_config.StatusBytesSize = 1;
 80005b2:	9203      	str	r2, [sp, #12]

	    if(HAL_QSPI_AutoPolling(&hqspi, &s_command, &s_config, timeout)
 80005b4:	466a      	mov	r2, sp
 80005b6:	a906      	add	r1, sp, #24
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <AutopollingMemReady+0x54>)
 80005ba:	f001 fb85 	bl	8001cc8 <HAL_QSPI_AutoPolling>
 80005be:	b918      	cbnz	r0, 80005c8 <AutopollingMemReady+0x4c>
	    }

	    ok= 1;
	    return ok;

}
 80005c0:	2001      	movs	r0, #1
 80005c2:	b015      	add	sp, #84	; 0x54
 80005c4:	f85d fb04 	ldr.w	pc, [sp], #4
	    	qspi_error();
 80005c8:	f7ff ffce 	bl	8000568 <qspi_error>
 80005cc:	e7f8      	b.n	80005c0 <AutopollingMemReady+0x44>
 80005ce:	bf00      	nop
 80005d0:	2000018c 	.word	0x2000018c

080005d4 <qspi_WriteEnable>:

int qspi_WriteEnable()
{
 80005d4:	b500      	push	{lr}
 80005d6:	b095      	sub	sp, #84	; 0x54
	 int ok = 0;
	QSPI_CommandTypeDef     s_command;
	    QSPI_AutoPollingTypeDef s_config;

	    /* Enable write operations */
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80005d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005dc:	930c      	str	r3, [sp, #48]	; 0x30
	    s_command.Instruction       = WRITE_ENABLE_CMD;
 80005de:	2306      	movs	r3, #6
 80005e0:	9306      	str	r3, [sp, #24]
	    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	930d      	str	r3, [sp, #52]	; 0x34
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80005e6:	930e      	str	r3, [sp, #56]	; 0x38
	    s_command.DataMode          = QSPI_DATA_NONE;
 80005e8:	930f      	str	r3, [sp, #60]	; 0x3c
	    s_command.DummyCycles       = 0;
 80005ea:	930b      	str	r3, [sp, #44]	; 0x2c
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80005ec:	9311      	str	r3, [sp, #68]	; 0x44
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80005ee:	9312      	str	r3, [sp, #72]	; 0x48
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80005f0:	9313      	str	r3, [sp, #76]	; 0x4c

	    //RETURN_IF_ERR(CheckProgramMemory());

	    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80005f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80005f6:	a906      	add	r1, sp, #24
 80005f8:	4813      	ldr	r0, [pc, #76]	; (8000648 <qspi_WriteEnable+0x74>)
 80005fa:	f001 faad 	bl	8001b58 <HAL_QSPI_Command>
 80005fe:	b9e0      	cbnz	r0, 800063a <qspi_WriteEnable+0x66>
	    }

	    /* Configure automatic polling mode to wait for write enabling */
	    //        s_config.Match           = IS25LP080D_SR_WREN | (IS25LP080D_SR_WREN << 8);
	    //        s_config.Mask            = IS25LP080D_SR_WREN | (IS25LP080D_SR_WREN << 8);
	    s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8000600:	2300      	movs	r3, #0
 8000602:	9304      	str	r3, [sp, #16]
	    s_config.Match           = IS25LP064A_SR_WREN;
 8000604:	2302      	movs	r3, #2
 8000606:	9300      	str	r3, [sp, #0]
	    s_config.Mask            = IS25LP064A_SR_WREN;
 8000608:	9301      	str	r3, [sp, #4]
	    s_config.Interval        = 0x10;
 800060a:	2310      	movs	r3, #16
 800060c:	9302      	str	r3, [sp, #8]
	    s_config.StatusBytesSize = 1;
 800060e:	2301      	movs	r3, #1
 8000610:	9303      	str	r3, [sp, #12]
	    s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000616:	9305      	str	r3, [sp, #20]

	    s_command.Instruction = READ_STATUS_REG_CMD;
 8000618:	2305      	movs	r3, #5
 800061a:	9306      	str	r3, [sp, #24]
	    s_command.DataMode    = QSPI_DATA_1_LINE;
 800061c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000620:	930f      	str	r3, [sp, #60]	; 0x3c

	    if(HAL_QSPI_AutoPolling(
 8000622:	f241 3388 	movw	r3, #5000	; 0x1388
 8000626:	466a      	mov	r2, sp
 8000628:	a906      	add	r1, sp, #24
 800062a:	4807      	ldr	r0, [pc, #28]	; (8000648 <qspi_WriteEnable+0x74>)
 800062c:	f001 fb4c 	bl	8001cc8 <HAL_QSPI_AutoPolling>
 8000630:	b930      	cbnz	r0, 8000640 <qspi_WriteEnable+0x6c>
	    }

	    ok= 1;
	    return ok;

}
 8000632:	2001      	movs	r0, #1
 8000634:	b015      	add	sp, #84	; 0x54
 8000636:	f85d fb04 	ldr.w	pc, [sp], #4
	    	qspi_error();
 800063a:	f7ff ff95 	bl	8000568 <qspi_error>
 800063e:	e7df      	b.n	8000600 <qspi_WriteEnable+0x2c>
	    	qspi_error();
 8000640:	f7ff ff92 	bl	8000568 <qspi_error>
 8000644:	e7f5      	b.n	8000632 <qspi_WriteEnable+0x5e>
 8000646:	bf00      	nop
 8000648:	2000018c 	.word	0x2000018c

0800064c <qspi_reset_memory>:

void qspi_reset_memory(void)
{
 800064c:	b500      	push	{lr}
 800064e:	b08f      	sub	sp, #60	; 0x3c
	//reset memory
		QSPI_CommandTypeDef s_command;

		    /* Initialize the reset enable command */
		    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000654:	9306      	str	r3, [sp, #24]
		    s_command.Instruction       = RESET_ENABLE_CMD;
 8000656:	2366      	movs	r3, #102	; 0x66
 8000658:	9300      	str	r3, [sp, #0]
		    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800065a:	2300      	movs	r3, #0
 800065c:	9307      	str	r3, [sp, #28]
		    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800065e:	9308      	str	r3, [sp, #32]
		    s_command.DataMode          = QSPI_DATA_NONE;
 8000660:	9309      	str	r3, [sp, #36]	; 0x24
		    s_command.DummyCycles       = 0;
 8000662:	9305      	str	r3, [sp, #20]
		    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000664:	930b      	str	r3, [sp, #44]	; 0x2c
		    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000666:	930c      	str	r3, [sp, #48]	; 0x30
		    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000668:	930d      	str	r3, [sp, #52]	; 0x34

		    /* Send the command */
		    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800066a:	f241 3288 	movw	r2, #5000	; 0x1388
 800066e:	4669      	mov	r1, sp
 8000670:	480f      	ldr	r0, [pc, #60]	; (80006b0 <qspi_reset_memory+0x64>)
 8000672:	f001 fa71 	bl	8001b58 <HAL_QSPI_Command>
 8000676:	b988      	cbnz	r0, 800069c <qspi_reset_memory+0x50>
		    {
		    	qspi_error();
		    }

		    /* Send the reset memory command */
		    s_command.Instruction = RESET_MEMORY_CMD;
 8000678:	2399      	movs	r3, #153	; 0x99
 800067a:	9300      	str	r3, [sp, #0]
		    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800067c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000680:	4669      	mov	r1, sp
 8000682:	480b      	ldr	r0, [pc, #44]	; (80006b0 <qspi_reset_memory+0x64>)
 8000684:	f001 fa68 	bl	8001b58 <HAL_QSPI_Command>
 8000688:	b958      	cbnz	r0, 80006a2 <qspi_reset_memory+0x56>
		    	qspi_error();
		    }


		    /* Configure automatic polling mode to wait the memory is ready */
		    if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800068a:	f241 3088 	movw	r0, #5000	; 0x1388
 800068e:	f7ff ff75 	bl	800057c <AutopollingMemReady>
 8000692:	2801      	cmp	r0, #1
 8000694:	d108      	bne.n	80006a8 <qspi_reset_memory+0x5c>
		       != 1)
		    {
		    	qspi_error();
		    }

}
 8000696:	b00f      	add	sp, #60	; 0x3c
 8000698:	f85d fb04 	ldr.w	pc, [sp], #4
		    	qspi_error();
 800069c:	f7ff ff64 	bl	8000568 <qspi_error>
 80006a0:	e7ea      	b.n	8000678 <qspi_reset_memory+0x2c>
		    	qspi_error();
 80006a2:	f7ff ff61 	bl	8000568 <qspi_error>
 80006a6:	e7f0      	b.n	800068a <qspi_reset_memory+0x3e>
		    	qspi_error();
 80006a8:	f7ff ff5e 	bl	8000568 <qspi_error>
}
 80006ac:	e7f3      	b.n	8000696 <qspi_reset_memory+0x4a>
 80006ae:	bf00      	nop
 80006b0:	2000018c 	.word	0x2000018c

080006b4 <qspi_dummy_cycles_config>:

void qspi_dummy_cycles_config()
{
 80006b4:	b500      	push	{lr}
 80006b6:	b091      	sub	sp, #68	; 0x44
	 QSPI_CommandTypeDef s_command;
	    uint16_t            reg     = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	f8ad 3006 	strh.w	r3, [sp, #6]
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80006be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006c2:	9208      	str	r2, [sp, #32]
	    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80006c4:	9309      	str	r3, [sp, #36]	; 0x24
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80006c6:	930a      	str	r3, [sp, #40]	; 0x28
	    s_command.DataMode          = QSPI_DATA_1_LINE;
 80006c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006cc:	920b      	str	r2, [sp, #44]	; 0x2c
	    s_command.DummyCycles       = 0;
 80006ce:	9307      	str	r3, [sp, #28]
	    s_command.NbData            = 1;
 80006d0:	2201      	movs	r2, #1
 80006d2:	920c      	str	r2, [sp, #48]	; 0x30
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80006d4:	930d      	str	r3, [sp, #52]	; 0x34
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80006d6:	930e      	str	r3, [sp, #56]	; 0x38
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80006d8:	930f      	str	r3, [sp, #60]	; 0x3c
	           // Dummy Cycles: (Config 3, bits 1 0)
	           // Drive Strength (50%, bits 1 1 1)
	           // Byte to write: 0b11110000 (0xF0)
	           // TODO: Probably expand Burst to maximum if that works out.

	           reg = 0xF0;
 80006da:	23f0      	movs	r3, #240	; 0xf0
 80006dc:	f8ad 3006 	strh.w	r3, [sp, #6]
	           /* Update volatile configuration register (with new dummy cycles) */
	             s_command.Instruction = WRITE_READ_PARAM_REG_CMD;
 80006e0:	23c0      	movs	r3, #192	; 0xc0
 80006e2:	9302      	str	r3, [sp, #8]
	             /* Configure the write volatile configuration register command */
	             if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80006e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80006e8:	a902      	add	r1, sp, #8
 80006ea:	480f      	ldr	r0, [pc, #60]	; (8000728 <qspi_dummy_cycles_config+0x74>)
 80006ec:	f001 fa34 	bl	8001b58 <HAL_QSPI_Command>
 80006f0:	b980      	cbnz	r0, 8000714 <qspi_dummy_cycles_config+0x60>
	             {
	            	 qspi_error();
	             }

	             /* Transmission of the data */
	             if(HAL_QSPI_Transmit(
 80006f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80006f6:	f10d 0106 	add.w	r1, sp, #6
 80006fa:	480b      	ldr	r0, [pc, #44]	; (8000728 <qspi_dummy_cycles_config+0x74>)
 80006fc:	f001 fa7b 	bl	8001bf6 <HAL_QSPI_Transmit>
 8000700:	b958      	cbnz	r0, 800071a <qspi_dummy_cycles_config+0x66>
	             {
	            	 qspi_error();
	             }

	             /* Configure automatic polling mode to wait the memory is ready */
	             if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000702:	f241 3088 	movw	r0, #5000	; 0x1388
 8000706:	f7ff ff39 	bl	800057c <AutopollingMemReady>
 800070a:	2801      	cmp	r0, #1
 800070c:	d108      	bne.n	8000720 <qspi_dummy_cycles_config+0x6c>
	                != 1)
	             {
	            	 qspi_error();
	             }
}
 800070e:	b011      	add	sp, #68	; 0x44
 8000710:	f85d fb04 	ldr.w	pc, [sp], #4
	            	 qspi_error();
 8000714:	f7ff ff28 	bl	8000568 <qspi_error>
 8000718:	e7eb      	b.n	80006f2 <qspi_dummy_cycles_config+0x3e>
	            	 qspi_error();
 800071a:	f7ff ff25 	bl	8000568 <qspi_error>
 800071e:	e7f0      	b.n	8000702 <qspi_dummy_cycles_config+0x4e>
	            	 qspi_error();
 8000720:	f7ff ff22 	bl	8000568 <qspi_error>
}
 8000724:	e7f3      	b.n	800070e <qspi_dummy_cycles_config+0x5a>
 8000726:	bf00      	nop
 8000728:	2000018c 	.word	0x2000018c

0800072c <qspi_quad_enable>:

void qspi_quad_enable()
{
 800072c:	b500      	push	{lr}
 800072e:	b097      	sub	sp, #92	; 0x5c
	 QSPI_CommandTypeDef     s_command;
	    QSPI_AutoPollingTypeDef s_config;
	    uint8_t                 reg = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	f88d 3007 	strb.w	r3, [sp, #7]

	    /* Enable write operations */
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800073a:	920e      	str	r2, [sp, #56]	; 0x38
	    s_command.Instruction       = WRITE_STATUS_REG_CMD;
 800073c:	2201      	movs	r2, #1
 800073e:	9208      	str	r2, [sp, #32]
	    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000740:	930f      	str	r3, [sp, #60]	; 0x3c
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000742:	9310      	str	r3, [sp, #64]	; 0x40
	    s_command.DataMode          = QSPI_DATA_1_LINE;
 8000744:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000748:	9111      	str	r1, [sp, #68]	; 0x44
	    s_command.DummyCycles       = 0;
 800074a:	930d      	str	r3, [sp, #52]	; 0x34
	    s_command.NbData            = 1;
 800074c:	9212      	str	r2, [sp, #72]	; 0x48
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800074e:	9313      	str	r3, [sp, #76]	; 0x4c
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000750:	9314      	str	r3, [sp, #80]	; 0x50
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000752:	9315      	str	r3, [sp, #84]	; 0x54

	    /* Enable write operations */
	    if(qspi_WriteEnable() != 1)
 8000754:	f7ff ff3e 	bl	80005d4 <qspi_WriteEnable>
 8000758:	2801      	cmp	r0, #1
 800075a:	d133      	bne.n	80007c4 <qspi_quad_enable+0x98>
	    {
	    	qspi_error();
	    }

	    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800075c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000760:	a908      	add	r1, sp, #32
 8000762:	4820      	ldr	r0, [pc, #128]	; (80007e4 <qspi_quad_enable+0xb8>)
 8000764:	f001 f9f8 	bl	8001b58 <HAL_QSPI_Command>
 8000768:	bb78      	cbnz	r0, 80007ca <qspi_quad_enable+0x9e>

	    //    reg = 0;
	    //    MODIFY_REG(reg,
	    //        0xF0,
	    //        (IS25LP08D_SR_QE));
	    reg = IS25LP064A_SR_QE; // Set QE bit  to 1
 800076a:	2340      	movs	r3, #64	; 0x40
 800076c:	f88d 3007 	strb.w	r3, [sp, #7]
	    /* Transmission of the data */
	    if(HAL_QSPI_Transmit(
 8000770:	f241 3288 	movw	r2, #5000	; 0x1388
 8000774:	f10d 0107 	add.w	r1, sp, #7
 8000778:	481a      	ldr	r0, [pc, #104]	; (80007e4 <qspi_quad_enable+0xb8>)
 800077a:	f001 fa3c 	bl	8001bf6 <HAL_QSPI_Transmit>
 800077e:	bb38      	cbnz	r0, 80007d0 <qspi_quad_enable+0xa4>
	    /* Configure automatic polling mode to wait for write enabling */
	    //    s_config.Match           = IS25LP08D_SR_WREN | (IS25LP08D_SR_WREN << 8);
	    //    s_config.Mask            = IS25LP08D_SR_WREN | (IS25LP08D_SR_WREN << 8);
	    //    s_config.MatchMode       = QSPI_MATCH_MODE_AND;
	    //    s_config.StatusBytesSize = 2;
	    s_config.Match           = IS25LP064A_SR_QE;
 8000780:	2340      	movs	r3, #64	; 0x40
 8000782:	9302      	str	r3, [sp, #8]
	    s_config.Mask            = IS25LP064A_SR_QE;
 8000784:	9303      	str	r3, [sp, #12]
	    s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8000786:	2300      	movs	r3, #0
 8000788:	9306      	str	r3, [sp, #24]
	    s_config.StatusBytesSize = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	9305      	str	r3, [sp, #20]

	    s_config.Interval      = 0x10;
 800078e:	2310      	movs	r3, #16
 8000790:	9304      	str	r3, [sp, #16]
	    s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000792:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000796:	9307      	str	r3, [sp, #28]

	    s_command.Instruction = READ_STATUS_REG_CMD;
 8000798:	2305      	movs	r3, #5
 800079a:	9308      	str	r3, [sp, #32]
	    s_command.DataMode    = QSPI_DATA_1_LINE;
 800079c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007a0:	9311      	str	r3, [sp, #68]	; 0x44

	    if(HAL_QSPI_AutoPolling(
 80007a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80007a6:	aa02      	add	r2, sp, #8
 80007a8:	a908      	add	r1, sp, #32
 80007aa:	480e      	ldr	r0, [pc, #56]	; (80007e4 <qspi_quad_enable+0xb8>)
 80007ac:	f001 fa8c 	bl	8001cc8 <HAL_QSPI_AutoPolling>
 80007b0:	b988      	cbnz	r0, 80007d6 <qspi_quad_enable+0xaa>
	    {
	    	qspi_error();
	    }

	    /* Configure automatic polling mode to wait the memory is ready */
	    if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80007b2:	f241 3088 	movw	r0, #5000	; 0x1388
 80007b6:	f7ff fee1 	bl	800057c <AutopollingMemReady>
 80007ba:	2801      	cmp	r0, #1
 80007bc:	d10e      	bne.n	80007dc <qspi_quad_enable+0xb0>
	       != 1)
	    {
	    	qspi_error();
	    }

}
 80007be:	b017      	add	sp, #92	; 0x5c
 80007c0:	f85d fb04 	ldr.w	pc, [sp], #4
	    	qspi_error();
 80007c4:	f7ff fed0 	bl	8000568 <qspi_error>
 80007c8:	e7c8      	b.n	800075c <qspi_quad_enable+0x30>
	    	qspi_error();
 80007ca:	f7ff fecd 	bl	8000568 <qspi_error>
 80007ce:	e7cc      	b.n	800076a <qspi_quad_enable+0x3e>
	    	qspi_error();
 80007d0:	f7ff feca 	bl	8000568 <qspi_error>
 80007d4:	e7d4      	b.n	8000780 <qspi_quad_enable+0x54>
	    	qspi_error();
 80007d6:	f7ff fec7 	bl	8000568 <qspi_error>
 80007da:	e7ea      	b.n	80007b2 <qspi_quad_enable+0x86>
	    	qspi_error();
 80007dc:	f7ff fec4 	bl	8000568 <qspi_error>
}
 80007e0:	e7ed      	b.n	80007be <qspi_quad_enable+0x92>
 80007e2:	bf00      	nop
 80007e4:	2000018c 	.word	0x2000018c

080007e8 <qspi_enable_memory_mapped>:

void qspi_enable_memory_mapped()
{
 80007e8:	b500      	push	{lr}
 80007ea:	b091      	sub	sp, #68	; 0x44
	   QSPI_CommandTypeDef      s_command;
	    QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

	    /* Configure the command for the read instruction */
	    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80007ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007f0:	9308      	str	r3, [sp, #32]
	    s_command.Instruction     = QUAD_INOUT_FAST_READ_CMD;
 80007f2:	23eb      	movs	r3, #235	; 0xeb
 80007f4:	9302      	str	r3, [sp, #8]
	    s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 80007f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007fa:	9309      	str	r3, [sp, #36]	; 0x24
	    s_command.AddressSize     = QSPI_ADDRESS_24_BITS;
 80007fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000800:	9305      	str	r3, [sp, #20]
	    //    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
	    //s_command.DummyCycles       = IS25LP080D_DUMMY_CYCLES_READ_QUAD;
	    s_command.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 8000802:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000806:	930a      	str	r3, [sp, #40]	; 0x28
	    s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8000808:	2300      	movs	r3, #0
 800080a:	9306      	str	r3, [sp, #24]
	    s_command.AlternateBytes     = 0x000000A0;
 800080c:	22a0      	movs	r2, #160	; 0xa0
 800080e:	9204      	str	r2, [sp, #16]
	    s_command.DummyCycles        = 6;
 8000810:	2206      	movs	r2, #6
 8000812:	9207      	str	r2, [sp, #28]
	    s_command.DdrMode            = QSPI_DDR_MODE_DISABLE;
 8000814:	930d      	str	r3, [sp, #52]	; 0x34
	    s_command.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 8000816:	930e      	str	r3, [sp, #56]	; 0x38
	    //s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
	    s_command.SIOOMode = QSPI_SIOO_INST_ONLY_FIRST_CMD;
 8000818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800081c:	920f      	str	r2, [sp, #60]	; 0x3c
	    s_command.DataMode = QSPI_DATA_4_LINES;
 800081e:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000822:	920b      	str	r2, [sp, #44]	; 0x2c

	    /* Configure the memory mapped mode */
	    s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8000824:	9301      	str	r3, [sp, #4]
	    s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8000826:	9300      	str	r3, [sp, #0]
	    uint32_t qspiresult = HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg);
 8000828:	466a      	mov	r2, sp
 800082a:	a902      	add	r1, sp, #8
 800082c:	4804      	ldr	r0, [pc, #16]	; (8000840 <qspi_enable_memory_mapped+0x58>)
 800082e:	f001 faa6 	bl	8001d7e <HAL_QSPI_MemoryMapped>
	    if(qspiresult
 8000832:	b910      	cbnz	r0, 800083a <qspi_enable_memory_mapped+0x52>
	       != HAL_OK)
	    {
	    	qspi_error();
	    }
}
 8000834:	b011      	add	sp, #68	; 0x44
 8000836:	f85d fb04 	ldr.w	pc, [sp], #4
	    	qspi_error();
 800083a:	f7ff fe95 	bl	8000568 <qspi_error>
}
 800083e:	e7f9      	b.n	8000834 <qspi_enable_memory_mapped+0x4c>
 8000840:	2000018c 	.word	0x2000018c

08000844 <qspi_initialize>:

void qspi_initialize(uint8_t mode)
{
 8000844:	b538      	push	{r3, r4, r5, lr}
 8000846:	4604      	mov	r4, r0
	HAL_QSPI_DeInit(&hqspi);
 8000848:	4d09      	ldr	r5, [pc, #36]	; (8000870 <qspi_initialize+0x2c>)
 800084a:	4628      	mov	r0, r5
 800084c:	f001 f973 	bl	8001b36 <HAL_QSPI_DeInit>
	HAL_QSPI_Init(&hqspi);
 8000850:	4628      	mov	r0, r5
 8000852:	f001 fae3 	bl	8001e1c <HAL_QSPI_Init>

	qspi_reset_memory();
 8000856:	f7ff fef9 	bl	800064c <qspi_reset_memory>
	qspi_dummy_cycles_config();
 800085a:	f7ff ff2b 	bl	80006b4 <qspi_dummy_cycles_config>
	qspi_quad_enable();
 800085e:	f7ff ff65 	bl	800072c <qspi_quad_enable>
	if (mode == MEMORY_MAPPED)
 8000862:	2c01      	cmp	r4, #1
 8000864:	d000      	beq.n	8000868 <qspi_initialize+0x24>
	{
		qspi_enable_memory_mapped();
	}
}
 8000866:	bd38      	pop	{r3, r4, r5, pc}
		qspi_enable_memory_mapped();
 8000868:	f7ff ffbe 	bl	80007e8 <qspi_enable_memory_mapped>
}
 800086c:	e7fb      	b.n	8000866 <qspi_initialize+0x22>
 800086e:	bf00      	nop
 8000870:	2000018c 	.word	0x2000018c

08000874 <qspi_SetMode>:

void qspi_SetMode(uint8_t mode)
{
	if (mode == INDIRECT_POLLING)
 8000874:	b130      	cbz	r0, 8000884 <qspi_SetMode+0x10>
{
 8000876:	b508      	push	{r3, lr}
	{
		//qspi_initialize(INDIRECT_POLLING);
	}
	else if (mode == MEMORY_MAPPED)
 8000878:	2801      	cmp	r0, #1
 800087a:	d000      	beq.n	800087e <qspi_SetMode+0xa>
	{
		qspi_enable_memory_mapped();
	}

}
 800087c:	bd08      	pop	{r3, pc}
		qspi_enable_memory_mapped();
 800087e:	f7ff ffb3 	bl	80007e8 <qspi_enable_memory_mapped>
}
 8000882:	e7fb      	b.n	800087c <qspi_SetMode+0x8>
 8000884:	4770      	bx	lr
	...

08000888 <qpsi_EraseSector>:

int qpsi_EraseSector(uint32_t address)
{
 8000888:	b500      	push	{lr}
 800088a:	b08f      	sub	sp, #60	; 0x3c
        s_command.Instruction     = SECTOR_ERASE_QPI_CMD;
        s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
    }
    else
    {
        s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800088c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000890:	9306      	str	r3, [sp, #24]
        s_command.Instruction     = SECTOR_ERASE_CMD;
 8000892:	23d7      	movs	r3, #215	; 0xd7
 8000894:	9300      	str	r3, [sp, #0]
        s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 8000896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089a:	9307      	str	r3, [sp, #28]
    }
    s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 800089c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a0:	9303      	str	r3, [sp, #12]
    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	9308      	str	r3, [sp, #32]
    s_command.DataMode          = QSPI_DATA_NONE;
 80008a6:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DummyCycles       = 0;
 80008a8:	9305      	str	r3, [sp, #20]
    s_command.NbData            = 1;
 80008aa:	2201      	movs	r2, #1
 80008ac:	920a      	str	r2, [sp, #40]	; 0x28
    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80008ae:	930b      	str	r3, [sp, #44]	; 0x2c
    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80008b0:	930c      	str	r3, [sp, #48]	; 0x30
    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80008b2:	930d      	str	r3, [sp, #52]	; 0x34
    s_command.Address           = address;
 80008b4:	9001      	str	r0, [sp, #4]


    // Erasing takes a long time anyway, so not much point trying to
    // minimize reinitializations
    qspi_SetMode(INDIRECT_POLLING);
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ffdc 	bl	8000874 <qspi_SetMode>

    if(qspi_WriteEnable() != 1)
 80008bc:	f7ff fe8a 	bl	80005d4 <qspi_WriteEnable>
 80008c0:	2801      	cmp	r0, #1
 80008c2:	d110      	bne.n	80008e6 <qpsi_EraseSector+0x5e>
    {
    	qspi_error();
    }
    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80008c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80008c8:	4669      	mov	r1, sp
 80008ca:	480b      	ldr	r0, [pc, #44]	; (80008f8 <qpsi_EraseSector+0x70>)
 80008cc:	f001 f944 	bl	8001b58 <HAL_QSPI_Command>
 80008d0:	b960      	cbnz	r0, 80008ec <qpsi_EraseSector+0x64>
       != HAL_OK)
    {
    	qspi_error();
    }
    if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80008d2:	f241 3088 	movw	r0, #5000	; 0x1388
 80008d6:	f7ff fe51 	bl	800057c <AutopollingMemReady>
 80008da:	2801      	cmp	r0, #1
 80008dc:	d109      	bne.n	80008f2 <qpsi_EraseSector+0x6a>
    //qspi_SetMode(MEMORY_MAPPED);

    ok= 1;
    return ok;

}
 80008de:	2001      	movs	r0, #1
 80008e0:	b00f      	add	sp, #60	; 0x3c
 80008e2:	f85d fb04 	ldr.w	pc, [sp], #4
    	qspi_error();
 80008e6:	f7ff fe3f 	bl	8000568 <qspi_error>
 80008ea:	e7eb      	b.n	80008c4 <qpsi_EraseSector+0x3c>
    	qspi_error();
 80008ec:	f7ff fe3c 	bl	8000568 <qspi_error>
 80008f0:	e7ef      	b.n	80008d2 <qpsi_EraseSector+0x4a>
    	qspi_error();
 80008f2:	f7ff fe39 	bl	8000568 <qspi_error>
 80008f6:	e7f2      	b.n	80008de <qpsi_EraseSector+0x56>
 80008f8:	2000018c 	.word	0x2000018c

080008fc <qspi_Erase>:


void qspi_Erase(uint32_t start_addr, uint32_t end_addr)
{
 80008fc:	b538      	push	{r3, r4, r5, lr}
 80008fe:	460d      	mov	r5, r1
    uint32_t block_addr;
    uint32_t block_size = IS25LP064A_SECTOR_SIZE; // 4kB blocks for now.
    // 64kB chunks for now.
    start_addr = start_addr - (start_addr % block_size);
 8000900:	4c08      	ldr	r4, [pc, #32]	; (8000924 <qspi_Erase+0x28>)
 8000902:	4004      	ands	r4, r0
    while(end_addr > start_addr)
 8000904:	e001      	b.n	800090a <qspi_Erase+0xe>
        block_addr = start_addr & 0x0FFFFFFF;
        if(qpsi_EraseSector(block_addr) != 1)
        {
        	qspi_error();
        }
        start_addr += block_size;
 8000906:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    while(end_addr > start_addr)
 800090a:	42ac      	cmp	r4, r5
 800090c:	d208      	bcs.n	8000920 <qspi_Erase+0x24>
        if(qpsi_EraseSector(block_addr) != 1)
 800090e:	f024 4070 	bic.w	r0, r4, #4026531840	; 0xf0000000
 8000912:	f7ff ffb9 	bl	8000888 <qpsi_EraseSector>
 8000916:	2801      	cmp	r0, #1
 8000918:	d0f5      	beq.n	8000906 <qspi_Erase+0xa>
        	qspi_error();
 800091a:	f7ff fe25 	bl	8000568 <qspi_error>
 800091e:	e7f2      	b.n	8000906 <qspi_Erase+0xa>
    }
}
 8000920:	bd38      	pop	{r3, r4, r5, pc}
 8000922:	bf00      	nop
 8000924:	fffff000 	.word	0xfffff000

08000928 <qspi_WritePage>:

int qspi_WritePage(uint32_t address, uint32_t size, uint8_t* buffer, uint8_t     reset_mode)
{
 8000928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800092c:	b08e      	sub	sp, #56	; 0x38
 800092e:	4680      	mov	r8, r0
 8000930:	460d      	mov	r5, r1
 8000932:	4617      	mov	r7, r2
 8000934:	461e      	mov	r6, r3
	  //RETURN_IF_ERR(CheckProgramMemory());
	int ok = 0;

	qspi_SetMode(INDIRECT_POLLING);
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff ff9c 	bl	8000874 <qspi_SetMode>

	    QSPI_CommandTypeDef s_command;
	    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800093c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000940:	9306      	str	r3, [sp, #24]
	    s_command.Instruction       = PAGE_PROG_CMD;
 8000942:	2302      	movs	r3, #2
 8000944:	9300      	str	r3, [sp, #0]
	    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8000946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094a:	9307      	str	r3, [sp, #28]
	    s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 800094c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000950:	9303      	str	r3, [sp, #12]
	    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000952:	2400      	movs	r4, #0
 8000954:	9408      	str	r4, [sp, #32]
	    s_command.DataMode          = QSPI_DATA_1_LINE;
 8000956:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800095a:	9309      	str	r3, [sp, #36]	; 0x24
	    s_command.DummyCycles       = 0;
 800095c:	9405      	str	r4, [sp, #20]
	    s_command.NbData            = size <= 256 ? size : 256;
 800095e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000962:	bf28      	it	cs
 8000964:	f44f 7580 	movcs.w	r5, #256	; 0x100
 8000968:	950a      	str	r5, [sp, #40]	; 0x28
	    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800096a:	940b      	str	r4, [sp, #44]	; 0x2c
	    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800096c:	940c      	str	r4, [sp, #48]	; 0x30
	    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800096e:	940d      	str	r4, [sp, #52]	; 0x34
	    s_command.Address           = address;
 8000970:	f8cd 8004 	str.w	r8, [sp, #4]
	    if(qspi_WriteEnable() != 1)
 8000974:	f7ff fe2e 	bl	80005d4 <qspi_WriteEnable>
 8000978:	2801      	cmp	r0, #1
 800097a:	d118      	bne.n	80009ae <qspi_WritePage+0x86>
	    {
	    	qspi_error();
	    }
	    if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800097c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000980:	4669      	mov	r1, sp
 8000982:	4813      	ldr	r0, [pc, #76]	; (80009d0 <qspi_WritePage+0xa8>)
 8000984:	f001 f8e8 	bl	8001b58 <HAL_QSPI_Command>
 8000988:	b9a0      	cbnz	r0, 80009b4 <qspi_WritePage+0x8c>
	       != HAL_OK)
	    {
	    	qspi_error();
	    }
	    if(HAL_QSPI_Transmit(
 800098a:	f241 3288 	movw	r2, #5000	; 0x1388
 800098e:	4639      	mov	r1, r7
 8000990:	480f      	ldr	r0, [pc, #60]	; (80009d0 <qspi_WritePage+0xa8>)
 8000992:	f001 f930 	bl	8001bf6 <HAL_QSPI_Transmit>
 8000996:	b980      	cbnz	r0, 80009ba <qspi_WritePage+0x92>
	           &hqspi, (uint8_t*)buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
	       != HAL_OK)
	    {
	    	qspi_error();
	    }
	    if(AutopollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000998:	f241 3088 	movw	r0, #5000	; 0x1388
 800099c:	f7ff fdee 	bl	800057c <AutopollingMemReady>
 80009a0:	2801      	cmp	r0, #1
 80009a2:	d10d      	bne.n	80009c0 <qspi_WritePage+0x98>
	       != 1)
	    {
	    	qspi_error();
	    }

	    if(reset_mode)
 80009a4:	b97e      	cbnz	r6, 80009c6 <qspi_WritePage+0x9e>
	    	qspi_SetMode(MEMORY_MAPPED);

	    ok= 1;
	    return ok;

}
 80009a6:	2001      	movs	r0, #1
 80009a8:	b00e      	add	sp, #56	; 0x38
 80009aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    	qspi_error();
 80009ae:	f7ff fddb 	bl	8000568 <qspi_error>
 80009b2:	e7e3      	b.n	800097c <qspi_WritePage+0x54>
	    	qspi_error();
 80009b4:	f7ff fdd8 	bl	8000568 <qspi_error>
 80009b8:	e7e7      	b.n	800098a <qspi_WritePage+0x62>
	    	qspi_error();
 80009ba:	f7ff fdd5 	bl	8000568 <qspi_error>
 80009be:	e7eb      	b.n	8000998 <qspi_WritePage+0x70>
	    	qspi_error();
 80009c0:	f7ff fdd2 	bl	8000568 <qspi_error>
 80009c4:	e7ee      	b.n	80009a4 <qspi_WritePage+0x7c>
	    	qspi_SetMode(MEMORY_MAPPED);
 80009c6:	2001      	movs	r0, #1
 80009c8:	f7ff ff54 	bl	8000874 <qspi_SetMode>
 80009cc:	e7eb      	b.n	80009a6 <qspi_WritePage+0x7e>
 80009ce:	bf00      	nop
 80009d0:	2000018c 	.word	0x2000018c

080009d4 <qspi_Write>:

void qspi_Write(uint32_t address, uint32_t size, uint8_t* buffer)
{
 80009d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009d8:	4614      	mov	r4, r2
	 uint32_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
	    uint32_t QSPI_DataNum    = 0;
	    uint32_t flash_page_size = IS25LP064A_PAGE_SIZE;
	    address                  = address & 0x0FFFFFFF;
 80009da:	f020 4570 	bic.w	r5, r0, #4026531840	; 0xf0000000
	    Addr                     = address % flash_page_size;
 80009de:	b2c0      	uxtb	r0, r0
	    count                    = flash_page_size - Addr;
	    NumOfPage                = size / flash_page_size;
	    NumOfSingle              = size % flash_page_size;
 80009e0:	b2ce      	uxtb	r6, r1

	    if(Addr == 0) /*!< Address is QSPI_PAGESIZE aligned  */
 80009e2:	bb10      	cbnz	r0, 8000a2a <qspi_Write+0x56>
 80009e4:	0a0b      	lsrs	r3, r1, #8
	    {
	        if(NumOfPage == 0) /*!< NumByteToWrite < QSPI_PAGESIZE */
 80009e6:	29ff      	cmp	r1, #255	; 0xff
 80009e8:	d810      	bhi.n	8000a0c <qspi_Write+0x38>
	        {
	            QSPI_DataNum = size;
	            qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 80009ea:	2300      	movs	r3, #0
 80009ec:	4628      	mov	r0, r5
 80009ee:	f7ff ff9b 	bl	8000928 <qspi_WritePage>
 80009f2:	e00f      	b.n	8000a14 <qspi_Write+0x40>
	        else /*!< Size > QSPI_PAGESIZE */
	        {
	            while(NumOfPage--)
	            {
	                QSPI_DataNum = flash_page_size;
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 80009f4:	2300      	movs	r3, #0
 80009f6:	4622      	mov	r2, r4
 80009f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009fc:	4628      	mov	r0, r5
 80009fe:	f7ff ff93 	bl	8000928 <qspi_WritePage>
	                address += flash_page_size;
 8000a02:	f505 7580 	add.w	r5, r5, #256	; 0x100
	                buffer += flash_page_size;
 8000a06:	f504 7480 	add.w	r4, r4, #256	; 0x100
	            while(NumOfPage--)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	1e5f      	subs	r7, r3, #1
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1f0      	bne.n	80009f4 <qspi_Write+0x20>
	            }

	            QSPI_DataNum = NumOfSingle;
	            if(QSPI_DataNum > 0)
 8000a12:	b926      	cbnz	r6, 8000a1e <qspi_Write+0x4a>
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
	            }
	        }
	    }

	    qspi_SetMode(MEMORY_MAPPED);
 8000a14:	2001      	movs	r0, #1
 8000a16:	f7ff ff2d 	bl	8000874 <qspi_SetMode>


}
 8000a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	            	qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8000a1e:	4622      	mov	r2, r4
 8000a20:	4631      	mov	r1, r6
 8000a22:	4628      	mov	r0, r5
 8000a24:	f7ff ff80 	bl	8000928 <qspi_WritePage>
 8000a28:	e7f4      	b.n	8000a14 <qspi_Write+0x40>
 8000a2a:	f5c0 7780 	rsb	r7, r0, #256	; 0x100
	        if(NumOfPage == 0) /*!< Size < QSPI_PAGESIZE */
 8000a2e:	29ff      	cmp	r1, #255	; 0xff
 8000a30:	d815      	bhi.n	8000a5e <qspi_Write+0x8a>
	            if(NumOfSingle > count) /*!< (Size + Address) > QSPI_PAGESIZE */
 8000a32:	42b7      	cmp	r7, r6
 8000a34:	d20e      	bcs.n	8000a54 <qspi_Write+0x80>
	                temp         = NumOfSingle - count;
 8000a36:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000a3a:	4406      	add	r6, r0
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	4639      	mov	r1, r7
 8000a40:	4628      	mov	r0, r5
 8000a42:	f7ff ff71 	bl	8000928 <qspi_WritePage>
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8000a46:	2300      	movs	r3, #0
 8000a48:	19e2      	adds	r2, r4, r7
 8000a4a:	4631      	mov	r1, r6
 8000a4c:	19e8      	adds	r0, r5, r7
 8000a4e:	f7ff ff6b 	bl	8000928 <qspi_WritePage>
 8000a52:	e7df      	b.n	8000a14 <qspi_Write+0x40>
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8000a54:	2300      	movs	r3, #0
 8000a56:	4628      	mov	r0, r5
 8000a58:	f7ff ff66 	bl	8000928 <qspi_WritePage>
 8000a5c:	e7da      	b.n	8000a14 <qspi_Write+0x40>
	            size -= count;
 8000a5e:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000a62:	4401      	add	r1, r0
	            NumOfPage    = size / flash_page_size;
 8000a64:	ea4f 2811 	mov.w	r8, r1, lsr #8
	            NumOfSingle  = size % flash_page_size;
 8000a68:	b2ce      	uxtb	r6, r1
	            qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	4639      	mov	r1, r7
 8000a6e:	4628      	mov	r0, r5
 8000a70:	f7ff ff5a 	bl	8000928 <qspi_WritePage>
	            address += count;
 8000a74:	443d      	add	r5, r7
	            buffer += count;
 8000a76:	443c      	add	r4, r7
	            while(NumOfPage--)
 8000a78:	e00b      	b.n	8000a92 <qspi_Write+0xbe>
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	4622      	mov	r2, r4
 8000a7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a82:	4628      	mov	r0, r5
 8000a84:	f7ff ff50 	bl	8000928 <qspi_WritePage>
	                address += flash_page_size;
 8000a88:	f505 7580 	add.w	r5, r5, #256	; 0x100
	                buffer += flash_page_size;
 8000a8c:	f504 7480 	add.w	r4, r4, #256	; 0x100
	            while(NumOfPage--)
 8000a90:	46b8      	mov	r8, r7
 8000a92:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8000a96:	f1b8 0f00 	cmp.w	r8, #0
 8000a9a:	d1ee      	bne.n	8000a7a <qspi_Write+0xa6>
	            if(NumOfSingle != 0)
 8000a9c:	2e00      	cmp	r6, #0
 8000a9e:	d0b9      	beq.n	8000a14 <qspi_Write+0x40>
	                qspi_WritePage(address, QSPI_DataNum, buffer, 0);
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	4622      	mov	r2, r4
 8000aa4:	4631      	mov	r1, r6
 8000aa6:	4628      	mov	r0, r5
 8000aa8:	f7ff ff3e 	bl	8000928 <qspi_WritePage>
 8000aac:	e7b2      	b.n	8000a14 <qspi_Write+0x40>
	...

08000ab0 <FS_FileOperations>:



static void FS_FileOperations(void)
{
 8000ab0:	b510      	push	{r4, lr}
	HAL_Delay(300);
 8000ab2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ab6:	f000 fc7f 	bl	80013b8 <HAL_Delay>
	disk_initialize(0);
 8000aba:	2000      	movs	r0, #0
 8000abc:	f005 f9c0 	bl	8005e40 <disk_initialize>

    disk_status(0);
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f005 f9b1 	bl	8005e28 <disk_status>
    //{
      //ShowDiskStatus(status);
    //}


	if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4922      	ldr	r1, [pc, #136]	; (8000b54 <FS_FileOperations+0xa4>)
 8000aca:	4823      	ldr	r0, [pc, #140]	; (8000b58 <FS_FileOperations+0xa8>)
 8000acc:	f006 fd52 	bl	8007574 <f_mount>
 8000ad0:	b100      	cbz	r0, 8000ad4 <FS_FileOperations+0x24>
		f_closedir(&dir);
		f_mount(0, "", 0); //unmount
	}


}
 8000ad2:	bd10      	pop	{r4, pc}
		res = f_findfirst(&dir, &fno, SDPath, "*.bin");
 8000ad4:	4c21      	ldr	r4, [pc, #132]	; (8000b5c <FS_FileOperations+0xac>)
 8000ad6:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <FS_FileOperations+0xb0>)
 8000ad8:	4a1e      	ldr	r2, [pc, #120]	; (8000b54 <FS_FileOperations+0xa4>)
 8000ada:	4621      	mov	r1, r4
 8000adc:	4821      	ldr	r0, [pc, #132]	; (8000b64 <FS_FileOperations+0xb4>)
 8000ade:	f007 f866 	bl	8007bae <f_findfirst>
		if (fno.fname[0])
 8000ae2:	7da3      	ldrb	r3, [r4, #22]
 8000ae4:	b103      	cbz	r3, 8000ae8 <FS_FileOperations+0x38>
		  if(res == FR_OK)
 8000ae6:	b140      	cbz	r0, 8000afa <FS_FileOperations+0x4a>
		f_closedir(&dir);
 8000ae8:	481e      	ldr	r0, [pc, #120]	; (8000b64 <FS_FileOperations+0xb4>)
 8000aea:	f007 f80a 	bl	8007b02 <f_closedir>
		f_mount(0, "", 0); //unmount
 8000aee:	2200      	movs	r2, #0
 8000af0:	491d      	ldr	r1, [pc, #116]	; (8000b68 <FS_FileOperations+0xb8>)
 8000af2:	4610      	mov	r0, r2
 8000af4:	f006 fd3e 	bl	8007574 <f_mount>
}
 8000af8:	e7eb      	b.n	8000ad2 <FS_FileOperations+0x22>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 8000afa:	2211      	movs	r2, #17
 8000afc:	f104 0116 	add.w	r1, r4, #22
 8000b00:	481a      	ldr	r0, [pc, #104]	; (8000b6c <FS_FileOperations+0xbc>)
 8000b02:	f006 fd67 	bl	80075d4 <f_open>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	d1ee      	bne.n	8000ae8 <FS_FileOperations+0x38>
					f_read(&SDFile, &tempBinaryBuffer, f_size(&SDFile), &bytesRead);
 8000b0a:	4818      	ldr	r0, [pc, #96]	; (8000b6c <FS_FileOperations+0xbc>)
 8000b0c:	4c18      	ldr	r4, [pc, #96]	; (8000b70 <FS_FileOperations+0xc0>)
 8000b0e:	4623      	mov	r3, r4
 8000b10:	68c2      	ldr	r2, [r0, #12]
 8000b12:	4918      	ldr	r1, [pc, #96]	; (8000b74 <FS_FileOperations+0xc4>)
 8000b14:	f006 fe74 	bl	8007800 <f_read>
					if (bytesRead < 500000)
 8000b18:	6821      	ldr	r1, [r4, #0]
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <FS_FileOperations+0xc8>)
 8000b1c:	4299      	cmp	r1, r3
 8000b1e:	d903      	bls.n	8000b28 <FS_FileOperations+0x78>
					f_close(&SDFile);
 8000b20:	4812      	ldr	r0, [pc, #72]	; (8000b6c <FS_FileOperations+0xbc>)
 8000b22:	f006 ff94 	bl	8007a4e <f_close>
 8000b26:	e7df      	b.n	8000ae8 <FS_FileOperations+0x38>
						qspi_Erase(QSPI_START, QSPI_START+bytesRead);
 8000b28:	f101 4110 	add.w	r1, r1, #2415919104	; 0x90000000
 8000b2c:	f04f 4010 	mov.w	r0, #2415919104	; 0x90000000
 8000b30:	f7ff fee4 	bl	80008fc <qspi_Erase>
						qspi_Write(QSPI_START, bytesRead,(uint8_t*)tempBinaryBuffer);
 8000b34:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <FS_FileOperations+0xc4>)
 8000b36:	6821      	ldr	r1, [r4, #0]
 8000b38:	f04f 4010 	mov.w	r0, #2415919104	; 0x90000000
 8000b3c:	f7ff ff4a 	bl	80009d4 <qspi_Write>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2180      	movs	r1, #128	; 0x80
 8000b44:	480d      	ldr	r0, [pc, #52]	; (8000b7c <FS_FileOperations+0xcc>)
 8000b46:	f000 fe97 	bl	8001878 <HAL_GPIO_WritePin>
						memory_already_mapped = 1;
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <FS_FileOperations+0xd0>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
 8000b50:	e7e6      	b.n	8000b20 <FS_FileOperations+0x70>
 8000b52:	bf00      	nop
 8000b54:	200006b8 	.word	0x200006b8
 8000b58:	20000258 	.word	0x20000258
 8000b5c:	20000070 	.word	0x20000070
 8000b60:	08007d5c 	.word	0x08007d5c
 8000b64:	20000038 	.word	0x20000038
 8000b68:	08007d90 	.word	0x08007d90
 8000b6c:	2000048c 	.word	0x2000048c
 8000b70:	20000034 	.word	0x20000034
 8000b74:	24000000 	.word	0x24000000
 8000b78:	0007a11f 	.word	0x0007a11f
 8000b7c:	58020800 	.word	0x58020800
 8000b80:	20000188 	.word	0x20000188

08000b84 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <Error_Handler+0x2>

08000b88 <SystemClock_Config>:
{
 8000b88:	b500      	push	{lr}
 8000b8a:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8c:	224c      	movs	r2, #76	; 0x4c
 8000b8e:	2100      	movs	r1, #0
 8000b90:	a80b      	add	r0, sp, #44	; 0x2c
 8000b92:	f007 f8db 	bl	8007d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b96:	2220      	movs	r2, #32
 8000b98:	2100      	movs	r1, #0
 8000b9a:	a803      	add	r0, sp, #12
 8000b9c:	f007 f8d6 	bl	8007d4c <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	f000 fe89 	bl	80018b8 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	4b3d      	ldr	r3, [pc, #244]	; (8000ca0 <SystemClock_Config+0x118>)
 8000bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bae:	f022 0201 	bic.w	r2, r2, #1
 8000bb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	4b39      	ldr	r3, [pc, #228]	; (8000ca4 <SystemClock_Config+0x11c>)
 8000bbe:	699a      	ldr	r2, [r3, #24]
 8000bc0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000bc4:	619a      	str	r2, [r3, #24]
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bd0:	4b34      	ldr	r3, [pc, #208]	; (8000ca4 <SystemClock_Config+0x11c>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000bd8:	d0fa      	beq.n	8000bd0 <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	4b33      	ldr	r3, [pc, #204]	; (8000ca8 <SystemClock_Config+0x120>)
 8000bdc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000be0:	f042 0202 	orr.w	r2, r2, #2
 8000be4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bec:	f003 0302 	and.w	r3, r3, #2
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	9302      	str	r3, [sp, #8]
 8000bf8:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <SystemClock_Config+0x11c>)
 8000bfa:	699a      	ldr	r2, [r3, #24]
 8000bfc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000c00:	619a      	str	r2, [r3, #24]
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c08:	9302      	str	r3, [sp, #8]
 8000c0a:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <SystemClock_Config+0x118>)
 8000c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c0e:	f042 0201 	orr.w	r2, r2, #1
 8000c12:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	9302      	str	r3, [sp, #8]
 8000c1c:	9b02      	ldr	r3, [sp, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <SystemClock_Config+0x11c>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000c26:	d0fa      	beq.n	8000c1e <SystemClock_Config+0x96>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000c28:	4a1f      	ldr	r2, [pc, #124]	; (8000ca8 <SystemClock_Config+0x120>)
 8000c2a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000c2c:	f023 0303 	bic.w	r3, r3, #3
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c36:	2201      	movs	r2, #1
 8000c38:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c3e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c40:	2302      	movs	r3, #2
 8000c42:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c44:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c46:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000c48:	223c      	movs	r2, #60	; 0x3c
 8000c4a:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c4c:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000c4e:	2306      	movs	r3, #6
 8000c50:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 8;
 8000c52:	2308      	movs	r3, #8
 8000c54:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c56:	230c      	movs	r3, #12
 8000c58:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c5e:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c60:	a80b      	add	r0, sp, #44	; 0x2c
 8000c62:	f001 fa15 	bl	8002090 <HAL_RCC_OscConfig>
 8000c66:	b9b0      	cbnz	r0, 8000c96 <SystemClock_Config+0x10e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c68:	233f      	movs	r3, #63	; 0x3f
 8000c6a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c74:	2308      	movs	r3, #8
 8000c76:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c78:	2340      	movs	r3, #64	; 0x40
 8000c7a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c7c:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c82:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c84:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c86:	2104      	movs	r1, #4
 8000c88:	a803      	add	r0, sp, #12
 8000c8a:	f001 fe35 	bl	80028f8 <HAL_RCC_ClockConfig>
 8000c8e:	b920      	cbnz	r0, 8000c9a <SystemClock_Config+0x112>
}
 8000c90:	b01f      	add	sp, #124	; 0x7c
 8000c92:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000c96:	f7ff ff75 	bl	8000b84 <Error_Handler>
    Error_Handler();
 8000c9a:	f7ff ff73 	bl	8000b84 <Error_Handler>
 8000c9e:	bf00      	nop
 8000ca0:	58000400 	.word	0x58000400
 8000ca4:	58024800 	.word	0x58024800
 8000ca8:	58024400 	.word	0x58024400

08000cac <main>:
{
 8000cac:	b530      	push	{r4, r5, lr}
 8000cae:	b083      	sub	sp, #12
  HAL_Init();
 8000cb0:	f000 fb42 	bl	8001338 <HAL_Init>
  SystemClock_Config();
 8000cb4:	f7ff ff68 	bl	8000b88 <SystemClock_Config>
  MX_GPIO_Init();
 8000cb8:	f7ff fb0e 	bl	80002d8 <MX_GPIO_Init>
   PWR->CR1 |= PWR_CR1_DBP;
 8000cbc:	4a4f      	ldr	r2, [pc, #316]	; (8000dfc <main+0x150>)
 8000cbe:	6813      	ldr	r3, [r2, #0]
 8000cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc4:	6013      	str	r3, [r2, #0]
   while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8000cc6:	4b4d      	ldr	r3, [pc, #308]	; (8000dfc <main+0x150>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000cce:	d0fa      	beq.n	8000cc6 <main+0x1a>
   __HAL_RCC_BKPRAM_CLK_ENABLE();
 8000cd0:	4b4b      	ldr	r3, [pc, #300]	; (8000e00 <main+0x154>)
 8000cd2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000cd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cda:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	9301      	str	r3, [sp, #4]
 8000ce8:	9b01      	ldr	r3, [sp, #4]
  if (bootloaderFlag[0] != 231)
 8000cea:	4b46      	ldr	r3, [pc, #280]	; (8000e04 <main+0x158>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2be7      	cmp	r3, #231	; 0xe7
 8000cf2:	d001      	beq.n	8000cf8 <main+0x4c>
	  int i = 6;
 8000cf4:	2406      	movs	r4, #6
 8000cf6:	e009      	b.n	8000d0c <main+0x60>
	  int i = 6;
 8000cf8:	2406      	movs	r4, #6
 8000cfa:	e03f      	b.n	8000d7c <main+0xd0>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	4842      	ldr	r0, [pc, #264]	; (8000e08 <main+0x15c>)
 8000d00:	f000 fdc0 	bl	8001884 <HAL_GPIO_TogglePin>
		  HAL_Delay(20);
 8000d04:	2014      	movs	r0, #20
 8000d06:	f000 fb57 	bl	80013b8 <HAL_Delay>
	  while(i--)
 8000d0a:	462c      	mov	r4, r5
 8000d0c:	1e65      	subs	r5, r4, #1
 8000d0e:	2c00      	cmp	r4, #0
 8000d10:	d1f4      	bne.n	8000cfc <main+0x50>
	  MX_QUADSPI_Init();
 8000d12:	f000 f889 	bl	8000e28 <MX_QUADSPI_Init>
	  qspi_initialize(INDIRECT_POLLING);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff fd94 	bl	8000844 <qspi_initialize>
	  if (!memory_already_mapped)
 8000d1c:	4b3b      	ldr	r3, [pc, #236]	; (8000e0c <main+0x160>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b93b      	cbnz	r3, 8000d32 <main+0x86>
		  qspi_enable_memory_mapped();
 8000d22:	f7ff fd61 	bl	80007e8 <qspi_enable_memory_mapped>
 8000d26:	e004      	b.n	8000d32 <main+0x86>
		  tempBinaryBuffer[i] = flash_mem[i];
 8000d28:	4b39      	ldr	r3, [pc, #228]	; (8000e10 <main+0x164>)
 8000d2a:	5d1a      	ldrb	r2, [r3, r4]
 8000d2c:	4b39      	ldr	r3, [pc, #228]	; (8000e14 <main+0x168>)
 8000d2e:	551a      	strb	r2, [r3, r4]
	  for (int i = 0; i < 500000; i++)
 8000d30:	3401      	adds	r4, #1
 8000d32:	4b39      	ldr	r3, [pc, #228]	; (8000e18 <main+0x16c>)
 8000d34:	429c      	cmp	r4, r3
 8000d36:	ddf7      	ble.n	8000d28 <main+0x7c>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000d38:	2180      	movs	r1, #128	; 0x80
 8000d3a:	4833      	ldr	r0, [pc, #204]	; (8000e08 <main+0x15c>)
 8000d3c:	f000 fda2 	bl	8001884 <HAL_GPIO_TogglePin>
	  JumpToApplication = (pFunction) (*(__IO uint32_t*) (APPLICATION_ADDRESS+4));
 8000d40:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	4c35      	ldr	r4, [pc, #212]	; (8000e1c <main+0x170>)
 8000d48:	6022      	str	r2, [r4, #0]
	  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000d4a:	681b      	ldr	r3, [r3, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000d4c:	f383 8808 	msr	MSP, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
	  HAL_RCC_DeInit();
 8000d52:	f001 f8b7 	bl	8001ec4 <HAL_RCC_DeInit>
	  HAL_DeInit();
 8000d56:	f000 fa85 	bl	8001264 <HAL_DeInit>
	  SysTick->CTRL = 0;
 8000d5a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
	  SysTick->LOAD = 0;
 8000d62:	615a      	str	r2, [r3, #20]
	  SysTick->VAL  = 0;
 8000d64:	619a      	str	r2, [r3, #24]
	  JumpToApplication();
 8000d66:	6823      	ldr	r3, [r4, #0]
 8000d68:	4798      	blx	r3
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <main+0xbe>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000d6c:	2180      	movs	r1, #128	; 0x80
 8000d6e:	4826      	ldr	r0, [pc, #152]	; (8000e08 <main+0x15c>)
 8000d70:	f000 fd88 	bl	8001884 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 8000d74:	20c8      	movs	r0, #200	; 0xc8
 8000d76:	f000 fb1f 	bl	80013b8 <HAL_Delay>
	  while(i--)
 8000d7a:	462c      	mov	r4, r5
 8000d7c:	1e65      	subs	r5, r4, #1
 8000d7e:	2c00      	cmp	r4, #0
 8000d80:	d1f4      	bne.n	8000d6c <main+0xc0>
	  MX_QUADSPI_Init();
 8000d82:	f000 f851 	bl	8000e28 <MX_QUADSPI_Init>
	  MX_SDMMC1_SD_Init();
 8000d86:	f000 f903 	bl	8000f90 <MX_SDMMC1_SD_Init>
	  MX_FATFS_Init();
 8000d8a:	f004 ff6d 	bl	8005c68 <MX_FATFS_Init>
	  qspi_initialize(INDIRECT_POLLING);
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff fd58 	bl	8000844 <qspi_initialize>
	  if(BSP_SD_IsDetected())
 8000d94:	f7ff fbe0 	bl	8000558 <BSP_SD_IsDetected>
 8000d98:	b920      	cbnz	r0, 8000da4 <main+0xf8>
	  if (!memory_already_mapped)
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <main+0x160>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	b123      	cbz	r3, 8000daa <main+0xfe>
	  int i = 6;
 8000da0:	4623      	mov	r3, r4
 8000da2:	e00a      	b.n	8000dba <main+0x10e>
		  FS_FileOperations();
 8000da4:	f7ff fe84 	bl	8000ab0 <FS_FileOperations>
 8000da8:	e7f7      	b.n	8000d9a <main+0xee>
		  qspi_enable_memory_mapped();
 8000daa:	f7ff fd1d 	bl	80007e8 <qspi_enable_memory_mapped>
 8000dae:	e7f7      	b.n	8000da0 <main+0xf4>
		  tempBinaryBuffer[i] = flash_mem[i];
 8000db0:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <main+0x164>)
 8000db2:	5cd1      	ldrb	r1, [r2, r3]
 8000db4:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <main+0x168>)
 8000db6:	54d1      	strb	r1, [r2, r3]
	  for (int i = 0; i < 500000; i++)
 8000db8:	3301      	adds	r3, #1
 8000dba:	4a17      	ldr	r2, [pc, #92]	; (8000e18 <main+0x16c>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	ddf7      	ble.n	8000db0 <main+0x104>
	  HAL_QSPI_MspDeInit(&hqspi);
 8000dc0:	4817      	ldr	r0, [pc, #92]	; (8000e20 <main+0x174>)
 8000dc2:	f000 f8c5 	bl	8000f50 <HAL_QSPI_MspDeInit>
	  HAL_SD_MspDeInit(&hsd1);
 8000dc6:	4817      	ldr	r0, [pc, #92]	; (8000e24 <main+0x178>)
 8000dc8:	f000 f970 	bl	80010ac <HAL_SD_MspDeInit>
	  HAL_RCC_DeInit();
 8000dcc:	f001 f87a 	bl	8001ec4 <HAL_RCC_DeInit>
	  HAL_DeInit();
 8000dd0:	f000 fa48 	bl	8001264 <HAL_DeInit>
	  SysTick->CTRL = 0;
 8000dd4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
	  SysTick->LOAD = 0;
 8000ddc:	615a      	str	r2, [r3, #20]
	  SysTick->VAL  = 0;
 8000dde:	619a      	str	r2, [r3, #24]
	  for (int i = 0; i < 32; i++)
 8000de0:	e003      	b.n	8000dea <main+0x13e>
		  bootloaderFlag[i] = 232;
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <main+0x158>)
 8000de4:	22e8      	movs	r2, #232	; 0xe8
 8000de6:	551a      	strb	r2, [r3, r4]
	  for (int i = 0; i < 32; i++)
 8000de8:	3401      	adds	r4, #1
 8000dea:	2c1f      	cmp	r4, #31
 8000dec:	ddf9      	ble.n	8000de2 <main+0x136>
	  FlushECC(&bootloaderFlag,  32);
 8000dee:	2120      	movs	r1, #32
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <main+0x158>)
 8000df2:	f7ff fb8d 	bl	8000510 <FlushECC>
	  HAL_NVIC_SystemReset();
 8000df6:	f000 fb61 	bl	80014bc <HAL_NVIC_SystemReset>
 8000dfa:	e7b6      	b.n	8000d6a <main+0xbe>
 8000dfc:	58024800 	.word	0x58024800
 8000e00:	58024400 	.word	0x58024400
 8000e04:	38800000 	.word	0x38800000
 8000e08:	58020800 	.word	0x58020800
 8000e0c:	20000188 	.word	0x20000188
 8000e10:	90000000 	.word	0x90000000
 8000e14:	24000000 	.word	0x24000000
 8000e18:	0007a11f 	.word	0x0007a11f
 8000e1c:	20000030 	.word	0x20000030
 8000e20:	2000018c 	.word	0x2000018c
 8000e24:	200001d8 	.word	0x200001d8

08000e28 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000e28:	b508      	push	{r3, lr}
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000e2a:	480a      	ldr	r0, [pc, #40]	; (8000e54 <MX_QUADSPI_Init+0x2c>)
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <MX_QUADSPI_Init+0x30>)
 8000e2e:	6003      	str	r3, [r0, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	6043      	str	r3, [r0, #4]
  hqspi.Init.FifoThreshold = 1;
 8000e34:	6083      	str	r3, [r0, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FlashSize = 19;
 8000e3a:	2213      	movs	r2, #19
 8000e3c:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000e3e:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000e40:	6183      	str	r3, [r0, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000e42:	61c3      	str	r3, [r0, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000e44:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000e46:	f000 ffe9 	bl	8001e1c <HAL_QSPI_Init>
 8000e4a:	b900      	cbnz	r0, 8000e4e <MX_QUADSPI_Init+0x26>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000e4c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000e4e:	f7ff fe99 	bl	8000b84 <Error_Handler>
}
 8000e52:	e7fb      	b.n	8000e4c <MX_QUADSPI_Init+0x24>
 8000e54:	2000018c 	.word	0x2000018c
 8000e58:	52005000 	.word	0x52005000

08000e5c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e60:	b0b8      	sub	sp, #224	; 0xe0
 8000e62:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	2100      	movs	r1, #0
 8000e66:	9133      	str	r1, [sp, #204]	; 0xcc
 8000e68:	9134      	str	r1, [sp, #208]	; 0xd0
 8000e6a:	9135      	str	r1, [sp, #212]	; 0xd4
 8000e6c:	9136      	str	r1, [sp, #216]	; 0xd8
 8000e6e:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e70:	22bc      	movs	r2, #188	; 0xbc
 8000e72:	a804      	add	r0, sp, #16
 8000e74:	f006 ff6a 	bl	8007d4c <memset>
  if(qspiHandle->Instance==QUADSPI)
 8000e78:	6822      	ldr	r2, [r4, #0]
 8000e7a:	4b31      	ldr	r3, [pc, #196]	; (8000f40 <HAL_QSPI_MspInit+0xe4>)
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d002      	beq.n	8000e86 <HAL_QSPI_MspInit+0x2a>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000e80:	b038      	add	sp, #224	; 0xe0
 8000e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000e86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e8a:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL;
 8000e8c:	2310      	movs	r3, #16
 8000e8e:	9316      	str	r3, [sp, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e90:	eb0d 0003 	add.w	r0, sp, r3
 8000e94:	f001 ffa8 	bl	8002de8 <HAL_RCCEx_PeriphCLKConfig>
 8000e98:	2800      	cmp	r0, #0
 8000e9a:	d14e      	bne.n	8000f3a <HAL_QSPI_MspInit+0xde>
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000e9c:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <HAL_QSPI_MspInit+0xe8>)
 8000e9e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000ea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ea6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000eaa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000eae:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000eb2:	9201      	str	r2, [sp, #4]
 8000eb4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000eba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ebe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ec2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ec6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000eca:	9202      	str	r2, [sp, #8]
 8000ecc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ece:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ed2:	f042 0220 	orr.w	r2, r2, #32
 8000ed6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ede:	f003 0320 	and.w	r3, r3, #32
 8000ee2:	9303      	str	r3, [sp, #12]
 8000ee4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ee6:	2340      	movs	r3, #64	; 0x40
 8000ee8:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2602      	movs	r6, #2
 8000eec:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2500      	movs	r5, #0
 8000ef0:	9535      	str	r5, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef2:	2403      	movs	r4, #3
 8000ef4:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ef6:	f04f 080a 	mov.w	r8, #10
 8000efa:	f8cd 80dc 	str.w	r8, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000efe:	a933      	add	r1, sp, #204	; 0xcc
 8000f00:	4811      	ldr	r0, [pc, #68]	; (8000f48 <HAL_QSPI_MspInit+0xec>)
 8000f02:	f000 fb01 	bl	8001508 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
 8000f06:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000f0a:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	9535      	str	r5, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f12:	2309      	movs	r3, #9
 8000f14:	9337      	str	r3, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f16:	4f0d      	ldr	r7, [pc, #52]	; (8000f4c <HAL_QSPI_MspInit+0xf0>)
 8000f18:	a933      	add	r1, sp, #204	; 0xcc
 8000f1a:	4638      	mov	r0, r7
 8000f1c:	f000 faf4 	bl	8001508 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000f20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f24:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	9535      	str	r5, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2a:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f2c:	f8cd 80dc 	str.w	r8, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f30:	a933      	add	r1, sp, #204	; 0xcc
 8000f32:	4638      	mov	r0, r7
 8000f34:	f000 fae8 	bl	8001508 <HAL_GPIO_Init>
}
 8000f38:	e7a2      	b.n	8000e80 <HAL_QSPI_MspInit+0x24>
      Error_Handler();
 8000f3a:	f7ff fe23 	bl	8000b84 <Error_Handler>
 8000f3e:	e7ad      	b.n	8000e9c <HAL_QSPI_MspInit+0x40>
 8000f40:	52005000 	.word	0x52005000
 8000f44:	58024400 	.word	0x58024400
 8000f48:	58021800 	.word	0x58021800
 8000f4c:	58021400 	.word	0x58021400

08000f50 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000f50:	b508      	push	{r3, lr}

  if(qspiHandle->Instance==QUADSPI)
 8000f52:	6802      	ldr	r2, [r0, #0]
 8000f54:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_QSPI_MspDeInit+0x30>)
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d000      	beq.n	8000f5c <HAL_QSPI_MspDeInit+0xc>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8000f5a:	bd08      	pop	{r3, pc}
    __HAL_RCC_QSPI_CLK_DISABLE();
 8000f5c:	4a09      	ldr	r2, [pc, #36]	; (8000f84 <HAL_QSPI_MspDeInit+0x34>)
 8000f5e:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 8000f62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f66:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_6);
 8000f6a:	2140      	movs	r1, #64	; 0x40
 8000f6c:	4806      	ldr	r0, [pc, #24]	; (8000f88 <HAL_QSPI_MspDeInit+0x38>)
 8000f6e:	f000 fbdb 	bl	8001728 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 8000f72:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <HAL_QSPI_MspDeInit+0x3c>)
 8000f78:	f000 fbd6 	bl	8001728 <HAL_GPIO_DeInit>
}
 8000f7c:	e7ed      	b.n	8000f5a <HAL_QSPI_MspDeInit+0xa>
 8000f7e:	bf00      	nop
 8000f80:	52005000 	.word	0x52005000
 8000f84:	58024400 	.word	0x58024400
 8000f88:	58021800 	.word	0x58021800
 8000f8c:	58021400 	.word	0x58021400

08000f90 <MX_SDMMC1_SD_Init>:
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_SDMMC1_SD_Init+0x1c>)
 8000f92:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <MX_SDMMC1_SD_Init+0x20>)
 8000f94:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f96:	2200      	movs	r2, #0
 8000f98:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f9a:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000f9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa0:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fa2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 25;
 8000fa4:	2219      	movs	r2, #25
 8000fa6:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	200001d8 	.word	0x200001d8
 8000fb0:	52007000 	.word	0x52007000

08000fb4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb6:	b0b9      	sub	sp, #228	; 0xe4
 8000fb8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	2100      	movs	r1, #0
 8000fbc:	9133      	str	r1, [sp, #204]	; 0xcc
 8000fbe:	9134      	str	r1, [sp, #208]	; 0xd0
 8000fc0:	9135      	str	r1, [sp, #212]	; 0xd4
 8000fc2:	9136      	str	r1, [sp, #216]	; 0xd8
 8000fc4:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc6:	22bc      	movs	r2, #188	; 0xbc
 8000fc8:	a804      	add	r0, sp, #16
 8000fca:	f006 febf 	bl	8007d4c <memset>
  if(sdHandle->Instance==SDMMC1)
 8000fce:	6822      	ldr	r2, [r4, #0]
 8000fd0:	4b32      	ldr	r3, [pc, #200]	; (800109c <HAL_SD_MspInit+0xe8>)
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d001      	beq.n	8000fda <HAL_SD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000fd6:	b039      	add	sp, #228	; 0xe4
 8000fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000fda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fde:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	9205      	str	r2, [sp, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000fe4:	220c      	movs	r2, #12
 8000fe6:	9206      	str	r2, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 8000fe8:	2208      	movs	r2, #8
 8000fea:	9207      	str	r2, [sp, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000fec:	2202      	movs	r2, #2
 8000fee:	9208      	str	r2, [sp, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ff0:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000ff2:	22c0      	movs	r2, #192	; 0xc0
 8000ff4:	920a      	str	r2, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8000ff6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ffa:	920c      	str	r2, [sp, #48]	; 0x30
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000ffc:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffe:	a804      	add	r0, sp, #16
 8001000:	f001 fef2 	bl	8002de8 <HAL_RCCEx_PeriphCLKConfig>
 8001004:	2800      	cmp	r0, #0
 8001006:	d146      	bne.n	8001096 <HAL_SD_MspInit+0xe2>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001008:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <HAL_SD_MspInit+0xec>)
 800100a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800100e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001012:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001016:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800101a:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800101e:	9201      	str	r2, [sp, #4]
 8001020:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001026:	f042 0204 	orr.w	r2, r2, #4
 800102a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800102e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001032:	f002 0204 	and.w	r2, r2, #4
 8001036:	9202      	str	r2, [sp, #8]
 8001038:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800103a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800103e:	f042 0208 	orr.w	r2, r2, #8
 8001042:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	9303      	str	r3, [sp, #12]
 8001050:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8001052:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001056:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2702      	movs	r7, #2
 800105a:	9734      	str	r7, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800105c:	2601      	movs	r6, #1
 800105e:	9635      	str	r6, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2503      	movs	r5, #3
 8001062:	9536      	str	r5, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001064:	240c      	movs	r4, #12
 8001066:	9437      	str	r4, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001068:	a933      	add	r1, sp, #204	; 0xcc
 800106a:	480e      	ldr	r0, [pc, #56]	; (80010a4 <HAL_SD_MspInit+0xf0>)
 800106c:	f000 fa4c 	bl	8001508 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001070:	2304      	movs	r3, #4
 8001072:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	9734      	str	r7, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001076:	9635      	str	r6, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	9536      	str	r5, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800107a:	9437      	str	r4, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107c:	a933      	add	r1, sp, #204	; 0xcc
 800107e:	480a      	ldr	r0, [pc, #40]	; (80010a8 <HAL_SD_MspInit+0xf4>)
 8001080:	f000 fa42 	bl	8001508 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	4611      	mov	r1, r2
 8001088:	2031      	movs	r0, #49	; 0x31
 800108a:	f000 f9c1 	bl	8001410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800108e:	2031      	movs	r0, #49	; 0x31
 8001090:	f000 f9f4 	bl	800147c <HAL_NVIC_EnableIRQ>
}
 8001094:	e79f      	b.n	8000fd6 <HAL_SD_MspInit+0x22>
      Error_Handler();
 8001096:	f7ff fd75 	bl	8000b84 <Error_Handler>
 800109a:	e7b5      	b.n	8001008 <HAL_SD_MspInit+0x54>
 800109c:	52007000 	.word	0x52007000
 80010a0:	58024400 	.word	0x58024400
 80010a4:	58020800 	.word	0x58020800
 80010a8:	58020c00 	.word	0x58020c00

080010ac <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* sdHandle)
{
 80010ac:	b508      	push	{r3, lr}

  if(sdHandle->Instance==SDMMC1)
 80010ae:	6802      	ldr	r2, [r0, #0]
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_SD_MspDeInit+0x34>)
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d000      	beq.n	80010b8 <HAL_SD_MspDeInit+0xc>
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }
}
 80010b6:	bd08      	pop	{r3, pc}
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 80010b8:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_SD_MspDeInit+0x38>)
 80010ba:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 80010be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 80010c6:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80010ca:	4807      	ldr	r0, [pc, #28]	; (80010e8 <HAL_SD_MspDeInit+0x3c>)
 80010cc:	f000 fb2c 	bl	8001728 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 80010d0:	2104      	movs	r1, #4
 80010d2:	4806      	ldr	r0, [pc, #24]	; (80010ec <HAL_SD_MspDeInit+0x40>)
 80010d4:	f000 fb28 	bl	8001728 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 80010d8:	2031      	movs	r0, #49	; 0x31
 80010da:	f000 f9dd 	bl	8001498 <HAL_NVIC_DisableIRQ>
}
 80010de:	e7ea      	b.n	80010b6 <HAL_SD_MspDeInit+0xa>
 80010e0:	52007000 	.word	0x52007000
 80010e4:	58024400 	.word	0x58024400
 80010e8:	58020800 	.word	0x58020800
 80010ec:	58020c00 	.word	0x58020c00

080010f0 <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
 80010f0:	e7fe      	b.n	80010f0 <Default_Handler>
	...

080010f4 <Reset_Handler>:
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <Reset_Handler+0x34>)
 80010f6:	490d      	ldr	r1, [pc, #52]	; (800112c <Reset_Handler+0x38>)
 80010f8:	e003      	b.n	8001102 <Reset_Handler+0xe>
		*pDest = *pSource;
 80010fa:	f851 2b04 	ldr.w	r2, [r1], #4
 80010fe:	f843 2b04 	str.w	r2, [r3], #4
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 8001102:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <Reset_Handler+0x3c>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d1f8      	bne.n	80010fa <Reset_Handler+0x6>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <Reset_Handler+0x40>)
 800110a:	e002      	b.n	8001112 <Reset_Handler+0x1e>
		*pDest = 0;
 800110c:	2200      	movs	r2, #0
 800110e:	f843 2b04 	str.w	r2, [r3], #4
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 8001112:	4a09      	ldr	r2, [pc, #36]	; (8001138 <Reset_Handler+0x44>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d1f9      	bne.n	800110c <Reset_Handler+0x18>
	SystemInit();
 8001118:	f000 f83c 	bl	8001194 <SystemInit>
	__libc_init_array();
 800111c:	f006 fdf2 	bl	8007d04 <__libc_init_array>
	(void)main();
 8001120:	f7ff fdc4 	bl	8000cac <main>
	for (;;) ;
 8001124:	e7fe      	b.n	8001124 <Reset_Handler+0x30>
 8001126:	bf00      	nop
 8001128:	20000000 	.word	0x20000000
 800112c:	080081fc 	.word	0x080081fc
 8001130:	20000014 	.word	0x20000014
 8001134:	20000014 	.word	0x20000014
 8001138:	200008f4 	.word	0x200008f4

0800113c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800113c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	4b07      	ldr	r3, [pc, #28]	; (800115c <HAL_MspInit+0x20>)
 8001140:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001144:	f042 0202 	orr.w	r2, r2, #2
 8001148:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800114c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001158:	b002      	add	sp, #8
 800115a:	4770      	bx	lr
 800115c:	58024400 	.word	0x58024400

08001160 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <NMI_Handler>

08001162 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler>

08001164 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <MemManage_Handler>

08001166 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <BusFault_Handler>

08001168 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <UsageFault_Handler>

0800116a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800116a:	4770      	bx	lr

0800116c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116c:	4770      	bx	lr

0800116e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116e:	4770      	bx	lr

08001170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001170:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001172:	f000 f90f 	bl	8001394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001176:	bd08      	pop	{r3, pc}

08001178 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001178:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800117a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800117e:	f000 fb8b 	bl	8001898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001182:	bd08      	pop	{r3, pc}

08001184 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001184:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001186:	4802      	ldr	r0, [pc, #8]	; (8001190 <SDMMC1_IRQHandler+0xc>)
 8001188:	f004 f892 	bl	80052b0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800118c:	bd08      	pop	{r3, pc}
 800118e:	bf00      	nop
 8001190:	200001d8 	.word	0x200001d8

08001194 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001194:	4a27      	ldr	r2, [pc, #156]	; (8001234 <SystemInit+0xa0>)
 8001196:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800119a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800119e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011a2:	4b25      	ldr	r3, [pc, #148]	; (8001238 <SystemInit+0xa4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d806      	bhi.n	80011bc <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011ae:	4a22      	ldr	r2, [pc, #136]	; (8001238 <SystemInit+0xa4>)
 80011b0:	6813      	ldr	r3, [r2, #0]
 80011b2:	f023 030f 	bic.w	r3, r3, #15
 80011b6:	f043 0307 	orr.w	r3, r3, #7
 80011ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <SystemInit+0xa8>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	f042 0201 	orr.w	r2, r2, #1
 80011c4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011ca:	6819      	ldr	r1, [r3, #0]
 80011cc:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <SystemInit+0xac>)
 80011ce:	400a      	ands	r2, r1
 80011d0:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <SystemInit+0xa4>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f013 0f08 	tst.w	r3, #8
 80011da:	d006      	beq.n	80011ea <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011dc:	4a16      	ldr	r2, [pc, #88]	; (8001238 <SystemInit+0xa4>)
 80011de:	6813      	ldr	r3, [r2, #0]
 80011e0:	f023 030f 	bic.w	r3, r3, #15
 80011e4:	f043 0307 	orr.w	r3, r3, #7
 80011e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <SystemInit+0xa8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011f4:	4913      	ldr	r1, [pc, #76]	; (8001244 <SystemInit+0xb0>)
 80011f6:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011f8:	4913      	ldr	r1, [pc, #76]	; (8001248 <SystemInit+0xb4>)
 80011fa:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011fc:	4913      	ldr	r1, [pc, #76]	; (800124c <SystemInit+0xb8>)
 80011fe:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001200:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001202:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001204:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001206:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001208:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800120a:	6819      	ldr	r1, [r3, #0]
 800120c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001210:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001212:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <SystemInit+0xbc>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <SystemInit+0xc0>)
 800121a:	4013      	ands	r3, r2
 800121c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001220:	d203      	bcs.n	800122a <SystemInit+0x96>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <SystemInit+0xc4>)
 8001224:	2201      	movs	r2, #1
 8001226:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <SystemInit+0xc8>)
 800122c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001230:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00
 8001238:	52002000 	.word	0x52002000
 800123c:	58024400 	.word	0x58024400
 8001240:	eaf6ed7f 	.word	0xeaf6ed7f
 8001244:	02020200 	.word	0x02020200
 8001248:	01ff0000 	.word	0x01ff0000
 800124c:	01010280 	.word	0x01010280
 8001250:	5c001000 	.word	0x5c001000
 8001254:	ffff0000 	.word	0xffff0000
 8001258:	51008000 	.word	0x51008000
 800125c:	52004000 	.word	0x52004000

08001260 <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001260:	4770      	bx	lr
	...

08001264 <HAL_DeInit>:
{
 8001264:	b510      	push	{r4, lr}
  __HAL_RCC_AHB3_FORCE_RESET();
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_DeInit+0x68>)
 8001268:	4a19      	ldr	r2, [pc, #100]	; (80012d0 <HAL_DeInit+0x6c>)
 800126a:	67da      	str	r2, [r3, #124]	; 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
 800126c:	2400      	movs	r4, #0
 800126e:	67dc      	str	r4, [r3, #124]	; 0x7c
  __HAL_RCC_AHB1_FORCE_RESET();
 8001270:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <HAL_DeInit+0x70>)
 8001272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001276:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  __HAL_RCC_AHB2_FORCE_RESET();
 800127a:	f240 2271 	movw	r2, #625	; 0x271
 800127e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001282:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  __HAL_RCC_AHB4_FORCE_RESET();
 8001286:	4a14      	ldr	r2, [pc, #80]	; (80012d8 <HAL_DeInit+0x74>)
 8001288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();
 800128c:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  __HAL_RCC_APB3_FORCE_RESET();
 8001290:	2218      	movs	r2, #24
 8001292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();
 8001296:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
  __HAL_RCC_APB1L_FORCE_RESET();
 800129a:	4a10      	ldr	r2, [pc, #64]	; (80012dc <HAL_DeInit+0x78>)
 800129c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();
 80012a0:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
  __HAL_RCC_APB1H_FORCE_RESET();
 80012a4:	f44f 729b 	mov.w	r2, #310	; 0x136
 80012a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();
 80012ac:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
   __HAL_RCC_APB2_FORCE_RESET();
 80012b0:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <HAL_DeInit+0x7c>)
 80012b2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   __HAL_RCC_APB2_RELEASE_RESET();
 80012b6:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
  __HAL_RCC_APB4_FORCE_RESET();
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <HAL_DeInit+0x80>)
 80012bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
 80012c0:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
  HAL_MspDeInit();
 80012c4:	f7ff ffcc 	bl	8001260 <HAL_MspDeInit>
}
 80012c8:	4620      	mov	r0, r4
 80012ca:	bd10      	pop	{r4, pc}
 80012cc:	58024400 	.word	0x58024400
 80012d0:	00015031 	.word	0x00015031
 80012d4:	0a00c023 	.word	0x0a00c023
 80012d8:	032807ff 	.word	0x032807ff
 80012dc:	e8ffc3ff 	.word	0xe8ffc3ff
 80012e0:	31d73033 	.word	0x31d73033
 80012e4:	0020deaa 	.word	0x0020deaa

080012e8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_InitTick+0x44>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b90b      	cbnz	r3, 80012f2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80012ee:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80012f0:	4770      	bx	lr
{
 80012f2:	b510      	push	{r4, lr}
 80012f4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80012fe:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <HAL_InitTick+0x48>)
 8001300:	6810      	ldr	r0, [r2, #0]
 8001302:	fbb0 f0f3 	udiv	r0, r0, r3
 8001306:	f000 f8eb 	bl	80014e0 <HAL_SYSTICK_Config>
 800130a:	b968      	cbnz	r0, 8001328 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130c:	2c0f      	cmp	r4, #15
 800130e:	d901      	bls.n	8001314 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001310:	2001      	movs	r0, #1
 8001312:	e00a      	b.n	800132a <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001314:	2200      	movs	r2, #0
 8001316:	4621      	mov	r1, r4
 8001318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800131c:	f000 f878 	bl	8001410 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <HAL_InitTick+0x4c>)
 8001322:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8001324:	2000      	movs	r0, #0
 8001326:	e000      	b.n	800132a <HAL_InitTick+0x42>
      return HAL_ERROR;
 8001328:	2001      	movs	r0, #1
}
 800132a:	bd10      	pop	{r4, pc}
 800132c:	20000008 	.word	0x20000008
 8001330:	20000000 	.word	0x20000000
 8001334:	2000000c 	.word	0x2000000c

08001338 <HAL_Init>:
{
 8001338:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133a:	2003      	movs	r0, #3
 800133c:	f000 f856 	bl	80013ec <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001340:	f001 f9e0 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 8001344:	490f      	ldr	r1, [pc, #60]	; (8001384 <HAL_Init+0x4c>)
 8001346:	698b      	ldr	r3, [r1, #24]
 8001348:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800134c:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <HAL_Init+0x50>)
 800134e:	5cd3      	ldrb	r3, [r2, r3]
 8001350:	f003 031f 	and.w	r3, r3, #31
 8001354:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001356:	698b      	ldr	r3, [r1, #24]
 8001358:	f003 030f 	and.w	r3, r3, #15
 800135c:	5cd3      	ldrb	r3, [r2, r3]
 800135e:	f003 031f 	and.w	r3, r3, #31
 8001362:	fa20 f303 	lsr.w	r3, r0, r3
 8001366:	4a09      	ldr	r2, [pc, #36]	; (800138c <HAL_Init+0x54>)
 8001368:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_Init+0x58>)
 800136c:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff ffba 	bl	80012e8 <HAL_InitTick>
 8001374:	b110      	cbz	r0, 800137c <HAL_Init+0x44>
    return HAL_ERROR;
 8001376:	2401      	movs	r4, #1
}
 8001378:	4620      	mov	r0, r4
 800137a:	bd10      	pop	{r4, pc}
 800137c:	4604      	mov	r4, r0
  HAL_MspInit();
 800137e:	f7ff fedd 	bl	800113c <HAL_MspInit>
  return HAL_OK;
 8001382:	e7f9      	b.n	8001378 <HAL_Init+0x40>
 8001384:	58024400 	.word	0x58024400
 8001388:	08007d64 	.word	0x08007d64
 800138c:	20000004 	.word	0x20000004
 8001390:	20000000 	.word	0x20000000

08001394 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <HAL_IncTick+0x10>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4a03      	ldr	r2, [pc, #12]	; (80013a8 <HAL_IncTick+0x14>)
 800139a:	6811      	ldr	r1, [r2, #0]
 800139c:	440b      	add	r3, r1
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000008 	.word	0x20000008
 80013a8:	20000254 	.word	0x20000254

080013ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80013ac:	4b01      	ldr	r3, [pc, #4]	; (80013b4 <HAL_GetTick+0x8>)
 80013ae:	6818      	ldr	r0, [r3, #0]
}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000254 	.word	0x20000254

080013b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b8:	b538      	push	{r3, r4, r5, lr}
 80013ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80013bc:	f7ff fff6 	bl	80013ac <HAL_GetTick>
 80013c0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80013c6:	d002      	beq.n	80013ce <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <HAL_Delay+0x24>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ce:	f7ff ffed 	bl	80013ac <HAL_GetTick>
 80013d2:	1b40      	subs	r0, r0, r5
 80013d4:	42a0      	cmp	r0, r4
 80013d6:	d3fa      	bcc.n	80013ce <HAL_Delay+0x16>
  {
  }
}
 80013d8:	bd38      	pop	{r3, r4, r5, pc}
 80013da:	bf00      	nop
 80013dc:	20000008 	.word	0x20000008

080013e0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80013e0:	4b01      	ldr	r3, [pc, #4]	; (80013e8 <HAL_GetREVID+0x8>)
 80013e2:	6818      	ldr	r0, [r3, #0]
}
 80013e4:	0c00      	lsrs	r0, r0, #16
 80013e6:	4770      	bx	lr
 80013e8:	5c001000 	.word	0x5c001000

080013ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ec:	4906      	ldr	r1, [pc, #24]	; (8001408 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80013ee:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013f4:	041b      	lsls	r3, r3, #16
 80013f6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f8:	0200      	lsls	r0, r0, #8
 80013fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013fe:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001400:	4a02      	ldr	r2, [pc, #8]	; (800140c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001402:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8001404:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00
 800140c:	05fa0000 	.word	0x05fa0000

08001410 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <HAL_NVIC_SetPriority+0x60>)
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141a:	f1c3 0c07 	rsb	ip, r3, #7
 800141e:	f1bc 0f04 	cmp.w	ip, #4
 8001422:	bf28      	it	cs
 8001424:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001428:	f103 0e04 	add.w	lr, r3, #4
 800142c:	f1be 0f06 	cmp.w	lr, #6
 8001430:	d914      	bls.n	800145c <HAL_NVIC_SetPriority+0x4c>
 8001432:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8001438:	fa0e fc0c 	lsl.w	ip, lr, ip
 800143c:	ea21 010c 	bic.w	r1, r1, ip
 8001440:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001442:	fa0e f303 	lsl.w	r3, lr, r3
 8001446:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800144c:	2800      	cmp	r0, #0
 800144e:	db07      	blt.n	8001460 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	0109      	lsls	r1, r1, #4
 8001452:	b2c9      	uxtb	r1, r1
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <HAL_NVIC_SetPriority+0x64>)
 8001456:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001458:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145c:	2300      	movs	r3, #0
 800145e:	e7e9      	b.n	8001434 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001460:	f000 000f 	and.w	r0, r0, #15
 8001464:	0109      	lsls	r1, r1, #4
 8001466:	b2c9      	uxtb	r1, r1
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <HAL_NVIC_SetPriority+0x68>)
 800146a:	5419      	strb	r1, [r3, r0]
 800146c:	e7f4      	b.n	8001458 <HAL_NVIC_SetPriority+0x48>
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00
 8001474:	e000e400 	.word	0xe000e400
 8001478:	e000ed14 	.word	0xe000ed14

0800147c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800147c:	2800      	cmp	r0, #0
 800147e:	db07      	blt.n	8001490 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001480:	f000 021f 	and.w	r2, r0, #31
 8001484:	0940      	lsrs	r0, r0, #5
 8001486:	2301      	movs	r3, #1
 8001488:	4093      	lsls	r3, r2
 800148a:	4a02      	ldr	r2, [pc, #8]	; (8001494 <HAL_NVIC_EnableIRQ+0x18>)
 800148c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000e100 	.word	0xe000e100

08001498 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001498:	2800      	cmp	r0, #0
 800149a:	db0c      	blt.n	80014b6 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149c:	f000 021f 	and.w	r2, r0, #31
 80014a0:	0940      	lsrs	r0, r0, #5
 80014a2:	2301      	movs	r3, #1
 80014a4:	4093      	lsls	r3, r2
 80014a6:	3020      	adds	r0, #32
 80014a8:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <HAL_NVIC_DisableIRQ+0x20>)
 80014aa:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80014b2:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100

080014bc <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80014bc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80014c0:	4905      	ldr	r1, [pc, #20]	; (80014d8 <HAL_NVIC_SystemReset+0x1c>)
 80014c2:	68ca      	ldr	r2, [r1, #12]
 80014c4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <HAL_NVIC_SystemReset+0x20>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	60cb      	str	r3, [r1, #12]
 80014ce:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80014d2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80014d4:	e7fd      	b.n	80014d2 <HAL_NVIC_SystemReset+0x16>
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00
 80014dc:	05fa0004 	.word	0x05fa0004

080014e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e0:	3801      	subs	r0, #1
 80014e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80014e6:	d20b      	bcs.n	8001500 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80014ec:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ee:	4a05      	ldr	r2, [pc, #20]	; (8001504 <HAL_SYSTICK_Config+0x24>)
 80014f0:	21f0      	movs	r1, #240	; 0xf0
 80014f2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f6:	2000      	movs	r0, #0
 80014f8:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fa:	2207      	movs	r2, #7
 80014fc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014fe:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001500:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150a:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 800150c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800150e:	e06b      	b.n	80015e8 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001510:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001512:	005e      	lsls	r6, r3, #1
 8001514:	2403      	movs	r4, #3
 8001516:	40b4      	lsls	r4, r6
 8001518:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800151c:	68cc      	ldr	r4, [r1, #12]
 800151e:	40b4      	lsls	r4, r6
 8001520:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001522:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001524:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001526:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800152a:	684c      	ldr	r4, [r1, #4]
 800152c:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8001530:	409c      	lsls	r4, r3
 8001532:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8001536:	6044      	str	r4, [r0, #4]
 8001538:	e068      	b.n	800160c <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800153a:	08dd      	lsrs	r5, r3, #3
 800153c:	3508      	adds	r5, #8
 800153e:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001542:	f003 0407 	and.w	r4, r3, #7
 8001546:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800154a:	240f      	movs	r4, #15
 800154c:	fa04 f40c 	lsl.w	r4, r4, ip
 8001550:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001554:	690c      	ldr	r4, [r1, #16]
 8001556:	fa04 f40c 	lsl.w	r4, r4, ip
 800155a:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 800155e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8001562:	e06b      	b.n	800163c <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001564:	2409      	movs	r4, #9
 8001566:	e000      	b.n	800156a <HAL_GPIO_Init+0x62>
 8001568:	2400      	movs	r4, #0
 800156a:	fa04 f40e 	lsl.w	r4, r4, lr
 800156e:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001570:	f10c 0c02 	add.w	ip, ip, #2
 8001574:	4d69      	ldr	r5, [pc, #420]	; (800171c <HAL_GPIO_Init+0x214>)
 8001576:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800157a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800157e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001580:	43d4      	mvns	r4, r2
 8001582:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001586:	684f      	ldr	r7, [r1, #4]
 8001588:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800158c:	d001      	beq.n	8001592 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 800158e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001592:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001596:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8001598:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800159a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800159e:	684f      	ldr	r7, [r1, #4]
 80015a0:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 80015a4:	d001      	beq.n	80015aa <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 80015a6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80015aa:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80015ae:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015b0:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 80015b4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015b8:	684f      	ldr	r7, [r1, #4]
 80015ba:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80015be:	d001      	beq.n	80015c4 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80015c0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015c4:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80015c8:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015cc:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 80015d0:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015d2:	684e      	ldr	r6, [r1, #4]
 80015d4:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80015d8:	d001      	beq.n	80015de <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 80015da:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015e2:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 80015e6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015e8:	680a      	ldr	r2, [r1, #0]
 80015ea:	fa32 f403 	lsrs.w	r4, r2, r3
 80015ee:	f000 8092 	beq.w	8001716 <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015f2:	f04f 0c01 	mov.w	ip, #1
 80015f6:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 80015fa:	ea1c 0202 	ands.w	r2, ip, r2
 80015fe:	d0f2      	beq.n	80015e6 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001600:	684c      	ldr	r4, [r1, #4]
 8001602:	f004 0403 	and.w	r4, r4, #3
 8001606:	3c01      	subs	r4, #1
 8001608:	2c01      	cmp	r4, #1
 800160a:	d981      	bls.n	8001510 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800160c:	684c      	ldr	r4, [r1, #4]
 800160e:	f004 0403 	and.w	r4, r4, #3
 8001612:	2c03      	cmp	r4, #3
 8001614:	d00c      	beq.n	8001630 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 8001616:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001618:	005d      	lsls	r5, r3, #1
 800161a:	f04f 0c03 	mov.w	ip, #3
 800161e:	fa0c fc05 	lsl.w	ip, ip, r5
 8001622:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001626:	688c      	ldr	r4, [r1, #8]
 8001628:	40ac      	lsls	r4, r5
 800162a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 800162e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001630:	684c      	ldr	r4, [r1, #4]
 8001632:	f004 0403 	and.w	r4, r4, #3
 8001636:	2c02      	cmp	r4, #2
 8001638:	f43f af7f 	beq.w	800153a <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 800163c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800163e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001642:	f04f 0c03 	mov.w	ip, #3
 8001646:	fa0c fc0e 	lsl.w	ip, ip, lr
 800164a:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800164e:	684c      	ldr	r4, [r1, #4]
 8001650:	f004 0403 	and.w	r4, r4, #3
 8001654:	fa04 f40e 	lsl.w	r4, r4, lr
 8001658:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800165c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800165e:	684c      	ldr	r4, [r1, #4]
 8001660:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8001664:	d0bf      	beq.n	80015e6 <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	4c2e      	ldr	r4, [pc, #184]	; (8001720 <HAL_GPIO_Init+0x218>)
 8001668:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 800166c:	f045 0502 	orr.w	r5, r5, #2
 8001670:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 8001674:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8001678:	f004 0402 	and.w	r4, r4, #2
 800167c:	9401      	str	r4, [sp, #4]
 800167e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001680:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8001684:	f10c 0502 	add.w	r5, ip, #2
 8001688:	4c24      	ldr	r4, [pc, #144]	; (800171c <HAL_GPIO_Init+0x214>)
 800168a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800168e:	f003 0403 	and.w	r4, r3, #3
 8001692:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8001696:	240f      	movs	r4, #15
 8001698:	fa04 f40e 	lsl.w	r4, r4, lr
 800169c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016a0:	4c20      	ldr	r4, [pc, #128]	; (8001724 <HAL_GPIO_Init+0x21c>)
 80016a2:	42a0      	cmp	r0, r4
 80016a4:	f43f af60 	beq.w	8001568 <HAL_GPIO_Init+0x60>
 80016a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80016ac:	42a0      	cmp	r0, r4
 80016ae:	d022      	beq.n	80016f6 <HAL_GPIO_Init+0x1ee>
 80016b0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80016b4:	42a0      	cmp	r0, r4
 80016b6:	d020      	beq.n	80016fa <HAL_GPIO_Init+0x1f2>
 80016b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80016bc:	42a0      	cmp	r0, r4
 80016be:	d01e      	beq.n	80016fe <HAL_GPIO_Init+0x1f6>
 80016c0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80016c4:	42a0      	cmp	r0, r4
 80016c6:	d01c      	beq.n	8001702 <HAL_GPIO_Init+0x1fa>
 80016c8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80016cc:	42a0      	cmp	r0, r4
 80016ce:	d01a      	beq.n	8001706 <HAL_GPIO_Init+0x1fe>
 80016d0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80016d4:	42a0      	cmp	r0, r4
 80016d6:	d018      	beq.n	800170a <HAL_GPIO_Init+0x202>
 80016d8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80016dc:	42a0      	cmp	r0, r4
 80016de:	d016      	beq.n	800170e <HAL_GPIO_Init+0x206>
 80016e0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80016e4:	42a0      	cmp	r0, r4
 80016e6:	d014      	beq.n	8001712 <HAL_GPIO_Init+0x20a>
 80016e8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80016ec:	42a0      	cmp	r0, r4
 80016ee:	f43f af39 	beq.w	8001564 <HAL_GPIO_Init+0x5c>
 80016f2:	240a      	movs	r4, #10
 80016f4:	e739      	b.n	800156a <HAL_GPIO_Init+0x62>
 80016f6:	2401      	movs	r4, #1
 80016f8:	e737      	b.n	800156a <HAL_GPIO_Init+0x62>
 80016fa:	2402      	movs	r4, #2
 80016fc:	e735      	b.n	800156a <HAL_GPIO_Init+0x62>
 80016fe:	2403      	movs	r4, #3
 8001700:	e733      	b.n	800156a <HAL_GPIO_Init+0x62>
 8001702:	2404      	movs	r4, #4
 8001704:	e731      	b.n	800156a <HAL_GPIO_Init+0x62>
 8001706:	2405      	movs	r4, #5
 8001708:	e72f      	b.n	800156a <HAL_GPIO_Init+0x62>
 800170a:	2406      	movs	r4, #6
 800170c:	e72d      	b.n	800156a <HAL_GPIO_Init+0x62>
 800170e:	2407      	movs	r4, #7
 8001710:	e72b      	b.n	800156a <HAL_GPIO_Init+0x62>
 8001712:	2408      	movs	r4, #8
 8001714:	e729      	b.n	800156a <HAL_GPIO_Init+0x62>
  }
}
 8001716:	b003      	add	sp, #12
 8001718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800171a:	bf00      	nop
 800171c:	58000400 	.word	0x58000400
 8001720:	58024400 	.word	0x58024400
 8001724:	58020000 	.word	0x58020000

08001728 <HAL_GPIO_DeInit>:
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 8001728:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800172a:	fa31 f203 	lsrs.w	r2, r1, r3
 800172e:	f000 809d 	beq.w	800186c <HAL_GPIO_DeInit+0x144>
{
 8001732:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001734:	e02e      	b.n	8001794 <HAL_GPIO_DeInit+0x6c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001736:	2509      	movs	r5, #9
 8001738:	e000      	b.n	800173c <HAL_GPIO_DeInit+0x14>
 800173a:	2500      	movs	r5, #0
 800173c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8001740:	45a4      	cmp	ip, r4
 8001742:	d072      	beq.n	800182a <HAL_GPIO_DeInit+0x102>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001744:	6804      	ldr	r4, [r0, #0]
 8001746:	005d      	lsls	r5, r3, #1
 8001748:	f04f 0c03 	mov.w	ip, #3
 800174c:	fa0c fc05 	lsl.w	ip, ip, r5
 8001750:	ea44 040c 	orr.w	r4, r4, ip
 8001754:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8001756:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800175a:	f10e 0e08 	add.w	lr, lr, #8
 800175e:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8001762:	f003 0507 	and.w	r5, r3, #7
 8001766:	00ae      	lsls	r6, r5, #2
 8001768:	250f      	movs	r5, #15
 800176a:	40b5      	lsls	r5, r6
 800176c:	ea24 0405 	bic.w	r4, r4, r5
 8001770:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001774:	68c4      	ldr	r4, [r0, #12]
 8001776:	ea24 040c 	bic.w	r4, r4, ip
 800177a:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800177c:	6844      	ldr	r4, [r0, #4]
 800177e:	ea24 0202 	bic.w	r2, r4, r2
 8001782:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001784:	6882      	ldr	r2, [r0, #8]
 8001786:	ea22 020c 	bic.w	r2, r2, ip
 800178a:	6082      	str	r2, [r0, #8]
    }

    position++;
 800178c:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 800178e:	fa31 f203 	lsrs.w	r2, r1, r3
 8001792:	d06a      	beq.n	800186a <HAL_GPIO_DeInit+0x142>
    iocurrent = GPIO_Pin & (1UL << position) ;
 8001794:	2201      	movs	r2, #1
 8001796:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8001798:	ea12 0e01 	ands.w	lr, r2, r1
 800179c:	d0f6      	beq.n	800178c <HAL_GPIO_DeInit+0x64>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800179e:	089e      	lsrs	r6, r3, #2
 80017a0:	1cb5      	adds	r5, r6, #2
 80017a2:	4c33      	ldr	r4, [pc, #204]	; (8001870 <HAL_GPIO_DeInit+0x148>)
 80017a4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80017a8:	f003 0c03 	and.w	ip, r3, #3
 80017ac:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80017b0:	250f      	movs	r5, #15
 80017b2:	fa05 f70c 	lsl.w	r7, r5, ip
 80017b6:	403c      	ands	r4, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80017b8:	4d2e      	ldr	r5, [pc, #184]	; (8001874 <HAL_GPIO_DeInit+0x14c>)
 80017ba:	42a8      	cmp	r0, r5
 80017bc:	d0bd      	beq.n	800173a <HAL_GPIO_DeInit+0x12>
 80017be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017c2:	42a8      	cmp	r0, r5
 80017c4:	d021      	beq.n	800180a <HAL_GPIO_DeInit+0xe2>
 80017c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017ca:	42a8      	cmp	r0, r5
 80017cc:	d01f      	beq.n	800180e <HAL_GPIO_DeInit+0xe6>
 80017ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017d2:	42a8      	cmp	r0, r5
 80017d4:	d01d      	beq.n	8001812 <HAL_GPIO_DeInit+0xea>
 80017d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017da:	42a8      	cmp	r0, r5
 80017dc:	d01b      	beq.n	8001816 <HAL_GPIO_DeInit+0xee>
 80017de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017e2:	42a8      	cmp	r0, r5
 80017e4:	d019      	beq.n	800181a <HAL_GPIO_DeInit+0xf2>
 80017e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017ea:	42a8      	cmp	r0, r5
 80017ec:	d017      	beq.n	800181e <HAL_GPIO_DeInit+0xf6>
 80017ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017f2:	42a8      	cmp	r0, r5
 80017f4:	d015      	beq.n	8001822 <HAL_GPIO_DeInit+0xfa>
 80017f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017fa:	42a8      	cmp	r0, r5
 80017fc:	d013      	beq.n	8001826 <HAL_GPIO_DeInit+0xfe>
 80017fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001802:	42a8      	cmp	r0, r5
 8001804:	d097      	beq.n	8001736 <HAL_GPIO_DeInit+0xe>
 8001806:	250a      	movs	r5, #10
 8001808:	e798      	b.n	800173c <HAL_GPIO_DeInit+0x14>
 800180a:	2501      	movs	r5, #1
 800180c:	e796      	b.n	800173c <HAL_GPIO_DeInit+0x14>
 800180e:	2502      	movs	r5, #2
 8001810:	e794      	b.n	800173c <HAL_GPIO_DeInit+0x14>
 8001812:	2503      	movs	r5, #3
 8001814:	e792      	b.n	800173c <HAL_GPIO_DeInit+0x14>
 8001816:	2504      	movs	r5, #4
 8001818:	e790      	b.n	800173c <HAL_GPIO_DeInit+0x14>
 800181a:	2505      	movs	r5, #5
 800181c:	e78e      	b.n	800173c <HAL_GPIO_DeInit+0x14>
 800181e:	2506      	movs	r5, #6
 8001820:	e78c      	b.n	800173c <HAL_GPIO_DeInit+0x14>
 8001822:	2507      	movs	r5, #7
 8001824:	e78a      	b.n	800173c <HAL_GPIO_DeInit+0x14>
 8001826:	2508      	movs	r5, #8
 8001828:	e788      	b.n	800173c <HAL_GPIO_DeInit+0x14>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800182a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800182e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8001832:	ea25 050e 	bic.w	r5, r5, lr
 8001836:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800183a:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800183e:	ea25 050e 	bic.w	r5, r5, lr
 8001842:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8001846:	6865      	ldr	r5, [r4, #4]
 8001848:	ea25 050e 	bic.w	r5, r5, lr
 800184c:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800184e:	6825      	ldr	r5, [r4, #0]
 8001850:	ea25 050e 	bic.w	r5, r5, lr
 8001854:	6025      	str	r5, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001856:	f8df c018 	ldr.w	ip, [pc, #24]	; 8001870 <HAL_GPIO_DeInit+0x148>
 800185a:	1cb4      	adds	r4, r6, #2
 800185c:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 8001860:	ea25 0507 	bic.w	r5, r5, r7
 8001864:	f84c 5024 	str.w	r5, [ip, r4, lsl #2]
 8001868:	e76c      	b.n	8001744 <HAL_GPIO_DeInit+0x1c>
  }
}
 800186a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	58000400 	.word	0x58000400
 8001874:	58020000 	.word	0x58020000

08001878 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001878:	b10a      	cbz	r2, 800187e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800187a:	6181      	str	r1, [r0, #24]
 800187c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800187e:	0409      	lsls	r1, r1, #16
 8001880:	6181      	str	r1, [r0, #24]
  }
}
 8001882:	4770      	bx	lr

08001884 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001884:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001886:	ea01 0203 	and.w	r2, r1, r3
 800188a:	ea21 0103 	bic.w	r1, r1, r3
 800188e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001892:	6181      	str	r1, [r0, #24]
}
 8001894:	4770      	bx	lr

08001896 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001896:	4770      	bx	lr

08001898 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001898:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800189a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a2:	4203      	tst	r3, r0
 80018a4:	d100      	bne.n	80018a8 <HAL_GPIO_EXTI_IRQHandler+0x10>
}
 80018a6:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ac:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018b0:	f7ff fff1 	bl	8001896 <HAL_GPIO_EXTI_Callback>
}
 80018b4:	e7f7      	b.n	80018a6 <HAL_GPIO_EXTI_IRQHandler+0xe>
	...

080018b8 <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_PWREx_ConfigSupply+0x50>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f013 0f04 	tst.w	r3, #4
 80018c0:	d107      	bne.n	80018d2 <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_PWREx_ConfigSupply+0x50>)
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	4283      	cmp	r3, r0
 80018cc:	d01a      	beq.n	8001904 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80018ce:	2001      	movs	r0, #1
 80018d0:	4770      	bx	lr
{
 80018d2:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80018d4:	4a0c      	ldr	r2, [pc, #48]	; (8001908 <HAL_PWREx_ConfigSupply+0x50>)
 80018d6:	68d3      	ldr	r3, [r2, #12]
 80018d8:	f023 0307 	bic.w	r3, r3, #7
 80018dc:	4318      	orrs	r0, r3
 80018de:	60d0      	str	r0, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80018e0:	f7ff fd64 	bl	80013ac <HAL_GetTick>
 80018e4:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <HAL_PWREx_ConfigSupply+0x50>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80018ee:	d107      	bne.n	8001900 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018f0:	f7ff fd5c 	bl	80013ac <HAL_GetTick>
 80018f4:	1b00      	subs	r0, r0, r4
 80018f6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80018fa:	d9f4      	bls.n	80018e6 <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 80018fc:	2001      	movs	r0, #1
 80018fe:	e000      	b.n	8001902 <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001900:	2000      	movs	r0, #0
}
 8001902:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8001904:	2000      	movs	r0, #0
}
 8001906:	4770      	bx	lr
 8001908:	58024800 	.word	0x58024800

0800190c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800190c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800190e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001910:	b133      	cbz	r3, 8001920 <QSPI_Config+0x14>
 8001912:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8001916:	d003      	beq.n	8001920 <QSPI_Config+0x14>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8001918:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800191a:	6804      	ldr	r4, [r0, #0]
 800191c:	3b01      	subs	r3, #1
 800191e:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8001920:	698c      	ldr	r4, [r1, #24]
 8001922:	2c00      	cmp	r4, #0
 8001924:	d06e      	beq.n	8001a04 <QSPI_Config+0xf8>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8001926:	6a0e      	ldr	r6, [r1, #32]
 8001928:	2e00      	cmp	r6, #0
 800192a:	d03b      	beq.n	80019a4 <QSPI_Config+0x98>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800192c:	6803      	ldr	r3, [r0, #0]
 800192e:	688c      	ldr	r4, [r1, #8]
 8001930:	61dc      	str	r4, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001932:	69cc      	ldr	r4, [r1, #28]
 8001934:	b1f4      	cbz	r4, 8001974 <QSPI_Config+0x68>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001936:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001938:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800193a:	432b      	orrs	r3, r5
 800193c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800193e:	432b      	orrs	r3, r5
 8001940:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8001942:	432b      	orrs	r3, r5
 8001944:	694d      	ldr	r5, [r1, #20]
 8001946:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
 800194a:	690d      	ldr	r5, [r1, #16]
 800194c:	432b      	orrs	r3, r5
 800194e:	6a0d      	ldr	r5, [r1, #32]
 8001950:	432b      	orrs	r3, r5
 8001952:	68cd      	ldr	r5, [r1, #12]
 8001954:	432b      	orrs	r3, r5
 8001956:	4323      	orrs	r3, r4
 8001958:	698c      	ldr	r4, [r1, #24]
 800195a:	4323      	orrs	r3, r4
 800195c:	680c      	ldr	r4, [r1, #0]
 800195e:	4323      	orrs	r3, r4
 8001960:	6804      	ldr	r4, [r0, #0]
 8001962:	4313      	orrs	r3, r2
 8001964:	6163      	str	r3, [r4, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001966:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 800196a:	d019      	beq.n	80019a0 <QSPI_Config+0x94>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800196c:	6803      	ldr	r3, [r0, #0]
 800196e:	684a      	ldr	r2, [r1, #4]
 8001970:	619a      	str	r2, [r3, #24]
 8001972:	e015      	b.n	80019a0 <QSPI_Config+0x94>
      }
      else
      {
        /*---- Command with instruction and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001974:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001976:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8001978:	432b      	orrs	r3, r5
 800197a:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800197c:	432b      	orrs	r3, r5
 800197e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8001980:	432b      	orrs	r3, r5
 8001982:	694d      	ldr	r5, [r1, #20]
 8001984:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
 8001988:	690d      	ldr	r5, [r1, #16]
 800198a:	432b      	orrs	r3, r5
 800198c:	6a0d      	ldr	r5, [r1, #32]
 800198e:	432b      	orrs	r3, r5
 8001990:	4323      	orrs	r3, r4
 8001992:	698c      	ldr	r4, [r1, #24]
 8001994:	4323      	orrs	r3, r4
 8001996:	680c      	ldr	r4, [r1, #0]
 8001998:	4323      	orrs	r3, r4
 800199a:	6801      	ldr	r1, [r0, #0]
 800199c:	431a      	orrs	r2, r3
 800199e:	614a      	str	r2, [r1, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80019a0:	bcf0      	pop	{r4, r5, r6, r7}
 80019a2:	4770      	bx	lr
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80019a4:	69cd      	ldr	r5, [r1, #28]
 80019a6:	b1d5      	cbz	r5, 80019de <QSPI_Config+0xd2>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80019a8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80019aa:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 80019ac:	433b      	orrs	r3, r7
 80019ae:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 80019b0:	433b      	orrs	r3, r7
 80019b2:	6a4f      	ldr	r7, [r1, #36]	; 0x24
 80019b4:	433b      	orrs	r3, r7
 80019b6:	694f      	ldr	r7, [r1, #20]
 80019b8:	ea43 4387 	orr.w	r3, r3, r7, lsl #18
 80019bc:	4333      	orrs	r3, r6
 80019be:	68ce      	ldr	r6, [r1, #12]
 80019c0:	4333      	orrs	r3, r6
 80019c2:	432b      	orrs	r3, r5
 80019c4:	4323      	orrs	r3, r4
 80019c6:	680c      	ldr	r4, [r1, #0]
 80019c8:	4323      	orrs	r3, r4
 80019ca:	6804      	ldr	r4, [r0, #0]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80019d0:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 80019d4:	d0e4      	beq.n	80019a0 <QSPI_Config+0x94>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80019d6:	6803      	ldr	r3, [r0, #0]
 80019d8:	684a      	ldr	r2, [r1, #4]
 80019da:	619a      	str	r2, [r3, #24]
 80019dc:	e7e0      	b.n	80019a0 <QSPI_Config+0x94>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80019de:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80019e0:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 80019e2:	433b      	orrs	r3, r7
 80019e4:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 80019e6:	433b      	orrs	r3, r7
 80019e8:	6a4f      	ldr	r7, [r1, #36]	; 0x24
 80019ea:	433b      	orrs	r3, r7
 80019ec:	694f      	ldr	r7, [r1, #20]
 80019ee:	ea43 4387 	orr.w	r3, r3, r7, lsl #18
 80019f2:	4333      	orrs	r3, r6
 80019f4:	432b      	orrs	r3, r5
 80019f6:	4323      	orrs	r3, r4
 80019f8:	680c      	ldr	r4, [r1, #0]
 80019fa:	4323      	orrs	r3, r4
 80019fc:	6801      	ldr	r1, [r0, #0]
 80019fe:	431a      	orrs	r2, r3
 8001a00:	614a      	str	r2, [r1, #20]
 8001a02:	e7cd      	b.n	80019a0 <QSPI_Config+0x94>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8001a04:	6a0d      	ldr	r5, [r1, #32]
 8001a06:	2d00      	cmp	r5, #0
 8001a08:	d037      	beq.n	8001a7a <QSPI_Config+0x16e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8001a0a:	6803      	ldr	r3, [r0, #0]
 8001a0c:	688c      	ldr	r4, [r1, #8]
 8001a0e:	61dc      	str	r4, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001a10:	69cd      	ldr	r5, [r1, #28]
 8001a12:	b1e5      	cbz	r5, 8001a4e <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001a14:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001a16:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8001a18:	4323      	orrs	r3, r4
 8001a1a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8001a1c:	4323      	orrs	r3, r4
 8001a1e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8001a20:	4323      	orrs	r3, r4
 8001a22:	694c      	ldr	r4, [r1, #20]
 8001a24:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8001a28:	690c      	ldr	r4, [r1, #16]
 8001a2a:	4323      	orrs	r3, r4
 8001a2c:	6a0c      	ldr	r4, [r1, #32]
 8001a2e:	4323      	orrs	r3, r4
 8001a30:	68cc      	ldr	r4, [r1, #12]
 8001a32:	4323      	orrs	r3, r4
 8001a34:	432b      	orrs	r3, r5
 8001a36:	698c      	ldr	r4, [r1, #24]
 8001a38:	4323      	orrs	r3, r4
 8001a3a:	6804      	ldr	r4, [r0, #0]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001a40:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8001a44:	d0ac      	beq.n	80019a0 <QSPI_Config+0x94>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001a46:	6803      	ldr	r3, [r0, #0]
 8001a48:	684a      	ldr	r2, [r1, #4]
 8001a4a:	619a      	str	r2, [r3, #24]
 8001a4c:	e7a8      	b.n	80019a0 <QSPI_Config+0x94>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001a4e:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8001a50:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001a52:	431c      	orrs	r4, r3
 8001a54:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001a56:	431c      	orrs	r4, r3
 8001a58:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001a5a:	431c      	orrs	r4, r3
 8001a5c:	694b      	ldr	r3, [r1, #20]
 8001a5e:	ea44 4483 	orr.w	r4, r4, r3, lsl #18
 8001a62:	690b      	ldr	r3, [r1, #16]
 8001a64:	431c      	orrs	r4, r3
 8001a66:	6a0b      	ldr	r3, [r1, #32]
 8001a68:	431c      	orrs	r4, r3
 8001a6a:	ea45 0304 	orr.w	r3, r5, r4
 8001a6e:	698c      	ldr	r4, [r1, #24]
 8001a70:	4323      	orrs	r3, r4
 8001a72:	6801      	ldr	r1, [r0, #0]
 8001a74:	431a      	orrs	r2, r3
 8001a76:	614a      	str	r2, [r1, #20]
 8001a78:	e792      	b.n	80019a0 <QSPI_Config+0x94>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001a7a:	69ce      	ldr	r6, [r1, #28]
 8001a7c:	b1ce      	cbz	r6, 8001ab2 <QSPI_Config+0x1a6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001a7e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001a80:	6acf      	ldr	r7, [r1, #44]	; 0x2c
 8001a82:	433b      	orrs	r3, r7
 8001a84:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 8001a86:	433b      	orrs	r3, r7
 8001a88:	6a4f      	ldr	r7, [r1, #36]	; 0x24
 8001a8a:	433b      	orrs	r3, r7
 8001a8c:	694f      	ldr	r7, [r1, #20]
 8001a8e:	ea43 4387 	orr.w	r3, r3, r7, lsl #18
 8001a92:	432b      	orrs	r3, r5
 8001a94:	68cd      	ldr	r5, [r1, #12]
 8001a96:	432b      	orrs	r3, r5
 8001a98:	4333      	orrs	r3, r6
 8001a9a:	4323      	orrs	r3, r4
 8001a9c:	6804      	ldr	r4, [r0, #0]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001aa2:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8001aa6:	f43f af7b 	beq.w	80019a0 <QSPI_Config+0x94>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001aaa:	6803      	ldr	r3, [r0, #0]
 8001aac:	684a      	ldr	r2, [r1, #4]
 8001aae:	619a      	str	r2, [r3, #24]
 8001ab0:	e776      	b.n	80019a0 <QSPI_Config+0x94>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8001ab2:	f8d1 c024 	ldr.w	ip, [r1, #36]	; 0x24
 8001ab6:	f1bc 0f00 	cmp.w	ip, #0
 8001aba:	f43f af71 	beq.w	80019a0 <QSPI_Config+0x94>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001abe:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001ac0:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 8001ac2:	433b      	orrs	r3, r7
 8001ac4:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 8001ac6:	433b      	orrs	r3, r7
 8001ac8:	ea4c 0703 	orr.w	r7, ip, r3
 8001acc:	694b      	ldr	r3, [r1, #20]
 8001ace:	ea47 4383 	orr.w	r3, r7, r3, lsl #18
 8001ad2:	431d      	orrs	r5, r3
 8001ad4:	ea46 0305 	orr.w	r3, r6, r5
 8001ad8:	4323      	orrs	r3, r4
 8001ada:	6801      	ldr	r1, [r0, #0]
 8001adc:	431a      	orrs	r2, r3
 8001ade:	614a      	str	r2, [r1, #20]
}
 8001ae0:	e75e      	b.n	80019a0 <QSPI_Config+0x94>

08001ae2 <QSPI_WaitFlagStateUntilTimeout>:
{
 8001ae2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ae6:	4605      	mov	r5, r0
 8001ae8:	460f      	mov	r7, r1
 8001aea:	4616      	mov	r6, r2
 8001aec:	4699      	mov	r9, r3
 8001aee:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001af2:	682c      	ldr	r4, [r5, #0]
 8001af4:	68a4      	ldr	r4, [r4, #8]
 8001af6:	423c      	tst	r4, r7
 8001af8:	bf14      	ite	ne
 8001afa:	f04f 0c01 	movne.w	ip, #1
 8001afe:	f04f 0c00 	moveq.w	ip, #0
 8001b02:	45b4      	cmp	ip, r6
 8001b04:	d014      	beq.n	8001b30 <QSPI_WaitFlagStateUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8001b06:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8001b0a:	d0f2      	beq.n	8001af2 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b0c:	f7ff fc4e 	bl	80013ac <HAL_GetTick>
 8001b10:	eba0 0009 	sub.w	r0, r0, r9
 8001b14:	4540      	cmp	r0, r8
 8001b16:	d802      	bhi.n	8001b1e <QSPI_WaitFlagStateUntilTimeout+0x3c>
 8001b18:	f1b8 0f00 	cmp.w	r8, #0
 8001b1c:	d1e9      	bne.n	8001af2 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001b1e:	2304      	movs	r3, #4
 8001b20:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001b24:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	646b      	str	r3, [r5, #68]	; 0x44
        return HAL_ERROR;
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	e000      	b.n	8001b32 <QSPI_WaitFlagStateUntilTimeout+0x50>
  return HAL_OK;
 8001b30:	2000      	movs	r0, #0
}
 8001b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001b36 <HAL_QSPI_DeInit>:
  if(hqspi == NULL)
 8001b36:	b168      	cbz	r0, 8001b54 <HAL_QSPI_DeInit+0x1e>
{
 8001b38:	b510      	push	{r4, lr}
 8001b3a:	4604      	mov	r4, r0
  __HAL_QSPI_DISABLE(hqspi);
 8001b3c:	6802      	ldr	r2, [r0, #0]
 8001b3e:	6813      	ldr	r3, [r2, #0]
 8001b40:	f023 0301 	bic.w	r3, r3, #1
 8001b44:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 8001b46:	f7ff fa03 	bl	8000f50 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 8001b4e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
}
 8001b52:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b54:	2001      	movs	r0, #1
}
 8001b56:	4770      	bx	lr

08001b58 <HAL_QSPI_Command>:
{
 8001b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	4604      	mov	r4, r0
 8001b60:	460f      	mov	r7, r1
 8001b62:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8001b64:	f7ff fc22 	bl	80013ac <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8001b68:	f894 c040 	ldrb.w	ip, [r4, #64]	; 0x40
 8001b6c:	fa5f fc8c 	uxtb.w	ip, ip
 8001b70:	f1bc 0f01 	cmp.w	ip, #1
 8001b74:	d03c      	beq.n	8001bf0 <HAL_QSPI_Command+0x98>
 8001b76:	4605      	mov	r5, r0
 8001b78:	2301      	movs	r3, #1
 8001b7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001b7e:	f894 c041 	ldrb.w	ip, [r4, #65]	; 0x41
 8001b82:	fa5f fc8c 	uxtb.w	ip, ip
 8001b86:	459c      	cmp	ip, r3
 8001b88:	d008      	beq.n	8001b9c <HAL_QSPI_Command+0x44>
    status = HAL_BUSY;
 8001b8a:	f04f 0802 	mov.w	r8, #2
  __HAL_UNLOCK(hqspi);
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8001b94:	4640      	mov	r0, r8
 8001b96:	b002      	add	sp, #8
 8001b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001ba6:	9600      	str	r6, [sp, #0]
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2120      	movs	r1, #32
 8001bac:	4620      	mov	r0, r4
 8001bae:	f7ff ff98 	bl	8001ae2 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8001bb2:	4680      	mov	r8, r0
 8001bb4:	2800      	cmp	r0, #0
 8001bb6:	d1ea      	bne.n	8001b8e <HAL_QSPI_Command+0x36>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4639      	mov	r1, r7
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	f7ff fea5 	bl	800190c <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	b11b      	cbz	r3, 8001bce <HAL_QSPI_Command+0x76>
        hqspi->State = HAL_QSPI_STATE_READY;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8001bcc:	e7df      	b.n	8001b8e <HAL_QSPI_Command+0x36>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001bce:	9600      	str	r6, [sp, #0]
 8001bd0:	462b      	mov	r3, r5
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	2102      	movs	r1, #2
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f7ff ff83 	bl	8001ae2 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8001bdc:	4680      	mov	r8, r0
 8001bde:	2800      	cmp	r0, #0
 8001be0:	d1d5      	bne.n	8001b8e <HAL_QSPI_Command+0x36>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001be2:	6823      	ldr	r3, [r4, #0]
 8001be4:	2202      	movs	r2, #2
 8001be6:	60da      	str	r2, [r3, #12]
          hqspi->State = HAL_QSPI_STATE_READY;
 8001be8:	2301      	movs	r3, #1
 8001bea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8001bee:	e7ce      	b.n	8001b8e <HAL_QSPI_Command+0x36>
  __HAL_LOCK(hqspi);
 8001bf0:	f04f 0802 	mov.w	r8, #2
 8001bf4:	e7ce      	b.n	8001b94 <HAL_QSPI_Command+0x3c>

08001bf6 <HAL_QSPI_Transmit>:
{
 8001bf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	4604      	mov	r4, r0
 8001bfe:	4689      	mov	r9, r1
 8001c00:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8001c02:	f7ff fbd3 	bl	80013ac <HAL_GetTick>
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001c06:	f8d4 8000 	ldr.w	r8, [r4]
  __HAL_LOCK(hqspi);
 8001c0a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d057      	beq.n	8001cc4 <HAL_QSPI_Transmit+0xce>
 8001c14:	4606      	mov	r6, r0
 8001c16:	2301      	movs	r3, #1
 8001c18:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001c1c:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 8001c20:	b2ed      	uxtb	r5, r5
 8001c22:	429d      	cmp	r5, r3
 8001c24:	d007      	beq.n	8001c36 <HAL_QSPI_Transmit+0x40>
    status = HAL_BUSY;
 8001c26:	2502      	movs	r5, #2
  __HAL_UNLOCK(hqspi);
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8001c2e:	4628      	mov	r0, r5
 8001c30:	b003      	add	sp, #12
 8001c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	6463      	str	r3, [r4, #68]	; 0x44
    if(pData != NULL )
 8001c3a:	f1b9 0f00 	cmp.w	r9, #0
 8001c3e:	d03c      	beq.n	8001cba <HAL_QSPI_Transmit+0xc4>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8001c40:	2312      	movs	r3, #18
 8001c42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001c46:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	62e3      	str	r3, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001c4e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8001c52:	3301      	adds	r3, #1
 8001c54:	62a3      	str	r3, [r4, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8001c56:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001c5a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8001c5e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001c62:	f8c8 3014 	str.w	r3, [r8, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8001c66:	2500      	movs	r5, #0
      while(hqspi->TxXferCount > 0U)
 8001c68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c6a:	b19b      	cbz	r3, 8001c94 <HAL_QSPI_Transmit+0x9e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8001c6c:	9700      	str	r7, [sp, #0]
 8001c6e:	4633      	mov	r3, r6
 8001c70:	2201      	movs	r2, #1
 8001c72:	2104      	movs	r1, #4
 8001c74:	4620      	mov	r0, r4
 8001c76:	f7ff ff34 	bl	8001ae2 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8001c7a:	4605      	mov	r5, r0
 8001c7c:	b950      	cbnz	r0, 8001c94 <HAL_QSPI_Transmit+0x9e>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8001c7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	f888 3020 	strb.w	r3, [r8, #32]
        hqspi->pTxBuffPtr++;
 8001c86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001c88:	3101      	adds	r1, #1
 8001c8a:	6261      	str	r1, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8001c8c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001c8e:	3901      	subs	r1, #1
 8001c90:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001c92:	e7e9      	b.n	8001c68 <HAL_QSPI_Transmit+0x72>
      if (status == HAL_OK)
 8001c94:	b11d      	cbz	r5, 8001c9e <HAL_QSPI_Transmit+0xa8>
      hqspi->State = HAL_QSPI_STATE_READY;
 8001c96:	2301      	movs	r3, #1
 8001c98:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8001c9c:	e7c4      	b.n	8001c28 <HAL_QSPI_Transmit+0x32>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001c9e:	9700      	str	r7, [sp, #0]
 8001ca0:	4633      	mov	r3, r6
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	2102      	movs	r1, #2
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f7ff ff1b 	bl	8001ae2 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8001cac:	4605      	mov	r5, r0
 8001cae:	2800      	cmp	r0, #0
 8001cb0:	d1f1      	bne.n	8001c96 <HAL_QSPI_Transmit+0xa0>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001cb2:	6823      	ldr	r3, [r4, #0]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	e7ed      	b.n	8001c96 <HAL_QSPI_Transmit+0xa0>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001cba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001cbc:	f043 0308 	orr.w	r3, r3, #8
 8001cc0:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8001cc2:	e7b1      	b.n	8001c28 <HAL_QSPI_Transmit+0x32>
  __HAL_LOCK(hqspi);
 8001cc4:	2502      	movs	r5, #2
 8001cc6:	e7b2      	b.n	8001c2e <HAL_QSPI_Transmit+0x38>

08001cc8 <HAL_QSPI_AutoPolling>:
{
 8001cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	4604      	mov	r4, r0
 8001cd0:	4688      	mov	r8, r1
 8001cd2:	4615      	mov	r5, r2
 8001cd4:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8001cd6:	f7ff fb69 	bl	80013ac <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8001cda:	f894 c040 	ldrb.w	ip, [r4, #64]	; 0x40
 8001cde:	fa5f fc8c 	uxtb.w	ip, ip
 8001ce2:	f1bc 0f01 	cmp.w	ip, #1
 8001ce6:	d048      	beq.n	8001d7a <HAL_QSPI_AutoPolling+0xb2>
 8001ce8:	4606      	mov	r6, r0
 8001cea:	2301      	movs	r3, #1
 8001cec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001cf0:	f894 c041 	ldrb.w	ip, [r4, #65]	; 0x41
 8001cf4:	fa5f fc8c 	uxtb.w	ip, ip
 8001cf8:	459c      	cmp	ip, r3
 8001cfa:	d006      	beq.n	8001d0a <HAL_QSPI_AutoPolling+0x42>
    status = HAL_BUSY;
 8001cfc:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8001d04:	b002      	add	sp, #8
 8001d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8001d0e:	2342      	movs	r3, #66	; 0x42
 8001d10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001d14:	9700      	str	r7, [sp, #0]
 8001d16:	4603      	mov	r3, r0
 8001d18:	2120      	movs	r1, #32
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f7ff fee1 	bl	8001ae2 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8001d20:	2800      	cmp	r0, #0
 8001d22:	d1ec      	bne.n	8001cfe <HAL_QSPI_AutoPolling+0x36>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	682a      	ldr	r2, [r5, #0]
 8001d28:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8001d2a:	6823      	ldr	r3, [r4, #0]
 8001d2c:	686a      	ldr	r2, [r5, #4]
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	68aa      	ldr	r2, [r5, #8]
 8001d34:	62da      	str	r2, [r3, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8001d36:	6822      	ldr	r2, [r4, #0]
 8001d38:	6813      	ldr	r3, [r2, #0]
 8001d3a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d3e:	6929      	ldr	r1, [r5, #16]
 8001d40:	430b      	orrs	r3, r1
 8001d42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d46:	6013      	str	r3, [r2, #0]
      cmd->NbData = cfg->StatusBytesSize;
 8001d48:	68eb      	ldr	r3, [r5, #12]
 8001d4a:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8001d4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d52:	4641      	mov	r1, r8
 8001d54:	4620      	mov	r0, r4
 8001d56:	f7ff fdd9 	bl	800190c <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8001d5a:	9700      	str	r7, [sp, #0]
 8001d5c:	4633      	mov	r3, r6
 8001d5e:	2201      	movs	r2, #1
 8001d60:	2108      	movs	r1, #8
 8001d62:	4620      	mov	r0, r4
 8001d64:	f7ff febd 	bl	8001ae2 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	d1c8      	bne.n	8001cfe <HAL_QSPI_AutoPolling+0x36>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8001d6c:	6823      	ldr	r3, [r4, #0]
 8001d6e:	2208      	movs	r2, #8
 8001d70:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8001d72:	2301      	movs	r3, #1
 8001d74:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8001d78:	e7c1      	b.n	8001cfe <HAL_QSPI_AutoPolling+0x36>
  __HAL_LOCK(hqspi);
 8001d7a:	2002      	movs	r0, #2
 8001d7c:	e7c2      	b.n	8001d04 <HAL_QSPI_AutoPolling+0x3c>

08001d7e <HAL_QSPI_MemoryMapped>:
{
 8001d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d80:	b083      	sub	sp, #12
 8001d82:	4604      	mov	r4, r0
 8001d84:	460e      	mov	r6, r1
 8001d86:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7ff fb10 	bl	80013ac <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8001d8c:	f894 c040 	ldrb.w	ip, [r4, #64]	; 0x40
 8001d90:	fa5f fc8c 	uxtb.w	ip, ip
 8001d94:	f1bc 0f01 	cmp.w	ip, #1
 8001d98:	d03b      	beq.n	8001e12 <HAL_QSPI_MemoryMapped+0x94>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001da0:	f894 c041 	ldrb.w	ip, [r4, #65]	; 0x41
 8001da4:	fa5f fc8c 	uxtb.w	ip, ip
 8001da8:	459c      	cmp	ip, r3
 8001daa:	d006      	beq.n	8001dba <HAL_QSPI_MemoryMapped+0x3c>
    status = HAL_BUSY;
 8001dac:	2702      	movs	r7, #2
  __HAL_UNLOCK(hqspi);
 8001dae:	2300      	movs	r3, #0
 8001db0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8001db4:	4638      	mov	r0, r7
 8001db6:	b003      	add	sp, #12
 8001db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001dba:	2200      	movs	r2, #0
 8001dbc:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8001dbe:	2382      	movs	r3, #130	; 0x82
 8001dc0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001dc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2120      	movs	r1, #32
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f7ff fe88 	bl	8001ae2 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8001dd2:	4607      	mov	r7, r0
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	d1ea      	bne.n	8001dae <HAL_QSPI_MemoryMapped+0x30>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8001dd8:	6822      	ldr	r2, [r4, #0]
 8001dda:	6813      	ldr	r3, [r2, #0]
 8001ddc:	f023 0308 	bic.w	r3, r3, #8
 8001de0:	6869      	ldr	r1, [r5, #4]
 8001de2:	430b      	orrs	r3, r1
 8001de4:	6013      	str	r3, [r2, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8001de6:	686b      	ldr	r3, [r5, #4]
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d006      	beq.n	8001dfa <HAL_QSPI_MemoryMapped+0x7c>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8001dec:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001df0:	4631      	mov	r1, r6
 8001df2:	4620      	mov	r0, r4
 8001df4:	f7ff fd8a 	bl	800190c <QSPI_Config>
 8001df8:	e7d9      	b.n	8001dae <HAL_QSPI_MemoryMapped+0x30>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	682a      	ldr	r2, [r5, #0]
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8001e00:	6823      	ldr	r3, [r4, #0]
 8001e02:	2210      	movs	r2, #16
 8001e04:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8001e06:	6822      	ldr	r2, [r4, #0]
 8001e08:	6813      	ldr	r3, [r2, #0]
 8001e0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	e7ec      	b.n	8001dec <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8001e12:	2702      	movs	r7, #2
 8001e14:	e7ce      	b.n	8001db4 <HAL_QSPI_MemoryMapped+0x36>

08001e16 <HAL_QSPI_SetTimeout>:
  hqspi->Timeout = Timeout;
 8001e16:	6481      	str	r1, [r0, #72]	; 0x48
}
 8001e18:	4770      	bx	lr
	...

08001e1c <HAL_QSPI_Init>:
{
 8001e1c:	b570      	push	{r4, r5, r6, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e22:	f7ff fac3 	bl	80013ac <HAL_GetTick>
  if(hqspi == NULL)
 8001e26:	2c00      	cmp	r4, #0
 8001e28:	d045      	beq.n	8001eb6 <HAL_QSPI_Init+0x9a>
 8001e2a:	4606      	mov	r6, r0
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001e2c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d037      	beq.n	8001ea4 <HAL_QSPI_Init+0x88>
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001e34:	6825      	ldr	r5, [r4, #0]
 8001e36:	682a      	ldr	r2, [r5, #0]
 8001e38:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001e3c:	68a1      	ldr	r1, [r4, #8]
 8001e3e:	3901      	subs	r1, #1
 8001e40:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e44:	602a      	str	r2, [r5, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001e46:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	4633      	mov	r3, r6
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2120      	movs	r1, #32
 8001e50:	4620      	mov	r0, r4
 8001e52:	f7ff fe46 	bl	8001ae2 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8001e56:	bb18      	cbnz	r0, 8001ea0 <HAL_QSPI_Init+0x84>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001e58:	6821      	ldr	r1, [r4, #0]
 8001e5a:	680b      	ldr	r3, [r1, #0]
 8001e5c:	4a17      	ldr	r2, [pc, #92]	; (8001ebc <HAL_QSPI_Init+0xa0>)
 8001e5e:	401a      	ands	r2, r3
 8001e60:	6865      	ldr	r5, [r4, #4]
 8001e62:	68e3      	ldr	r3, [r4, #12]
 8001e64:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8001e68:	69e5      	ldr	r5, [r4, #28]
 8001e6a:	432b      	orrs	r3, r5
 8001e6c:	6a25      	ldr	r5, [r4, #32]
 8001e6e:	432b      	orrs	r3, r5
 8001e70:	4313      	orrs	r3, r2
 8001e72:	600b      	str	r3, [r1, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001e74:	6821      	ldr	r1, [r4, #0]
 8001e76:	684a      	ldr	r2, [r1, #4]
 8001e78:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <HAL_QSPI_Init+0xa4>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	6925      	ldr	r5, [r4, #16]
 8001e7e:	6962      	ldr	r2, [r4, #20]
 8001e80:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8001e84:	69a5      	ldr	r5, [r4, #24]
 8001e86:	432a      	orrs	r2, r5
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8001e8c:	6822      	ldr	r2, [r4, #0]
 8001e8e:	6813      	ldr	r3, [r2, #0]
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6013      	str	r3, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8001ea0:	b002      	add	sp, #8
 8001ea2:	bd70      	pop	{r4, r5, r6, pc}
    HAL_QSPI_MspInit(hqspi);
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	f7fe ffd9 	bl	8000e5c <HAL_QSPI_MspInit>
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001eaa:	f241 3188 	movw	r1, #5000	; 0x1388
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f7ff ffb1 	bl	8001e16 <HAL_QSPI_SetTimeout>
 8001eb4:	e7be      	b.n	8001e34 <HAL_QSPI_Init+0x18>
    return HAL_ERROR;
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	e7f2      	b.n	8001ea0 <HAL_QSPI_Init+0x84>
 8001eba:	bf00      	nop
 8001ebc:	00ffff2f 	.word	0x00ffff2f
 8001ec0:	ffe0f8fe 	.word	0xffe0f8fe

08001ec4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001ec4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

        /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 8001ec6:	4b68      	ldr	r3, [pc, #416]	; (8002068 <HAL_RCC_DeInit+0x1a4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	2b06      	cmp	r3, #6
 8001ed0:	d80c      	bhi.n	8001eec <HAL_RCC_DeInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8001ed2:	4a65      	ldr	r2, [pc, #404]	; (8002068 <HAL_RCC_DeInit+0x1a4>)
 8001ed4:	6813      	ldr	r3, [r2, #0]
 8001ed6:	f023 030f 	bic.w	r3, r3, #15
 8001eda:	f043 0307 	orr.w	r3, r3, #7
 8001ede:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8001ee0:	6813      	ldr	r3, [r2, #0]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	2b07      	cmp	r3, #7
 8001ee8:	f040 80ba 	bne.w	8002060 <HAL_RCC_DeInit+0x19c>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001eec:	f7ff fa5e 	bl	80013ac <HAL_GetTick>
 8001ef0:	4604      	mov	r4, r0

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001ef2:	4a5e      	ldr	r2, [pc, #376]	; (800206c <HAL_RCC_DeInit+0x1a8>)
 8001ef4:	6813      	ldr	r3, [r2, #0]
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001efc:	4b5b      	ldr	r3, [pc, #364]	; (800206c <HAL_RCC_DeInit+0x1a8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f013 0f04 	tst.w	r3, #4
 8001f04:	d106      	bne.n	8001f14 <HAL_RCC_DeInit+0x50>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f06:	f7ff fa51 	bl	80013ac <HAL_GetTick>
 8001f0a:	1b00      	subs	r0, r0, r4
 8001f0c:	2802      	cmp	r0, #2
 8001f0e:	d9f5      	bls.n	8001efc <HAL_RCC_DeInit+0x38>
    {
      return HAL_TIMEOUT;
 8001f10:	2403      	movs	r4, #3
 8001f12:	e0a6      	b.n	8002062 <HAL_RCC_DeInit+0x19e>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 8001f14:	4b55      	ldr	r3, [pc, #340]	; (800206c <HAL_RCC_DeInit+0x1a8>)
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f1c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 8001f22:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_RCC_DeInit+0x1ac>)
 8001f24:	4a53      	ldr	r2, [pc, #332]	; (8002074 <HAL_RCC_DeInit+0x1b0>)
 8001f26:	6013      	str	r3, [r2, #0]
  SystemD2Clock = HSI_VALUE;
 8001f28:	4a53      	ldr	r2, [pc, #332]	; (8002078 <HAL_RCC_DeInit+0x1b4>)
 8001f2a:	6013      	str	r3, [r2, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f2c:	4b53      	ldr	r3, [pc, #332]	; (800207c <HAL_RCC_DeInit+0x1b8>)
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	f7ff f9da 	bl	80012e8 <HAL_InitTick>
 8001f34:	4604      	mov	r4, r0
 8001f36:	b108      	cbz	r0, 8001f3c <HAL_RCC_DeInit+0x78>
  {
    return HAL_ERROR;
 8001f38:	2401      	movs	r4, #1
 8001f3a:	e092      	b.n	8002062 <HAL_RCC_DeInit+0x19e>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001f3c:	f7ff fa36 	bl	80013ac <HAL_GetTick>
 8001f40:	4605      	mov	r5, r0

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8001f42:	4b4a      	ldr	r3, [pc, #296]	; (800206c <HAL_RCC_DeInit+0x1a8>)
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f013 0f38 	tst.w	r3, #56	; 0x38
 8001f4a:	d008      	beq.n	8001f5e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4c:	f7ff fa2e 	bl	80013ac <HAL_GetTick>
 8001f50:	1b40      	subs	r0, r0, r5
 8001f52:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f56:	4298      	cmp	r0, r3
 8001f58:	d9f3      	bls.n	8001f42 <HAL_RCC_DeInit+0x7e>
    {
      return HAL_TIMEOUT;
 8001f5a:	2403      	movs	r4, #3
 8001f5c:	e081      	b.n	8002062 <HAL_RCC_DeInit+0x19e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001f5e:	f7ff fa25 	bl	80013ac <HAL_GetTick>
 8001f62:	4605      	mov	r5, r0

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON| RCC_CR_HSIDIV| RCC_CR_HSIDIVF| RCC_CR_CSION | RCC_CR_CSIKERON  \
 8001f64:	4a41      	ldr	r2, [pc, #260]	; (800206c <HAL_RCC_DeInit+0x1a8>)
 8001f66:	6811      	ldr	r1, [r2, #0]
 8001f68:	4b45      	ldr	r3, [pc, #276]	; (8002080 <HAL_RCC_DeInit+0x1bc>)
 8001f6a:	400b      	ands	r3, r1
 8001f6c:	6013      	str	r3, [r2, #0]
  | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f6e:	4b3f      	ldr	r3, [pc, #252]	; (800206c <HAL_RCC_DeInit+0x1a8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f76:	d006      	beq.n	8001f86 <HAL_RCC_DeInit+0xc2>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f78:	f7ff fa18 	bl	80013ac <HAL_GetTick>
 8001f7c:	1b40      	subs	r0, r0, r5
 8001f7e:	2864      	cmp	r0, #100	; 0x64
 8001f80:	d9f5      	bls.n	8001f6e <HAL_RCC_DeInit+0xaa>
    {
      return HAL_TIMEOUT;
 8001f82:	2403      	movs	r4, #3
 8001f84:	e06d      	b.n	8002062 <HAL_RCC_DeInit+0x19e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001f86:	f7ff fa11 	bl	80013ac <HAL_GetTick>
 8001f8a:	4605      	mov	r5, r0

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8001f8c:	4a37      	ldr	r2, [pc, #220]	; (800206c <HAL_RCC_DeInit+0x1a8>)
 8001f8e:	6813      	ldr	r3, [r2, #0]
 8001f90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f94:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f96:	4b35      	ldr	r3, [pc, #212]	; (800206c <HAL_RCC_DeInit+0x1a8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f9e:	d006      	beq.n	8001fae <HAL_RCC_DeInit+0xea>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7ff fa04 	bl	80013ac <HAL_GetTick>
 8001fa4:	1b40      	subs	r0, r0, r5
 8001fa6:	2802      	cmp	r0, #2
 8001fa8:	d9f5      	bls.n	8001f96 <HAL_RCC_DeInit+0xd2>
    {
      return HAL_TIMEOUT;
 8001faa:	2403      	movs	r4, #3
 8001fac:	e059      	b.n	8002062 <HAL_RCC_DeInit+0x19e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001fae:	f7ff f9fd 	bl	80013ac <HAL_GetTick>
 8001fb2:	4605      	mov	r5, r0

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 8001fb4:	4a2d      	ldr	r2, [pc, #180]	; (800206c <HAL_RCC_DeInit+0x1a8>)
 8001fb6:	6813      	ldr	r3, [r2, #0]
 8001fb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001fbc:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8001fbe:	4b2b      	ldr	r3, [pc, #172]	; (800206c <HAL_RCC_DeInit+0x1a8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001fc6:	d006      	beq.n	8001fd6 <HAL_RCC_DeInit+0x112>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7ff f9f0 	bl	80013ac <HAL_GetTick>
 8001fcc:	1b40      	subs	r0, r0, r5
 8001fce:	2802      	cmp	r0, #2
 8001fd0:	d9f5      	bls.n	8001fbe <HAL_RCC_DeInit+0xfa>
    {
      return HAL_TIMEOUT;
 8001fd2:	2403      	movs	r4, #3
 8001fd4:	e045      	b.n	8002062 <HAL_RCC_DeInit+0x19e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001fd6:	f7ff f9e9 	bl	80013ac <HAL_GetTick>
 8001fda:	4605      	mov	r5, r0

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 8001fdc:	4a23      	ldr	r2, [pc, #140]	; (800206c <HAL_RCC_DeInit+0x1a8>)
 8001fde:	6813      	ldr	r3, [r2, #0]
 8001fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8001fe6:	4b21      	ldr	r3, [pc, #132]	; (800206c <HAL_RCC_DeInit+0x1a8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001fee:	d006      	beq.n	8001ffe <HAL_RCC_DeInit+0x13a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7ff f9dc 	bl	80013ac <HAL_GetTick>
 8001ff4:	1b40      	subs	r0, r0, r5
 8001ff6:	2802      	cmp	r0, #2
 8001ff8:	d9f5      	bls.n	8001fe6 <HAL_RCC_DeInit+0x122>
    {
      return HAL_TIMEOUT;
 8001ffa:	2403      	movs	r4, #3
 8001ffc:	e031      	b.n	8002062 <HAL_RCC_DeInit+0x19e>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	; (800206c <HAL_RCC_DeInit+0x1a8>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 8002004:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 8002006:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR= RCC_PLLCKSELR_DIVM1_5|RCC_PLLCKSELR_DIVM2_5|RCC_PLLCKSELR_DIVM3_5;
 8002008:	491e      	ldr	r1, [pc, #120]	; (8002084 <HAL_RCC_DeInit+0x1c0>)
 800200a:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 800200c:	491e      	ldr	r1, [pc, #120]	; (8002088 <HAL_RCC_DeInit+0x1c4>)
 800200e:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR,0x01010280U);
 8002010:	491e      	ldr	r1, [pc, #120]	; (800208c <HAL_RCC_DeInit+0x1c8>)
 8002012:	6319      	str	r1, [r3, #48]	; 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 8002014:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR,0x01010280U);
 8002016:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 8002018:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR,0x01010280U);
 800201a:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800201e:	6819      	ldr	r1, [r3, #0]
 8002020:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002024:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8002026:	661a      	str	r2, [r3, #96]	; 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR,0xFFFFFFFFU);
 8002028:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800202c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 800202e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002032:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002036:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_DeInit+0x1a4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f013 0f08 	tst.w	r3, #8
 8002042:	d00e      	beq.n	8002062 <HAL_RCC_DeInit+0x19e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8002044:	4a08      	ldr	r2, [pc, #32]	; (8002068 <HAL_RCC_DeInit+0x1a4>)
 8002046:	6813      	ldr	r3, [r2, #0]
 8002048:	f023 030f 	bic.w	r3, r3, #15
 800204c:	f043 0307 	orr.w	r3, r3, #7
 8002050:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8002052:	6813      	ldr	r3, [r2, #0]
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	2b07      	cmp	r3, #7
 800205a:	d002      	beq.n	8002062 <HAL_RCC_DeInit+0x19e>
    {
      return HAL_ERROR;
 800205c:	2401      	movs	r4, #1
 800205e:	e000      	b.n	8002062 <HAL_RCC_DeInit+0x19e>
      return HAL_ERROR;
 8002060:	2401      	movs	r4, #1
    }

}

  return HAL_OK;
}
 8002062:	4620      	mov	r0, r4
 8002064:	bd38      	pop	{r3, r4, r5, pc}
 8002066:	bf00      	nop
 8002068:	52002000 	.word	0x52002000
 800206c:	58024400 	.word	0x58024400
 8002070:	03d09000 	.word	0x03d09000
 8002074:	20000000 	.word	0x20000000
 8002078:	20000004 	.word	0x20000004
 800207c:	2000000c 	.word	0x2000000c
 8002080:	fff6ed45 	.word	0xfff6ed45
 8002084:	02020200 	.word	0x02020200
 8002088:	01ff0000 	.word	0x01ff0000
 800208c:	01010280 	.word	0x01010280

08002090 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002090:	2800      	cmp	r0, #0
 8002092:	f000 8318 	beq.w	80026c6 <HAL_RCC_OscConfig+0x636>
{
 8002096:	b538      	push	{r3, r4, r5, lr}
 8002098:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800209a:	6803      	ldr	r3, [r0, #0]
 800209c:	f013 0f01 	tst.w	r3, #1
 80020a0:	d025      	beq.n	80020ee <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020a2:	4a94      	ldr	r2, [pc, #592]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 80020a4:	6913      	ldr	r3, [r2, #16]
 80020a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020aa:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80020ac:	2b10      	cmp	r3, #16
 80020ae:	d015      	beq.n	80020dc <HAL_RCC_OscConfig+0x4c>
 80020b0:	2b18      	cmp	r3, #24
 80020b2:	d00f      	beq.n	80020d4 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b4:	6863      	ldr	r3, [r4, #4]
 80020b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ba:	d03f      	beq.n	800213c <HAL_RCC_OscConfig+0xac>
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d153      	bne.n	8002168 <HAL_RCC_OscConfig+0xd8>
 80020c0:	4b8c      	ldr	r3, [pc, #560]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e038      	b.n	8002146 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80020d4:	f002 0203 	and.w	r2, r2, #3
 80020d8:	2a02      	cmp	r2, #2
 80020da:	d1eb      	bne.n	80020b4 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020dc:	4b85      	ldr	r3, [pc, #532]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020e4:	d003      	beq.n	80020ee <HAL_RCC_OscConfig+0x5e>
 80020e6:	6863      	ldr	r3, [r4, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 82ee 	beq.w	80026ca <HAL_RCC_OscConfig+0x63a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ee:	6823      	ldr	r3, [r4, #0]
 80020f0:	f013 0f02 	tst.w	r3, #2
 80020f4:	f000 80a1 	beq.w	800223a <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f8:	4a7e      	ldr	r2, [pc, #504]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 80020fa:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80020fe:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8002102:	d05a      	beq.n	80021ba <HAL_RCC_OscConfig+0x12a>
 8002104:	2b18      	cmp	r3, #24
 8002106:	d055      	beq.n	80021b4 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002108:	68e3      	ldr	r3, [r4, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 80de 	beq.w	80022cc <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002110:	4978      	ldr	r1, [pc, #480]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 8002112:	680a      	ldr	r2, [r1, #0]
 8002114:	f022 0219 	bic.w	r2, r2, #25
 8002118:	4313      	orrs	r3, r2
 800211a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7ff f946 	bl	80013ac <HAL_GetTick>
 8002120:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002122:	4b74      	ldr	r3, [pc, #464]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f013 0f04 	tst.w	r3, #4
 800212a:	f040 80ad 	bne.w	8002288 <HAL_RCC_OscConfig+0x1f8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800212e:	f7ff f93d 	bl	80013ac <HAL_GetTick>
 8002132:	1b40      	subs	r0, r0, r5
 8002134:	2802      	cmp	r0, #2
 8002136:	d9f4      	bls.n	8002122 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8002138:	2003      	movs	r0, #3
 800213a:	e2cd      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213c:	4a6d      	ldr	r2, [pc, #436]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 800213e:	6813      	ldr	r3, [r2, #0]
 8002140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002144:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002146:	6863      	ldr	r3, [r4, #4]
 8002148:	b32b      	cbz	r3, 8002196 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 800214a:	f7ff f92f 	bl	80013ac <HAL_GetTick>
 800214e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002150:	4b68      	ldr	r3, [pc, #416]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002158:	d1c9      	bne.n	80020ee <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800215a:	f7ff f927 	bl	80013ac <HAL_GetTick>
 800215e:	1b40      	subs	r0, r0, r5
 8002160:	2864      	cmp	r0, #100	; 0x64
 8002162:	d9f5      	bls.n	8002150 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8002164:	2003      	movs	r0, #3
 8002166:	e2b7      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800216c:	d009      	beq.n	8002182 <HAL_RCC_OscConfig+0xf2>
 800216e:	4b61      	ldr	r3, [pc, #388]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	e7e1      	b.n	8002146 <HAL_RCC_OscConfig+0xb6>
 8002182:	4b5c      	ldr	r3, [pc, #368]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	e7d7      	b.n	8002146 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8002196:	f7ff f909 	bl	80013ac <HAL_GetTick>
 800219a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800219c:	4b55      	ldr	r3, [pc, #340]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80021a4:	d0a3      	beq.n	80020ee <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a6:	f7ff f901 	bl	80013ac <HAL_GetTick>
 80021aa:	1b40      	subs	r0, r0, r5
 80021ac:	2864      	cmp	r0, #100	; 0x64
 80021ae:	d9f5      	bls.n	800219c <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 80021b0:	2003      	movs	r0, #3
 80021b2:	e291      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80021b4:	f012 0f03 	tst.w	r2, #3
 80021b8:	d1a6      	bne.n	8002108 <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021ba:	4b4e      	ldr	r3, [pc, #312]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f013 0f04 	tst.w	r3, #4
 80021c2:	d003      	beq.n	80021cc <HAL_RCC_OscConfig+0x13c>
 80021c4:	68e3      	ldr	r3, [r4, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 8281 	beq.w	80026ce <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021cc:	4a49      	ldr	r2, [pc, #292]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 80021ce:	6813      	ldr	r3, [r2, #0]
 80021d0:	f023 0319 	bic.w	r3, r3, #25
 80021d4:	68e1      	ldr	r1, [r4, #12]
 80021d6:	430b      	orrs	r3, r1
 80021d8:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 80021da:	f7ff f8e7 	bl	80013ac <HAL_GetTick>
 80021de:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021e0:	4b44      	ldr	r3, [pc, #272]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f013 0f04 	tst.w	r3, #4
 80021e8:	d106      	bne.n	80021f8 <HAL_RCC_OscConfig+0x168>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ea:	f7ff f8df 	bl	80013ac <HAL_GetTick>
 80021ee:	1b40      	subs	r0, r0, r5
 80021f0:	2802      	cmp	r0, #2
 80021f2:	d9f5      	bls.n	80021e0 <HAL_RCC_OscConfig+0x150>
              return HAL_TIMEOUT;
 80021f4:	2003      	movs	r0, #3
 80021f6:	e26f      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f8:	f7ff f8f2 	bl	80013e0 <HAL_GetREVID>
 80021fc:	f241 0303 	movw	r3, #4099	; 0x1003
 8002200:	4298      	cmp	r0, r3
 8002202:	d812      	bhi.n	800222a <HAL_RCC_OscConfig+0x19a>
 8002204:	6922      	ldr	r2, [r4, #16]
 8002206:	2a40      	cmp	r2, #64	; 0x40
 8002208:	d007      	beq.n	800221a <HAL_RCC_OscConfig+0x18a>
 800220a:	493a      	ldr	r1, [pc, #232]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 800220c:	684b      	ldr	r3, [r1, #4]
 800220e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002212:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002216:	604b      	str	r3, [r1, #4]
 8002218:	e00f      	b.n	800223a <HAL_RCC_OscConfig+0x1aa>
 800221a:	4a36      	ldr	r2, [pc, #216]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 800221c:	6853      	ldr	r3, [r2, #4]
 800221e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002226:	6053      	str	r3, [r2, #4]
 8002228:	e007      	b.n	800223a <HAL_RCC_OscConfig+0x1aa>
 800222a:	4a32      	ldr	r2, [pc, #200]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 800222c:	6853      	ldr	r3, [r2, #4]
 800222e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002232:	6921      	ldr	r1, [r4, #16]
 8002234:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002238:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	f013 0f10 	tst.w	r3, #16
 8002240:	f000 8088 	beq.w	8002354 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002244:	4a2b      	ldr	r2, [pc, #172]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 8002246:	6913      	ldr	r3, [r2, #16]
 8002248:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800224c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800224e:	2b08      	cmp	r3, #8
 8002250:	d056      	beq.n	8002300 <HAL_RCC_OscConfig+0x270>
 8002252:	2b18      	cmp	r3, #24
 8002254:	d050      	beq.n	80022f8 <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002256:	69e3      	ldr	r3, [r4, #28]
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80b8 	beq.w	80023ce <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800225e:	4a25      	ldr	r2, [pc, #148]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 8002260:	6813      	ldr	r3, [r2, #0]
 8002262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7ff f8a0 	bl	80013ac <HAL_GetTick>
 800226c:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800226e:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002276:	f040 8088 	bne.w	800238a <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800227a:	f7ff f897 	bl	80013ac <HAL_GetTick>
 800227e:	1b40      	subs	r0, r0, r5
 8002280:	2802      	cmp	r0, #2
 8002282:	d9f4      	bls.n	800226e <HAL_RCC_OscConfig+0x1de>
          {
            return HAL_TIMEOUT;
 8002284:	2003      	movs	r0, #3
 8002286:	e227      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002288:	f7ff f8aa 	bl	80013e0 <HAL_GetREVID>
 800228c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002290:	4298      	cmp	r0, r3
 8002292:	d812      	bhi.n	80022ba <HAL_RCC_OscConfig+0x22a>
 8002294:	6922      	ldr	r2, [r4, #16]
 8002296:	2a40      	cmp	r2, #64	; 0x40
 8002298:	d007      	beq.n	80022aa <HAL_RCC_OscConfig+0x21a>
 800229a:	4916      	ldr	r1, [pc, #88]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 800229c:	684b      	ldr	r3, [r1, #4]
 800229e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80022a2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80022a6:	604b      	str	r3, [r1, #4]
 80022a8:	e7c7      	b.n	800223a <HAL_RCC_OscConfig+0x1aa>
 80022aa:	4a12      	ldr	r2, [pc, #72]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 80022ac:	6853      	ldr	r3, [r2, #4]
 80022ae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80022b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b6:	6053      	str	r3, [r2, #4]
 80022b8:	e7bf      	b.n	800223a <HAL_RCC_OscConfig+0x1aa>
 80022ba:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 80022bc:	6853      	ldr	r3, [r2, #4]
 80022be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80022c2:	6921      	ldr	r1, [r4, #16]
 80022c4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80022c8:	6053      	str	r3, [r2, #4]
 80022ca:	e7b6      	b.n	800223a <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 80022cc:	4a09      	ldr	r2, [pc, #36]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 80022ce:	6813      	ldr	r3, [r2, #0]
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80022d6:	f7ff f869 	bl	80013ac <HAL_GetTick>
 80022da:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_RCC_OscConfig+0x264>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f013 0f04 	tst.w	r3, #4
 80022e4:	d0a9      	beq.n	800223a <HAL_RCC_OscConfig+0x1aa>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e6:	f7ff f861 	bl	80013ac <HAL_GetTick>
 80022ea:	1b40      	subs	r0, r0, r5
 80022ec:	2802      	cmp	r0, #2
 80022ee:	d9f5      	bls.n	80022dc <HAL_RCC_OscConfig+0x24c>
            return HAL_TIMEOUT;
 80022f0:	2003      	movs	r0, #3
 80022f2:	e1f1      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
 80022f4:	58024400 	.word	0x58024400
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80022f8:	f002 0203 	and.w	r2, r2, #3
 80022fc:	2a01      	cmp	r2, #1
 80022fe:	d1aa      	bne.n	8002256 <HAL_RCC_OscConfig+0x1c6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002300:	4ba1      	ldr	r3, [pc, #644]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002308:	d003      	beq.n	8002312 <HAL_RCC_OscConfig+0x282>
 800230a:	69e3      	ldr	r3, [r4, #28]
 800230c:	2b80      	cmp	r3, #128	; 0x80
 800230e:	f040 81e0 	bne.w	80026d2 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002312:	f7ff f865 	bl	80013e0 <HAL_GetREVID>
 8002316:	f241 0303 	movw	r3, #4099	; 0x1003
 800231a:	4298      	cmp	r0, r3
 800231c:	d812      	bhi.n	8002344 <HAL_RCC_OscConfig+0x2b4>
 800231e:	6a22      	ldr	r2, [r4, #32]
 8002320:	2a20      	cmp	r2, #32
 8002322:	d007      	beq.n	8002334 <HAL_RCC_OscConfig+0x2a4>
 8002324:	4998      	ldr	r1, [pc, #608]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 8002326:	684b      	ldr	r3, [r1, #4]
 8002328:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800232c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8002330:	604b      	str	r3, [r1, #4]
 8002332:	e00f      	b.n	8002354 <HAL_RCC_OscConfig+0x2c4>
 8002334:	4a94      	ldr	r2, [pc, #592]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 8002336:	6853      	ldr	r3, [r2, #4]
 8002338:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800233c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002340:	6053      	str	r3, [r2, #4]
 8002342:	e007      	b.n	8002354 <HAL_RCC_OscConfig+0x2c4>
 8002344:	4a90      	ldr	r2, [pc, #576]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 8002346:	68d3      	ldr	r3, [r2, #12]
 8002348:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800234c:	6a21      	ldr	r1, [r4, #32]
 800234e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002352:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002354:	6823      	ldr	r3, [r4, #0]
 8002356:	f013 0f08 	tst.w	r3, #8
 800235a:	d060      	beq.n	800241e <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800235c:	6963      	ldr	r3, [r4, #20]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d049      	beq.n	80023f6 <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002362:	4a89      	ldr	r2, [pc, #548]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 8002364:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236c:	f7ff f81e 	bl	80013ac <HAL_GetTick>
 8002370:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002372:	4b85      	ldr	r3, [pc, #532]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 8002374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002376:	f013 0f02 	tst.w	r3, #2
 800237a:	d150      	bne.n	800241e <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237c:	f7ff f816 	bl	80013ac <HAL_GetTick>
 8002380:	1b40      	subs	r0, r0, r5
 8002382:	2802      	cmp	r0, #2
 8002384:	d9f5      	bls.n	8002372 <HAL_RCC_OscConfig+0x2e2>
        {
          return HAL_TIMEOUT;
 8002386:	2003      	movs	r0, #3
 8002388:	e1a6      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800238a:	f7ff f829 	bl	80013e0 <HAL_GetREVID>
 800238e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002392:	4298      	cmp	r0, r3
 8002394:	d812      	bhi.n	80023bc <HAL_RCC_OscConfig+0x32c>
 8002396:	6a22      	ldr	r2, [r4, #32]
 8002398:	2a20      	cmp	r2, #32
 800239a:	d007      	beq.n	80023ac <HAL_RCC_OscConfig+0x31c>
 800239c:	497a      	ldr	r1, [pc, #488]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 800239e:	684b      	ldr	r3, [r1, #4]
 80023a0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80023a4:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80023a8:	604b      	str	r3, [r1, #4]
 80023aa:	e7d3      	b.n	8002354 <HAL_RCC_OscConfig+0x2c4>
 80023ac:	4a76      	ldr	r2, [pc, #472]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 80023ae:	6853      	ldr	r3, [r2, #4]
 80023b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80023b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023b8:	6053      	str	r3, [r2, #4]
 80023ba:	e7cb      	b.n	8002354 <HAL_RCC_OscConfig+0x2c4>
 80023bc:	4a72      	ldr	r2, [pc, #456]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 80023be:	68d3      	ldr	r3, [r2, #12]
 80023c0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80023c4:	6a21      	ldr	r1, [r4, #32]
 80023c6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80023ca:	60d3      	str	r3, [r2, #12]
 80023cc:	e7c2      	b.n	8002354 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 80023ce:	4a6e      	ldr	r2, [pc, #440]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 80023d0:	6813      	ldr	r3, [r2, #0]
 80023d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023d6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80023d8:	f7fe ffe8 	bl	80013ac <HAL_GetTick>
 80023dc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023de:	4b6a      	ldr	r3, [pc, #424]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80023e6:	d0b5      	beq.n	8002354 <HAL_RCC_OscConfig+0x2c4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80023e8:	f7fe ffe0 	bl	80013ac <HAL_GetTick>
 80023ec:	1b40      	subs	r0, r0, r5
 80023ee:	2802      	cmp	r0, #2
 80023f0:	d9f5      	bls.n	80023de <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 80023f2:	2003      	movs	r0, #3
 80023f4:	e170      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f6:	4a64      	ldr	r2, [pc, #400]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 80023f8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80023fa:	f023 0301 	bic.w	r3, r3, #1
 80023fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002400:	f7fe ffd4 	bl	80013ac <HAL_GetTick>
 8002404:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002406:	4b60      	ldr	r3, [pc, #384]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 8002408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240a:	f013 0f02 	tst.w	r3, #2
 800240e:	d006      	beq.n	800241e <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002410:	f7fe ffcc 	bl	80013ac <HAL_GetTick>
 8002414:	1b40      	subs	r0, r0, r5
 8002416:	2802      	cmp	r0, #2
 8002418:	d9f5      	bls.n	8002406 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800241a:	2003      	movs	r0, #3
 800241c:	e15c      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	f013 0f20 	tst.w	r3, #32
 8002424:	d029      	beq.n	800247a <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002426:	69a3      	ldr	r3, [r4, #24]
 8002428:	b19b      	cbz	r3, 8002452 <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800242a:	4a57      	ldr	r2, [pc, #348]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 800242c:	6813      	ldr	r3, [r2, #0]
 800242e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002432:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002434:	f7fe ffba 	bl	80013ac <HAL_GetTick>
 8002438:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800243a:	4b53      	ldr	r3, [pc, #332]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002442:	d11a      	bne.n	800247a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002444:	f7fe ffb2 	bl	80013ac <HAL_GetTick>
 8002448:	1b40      	subs	r0, r0, r5
 800244a:	2802      	cmp	r0, #2
 800244c:	d9f5      	bls.n	800243a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800244e:	2003      	movs	r0, #3
 8002450:	e142      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002452:	4a4d      	ldr	r2, [pc, #308]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 8002454:	6813      	ldr	r3, [r2, #0]
 8002456:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800245a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800245c:	f7fe ffa6 	bl	80013ac <HAL_GetTick>
 8002460:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002462:	4b49      	ldr	r3, [pc, #292]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800246a:	d006      	beq.n	800247a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800246c:	f7fe ff9e 	bl	80013ac <HAL_GetTick>
 8002470:	1b40      	subs	r0, r0, r5
 8002472:	2802      	cmp	r0, #2
 8002474:	d9f5      	bls.n	8002462 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002476:	2003      	movs	r0, #3
 8002478:	e12e      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800247a:	6823      	ldr	r3, [r4, #0]
 800247c:	f013 0f04 	tst.w	r3, #4
 8002480:	d121      	bne.n	80024c6 <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 8126 	beq.w	80026d6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800248a:	4a3f      	ldr	r2, [pc, #252]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 800248c:	6912      	ldr	r2, [r2, #16]
 800248e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8002492:	2a18      	cmp	r2, #24
 8002494:	f000 80ee 	beq.w	8002674 <HAL_RCC_OscConfig+0x5e4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002498:	2b02      	cmp	r3, #2
 800249a:	d079      	beq.n	8002590 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249c:	4a3a      	ldr	r2, [pc, #232]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 800249e:	6813      	ldr	r3, [r2, #0]
 80024a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a6:	f7fe ff81 	bl	80013ac <HAL_GetTick>
 80024aa:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024ac:	4b36      	ldr	r3, [pc, #216]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80024b4:	f000 80dc 	beq.w	8002670 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b8:	f7fe ff78 	bl	80013ac <HAL_GetTick>
 80024bc:	1b00      	subs	r0, r0, r4
 80024be:	2802      	cmp	r0, #2
 80024c0:	d9f4      	bls.n	80024ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024c2:	2003      	movs	r0, #3
 80024c4:	e108      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
    PWR->CR1 |= PWR_CR1_DBP;
 80024c6:	4a31      	ldr	r2, [pc, #196]	; (800258c <HAL_RCC_OscConfig+0x4fc>)
 80024c8:	6813      	ldr	r3, [r2, #0]
 80024ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ce:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80024d0:	f7fe ff6c 	bl	80013ac <HAL_GetTick>
 80024d4:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024d6:	4b2d      	ldr	r3, [pc, #180]	; (800258c <HAL_RCC_OscConfig+0x4fc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f413 7f80 	tst.w	r3, #256	; 0x100
 80024de:	d106      	bne.n	80024ee <HAL_RCC_OscConfig+0x45e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80024e0:	f7fe ff64 	bl	80013ac <HAL_GetTick>
 80024e4:	1b40      	subs	r0, r0, r5
 80024e6:	2864      	cmp	r0, #100	; 0x64
 80024e8:	d9f5      	bls.n	80024d6 <HAL_RCC_OscConfig+0x446>
        return HAL_TIMEOUT;
 80024ea:	2003      	movs	r0, #3
 80024ec:	e0f4      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ee:	68a3      	ldr	r3, [r4, #8]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d00a      	beq.n	800250a <HAL_RCC_OscConfig+0x47a>
 80024f4:	bb0b      	cbnz	r3, 800253a <HAL_RCC_OscConfig+0x4aa>
 80024f6:	4b24      	ldr	r3, [pc, #144]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 80024f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024fa:	f022 0201 	bic.w	r2, r2, #1
 80024fe:	671a      	str	r2, [r3, #112]	; 0x70
 8002500:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002502:	f022 0204 	bic.w	r2, r2, #4
 8002506:	671a      	str	r2, [r3, #112]	; 0x70
 8002508:	e004      	b.n	8002514 <HAL_RCC_OscConfig+0x484>
 800250a:	4a1f      	ldr	r2, [pc, #124]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 800250c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002514:	68a3      	ldr	r3, [r4, #8]
 8002516:	b333      	cbz	r3, 8002566 <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 8002518:	f7fe ff48 	bl	80013ac <HAL_GetTick>
 800251c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800251e:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 8002520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002522:	f013 0f02 	tst.w	r3, #2
 8002526:	d1ac      	bne.n	8002482 <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002528:	f7fe ff40 	bl	80013ac <HAL_GetTick>
 800252c:	1b40      	subs	r0, r0, r5
 800252e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002532:	4298      	cmp	r0, r3
 8002534:	d9f3      	bls.n	800251e <HAL_RCC_OscConfig+0x48e>
          return HAL_TIMEOUT;
 8002536:	2003      	movs	r0, #3
 8002538:	e0ce      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800253a:	2b05      	cmp	r3, #5
 800253c:	d009      	beq.n	8002552 <HAL_RCC_OscConfig+0x4c2>
 800253e:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 8002540:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002542:	f022 0201 	bic.w	r2, r2, #1
 8002546:	671a      	str	r2, [r3, #112]	; 0x70
 8002548:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800254a:	f022 0204 	bic.w	r2, r2, #4
 800254e:	671a      	str	r2, [r3, #112]	; 0x70
 8002550:	e7e0      	b.n	8002514 <HAL_RCC_OscConfig+0x484>
 8002552:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 8002554:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002556:	f042 0204 	orr.w	r2, r2, #4
 800255a:	671a      	str	r2, [r3, #112]	; 0x70
 800255c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	671a      	str	r2, [r3, #112]	; 0x70
 8002564:	e7d6      	b.n	8002514 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 8002566:	f7fe ff21 	bl	80013ac <HAL_GetTick>
 800256a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_RCC_OscConfig+0x4f8>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	f013 0f02 	tst.w	r3, #2
 8002574:	d085      	beq.n	8002482 <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7fe ff19 	bl	80013ac <HAL_GetTick>
 800257a:	1b40      	subs	r0, r0, r5
 800257c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002580:	4298      	cmp	r0, r3
 8002582:	d9f3      	bls.n	800256c <HAL_RCC_OscConfig+0x4dc>
          return HAL_TIMEOUT;
 8002584:	2003      	movs	r0, #3
 8002586:	e0a7      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
 8002588:	58024400 	.word	0x58024400
 800258c:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 8002590:	4a59      	ldr	r2, [pc, #356]	; (80026f8 <HAL_RCC_OscConfig+0x668>)
 8002592:	6813      	ldr	r3, [r2, #0]
 8002594:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002598:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800259a:	f7fe ff07 	bl	80013ac <HAL_GetTick>
 800259e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025a0:	4b55      	ldr	r3, [pc, #340]	; (80026f8 <HAL_RCC_OscConfig+0x668>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80025a8:	d006      	beq.n	80025b8 <HAL_RCC_OscConfig+0x528>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025aa:	f7fe feff 	bl	80013ac <HAL_GetTick>
 80025ae:	1b40      	subs	r0, r0, r5
 80025b0:	2802      	cmp	r0, #2
 80025b2:	d9f5      	bls.n	80025a0 <HAL_RCC_OscConfig+0x510>
            return HAL_TIMEOUT;
 80025b4:	2003      	movs	r0, #3
 80025b6:	e08f      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b8:	4b4f      	ldr	r3, [pc, #316]	; (80026f8 <HAL_RCC_OscConfig+0x668>)
 80025ba:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80025bc:	4a4f      	ldr	r2, [pc, #316]	; (80026fc <HAL_RCC_OscConfig+0x66c>)
 80025be:	400a      	ands	r2, r1
 80025c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80025c2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80025c4:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80025c8:	430a      	orrs	r2, r1
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28
 80025cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80025ce:	3a01      	subs	r2, #1
 80025d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80025d6:	3901      	subs	r1, #1
 80025d8:	0249      	lsls	r1, r1, #9
 80025da:	b289      	uxth	r1, r1
 80025dc:	430a      	orrs	r2, r1
 80025de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80025e0:	3901      	subs	r1, #1
 80025e2:	0409      	lsls	r1, r1, #16
 80025e4:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80025e8:	430a      	orrs	r2, r1
 80025ea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80025ec:	3901      	subs	r1, #1
 80025ee:	0609      	lsls	r1, r1, #24
 80025f0:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80025f4:	430a      	orrs	r2, r1
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80025f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002600:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002602:	4a3f      	ldr	r2, [pc, #252]	; (8002700 <HAL_RCC_OscConfig+0x670>)
 8002604:	400a      	ands	r2, r1
 8002606:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002608:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800260c:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800260e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002610:	f022 020c 	bic.w	r2, r2, #12
 8002614:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002616:	430a      	orrs	r2, r1
 8002618:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800261a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800261c:	f022 0202 	bic.w	r2, r2, #2
 8002620:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002622:	430a      	orrs	r2, r1
 8002624:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002628:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800262c:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800262e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002630:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002634:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002638:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800263c:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800263e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002640:	f042 0201 	orr.w	r2, r2, #1
 8002644:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800264c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800264e:	f7fe fead 	bl	80013ac <HAL_GetTick>
 8002652:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002654:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <HAL_RCC_OscConfig+0x668>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800265c:	d106      	bne.n	800266c <HAL_RCC_OscConfig+0x5dc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265e:	f7fe fea5 	bl	80013ac <HAL_GetTick>
 8002662:	1b00      	subs	r0, r0, r4
 8002664:	2802      	cmp	r0, #2
 8002666:	d9f5      	bls.n	8002654 <HAL_RCC_OscConfig+0x5c4>
            return HAL_TIMEOUT;
 8002668:	2003      	movs	r0, #3
 800266a:	e035      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800266c:	2000      	movs	r0, #0
 800266e:	e033      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
 8002670:	2000      	movs	r0, #0
 8002672:	e031      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002674:	4a20      	ldr	r2, [pc, #128]	; (80026f8 <HAL_RCC_OscConfig+0x668>)
 8002676:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002678:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800267a:	2b01      	cmp	r3, #1
 800267c:	d02d      	beq.n	80026da <HAL_RCC_OscConfig+0x64a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267e:	f001 0303 	and.w	r3, r1, #3
 8002682:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002684:	4293      	cmp	r3, r2
 8002686:	d12a      	bne.n	80026de <HAL_RCC_OscConfig+0x64e>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002688:	f3c1 1105 	ubfx	r1, r1, #4, #6
 800268c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268e:	4299      	cmp	r1, r3
 8002690:	d127      	bne.n	80026e2 <HAL_RCC_OscConfig+0x652>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002692:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8002696:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002698:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800269a:	429a      	cmp	r2, r3
 800269c:	d123      	bne.n	80026e6 <HAL_RCC_OscConfig+0x656>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800269e:	f3c0 2246 	ubfx	r2, r0, #9, #7
 80026a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026a4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d11f      	bne.n	80026ea <HAL_RCC_OscConfig+0x65a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026aa:	f3c0 4206 	ubfx	r2, r0, #16, #7
 80026ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d11b      	bne.n	80026ee <HAL_RCC_OscConfig+0x65e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80026b6:	f3c0 6006 	ubfx	r0, r0, #24, #7
 80026ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026be:	4298      	cmp	r0, r3
 80026c0:	d117      	bne.n	80026f2 <HAL_RCC_OscConfig+0x662>
  return HAL_OK;
 80026c2:	2000      	movs	r0, #0
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
    return HAL_ERROR;
 80026c6:	2001      	movs	r0, #1
}
 80026c8:	4770      	bx	lr
        return HAL_ERROR;
 80026ca:	2001      	movs	r0, #1
 80026cc:	e004      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 80026ce:	2001      	movs	r0, #1
 80026d0:	e002      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 80026d2:	2001      	movs	r0, #1
 80026d4:	e000      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
  return HAL_OK;
 80026d6:	2000      	movs	r0, #0
}
 80026d8:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 80026da:	2001      	movs	r0, #1
 80026dc:	e7fc      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
 80026de:	2001      	movs	r0, #1
 80026e0:	e7fa      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
 80026e2:	2001      	movs	r0, #1
 80026e4:	e7f8      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
 80026e6:	2001      	movs	r0, #1
 80026e8:	e7f6      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
 80026ea:	2001      	movs	r0, #1
 80026ec:	e7f4      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
 80026ee:	2001      	movs	r0, #1
 80026f0:	e7f2      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
 80026f2:	2001      	movs	r0, #1
 80026f4:	e7f0      	b.n	80026d8 <HAL_RCC_OscConfig+0x648>
 80026f6:	bf00      	nop
 80026f8:	58024400 	.word	0x58024400
 80026fc:	fffffc0c 	.word	0xfffffc0c
 8002700:	ffff0007 	.word	0xffff0007

08002704 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002704:	4b74      	ldr	r3, [pc, #464]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800270c:	2b10      	cmp	r3, #16
 800270e:	f000 80de 	beq.w	80028ce <HAL_RCC_GetSysClockFreq+0x1ca>
 8002712:	2b18      	cmp	r3, #24
 8002714:	d010      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x34>
 8002716:	b10b      	cbz	r3, 800271c <HAL_RCC_GetSysClockFreq+0x18>
 8002718:	4870      	ldr	r0, [pc, #448]	; (80028dc <HAL_RCC_GetSysClockFreq+0x1d8>)
 800271a:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800271c:	4b6e      	ldr	r3, [pc, #440]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f013 0f20 	tst.w	r3, #32
 8002724:	f000 80d5 	beq.w	80028d2 <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002728:	4b6b      	ldr	r3, [pc, #428]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8002730:	4b6b      	ldr	r3, [pc, #428]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8002732:	fa23 f000 	lsr.w	r0, r3, r0
 8002736:	4770      	bx	lr
{
 8002738:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800273a:	4a67      	ldr	r2, [pc, #412]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800273c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800273e:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002742:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8002744:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002748:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800274a:	f003 0c01 	and.w	ip, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800274e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002750:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8002754:	fb0c f303 	mul.w	r3, ip, r3
 8002758:	ee07 3a90 	vmov	s15, r3
 800275c:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 8002760:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8002764:	f000 8093 	beq.w	800288e <HAL_RCC_GetSysClockFreq+0x18a>
    {
      switch (pllsource)
 8002768:	2901      	cmp	r1, #1
 800276a:	d065      	beq.n	8002838 <HAL_RCC_GetSysClockFreq+0x134>
 800276c:	2902      	cmp	r1, #2
 800276e:	f000 8091 	beq.w	8002894 <HAL_RCC_GetSysClockFreq+0x190>
 8002772:	b1e1      	cbz	r1, 80027ae <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002774:	ee07 0a10 	vmov	s14, r0
 8002778:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800277c:	ed9f 6a59 	vldr	s12, [pc, #356]	; 80028e4 <HAL_RCC_GetSysClockFreq+0x1e0>
 8002780:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002784:	4b54      	ldr	r3, [pc, #336]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800278c:	ee06 3a90 	vmov	s13, r3
 8002790:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002794:	ed9f 6a54 	vldr	s12, [pc, #336]	; 80028e8 <HAL_RCC_GetSysClockFreq+0x1e4>
 8002798:	ee67 7a86 	vmul.f32	s15, s15, s12
 800279c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027a8:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 80027ac:	e060      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x16c>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027ae:	6813      	ldr	r3, [r2, #0]
 80027b0:	f013 0f20 	tst.w	r3, #32
 80027b4:	d023      	beq.n	80027fe <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80027b6:	4611      	mov	r1, r2
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80027be:	4b48      	ldr	r3, [pc, #288]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80027c0:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027c2:	ee07 3a10 	vmov	s14, r3
 80027c6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80027ca:	ee07 0a10 	vmov	s14, r0
 80027ce:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80027d2:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80027d6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80027d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027dc:	ee06 3a90 	vmov	s13, r3
 80027e0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80027e4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80028e8 <HAL_RCC_GetSysClockFreq+0x1e4>
 80027e8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80027ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027fc:	e038      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x16c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027fe:	ee07 0a10 	vmov	s14, r0
 8002802:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002806:	ed9f 6a39 	vldr	s12, [pc, #228]	; 80028ec <HAL_RCC_GetSysClockFreq+0x1e8>
 800280a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800280e:	4b32      	ldr	r3, [pc, #200]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002816:	ee06 3a90 	vmov	s13, r3
 800281a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800281e:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80028e8 <HAL_RCC_GetSysClockFreq+0x1e4>
 8002822:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800282a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800282e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002832:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002836:	e01b      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x16c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002838:	ee07 0a10 	vmov	s14, r0
 800283c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002840:	ed9f 6a28 	vldr	s12, [pc, #160]	; 80028e4 <HAL_RCC_GetSysClockFreq+0x1e0>
 8002844:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002848:	4b23      	ldr	r3, [pc, #140]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002850:	ee06 3a90 	vmov	s13, r3
 8002854:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002858:	ed9f 6a23 	vldr	s12, [pc, #140]	; 80028e8 <HAL_RCC_GetSysClockFreq+0x1e4>
 800285c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002860:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002864:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002868:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800286c:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002870:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002878:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800287a:	ee07 3a90 	vmov	s15, r3
 800287e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002882:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002886:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800288a:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800288e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002892:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002894:	ee07 0a10 	vmov	s14, r0
 8002898:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800289c:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80028f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028a0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ac:	ee06 3a90 	vmov	s13, r3
 80028b0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80028b4:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80028e8 <HAL_RCC_GetSysClockFreq+0x1e4>
 80028b8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80028bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028c8:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 80028cc:	e7d0      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x16c>
    sysclockfreq = HSE_VALUE;
 80028ce:	4809      	ldr	r0, [pc, #36]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80028d0:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80028d2:	4803      	ldr	r0, [pc, #12]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	58024400 	.word	0x58024400
 80028dc:	003d0900 	.word	0x003d0900
 80028e0:	03d09000 	.word	0x03d09000
 80028e4:	4a742400 	.word	0x4a742400
 80028e8:	39000000 	.word	0x39000000
 80028ec:	4c742400 	.word	0x4c742400
 80028f0:	4b742400 	.word	0x4b742400
 80028f4:	00f42400 	.word	0x00f42400

080028f8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80028f8:	2800      	cmp	r0, #0
 80028fa:	f000 8132 	beq.w	8002b62 <HAL_RCC_ClockConfig+0x26a>
{
 80028fe:	b570      	push	{r4, r5, r6, lr}
 8002900:	460d      	mov	r5, r1
 8002902:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002904:	4b9b      	ldr	r3, [pc, #620]	; (8002b74 <HAL_RCC_ClockConfig+0x27c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	428b      	cmp	r3, r1
 800290e:	d20b      	bcs.n	8002928 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002910:	4a98      	ldr	r2, [pc, #608]	; (8002b74 <HAL_RCC_ClockConfig+0x27c>)
 8002912:	6813      	ldr	r3, [r2, #0]
 8002914:	f023 030f 	bic.w	r3, r3, #15
 8002918:	430b      	orrs	r3, r1
 800291a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800291c:	6813      	ldr	r3, [r2, #0]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	428b      	cmp	r3, r1
 8002924:	f040 811f 	bne.w	8002b66 <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002928:	6823      	ldr	r3, [r4, #0]
 800292a:	f013 0f04 	tst.w	r3, #4
 800292e:	d00c      	beq.n	800294a <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002930:	6922      	ldr	r2, [r4, #16]
 8002932:	4b91      	ldr	r3, [pc, #580]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800293a:	429a      	cmp	r2, r3
 800293c:	d905      	bls.n	800294a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800293e:	498e      	ldr	r1, [pc, #568]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 8002940:	698b      	ldr	r3, [r1, #24]
 8002942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002946:	431a      	orrs	r2, r3
 8002948:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294a:	6823      	ldr	r3, [r4, #0]
 800294c:	f013 0f08 	tst.w	r3, #8
 8002950:	d00c      	beq.n	800296c <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002952:	6962      	ldr	r2, [r4, #20]
 8002954:	4b88      	ldr	r3, [pc, #544]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800295c:	429a      	cmp	r2, r3
 800295e:	d905      	bls.n	800296c <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002960:	4985      	ldr	r1, [pc, #532]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 8002962:	69cb      	ldr	r3, [r1, #28]
 8002964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002968:	431a      	orrs	r2, r3
 800296a:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	f013 0f10 	tst.w	r3, #16
 8002972:	d00c      	beq.n	800298e <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002974:	69a2      	ldr	r2, [r4, #24]
 8002976:	4b80      	ldr	r3, [pc, #512]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800297e:	429a      	cmp	r2, r3
 8002980:	d905      	bls.n	800298e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002982:	497d      	ldr	r1, [pc, #500]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 8002984:	69cb      	ldr	r3, [r1, #28]
 8002986:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800298a:	431a      	orrs	r2, r3
 800298c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800298e:	6823      	ldr	r3, [r4, #0]
 8002990:	f013 0f20 	tst.w	r3, #32
 8002994:	d00c      	beq.n	80029b0 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002996:	69e2      	ldr	r2, [r4, #28]
 8002998:	4b77      	ldr	r3, [pc, #476]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d905      	bls.n	80029b0 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80029a4:	4974      	ldr	r1, [pc, #464]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 80029a6:	6a0b      	ldr	r3, [r1, #32]
 80029a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ac:	431a      	orrs	r2, r3
 80029ae:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	f013 0f02 	tst.w	r3, #2
 80029b6:	d00c      	beq.n	80029d2 <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80029b8:	68e2      	ldr	r2, [r4, #12]
 80029ba:	4b6f      	ldr	r3, [pc, #444]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d905      	bls.n	80029d2 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c6:	496c      	ldr	r1, [pc, #432]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 80029c8:	698b      	ldr	r3, [r1, #24]
 80029ca:	f023 030f 	bic.w	r3, r3, #15
 80029ce:	431a      	orrs	r2, r3
 80029d0:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	f013 0f01 	tst.w	r3, #1
 80029d8:	d041      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80029da:	4a67      	ldr	r2, [pc, #412]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 80029dc:	6993      	ldr	r3, [r2, #24]
 80029de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029e2:	68a1      	ldr	r1, [r4, #8]
 80029e4:	430b      	orrs	r3, r1
 80029e6:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e8:	6863      	ldr	r3, [r4, #4]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d00a      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d027      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d02c      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029f6:	4a60      	ldr	r2, [pc, #384]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	f012 0f04 	tst.w	r2, #4
 80029fe:	d106      	bne.n	8002a0e <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8002a00:	2001      	movs	r0, #1
 8002a02:	e0ad      	b.n	8002b60 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002a0a:	f000 80ae 	beq.w	8002b6a <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a0e:	495a      	ldr	r1, [pc, #360]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 8002a10:	690a      	ldr	r2, [r1, #16]
 8002a12:	f022 0207 	bic.w	r2, r2, #7
 8002a16:	4313      	orrs	r3, r2
 8002a18:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fcc7 	bl	80013ac <HAL_GetTick>
 8002a1e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a20:	4b55      	ldr	r3, [pc, #340]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a28:	6862      	ldr	r2, [r4, #4]
 8002a2a:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8002a2e:	d016      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a30:	f7fe fcbc 	bl	80013ac <HAL_GetTick>
 8002a34:	1b80      	subs	r0, r0, r6
 8002a36:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a3a:	4298      	cmp	r0, r3
 8002a3c:	d9f0      	bls.n	8002a20 <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 8002a3e:	2003      	movs	r0, #3
 8002a40:	e08e      	b.n	8002b60 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a42:	4a4d      	ldr	r2, [pc, #308]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 8002a44:	6812      	ldr	r2, [r2, #0]
 8002a46:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002a4a:	d1e0      	bne.n	8002a0e <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	e087      	b.n	8002b60 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a50:	4a49      	ldr	r2, [pc, #292]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002a58:	d1d9      	bne.n	8002a0e <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	e080      	b.n	8002b60 <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	f013 0f02 	tst.w	r3, #2
 8002a64:	d00c      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a66:	68e2      	ldr	r2, [r4, #12]
 8002a68:	4b43      	ldr	r3, [pc, #268]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d205      	bcs.n	8002a80 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a74:	4940      	ldr	r1, [pc, #256]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 8002a76:	698b      	ldr	r3, [r1, #24]
 8002a78:	f023 030f 	bic.w	r3, r3, #15
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a80:	4b3c      	ldr	r3, [pc, #240]	; (8002b74 <HAL_RCC_ClockConfig+0x27c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 030f 	and.w	r3, r3, #15
 8002a88:	42ab      	cmp	r3, r5
 8002a8a:	d90a      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8c:	4a39      	ldr	r2, [pc, #228]	; (8002b74 <HAL_RCC_ClockConfig+0x27c>)
 8002a8e:	6813      	ldr	r3, [r2, #0]
 8002a90:	f023 030f 	bic.w	r3, r3, #15
 8002a94:	432b      	orrs	r3, r5
 8002a96:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a98:	6813      	ldr	r3, [r2, #0]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	42ab      	cmp	r3, r5
 8002aa0:	d165      	bne.n	8002b6e <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	f013 0f04 	tst.w	r3, #4
 8002aa8:	d00c      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002aaa:	6922      	ldr	r2, [r4, #16]
 8002aac:	4b32      	ldr	r3, [pc, #200]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d205      	bcs.n	8002ac4 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ab8:	492f      	ldr	r1, [pc, #188]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 8002aba:	698b      	ldr	r3, [r1, #24]
 8002abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac4:	6823      	ldr	r3, [r4, #0]
 8002ac6:	f013 0f08 	tst.w	r3, #8
 8002aca:	d00c      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002acc:	6962      	ldr	r2, [r4, #20]
 8002ace:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d205      	bcs.n	8002ae6 <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ada:	4927      	ldr	r1, [pc, #156]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 8002adc:	69cb      	ldr	r3, [r1, #28]
 8002ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae6:	6823      	ldr	r3, [r4, #0]
 8002ae8:	f013 0f10 	tst.w	r3, #16
 8002aec:	d00c      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002aee:	69a2      	ldr	r2, [r4, #24]
 8002af0:	4b21      	ldr	r3, [pc, #132]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d205      	bcs.n	8002b08 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002afc:	491e      	ldr	r1, [pc, #120]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 8002afe:	69cb      	ldr	r3, [r1, #28]
 8002b00:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b04:	431a      	orrs	r2, r3
 8002b06:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b08:	6823      	ldr	r3, [r4, #0]
 8002b0a:	f013 0f20 	tst.w	r3, #32
 8002b0e:	d00c      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b10:	69e2      	ldr	r2, [r4, #28]
 8002b12:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d205      	bcs.n	8002b2a <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002b1e:	4916      	ldr	r1, [pc, #88]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 8002b20:	6a0b      	ldr	r3, [r1, #32]
 8002b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b26:	431a      	orrs	r2, r3
 8002b28:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b2a:	f7ff fdeb 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 8002b2e:	4912      	ldr	r1, [pc, #72]	; (8002b78 <HAL_RCC_ClockConfig+0x280>)
 8002b30:	698b      	ldr	r3, [r1, #24]
 8002b32:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002b36:	4a11      	ldr	r2, [pc, #68]	; (8002b7c <HAL_RCC_ClockConfig+0x284>)
 8002b38:	5cd3      	ldrb	r3, [r2, r3]
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b40:	698b      	ldr	r3, [r1, #24]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	5cd3      	ldrb	r3, [r2, r3]
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	fa20 f303 	lsr.w	r3, r0, r3
 8002b50:	4a0b      	ldr	r2, [pc, #44]	; (8002b80 <HAL_RCC_ClockConfig+0x288>)
 8002b52:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_RCC_ClockConfig+0x28c>)
 8002b56:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_RCC_ClockConfig+0x290>)
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	f7fe fbc4 	bl	80012e8 <HAL_InitTick>
}
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002b62:	2001      	movs	r0, #1
}
 8002b64:	4770      	bx	lr
      return HAL_ERROR;
 8002b66:	2001      	movs	r0, #1
 8002b68:	e7fa      	b.n	8002b60 <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	e7f8      	b.n	8002b60 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 8002b6e:	2001      	movs	r0, #1
 8002b70:	e7f6      	b.n	8002b60 <HAL_RCC_ClockConfig+0x268>
 8002b72:	bf00      	nop
 8002b74:	52002000 	.word	0x52002000
 8002b78:	58024400 	.word	0x58024400
 8002b7c:	08007d64 	.word	0x08007d64
 8002b80:	20000004 	.word	0x20000004
 8002b84:	20000000 	.word	0x20000000
 8002b88:	2000000c 	.word	0x2000000c

08002b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b8c:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002b8e:	f7ff fdb9 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 8002b92:	4a0b      	ldr	r2, [pc, #44]	; (8002bc0 <HAL_RCC_GetHCLKFreq+0x34>)
 8002b94:	6993      	ldr	r3, [r2, #24]
 8002b96:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002b9a:	490a      	ldr	r1, [pc, #40]	; (8002bc4 <HAL_RCC_GetHCLKFreq+0x38>)
 8002b9c:	5ccb      	ldrb	r3, [r1, r3]
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ba6:	6992      	ldr	r2, [r2, #24]
 8002ba8:	f002 020f 	and.w	r2, r2, #15
 8002bac:	5c88      	ldrb	r0, [r1, r2]
 8002bae:	f000 001f 	and.w	r0, r0, #31
 8002bb2:	fa23 f000 	lsr.w	r0, r3, r0
 8002bb6:	4a04      	ldr	r2, [pc, #16]	; (8002bc8 <HAL_RCC_GetHCLKFreq+0x3c>)
 8002bb8:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002bba:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <HAL_RCC_GetHCLKFreq+0x40>)
 8002bbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8002bbe:	bd08      	pop	{r3, pc}
 8002bc0:	58024400 	.word	0x58024400
 8002bc4:	08007d64 	.word	0x08007d64
 8002bc8:	20000004 	.word	0x20000004
 8002bcc:	20000000 	.word	0x20000000

08002bd0 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002bd0:	4b40      	ldr	r3, [pc, #256]	; (8002cd4 <RCCEx_PLL2_Config+0x104>)
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d079      	beq.n	8002cd0 <RCCEx_PLL2_Config+0x100>
{
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	4605      	mov	r5, r0
 8002be0:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002be2:	4a3c      	ldr	r2, [pc, #240]	; (8002cd4 <RCCEx_PLL2_Config+0x104>)
 8002be4:	6813      	ldr	r3, [r2, #0]
 8002be6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bec:	f7fe fbde 	bl	80013ac <HAL_GetTick>
 8002bf0:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002bf2:	4b38      	ldr	r3, [pc, #224]	; (8002cd4 <RCCEx_PLL2_Config+0x104>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002bfa:	d006      	beq.n	8002c0a <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002bfc:	f7fe fbd6 	bl	80013ac <HAL_GetTick>
 8002c00:	1b03      	subs	r3, r0, r4
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d9f5      	bls.n	8002bf2 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8002c06:	2003      	movs	r0, #3

  }


  return status;
}
 8002c08:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002c0a:	4b32      	ldr	r3, [pc, #200]	; (8002cd4 <RCCEx_PLL2_Config+0x104>)
 8002c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c0e:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8002c12:	6829      	ldr	r1, [r5, #0]
 8002c14:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8002c18:	629a      	str	r2, [r3, #40]	; 0x28
 8002c1a:	686a      	ldr	r2, [r5, #4]
 8002c1c:	3a01      	subs	r2, #1
 8002c1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c22:	68a9      	ldr	r1, [r5, #8]
 8002c24:	3901      	subs	r1, #1
 8002c26:	0249      	lsls	r1, r1, #9
 8002c28:	b289      	uxth	r1, r1
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	68e9      	ldr	r1, [r5, #12]
 8002c2e:	3901      	subs	r1, #1
 8002c30:	0409      	lsls	r1, r1, #16
 8002c32:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8002c36:	430a      	orrs	r2, r1
 8002c38:	6929      	ldr	r1, [r5, #16]
 8002c3a:	3901      	subs	r1, #1
 8002c3c:	0609      	lsls	r1, r1, #24
 8002c3e:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8002c42:	430a      	orrs	r2, r1
 8002c44:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c48:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002c4c:	6969      	ldr	r1, [r5, #20]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c54:	f022 0220 	bic.w	r2, r2, #32
 8002c58:	69a9      	ldr	r1, [r5, #24]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c60:	f022 0210 	bic.w	r2, r2, #16
 8002c64:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002c66:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002c68:	4a1b      	ldr	r2, [pc, #108]	; (8002cd8 <RCCEx_PLL2_Config+0x108>)
 8002c6a:	400a      	ands	r2, r1
 8002c6c:	69e9      	ldr	r1, [r5, #28]
 8002c6e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002c72:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8002c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c76:	f042 0210 	orr.w	r2, r2, #16
 8002c7a:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8002c7c:	b9c6      	cbnz	r6, 8002cb0 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002c7e:	461a      	mov	r2, r3
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c86:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8002c88:	4a12      	ldr	r2, [pc, #72]	; (8002cd4 <RCCEx_PLL2_Config+0x104>)
 8002c8a:	6813      	ldr	r3, [r2, #0]
 8002c8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c90:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002c92:	f7fe fb8b 	bl	80013ac <HAL_GetTick>
 8002c96:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <RCCEx_PLL2_Config+0x104>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002ca0:	d114      	bne.n	8002ccc <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002ca2:	f7fe fb83 	bl	80013ac <HAL_GetTick>
 8002ca6:	1b00      	subs	r0, r0, r4
 8002ca8:	2802      	cmp	r0, #2
 8002caa:	d9f5      	bls.n	8002c98 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8002cac:	2003      	movs	r0, #3
 8002cae:	e7ab      	b.n	8002c08 <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8002cb0:	2e01      	cmp	r6, #1
 8002cb2:	d005      	beq.n	8002cc0 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002cb4:	4a07      	ldr	r2, [pc, #28]	; (8002cd4 <RCCEx_PLL2_Config+0x104>)
 8002cb6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002cb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cbc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002cbe:	e7e3      	b.n	8002c88 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002cc0:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <RCCEx_PLL2_Config+0x104>)
 8002cc2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002cc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cc8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002cca:	e7dd      	b.n	8002c88 <RCCEx_PLL2_Config+0xb8>
  return status;
 8002ccc:	2000      	movs	r0, #0
 8002cce:	e79b      	b.n	8002c08 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8002cd0:	2001      	movs	r0, #1
}
 8002cd2:	4770      	bx	lr
 8002cd4:	58024400 	.word	0x58024400
 8002cd8:	ffff0007 	.word	0xffff0007

08002cdc <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002cdc:	4b40      	ldr	r3, [pc, #256]	; (8002de0 <RCCEx_PLL3_Config+0x104>)
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d079      	beq.n	8002ddc <RCCEx_PLL3_Config+0x100>
{
 8002ce8:	b570      	push	{r4, r5, r6, lr}
 8002cea:	4605      	mov	r5, r0
 8002cec:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8002cee:	4a3c      	ldr	r2, [pc, #240]	; (8002de0 <RCCEx_PLL3_Config+0x104>)
 8002cf0:	6813      	ldr	r3, [r2, #0]
 8002cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf8:	f7fe fb58 	bl	80013ac <HAL_GetTick>
 8002cfc:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002cfe:	4b38      	ldr	r3, [pc, #224]	; (8002de0 <RCCEx_PLL3_Config+0x104>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002d06:	d006      	beq.n	8002d16 <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002d08:	f7fe fb50 	bl	80013ac <HAL_GetTick>
 8002d0c:	1b03      	subs	r3, r0, r4
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d9f5      	bls.n	8002cfe <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8002d12:	2003      	movs	r0, #3

  }


  return status;
}
 8002d14:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8002d16:	4b32      	ldr	r3, [pc, #200]	; (8002de0 <RCCEx_PLL3_Config+0x104>)
 8002d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d1a:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8002d1e:	6829      	ldr	r1, [r5, #0]
 8002d20:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002d24:	629a      	str	r2, [r3, #40]	; 0x28
 8002d26:	686a      	ldr	r2, [r5, #4]
 8002d28:	3a01      	subs	r2, #1
 8002d2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d2e:	68a9      	ldr	r1, [r5, #8]
 8002d30:	3901      	subs	r1, #1
 8002d32:	0249      	lsls	r1, r1, #9
 8002d34:	b289      	uxth	r1, r1
 8002d36:	430a      	orrs	r2, r1
 8002d38:	68e9      	ldr	r1, [r5, #12]
 8002d3a:	3901      	subs	r1, #1
 8002d3c:	0409      	lsls	r1, r1, #16
 8002d3e:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8002d42:	430a      	orrs	r2, r1
 8002d44:	6929      	ldr	r1, [r5, #16]
 8002d46:	3901      	subs	r1, #1
 8002d48:	0609      	lsls	r1, r1, #24
 8002d4a:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8002d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d54:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d58:	6969      	ldr	r1, [r5, #20]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8002d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d64:	69a9      	ldr	r1, [r5, #24]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8002d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d70:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002d72:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002d74:	4a1b      	ldr	r2, [pc, #108]	; (8002de4 <RCCEx_PLL3_Config+0x108>)
 8002d76:	400a      	ands	r2, r1
 8002d78:	69e9      	ldr	r1, [r5, #28]
 8002d7a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002d7e:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8002d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d86:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8002d88:	b9c6      	cbnz	r6, 8002dbc <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d92:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8002d94:	4a12      	ldr	r2, [pc, #72]	; (8002de0 <RCCEx_PLL3_Config+0x104>)
 8002d96:	6813      	ldr	r3, [r2, #0]
 8002d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002d9e:	f7fe fb05 	bl	80013ac <HAL_GetTick>
 8002da2:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002da4:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <RCCEx_PLL3_Config+0x104>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002dac:	d114      	bne.n	8002dd8 <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002dae:	f7fe fafd 	bl	80013ac <HAL_GetTick>
 8002db2:	1b00      	subs	r0, r0, r4
 8002db4:	2802      	cmp	r0, #2
 8002db6:	d9f5      	bls.n	8002da4 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8002db8:	2003      	movs	r0, #3
 8002dba:	e7ab      	b.n	8002d14 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8002dbc:	2e01      	cmp	r6, #1
 8002dbe:	d005      	beq.n	8002dcc <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002dc0:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <RCCEx_PLL3_Config+0x104>)
 8002dc2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002dc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dc8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002dca:	e7e3      	b.n	8002d94 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8002dcc:	4a04      	ldr	r2, [pc, #16]	; (8002de0 <RCCEx_PLL3_Config+0x104>)
 8002dce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002dd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dd4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002dd6:	e7dd      	b.n	8002d94 <RCCEx_PLL3_Config+0xb8>
  return status;
 8002dd8:	2000      	movs	r0, #0
 8002dda:	e79b      	b.n	8002d14 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8002ddc:	2001      	movs	r0, #1
}
 8002dde:	4770      	bx	lr
 8002de0:	58024400 	.word	0x58024400
 8002de4:	ffff0007 	.word	0xffff0007

08002de8 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dea:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dec:	6803      	ldr	r3, [r0, #0]
 8002dee:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002df2:	d030      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002df4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002df6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dfa:	d026      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002dfc:	d80e      	bhi.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002dfe:	b1eb      	cbz	r3, 8002e3c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002e00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e04:	d107      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e06:	2102      	movs	r1, #2
 8002e08:	3004      	adds	r0, #4
 8002e0a:	f7ff fee1 	bl	8002bd0 <RCCEx_PLL2_Config>
 8002e0e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002e10:	b145      	cbz	r5, 8002e24 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002e12:	462e      	mov	r6, r5
 8002e14:	e021      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002e16:	2601      	movs	r6, #1
 8002e18:	4635      	mov	r5, r6
 8002e1a:	e01e      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002e1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e20:	d109      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002e22:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002e24:	4a95      	ldr	r2, [pc, #596]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002e26:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002e28:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002e2c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e32:	2600      	movs	r6, #0
 8002e34:	e011      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002e36:	2601      	movs	r6, #1
 8002e38:	4635      	mov	r5, r6
 8002e3a:	e00e      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e3c:	4a8f      	ldr	r2, [pc, #572]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002e3e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e44:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e46:	2500      	movs	r5, #0
 8002e48:	e7ec      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e4a:	2102      	movs	r1, #2
 8002e4c:	3024      	adds	r0, #36	; 0x24
 8002e4e:	f7ff ff45 	bl	8002cdc <RCCEx_PLL3_Config>
 8002e52:	4605      	mov	r5, r0
      break;
 8002e54:	e7dc      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e56:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e58:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e5a:	6823      	ldr	r3, [r4, #0]
 8002e5c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e60:	d014      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002e62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d830      	bhi.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002e68:	e8df f003 	tbb	[pc, r3]
 8002e6c:	08282203 	.word	0x08282203
 8002e70:	08          	.byte	0x08
 8002e71:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e72:	4a82      	ldr	r2, [pc, #520]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002e74:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e7a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002e7c:	bb45      	cbnz	r5, 8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e7e:	4a7f      	ldr	r2, [pc, #508]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002e80:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002e82:	f023 0307 	bic.w	r3, r3, #7
 8002e86:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002e92:	d02f      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai23ClockSelection)
 8002e94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e96:	2b80      	cmp	r3, #128	; 0x80
 8002e98:	d049      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x146>
 8002e9a:	d81e      	bhi.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d040      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8002ea0:	2b40      	cmp	r3, #64	; 0x40
 8002ea2:	d117      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	1d20      	adds	r0, r4, #4
 8002ea8:	f7ff fe92 	bl	8002bd0 <RCCEx_PLL2_Config>
 8002eac:	4605      	mov	r5, r0
      break;
 8002eae:	e019      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	1d20      	adds	r0, r4, #4
 8002eb4:	f7ff fe8c 	bl	8002bd0 <RCCEx_PLL2_Config>
 8002eb8:	4605      	mov	r5, r0
      break;
 8002eba:	e7df      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002ec2:	f7ff ff0b 	bl	8002cdc <RCCEx_PLL3_Config>
 8002ec6:	4605      	mov	r5, r0
      break;
 8002ec8:	e7d8      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002eca:	2601      	movs	r6, #1
 8002ecc:	4635      	mov	r5, r6
 8002ece:	e7dd      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002ed0:	462e      	mov	r6, r5
 8002ed2:	e7db      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai23ClockSelection)
 8002ed4:	2601      	movs	r6, #1
 8002ed6:	4635      	mov	r5, r6
 8002ed8:	e00c      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002eda:	2bc0      	cmp	r3, #192	; 0xc0
 8002edc:	d002      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ee2:	d11b      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x134>
    if(ret == HAL_OK)
 8002ee4:	bb55      	cbnz	r5, 8002f3c <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002ee6:	4a65      	ldr	r2, [pc, #404]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002ee8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002eea:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8002eee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002ef4:	6823      	ldr	r3, [r4, #0]
 8002ef6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002efa:	d045      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8002efc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8002f00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f04:	d038      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002f06:	d81e      	bhi.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002f08:	b383      	cbz	r3, 8002f6c <HAL_RCCEx_PeriphCLKConfig+0x184>
 8002f0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f0e:	d117      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x158>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f10:	2100      	movs	r1, #0
 8002f12:	1d20      	adds	r0, r4, #4
 8002f14:	f7ff fe5c 	bl	8002bd0 <RCCEx_PLL2_Config>
 8002f18:	4605      	mov	r5, r0
      break;
 8002f1a:	e01a      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Sai23ClockSelection)
 8002f1c:	2601      	movs	r6, #1
 8002f1e:	4635      	mov	r5, r6
 8002f20:	e7e8      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f22:	4a56      	ldr	r2, [pc, #344]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002f24:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002f2c:	e7da      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002f2e:	2100      	movs	r1, #0
 8002f30:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002f34:	f7ff fed2 	bl	8002cdc <RCCEx_PLL3_Config>
 8002f38:	4605      	mov	r5, r0
      break;
 8002f3a:	e7d3      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002f3c:	462e      	mov	r6, r5
 8002f3e:	e7d9      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai4AClockSelection)
 8002f40:	2601      	movs	r6, #1
 8002f42:	4635      	mov	r5, r6
 8002f44:	e020      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8002f46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002f4a:	d002      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002f4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f50:	d109      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    if(ret == HAL_OK)
 8002f52:	b9c5      	cbnz	r5, 8002f86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002f54:	4a49      	ldr	r2, [pc, #292]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002f56:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002f58:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8002f5c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8002f60:	430b      	orrs	r3, r1
 8002f62:	6593      	str	r3, [r2, #88]	; 0x58
 8002f64:	e010      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8002f66:	2601      	movs	r6, #1
 8002f68:	4635      	mov	r5, r6
 8002f6a:	e00d      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f6c:	4a43      	ldr	r2, [pc, #268]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002f6e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f74:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002f76:	e7ec      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x16a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002f78:	2100      	movs	r1, #0
 8002f7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002f7e:	f7ff fead 	bl	8002cdc <RCCEx_PLL3_Config>
 8002f82:	4605      	mov	r5, r0
      break;
 8002f84:	e7e5      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002f86:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002f8e:	d023      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002f90:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8002f94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f98:	d041      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x236>
 8002f9a:	d80d      	bhi.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d038      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fa4:	d105      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	1d20      	adds	r0, r4, #4
 8002faa:	f7ff fe11 	bl	8002bd0 <RCCEx_PLL2_Config>
 8002fae:	4605      	mov	r5, r0
      break;
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002fb2:	2601      	movs	r6, #1
 8002fb4:	4635      	mov	r5, r6
 8002fb6:	e00f      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8002fb8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fbc:	d002      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002fbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fc2:	d123      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 8002fc4:	2d00      	cmp	r5, #0
 8002fc6:	d131      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002fc8:	4a2c      	ldr	r2, [pc, #176]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002fca:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002fcc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002fd0:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002fd8:	6823      	ldr	r3, [r4, #0]
 8002fda:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002fde:	d02e      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->QspiClockSelection)
 8002fe0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d03f      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8002fe6:	d826      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8002fe8:	b133      	cbz	r3, 8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002fea:	2b10      	cmp	r3, #16
 8002fec:	d120      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fee:	4a23      	ldr	r2, [pc, #140]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002ff0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002ff8:	2d00      	cmp	r5, #0
 8002ffa:	d13a      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x28a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ffc:	4a1f      	ldr	r2, [pc, #124]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002ffe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003000:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003004:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003006:	430b      	orrs	r3, r1
 8003008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800300a:	e018      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->Sai4BClockSelection)
 800300c:	2601      	movs	r6, #1
 800300e:	4635      	mov	r5, r6
 8003010:	e7e2      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003012:	4a1a      	ldr	r2, [pc, #104]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003014:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800301a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800301c:	e7d2      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800301e:	2100      	movs	r1, #0
 8003020:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003024:	f7ff fe5a 	bl	8002cdc <RCCEx_PLL3_Config>
 8003028:	4605      	mov	r5, r0
      break;
 800302a:	e7cb      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800302c:	462e      	mov	r6, r5
 800302e:	e7d3      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->QspiClockSelection)
 8003030:	2601      	movs	r6, #1
 8003032:	4635      	mov	r5, r6
 8003034:	e003      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003036:	2b30      	cmp	r3, #48	; 0x30
 8003038:	d0de      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800303a:	2601      	movs	r6, #1
 800303c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003044:	d02b      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003046:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800304c:	d04c      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800304e:	d817      	bhi.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003050:	2b00      	cmp	r3, #0
 8003052:	d043      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003058:	d10d      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x28e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800305a:	2100      	movs	r1, #0
 800305c:	1d20      	adds	r0, r4, #4
 800305e:	f7ff fdb7 	bl	8002bd0 <RCCEx_PLL2_Config>
 8003062:	4605      	mov	r5, r0
      break;
 8003064:	e012      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003066:	2102      	movs	r1, #2
 8003068:	1d20      	adds	r0, r4, #4
 800306a:	f7ff fdb1 	bl	8002bd0 <RCCEx_PLL2_Config>
 800306e:	4605      	mov	r5, r0
      break;
 8003070:	e7c2      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003072:	462e      	mov	r6, r5
 8003074:	e7e3      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003076:	2601      	movs	r6, #1
 8003078:	4635      	mov	r5, r6
 800307a:	e010      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800307c:	58024400 	.word	0x58024400
 8003080:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003084:	d002      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8003086:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800308a:	d124      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    if(ret == HAL_OK)
 800308c:	2d00      	cmp	r5, #0
 800308e:	d132      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003090:	4a75      	ldr	r2, [pc, #468]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8003092:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003098:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800309a:	430b      	orrs	r3, r1
 800309c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80030a4:	d037      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi45ClockSelection)
 80030a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80030a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030ac:	d051      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80030ae:	d827      	bhi.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80030b0:	b13b      	cbz	r3, 80030c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80030b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b6:	d120      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030b8:	2101      	movs	r1, #1
 80030ba:	1d20      	adds	r0, r4, #4
 80030bc:	f7ff fd88 	bl	8002bd0 <RCCEx_PLL2_Config>
 80030c0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80030c2:	2d00      	cmp	r5, #0
 80030c4:	d14c      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80030c6:	4a68      	ldr	r2, [pc, #416]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80030c8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80030ca:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80030ce:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80030d0:	430b      	orrs	r3, r1
 80030d2:	6513      	str	r3, [r2, #80]	; 0x50
 80030d4:	e01f      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi123ClockSelection)
 80030d6:	2601      	movs	r6, #1
 80030d8:	4635      	mov	r5, r6
 80030da:	e7e0      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030dc:	4a62      	ldr	r2, [pc, #392]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80030de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80030e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80030e6:	e7d1      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80030e8:	2100      	movs	r1, #0
 80030ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80030ee:	f7ff fdf5 	bl	8002cdc <RCCEx_PLL3_Config>
 80030f2:	4605      	mov	r5, r0
      break;
 80030f4:	e7ca      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 80030f6:	462e      	mov	r6, r5
 80030f8:	e7d1      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 80030fa:	2601      	movs	r6, #1
 80030fc:	4635      	mov	r5, r6
 80030fe:	e00a      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003100:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003104:	d0dd      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003106:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800310a:	d0da      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800310c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003110:	d0d7      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003112:	2601      	movs	r6, #1
 8003114:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800311c:	d030      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x398>
    switch(PeriphClkInit->Spi6ClockSelection)
 800311e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8003122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003126:	d044      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8003128:	d81f      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800312a:	b13b      	cbz	r3, 800313c <HAL_RCCEx_PeriphCLKConfig+0x354>
 800312c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003130:	d118      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003132:	2101      	movs	r1, #1
 8003134:	1d20      	adds	r0, r4, #4
 8003136:	f7ff fd4b 	bl	8002bd0 <RCCEx_PLL2_Config>
 800313a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800313c:	2d00      	cmp	r5, #0
 800313e:	d13f      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003140:	4a49      	ldr	r2, [pc, #292]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8003142:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003144:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003148:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800314c:	430b      	orrs	r3, r1
 800314e:	6593      	str	r3, [r2, #88]	; 0x58
 8003150:	e016      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x398>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003152:	2101      	movs	r1, #1
 8003154:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003158:	f7ff fdc0 	bl	8002cdc <RCCEx_PLL3_Config>
 800315c:	4605      	mov	r5, r0
      break;
 800315e:	e7b0      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003160:	462e      	mov	r6, r5
 8003162:	e7d8      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003164:	2601      	movs	r6, #1
 8003166:	4635      	mov	r5, r6
 8003168:	e00a      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800316a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316e:	d0e5      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003174:	d0e2      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003176:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800317a:	d0df      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x354>
 800317c:	2601      	movs	r6, #1
 800317e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003186:	d009      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FdcanClockSelection)
 8003188:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800318a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800318e:	d019      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8003190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003194:	d024      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003196:	b1d3      	cbz	r3, 80031ce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003198:	2601      	movs	r6, #1
 800319a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800319c:	6823      	ldr	r3, [r4, #0]
 800319e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80031a2:	d032      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x422>
    switch(PeriphClkInit->FmcClockSelection)
 80031a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d859      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80031aa:	e8df f003 	tbb	[pc, r3]
 80031ae:	2126      	.short	0x2126
 80031b0:	2652      	.short	0x2652
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031b2:	2101      	movs	r1, #1
 80031b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80031b8:	f7ff fd90 	bl	8002cdc <RCCEx_PLL3_Config>
 80031bc:	4605      	mov	r5, r0
      break;
 80031be:	e7bd      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x354>
 80031c0:	462e      	mov	r6, r5
 80031c2:	e7dd      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x398>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031c4:	4a28      	ldr	r2, [pc, #160]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80031c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80031c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80031ce:	b96d      	cbnz	r5, 80031ec <HAL_RCCEx_PeriphCLKConfig+0x404>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031d0:	4a25      	ldr	r2, [pc, #148]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80031d2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80031d4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80031d8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80031da:	430b      	orrs	r3, r1
 80031dc:	6513      	str	r3, [r2, #80]	; 0x50
 80031de:	e7dd      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031e0:	2101      	movs	r1, #1
 80031e2:	1d20      	adds	r0, r4, #4
 80031e4:	f7ff fcf4 	bl	8002bd0 <RCCEx_PLL2_Config>
 80031e8:	4605      	mov	r5, r0
      break;
 80031ea:	e7f0      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80031ec:	462e      	mov	r6, r5
 80031ee:	e7d5      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031f0:	4a1d      	ldr	r2, [pc, #116]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80031f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80031f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80031fa:	bb9d      	cbnz	r5, 8003264 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80031fc:	4a1a      	ldr	r2, [pc, #104]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80031fe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003200:	f023 0303 	bic.w	r3, r3, #3
 8003204:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003206:	430b      	orrs	r3, r1
 8003208:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800320a:	6823      	ldr	r3, [r4, #0]
 800320c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003210:	d12c      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x484>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003212:	6823      	ldr	r3, [r4, #0]
 8003214:	f013 0f01 	tst.w	r3, #1
 8003218:	f000 80a3 	beq.w	8003362 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch(PeriphClkInit->Usart16ClockSelection)
 800321c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800321e:	2b28      	cmp	r3, #40	; 0x28
 8003220:	f200 809d 	bhi.w	800335e <HAL_RCCEx_PeriphCLKConfig+0x576>
 8003224:	e8df f003 	tbb	[pc, r3]
 8003228:	9b9b9b8b 	.word	0x9b9b9b8b
 800322c:	9b9b9b9b 	.word	0x9b9b9b9b
 8003230:	9b9b9b86 	.word	0x9b9b9b86
 8003234:	9b9b9b9b 	.word	0x9b9b9b9b
 8003238:	9b9b9b94 	.word	0x9b9b9b94
 800323c:	9b9b9b9b 	.word	0x9b9b9b9b
 8003240:	9b9b9b8b 	.word	0x9b9b9b8b
 8003244:	9b9b9b9b 	.word	0x9b9b9b9b
 8003248:	9b9b9b8b 	.word	0x9b9b9b8b
 800324c:	9b9b9b9b 	.word	0x9b9b9b9b
 8003250:	8b          	.byte	0x8b
 8003251:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003252:	2102      	movs	r1, #2
 8003254:	1d20      	adds	r0, r4, #4
 8003256:	f7ff fcbb 	bl	8002bd0 <RCCEx_PLL2_Config>
 800325a:	4605      	mov	r5, r0
      break;
 800325c:	e7cd      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    switch(PeriphClkInit->FmcClockSelection)
 800325e:	2601      	movs	r6, #1
 8003260:	4635      	mov	r5, r6
 8003262:	e7d2      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x422>
 8003264:	462e      	mov	r6, r5
 8003266:	e7d0      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x422>
 8003268:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800326c:	4a8f      	ldr	r2, [pc, #572]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800326e:	6813      	ldr	r3, [r2, #0]
 8003270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003274:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003276:	f7fe f899 	bl	80013ac <HAL_GetTick>
 800327a:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800327c:	4b8b      	ldr	r3, [pc, #556]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003284:	d105      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003286:	f7fe f891 	bl	80013ac <HAL_GetTick>
 800328a:	1bc0      	subs	r0, r0, r7
 800328c:	2864      	cmp	r0, #100	; 0x64
 800328e:	d9f5      	bls.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = HAL_TIMEOUT;
 8003290:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8003292:	2d00      	cmp	r5, #0
 8003294:	d14a      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x544>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003296:	4b86      	ldr	r3, [pc, #536]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800329e:	4053      	eors	r3, r2
 80032a0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80032a4:	d00c      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032a6:	4b82      	ldr	r3, [pc, #520]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80032ae:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80032b0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80032b4:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032b6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80032b8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80032bc:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80032be:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80032c0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80032c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c8:	d015      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      if(ret == HAL_OK)
 80032ca:	bb8d      	cbnz	r5, 8003330 <HAL_RCCEx_PeriphCLKConfig+0x548>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032cc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80032d0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80032d4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80032d8:	d01e      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x530>
 80032da:	4a75      	ldr	r2, [pc, #468]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032dc:	6913      	ldr	r3, [r2, #16]
 80032de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80032e2:	6113      	str	r3, [r2, #16]
 80032e4:	4972      	ldr	r1, [pc, #456]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032e6:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80032e8:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80032ec:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80032f0:	4313      	orrs	r3, r2
 80032f2:	670b      	str	r3, [r1, #112]	; 0x70
 80032f4:	e78d      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x42a>
        tickstart = HAL_GetTick();
 80032f6:	f7fe f859 	bl	80013ac <HAL_GetTick>
 80032fa:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032fc:	4b6c      	ldr	r3, [pc, #432]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003300:	f013 0f02 	tst.w	r3, #2
 8003304:	d1e1      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003306:	f7fe f851 	bl	80013ac <HAL_GetTick>
 800330a:	1bc0      	subs	r0, r0, r7
 800330c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003310:	4298      	cmp	r0, r3
 8003312:	d9f3      	bls.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x514>
            ret = HAL_TIMEOUT;
 8003314:	2503      	movs	r5, #3
 8003316:	e7d8      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003318:	4865      	ldr	r0, [pc, #404]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800331a:	6902      	ldr	r2, [r0, #16]
 800331c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8003320:	4964      	ldr	r1, [pc, #400]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003322:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8003326:	4313      	orrs	r3, r2
 8003328:	6103      	str	r3, [r0, #16]
 800332a:	e7db      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      status = ret;
 800332c:	462e      	mov	r6, r5
 800332e:	e770      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x42a>
        status = ret;
 8003330:	462e      	mov	r6, r5
 8003332:	e76e      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003334:	2101      	movs	r1, #1
 8003336:	1d20      	adds	r0, r4, #4
 8003338:	f7ff fc4a 	bl	8002bd0 <RCCEx_PLL2_Config>
 800333c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800333e:	b9e5      	cbnz	r5, 800337a <HAL_RCCEx_PeriphCLKConfig+0x592>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003340:	4a5b      	ldr	r2, [pc, #364]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003342:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003344:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003348:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800334a:	430b      	orrs	r3, r1
 800334c:	6553      	str	r3, [r2, #84]	; 0x54
 800334e:	e008      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x57a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003350:	2101      	movs	r1, #1
 8003352:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003356:	f7ff fcc1 	bl	8002cdc <RCCEx_PLL3_Config>
 800335a:	4605      	mov	r5, r0
      break;
 800335c:	e7ef      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch(PeriphClkInit->Usart16ClockSelection)
 800335e:	2601      	movs	r6, #1
 8003360:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	f013 0f02 	tst.w	r3, #2
 8003368:	d016      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800336a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800336c:	2b05      	cmp	r3, #5
 800336e:	d827      	bhi.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 8003370:	e8df f003 	tbb	[pc, r3]
 8003374:	0a1f050a 	.word	0x0a1f050a
 8003378:	0a0a      	.short	0x0a0a
 800337a:	462e      	mov	r6, r5
 800337c:	e7f1      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x57a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800337e:	2101      	movs	r1, #1
 8003380:	1d20      	adds	r0, r4, #4
 8003382:	f7ff fc25 	bl	8002bd0 <RCCEx_PLL2_Config>
 8003386:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003388:	b9ed      	cbnz	r5, 80033c6 <HAL_RCCEx_PeriphCLKConfig+0x5de>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800338a:	4a49      	ldr	r2, [pc, #292]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800338c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800338e:	f023 0307 	bic.w	r3, r3, #7
 8003392:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003394:	430b      	orrs	r3, r1
 8003396:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003398:	6823      	ldr	r3, [r4, #0]
 800339a:	f013 0f04 	tst.w	r3, #4
 800339e:	d022      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80033a0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80033a4:	2b05      	cmp	r3, #5
 80033a6:	d843      	bhi.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80033a8:	e8df f003 	tbb	[pc, r3]
 80033ac:	143b0f14 	.word	0x143b0f14
 80033b0:	1414      	.short	0x1414
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80033b2:	2101      	movs	r1, #1
 80033b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80033b8:	f7ff fc90 	bl	8002cdc <RCCEx_PLL3_Config>
 80033bc:	4605      	mov	r5, r0
      break;
 80033be:	e7e3      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80033c0:	2601      	movs	r6, #1
 80033c2:	4635      	mov	r5, r6
 80033c4:	e7e8      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 80033c6:	462e      	mov	r6, r5
 80033c8:	e7e6      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80033ca:	2101      	movs	r1, #1
 80033cc:	1d20      	adds	r0, r4, #4
 80033ce:	f7ff fbff 	bl	8002bd0 <RCCEx_PLL2_Config>
 80033d2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80033d4:	bb7d      	cbnz	r5, 8003436 <HAL_RCCEx_PeriphCLKConfig+0x64e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033d6:	4a36      	ldr	r2, [pc, #216]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033d8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80033da:	f023 0307 	bic.w	r3, r3, #7
 80033de:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80033e2:	430b      	orrs	r3, r1
 80033e4:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	f013 0f20 	tst.w	r3, #32
 80033ec:	d033      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80033ee:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80033f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033f6:	d04c      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 80033f8:	d822      	bhi.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x658>
 80033fa:	b13b      	cbz	r3, 800340c <HAL_RCCEx_PeriphCLKConfig+0x624>
 80033fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003400:	d11b      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x652>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003402:	2100      	movs	r1, #0
 8003404:	1d20      	adds	r0, r4, #4
 8003406:	f7ff fbe3 	bl	8002bd0 <RCCEx_PLL2_Config>
 800340a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800340c:	2d00      	cmp	r5, #0
 800340e:	d147      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003410:	4a27      	ldr	r2, [pc, #156]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003412:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003414:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003418:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800341c:	430b      	orrs	r3, r1
 800341e:	6553      	str	r3, [r2, #84]	; 0x54
 8003420:	e019      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x66e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003422:	2101      	movs	r1, #1
 8003424:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003428:	f7ff fc58 	bl	8002cdc <RCCEx_PLL3_Config>
 800342c:	4605      	mov	r5, r0
      break;
 800342e:	e7d1      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003430:	2601      	movs	r6, #1
 8003432:	4635      	mov	r5, r6
 8003434:	e7d7      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
 8003436:	462e      	mov	r6, r5
 8003438:	e7d5      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800343a:	2601      	movs	r6, #1
 800343c:	4635      	mov	r5, r6
 800343e:	e00a      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003444:	d0e2      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003446:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800344a:	d0df      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x624>
 800344c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003450:	d0dc      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003452:	2601      	movs	r6, #1
 8003454:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	f013 0f40 	tst.w	r3, #64	; 0x40
 800345c:	d037      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800345e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003466:	d052      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x726>
 8003468:	d826      	bhi.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 800346a:	b13b      	cbz	r3, 800347c <HAL_RCCEx_PeriphCLKConfig+0x694>
 800346c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003470:	d118      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003472:	2100      	movs	r1, #0
 8003474:	1d20      	adds	r0, r4, #4
 8003476:	f7ff fbab 	bl	8002bd0 <RCCEx_PLL2_Config>
 800347a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800347c:	2d00      	cmp	r5, #0
 800347e:	d14d      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003480:	4a0b      	ldr	r2, [pc, #44]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003482:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003484:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003488:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800348c:	430b      	orrs	r3, r1
 800348e:	6593      	str	r3, [r2, #88]	; 0x58
 8003490:	e01d      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x6e6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003492:	2102      	movs	r1, #2
 8003494:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003498:	f7ff fc20 	bl	8002cdc <RCCEx_PLL3_Config>
 800349c:	4605      	mov	r5, r0
      break;
 800349e:	e7b5      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x624>
 80034a0:	462e      	mov	r6, r5
 80034a2:	e7d8      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80034a4:	2601      	movs	r6, #1
 80034a6:	4635      	mov	r5, r6
 80034a8:	e011      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x6e6>
 80034aa:	bf00      	nop
 80034ac:	58024800 	.word	0x58024800
 80034b0:	58024400 	.word	0x58024400
 80034b4:	00ffffcf 	.word	0x00ffffcf
 80034b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034bc:	d0de      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x694>
 80034be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80034c2:	d0db      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x694>
 80034c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034c8:	d0d8      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x694>
 80034ca:	2601      	movs	r6, #1
 80034cc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80034d4:	d032      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x754>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80034d6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80034da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034de:	f000 809d 	beq.w	800361c <HAL_RCCEx_PeriphCLKConfig+0x834>
 80034e2:	d820      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80034e4:	b13b      	cbz	r3, 80034f6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80034e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ea:	d119      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x738>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034ec:	2100      	movs	r1, #0
 80034ee:	1d20      	adds	r0, r4, #4
 80034f0:	f7ff fb6e 	bl	8002bd0 <RCCEx_PLL2_Config>
 80034f4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80034f6:	2d00      	cmp	r5, #0
 80034f8:	f040 8097 	bne.w	800362a <HAL_RCCEx_PeriphCLKConfig+0x842>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80034fc:	4aa5      	ldr	r2, [pc, #660]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80034fe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003500:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003504:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8003508:	430b      	orrs	r3, r1
 800350a:	6593      	str	r3, [r2, #88]	; 0x58
 800350c:	e016      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x754>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800350e:	2102      	movs	r1, #2
 8003510:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003514:	f7ff fbe2 	bl	8002cdc <RCCEx_PLL3_Config>
 8003518:	4605      	mov	r5, r0
      break;
 800351a:	e7af      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x694>
 800351c:	462e      	mov	r6, r5
 800351e:	e7d6      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003520:	2601      	movs	r6, #1
 8003522:	4635      	mov	r5, r6
 8003524:	e00a      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x754>
 8003526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800352a:	d0e4      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 800352c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003530:	d0e1      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8003532:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003536:	d0de      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8003538:	2601      	movs	r6, #1
 800353a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	f013 0f08 	tst.w	r3, #8
 8003542:	d00c      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x776>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003544:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8003548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354c:	d06f      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800354e:	4a91      	ldr	r2, [pc, #580]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8003550:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003552:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003556:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800355a:	430b      	orrs	r3, r1
 800355c:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	f013 0f10 	tst.w	r3, #16
 8003564:	d00c      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x798>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003566:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800356a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800356e:	d067      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x858>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003570:	4a88      	ldr	r2, [pc, #544]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8003572:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003578:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800357c:	430b      	orrs	r3, r1
 800357e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003586:	d00b      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    switch(PeriphClkInit->AdcClockSelection)
 8003588:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800358c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003590:	d06e      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8003592:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003596:	d061      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x874>
 8003598:	2b00      	cmp	r3, #0
 800359a:	d05a      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x86a>
 800359c:	2601      	movs	r6, #1
 800359e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80035a6:	d00c      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x7da>
    switch(PeriphClkInit->UsbClockSelection)
 80035a8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80035ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035b0:	d076      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80035b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035b6:	d069      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 80035b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035bc:	d061      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 80035be:	2601      	movs	r6, #1
 80035c0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80035c8:	d007      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    switch(PeriphClkInit->SdmmcClockSelection)
 80035ca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d070      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 80035d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d4:	d07b      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 80035d6:	2601      	movs	r6, #1
 80035d8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80035e0:	d17d      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80035e8:	f000 8086 	beq.w	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    switch(PeriphClkInit->RngClockSelection)
 80035ec:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80035ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f2:	f000 80c6 	beq.w	8003782 <HAL_RCCEx_PeriphCLKConfig+0x99a>
 80035f6:	d97c      	bls.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80035f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035fc:	d003      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80035fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003602:	f040 80bc 	bne.w	800377e <HAL_RCCEx_PeriphCLKConfig+0x996>
    if(ret == HAL_OK)
 8003606:	2d00      	cmp	r5, #0
 8003608:	f040 80c1 	bne.w	800378e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800360c:	4a61      	ldr	r2, [pc, #388]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800360e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003614:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003616:	430b      	orrs	r3, r1
 8003618:	6553      	str	r3, [r2, #84]	; 0x54
 800361a:	e06d      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x910>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800361c:	2102      	movs	r1, #2
 800361e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003622:	f7ff fb5b 	bl	8002cdc <RCCEx_PLL3_Config>
 8003626:	4605      	mov	r5, r0
      break;
 8003628:	e765      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 800362a:	462e      	mov	r6, r5
 800362c:	e786      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x754>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800362e:	2102      	movs	r1, #2
 8003630:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003634:	f7ff fb52 	bl	8002cdc <RCCEx_PLL3_Config>
 8003638:	2800      	cmp	r0, #0
 800363a:	d088      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x766>
          status = HAL_ERROR;
 800363c:	2601      	movs	r6, #1
 800363e:	e786      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x766>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003640:	2102      	movs	r1, #2
 8003642:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003646:	f7ff fb49 	bl	8002cdc <RCCEx_PLL3_Config>
 800364a:	2800      	cmp	r0, #0
 800364c:	d090      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x788>
        status = HAL_ERROR;
 800364e:	2601      	movs	r6, #1
 8003650:	e78e      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x788>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003652:	2100      	movs	r1, #0
 8003654:	1d20      	adds	r0, r4, #4
 8003656:	f7ff fabb 	bl	8002bd0 <RCCEx_PLL2_Config>
 800365a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800365c:	b97d      	cbnz	r5, 800367e <HAL_RCCEx_PeriphCLKConfig+0x896>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800365e:	4a4d      	ldr	r2, [pc, #308]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8003660:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003662:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003666:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800366a:	430b      	orrs	r3, r1
 800366c:	6593      	str	r3, [r2, #88]	; 0x58
 800366e:	e797      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003670:	2102      	movs	r1, #2
 8003672:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003676:	f7ff fb31 	bl	8002cdc <RCCEx_PLL3_Config>
 800367a:	4605      	mov	r5, r0
      break;
 800367c:	e7ee      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x874>
 800367e:	462e      	mov	r6, r5
 8003680:	e78e      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003682:	4a44      	ldr	r2, [pc, #272]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8003684:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800368a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800368c:	b97d      	cbnz	r5, 80036ae <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800368e:	4a41      	ldr	r2, [pc, #260]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8003690:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003692:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003696:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800369a:	430b      	orrs	r3, r1
 800369c:	6553      	str	r3, [r2, #84]	; 0x54
 800369e:	e790      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x7da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036a0:	2101      	movs	r1, #1
 80036a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80036a6:	f7ff fb19 	bl	8002cdc <RCCEx_PLL3_Config>
 80036aa:	4605      	mov	r5, r0
      break;
 80036ac:	e7ee      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 80036ae:	462e      	mov	r6, r5
 80036b0:	e787      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x7da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b2:	4a38      	ldr	r2, [pc, #224]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80036b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80036b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ba:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80036bc:	b96d      	cbnz	r5, 80036da <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80036be:	4a35      	ldr	r2, [pc, #212]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80036c0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80036c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80036c8:	430b      	orrs	r3, r1
 80036ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036cc:	e785      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036ce:	2102      	movs	r1, #2
 80036d0:	1d20      	adds	r0, r4, #4
 80036d2:	f7ff fa7d 	bl	8002bd0 <RCCEx_PLL2_Config>
 80036d6:	4605      	mov	r5, r0
      break;
 80036d8:	e7f0      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x8d4>
 80036da:	462e      	mov	r6, r5
 80036dc:	e77d      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80036de:	2102      	movs	r1, #2
 80036e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80036e4:	f7ff fafa 	bl	8002cdc <RCCEx_PLL3_Config>
 80036e8:	2800      	cmp	r0, #0
 80036ea:	f43f af7a 	beq.w	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
      status=HAL_ERROR;
 80036ee:	2601      	movs	r6, #1
 80036f0:	e777      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    switch(PeriphClkInit->RngClockSelection)
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d087      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80036f6:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036f8:	6823      	ldr	r3, [r4, #0]
 80036fa:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80036fe:	d006      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x926>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003700:	4a24      	ldr	r2, [pc, #144]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8003702:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003704:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003708:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800370a:	430b      	orrs	r3, r1
 800370c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003714:	d007      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x93e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003716:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8003718:	6913      	ldr	r3, [r2, #16]
 800371a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800371e:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8003722:	430b      	orrs	r3, r1
 8003724:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800372c:	d006      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x954>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800372e:	4a19      	ldr	r2, [pc, #100]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8003730:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003736:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003738:	430b      	orrs	r3, r1
 800373a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003742:	d009      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x970>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003744:	4b13      	ldr	r3, [pc, #76]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800374c:	611a      	str	r2, [r3, #16]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8003754:	430a      	orrs	r2, r1
 8003756:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	db1c      	blt.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003764:	d007      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x98e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003766:	4a0b      	ldr	r2, [pc, #44]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8003768:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800376a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800376e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8003772:	430b      	orrs	r3, r1
 8003774:	6553      	str	r3, [r2, #84]	; 0x54
  if (status == HAL_OK)
 8003776:	b106      	cbz	r6, 800377a <HAL_RCCEx_PeriphCLKConfig+0x992>
  return HAL_ERROR;
 8003778:	2601      	movs	r6, #1
}
 800377a:	4630      	mov	r0, r6
 800377c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 800377e:	2601      	movs	r6, #1
 8003780:	e7ba      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003782:	4a04      	ldr	r2, [pc, #16]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8003784:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800378a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800378c:	e73b      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800378e:	462e      	mov	r6, r5
 8003790:	e7b2      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8003792:	bf00      	nop
 8003794:	58024400 	.word	0x58024400
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003798:	4a03      	ldr	r2, [pc, #12]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800379a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800379c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80037a0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80037a2:	430b      	orrs	r3, r1
 80037a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037a6:	e7da      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x976>
 80037a8:	58024400 	.word	0x58024400

080037ac <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80037ac:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80037ae:	f7ff f9ed 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 80037b2:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80037ba:	4a04      	ldr	r2, [pc, #16]	; (80037cc <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80037bc:	5cd3      	ldrb	r3, [r2, r3]
 80037be:	f003 031f 	and.w	r3, r3, #31
}
 80037c2:	40d8      	lsrs	r0, r3
 80037c4:	bd08      	pop	{r3, pc}
 80037c6:	bf00      	nop
 80037c8:	58024400 	.word	0x58024400
 80037cc:	08007d64 	.word	0x08007d64

080037d0 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 80037d0:	b510      	push	{r4, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037d2:	4a77      	ldr	r2, [pc, #476]	; (80039b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 80037d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80037d6:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80037d8:	f3c4 3e05 	ubfx	lr, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80037dc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80037de:	f3c3 1c00 	ubfx	ip, r3, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80037e2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80037e4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80037e8:	fb0c f303 	mul.w	r3, ip, r3
  if (pll2m != 0U)
 80037ec:	f414 3f7c 	tst.w	r4, #258048	; 0x3f000
 80037f0:	f000 80d8 	beq.w	80039a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
 80037f4:	f001 0103 	and.w	r1, r1, #3
 80037f8:	ee07 3a90 	vmov	s15, r3
 80037fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8003800:	2901      	cmp	r1, #1
 8003802:	d065      	beq.n	80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8003804:	2902      	cmp	r1, #2
 8003806:	f000 80b0 	beq.w	800396a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 800380a:	b1e1      	cbz	r1, 8003846 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800380c:	ee07 ea10 	vmov	s14, lr
 8003810:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003814:	ed9f 6a67 	vldr	s12, [pc, #412]	; 80039b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8003818:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800381c:	4b64      	ldr	r3, [pc, #400]	; (80039b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003824:	ee07 3a10 	vmov	s14, r3
 8003828:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800382c:	ed9f 6a62 	vldr	s12, [pc, #392]	; 80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8003830:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003838:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800383c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003840:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8003844:	e060      	b.n	8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003846:	6813      	ldr	r3, [r2, #0]
 8003848:	f013 0f20 	tst.w	r3, #32
 800384c:	d023      	beq.n	8003896 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800384e:	4611      	mov	r1, r2
 8003850:	6812      	ldr	r2, [r2, #0]
 8003852:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003856:	4b59      	ldr	r3, [pc, #356]	; (80039bc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>)
 8003858:	40d3      	lsrs	r3, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800385a:	ee07 3a10 	vmov	s14, r3
 800385e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003862:	ee06 ea90 	vmov	s13, lr
 8003866:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800386a:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800386e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8003870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003874:	ee07 3a10 	vmov	s14, r3
 8003878:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800387c:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8003880:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003884:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003888:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800388c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003890:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003894:	e038      	b.n	8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003896:	ee07 ea10 	vmov	s14, lr
 800389a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800389e:	ed9f 6a48 	vldr	s12, [pc, #288]	; 80039c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 80038a2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80038a6:	4b42      	ldr	r3, [pc, #264]	; (80039b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 80038a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ae:	ee07 3a10 	vmov	s14, r3
 80038b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80038b6:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80038ba:	ee67 7a86 	vmul.f32	s15, s15, s12
 80038be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80038ce:	e01b      	b.n	8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038d0:	ee07 ea10 	vmov	s14, lr
 80038d4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80038d8:	ed9f 6a36 	vldr	s12, [pc, #216]	; 80039b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 80038dc:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80038e0:	4b33      	ldr	r3, [pc, #204]	; (80039b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e8:	ee07 3a10 	vmov	s14, r3
 80038ec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80038f0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80038f4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80038f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003900:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003904:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003908:	4a29      	ldr	r2, [pc, #164]	; (80039b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800390a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800390c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003910:	ee07 3a10 	vmov	s14, r3
 8003914:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003918:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800391c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003924:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003928:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800392c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800392e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003932:	ee07 3a10 	vmov	s14, r3
 8003936:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800393a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800393e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003946:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800394a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800394c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003950:	ee07 3a90 	vmov	s15, r3
 8003954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003958:	ee77 7a86 	vadd.f32	s15, s15, s12
 800395c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003960:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003964:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8003968:	bd10      	pop	{r4, pc}
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800396a:	ee07 ea10 	vmov	s14, lr
 800396e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003972:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 8003976:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800397a:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003982:	ee07 3a10 	vmov	s14, r3
 8003986:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800398a:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800398e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003996:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800399a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800399e:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80039a2:	e7b1      	b.n	8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80039a8:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80039aa:	6083      	str	r3, [r0, #8]
}
 80039ac:	e7dc      	b.n	8003968 <HAL_RCCEx_GetPLL2ClockFreq+0x198>
 80039ae:	bf00      	nop
 80039b0:	58024400 	.word	0x58024400
 80039b4:	4a742400 	.word	0x4a742400
 80039b8:	39000000 	.word	0x39000000
 80039bc:	03d09000 	.word	0x03d09000
 80039c0:	4c742400 	.word	0x4c742400
 80039c4:	4b742400 	.word	0x4b742400

080039c8 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 80039c8:	b510      	push	{r4, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039ca:	4a77      	ldr	r2, [pc, #476]	; (8003ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 80039cc:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80039ce:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80039d0:	f3c4 5e05 	ubfx	lr, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80039d4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80039d6:	f3c3 2c00 	ubfx	ip, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80039da:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80039dc:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80039e0:	fb0c f303 	mul.w	r3, ip, r3
  if (pll3m != 0U)
 80039e4:	f014 7f7c 	tst.w	r4, #66060288	; 0x3f00000
 80039e8:	f000 80d8 	beq.w	8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
 80039ec:	f001 0103 	and.w	r1, r1, #3
 80039f0:	ee07 3a90 	vmov	s15, r3
 80039f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 80039f8:	2901      	cmp	r1, #1
 80039fa:	d065      	beq.n	8003ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 80039fc:	2902      	cmp	r1, #2
 80039fe:	f000 80b0 	beq.w	8003b62 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 8003a02:	b1e1      	cbz	r1, 8003a3e <HAL_RCCEx_GetPLL3ClockFreq+0x76>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a04:	ee07 ea10 	vmov	s14, lr
 8003a08:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003a0c:	ed9f 6a67 	vldr	s12, [pc, #412]	; 8003bac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8003a10:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003a14:	4b64      	ldr	r3, [pc, #400]	; (8003ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1c:	ee07 3a10 	vmov	s14, r3
 8003a20:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003a24:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8003bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8003a28:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a38:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8003a3c:	e060      	b.n	8003b00 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a3e:	6813      	ldr	r3, [r2, #0]
 8003a40:	f013 0f20 	tst.w	r3, #32
 8003a44:	d023      	beq.n	8003a8e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a46:	4611      	mov	r1, r2
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003a4e:	4b59      	ldr	r3, [pc, #356]	; (8003bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>)
 8003a50:	40d3      	lsrs	r3, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a52:	ee07 3a10 	vmov	s14, r3
 8003a56:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003a5a:	ee06 ea90 	vmov	s13, lr
 8003a5e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8003a62:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8003a66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a6c:	ee07 3a10 	vmov	s14, r3
 8003a70:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003a74:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8003bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8003a78:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a8c:	e038      	b.n	8003b00 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a8e:	ee07 ea10 	vmov	s14, lr
 8003a92:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003a96:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8003bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 8003a9a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003a9e:	4b42      	ldr	r3, [pc, #264]	; (8003ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa6:	ee07 3a10 	vmov	s14, r3
 8003aaa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003aae:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8003bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8003ab2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003abe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ac2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ac6:	e01b      	b.n	8003b00 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ac8:	ee07 ea10 	vmov	s14, lr
 8003acc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003ad0:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8003bac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8003ad4:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003ad8:	4b33      	ldr	r3, [pc, #204]	; (8003ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae0:	ee07 3a10 	vmov	s14, r3
 8003ae4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003ae8:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8003bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8003aec:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003af4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003af8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003afc:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003b00:	4a29      	ldr	r2, [pc, #164]	; (8003ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8003b02:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003b04:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003b08:	ee07 3a10 	vmov	s14, r3
 8003b0c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003b10:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003b14:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b20:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003b24:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003b26:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003b2a:	ee07 3a10 	vmov	s14, r3
 8003b2e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003b32:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b3e:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003b42:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003b44:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003b48:	ee07 3a90 	vmov	s15, r3
 8003b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b50:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003b54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b58:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003b5c:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8003b60:	bd10      	pop	{r4, pc}
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b62:	ee07 ea10 	vmov	s14, lr
 8003b66:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003b6a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8003bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8003b6e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003b72:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b7a:	ee07 3a10 	vmov	s14, r3
 8003b7e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003b82:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8003bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8003b86:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b96:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8003b9a:	e7b1      	b.n	8003b00 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003ba0:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003ba2:	6083      	str	r3, [r0, #8]
}
 8003ba4:	e7dc      	b.n	8003b60 <HAL_RCCEx_GetPLL3ClockFreq+0x198>
 8003ba6:	bf00      	nop
 8003ba8:	58024400 	.word	0x58024400
 8003bac:	4a742400 	.word	0x4a742400
 8003bb0:	39000000 	.word	0x39000000
 8003bb4:	03d09000 	.word	0x03d09000
 8003bb8:	4c742400 	.word	0x4c742400
 8003bbc:	4b742400 	.word	0x4b742400

08003bc0 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 8003bc0:	b510      	push	{r4, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bc2:	4a77      	ldr	r2, [pc, #476]	; (8003da0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8003bc4:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8003bc6:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8003bc8:	f3c4 1e05 	ubfx	lr, r4, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8003bcc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003bce:	f003 0c01 	and.w	ip, r3, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003bd2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003bd4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8003bd8:	fb0c f303 	mul.w	r3, ip, r3
  if (pll1m != 0U)
 8003bdc:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8003be0:	f000 80d8 	beq.w	8003d94 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
 8003be4:	f001 0103 	and.w	r1, r1, #3
 8003be8:	ee07 3a90 	vmov	s15, r3
 8003bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8003bf0:	2901      	cmp	r1, #1
 8003bf2:	d065      	beq.n	8003cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 8003bf4:	2902      	cmp	r1, #2
 8003bf6:	f000 80b0 	beq.w	8003d5a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 8003bfa:	b1e1      	cbz	r1, 8003c36 <HAL_RCCEx_GetPLL1ClockFreq+0x76>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bfc:	ee07 ea10 	vmov	s14, lr
 8003c00:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003c04:	ed9f 6a67 	vldr	s12, [pc, #412]	; 8003da4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8003c08:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003c0c:	4b64      	ldr	r3, [pc, #400]	; (8003da0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c14:	ee07 3a10 	vmov	s14, r3
 8003c18:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003c1c:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8003da8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8003c20:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c30:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8003c34:	e060      	b.n	8003cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c36:	6813      	ldr	r3, [r2, #0]
 8003c38:	f013 0f20 	tst.w	r3, #32
 8003c3c:	d023      	beq.n	8003c86 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c3e:	4611      	mov	r1, r2
 8003c40:	6812      	ldr	r2, [r2, #0]
 8003c42:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003c46:	4b59      	ldr	r3, [pc, #356]	; (8003dac <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>)
 8003c48:	40d3      	lsrs	r3, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c4a:	ee07 3a10 	vmov	s14, r3
 8003c4e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003c52:	ee06 ea90 	vmov	s13, lr
 8003c56:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8003c5a:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8003c5e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c64:	ee07 3a10 	vmov	s14, r3
 8003c68:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003c6c:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8003da8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8003c70:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c84:	e038      	b.n	8003cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c86:	ee07 ea10 	vmov	s14, lr
 8003c8a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003c8e:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8003da4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8003c92:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003c96:	4b42      	ldr	r3, [pc, #264]	; (8003da0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9e:	ee07 3a10 	vmov	s14, r3
 8003ca2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003ca6:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8003da8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8003caa:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003cbe:	e01b      	b.n	8003cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cc0:	ee07 ea10 	vmov	s14, lr
 8003cc4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003cc8:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8003db0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
 8003ccc:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003cd0:	4b33      	ldr	r3, [pc, #204]	; (8003da0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd8:	ee07 3a10 	vmov	s14, r3
 8003cdc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003ce0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8003da8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8003ce4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cf0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cf4:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8003cf8:	4a29      	ldr	r2, [pc, #164]	; (8003da0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8003cfa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003cfc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003d00:	ee07 3a10 	vmov	s14, r3
 8003d04:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003d08:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003d0c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003d10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d18:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8003d1c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003d1e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003d22:	ee07 3a10 	vmov	s14, r3
 8003d26:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003d2a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d36:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8003d3a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003d3c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003d40:	ee07 3a90 	vmov	s15, r3
 8003d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d48:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003d4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d50:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003d54:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8003d58:	bd10      	pop	{r4, pc}
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d5a:	ee07 ea10 	vmov	s14, lr
 8003d5e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003d62:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8003db4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 8003d66:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d72:	ee07 3a10 	vmov	s14, r3
 8003d76:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003d7a:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8003da8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8003d7e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8003d92:	e7b1      	b.n	8003cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003d98:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003d9a:	6083      	str	r3, [r0, #8]
}
 8003d9c:	e7dc      	b.n	8003d58 <HAL_RCCEx_GetPLL1ClockFreq+0x198>
 8003d9e:	bf00      	nop
 8003da0:	58024400 	.word	0x58024400
 8003da4:	4c742400 	.word	0x4c742400
 8003da8:	39000000 	.word	0x39000000
 8003dac:	03d09000 	.word	0x03d09000
 8003db0:	4a742400 	.word	0x4a742400
 8003db4:	4b742400 	.word	0x4b742400

08003db8 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8003db8:	b500      	push	{lr}
 8003dba:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003dbc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003dc0:	d020      	beq.n	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8003dc2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003dc6:	d071      	beq.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003dc8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003dcc:	f000 80c8 	beq.w	8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8003dd0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8003dd4:	f000 8121 	beq.w	800401a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8003dd8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8003ddc:	f000 8182 	beq.w	80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003de0:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8003de4:	f000 81db 	beq.w	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8003de8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8003dec:	f000 821f 	beq.w	800422e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8003df0:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8003df4:	f000 8239 	beq.w	800426a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8003df8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003dfc:	f000 8284 	beq.w	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
      frequency = 0;
 8003e00:	2000      	movs	r0, #0
 8003e02:	e2b2      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8003e04:	4b95      	ldr	r3, [pc, #596]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e08:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	f200 82a3 	bhi.w	8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8003e12:	e8df f003 	tbb	[pc, r3]
 8003e16:	1005      	.short	0x1005
 8003e18:	031b      	.short	0x031b
 8003e1a:	26          	.byte	0x26
 8003e1b:	00          	.byte	0x00
 8003e1c:	4890      	ldr	r0, [pc, #576]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8003e1e:	e2a4      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003e20:	4b8e      	ldr	r3, [pc, #568]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8003e28:	f000 829f 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003e2c:	a807      	add	r0, sp, #28
 8003e2e:	f7ff fec7 	bl	8003bc0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8003e32:	9808      	ldr	r0, [sp, #32]
 8003e34:	e299      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003e36:	4b89      	ldr	r3, [pc, #548]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8003e3e:	f000 8294 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e42:	a804      	add	r0, sp, #16
 8003e44:	f7ff fcc4 	bl	80037d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003e48:	9804      	ldr	r0, [sp, #16]
 8003e4a:	e28e      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003e4c:	4b83      	ldr	r3, [pc, #524]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003e4e:	6818      	ldr	r0, [r3, #0]
 8003e50:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8003e54:	f000 8289 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003e58:	a801      	add	r0, sp, #4
 8003e5a:	f7ff fdb5 	bl	80039c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003e5e:	9801      	ldr	r0, [sp, #4]
 8003e60:	e283      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003e62:	4a7e      	ldr	r2, [pc, #504]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003e64:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003e66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	f012 0f04 	tst.w	r2, #4
 8003e70:	d007      	beq.n	8003e82 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8003e72:	b933      	cbnz	r3, 8003e82 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e74:	4b79      	ldr	r3, [pc, #484]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003e7c:	4879      	ldr	r0, [pc, #484]	; (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8003e7e:	40d8      	lsrs	r0, r3
 8003e80:	e273      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003e82:	4a76      	ldr	r2, [pc, #472]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003e8a:	d003      	beq.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003e8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e90:	f000 8264 	beq.w	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003e94:	4a71      	ldr	r2, [pc, #452]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003e96:	6812      	ldr	r2, [r2, #0]
 8003e98:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003e9c:	f000 8260 	beq.w	8004360 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8003ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea4:	f000 825e 	beq.w	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
            frequency = 0;
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	e25e      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8003eac:	4b6b      	ldr	r3, [pc, #428]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8003eb4:	2b80      	cmp	r3, #128	; 0x80
 8003eb6:	d033      	beq.n	8003f20 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8003eb8:	d915      	bls.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8003eba:	2bc0      	cmp	r3, #192	; 0xc0
 8003ebc:	f000 8254 	beq.w	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8003ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec4:	d11f      	bne.n	8003f06 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003ec6:	4a65      	ldr	r2, [pc, #404]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003ec8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003eca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	f012 0f04 	tst.w	r2, #4
 8003ed4:	d02f      	beq.n	8003f36 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8003ed6:	bb73      	cbnz	r3, 8003f36 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ed8:	4b60      	ldr	r3, [pc, #384]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003ee0:	4860      	ldr	r0, [pc, #384]	; (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8003ee2:	40d8      	lsrs	r0, r3
 8003ee4:	e241      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 8003ee6:	b183      	cbz	r3, 8003f0a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8003ee8:	2b40      	cmp	r3, #64	; 0x40
 8003eea:	d10a      	bne.n	8003f02 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003eec:	4b5b      	ldr	r3, [pc, #364]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8003ef4:	f000 8239 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ef8:	a804      	add	r0, sp, #16
 8003efa:	f7ff fc69 	bl	80037d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003efe:	9804      	ldr	r0, [sp, #16]
 8003f00:	e233      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8003f02:	2000      	movs	r0, #0
 8003f04:	e231      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8003f06:	2000      	movs	r0, #0
 8003f08:	e22f      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003f0a:	4b54      	ldr	r3, [pc, #336]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8003f12:	f000 822a 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003f16:	a807      	add	r0, sp, #28
 8003f18:	f7ff fe52 	bl	8003bc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003f1c:	9808      	ldr	r0, [sp, #32]
 8003f1e:	e224      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003f20:	4b4e      	ldr	r3, [pc, #312]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8003f28:	f000 821f 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003f2c:	a801      	add	r0, sp, #4
 8003f2e:	f7ff fd4b 	bl	80039c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003f32:	9801      	ldr	r0, [sp, #4]
 8003f34:	e219      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003f36:	4a49      	ldr	r2, [pc, #292]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003f38:	6812      	ldr	r2, [r2, #0]
 8003f3a:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003f3e:	d003      	beq.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8003f40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f44:	f000 8214 	beq.w	8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003f48:	4a44      	ldr	r2, [pc, #272]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003f4a:	6812      	ldr	r2, [r2, #0]
 8003f4c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003f50:	f000 8210 	beq.w	8004374 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 8003f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f58:	f000 820e 	beq.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
            frequency = 0;
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	e204      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8003f60:	4b3e      	ldr	r3, [pc, #248]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f64:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8003f68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f6c:	d035      	beq.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 8003f6e:	d916      	bls.n	8003f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8003f70:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f74:	f000 8202 	beq.w	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8003f78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f7c:	d120      	bne.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003f7e:	4a37      	ldr	r2, [pc, #220]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003f80:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003f82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	f012 0f04 	tst.w	r2, #4
 8003f8c:	d030      	beq.n	8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8003f8e:	bb7b      	cbnz	r3, 8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f90:	4b32      	ldr	r3, [pc, #200]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003f98:	4832      	ldr	r0, [pc, #200]	; (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8003f9a:	40d8      	lsrs	r0, r3
 8003f9c:	e1e5      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 8003f9e:	b18b      	cbz	r3, 8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8003fa0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fa4:	d10a      	bne.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003fa6:	4b2d      	ldr	r3, [pc, #180]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8003fae:	f000 81dc 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003fb2:	a804      	add	r0, sp, #16
 8003fb4:	f7ff fc0c 	bl	80037d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003fb8:	9804      	ldr	r0, [sp, #16]
 8003fba:	e1d6      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	e1d4      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	e1d2      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003fc4:	4b25      	ldr	r3, [pc, #148]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003fc6:	6818      	ldr	r0, [r3, #0]
 8003fc8:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8003fcc:	f000 81cd 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003fd0:	a807      	add	r0, sp, #28
 8003fd2:	f7ff fdf5 	bl	8003bc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003fd6:	9808      	ldr	r0, [sp, #32]
 8003fd8:	e1c7      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003fda:	4b20      	ldr	r3, [pc, #128]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8003fe2:	f000 81c2 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003fe6:	a801      	add	r0, sp, #4
 8003fe8:	f7ff fcee 	bl	80039c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003fec:	9801      	ldr	r0, [sp, #4]
 8003fee:	e1bc      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003ff0:	4a1a      	ldr	r2, [pc, #104]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003ff8:	d003      	beq.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 8003ffa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ffe:	f000 81bf 	beq.w	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004002:	4a16      	ldr	r2, [pc, #88]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800400a:	f000 81bb 	beq.w	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800400e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004012:	f000 81b9 	beq.w	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
            frequency = 0;
 8004016:	2000      	movs	r0, #0
 8004018:	e1a7      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800401a:	4b10      	ldr	r3, [pc, #64]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800401c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8004022:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004026:	d03d      	beq.n	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8004028:	d91e      	bls.n	8004068 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 800402a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800402e:	f000 81ad 	beq.w	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8004032:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004036:	d128      	bne.n	800408a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004038:	4a08      	ldr	r2, [pc, #32]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800403a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800403c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004040:	6812      	ldr	r2, [r2, #0]
 8004042:	f012 0f04 	tst.w	r2, #4
 8004046:	d038      	beq.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8004048:	2b00      	cmp	r3, #0
 800404a:	d136      	bne.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x302>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800404c:	4b03      	ldr	r3, [pc, #12]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004054:	4803      	ldr	r0, [pc, #12]	; (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8004056:	40d8      	lsrs	r0, r3
 8004058:	e187      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 800405a:	bf00      	nop
 800405c:	58024400 	.word	0x58024400
 8004060:	00bb8000 	.word	0x00bb8000
 8004064:	03d09000 	.word	0x03d09000
      switch (saiclocksource)
 8004068:	b18b      	cbz	r3, 800408e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800406a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800406e:	d10a      	bne.n	8004086 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004070:	4b99      	ldr	r3, [pc, #612]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004078:	f000 8177 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800407c:	a804      	add	r0, sp, #16
 800407e:	f7ff fba7 	bl	80037d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004082:	9804      	ldr	r0, [sp, #16]
 8004084:	e171      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8004086:	2000      	movs	r0, #0
 8004088:	e16f      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 800408a:	2000      	movs	r0, #0
 800408c:	e16d      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800408e:	4b92      	ldr	r3, [pc, #584]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004096:	f000 8168 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800409a:	a807      	add	r0, sp, #28
 800409c:	f7ff fd90 	bl	8003bc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80040a0:	9808      	ldr	r0, [sp, #32]
 80040a2:	e162      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80040a4:	4b8c      	ldr	r3, [pc, #560]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80040a6:	6818      	ldr	r0, [r3, #0]
 80040a8:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80040ac:	f000 815d 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80040b0:	a801      	add	r0, sp, #4
 80040b2:	f7ff fc89 	bl	80039c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80040b6:	9801      	ldr	r0, [sp, #4]
 80040b8:	e157      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80040ba:	4a87      	ldr	r2, [pc, #540]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80040bc:	6812      	ldr	r2, [r2, #0]
 80040be:	f412 7f80 	tst.w	r2, #256	; 0x100
 80040c2:	d003      	beq.n	80040cc <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80040c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040c8:	f000 8162 	beq.w	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80040cc:	4a82      	ldr	r2, [pc, #520]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80040d4:	f000 815e 	beq.w	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 80040d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040dc:	f000 815c 	beq.w	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
            frequency = 0;
 80040e0:	2000      	movs	r0, #0
 80040e2:	e142      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80040e4:	4b7c      	ldr	r3, [pc, #496]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80040e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 80040ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f0:	d035      	beq.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 80040f2:	d916      	bls.n	8004122 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 80040f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040f8:	f000 8150 	beq.w	800439c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80040fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004100:	d120      	bne.n	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004102:	4a75      	ldr	r2, [pc, #468]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004104:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004106:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	f012 0f04 	tst.w	r2, #4
 8004110:	d030      	beq.n	8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004112:	bb7b      	cbnz	r3, 8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004114:	4b70      	ldr	r3, [pc, #448]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800411c:	486f      	ldr	r0, [pc, #444]	; (80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800411e:	40d8      	lsrs	r0, r3
 8004120:	e123      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 8004122:	b18b      	cbz	r3, 8004148 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8004124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004128:	d10a      	bne.n	8004140 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800412a:	4b6b      	ldr	r3, [pc, #428]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800412c:	6818      	ldr	r0, [r3, #0]
 800412e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004132:	f000 811a 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004136:	a804      	add	r0, sp, #16
 8004138:	f7ff fb4a 	bl	80037d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800413c:	9804      	ldr	r0, [sp, #16]
 800413e:	e114      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8004140:	2000      	movs	r0, #0
 8004142:	e112      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8004144:	2000      	movs	r0, #0
 8004146:	e110      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004148:	4b63      	ldr	r3, [pc, #396]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004150:	f000 810b 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004154:	a807      	add	r0, sp, #28
 8004156:	f7ff fd33 	bl	8003bc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800415a:	9808      	ldr	r0, [sp, #32]
 800415c:	e105      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800415e:	4b5e      	ldr	r3, [pc, #376]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004166:	f000 8100 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800416a:	a801      	add	r0, sp, #4
 800416c:	f7ff fc2c 	bl	80039c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004170:	9801      	ldr	r0, [sp, #4]
 8004172:	e0fa      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004174:	4a58      	ldr	r2, [pc, #352]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004176:	6812      	ldr	r2, [r2, #0]
 8004178:	f412 7f80 	tst.w	r2, #256	; 0x100
 800417c:	d003      	beq.n	8004186 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800417e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004182:	f000 810d 	beq.w	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004186:	4a54      	ldr	r2, [pc, #336]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004188:	6812      	ldr	r2, [r2, #0]
 800418a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800418e:	f000 8109 	beq.w	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8004192:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004196:	f000 8107 	beq.w	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            frequency = 0;
 800419a:	2000      	movs	r0, #0
 800419c:	e0e5      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800419e:	4b4e      	ldr	r3, [pc, #312]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80041a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 80041a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041aa:	d010      	beq.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 80041ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041b0:	d018      	beq.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 80041b2:	b10b      	cbz	r3, 80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
 80041b4:	2000      	movs	r0, #0
 80041b6:	e0d8      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80041b8:	4b47      	ldr	r3, [pc, #284]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80041ba:	6818      	ldr	r0, [r3, #0]
 80041bc:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80041c0:	f000 80d3 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80041c4:	a804      	add	r0, sp, #16
 80041c6:	f7ff fb03 	bl	80037d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80041ca:	9804      	ldr	r0, [sp, #16]
 80041cc:	e0cd      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80041ce:	4b42      	ldr	r3, [pc, #264]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80041d6:	f000 80c8 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80041da:	a801      	add	r0, sp, #4
 80041dc:	f7ff fbf4 	bl	80039c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80041e0:	9803      	ldr	r0, [sp, #12]
 80041e2:	e0c2      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80041e4:	4a3c      	ldr	r2, [pc, #240]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80041e6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80041e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80041ec:	6812      	ldr	r2, [r2, #0]
 80041ee:	f012 0f04 	tst.w	r2, #4
 80041f2:	d007      	beq.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
 80041f4:	b933      	cbnz	r3, 8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80041f6:	4b38      	ldr	r3, [pc, #224]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80041fe:	4837      	ldr	r0, [pc, #220]	; (80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004200:	40d8      	lsrs	r0, r3
 8004202:	e0b2      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004204:	4a34      	ldr	r2, [pc, #208]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004206:	6812      	ldr	r2, [r2, #0]
 8004208:	f412 7f80 	tst.w	r2, #256	; 0x100
 800420c:	d003      	beq.n	8004216 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 800420e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004212:	f000 80cb 	beq.w	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004216:	4a30      	ldr	r2, [pc, #192]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004218:	6812      	ldr	r2, [r2, #0]
 800421a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800421e:	f000 80c7 	beq.w	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 8004222:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004226:	f000 80c5 	beq.w	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
            frequency = 0;
 800422a:	2000      	movs	r0, #0
 800422c:	e09d      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800422e:	4b2a      	ldr	r3, [pc, #168]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8004232:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8004236:	d002      	beq.n	800423e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8004238:	b963      	cbnz	r3, 8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
 800423a:	2000      	movs	r0, #0
 800423c:	e095      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800423e:	4b26      	ldr	r3, [pc, #152]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004246:	f000 8090 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800424a:	a807      	add	r0, sp, #28
 800424c:	f7ff fcb8 	bl	8003bc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004250:	9808      	ldr	r0, [sp, #32]
 8004252:	e08a      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004254:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800425c:	f000 8085 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004260:	a804      	add	r0, sp, #16
 8004262:	f7ff fab5 	bl	80037d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004266:	9806      	ldr	r0, [sp, #24]
 8004268:	e07f      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800426a:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800426c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8004272:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004276:	d035      	beq.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 8004278:	d815      	bhi.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800427a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800427e:	d021      	beq.n	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8004280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004284:	d109      	bne.n	800429a <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004286:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800428e:	d06c      	beq.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004290:	a801      	add	r0, sp, #4
 8004292:	f7ff fb99 	bl	80039c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004296:	9802      	ldr	r0, [sp, #8]
 8004298:	e067      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 800429a:	b913      	cbnz	r3, 80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800429c:	f7ff fa86 	bl	80037ac <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 80042a0:	e063      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 80042a2:	2000      	movs	r0, #0
 80042a4:	e061      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 80042a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042aa:	d026      	beq.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0x542>
 80042ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042b0:	d106      	bne.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80042b2:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80042ba:	d056      	beq.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 80042bc:	4808      	ldr	r0, [pc, #32]	; (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80042be:	e054      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 80042c0:	2000      	movs	r0, #0
 80042c2:	e052      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80042c4:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80042cc:	d04d      	beq.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042ce:	a804      	add	r0, sp, #16
 80042d0:	f7ff fa7e 	bl	80037d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80042d4:	9805      	ldr	r0, [sp, #20]
 80042d6:	e048      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 80042d8:	58024400 	.word	0x58024400
 80042dc:	03d09000 	.word	0x03d09000
 80042e0:	00f42400 	.word	0x00f42400
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042e4:	4b34      	ldr	r3, [pc, #208]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	f010 0004 	ands.w	r0, r0, #4
 80042ec:	d03d      	beq.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80042f4:	4831      	ldr	r0, [pc, #196]	; (80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 80042f6:	40d8      	lsrs	r0, r3
 80042f8:	e037      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80042fa:	4b2f      	ldr	r3, [pc, #188]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8004302:	d032      	beq.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = CSI_VALUE;
 8004304:	482e      	ldr	r0, [pc, #184]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8004306:	e030      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004308:	4b2b      	ldr	r3, [pc, #172]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800430a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8004310:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004314:	d00c      	beq.n	8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8004316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800431a:	d013      	beq.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 800431c:	b10b      	cbz	r3, 8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800431e:	2000      	movs	r0, #0
  return frequency;
 8004320:	e023      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004322:	4b25      	ldr	r3, [pc, #148]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800432a:	d01e      	beq.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 800432c:	4825      	ldr	r0, [pc, #148]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800432e:	e01c      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004330:	4b21      	ldr	r3, [pc, #132]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8004332:	6818      	ldr	r0, [r3, #0]
 8004334:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004338:	d017      	beq.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800433a:	a807      	add	r0, sp, #28
 800433c:	f7ff fc40 	bl	8003bc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004340:	9808      	ldr	r0, [sp, #32]
 8004342:	e012      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004344:	4b1c      	ldr	r3, [pc, #112]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800434c:	d00d      	beq.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800434e:	a804      	add	r0, sp, #16
 8004350:	f7ff fa3e 	bl	80037d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004354:	9805      	ldr	r0, [sp, #20]
 8004356:	e008      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8004358:	2000      	movs	r0, #0
 800435a:	e006      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 800435c:	4818      	ldr	r0, [pc, #96]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800435e:	e004      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8004360:	2000      	movs	r0, #0
 8004362:	e002      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8004364:	4817      	ldr	r0, [pc, #92]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8004366:	e000      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 8004368:	4817      	ldr	r0, [pc, #92]	; (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
}
 800436a:	b00b      	add	sp, #44	; 0x2c
 800436c:	f85d fb04 	ldr.w	pc, [sp], #4
            frequency = CSI_VALUE;
 8004370:	4813      	ldr	r0, [pc, #76]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8004372:	e7fa      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8004374:	2000      	movs	r0, #0
 8004376:	e7f8      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8004378:	4812      	ldr	r0, [pc, #72]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800437a:	e7f6      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 800437c:	4812      	ldr	r0, [pc, #72]	; (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 800437e:	e7f4      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 8004380:	480f      	ldr	r0, [pc, #60]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8004382:	e7f2      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8004384:	2000      	movs	r0, #0
 8004386:	e7f0      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8004388:	480e      	ldr	r0, [pc, #56]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800438a:	e7ee      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 800438c:	480e      	ldr	r0, [pc, #56]	; (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 800438e:	e7ec      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 8004390:	480b      	ldr	r0, [pc, #44]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8004392:	e7ea      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8004394:	2000      	movs	r0, #0
 8004396:	e7e8      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8004398:	480a      	ldr	r0, [pc, #40]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800439a:	e7e6      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 800439c:	480a      	ldr	r0, [pc, #40]	; (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 800439e:	e7e4      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 80043a0:	4807      	ldr	r0, [pc, #28]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 80043a2:	e7e2      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 80043a4:	2000      	movs	r0, #0
 80043a6:	e7e0      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 80043a8:	4806      	ldr	r0, [pc, #24]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 80043aa:	e7de      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 80043ac:	4804      	ldr	r0, [pc, #16]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 80043ae:	e7dc      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 80043b0:	2000      	movs	r0, #0
 80043b2:	e7da      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 80043b4:	4803      	ldr	r0, [pc, #12]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 80043b6:	e7d8      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 80043b8:	58024400 	.word	0x58024400
 80043bc:	03d09000 	.word	0x03d09000
 80043c0:	003d0900 	.word	0x003d0900
 80043c4:	00f42400 	.word	0x00f42400
 80043c8:	00bb8000 	.word	0x00bb8000

080043cc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80043cc:	b570      	push	{r4, r5, r6, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	9301      	str	r3, [sp, #4]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80043d6:	6800      	ldr	r0, [r0, #0]
 80043d8:	f001 f8f2 	bl	80055c0 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 80043dc:	4605      	mov	r5, r0
 80043de:	b110      	cbz	r0, 80043e6 <SD_PowerON+0x1a>
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
}
 80043e0:	4628      	mov	r0, r5
 80043e2:	b002      	add	sp, #8
 80043e4:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80043e6:	6820      	ldr	r0, [r4, #0]
 80043e8:	f001 fc26 	bl	8005c38 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80043ec:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80043f0:	d007      	beq.n	8004402 <SD_PowerON+0x36>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80043f2:	2301      	movs	r3, #1
 80043f4:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80043f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d00b      	beq.n	8004414 <SD_PowerON+0x48>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80043fc:	462e      	mov	r6, r5
 80043fe:	4628      	mov	r0, r5
 8004400:	e014      	b.n	800442c <SD_PowerON+0x60>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004402:	2300      	movs	r3, #0
 8004404:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004406:	6820      	ldr	r0, [r4, #0]
 8004408:	f001 f8da 	bl	80055c0 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 800440c:	2800      	cmp	r0, #0
 800440e:	d0f2      	beq.n	80043f6 <SD_PowerON+0x2a>
      return errorstate;
 8004410:	4605      	mov	r5, r0
 8004412:	e7e5      	b.n	80043e0 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004414:	2100      	movs	r1, #0
 8004416:	6820      	ldr	r0, [r4, #0]
 8004418:	f001 fa59 	bl	80058ce <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800441c:	2800      	cmp	r0, #0
 800441e:	d0ed      	beq.n	80043fc <SD_PowerON+0x30>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004420:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004424:	e7dc      	b.n	80043e0 <SD_PowerON+0x14>
    count++;
 8004426:	9b01      	ldr	r3, [sp, #4]
 8004428:	3301      	adds	r3, #1
 800442a:	9301      	str	r3, [sp, #4]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800442c:	9a01      	ldr	r2, [sp, #4]
 800442e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004432:	429a      	cmp	r2, r3
 8004434:	d813      	bhi.n	800445e <SD_PowerON+0x92>
 8004436:	b996      	cbnz	r6, 800445e <SD_PowerON+0x92>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004438:	2100      	movs	r1, #0
 800443a:	6820      	ldr	r0, [r4, #0]
 800443c:	f001 fa47 	bl	80058ce <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8004440:	b9d0      	cbnz	r0, 8004478 <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8004442:	4912      	ldr	r1, [pc, #72]	; (800448c <SD_PowerON+0xc0>)
 8004444:	6820      	ldr	r0, [r4, #0]
 8004446:	f001 fb43 	bl	8005ad0 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800444a:	4606      	mov	r6, r0
 800444c:	b9b0      	cbnz	r0, 800447c <SD_PowerON+0xb0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800444e:	2100      	movs	r1, #0
 8004450:	6820      	ldr	r0, [r4, #0]
 8004452:	f001 f8a0 	bl	8005596 <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004456:	0fc3      	lsrs	r3, r0, #31
 8004458:	d0e5      	beq.n	8004426 <SD_PowerON+0x5a>
 800445a:	461e      	mov	r6, r3
 800445c:	e7e3      	b.n	8004426 <SD_PowerON+0x5a>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800445e:	9a01      	ldr	r2, [sp, #4]
 8004460:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004464:	429a      	cmp	r2, r3
 8004466:	d80c      	bhi.n	8004482 <SD_PowerON+0xb6>
  hsd->SdCard.CardType = CARD_SDSC;
 8004468:	2300      	movs	r3, #0
 800446a:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800446c:	f010 4380 	ands.w	r3, r0, #1073741824	; 0x40000000
 8004470:	d00a      	beq.n	8004488 <SD_PowerON+0xbc>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004472:	2301      	movs	r3, #1
 8004474:	63a3      	str	r3, [r4, #56]	; 0x38
 8004476:	e7b3      	b.n	80043e0 <SD_PowerON+0x14>
      return errorstate;
 8004478:	4605      	mov	r5, r0
 800447a:	e7b1      	b.n	80043e0 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800447c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004480:	e7ae      	b.n	80043e0 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004482:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8004486:	e7ab      	b.n	80043e0 <SD_PowerON+0x14>
  return HAL_SD_ERROR_NONE;
 8004488:	461d      	mov	r5, r3
 800448a:	e7a9      	b.n	80043e0 <SD_PowerON+0x14>
 800448c:	c1100000 	.word	0xc1100000

08004490 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004490:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8004492:	6a44      	ldr	r4, [r0, #36]	; 0x24

  if (hsd->RxXferSize >= 32U)
 8004494:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004496:	2b1f      	cmp	r3, #31
 8004498:	d815      	bhi.n	80044c6 <SD_Read_IT+0x36>
    }

    hsd->pRxBuffPtr = tmp;
    hsd->RxXferSize -= 32U;
  }
}
 800449a:	bd70      	pop	{r4, r5, r6, pc}
      data = SDMMC_ReadFIFO(hsd->Instance);
 800449c:	6830      	ldr	r0, [r6, #0]
 800449e:	f001 f853 	bl	8005548 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 80044a2:	7020      	strb	r0, [r4, #0]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80044a4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80044a8:	7063      	strb	r3, [r4, #1]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80044aa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80044ae:	70a3      	strb	r3, [r4, #2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80044b0:	0e00      	lsrs	r0, r0, #24
 80044b2:	70e0      	strb	r0, [r4, #3]
      tmp++;
 80044b4:	3404      	adds	r4, #4
    for (count = 0U; count < 8U; count++)
 80044b6:	3501      	adds	r5, #1
 80044b8:	2d07      	cmp	r5, #7
 80044ba:	d9ef      	bls.n	800449c <SD_Read_IT+0xc>
    hsd->pRxBuffPtr = tmp;
 80044bc:	6274      	str	r4, [r6, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 80044be:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80044c0:	3b20      	subs	r3, #32
 80044c2:	62b3      	str	r3, [r6, #40]	; 0x28
}
 80044c4:	e7e9      	b.n	800449a <SD_Read_IT+0xa>
 80044c6:	4606      	mov	r6, r0
    for (count = 0U; count < 8U; count++)
 80044c8:	2500      	movs	r5, #0
 80044ca:	e7f5      	b.n	80044b8 <SD_Read_IT+0x28>

080044cc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80044cc:	b570      	push	{r4, r5, r6, lr}
 80044ce:	b082      	sub	sp, #8
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 80044d0:	69c4      	ldr	r4, [r0, #28]

  if (hsd->TxXferSize >= 32U)
 80044d2:	6a03      	ldr	r3, [r0, #32]
 80044d4:	2b1f      	cmp	r3, #31
 80044d6:	d81c      	bhi.n	8004512 <SD_Write_IT+0x46>
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize -= 32U;
  }
}
 80044d8:	b002      	add	sp, #8
 80044da:	bd70      	pop	{r4, r5, r6, pc}
      data = (uint32_t)(*tmp);
 80044dc:	7823      	ldrb	r3, [r4, #0]
 80044de:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 80044e0:	7862      	ldrb	r2, [r4, #1]
 80044e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80044e6:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 80044e8:	78a2      	ldrb	r2, [r4, #2]
 80044ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044ee:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 80044f0:	78e2      	ldrb	r2, [r4, #3]
 80044f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80044f6:	9301      	str	r3, [sp, #4]
      tmp++;
 80044f8:	3404      	adds	r4, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80044fa:	a901      	add	r1, sp, #4
 80044fc:	6830      	ldr	r0, [r6, #0]
 80044fe:	f001 f826 	bl	800554e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8004502:	3501      	adds	r5, #1
 8004504:	2d07      	cmp	r5, #7
 8004506:	d9e9      	bls.n	80044dc <SD_Write_IT+0x10>
    hsd->pTxBuffPtr = tmp;
 8004508:	61f4      	str	r4, [r6, #28]
    hsd->TxXferSize -= 32U;
 800450a:	6a33      	ldr	r3, [r6, #32]
 800450c:	3b20      	subs	r3, #32
 800450e:	6233      	str	r3, [r6, #32]
}
 8004510:	e7e2      	b.n	80044d8 <SD_Write_IT+0xc>
 8004512:	4606      	mov	r6, r0
    for (count = 0U; count < 8U; count++)
 8004514:	2500      	movs	r5, #0
 8004516:	e7f5      	b.n	8004504 <SD_Write_IT+0x38>

08004518 <SD_SendSDStatus>:
{
 8004518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800451a:	b087      	sub	sp, #28
 800451c:	4605      	mov	r5, r0
 800451e:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 8004520:	f7fc ff44 	bl	80013ac <HAL_GetTick>
 8004524:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004526:	2100      	movs	r1, #0
 8004528:	6828      	ldr	r0, [r5, #0]
 800452a:	f001 f834 	bl	8005596 <SDMMC_GetResponse>
 800452e:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8004532:	d164      	bne.n	80045fe <SD_SendSDStatus+0xe6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8004534:	2140      	movs	r1, #64	; 0x40
 8004536:	6828      	ldr	r0, [r5, #0]
 8004538:	f001 f906 	bl	8005748 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800453c:	4603      	mov	r3, r0
 800453e:	b110      	cbz	r0, 8004546 <SD_SendSDStatus+0x2e>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8004540:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004542:	636a      	str	r2, [r5, #52]	; 0x34
    return errorstate;
 8004544:	e05d      	b.n	8004602 <SD_SendSDStatus+0xea>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004546:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8004548:	0409      	lsls	r1, r1, #16
 800454a:	6828      	ldr	r0, [r5, #0]
 800454c:	f001 f9bf 	bl	80058ce <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8004550:	4603      	mov	r3, r0
 8004552:	b110      	cbz	r0, 800455a <SD_SendSDStatus+0x42>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8004554:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004556:	636a      	str	r2, [r5, #52]	; 0x34
    return errorstate;
 8004558:	e053      	b.n	8004602 <SD_SendSDStatus+0xea>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800455a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800455e:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
 8004560:	2340      	movs	r3, #64	; 0x40
 8004562:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8004564:	2360      	movs	r3, #96	; 0x60
 8004566:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004568:	2302      	movs	r3, #2
 800456a:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800456c:	2300      	movs	r3, #0
 800456e:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004570:	2301      	movs	r3, #1
 8004572:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004574:	4669      	mov	r1, sp
 8004576:	6828      	ldr	r0, [r5, #0]
 8004578:	f001 f810 	bl	800559c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800457c:	6828      	ldr	r0, [r5, #0]
 800457e:	f001 fa0a 	bl	8005996 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 8004582:	4603      	mov	r3, r0
 8004584:	b180      	cbz	r0, 80045a8 <SD_SendSDStatus+0x90>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8004586:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004588:	636a      	str	r2, [r5, #52]	; 0x34
    return errorstate;
 800458a:	e03a      	b.n	8004602 <SD_SendSDStatus+0xea>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800458c:	6828      	ldr	r0, [r5, #0]
 800458e:	f000 ffdb 	bl	8005548 <SDMMC_ReadFIFO>
 8004592:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 8004596:	3401      	adds	r4, #1
 8004598:	2c07      	cmp	r4, #7
 800459a:	d9f7      	bls.n	800458c <SD_SendSDStatus+0x74>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800459c:	f7fc ff06 	bl	80013ac <HAL_GetTick>
 80045a0:	1bc0      	subs	r0, r0, r7
 80045a2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80045a6:	d02f      	beq.n	8004608 <SD_SendSDStatus+0xf0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80045a8:	682b      	ldr	r3, [r5, #0]
 80045aa:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80045ac:	f414 7495 	ands.w	r4, r4, #298	; 0x12a
 80045b0:	d104      	bne.n	80045bc <SD_SendSDStatus+0xa4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80045b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80045b8:	d0f0      	beq.n	800459c <SD_SendSDStatus+0x84>
 80045ba:	e7ed      	b.n	8004598 <SD_SendSDStatus+0x80>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80045bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045be:	f012 0f08 	tst.w	r2, #8
 80045c2:	d124      	bne.n	800460e <SD_SendSDStatus+0xf6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80045c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045c6:	f012 0f02 	tst.w	r2, #2
 80045ca:	d122      	bne.n	8004612 <SD_SendSDStatus+0xfa>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80045cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ce:	f013 0f20 	tst.w	r3, #32
 80045d2:	d120      	bne.n	8004616 <SD_SendSDStatus+0xfe>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80045d4:	6828      	ldr	r0, [r5, #0]
 80045d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80045d8:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80045dc:	d00c      	beq.n	80045f8 <SD_SendSDStatus+0xe0>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80045de:	f000 ffb3 	bl	8005548 <SDMMC_ReadFIFO>
 80045e2:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80045e6:	f7fc fee1 	bl	80013ac <HAL_GetTick>
 80045ea:	1bc0      	subs	r0, r0, r7
 80045ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80045f0:	d1f0      	bne.n	80045d4 <SD_SendSDStatus+0xbc>
      return HAL_SD_ERROR_TIMEOUT;
 80045f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80045f6:	e004      	b.n	8004602 <SD_SendSDStatus+0xea>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80045f8:	4a08      	ldr	r2, [pc, #32]	; (800461c <SD_SendSDStatus+0x104>)
 80045fa:	6382      	str	r2, [r0, #56]	; 0x38
  return HAL_SD_ERROR_NONE;
 80045fc:	e001      	b.n	8004602 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80045fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8004602:	4618      	mov	r0, r3
 8004604:	b007      	add	sp, #28
 8004606:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_SD_ERROR_TIMEOUT;
 8004608:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800460c:	e7f9      	b.n	8004602 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800460e:	2308      	movs	r3, #8
 8004610:	e7f7      	b.n	8004602 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004612:	2302      	movs	r3, #2
 8004614:	e7f5      	b.n	8004602 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_RX_OVERRUN;
 8004616:	2320      	movs	r3, #32
 8004618:	e7f3      	b.n	8004602 <SD_SendSDStatus+0xea>
 800461a:	bf00      	nop
 800461c:	18000f3a 	.word	0x18000f3a

08004620 <SD_FindSCR>:
{
 8004620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004622:	b089      	sub	sp, #36	; 0x24
 8004624:	4604      	mov	r4, r0
 8004626:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8004628:	f7fc fec0 	bl	80013ac <HAL_GetTick>
 800462c:	4605      	mov	r5, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 800462e:	2300      	movs	r3, #0
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004634:	2108      	movs	r1, #8
 8004636:	6820      	ldr	r0, [r4, #0]
 8004638:	f001 f886 	bl	8005748 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800463c:	4606      	mov	r6, r0
 800463e:	b110      	cbz	r0, 8004646 <SD_FindSCR+0x26>
}
 8004640:	4630      	mov	r0, r6
 8004642:	b009      	add	sp, #36	; 0x24
 8004644:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004646:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004648:	0409      	lsls	r1, r1, #16
 800464a:	6820      	ldr	r0, [r4, #0]
 800464c:	f001 f93f 	bl	80058ce <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8004650:	4606      	mov	r6, r0
 8004652:	2800      	cmp	r0, #0
 8004654:	d1f4      	bne.n	8004640 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800465a:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 800465c:	2308      	movs	r3, #8
 800465e:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004660:	2330      	movs	r3, #48	; 0x30
 8004662:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004664:	2302      	movs	r3, #2
 8004666:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004668:	2300      	movs	r3, #0
 800466a:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800466c:	2301      	movs	r3, #1
 800466e:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004670:	a902      	add	r1, sp, #8
 8004672:	6820      	ldr	r0, [r4, #0]
 8004674:	f000 ff92 	bl	800559c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004678:	6820      	ldr	r0, [r4, #0]
 800467a:	f001 f95a 	bl	8005932 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800467e:	4606      	mov	r6, r0
 8004680:	b130      	cbz	r0, 8004690 <SD_FindSCR+0x70>
 8004682:	e7dd      	b.n	8004640 <SD_FindSCR+0x20>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004684:	f7fc fe92 	bl	80013ac <HAL_GetTick>
 8004688:	1b43      	subs	r3, r0, r5
 800468a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800468e:	d046      	beq.n	800471e <SD_FindSCR+0xfe>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8004690:	6820      	ldr	r0, [r4, #0]
 8004692:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004694:	f240 532a 	movw	r3, #1322	; 0x52a
 8004698:	421a      	tst	r2, r3
 800469a:	d10e      	bne.n	80046ba <SD_FindSCR+0x9a>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800469c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800469e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80046a2:	d1ef      	bne.n	8004684 <SD_FindSCR+0x64>
 80046a4:	2e00      	cmp	r6, #0
 80046a6:	d1ed      	bne.n	8004684 <SD_FindSCR+0x64>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80046a8:	f000 ff4e 	bl	8005548 <SDMMC_ReadFIFO>
 80046ac:	9000      	str	r0, [sp, #0]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80046ae:	6820      	ldr	r0, [r4, #0]
 80046b0:	f000 ff4a 	bl	8005548 <SDMMC_ReadFIFO>
 80046b4:	9001      	str	r0, [sp, #4]
      index++;
 80046b6:	3601      	adds	r6, #1
 80046b8:	e7e4      	b.n	8004684 <SD_FindSCR+0x64>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80046ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80046bc:	f013 0f08 	tst.w	r3, #8
 80046c0:	d124      	bne.n	800470c <SD_FindSCR+0xec>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80046c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80046c4:	f013 0f02 	tst.w	r3, #2
 80046c8:	d123      	bne.n	8004712 <SD_FindSCR+0xf2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80046ca:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80046cc:	f016 0620 	ands.w	r6, r6, #32
 80046d0:	d122      	bne.n	8004718 <SD_FindSCR+0xf8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80046d2:	4b14      	ldr	r3, [pc, #80]	; (8004724 <SD_FindSCR+0x104>)
 80046d4:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80046d6:	9a01      	ldr	r2, [sp, #4]
 80046d8:	0213      	lsls	r3, r2, #8
 80046da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80046de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80046e2:	0a11      	lsrs	r1, r2, #8
 80046e4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80046e8:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80046ea:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80046ee:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80046f0:	9a00      	ldr	r2, [sp, #0]
 80046f2:	0213      	lsls	r3, r2, #8
 80046f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80046f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80046fc:	0a11      	lsrs	r1, r2, #8
 80046fe:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8004702:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004704:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8004708:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 800470a:	e799      	b.n	8004640 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800470c:	2608      	movs	r6, #8
 800470e:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004710:	e796      	b.n	8004640 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004712:	2602      	movs	r6, #2
 8004714:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004716:	e793      	b.n	8004640 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004718:	2620      	movs	r6, #32
 800471a:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800471c:	e790      	b.n	8004640 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 800471e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004722:	e78d      	b.n	8004640 <SD_FindSCR+0x20>
 8004724:	18000f3a 	.word	0x18000f3a

08004728 <SD_WideBus_Enable>:
{
 8004728:	b510      	push	{r4, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 800472e:	2100      	movs	r1, #0
 8004730:	9100      	str	r1, [sp, #0]
 8004732:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004734:	6800      	ldr	r0, [r0, #0]
 8004736:	f000 ff2e 	bl	8005596 <SDMMC_GetResponse>
 800473a:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800473e:	d113      	bne.n	8004768 <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8004740:	4669      	mov	r1, sp
 8004742:	4620      	mov	r0, r4
 8004744:	f7ff ff6c 	bl	8004620 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8004748:	b980      	cbnz	r0, 800476c <SD_WideBus_Enable+0x44>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800474a:	9b01      	ldr	r3, [sp, #4]
 800474c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004750:	d00e      	beq.n	8004770 <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004752:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004754:	0409      	lsls	r1, r1, #16
 8004756:	6820      	ldr	r0, [r4, #0]
 8004758:	f001 f8b9 	bl	80058ce <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800475c:	b930      	cbnz	r0, 800476c <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800475e:	2102      	movs	r1, #2
 8004760:	6820      	ldr	r0, [r4, #0]
 8004762:	f001 f8cd 	bl	8005900 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 8004766:	e001      	b.n	800476c <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004768:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 800476c:	b002      	add	sp, #8
 800476e:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004770:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004774:	e7fa      	b.n	800476c <SD_WideBus_Enable+0x44>

08004776 <SD_WideBus_Disable>:
{
 8004776:	b510      	push	{r4, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 800477c:	2100      	movs	r1, #0
 800477e:	9100      	str	r1, [sp, #0]
 8004780:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004782:	6800      	ldr	r0, [r0, #0]
 8004784:	f000 ff07 	bl	8005596 <SDMMC_GetResponse>
 8004788:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800478c:	d113      	bne.n	80047b6 <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 800478e:	4669      	mov	r1, sp
 8004790:	4620      	mov	r0, r4
 8004792:	f7ff ff45 	bl	8004620 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8004796:	b980      	cbnz	r0, 80047ba <SD_WideBus_Disable+0x44>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004798:	9b01      	ldr	r3, [sp, #4]
 800479a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800479e:	d00e      	beq.n	80047be <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80047a0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80047a2:	0409      	lsls	r1, r1, #16
 80047a4:	6820      	ldr	r0, [r4, #0]
 80047a6:	f001 f892 	bl	80058ce <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80047aa:	b930      	cbnz	r0, 80047ba <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80047ac:	2100      	movs	r1, #0
 80047ae:	6820      	ldr	r0, [r4, #0]
 80047b0:	f001 f8a6 	bl	8005900 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 80047b4:	e001      	b.n	80047ba <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80047b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 80047ba:	b002      	add	sp, #8
 80047bc:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80047be:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80047c2:	e7fa      	b.n	80047ba <SD_WideBus_Disable+0x44>

080047c4 <SD_SendStatus>:
{
 80047c4:	b570      	push	{r4, r5, r6, lr}
  if (pCardStatus == NULL)
 80047c6:	b181      	cbz	r1, 80047ea <SD_SendStatus+0x26>
 80047c8:	4604      	mov	r4, r0
 80047ca:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80047cc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80047ce:	0409      	lsls	r1, r1, #16
 80047d0:	6800      	ldr	r0, [r0, #0]
 80047d2:	f001 f8c7 	bl	8005964 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 80047d6:	4605      	mov	r5, r0
 80047d8:	b108      	cbz	r0, 80047de <SD_SendStatus+0x1a>
}
 80047da:	4628      	mov	r0, r5
 80047dc:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80047de:	2100      	movs	r1, #0
 80047e0:	6820      	ldr	r0, [r4, #0]
 80047e2:	f000 fed8 	bl	8005596 <SDMMC_GetResponse>
 80047e6:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 80047e8:	e7f7      	b.n	80047da <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 80047ea:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 80047ee:	e7f4      	b.n	80047da <SD_SendStatus+0x16>

080047f0 <HAL_SD_ReadBlocks>:
{
 80047f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f4:	b087      	sub	sp, #28
 80047f6:	4605      	mov	r5, r0
 80047f8:	460c      	mov	r4, r1
 80047fa:	4616      	mov	r6, r2
 80047fc:	469a      	mov	sl, r3
 80047fe:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8004802:	f7fc fdd3 	bl	80013ac <HAL_GetTick>
  if (NULL == pData)
 8004806:	2c00      	cmp	r4, #0
 8004808:	d03a      	beq.n	8004880 <HAL_SD_ReadBlocks+0x90>
 800480a:	4680      	mov	r8, r0
  if (hsd->State == HAL_SD_STATE_READY)
 800480c:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
 8004810:	b2ff      	uxtb	r7, r7
 8004812:	2f01      	cmp	r7, #1
 8004814:	f040 80e0 	bne.w	80049d8 <HAL_SD_ReadBlocks+0x1e8>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004818:	2300      	movs	r3, #0
 800481a:	636b      	str	r3, [r5, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800481c:	eb06 030a 	add.w	r3, r6, sl
 8004820:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8004822:	4293      	cmp	r3, r2
 8004824:	d832      	bhi.n	800488c <HAL_SD_ReadBlocks+0x9c>
    hsd->State = HAL_SD_STATE_BUSY;
 8004826:	2303      	movs	r3, #3
 8004828:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 800482c:	682b      	ldr	r3, [r5, #0]
 800482e:	2200      	movs	r2, #0
 8004830:	62da      	str	r2, [r3, #44]	; 0x2c
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004832:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004834:	2b01      	cmp	r3, #1
 8004836:	d000      	beq.n	800483a <HAL_SD_ReadBlocks+0x4a>
      add *= 512U;
 8004838:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800483a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800483e:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004840:	ea4f 234a 	mov.w	r3, sl, lsl #9
 8004844:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004846:	2390      	movs	r3, #144	; 0x90
 8004848:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800484a:	2302      	movs	r3, #2
 800484c:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800484e:	2300      	movs	r3, #0
 8004850:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004852:	9305      	str	r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004854:	4669      	mov	r1, sp
 8004856:	6828      	ldr	r0, [r5, #0]
 8004858:	f000 fea0 	bl	800559c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800485c:	682a      	ldr	r2, [r5, #0]
 800485e:	68d3      	ldr	r3, [r2, #12]
 8004860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004864:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 8004866:	f1ba 0f01 	cmp.w	sl, #1
 800486a:	d914      	bls.n	8004896 <HAL_SD_ReadBlocks+0xa6>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800486c:	2302      	movs	r3, #2
 800486e:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004870:	4631      	mov	r1, r6
 8004872:	6828      	ldr	r0, [r5, #0]
 8004874:	f000 ff9a 	bl	80057ac <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 8004878:	b9a0      	cbnz	r0, 80048a4 <HAL_SD_ReadBlocks+0xb4>
    dataremaining = config.DataLength;
 800487a:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800487e:	e038      	b.n	80048f2 <HAL_SD_ReadBlocks+0x102>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004880:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004882:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004886:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8004888:	2701      	movs	r7, #1
 800488a:	e0aa      	b.n	80049e2 <HAL_SD_ReadBlocks+0x1f2>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800488c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800488e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004892:	636b      	str	r3, [r5, #52]	; 0x34
      return HAL_ERROR;
 8004894:	e0a5      	b.n	80049e2 <HAL_SD_ReadBlocks+0x1f2>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004896:	2301      	movs	r3, #1
 8004898:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800489a:	4631      	mov	r1, r6
 800489c:	6828      	ldr	r0, [r5, #0]
 800489e:	f000 ff6c 	bl	800577a <SDMMC_CmdReadSingleBlock>
 80048a2:	e7e9      	b.n	8004878 <HAL_SD_ReadBlocks+0x88>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	4a51      	ldr	r2, [pc, #324]	; (80049ec <HAL_SD_ReadBlocks+0x1fc>)
 80048a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80048aa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80048ac:	4318      	orrs	r0, r3
 80048ae:	6368      	str	r0, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80048b6:	2300      	movs	r3, #0
 80048b8:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 80048ba:	e092      	b.n	80049e2 <HAL_SD_ReadBlocks+0x1f2>
          data = SDMMC_ReadFIFO(hsd->Instance);
 80048bc:	6828      	ldr	r0, [r5, #0]
 80048be:	f000 fe43 	bl	8005548 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 80048c2:	7020      	strb	r0, [r4, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80048c4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80048c8:	7063      	strb	r3, [r4, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80048ca:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80048ce:	70a3      	strb	r3, [r4, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80048d0:	0e00      	lsrs	r0, r0, #24
 80048d2:	70e0      	strb	r0, [r4, #3]
          tempbuff++;
 80048d4:	3404      	adds	r4, #4
        for (count = 0U; count < 8U; count++)
 80048d6:	3601      	adds	r6, #1
 80048d8:	2e07      	cmp	r6, #7
 80048da:	d9ef      	bls.n	80048bc <HAL_SD_ReadBlocks+0xcc>
        dataremaining -= 32U;
 80048dc:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80048e0:	f7fc fd64 	bl	80013ac <HAL_GetTick>
 80048e4:	eba0 0008 	sub.w	r0, r0, r8
 80048e8:	4548      	cmp	r0, r9
 80048ea:	d20f      	bcs.n	800490c <HAL_SD_ReadBlocks+0x11c>
 80048ec:	f1b9 0f00 	cmp.w	r9, #0
 80048f0:	d00c      	beq.n	800490c <HAL_SD_ReadBlocks+0x11c>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80048f2:	682b      	ldr	r3, [r5, #0]
 80048f4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80048f6:	f416 7695 	ands.w	r6, r6, #298	; 0x12a
 80048fa:	d115      	bne.n	8004928 <HAL_SD_ReadBlocks+0x138>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80048fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fe:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004902:	d0ed      	beq.n	80048e0 <HAL_SD_ReadBlocks+0xf0>
 8004904:	f1bb 0f1f 	cmp.w	fp, #31
 8004908:	d9ea      	bls.n	80048e0 <HAL_SD_ReadBlocks+0xf0>
 800490a:	e7e5      	b.n	80048d8 <HAL_SD_ReadBlocks+0xe8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	4a37      	ldr	r2, [pc, #220]	; (80049ec <HAL_SD_ReadBlocks+0x1fc>)
 8004910:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004912:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004914:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004918:	636b      	str	r3, [r5, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800491a:	2301      	movs	r3, #1
 800491c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8004920:	2300      	movs	r3, #0
 8004922:	62eb      	str	r3, [r5, #44]	; 0x2c
        return HAL_TIMEOUT;
 8004924:	2703      	movs	r7, #3
 8004926:	e05c      	b.n	80049e2 <HAL_SD_ReadBlocks+0x1f2>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800492e:	60da      	str	r2, [r3, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004930:	6828      	ldr	r0, [r5, #0]
 8004932:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004934:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004938:	d005      	beq.n	8004946 <HAL_SD_ReadBlocks+0x156>
 800493a:	f1ba 0f01 	cmp.w	sl, #1
 800493e:	d902      	bls.n	8004946 <HAL_SD_ReadBlocks+0x156>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8004940:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004942:	2b03      	cmp	r3, #3
 8004944:	d118      	bne.n	8004978 <HAL_SD_ReadBlocks+0x188>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004946:	682b      	ldr	r3, [r5, #0]
 8004948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800494a:	f012 0f08 	tst.w	r2, #8
 800494e:	d124      	bne.n	800499a <HAL_SD_ReadBlocks+0x1aa>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004952:	f012 0f02 	tst.w	r2, #2
 8004956:	d12c      	bne.n	80049b2 <HAL_SD_ReadBlocks+0x1c2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800495a:	f012 0f20 	tst.w	r2, #32
 800495e:	d034      	beq.n	80049ca <HAL_SD_ReadBlocks+0x1da>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004960:	4a22      	ldr	r2, [pc, #136]	; (80049ec <HAL_SD_ReadBlocks+0x1fc>)
 8004962:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004964:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004966:	f043 0320 	orr.w	r3, r3, #32
 800496a:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800496c:	2301      	movs	r3, #1
 800496e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004972:	2300      	movs	r3, #0
 8004974:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8004976:	e034      	b.n	80049e2 <HAL_SD_ReadBlocks+0x1f2>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004978:	f000 ff64 	bl	8005844 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800497c:	4603      	mov	r3, r0
 800497e:	2800      	cmp	r0, #0
 8004980:	d0e1      	beq.n	8004946 <HAL_SD_ReadBlocks+0x156>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004982:	682a      	ldr	r2, [r5, #0]
 8004984:	4919      	ldr	r1, [pc, #100]	; (80049ec <HAL_SD_ReadBlocks+0x1fc>)
 8004986:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004988:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800498a:	4313      	orrs	r3, r2
 800498c:	636b      	str	r3, [r5, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800498e:	2301      	movs	r3, #1
 8004990:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8004994:	2300      	movs	r3, #0
 8004996:	62eb      	str	r3, [r5, #44]	; 0x2c
          return HAL_ERROR;
 8004998:	e023      	b.n	80049e2 <HAL_SD_ReadBlocks+0x1f2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800499a:	4a14      	ldr	r2, [pc, #80]	; (80049ec <HAL_SD_ReadBlocks+0x1fc>)
 800499c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800499e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80049a0:	f043 0308 	orr.w	r3, r3, #8
 80049a4:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80049ac:	2300      	movs	r3, #0
 80049ae:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 80049b0:	e017      	b.n	80049e2 <HAL_SD_ReadBlocks+0x1f2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80049b2:	4a0e      	ldr	r2, [pc, #56]	; (80049ec <HAL_SD_ReadBlocks+0x1fc>)
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80049b6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80049b8:	f043 0302 	orr.w	r3, r3, #2
 80049bc:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80049be:	2301      	movs	r3, #1
 80049c0:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80049c4:	2300      	movs	r3, #0
 80049c6:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 80049c8:	e00b      	b.n	80049e2 <HAL_SD_ReadBlocks+0x1f2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80049ca:	4a09      	ldr	r2, [pc, #36]	; (80049f0 <HAL_SD_ReadBlocks+0x200>)
 80049cc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    return HAL_OK;
 80049d4:	2700      	movs	r7, #0
 80049d6:	e004      	b.n	80049e2 <HAL_SD_ReadBlocks+0x1f2>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80049d8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80049da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049de:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 80049e0:	2701      	movs	r7, #1
}
 80049e2:	4638      	mov	r0, r7
 80049e4:	b007      	add	sp, #28
 80049e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ea:	bf00      	nop
 80049ec:	1fe00fff 	.word	0x1fe00fff
 80049f0:	18000f3a 	.word	0x18000f3a

080049f4 <HAL_SD_WriteBlocks>:
{
 80049f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f8:	b08b      	sub	sp, #44	; 0x2c
 80049fa:	4605      	mov	r5, r0
 80049fc:	460c      	mov	r4, r1
 80049fe:	4616      	mov	r6, r2
 8004a00:	469a      	mov	sl, r3
 8004a02:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
 8004a06:	f7fc fcd1 	bl	80013ac <HAL_GetTick>
  if (NULL == pData)
 8004a0a:	2c00      	cmp	r4, #0
 8004a0c:	d03b      	beq.n	8004a86 <HAL_SD_WriteBlocks+0x92>
 8004a0e:	4680      	mov	r8, r0
  if (hsd->State == HAL_SD_STATE_READY)
 8004a10:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
 8004a14:	b2ff      	uxtb	r7, r7
 8004a16:	2f01      	cmp	r7, #1
 8004a18:	f040 80e9 	bne.w	8004bee <HAL_SD_WriteBlocks+0x1fa>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	636b      	str	r3, [r5, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004a20:	eb06 030a 	add.w	r3, r6, sl
 8004a24:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d833      	bhi.n	8004a92 <HAL_SD_WriteBlocks+0x9e>
    hsd->State = HAL_SD_STATE_BUSY;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 8004a30:	682b      	ldr	r3, [r5, #0]
 8004a32:	2200      	movs	r2, #0
 8004a34:	62da      	str	r2, [r3, #44]	; 0x2c
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004a36:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d000      	beq.n	8004a3e <HAL_SD_WriteBlocks+0x4a>
      add *= 512U;
 8004a3c:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a42:	9304      	str	r3, [sp, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004a44:	ea4f 234a 	mov.w	r3, sl, lsl #9
 8004a48:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004a4a:	2390      	movs	r3, #144	; 0x90
 8004a4c:	9306      	str	r3, [sp, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004a52:	9308      	str	r3, [sp, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004a54:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004a56:	a904      	add	r1, sp, #16
 8004a58:	6828      	ldr	r0, [r5, #0]
 8004a5a:	f000 fd9f 	bl	800559c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8004a5e:	682a      	ldr	r2, [r5, #0]
 8004a60:	68d3      	ldr	r3, [r2, #12]
 8004a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a66:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 8004a68:	f1ba 0f01 	cmp.w	sl, #1
 8004a6c:	d916      	bls.n	8004a9c <HAL_SD_WriteBlocks+0xa8>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004a6e:	2320      	movs	r3, #32
 8004a70:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004a72:	4631      	mov	r1, r6
 8004a74:	6828      	ldr	r0, [r5, #0]
 8004a76:	f000 fecb 	bl	8005810 <SDMMC_CmdWriteMultiBlock>
 8004a7a:	9001      	str	r0, [sp, #4]
    if (errorstate != HAL_SD_ERROR_NONE)
 8004a7c:	9b01      	ldr	r3, [sp, #4]
 8004a7e:	b9ab      	cbnz	r3, 8004aac <HAL_SD_WriteBlocks+0xb8>
    dataremaining = config.DataLength;
 8004a80:	f8dd b014 	ldr.w	fp, [sp, #20]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8004a84:	e040      	b.n	8004b08 <HAL_SD_WriteBlocks+0x114>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004a86:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004a88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a8c:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8004a8e:	2701      	movs	r7, #1
 8004a90:	e0b2      	b.n	8004bf8 <HAL_SD_WriteBlocks+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004a92:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004a94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a98:	636b      	str	r3, [r5, #52]	; 0x34
      return HAL_ERROR;
 8004a9a:	e0ad      	b.n	8004bf8 <HAL_SD_WriteBlocks+0x204>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004a9c:	2310      	movs	r3, #16
 8004a9e:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004aa0:	4631      	mov	r1, r6
 8004aa2:	6828      	ldr	r0, [r5, #0]
 8004aa4:	f000 fe9b 	bl	80057de <SDMMC_CmdWriteSingleBlock>
 8004aa8:	9001      	str	r0, [sp, #4]
 8004aaa:	e7e7      	b.n	8004a7c <HAL_SD_WriteBlocks+0x88>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004aac:	682b      	ldr	r3, [r5, #0]
 8004aae:	4a54      	ldr	r2, [pc, #336]	; (8004c00 <HAL_SD_WriteBlocks+0x20c>)
 8004ab0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004ab2:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8004ab4:	9b01      	ldr	r3, [sp, #4]
 8004ab6:	4318      	orrs	r0, r3
 8004ab8:	6368      	str	r0, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004aba:	2301      	movs	r3, #1
 8004abc:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8004ac4:	e098      	b.n	8004bf8 <HAL_SD_WriteBlocks+0x204>
          data = (uint32_t)(*tempbuff);
 8004ac6:	7823      	ldrb	r3, [r4, #0]
 8004ac8:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004aca:	7862      	ldrb	r2, [r4, #1]
 8004acc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ad0:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004ad2:	78a2      	ldrb	r2, [r4, #2]
 8004ad4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ad8:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004ada:	78e2      	ldrb	r2, [r4, #3]
 8004adc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004ae0:	9303      	str	r3, [sp, #12]
          tempbuff++;
 8004ae2:	3404      	adds	r4, #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004ae4:	a903      	add	r1, sp, #12
 8004ae6:	6828      	ldr	r0, [r5, #0]
 8004ae8:	f000 fd31 	bl	800554e <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8004aec:	3601      	adds	r6, #1
 8004aee:	2e07      	cmp	r6, #7
 8004af0:	d9e9      	bls.n	8004ac6 <HAL_SD_WriteBlocks+0xd2>
        dataremaining -= 32U;
 8004af2:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8004af6:	f7fc fc59 	bl	80013ac <HAL_GetTick>
 8004afa:	eba0 0008 	sub.w	r0, r0, r8
 8004afe:	4548      	cmp	r0, r9
 8004b00:	d20f      	bcs.n	8004b22 <HAL_SD_WriteBlocks+0x12e>
 8004b02:	f1b9 0f00 	cmp.w	r9, #0
 8004b06:	d00c      	beq.n	8004b22 <HAL_SD_WriteBlocks+0x12e>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8004b08:	682b      	ldr	r3, [r5, #0]
 8004b0a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8004b0c:	f416 768d 	ands.w	r6, r6, #282	; 0x11a
 8004b10:	d115      	bne.n	8004b3e <HAL_SD_WriteBlocks+0x14a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8004b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b14:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004b18:	d0ed      	beq.n	8004af6 <HAL_SD_WriteBlocks+0x102>
 8004b1a:	f1bb 0f1f 	cmp.w	fp, #31
 8004b1e:	d9ea      	bls.n	8004af6 <HAL_SD_WriteBlocks+0x102>
 8004b20:	e7e5      	b.n	8004aee <HAL_SD_WriteBlocks+0xfa>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004b22:	682b      	ldr	r3, [r5, #0]
 8004b24:	4a36      	ldr	r2, [pc, #216]	; (8004c00 <HAL_SD_WriteBlocks+0x20c>)
 8004b26:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004b28:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8004b2a:	9b01      	ldr	r3, [sp, #4]
 8004b2c:	4318      	orrs	r0, r3
 8004b2e:	6368      	str	r0, [r5, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8004b30:	2301      	movs	r3, #1
 8004b32:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8004b36:	2300      	movs	r3, #0
 8004b38:	62eb      	str	r3, [r5, #44]	; 0x2c
        return HAL_TIMEOUT;
 8004b3a:	2703      	movs	r7, #3
 8004b3c:	e05c      	b.n	8004bf8 <HAL_SD_WriteBlocks+0x204>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b44:	60da      	str	r2, [r3, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004b46:	6828      	ldr	r0, [r5, #0]
 8004b48:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004b4a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004b4e:	d005      	beq.n	8004b5c <HAL_SD_WriteBlocks+0x168>
 8004b50:	f1ba 0f01 	cmp.w	sl, #1
 8004b54:	d902      	bls.n	8004b5c <HAL_SD_WriteBlocks+0x168>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8004b56:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d118      	bne.n	8004b8e <HAL_SD_WriteBlocks+0x19a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004b5c:	682b      	ldr	r3, [r5, #0]
 8004b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b60:	f012 0f08 	tst.w	r2, #8
 8004b64:	d124      	bne.n	8004bb0 <HAL_SD_WriteBlocks+0x1bc>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b68:	f012 0f02 	tst.w	r2, #2
 8004b6c:	d12c      	bne.n	8004bc8 <HAL_SD_WriteBlocks+0x1d4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8004b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b70:	f012 0f10 	tst.w	r2, #16
 8004b74:	d034      	beq.n	8004be0 <HAL_SD_WriteBlocks+0x1ec>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004b76:	4a22      	ldr	r2, [pc, #136]	; (8004c00 <HAL_SD_WriteBlocks+0x20c>)
 8004b78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004b7a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004b7c:	f043 0310 	orr.w	r3, r3, #16
 8004b80:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004b82:	2301      	movs	r3, #1
 8004b84:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8004b8c:	e034      	b.n	8004bf8 <HAL_SD_WriteBlocks+0x204>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004b8e:	f000 fe59 	bl	8005844 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8004b92:	4603      	mov	r3, r0
 8004b94:	2800      	cmp	r0, #0
 8004b96:	d0e1      	beq.n	8004b5c <HAL_SD_WriteBlocks+0x168>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004b98:	682a      	ldr	r2, [r5, #0]
 8004b9a:	4919      	ldr	r1, [pc, #100]	; (8004c00 <HAL_SD_WriteBlocks+0x20c>)
 8004b9c:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004b9e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	636b      	str	r3, [r5, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	62eb      	str	r3, [r5, #44]	; 0x2c
          return HAL_ERROR;
 8004bae:	e023      	b.n	8004bf8 <HAL_SD_WriteBlocks+0x204>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004bb0:	4a13      	ldr	r2, [pc, #76]	; (8004c00 <HAL_SD_WriteBlocks+0x20c>)
 8004bb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004bb4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004bb6:	f043 0308 	orr.w	r3, r3, #8
 8004bba:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8004bc6:	e017      	b.n	8004bf8 <HAL_SD_WriteBlocks+0x204>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004bc8:	4a0d      	ldr	r2, [pc, #52]	; (8004c00 <HAL_SD_WriteBlocks+0x20c>)
 8004bca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004bcc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004bce:	f043 0302 	orr.w	r3, r3, #2
 8004bd2:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8004bde:	e00b      	b.n	8004bf8 <HAL_SD_WriteBlocks+0x204>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004be0:	4a08      	ldr	r2, [pc, #32]	; (8004c04 <HAL_SD_WriteBlocks+0x210>)
 8004be2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004be4:	2301      	movs	r3, #1
 8004be6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    return HAL_OK;
 8004bea:	2700      	movs	r7, #0
 8004bec:	e004      	b.n	8004bf8 <HAL_SD_WriteBlocks+0x204>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004bee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004bf0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bf4:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8004bf6:	2701      	movs	r7, #1
}
 8004bf8:	4638      	mov	r0, r7
 8004bfa:	b00b      	add	sp, #44	; 0x2c
 8004bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c00:	1fe00fff 	.word	0x1fe00fff
 8004c04:	18000f3a 	.word	0x18000f3a

08004c08 <HAL_SD_ErrorCallback>:
}
 8004c08:	4770      	bx	lr
	...

08004c0c <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004c0c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004c0e:	0f9b      	lsrs	r3, r3, #30
 8004c10:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004c12:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004c14:	f3c3 6383 	ubfx	r3, r3, #26, #4
 8004c18:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004c1a:	f890 305f 	ldrb.w	r3, [r0, #95]	; 0x5f
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004c24:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
 8004c28:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004c2a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8004c2e:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004c30:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8004c34:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004c36:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004c38:	0d1b      	lsrs	r3, r3, #20
 8004c3a:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004c3c:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004c46:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004c48:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8004c4c:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004c4e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004c50:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8004c54:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004c56:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004c58:	f3c3 3340 	ubfx	r3, r3, #13, #1
 8004c5c:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004c5e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004c60:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8004c64:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004c66:	2300      	movs	r3, #0
 8004c68:	734b      	strb	r3, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 8004c6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f040 8086 	bne.w	8004d7e <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004c72:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8004c74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c78:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 8004c7c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8004c7e:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8004c82:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004c84:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004c86:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 8004c8a:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004c8c:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004c96:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004c98:	f3c3 5342 	ubfx	r3, r3, #21, #3
 8004c9c:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004c9e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004ca0:	f3c3 4382 	ubfx	r3, r3, #18, #3
 8004ca4:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004ca6:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004ca8:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 8004cac:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004cae:	690b      	ldr	r3, [r1, #16]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004cb4:	7e0a      	ldrb	r2, [r1, #24]
 8004cb6:	f002 0207 	and.w	r2, r2, #7
 8004cba:	3202      	adds	r2, #2
 8004cbc:	4093      	lsls	r3, r2
 8004cbe:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004cc0:	7a0a      	ldrb	r2, [r1, #8]
 8004cc2:	f002 0c0f 	and.w	ip, r2, #15
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	fa02 f20c 	lsl.w	r2, r2, ip
 8004ccc:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004cce:	0a52      	lsrs	r2, r2, #9
 8004cd0:	fb02 f303 	mul.w	r3, r2, r3
 8004cd4:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8004cd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cda:	6543      	str	r3, [r0, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004cdc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004cde:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8004ce2:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004ce4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004ce6:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8004cea:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004cec:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf2:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004cf4:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8004cf6:	0fdb      	lsrs	r3, r3, #31
 8004cf8:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004cfa:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8004cfc:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8004d00:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004d02:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8004d04:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8004d08:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004d0a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8004d0c:	f3c3 5383 	ubfx	r3, r3, #22, #4
 8004d10:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004d12:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8004d14:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8004d18:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004d22:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8004d26:	f002 0201 	and.w	r2, r2, #1
 8004d2a:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004d2e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8004d30:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8004d34:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004d38:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8004d3a:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8004d3e:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004d42:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8004d44:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8004d48:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004d4c:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8004d4e:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8004d52:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004d56:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8004d58:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8004d5c:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004d60:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8004d62:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8004d66:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004d6a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8004d6c:	f3c2 0246 	ubfx	r2, r2, #1, #7
 8004d70:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8004d74:	2201      	movs	r2, #1
 8004d76:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 8004d7a:	4618      	mov	r0, r3
}
 8004d7c:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d111      	bne.n	8004da6 <HAL_SD_GetCardCSD+0x19a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004d82:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004d84:	041b      	lsls	r3, r3, #16
 8004d86:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8004d8a:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004d92:	690b      	ldr	r3, [r1, #16]
 8004d94:	3301      	adds	r3, #1
 8004d96:	029b      	lsls	r3, r3, #10
 8004d98:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004d9a:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8004d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004da0:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004da2:	6543      	str	r3, [r0, #84]	; 0x54
 8004da4:	e79a      	b.n	8004cdc <HAL_SD_GetCardCSD+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004da6:	6803      	ldr	r3, [r0, #0]
 8004da8:	4a05      	ldr	r2, [pc, #20]	; (8004dc0 <HAL_SD_GetCardCSD+0x1b4>)
 8004daa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004dac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db2:	6343      	str	r3, [r0, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8004db4:	2301      	movs	r3, #1
 8004db6:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    return HAL_ERROR;
 8004dba:	4618      	mov	r0, r3
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	1fe00fff 	.word	0x1fe00fff

08004dc4 <SD_InitCard>:
{
 8004dc4:	b530      	push	{r4, r5, lr}
 8004dc6:	b08d      	sub	sp, #52	; 0x34
 8004dc8:	4604      	mov	r4, r0
  uint16_t sd_rca = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tickstart = HAL_GetTick();
 8004dd0:	f7fc faec 	bl	80013ac <HAL_GetTick>
 8004dd4:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004dd6:	6820      	ldr	r0, [r4, #0]
 8004dd8:	f000 fbc4 	bl	8005564 <SDMMC_GetPowerState>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d067      	beq.n	8004eb0 <SD_InitCard+0xec>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8004de0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d117      	bne.n	8004e16 <SD_InitCard+0x52>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8004de6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d02f      	beq.n	8004e4c <SD_InitCard+0x88>
    while (sd_rca == 0U)
 8004dec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8004df0:	bb63      	cbnz	r3, 8004e4c <SD_InitCard+0x88>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004df2:	f10d 0102 	add.w	r1, sp, #2
 8004df6:	6820      	ldr	r0, [r4, #0]
 8004df8:	f000 fed2 	bl	8005ba0 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	d158      	bne.n	8004eb4 <SD_InitCard+0xf0>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8004e02:	f7fc fad3 	bl	80013ac <HAL_GetTick>
 8004e06:	1b43      	subs	r3, r0, r5
 8004e08:	f241 3287 	movw	r2, #4999	; 0x1387
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d9ed      	bls.n	8004dec <SD_InitCard+0x28>
        return HAL_SD_ERROR_TIMEOUT;
 8004e10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e14:	e04e      	b.n	8004eb4 <SD_InitCard+0xf0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004e16:	6820      	ldr	r0, [r4, #0]
 8004e18:	f000 fe06 	bl	8005a28 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	d148      	bne.n	8004eb4 <SD_InitCard+0xf0>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004e22:	2100      	movs	r1, #0
 8004e24:	6820      	ldr	r0, [r4, #0]
 8004e26:	f000 fbb6 	bl	8005596 <SDMMC_GetResponse>
 8004e2a:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004e2c:	2104      	movs	r1, #4
 8004e2e:	6820      	ldr	r0, [r4, #0]
 8004e30:	f000 fbb1 	bl	8005596 <SDMMC_GetResponse>
 8004e34:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004e36:	2108      	movs	r1, #8
 8004e38:	6820      	ldr	r0, [r4, #0]
 8004e3a:	f000 fbac 	bl	8005596 <SDMMC_GetResponse>
 8004e3e:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004e40:	210c      	movs	r1, #12
 8004e42:	6820      	ldr	r0, [r4, #0]
 8004e44:	f000 fba7 	bl	8005596 <SDMMC_GetResponse>
 8004e48:	67a0      	str	r0, [r4, #120]	; 0x78
 8004e4a:	e7cc      	b.n	8004de6 <SD_InitCard+0x22>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8004e4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d01c      	beq.n	8004e8c <SD_InitCard+0xc8>
    hsd->SdCard.RelCardAdd = sd_rca;
 8004e52:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8004e56:	6461      	str	r1, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004e58:	0409      	lsls	r1, r1, #16
 8004e5a:	6820      	ldr	r0, [r4, #0]
 8004e5c:	f000 fdfa 	bl	8005a54 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 8004e60:	4603      	mov	r3, r0
 8004e62:	bb38      	cbnz	r0, 8004eb4 <SD_InitCard+0xf0>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004e64:	2100      	movs	r1, #0
 8004e66:	6820      	ldr	r0, [r4, #0]
 8004e68:	f000 fb95 	bl	8005596 <SDMMC_GetResponse>
 8004e6c:	65e0      	str	r0, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004e6e:	2104      	movs	r1, #4
 8004e70:	6820      	ldr	r0, [r4, #0]
 8004e72:	f000 fb90 	bl	8005596 <SDMMC_GetResponse>
 8004e76:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004e78:	2108      	movs	r1, #8
 8004e7a:	6820      	ldr	r0, [r4, #0]
 8004e7c:	f000 fb8b 	bl	8005596 <SDMMC_GetResponse>
 8004e80:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004e82:	210c      	movs	r1, #12
 8004e84:	6820      	ldr	r0, [r4, #0]
 8004e86:	f000 fb86 	bl	8005596 <SDMMC_GetResponse>
 8004e8a:	66a0      	str	r0, [r4, #104]	; 0x68
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004e8c:	2104      	movs	r1, #4
 8004e8e:	6820      	ldr	r0, [r4, #0]
 8004e90:	f000 fb81 	bl	8005596 <SDMMC_GetResponse>
 8004e94:	0d00      	lsrs	r0, r0, #20
 8004e96:	6420      	str	r0, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004e98:	a901      	add	r1, sp, #4
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	f7ff feb6 	bl	8004c0c <HAL_SD_GetCardCSD>
 8004ea0:	b958      	cbnz	r0, 8004eba <SD_InitCard+0xf6>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004ea2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004ea4:	0409      	lsls	r1, r1, #16
 8004ea6:	6820      	ldr	r0, [r4, #0]
 8004ea8:	f000 fcf8 	bl	800589c <SDMMC_CmdSelDesel>
 8004eac:	4603      	mov	r3, r0
  if (errorstate != HAL_SD_ERROR_NONE)
 8004eae:	e001      	b.n	8004eb4 <SD_InitCard+0xf0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004eb0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	b00d      	add	sp, #52	; 0x34
 8004eb8:	bd30      	pop	{r4, r5, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004eba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004ebe:	e7f9      	b.n	8004eb4 <SD_InitCard+0xf0>

08004ec0 <HAL_SD_InitCard>:
{
 8004ec0:	b570      	push	{r4, r5, r6, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	9303      	str	r3, [sp, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004eca:	9304      	str	r3, [sp, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004ecc:	9305      	str	r3, [sp, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004ece:	9306      	str	r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8004ed0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004ed4:	f7fe ff70 	bl	8003db8 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 8004ed8:	b938      	cbnz	r0, 8004eea <HAL_SD_InitCard+0x2a>
    hsd->State = HAL_SD_STATE_READY;
 8004eda:	2001      	movs	r0, #1
 8004edc:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8004ee0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ee4:	6363      	str	r3, [r4, #52]	; 0x34
}
 8004ee6:	b008      	add	sp, #32
 8004ee8:	bd70      	pop	{r4, r5, r6, pc}
 8004eea:	4606      	mov	r6, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8004eec:	0a05      	lsrs	r5, r0, #8
 8004eee:	4b22      	ldr	r3, [pc, #136]	; (8004f78 <HAL_SD_InitCard+0xb8>)
 8004ef0:	fba3 3505 	umull	r3, r5, r3, r5
 8004ef4:	092d      	lsrs	r5, r5, #4
 8004ef6:	9507      	str	r5, [sp, #28]
  (void)SDMMC_Init(hsd->Instance, Init);
 8004ef8:	ab08      	add	r3, sp, #32
 8004efa:	e913 0003 	ldmdb	r3, {r0, r1}
 8004efe:	e88d 0003 	stmia.w	sp, {r0, r1}
 8004f02:	ab03      	add	r3, sp, #12
 8004f04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f06:	6820      	ldr	r0, [r4, #0]
 8004f08:	f000 fb06 	bl	8005518 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004f0c:	6820      	ldr	r0, [r4, #0]
 8004f0e:	f000 fb23 	bl	8005558 <SDMMC_PowerState_ON>
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8004f12:	006d      	lsls	r5, r5, #1
 8004f14:	fbb6 f5f5 	udiv	r5, r6, r5
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8004f18:	4e18      	ldr	r6, [pc, #96]	; (8004f7c <HAL_SD_InitCard+0xbc>)
 8004f1a:	fbb6 f5f5 	udiv	r5, r6, r5
 8004f1e:	1c68      	adds	r0, r5, #1
 8004f20:	f7fc fa4a 	bl	80013b8 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 8004f24:	4620      	mov	r0, r4
 8004f26:	f7ff fa51 	bl	80043cc <SD_PowerON>
  if (errorstate != HAL_SD_ERROR_NONE)
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	b130      	cbz	r0, 8004f3c <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 8004f2e:	2001      	movs	r0, #1
 8004f30:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8004f34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f36:	4313      	orrs	r3, r2
 8004f38:	6363      	str	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8004f3a:	e7d4      	b.n	8004ee6 <HAL_SD_InitCard+0x26>
  errorstate = SD_InitCard(hsd);
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f7ff ff41 	bl	8004dc4 <SD_InitCard>
  if (errorstate != HAL_SD_ERROR_NONE)
 8004f42:	4602      	mov	r2, r0
 8004f44:	b130      	cbz	r0, 8004f54 <HAL_SD_InitCard+0x94>
    hsd->State = HAL_SD_STATE_READY;
 8004f46:	2001      	movs	r0, #1
 8004f48:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8004f4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	6363      	str	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8004f52:	e7c8      	b.n	8004ee6 <HAL_SD_InitCard+0x26>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004f54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f58:	6820      	ldr	r0, [r4, #0]
 8004f5a:	f000 fbf5 	bl	8005748 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8004f5e:	b908      	cbnz	r0, 8004f64 <HAL_SD_InitCard+0xa4>
  return HAL_OK;
 8004f60:	2000      	movs	r0, #0
 8004f62:	e7c0      	b.n	8004ee6 <HAL_SD_InitCard+0x26>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	4906      	ldr	r1, [pc, #24]	; (8004f80 <HAL_SD_InitCard+0xc0>)
 8004f68:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004f6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f6c:	4303      	orrs	r3, r0
 8004f6e:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8004f70:	2001      	movs	r0, #1
 8004f72:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    return HAL_ERROR;
 8004f76:	e7b6      	b.n	8004ee6 <HAL_SD_InitCard+0x26>
 8004f78:	014f8b59 	.word	0x014f8b59
 8004f7c:	00012110 	.word	0x00012110
 8004f80:	1fe00fff 	.word	0x1fe00fff

08004f84 <HAL_SD_GetCardStatus>:
{
 8004f84:	b530      	push	{r4, r5, lr}
 8004f86:	b091      	sub	sp, #68	; 0x44
  if (hsd->State == HAL_SD_STATE_BUSY)
 8004f88:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	d059      	beq.n	8005046 <HAL_SD_GetCardStatus+0xc2>
 8004f92:	4604      	mov	r4, r0
 8004f94:	460d      	mov	r5, r1
  errorstate = SD_SendSDStatus(hsd, sd_status);
 8004f96:	4669      	mov	r1, sp
 8004f98:	f7ff fabe 	bl	8004518 <SD_SendSDStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8004f9c:	b1b8      	cbz	r0, 8004fce <HAL_SD_GetCardStatus+0x4a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	492b      	ldr	r1, [pc, #172]	; (8005050 <HAL_SD_GetCardStatus+0xcc>)
 8004fa2:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004fa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fa6:	4303      	orrs	r3, r0
 8004fa8:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8004faa:	2501      	movs	r5, #1
 8004fac:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004fb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fb4:	6820      	ldr	r0, [r4, #0]
 8004fb6:	f000 fbc7 	bl	8005748 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d044      	beq.n	8005048 <HAL_SD_GetCardStatus+0xc4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004fbe:	6822      	ldr	r2, [r4, #0]
 8004fc0:	4923      	ldr	r1, [pc, #140]	; (8005050 <HAL_SD_GetCardStatus+0xcc>)
 8004fc2:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8004fc4:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8004fc6:	2501      	movs	r5, #1
 8004fc8:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    status = HAL_ERROR;
 8004fcc:	e03c      	b.n	8005048 <HAL_SD_GetCardStatus+0xc4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8004fce:	9a00      	ldr	r2, [sp, #0]
 8004fd0:	f3c2 1381 	ubfx	r3, r2, #6, #2
 8004fd4:	702b      	strb	r3, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8004fd6:	f3c2 1340 	ubfx	r3, r2, #5, #1
 8004fda:	706b      	strb	r3, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8004fdc:	0a13      	lsrs	r3, r2, #8
 8004fde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004fe2:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	806b      	strh	r3, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8004fea:	9a01      	ldr	r2, [sp, #4]
 8004fec:	0213      	lsls	r3, r2, #8
 8004fee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ff2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8004ff6:	0a11      	lsrs	r1, r2, #8
 8004ff8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8004ffc:	430b      	orrs	r3, r1
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8004ffe:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005002:	606b      	str	r3, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005004:	9b02      	ldr	r3, [sp, #8]
 8005006:	b2da      	uxtb	r2, r3
 8005008:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800500a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800500e:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005010:	f3c3 5203 	ubfx	r2, r3, #20, #4
 8005014:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005016:	0c1b      	lsrs	r3, r3, #16
 8005018:	9a03      	ldr	r2, [sp, #12]
 800501a:	b2d1      	uxtb	r1, r2
 800501c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005020:	430b      	orrs	r3, r1
 8005022:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005024:	f3c2 2385 	ubfx	r3, r2, #10, #6
 8005028:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800502a:	f3c2 2301 	ubfx	r3, r2, #8, #2
 800502e:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005030:	f3c2 1303 	ubfx	r3, r2, #4, #4
 8005034:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005036:	f002 020f 	and.w	r2, r2, #15
 800503a:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800503c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8005040:	74ab      	strb	r3, [r5, #18]
  HAL_StatusTypeDef status = HAL_OK;
 8005042:	2500      	movs	r5, #0
 8005044:	e7b4      	b.n	8004fb0 <HAL_SD_GetCardStatus+0x2c>
    return HAL_ERROR;
 8005046:	2501      	movs	r5, #1
}
 8005048:	4628      	mov	r0, r5
 800504a:	b011      	add	sp, #68	; 0x44
 800504c:	bd30      	pop	{r4, r5, pc}
 800504e:	bf00      	nop
 8005050:	1fe00fff 	.word	0x1fe00fff

08005054 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005054:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005056:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005058:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800505a:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800505c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800505e:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005060:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005062:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005064:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005066:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005068:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800506a:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800506c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800506e:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005070:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005072:	61cb      	str	r3, [r1, #28]
}
 8005074:	2000      	movs	r0, #0
 8005076:	4770      	bx	lr

08005078 <HAL_SD_ConfigWideBusOperation>:
{
 8005078:	b530      	push	{r4, r5, lr}
 800507a:	b089      	sub	sp, #36	; 0x24
 800507c:	4604      	mov	r4, r0
 800507e:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8005080:	2303      	movs	r3, #3
 8005082:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 8005086:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005088:	2b03      	cmp	r3, #3
 800508a:	d01c      	beq.n	80050c6 <HAL_SD_ConfigWideBusOperation+0x4e>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800508c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005090:	d008      	beq.n	80050a4 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8005092:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005096:	d00a      	beq.n	80050ae <HAL_SD_ConfigWideBusOperation+0x36>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8005098:	b179      	cbz	r1, 80050ba <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800509a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800509c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050a0:	6343      	str	r3, [r0, #52]	; 0x34
 80050a2:	e014      	b.n	80050ce <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80050a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80050a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050aa:	6343      	str	r3, [r0, #52]	; 0x34
 80050ac:	e00f      	b.n	80050ce <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 80050ae:	f7ff fb3b 	bl	8004728 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 80050b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050b4:	4303      	orrs	r3, r0
 80050b6:	6363      	str	r3, [r4, #52]	; 0x34
 80050b8:	e009      	b.n	80050ce <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 80050ba:	f7ff fb5c 	bl	8004776 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 80050be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050c0:	4303      	orrs	r3, r0
 80050c2:	6363      	str	r3, [r4, #52]	; 0x34
 80050c4:	e003      	b.n	80050ce <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80050c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80050c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050cc:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80050ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050d0:	b1b3      	cbz	r3, 8005100 <HAL_SD_ConfigWideBusOperation+0x88>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	4a39      	ldr	r2, [pc, #228]	; (80051bc <HAL_SD_ConfigWideBusOperation+0x144>)
 80050d6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80050d8:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80050da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050de:	6820      	ldr	r0, [r4, #0]
 80050e0:	f000 fb32 	bl	8005748 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80050e4:	b130      	cbz	r0, 80050f4 <HAL_SD_ConfigWideBusOperation+0x7c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	4934      	ldr	r1, [pc, #208]	; (80051bc <HAL_SD_ConfigWideBusOperation+0x144>)
 80050ea:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80050ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050ee:	4303      	orrs	r3, r0
 80050f0:	6363      	str	r3, [r4, #52]	; 0x34
    status = HAL_ERROR;
 80050f2:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 80050f4:	2301      	movs	r3, #1
 80050f6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 80050fa:	4628      	mov	r0, r5
 80050fc:	b009      	add	sp, #36	; 0x24
 80050fe:	bd30      	pop	{r4, r5, pc}
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005100:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005104:	f7fe fe58 	bl	8003db8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 8005108:	4602      	mov	r2, r0
 800510a:	2800      	cmp	r0, #0
 800510c:	d050      	beq.n	80051b0 <HAL_SD_ConfigWideBusOperation+0x138>
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800510e:	6863      	ldr	r3, [r4, #4]
 8005110:	9303      	str	r3, [sp, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005112:	68a3      	ldr	r3, [r4, #8]
 8005114:	9304      	str	r3, [sp, #16]
      Init.BusWide             = WideMode;
 8005116:	9505      	str	r5, [sp, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005118:	6923      	ldr	r3, [r4, #16]
 800511a:	9306      	str	r3, [sp, #24]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800511c:	6961      	ldr	r1, [r4, #20]
 800511e:	4b28      	ldr	r3, [pc, #160]	; (80051c0 <HAL_SD_ConfigWideBusOperation+0x148>)
 8005120:	fba3 0302 	umull	r0, r3, r3, r2
 8005124:	0e18      	lsrs	r0, r3, #24
 8005126:	ebb1 6f13 	cmp.w	r1, r3, lsr #24
 800512a:	d30c      	bcc.n	8005146 <HAL_SD_ConfigWideBusOperation+0xce>
        Init.ClockDiv = hsd->Init.ClockDiv;
 800512c:	9107      	str	r1, [sp, #28]
      (void)SDMMC_Init(hsd->Instance, Init);
 800512e:	ab08      	add	r3, sp, #32
 8005130:	e913 0003 	ldmdb	r3, {r0, r1}
 8005134:	e88d 0003 	stmia.w	sp, {r0, r1}
 8005138:	ab03      	add	r3, sp, #12
 800513a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800513c:	6820      	ldr	r0, [r4, #0]
 800513e:	f000 f9eb 	bl	8005518 <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8005142:	2500      	movs	r5, #0
 8005144:	e7c9      	b.n	80050da <HAL_SD_ConfigWideBusOperation+0x62>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005146:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800514c:	d008      	beq.n	8005160 <HAL_SD_ConfigWideBusOperation+0xe8>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800514e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005152:	d007      	beq.n	8005164 <HAL_SD_ConfigWideBusOperation+0xec>
        if (hsd->Init.ClockDiv == 0U)
 8005154:	bb11      	cbnz	r1, 800519c <HAL_SD_ConfigWideBusOperation+0x124>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8005156:	4b1b      	ldr	r3, [pc, #108]	; (80051c4 <HAL_SD_ConfigWideBusOperation+0x14c>)
 8005158:	429a      	cmp	r2, r3
 800515a:	d91d      	bls.n	8005198 <HAL_SD_ConfigWideBusOperation+0x120>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800515c:	9007      	str	r0, [sp, #28]
 800515e:	e7e6      	b.n	800512e <HAL_SD_ConfigWideBusOperation+0xb6>
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005160:	9107      	str	r1, [sp, #28]
 8005162:	e7e4      	b.n	800512e <HAL_SD_ConfigWideBusOperation+0xb6>
        if (hsd->Init.ClockDiv == 0U)
 8005164:	b951      	cbnz	r1, 800517c <HAL_SD_ConfigWideBusOperation+0x104>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8005166:	4b18      	ldr	r3, [pc, #96]	; (80051c8 <HAL_SD_ConfigWideBusOperation+0x150>)
 8005168:	429a      	cmp	r2, r3
 800516a:	d905      	bls.n	8005178 <HAL_SD_ConfigWideBusOperation+0x100>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800516c:	4b14      	ldr	r3, [pc, #80]	; (80051c0 <HAL_SD_ConfigWideBusOperation+0x148>)
 800516e:	fba3 2302 	umull	r2, r3, r3, r2
 8005172:	0e5b      	lsrs	r3, r3, #25
 8005174:	9307      	str	r3, [sp, #28]
 8005176:	e7da      	b.n	800512e <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005178:	9107      	str	r1, [sp, #28]
 800517a:	e7d8      	b.n	800512e <HAL_SD_ConfigWideBusOperation+0xb6>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800517c:	004b      	lsls	r3, r1, #1
 800517e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005182:	4811      	ldr	r0, [pc, #68]	; (80051c8 <HAL_SD_ConfigWideBusOperation+0x150>)
 8005184:	4283      	cmp	r3, r0
 8005186:	d905      	bls.n	8005194 <HAL_SD_ConfigWideBusOperation+0x11c>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005188:	4b0d      	ldr	r3, [pc, #52]	; (80051c0 <HAL_SD_ConfigWideBusOperation+0x148>)
 800518a:	fba3 2302 	umull	r2, r3, r3, r2
 800518e:	0e5b      	lsrs	r3, r3, #25
 8005190:	9307      	str	r3, [sp, #28]
 8005192:	e7cc      	b.n	800512e <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005194:	9107      	str	r1, [sp, #28]
 8005196:	e7ca      	b.n	800512e <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005198:	9107      	str	r1, [sp, #28]
 800519a:	e7c8      	b.n	800512e <HAL_SD_ConfigWideBusOperation+0xb6>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800519c:	004b      	lsls	r3, r1, #1
 800519e:	fbb2 f2f3 	udiv	r2, r2, r3
 80051a2:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <HAL_SD_ConfigWideBusOperation+0x14c>)
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d901      	bls.n	80051ac <HAL_SD_ConfigWideBusOperation+0x134>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80051a8:	9007      	str	r0, [sp, #28]
 80051aa:	e7c0      	b.n	800512e <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 80051ac:	9107      	str	r1, [sp, #28]
 80051ae:	e7be      	b.n	800512e <HAL_SD_ConfigWideBusOperation+0xb6>
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80051b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051b6:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 80051b8:	2501      	movs	r5, #1
 80051ba:	e78e      	b.n	80050da <HAL_SD_ConfigWideBusOperation+0x62>
 80051bc:	1fe00fff 	.word	0x1fe00fff
 80051c0:	55e63b89 	.word	0x55e63b89
 80051c4:	017d7840 	.word	0x017d7840
 80051c8:	02faf080 	.word	0x02faf080

080051cc <HAL_SD_GetCardState>:
{
 80051cc:	b510      	push	{r4, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 80051d6:	a901      	add	r1, sp, #4
 80051d8:	f7ff faf4 	bl	80047c4 <SD_SendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 80051dc:	b110      	cbz	r0, 80051e4 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 80051de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051e0:	4303      	orrs	r3, r0
 80051e2:	6363      	str	r3, [r4, #52]	; 0x34
}
 80051e4:	9801      	ldr	r0, [sp, #4]
 80051e6:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80051ea:	b002      	add	sp, #8
 80051ec:	bd10      	pop	{r4, pc}

080051ee <HAL_SD_Init>:
{
 80051ee:	b570      	push	{r4, r5, r6, lr}
 80051f0:	b086      	sub	sp, #24
  if (hsd == NULL)
 80051f2:	2800      	cmp	r0, #0
 80051f4:	d054      	beq.n	80052a0 <HAL_SD_Init+0xb2>
 80051f6:	4604      	mov	r4, r0
  if (hsd->State == HAL_SD_STATE_RESET)
 80051f8:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80051fc:	b153      	cbz	r3, 8005214 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80051fe:	2304      	movs	r3, #4
 8005200:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005204:	4620      	mov	r0, r4
 8005206:	f7ff fe5b 	bl	8004ec0 <HAL_SD_InitCard>
 800520a:	b138      	cbz	r0, 800521c <HAL_SD_Init+0x2e>
    return HAL_ERROR;
 800520c:	2501      	movs	r5, #1
}
 800520e:	4628      	mov	r0, r5
 8005210:	b006      	add	sp, #24
 8005212:	bd70      	pop	{r4, r5, r6, pc}
    hsd->Lock = HAL_UNLOCKED;
 8005214:	7603      	strb	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 8005216:	f7fb fecd 	bl	8000fb4 <HAL_SD_MspInit>
 800521a:	e7f0      	b.n	80051fe <HAL_SD_Init+0x10>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800521c:	a901      	add	r1, sp, #4
 800521e:	4620      	mov	r0, r4
 8005220:	f7ff feb0 	bl	8004f84 <HAL_SD_GetCardStatus>
 8005224:	2800      	cmp	r0, #0
 8005226:	d13d      	bne.n	80052a4 <HAL_SD_Init+0xb6>
  speedgrade = CardStatus.UhsSpeedGrade;
 8005228:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800522c:	b2da      	uxtb	r2, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 800522e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8005232:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005234:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005236:	2901      	cmp	r1, #1
 8005238:	d00b      	beq.n	8005252 <HAL_SD_Init+0x64>
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800523a:	2901      	cmp	r1, #1
 800523c:	d00f      	beq.n	800525e <HAL_SD_Init+0x70>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800523e:	2300      	movs	r3, #0
 8005240:	65a3      	str	r3, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005242:	68e1      	ldr	r1, [r4, #12]
 8005244:	4620      	mov	r0, r4
 8005246:	f7ff ff17 	bl	8005078 <HAL_SD_ConfigWideBusOperation>
 800524a:	4605      	mov	r5, r0
 800524c:	b158      	cbz	r0, 8005266 <HAL_SD_Init+0x78>
    return HAL_ERROR;
 800524e:	2501      	movs	r5, #1
 8005250:	e7dd      	b.n	800520e <HAL_SD_Init+0x20>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005252:	4313      	orrs	r3, r2
 8005254:	d0f1      	beq.n	800523a <HAL_SD_Init+0x4c>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800525a:	65a3      	str	r3, [r4, #88]	; 0x58
 800525c:	e7f1      	b.n	8005242 <HAL_SD_Init+0x54>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800525e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005262:	65a3      	str	r3, [r4, #88]	; 0x58
 8005264:	e7ed      	b.n	8005242 <HAL_SD_Init+0x54>
  tickstart = HAL_GetTick();
 8005266:	f7fc f8a1 	bl	80013ac <HAL_GetTick>
 800526a:	4606      	mov	r6, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800526c:	4620      	mov	r0, r4
 800526e:	f7ff ffad 	bl	80051cc <HAL_SD_GetCardState>
 8005272:	2804      	cmp	r0, #4
 8005274:	d00d      	beq.n	8005292 <HAL_SD_Init+0xa4>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005276:	f7fc f899 	bl	80013ac <HAL_GetTick>
 800527a:	1b80      	subs	r0, r0, r6
 800527c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005280:	d1f4      	bne.n	800526c <HAL_SD_Init+0x7e>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005282:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005286:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005288:	2301      	movs	r3, #1
 800528a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 800528e:	2503      	movs	r5, #3
 8005290:	e7bd      	b.n	800520e <HAL_SD_Init+0x20>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005292:	2300      	movs	r3, #0
 8005294:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005296:	62e3      	str	r3, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
 8005298:	2301      	movs	r3, #1
 800529a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800529e:	e7b6      	b.n	800520e <HAL_SD_Init+0x20>
    return HAL_ERROR;
 80052a0:	2501      	movs	r5, #1
 80052a2:	e7b4      	b.n	800520e <HAL_SD_Init+0x20>
    return HAL_ERROR;
 80052a4:	2501      	movs	r5, #1
 80052a6:	e7b2      	b.n	800520e <HAL_SD_Init+0x20>

080052a8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80052a8:	4770      	bx	lr

080052aa <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80052aa:	4770      	bx	lr

080052ac <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80052ac:	4770      	bx	lr

080052ae <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80052ae:	4770      	bx	lr

080052b0 <HAL_SD_IRQHandler>:
{
 80052b0:	b538      	push	{r3, r4, r5, lr}
 80052b2:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 80052b4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80052b6:	6803      	ldr	r3, [r0, #0]
 80052b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ba:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80052be:	d002      	beq.n	80052c6 <HAL_SD_IRQHandler+0x16>
 80052c0:	f015 0f08 	tst.w	r5, #8
 80052c4:	d12a      	bne.n	800531c <HAL_SD_IRQHandler+0x6c>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80052c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052c8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80052cc:	d067      	beq.n	800539e <HAL_SD_IRQHandler+0xee>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80052ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052d2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80052d4:	6822      	ldr	r2, [r4, #0]
 80052d6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80052d8:	4b7e      	ldr	r3, [pc, #504]	; (80054d4 <HAL_SD_IRQHandler+0x224>)
 80052da:	400b      	ands	r3, r1
 80052dc:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80052de:	6822      	ldr	r2, [r4, #0]
 80052e0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80052e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052e6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80052e8:	6822      	ldr	r2, [r4, #0]
 80052ea:	68d3      	ldr	r3, [r2, #12]
 80052ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052f0:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 80052f2:	f015 0f08 	tst.w	r5, #8
 80052f6:	d025      	beq.n	8005344 <HAL_SD_IRQHandler+0x94>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80052f8:	f015 0f22 	tst.w	r5, #34	; 0x22
 80052fc:	d111      	bne.n	8005322 <HAL_SD_IRQHandler+0x72>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	4a75      	ldr	r2, [pc, #468]	; (80054d8 <HAL_SD_IRQHandler+0x228>)
 8005302:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005304:	2301      	movs	r3, #1
 8005306:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800530a:	2300      	movs	r3, #0
 800530c:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800530e:	f015 0f03 	tst.w	r5, #3
 8005312:	d013      	beq.n	800533c <HAL_SD_IRQHandler+0x8c>
        HAL_SD_RxCpltCallback(hsd);
 8005314:	4620      	mov	r0, r4
 8005316:	f000 fcef 	bl	8005cf8 <HAL_SD_RxCpltCallback>
 800531a:	e001      	b.n	8005320 <HAL_SD_IRQHandler+0x70>
    SD_Read_IT(hsd);
 800531c:	f7ff f8b8 	bl	8004490 <SD_Read_IT>
}
 8005320:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005322:	6820      	ldr	r0, [r4, #0]
 8005324:	f000 fa8e 	bl	8005844 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8005328:	4603      	mov	r3, r0
 800532a:	2800      	cmp	r0, #0
 800532c:	d0e7      	beq.n	80052fe <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 800532e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005330:	4313      	orrs	r3, r2
 8005332:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8005334:	4620      	mov	r0, r4
 8005336:	f7ff fc67 	bl	8004c08 <HAL_SD_ErrorCallback>
 800533a:	e7e0      	b.n	80052fe <HAL_SD_IRQHandler+0x4e>
        HAL_SD_TxCpltCallback(hsd);
 800533c:	4620      	mov	r0, r4
 800533e:	f000 fcd6 	bl	8005cee <HAL_SD_TxCpltCallback>
 8005342:	e7ed      	b.n	8005320 <HAL_SD_IRQHandler+0x70>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8005344:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005348:	d0ea      	beq.n	8005320 <HAL_SD_IRQHandler+0x70>
      hsd->Instance->DLEN = 0;
 800534a:	6822      	ldr	r2, [r4, #0]
 800534c:	2300      	movs	r3, #0
 800534e:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8005350:	6822      	ldr	r2, [r4, #0]
 8005352:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005354:	6822      	ldr	r2, [r4, #0]
 8005356:	6513      	str	r3, [r2, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005358:	f015 0f22 	tst.w	r5, #34	; 0x22
 800535c:	d10e      	bne.n	800537c <HAL_SD_IRQHandler+0xcc>
      hsd->State = HAL_SD_STATE_READY;
 800535e:	2301      	movs	r3, #1
 8005360:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005364:	2300      	movs	r3, #0
 8005366:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005368:	f015 0f30 	tst.w	r5, #48	; 0x30
 800536c:	d113      	bne.n	8005396 <HAL_SD_IRQHandler+0xe6>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800536e:	f015 0f03 	tst.w	r5, #3
 8005372:	d0d5      	beq.n	8005320 <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 8005374:	4620      	mov	r0, r4
 8005376:	f000 fcbf 	bl	8005cf8 <HAL_SD_RxCpltCallback>
 800537a:	e7d1      	b.n	8005320 <HAL_SD_IRQHandler+0x70>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800537c:	6820      	ldr	r0, [r4, #0]
 800537e:	f000 fa61 	bl	8005844 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8005382:	4603      	mov	r3, r0
 8005384:	2800      	cmp	r0, #0
 8005386:	d0ea      	beq.n	800535e <HAL_SD_IRQHandler+0xae>
          hsd->ErrorCode |= errorstate;
 8005388:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800538a:	4313      	orrs	r3, r2
 800538c:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800538e:	4620      	mov	r0, r4
 8005390:	f7ff fc3a 	bl	8004c08 <HAL_SD_ErrorCallback>
 8005394:	e7e3      	b.n	800535e <HAL_SD_IRQHandler+0xae>
        HAL_SD_TxCpltCallback(hsd);
 8005396:	4620      	mov	r0, r4
 8005398:	f000 fca9 	bl	8005cee <HAL_SD_TxCpltCallback>
 800539c:	e7e7      	b.n	800536e <HAL_SD_IRQHandler+0xbe>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800539e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80053a4:	d002      	beq.n	80053ac <HAL_SD_IRQHandler+0xfc>
 80053a6:	f015 0f08 	tst.w	r5, #8
 80053aa:	d162      	bne.n	8005472 <HAL_SD_IRQHandler+0x1c2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80053ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053ae:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 80053b2:	d06b      	beq.n	800548c <HAL_SD_IRQHandler+0x1dc>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80053b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b6:	f012 0f02 	tst.w	r2, #2
 80053ba:	d003      	beq.n	80053c4 <HAL_SD_IRQHandler+0x114>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80053bc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80053be:	f042 0202 	orr.w	r2, r2, #2
 80053c2:	6362      	str	r2, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80053c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c6:	f012 0f08 	tst.w	r2, #8
 80053ca:	d003      	beq.n	80053d4 <HAL_SD_IRQHandler+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80053cc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80053ce:	f042 0208 	orr.w	r2, r2, #8
 80053d2:	6362      	str	r2, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80053d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053d6:	f012 0f20 	tst.w	r2, #32
 80053da:	d003      	beq.n	80053e4 <HAL_SD_IRQHandler+0x134>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80053dc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80053de:	f042 0220 	orr.w	r2, r2, #32
 80053e2:	6362      	str	r2, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80053e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053e6:	f012 0f10 	tst.w	r2, #16
 80053ea:	d003      	beq.n	80053f4 <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80053ec:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80053ee:	f042 0210 	orr.w	r2, r2, #16
 80053f2:	6362      	str	r2, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80053f4:	4a38      	ldr	r2, [pc, #224]	; (80054d8 <HAL_SD_IRQHandler+0x228>)
 80053f6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80053f8:	6822      	ldr	r2, [r4, #0]
 80053fa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80053fc:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8005400:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005402:	6822      	ldr	r2, [r4, #0]
 8005404:	68d3      	ldr	r3, [r2, #12]
 8005406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800540a:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800540c:	6822      	ldr	r2, [r4, #0]
 800540e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005410:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005414:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8005416:	6822      	ldr	r2, [r4, #0]
 8005418:	68d3      	ldr	r3, [r2, #12]
 800541a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541e:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005420:	6820      	ldr	r0, [r4, #0]
 8005422:	f000 fa0f 	bl	8005844 <SDMMC_CmdStopTransfer>
 8005426:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005428:	4303      	orrs	r3, r0
 800542a:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800542c:	6822      	ldr	r2, [r4, #0]
 800542e:	68d3      	ldr	r3, [r2, #12]
 8005430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005434:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800543c:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800543e:	f015 0f08 	tst.w	r5, #8
 8005442:	d11a      	bne.n	800547a <HAL_SD_IRQHandler+0x1ca>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8005444:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005448:	f43f af6a 	beq.w	8005320 <HAL_SD_IRQHandler+0x70>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800544c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800544e:	2b00      	cmp	r3, #0
 8005450:	f43f af66 	beq.w	8005320 <HAL_SD_IRQHandler+0x70>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005454:	6822      	ldr	r2, [r4, #0]
 8005456:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8005458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800545c:	63d3      	str	r3, [r2, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	2200      	movs	r2, #0
 8005462:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8005464:	2301      	movs	r3, #1
 8005466:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800546a:	4620      	mov	r0, r4
 800546c:	f7ff fbcc 	bl	8004c08 <HAL_SD_ErrorCallback>
 8005470:	e756      	b.n	8005320 <HAL_SD_IRQHandler+0x70>
    SD_Write_IT(hsd);
 8005472:	4620      	mov	r0, r4
 8005474:	f7ff f82a 	bl	80044cc <SD_Write_IT>
 8005478:	e752      	b.n	8005320 <HAL_SD_IRQHandler+0x70>
      hsd->State = HAL_SD_STATE_READY;
 800547a:	2301      	movs	r3, #1
 800547c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005480:	2300      	movs	r3, #0
 8005482:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8005484:	4620      	mov	r0, r4
 8005486:	f7ff fbbf 	bl	8004c08 <HAL_SD_ErrorCallback>
 800548a:	e749      	b.n	8005320 <HAL_SD_IRQHandler+0x70>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800548c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800548e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8005492:	f43f af45 	beq.w	8005320 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8005496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800549a:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a0:	f013 0f04 	tst.w	r3, #4
 80054a4:	d10a      	bne.n	80054bc <HAL_SD_IRQHandler+0x20c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80054a6:	f015 0f20 	tst.w	r5, #32
 80054aa:	d003      	beq.n	80054b4 <HAL_SD_IRQHandler+0x204>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80054ac:	4620      	mov	r0, r4
 80054ae:	f7ff fefe 	bl	80052ae <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 80054b2:	e735      	b.n	8005320 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80054b4:	4620      	mov	r0, r4
 80054b6:	f7ff fef8 	bl	80052aa <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 80054ba:	e731      	b.n	8005320 <HAL_SD_IRQHandler+0x70>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80054bc:	f015 0f20 	tst.w	r5, #32
 80054c0:	d003      	beq.n	80054ca <HAL_SD_IRQHandler+0x21a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80054c2:	4620      	mov	r0, r4
 80054c4:	f7ff fef2 	bl	80052ac <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 80054c8:	e72a      	b.n	8005320 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80054ca:	4620      	mov	r0, r4
 80054cc:	f7ff feec 	bl	80052a8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80054d0:	e726      	b.n	8005320 <HAL_SD_IRQHandler+0x70>
 80054d2:	bf00      	nop
 80054d4:	ffff3ec5 	.word	0xffff3ec5
 80054d8:	18000f3a 	.word	0x18000f3a

080054dc <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80054dc:	4b0b      	ldr	r3, [pc, #44]	; (800550c <SDMMC_GetCmdError+0x30>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a0b      	ldr	r2, [pc, #44]	; (8005510 <SDMMC_GetCmdError+0x34>)
 80054e2:	fba2 2303 	umull	r2, r3, r2, r3
 80054e6:	0a5b      	lsrs	r3, r3, #9
 80054e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ec:	fb02 f303 	mul.w	r3, r2, r3

  do
  {
    if (count-- == 0U)
 80054f0:	461a      	mov	r2, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b13a      	cbz	r2, 8005506 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80054f6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80054f8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80054fc:	d0f8      	beq.n	80054f0 <SDMMC_GetCmdError+0x14>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80054fe:	4b05      	ldr	r3, [pc, #20]	; (8005514 <SDMMC_GetCmdError+0x38>)
 8005500:	6383      	str	r3, [r0, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8005502:	2000      	movs	r0, #0
 8005504:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8005506:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800550a:	4770      	bx	lr
 800550c:	20000000 	.word	0x20000000
 8005510:	10624dd3 	.word	0x10624dd3
 8005514:	002000c5 	.word	0x002000c5

08005518 <SDMMC_Init>:
{
 8005518:	b084      	sub	sp, #16
 800551a:	f10d 0c04 	add.w	ip, sp, #4
 800551e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 8005522:	460b      	mov	r3, r1
 8005524:	4313      	orrs	r3, r2
             Init.BusWide             | \
 8005526:	9a03      	ldr	r2, [sp, #12]
             Init.ClockPowerSave      | \
 8005528:	4313      	orrs	r3, r2
             Init.HardwareFlowControl | \
 800552a:	9a04      	ldr	r2, [sp, #16]
             Init.BusWide             | \
 800552c:	4313      	orrs	r3, r2
             Init.ClockDiv
 800552e:	9a05      	ldr	r2, [sp, #20]
             Init.HardwareFlowControl | \
 8005530:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8005532:	6841      	ldr	r1, [r0, #4]
 8005534:	4a03      	ldr	r2, [pc, #12]	; (8005544 <SDMMC_Init+0x2c>)
 8005536:	400a      	ands	r2, r1
 8005538:	4313      	orrs	r3, r2
 800553a:	6043      	str	r3, [r0, #4]
}
 800553c:	2000      	movs	r0, #0
 800553e:	b004      	add	sp, #16
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	ffc02c00 	.word	0xffc02c00

08005548 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8005548:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800554c:	4770      	bx	lr

0800554e <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800554e:	680b      	ldr	r3, [r1, #0]
 8005550:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8005554:	2000      	movs	r0, #0
 8005556:	4770      	bx	lr

08005558 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8005558:	6803      	ldr	r3, [r0, #0]
 800555a:	f043 0303 	orr.w	r3, r3, #3
 800555e:	6003      	str	r3, [r0, #0]
}
 8005560:	2000      	movs	r0, #0
 8005562:	4770      	bx	lr

08005564 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005564:	6800      	ldr	r0, [r0, #0]
}
 8005566:	f000 0003 	and.w	r0, r0, #3
 800556a:	4770      	bx	lr

0800556c <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 800556c:	680b      	ldr	r3, [r1, #0]
 800556e:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8005570:	684b      	ldr	r3, [r1, #4]
                       Command->Response         | \
 8005572:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8005574:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt | \
 8005576:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         | \
 8005578:	4313      	orrs	r3, r2
                       Command->CPSM);
 800557a:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt | \
 800557c:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800557e:	68c1      	ldr	r1, [r0, #12]
 8005580:	4a02      	ldr	r2, [pc, #8]	; (800558c <SDMMC_SendCommand+0x20>)
 8005582:	400a      	ands	r2, r1
 8005584:	4313      	orrs	r3, r2
 8005586:	60c3      	str	r3, [r0, #12]
}
 8005588:	2000      	movs	r0, #0
 800558a:	4770      	bx	lr
 800558c:	fffee0c0 	.word	0xfffee0c0

08005590 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 8005590:	6900      	ldr	r0, [r0, #16]
}
 8005592:	b2c0      	uxtb	r0, r0
 8005594:	4770      	bx	lr

08005596 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005596:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8005598:	5840      	ldr	r0, [r0, r1]
}
 800559a:	4770      	bx	lr

0800559c <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800559c:	680b      	ldr	r3, [r1, #0]
 800559e:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 80055a0:	684b      	ldr	r3, [r1, #4]
 80055a2:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80055a4:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   | \
 80055a6:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80055a8:	4313      	orrs	r3, r2
                       Data->TransferMode  | \
 80055aa:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   | \
 80055ac:	4313      	orrs	r3, r2
                       Data->DPSM);
 80055ae:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  | \
 80055b0:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80055b2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80055b4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055b8:	4313      	orrs	r3, r2
 80055ba:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80055bc:	2000      	movs	r0, #0
 80055be:	4770      	bx	lr

080055c0 <SDMMC_CmdGoIdleState>:
{
 80055c0:	b510      	push	{r4, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80055ca:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80055cc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055ce:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055d4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055d6:	a901      	add	r1, sp, #4
 80055d8:	f7ff ffc8 	bl	800556c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80055dc:	4620      	mov	r0, r4
 80055de:	f7ff ff7d 	bl	80054dc <SDMMC_GetCmdError>
}
 80055e2:	b006      	add	sp, #24
 80055e4:	bd10      	pop	{r4, pc}
	...

080055e8 <SDMMC_GetCmdResp1>:
{
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	4605      	mov	r5, r0
 80055ec:	460e      	mov	r6, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80055ee:	4b51      	ldr	r3, [pc, #324]	; (8005734 <SDMMC_GetCmdResp1+0x14c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4951      	ldr	r1, [pc, #324]	; (8005738 <SDMMC_GetCmdResp1+0x150>)
 80055f4:	fba1 1303 	umull	r1, r3, r1, r3
 80055f8:	0a5b      	lsrs	r3, r3, #9
 80055fa:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 80055fe:	4613      	mov	r3, r2
 8005600:	3a01      	subs	r2, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d05e      	beq.n	80056c4 <SDMMC_GetCmdResp1+0xdc>
    sta_reg = SDMMCx->STA;
 8005606:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8005608:	4b4c      	ldr	r3, [pc, #304]	; (800573c <SDMMC_GetCmdResp1+0x154>)
 800560a:	4023      	ands	r3, r4
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0f6      	beq.n	80055fe <SDMMC_GetCmdResp1+0x16>
 8005610:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 8005614:	d1f3      	bne.n	80055fe <SDMMC_GetCmdResp1+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005616:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005618:	f013 0f04 	tst.w	r3, #4
 800561c:	d106      	bne.n	800562c <SDMMC_GetCmdResp1+0x44>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800561e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005620:	f013 0f01 	tst.w	r3, #1
 8005624:	d005      	beq.n	8005632 <SDMMC_GetCmdResp1+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005626:	2001      	movs	r0, #1
 8005628:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800562a:	e04d      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800562c:	2004      	movs	r0, #4
 800562e:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005630:	e04a      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005632:	4b43      	ldr	r3, [pc, #268]	; (8005740 <SDMMC_GetCmdResp1+0x158>)
 8005634:	63ab      	str	r3, [r5, #56]	; 0x38
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005636:	4628      	mov	r0, r5
 8005638:	f7ff ffaa 	bl	8005590 <SDMMC_GetCommandResponse>
 800563c:	42b0      	cmp	r0, r6
 800563e:	d001      	beq.n	8005644 <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005640:	2001      	movs	r0, #1
 8005642:	e041      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005644:	2100      	movs	r1, #0
 8005646:	4628      	mov	r0, r5
 8005648:	f7ff ffa5 	bl	8005596 <SDMMC_GetResponse>
 800564c:	4603      	mov	r3, r0
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800564e:	483d      	ldr	r0, [pc, #244]	; (8005744 <SDMMC_GetCmdResp1+0x15c>)
 8005650:	4018      	ands	r0, r3
 8005652:	b3c8      	cbz	r0, 80056c8 <SDMMC_GetCmdResp1+0xe0>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005654:	2b00      	cmp	r3, #0
 8005656:	db38      	blt.n	80056ca <SDMMC_GetCmdResp1+0xe2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005658:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800565c:	d138      	bne.n	80056d0 <SDMMC_GetCmdResp1+0xe8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800565e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005662:	d137      	bne.n	80056d4 <SDMMC_GetCmdResp1+0xec>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005664:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005668:	d136      	bne.n	80056d8 <SDMMC_GetCmdResp1+0xf0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800566a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800566e:	d136      	bne.n	80056de <SDMMC_GetCmdResp1+0xf6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005670:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8005674:	d136      	bne.n	80056e4 <SDMMC_GetCmdResp1+0xfc>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005676:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800567a:	d136      	bne.n	80056ea <SDMMC_GetCmdResp1+0x102>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800567c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005680:	d136      	bne.n	80056f0 <SDMMC_GetCmdResp1+0x108>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005682:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005686:	d136      	bne.n	80056f6 <SDMMC_GetCmdResp1+0x10e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005688:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800568c:	d136      	bne.n	80056fc <SDMMC_GetCmdResp1+0x114>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800568e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005692:	d136      	bne.n	8005702 <SDMMC_GetCmdResp1+0x11a>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005694:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005698:	d136      	bne.n	8005708 <SDMMC_GetCmdResp1+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800569a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800569e:	d136      	bne.n	800570e <SDMMC_GetCmdResp1+0x126>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80056a0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80056a4:	d136      	bne.n	8005714 <SDMMC_GetCmdResp1+0x12c>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80056a6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80056aa:	d136      	bne.n	800571a <SDMMC_GetCmdResp1+0x132>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80056ac:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80056b0:	d136      	bne.n	8005720 <SDMMC_GetCmdResp1+0x138>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80056b2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80056b6:	d136      	bne.n	8005726 <SDMMC_GetCmdResp1+0x13e>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80056b8:	f013 0f08 	tst.w	r3, #8
 80056bc:	d036      	beq.n	800572c <SDMMC_GetCmdResp1+0x144>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80056be:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80056c2:	e001      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
      return SDMMC_ERROR_TIMEOUT;
 80056c4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80056c8:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80056ca:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80056ce:	e7fb      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80056d0:	2040      	movs	r0, #64	; 0x40
 80056d2:	e7f9      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80056d4:	2080      	movs	r0, #128	; 0x80
 80056d6:	e7f7      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80056d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80056dc:	e7f4      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80056de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80056e2:	e7f1      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80056e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80056e8:	e7ee      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80056ea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80056ee:	e7eb      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80056f0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80056f4:	e7e8      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80056f6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80056fa:	e7e5      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80056fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005700:	e7e2      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CC_ERR;
 8005702:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005706:	e7df      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005708:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800570c:	e7dc      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800570e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005712:	e7d9      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005714:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005718:	e7d6      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800571a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800571e:	e7d3      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005720:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005724:	e7d0      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_RESET;
 8005726:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800572a:	e7cd      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800572c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005730:	e7ca      	b.n	80056c8 <SDMMC_GetCmdResp1+0xe0>
 8005732:	bf00      	nop
 8005734:	20000000 	.word	0x20000000
 8005738:	10624dd3 	.word	0x10624dd3
 800573c:	00200045 	.word	0x00200045
 8005740:	002000c5 	.word	0x002000c5
 8005744:	fdffe008 	.word	0xfdffe008

08005748 <SDMMC_CmdBlockLength>:
{
 8005748:	b530      	push	{r4, r5, lr}
 800574a:	b087      	sub	sp, #28
 800574c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800574e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005750:	2510      	movs	r5, #16
 8005752:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005758:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800575a:	2300      	movs	r3, #0
 800575c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800575e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005762:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005764:	a901      	add	r1, sp, #4
 8005766:	f7ff ff01 	bl	800556c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800576a:	f241 3288 	movw	r2, #5000	; 0x1388
 800576e:	4629      	mov	r1, r5
 8005770:	4620      	mov	r0, r4
 8005772:	f7ff ff39 	bl	80055e8 <SDMMC_GetCmdResp1>
}
 8005776:	b007      	add	sp, #28
 8005778:	bd30      	pop	{r4, r5, pc}

0800577a <SDMMC_CmdReadSingleBlock>:
{
 800577a:	b530      	push	{r4, r5, lr}
 800577c:	b087      	sub	sp, #28
 800577e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005780:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005782:	2511      	movs	r5, #17
 8005784:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005786:	f44f 7380 	mov.w	r3, #256	; 0x100
 800578a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800578c:	2300      	movs	r3, #0
 800578e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005794:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005796:	a901      	add	r1, sp, #4
 8005798:	f7ff fee8 	bl	800556c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800579c:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a0:	4629      	mov	r1, r5
 80057a2:	4620      	mov	r0, r4
 80057a4:	f7ff ff20 	bl	80055e8 <SDMMC_GetCmdResp1>
}
 80057a8:	b007      	add	sp, #28
 80057aa:	bd30      	pop	{r4, r5, pc}

080057ac <SDMMC_CmdReadMultiBlock>:
{
 80057ac:	b530      	push	{r4, r5, lr}
 80057ae:	b087      	sub	sp, #28
 80057b0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80057b2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80057b4:	2512      	movs	r5, #18
 80057b6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80057b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057bc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80057be:	2300      	movs	r3, #0
 80057c0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80057c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057c6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80057c8:	a901      	add	r1, sp, #4
 80057ca:	f7ff fecf 	bl	800556c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80057ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d2:	4629      	mov	r1, r5
 80057d4:	4620      	mov	r0, r4
 80057d6:	f7ff ff07 	bl	80055e8 <SDMMC_GetCmdResp1>
}
 80057da:	b007      	add	sp, #28
 80057dc:	bd30      	pop	{r4, r5, pc}

080057de <SDMMC_CmdWriteSingleBlock>:
{
 80057de:	b530      	push	{r4, r5, lr}
 80057e0:	b087      	sub	sp, #28
 80057e2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80057e4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80057e6:	2518      	movs	r5, #24
 80057e8:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80057ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057ee:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80057f0:	2300      	movs	r3, #0
 80057f2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80057f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057f8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80057fa:	a901      	add	r1, sp, #4
 80057fc:	f7ff feb6 	bl	800556c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005800:	f241 3288 	movw	r2, #5000	; 0x1388
 8005804:	4629      	mov	r1, r5
 8005806:	4620      	mov	r0, r4
 8005808:	f7ff feee 	bl	80055e8 <SDMMC_GetCmdResp1>
}
 800580c:	b007      	add	sp, #28
 800580e:	bd30      	pop	{r4, r5, pc}

08005810 <SDMMC_CmdWriteMultiBlock>:
{
 8005810:	b530      	push	{r4, r5, lr}
 8005812:	b087      	sub	sp, #28
 8005814:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005816:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005818:	2519      	movs	r5, #25
 800581a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800581c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005820:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005822:	2300      	movs	r3, #0
 8005824:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800582a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800582c:	a901      	add	r1, sp, #4
 800582e:	f7ff fe9d 	bl	800556c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005832:	f241 3288 	movw	r2, #5000	; 0x1388
 8005836:	4629      	mov	r1, r5
 8005838:	4620      	mov	r0, r4
 800583a:	f7ff fed5 	bl	80055e8 <SDMMC_GetCmdResp1>
}
 800583e:	b007      	add	sp, #28
 8005840:	bd30      	pop	{r4, r5, pc}
	...

08005844 <SDMMC_CmdStopTransfer>:
{
 8005844:	b530      	push	{r4, r5, lr}
 8005846:	b087      	sub	sp, #28
 8005848:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800584e:	250c      	movs	r5, #12
 8005850:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005856:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005858:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800585a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800585e:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8005860:	68c3      	ldr	r3, [r0, #12]
 8005862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005866:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8005868:	68c3      	ldr	r3, [r0, #12]
 800586a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800586e:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005870:	a901      	add	r1, sp, #4
 8005872:	f7ff fe7b 	bl	800556c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005876:	4a08      	ldr	r2, [pc, #32]	; (8005898 <SDMMC_CmdStopTransfer+0x54>)
 8005878:	4629      	mov	r1, r5
 800587a:	4620      	mov	r0, r4
 800587c:	f7ff feb4 	bl	80055e8 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8005880:	68e3      	ldr	r3, [r4, #12]
 8005882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005886:	60e3      	str	r3, [r4, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8005888:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800588c:	d001      	beq.n	8005892 <SDMMC_CmdStopTransfer+0x4e>
}
 800588e:	b007      	add	sp, #28
 8005890:	bd30      	pop	{r4, r5, pc}
    errorstate = SDMMC_ERROR_NONE;
 8005892:	2000      	movs	r0, #0
  return errorstate;
 8005894:	e7fb      	b.n	800588e <SDMMC_CmdStopTransfer+0x4a>
 8005896:	bf00      	nop
 8005898:	05f5e100 	.word	0x05f5e100

0800589c <SDMMC_CmdSelDesel>:
{
 800589c:	b530      	push	{r4, r5, lr}
 800589e:	b087      	sub	sp, #28
 80058a0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80058a2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80058a4:	2507      	movs	r5, #7
 80058a6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80058a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058ac:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058ae:	2300      	movs	r3, #0
 80058b0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058b6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058b8:	a901      	add	r1, sp, #4
 80058ba:	f7ff fe57 	bl	800556c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80058be:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c2:	4629      	mov	r1, r5
 80058c4:	4620      	mov	r0, r4
 80058c6:	f7ff fe8f 	bl	80055e8 <SDMMC_GetCmdResp1>
}
 80058ca:	b007      	add	sp, #28
 80058cc:	bd30      	pop	{r4, r5, pc}

080058ce <SDMMC_CmdAppCommand>:
{
 80058ce:	b530      	push	{r4, r5, lr}
 80058d0:	b087      	sub	sp, #28
 80058d2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80058d4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80058d6:	2537      	movs	r5, #55	; 0x37
 80058d8:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80058da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058de:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058e0:	2300      	movs	r3, #0
 80058e2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058e8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058ea:	a901      	add	r1, sp, #4
 80058ec:	f7ff fe3e 	bl	800556c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80058f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f4:	4629      	mov	r1, r5
 80058f6:	4620      	mov	r0, r4
 80058f8:	f7ff fe76 	bl	80055e8 <SDMMC_GetCmdResp1>
}
 80058fc:	b007      	add	sp, #28
 80058fe:	bd30      	pop	{r4, r5, pc}

08005900 <SDMMC_CmdBusWidth>:
{
 8005900:	b530      	push	{r4, r5, lr}
 8005902:	b087      	sub	sp, #28
 8005904:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005906:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005908:	2506      	movs	r5, #6
 800590a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800590c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005910:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005912:	2300      	movs	r3, #0
 8005914:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800591a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800591c:	a901      	add	r1, sp, #4
 800591e:	f7ff fe25 	bl	800556c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8005922:	f241 3288 	movw	r2, #5000	; 0x1388
 8005926:	4629      	mov	r1, r5
 8005928:	4620      	mov	r0, r4
 800592a:	f7ff fe5d 	bl	80055e8 <SDMMC_GetCmdResp1>
}
 800592e:	b007      	add	sp, #28
 8005930:	bd30      	pop	{r4, r5, pc}

08005932 <SDMMC_CmdSendSCR>:
{
 8005932:	b530      	push	{r4, r5, lr}
 8005934:	b087      	sub	sp, #28
 8005936:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800593c:	2533      	movs	r5, #51	; 0x33
 800593e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005944:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005946:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800594c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800594e:	a901      	add	r1, sp, #4
 8005950:	f7ff fe0c 	bl	800556c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8005954:	f241 3288 	movw	r2, #5000	; 0x1388
 8005958:	4629      	mov	r1, r5
 800595a:	4620      	mov	r0, r4
 800595c:	f7ff fe44 	bl	80055e8 <SDMMC_GetCmdResp1>
}
 8005960:	b007      	add	sp, #28
 8005962:	bd30      	pop	{r4, r5, pc}

08005964 <SDMMC_CmdSendStatus>:
{
 8005964:	b530      	push	{r4, r5, lr}
 8005966:	b087      	sub	sp, #28
 8005968:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800596a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800596c:	250d      	movs	r5, #13
 800596e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005970:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005974:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005976:	2300      	movs	r3, #0
 8005978:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800597a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800597e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005980:	a901      	add	r1, sp, #4
 8005982:	f7ff fdf3 	bl	800556c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005986:	f241 3288 	movw	r2, #5000	; 0x1388
 800598a:	4629      	mov	r1, r5
 800598c:	4620      	mov	r0, r4
 800598e:	f7ff fe2b 	bl	80055e8 <SDMMC_GetCmdResp1>
}
 8005992:	b007      	add	sp, #28
 8005994:	bd30      	pop	{r4, r5, pc}

08005996 <SDMMC_CmdStatusRegister>:
{
 8005996:	b530      	push	{r4, r5, lr}
 8005998:	b087      	sub	sp, #28
 800599a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80059a0:	250d      	movs	r5, #13
 80059a2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80059a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059a8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80059aa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80059ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059b0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80059b2:	a901      	add	r1, sp, #4
 80059b4:	f7ff fdda 	bl	800556c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80059b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059bc:	4629      	mov	r1, r5
 80059be:	4620      	mov	r0, r4
 80059c0:	f7ff fe12 	bl	80055e8 <SDMMC_GetCmdResp1>
}
 80059c4:	b007      	add	sp, #28
 80059c6:	bd30      	pop	{r4, r5, pc}

080059c8 <SDMMC_GetCmdResp2>:
{
 80059c8:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80059ca:	4b14      	ldr	r3, [pc, #80]	; (8005a1c <SDMMC_GetCmdResp2+0x54>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a14      	ldr	r2, [pc, #80]	; (8005a20 <SDMMC_GetCmdResp2+0x58>)
 80059d0:	fba2 2303 	umull	r2, r3, r2, r3
 80059d4:	0a5b      	lsrs	r3, r3, #9
 80059d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059da:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 80059de:	461a      	mov	r2, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b1ba      	cbz	r2, 8005a14 <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDMMCx->STA;
 80059e4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80059e6:	f012 0f45 	tst.w	r2, #69	; 0x45
 80059ea:	d0f8      	beq.n	80059de <SDMMC_GetCmdResp2+0x16>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80059ec:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80059f0:	d1f5      	bne.n	80059de <SDMMC_GetCmdResp2+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80059f2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80059f4:	f013 0f04 	tst.w	r3, #4
 80059f8:	d106      	bne.n	8005a08 <SDMMC_GetCmdResp2+0x40>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80059fa:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80059fc:	f010 0001 	ands.w	r0, r0, #1
 8005a00:	d105      	bne.n	8005a0e <SDMMC_GetCmdResp2+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005a02:	4b08      	ldr	r3, [pc, #32]	; (8005a24 <SDMMC_GetCmdResp2+0x5c>)
 8005a04:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8005a06:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005a08:	2004      	movs	r0, #4
 8005a0a:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a0c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005a0e:	2001      	movs	r0, #1
 8005a10:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a12:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8005a14:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	20000000 	.word	0x20000000
 8005a20:	10624dd3 	.word	0x10624dd3
 8005a24:	002000c5 	.word	0x002000c5

08005a28 <SDMMC_CmdSendCID>:
{
 8005a28:	b510      	push	{r4, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005a32:	2202      	movs	r2, #2
 8005a34:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005a36:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005a3a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a3c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a42:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a44:	a901      	add	r1, sp, #4
 8005a46:	f7ff fd91 	bl	800556c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f7ff ffbc 	bl	80059c8 <SDMMC_GetCmdResp2>
}
 8005a50:	b006      	add	sp, #24
 8005a52:	bd10      	pop	{r4, pc}

08005a54 <SDMMC_CmdSendCSD>:
{
 8005a54:	b510      	push	{r4, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8005a5a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005a5c:	2309      	movs	r3, #9
 8005a5e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005a60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005a64:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a66:	2300      	movs	r3, #0
 8005a68:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a6e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a70:	a901      	add	r1, sp, #4
 8005a72:	f7ff fd7b 	bl	800556c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005a76:	4620      	mov	r0, r4
 8005a78:	f7ff ffa6 	bl	80059c8 <SDMMC_GetCmdResp2>
}
 8005a7c:	b006      	add	sp, #24
 8005a7e:	bd10      	pop	{r4, pc}

08005a80 <SDMMC_GetCmdResp3>:
{
 8005a80:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8005a82:	4b10      	ldr	r3, [pc, #64]	; (8005ac4 <SDMMC_GetCmdResp3+0x44>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a10      	ldr	r2, [pc, #64]	; (8005ac8 <SDMMC_GetCmdResp3+0x48>)
 8005a88:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8c:	0a5b      	lsrs	r3, r3, #9
 8005a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a92:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8005a96:	461a      	mov	r2, r3
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b182      	cbz	r2, 8005abe <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDMMCx->STA;
 8005a9c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8005a9e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005aa2:	d0f8      	beq.n	8005a96 <SDMMC_GetCmdResp3+0x16>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005aa4:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8005aa8:	d1f5      	bne.n	8005a96 <SDMMC_GetCmdResp3+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005aaa:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8005aac:	f010 0004 	ands.w	r0, r0, #4
 8005ab0:	d102      	bne.n	8005ab8 <SDMMC_GetCmdResp3+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005ab2:	4b06      	ldr	r3, [pc, #24]	; (8005acc <SDMMC_GetCmdResp3+0x4c>)
 8005ab4:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8005ab6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005ab8:	2004      	movs	r0, #4
 8005aba:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005abc:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8005abe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005ac2:	4770      	bx	lr
 8005ac4:	20000000 	.word	0x20000000
 8005ac8:	10624dd3 	.word	0x10624dd3
 8005acc:	002000c5 	.word	0x002000c5

08005ad0 <SDMMC_CmdAppOperCommand>:
{
 8005ad0:	b510      	push	{r4, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8005ad6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005ad8:	2329      	movs	r3, #41	; 0x29
 8005ada:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ae0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aea:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005aec:	a901      	add	r1, sp, #4
 8005aee:	f7ff fd3d 	bl	800556c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005af2:	4620      	mov	r0, r4
 8005af4:	f7ff ffc4 	bl	8005a80 <SDMMC_GetCmdResp3>
}
 8005af8:	b006      	add	sp, #24
 8005afa:	bd10      	pop	{r4, pc}

08005afc <SDMMC_GetCmdResp6>:
{
 8005afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afe:	4605      	mov	r5, r0
 8005b00:	460e      	mov	r6, r1
 8005b02:	4617      	mov	r7, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8005b04:	4b23      	ldr	r3, [pc, #140]	; (8005b94 <SDMMC_GetCmdResp6+0x98>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a23      	ldr	r2, [pc, #140]	; (8005b98 <SDMMC_GetCmdResp6+0x9c>)
 8005b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0e:	0a5b      	lsrs	r3, r3, #9
 8005b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b14:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8005b18:	461a      	mov	r2, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b38a      	cbz	r2, 8005b82 <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDMMCx->STA;
 8005b1e:	6b6c      	ldr	r4, [r5, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8005b20:	f014 0f45 	tst.w	r4, #69	; 0x45
 8005b24:	d0f8      	beq.n	8005b18 <SDMMC_GetCmdResp6+0x1c>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005b26:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 8005b2a:	d1f5      	bne.n	8005b18 <SDMMC_GetCmdResp6+0x1c>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005b2c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005b2e:	f013 0f04 	tst.w	r3, #4
 8005b32:	d106      	bne.n	8005b42 <SDMMC_GetCmdResp6+0x46>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005b34:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005b36:	f013 0f01 	tst.w	r3, #1
 8005b3a:	d005      	beq.n	8005b48 <SDMMC_GetCmdResp6+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005b3c:	2001      	movs	r0, #1
 8005b3e:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b40:	e021      	b.n	8005b86 <SDMMC_GetCmdResp6+0x8a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005b42:	2004      	movs	r0, #4
 8005b44:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b46:	e01e      	b.n	8005b86 <SDMMC_GetCmdResp6+0x8a>
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f7ff fd21 	bl	8005590 <SDMMC_GetCommandResponse>
 8005b4e:	42b0      	cmp	r0, r6
 8005b50:	d001      	beq.n	8005b56 <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b52:	2001      	movs	r0, #1
 8005b54:	e017      	b.n	8005b86 <SDMMC_GetCmdResp6+0x8a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005b56:	4b11      	ldr	r3, [pc, #68]	; (8005b9c <SDMMC_GetCmdResp6+0xa0>)
 8005b58:	63ab      	str	r3, [r5, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f7ff fd1a 	bl	8005596 <SDMMC_GetResponse>
 8005b62:	4603      	mov	r3, r0
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8005b64:	f410 4060 	ands.w	r0, r0, #57344	; 0xe000
 8005b68:	d008      	beq.n	8005b7c <SDMMC_GetCmdResp6+0x80>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005b6a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005b6e:	d10b      	bne.n	8005b88 <SDMMC_GetCmdResp6+0x8c>
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005b70:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005b74:	d00b      	beq.n	8005b8e <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005b76:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005b7a:	e004      	b.n	8005b86 <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t)(response_r1 >> 16);
 8005b7c:	0c1b      	lsrs	r3, r3, #16
 8005b7e:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 8005b80:	e001      	b.n	8005b86 <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 8005b82:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005b88:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005b8c:	e7fb      	b.n	8005b86 <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b8e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005b92:	e7f8      	b.n	8005b86 <SDMMC_GetCmdResp6+0x8a>
 8005b94:	20000000 	.word	0x20000000
 8005b98:	10624dd3 	.word	0x10624dd3
 8005b9c:	002000c5 	.word	0x002000c5

08005ba0 <SDMMC_CmdSetRelAdd>:
{
 8005ba0:	b570      	push	{r4, r5, r6, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	4604      	mov	r4, r0
 8005ba6:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005bac:	2603      	movs	r6, #3
 8005bae:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bb4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005bb6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bbc:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005bbe:	a901      	add	r1, sp, #4
 8005bc0:	f7ff fcd4 	bl	800556c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005bc4:	462a      	mov	r2, r5
 8005bc6:	4631      	mov	r1, r6
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f7ff ff97 	bl	8005afc <SDMMC_GetCmdResp6>
}
 8005bce:	b006      	add	sp, #24
 8005bd0:	bd70      	pop	{r4, r5, r6, pc}
	...

08005bd4 <SDMMC_GetCmdResp7>:
{
 8005bd4:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8005bd6:	4b16      	ldr	r3, [pc, #88]	; (8005c30 <SDMMC_GetCmdResp7+0x5c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a16      	ldr	r2, [pc, #88]	; (8005c34 <SDMMC_GetCmdResp7+0x60>)
 8005bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005be0:	0a5b      	lsrs	r3, r3, #9
 8005be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be6:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8005bea:	461a      	mov	r2, r3
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b1e2      	cbz	r2, 8005c2a <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDMMCx->STA;
 8005bf0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8005bf2:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005bf6:	d0f8      	beq.n	8005bea <SDMMC_GetCmdResp7+0x16>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005bf8:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8005bfc:	d1f5      	bne.n	8005bea <SDMMC_GetCmdResp7+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005bfe:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005c00:	f013 0f04 	tst.w	r3, #4
 8005c04:	d10b      	bne.n	8005c1e <SDMMC_GetCmdResp7+0x4a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005c06:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005c08:	f013 0301 	ands.w	r3, r3, #1
 8005c0c:	d10a      	bne.n	8005c24 <SDMMC_GetCmdResp7+0x50>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005c0e:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8005c10:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8005c14:	d00b      	beq.n	8005c2e <SDMMC_GetCmdResp7+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005c16:	2240      	movs	r2, #64	; 0x40
 8005c18:	638a      	str	r2, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005c1e:	2004      	movs	r0, #4
 8005c20:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c22:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005c24:	2001      	movs	r0, #1
 8005c26:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c28:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8005c2a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005c2e:	4770      	bx	lr
 8005c30:	20000000 	.word	0x20000000
 8005c34:	10624dd3 	.word	0x10624dd3

08005c38 <SDMMC_CmdOperCond>:
{
 8005c38:	b510      	push	{r4, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005c3e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005c42:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005c44:	2308      	movs	r3, #8
 8005c46:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c4c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c56:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c58:	a901      	add	r1, sp, #4
 8005c5a:	f7ff fc87 	bl	800556c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f7ff ffb8 	bl	8005bd4 <SDMMC_GetCmdResp7>
}
 8005c64:	b006      	add	sp, #24
 8005c66:	bd10      	pop	{r4, pc}

08005c68 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005c68:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005c6a:	4903      	ldr	r1, [pc, #12]	; (8005c78 <MX_FATFS_Init+0x10>)
 8005c6c:	4803      	ldr	r0, [pc, #12]	; (8005c7c <MX_FATFS_Init+0x14>)
 8005c6e:	f001 ffd7 	bl	8007c20 <FATFS_LinkDriver>
 8005c72:	4b03      	ldr	r3, [pc, #12]	; (8005c80 <MX_FATFS_Init+0x18>)
 8005c74:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005c76:	bd08      	pop	{r3, pc}
 8005c78:	200006b8 	.word	0x200006b8
 8005c7c:	08007d74 	.word	0x08007d74
 8005c80:	200006bc 	.word	0x200006bc

08005c84 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8005c84:	2000      	movs	r0, #0
 8005c86:	4770      	bx	lr

08005c88 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005c88:	b500      	push	{lr}
 8005c8a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	460a      	mov	r2, r1
 8005c92:	4601      	mov	r1, r0
 8005c94:	4803      	ldr	r0, [pc, #12]	; (8005ca4 <BSP_SD_ReadBlocks+0x1c>)
 8005c96:	f7fe fdab 	bl	80047f0 <HAL_SD_ReadBlocks>
 8005c9a:	b100      	cbz	r0, 8005c9e <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8005c9c:	2001      	movs	r0, #1
  }

  return sd_state;
}
 8005c9e:	b003      	add	sp, #12
 8005ca0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ca4:	200001d8 	.word	0x200001d8

08005ca8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005ca8:	b500      	push	{lr}
 8005caa:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	460a      	mov	r2, r1
 8005cb2:	4601      	mov	r1, r0
 8005cb4:	4803      	ldr	r0, [pc, #12]	; (8005cc4 <BSP_SD_WriteBlocks+0x1c>)
 8005cb6:	f7fe fe9d 	bl	80049f4 <HAL_SD_WriteBlocks>
 8005cba:	b100      	cbz	r0, 8005cbe <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8005cbc:	2001      	movs	r0, #1
  }

  return sd_state;
}
 8005cbe:	b003      	add	sp, #12
 8005cc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005cc4:	200001d8 	.word	0x200001d8

08005cc8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005cc8:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005cca:	4803      	ldr	r0, [pc, #12]	; (8005cd8 <BSP_SD_GetCardState+0x10>)
 8005ccc:	f7ff fa7e 	bl	80051cc <HAL_SD_GetCardState>
}
 8005cd0:	3804      	subs	r0, #4
 8005cd2:	bf18      	it	ne
 8005cd4:	2001      	movne	r0, #1
 8005cd6:	bd08      	pop	{r3, pc}
 8005cd8:	200001d8 	.word	0x200001d8

08005cdc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005cdc:	b508      	push	{r3, lr}
 8005cde:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005ce0:	4801      	ldr	r0, [pc, #4]	; (8005ce8 <BSP_SD_GetCardInfo+0xc>)
 8005ce2:	f7ff f9b7 	bl	8005054 <HAL_SD_GetCardInfo>
}
 8005ce6:	bd08      	pop	{r3, pc}
 8005ce8:	200001d8 	.word	0x200001d8

08005cec <BSP_SD_WriteCpltCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{

}
 8005cec:	4770      	bx	lr

08005cee <HAL_SD_TxCpltCallback>:
{
 8005cee:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8005cf0:	f7ff fffc 	bl	8005cec <BSP_SD_WriteCpltCallback>
}
 8005cf4:	bd08      	pop	{r3, pc}

08005cf6 <BSP_SD_ReadCpltCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{

}
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_SD_RxCpltCallback>:
{
 8005cf8:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8005cfa:	f7ff fffc 	bl	8005cf6 <BSP_SD_ReadCpltCallback>
}
 8005cfe:	bd08      	pop	{r3, pc}

08005d00 <BSP_SD_Init>:
{
 8005d00:	b538      	push	{r3, r4, r5, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005d02:	f7fa fc29 	bl	8000558 <BSP_SD_IsDetected>
 8005d06:	2801      	cmp	r0, #1
 8005d08:	d002      	beq.n	8005d10 <BSP_SD_Init+0x10>
    return MSD_ERROR_SD_NOT_PRESENT;
 8005d0a:	2502      	movs	r5, #2
}
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	bd38      	pop	{r3, r4, r5, pc}
 8005d10:	4604      	mov	r4, r0
  sd_state = HAL_SD_Init(&hsd1);
 8005d12:	4807      	ldr	r0, [pc, #28]	; (8005d30 <BSP_SD_Init+0x30>)
 8005d14:	f7ff fa6b 	bl	80051ee <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8005d18:	4605      	mov	r5, r0
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	d1f6      	bne.n	8005d0c <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8005d1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d22:	4803      	ldr	r0, [pc, #12]	; (8005d30 <BSP_SD_Init+0x30>)
 8005d24:	f7ff f9a8 	bl	8005078 <HAL_SD_ConfigWideBusOperation>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	d0ef      	beq.n	8005d0c <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 8005d2c:	4625      	mov	r5, r4
 8005d2e:	e7ed      	b.n	8005d0c <BSP_SD_Init+0xc>
 8005d30:	200001d8 	.word	0x200001d8

08005d34 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005d34:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8005d36:	4b07      	ldr	r3, [pc, #28]	; (8005d54 <SD_CheckStatus+0x20>)
 8005d38:	2201      	movs	r2, #1
 8005d3a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005d3c:	f7ff ffc4 	bl	8005cc8 <BSP_SD_GetCardState>
 8005d40:	b920      	cbnz	r0, 8005d4c <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 8005d42:	4a04      	ldr	r2, [pc, #16]	; (8005d54 <SD_CheckStatus+0x20>)
 8005d44:	7813      	ldrb	r3, [r2, #0]
 8005d46:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005d4a:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8005d4c:	4b01      	ldr	r3, [pc, #4]	; (8005d54 <SD_CheckStatus+0x20>)
 8005d4e:	7818      	ldrb	r0, [r3, #0]
}
 8005d50:	bd08      	pop	{r3, pc}
 8005d52:	bf00      	nop
 8005d54:	20000010 	.word	0x20000010

08005d58 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	4604      	mov	r4, r0
Stat = STA_NOINIT;
 8005d5c:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <SD_initialize+0x24>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005d62:	f7ff ffcd 	bl	8005d00 <BSP_SD_Init>
 8005d66:	b110      	cbz	r0, 8005d6e <SD_initialize+0x16>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005d68:	4b04      	ldr	r3, [pc, #16]	; (8005d7c <SD_initialize+0x24>)
 8005d6a:	7818      	ldrb	r0, [r3, #0]
}
 8005d6c:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f7ff ffe0 	bl	8005d34 <SD_CheckStatus>
 8005d74:	4b01      	ldr	r3, [pc, #4]	; (8005d7c <SD_initialize+0x24>)
 8005d76:	7018      	strb	r0, [r3, #0]
 8005d78:	e7f6      	b.n	8005d68 <SD_initialize+0x10>
 8005d7a:	bf00      	nop
 8005d7c:	20000010 	.word	0x20000010

08005d80 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005d80:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 8005d82:	f7ff ffd7 	bl	8005d34 <SD_CheckStatus>
}
 8005d86:	bd08      	pop	{r3, pc}

08005d88 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005d88:	b508      	push	{r3, lr}
 8005d8a:	4608      	mov	r0, r1
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d94:	f7ff ff78 	bl	8005c88 <BSP_SD_ReadBlocks>
 8005d98:	b930      	cbnz	r0, 8005da8 <SD_read+0x20>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005d9a:	f7ff ff95 	bl	8005cc8 <BSP_SD_GetCardState>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2800      	cmp	r0, #0
 8005da2:	d1fa      	bne.n	8005d9a <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e7fb      	b.n	8005da4 <SD_read+0x1c>

08005dac <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005dac:	b508      	push	{r3, lr}
 8005dae:	4608      	mov	r0, r1
 8005db0:	4611      	mov	r1, r2
 8005db2:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005db8:	f7ff ff76 	bl	8005ca8 <BSP_SD_WriteBlocks>
 8005dbc:	b930      	cbnz	r0, 8005dcc <SD_write+0x20>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005dbe:	f7ff ff83 	bl	8005cc8 <BSP_SD_GetCardState>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d1fa      	bne.n	8005dbe <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e7fb      	b.n	8005dc8 <SD_write+0x1c>

08005dd0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005dd0:	b530      	push	{r4, r5, lr}
 8005dd2:	b08b      	sub	sp, #44	; 0x2c
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005dd4:	4b13      	ldr	r3, [pc, #76]	; (8005e24 <SD_ioctl+0x54>)
 8005dd6:	7818      	ldrb	r0, [r3, #0]
 8005dd8:	f010 0401 	ands.w	r4, r0, #1
 8005ddc:	d11b      	bne.n	8005e16 <SD_ioctl+0x46>
 8005dde:	4615      	mov	r5, r2

  switch (cmd)
 8005de0:	2903      	cmp	r1, #3
 8005de2:	d81c      	bhi.n	8005e1e <SD_ioctl+0x4e>
 8005de4:	e8df f001 	tbb	[pc, r1]
 8005de8:	100a0402 	.word	0x100a0402
 8005dec:	460c      	mov	r4, r1
 8005dee:	e013      	b.n	8005e18 <SD_ioctl+0x48>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005df0:	a801      	add	r0, sp, #4
 8005df2:	f7ff ff73 	bl	8005cdc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005df6:	9b07      	ldr	r3, [sp, #28]
 8005df8:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8005dfa:	e00d      	b.n	8005e18 <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005dfc:	a801      	add	r0, sp, #4
 8005dfe:	f7ff ff6d 	bl	8005cdc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005e02:	9b08      	ldr	r3, [sp, #32]
 8005e04:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 8005e06:	e007      	b.n	8005e18 <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005e08:	a801      	add	r0, sp, #4
 8005e0a:	f7ff ff67 	bl	8005cdc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005e0e:	9b08      	ldr	r3, [sp, #32]
 8005e10:	0a5b      	lsrs	r3, r3, #9
 8005e12:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8005e14:	e000      	b.n	8005e18 <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005e16:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8005e18:	4620      	mov	r0, r4
 8005e1a:	b00b      	add	sp, #44	; 0x2c
 8005e1c:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 8005e1e:	2404      	movs	r4, #4
 8005e20:	e7fa      	b.n	8005e18 <SD_ioctl+0x48>
 8005e22:	bf00      	nop
 8005e24:	20000010 	.word	0x20000010

08005e28 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005e28:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005e2a:	4b04      	ldr	r3, [pc, #16]	; (8005e3c <disk_status+0x14>)
 8005e2c:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8005e30:	6852      	ldr	r2, [r2, #4]
 8005e32:	6852      	ldr	r2, [r2, #4]
 8005e34:	4403      	add	r3, r0
 8005e36:	7a18      	ldrb	r0, [r3, #8]
 8005e38:	4790      	blx	r2
  return stat;
}
 8005e3a:	bd08      	pop	{r3, pc}
 8005e3c:	200008e8 	.word	0x200008e8

08005e40 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005e40:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8005e42:	4b08      	ldr	r3, [pc, #32]	; (8005e64 <disk_initialize+0x24>)
 8005e44:	5c1b      	ldrb	r3, [r3, r0]
 8005e46:	b953      	cbnz	r3, 8005e5e <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8005e48:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <disk_initialize+0x24>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005e4e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8005e52:	6852      	ldr	r2, [r2, #4]
 8005e54:	6812      	ldr	r2, [r2, #0]
 8005e56:	4418      	add	r0, r3
 8005e58:	7a00      	ldrb	r0, [r0, #8]
 8005e5a:	4790      	blx	r2
  }
  return stat;
}
 8005e5c:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8005e5e:	2000      	movs	r0, #0
 8005e60:	e7fc      	b.n	8005e5c <disk_initialize+0x1c>
 8005e62:	bf00      	nop
 8005e64:	200008e8 	.word	0x200008e8

08005e68 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005e68:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005e6a:	4c04      	ldr	r4, [pc, #16]	; (8005e7c <disk_read+0x14>)
 8005e6c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8005e70:	686d      	ldr	r5, [r5, #4]
 8005e72:	68ad      	ldr	r5, [r5, #8]
 8005e74:	4404      	add	r4, r0
 8005e76:	7a20      	ldrb	r0, [r4, #8]
 8005e78:	47a8      	blx	r5
  return res;
}
 8005e7a:	bd38      	pop	{r3, r4, r5, pc}
 8005e7c:	200008e8 	.word	0x200008e8

08005e80 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005e80:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005e82:	4c04      	ldr	r4, [pc, #16]	; (8005e94 <disk_write+0x14>)
 8005e84:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8005e88:	686d      	ldr	r5, [r5, #4]
 8005e8a:	68ed      	ldr	r5, [r5, #12]
 8005e8c:	4404      	add	r4, r0
 8005e8e:	7a20      	ldrb	r0, [r4, #8]
 8005e90:	47a8      	blx	r5
  return res;
}
 8005e92:	bd38      	pop	{r3, r4, r5, pc}
 8005e94:	200008e8 	.word	0x200008e8

08005e98 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005e98:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005e9a:	4b04      	ldr	r3, [pc, #16]	; (8005eac <disk_ioctl+0x14>)
 8005e9c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8005ea0:	6864      	ldr	r4, [r4, #4]
 8005ea2:	6924      	ldr	r4, [r4, #16]
 8005ea4:	4403      	add	r3, r0
 8005ea6:	7a18      	ldrb	r0, [r3, #8]
 8005ea8:	47a0      	blx	r4
  return res;
}
 8005eaa:	bd10      	pop	{r4, pc}
 8005eac:	200008e8 	.word	0x200008e8

08005eb0 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 8005eb0:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 8005eb2:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8005eb4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8005eb8:	4770      	bx	lr

08005eba <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8005eba:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 8005ebc:	7883      	ldrb	r3, [r0, #2]
 8005ebe:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 8005ec2:	7843      	ldrb	r3, [r0, #1]
 8005ec4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8005ec8:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8005eca:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005ece:	4770      	bx	lr

08005ed0 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8005ed0:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 8005ed2:	0a09      	lsrs	r1, r1, #8
 8005ed4:	7041      	strb	r1, [r0, #1]
}
 8005ed6:	4770      	bx	lr

08005ed8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8005ed8:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005eda:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8005ede:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ee0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8005ee4:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8005ee6:	0e09      	lsrs	r1, r1, #24
 8005ee8:	70c1      	strb	r1, [r0, #3]
}
 8005eea:	4770      	bx	lr

08005eec <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8005eec:	4694      	mov	ip, r2
 8005eee:	b132      	cbz	r2, 8005efe <mem_cpy+0x12>
		do {
			*d++ = *s++;
 8005ef0:	780a      	ldrb	r2, [r1, #0]
 8005ef2:	3101      	adds	r1, #1
 8005ef4:	7002      	strb	r2, [r0, #0]
 8005ef6:	3001      	adds	r0, #1
		} while (--cnt);
 8005ef8:	f1bc 0c01 	subs.w	ip, ip, #1
 8005efc:	d1f8      	bne.n	8005ef0 <mem_cpy+0x4>
	}
}
 8005efe:	4770      	bx	lr

08005f00 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8005f00:	7001      	strb	r1, [r0, #0]
 8005f02:	3001      	adds	r0, #1
	} while (--cnt);
 8005f04:	3a01      	subs	r2, #1
 8005f06:	d1fb      	bne.n	8005f00 <mem_set>
}
 8005f08:	4770      	bx	lr

08005f0a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005f0a:	4684      	mov	ip, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 8005f0c:	f89c 0000 	ldrb.w	r0, [ip]
 8005f10:	f10c 0c01 	add.w	ip, ip, #1
 8005f14:	780b      	ldrb	r3, [r1, #0]
 8005f16:	3101      	adds	r1, #1
 8005f18:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 8005f1a:	3a01      	subs	r2, #1
 8005f1c:	d001      	beq.n	8005f22 <mem_cmp+0x18>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d0f4      	beq.n	8005f0c <mem_cmp+0x2>

	return r;
}
 8005f22:	4770      	bx	lr

08005f24 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005f24:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 8005f26:	e000      	b.n	8005f2a <chk_chr+0x6>
 8005f28:	3301      	adds	r3, #1
 8005f2a:	7818      	ldrb	r0, [r3, #0]
 8005f2c:	b108      	cbz	r0, 8005f32 <chk_chr+0xe>
 8005f2e:	4288      	cmp	r0, r1
 8005f30:	d1fa      	bne.n	8005f28 <chk_chr+0x4>
	return *str;
}
 8005f32:	4770      	bx	lr

08005f34 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005f34:	b410      	push	{r4}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005f36:	f04f 0c00 	mov.w	ip, #0
 8005f3a:	4663      	mov	r3, ip
 8005f3c:	e002      	b.n	8005f44 <chk_lock+0x10>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8005f3e:	f04f 0c01 	mov.w	ip, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005f42:	3301      	adds	r3, #1
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d815      	bhi.n	8005f74 <chk_lock+0x40>
		if (Files[i].fs) {	/* Existing entry */
 8005f48:	011a      	lsls	r2, r3, #4
 8005f4a:	4c18      	ldr	r4, [pc, #96]	; (8005fac <chk_lock+0x78>)
 8005f4c:	58a2      	ldr	r2, [r4, r2]
 8005f4e:	2a00      	cmp	r2, #0
 8005f50:	d0f5      	beq.n	8005f3e <chk_lock+0xa>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005f52:	6804      	ldr	r4, [r0, #0]
 8005f54:	42a2      	cmp	r2, r4
 8005f56:	d1f4      	bne.n	8005f42 <chk_lock+0xe>
				Files[i].clu == dp->obj.sclust &&
 8005f58:	4a14      	ldr	r2, [pc, #80]	; (8005fac <chk_lock+0x78>)
 8005f5a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8005f5e:	6854      	ldr	r4, [r2, #4]
 8005f60:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005f62:	4294      	cmp	r4, r2
 8005f64:	d1ed      	bne.n	8005f42 <chk_lock+0xe>
				Files[i].ofs == dp->dptr) break;
 8005f66:	4a11      	ldr	r2, [pc, #68]	; (8005fac <chk_lock+0x78>)
 8005f68:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8005f6c:	6894      	ldr	r4, [r2, #8]
 8005f6e:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 8005f70:	4294      	cmp	r4, r2
 8005f72:	d1e6      	bne.n	8005f42 <chk_lock+0xe>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d00b      	beq.n	8005f90 <chk_lock+0x5c>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005f78:	b9b1      	cbnz	r1, 8005fa8 <chk_lock+0x74>
 8005f7a:	4a0c      	ldr	r2, [pc, #48]	; (8005fac <chk_lock+0x78>)
 8005f7c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8005f80:	899b      	ldrh	r3, [r3, #12]
 8005f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f86:	d00d      	beq.n	8005fa4 <chk_lock+0x70>
 8005f88:	2000      	movs	r0, #0
}
 8005f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f8e:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005f90:	2902      	cmp	r1, #2
 8005f92:	bf14      	ite	ne
 8005f94:	4663      	movne	r3, ip
 8005f96:	f04c 0301 	orreq.w	r3, ip, #1
 8005f9a:	b10b      	cbz	r3, 8005fa0 <chk_lock+0x6c>
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	e7f4      	b.n	8005f8a <chk_lock+0x56>
 8005fa0:	2012      	movs	r0, #18
 8005fa2:	e7f2      	b.n	8005f8a <chk_lock+0x56>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005fa4:	2010      	movs	r0, #16
 8005fa6:	e7f0      	b.n	8005f8a <chk_lock+0x56>
 8005fa8:	2010      	movs	r0, #16
 8005faa:	e7ee      	b.n	8005f8a <chk_lock+0x56>
 8005fac:	200006c4 	.word	0x200006c4

08005fb0 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	e000      	b.n	8005fb6 <enq_lock+0x6>
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	2801      	cmp	r0, #1
 8005fb8:	d804      	bhi.n	8005fc4 <enq_lock+0x14>
 8005fba:	0103      	lsls	r3, r0, #4
 8005fbc:	4a03      	ldr	r2, [pc, #12]	; (8005fcc <enq_lock+0x1c>)
 8005fbe:	58d3      	ldr	r3, [r2, r3]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1f7      	bne.n	8005fb4 <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 8005fc4:	3802      	subs	r0, #2
 8005fc6:	bf18      	it	ne
 8005fc8:	2001      	movne	r0, #1
 8005fca:	4770      	bx	lr
 8005fcc:	200006c4 	.word	0x200006c4

08005fd0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005fd0:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e000      	b.n	8005fd8 <inc_lock+0x8>
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d813      	bhi.n	8006004 <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 8005fdc:	011a      	lsls	r2, r3, #4
 8005fde:	4c24      	ldr	r4, [pc, #144]	; (8006070 <inc_lock+0xa0>)
 8005fe0:	58a4      	ldr	r4, [r4, r2]
 8005fe2:	6802      	ldr	r2, [r0, #0]
 8005fe4:	4294      	cmp	r4, r2
 8005fe6:	d1f6      	bne.n	8005fd6 <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 8005fe8:	4a21      	ldr	r2, [pc, #132]	; (8006070 <inc_lock+0xa0>)
 8005fea:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8005fee:	6854      	ldr	r4, [r2, #4]
 8005ff0:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005ff2:	4294      	cmp	r4, r2
 8005ff4:	d1ef      	bne.n	8005fd6 <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 8005ff6:	4a1e      	ldr	r2, [pc, #120]	; (8006070 <inc_lock+0xa0>)
 8005ff8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8005ffc:	6894      	ldr	r4, [r2, #8]
 8005ffe:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 8006000:	4294      	cmp	r4, r2
 8006002:	d1e8      	bne.n	8005fd6 <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006004:	2b02      	cmp	r3, #2
 8006006:	d00d      	beq.n	8006024 <inc_lock+0x54>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006008:	b121      	cbz	r1, 8006014 <inc_lock+0x44>
 800600a:	4a19      	ldr	r2, [pc, #100]	; (8006070 <inc_lock+0xa0>)
 800600c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006010:	8992      	ldrh	r2, [r2, #12]
 8006012:	bb52      	cbnz	r2, 800606a <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006014:	b9f1      	cbnz	r1, 8006054 <inc_lock+0x84>
 8006016:	4a16      	ldr	r2, [pc, #88]	; (8006070 <inc_lock+0xa0>)
 8006018:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800601c:	8991      	ldrh	r1, [r2, #12]
 800601e:	3101      	adds	r1, #1
 8006020:	b289      	uxth	r1, r1
 8006022:	e019      	b.n	8006058 <inc_lock+0x88>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006024:	2300      	movs	r3, #0
 8006026:	2b01      	cmp	r3, #1
 8006028:	d805      	bhi.n	8006036 <inc_lock+0x66>
 800602a:	011a      	lsls	r2, r3, #4
 800602c:	4c10      	ldr	r4, [pc, #64]	; (8006070 <inc_lock+0xa0>)
 800602e:	58a2      	ldr	r2, [r4, r2]
 8006030:	b10a      	cbz	r2, 8006036 <inc_lock+0x66>
 8006032:	3301      	adds	r3, #1
 8006034:	e7f7      	b.n	8006026 <inc_lock+0x56>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006036:	2b02      	cmp	r3, #2
 8006038:	d015      	beq.n	8006066 <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 800603a:	4d0d      	ldr	r5, [pc, #52]	; (8006070 <inc_lock+0xa0>)
 800603c:	011c      	lsls	r4, r3, #4
 800603e:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 8006042:	6806      	ldr	r6, [r0, #0]
 8006044:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 8006046:	6884      	ldr	r4, [r0, #8]
 8006048:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 800604a:	6940      	ldr	r0, [r0, #20]
 800604c:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 800604e:	2000      	movs	r0, #0
 8006050:	8190      	strh	r0, [r2, #12]
 8006052:	e7d9      	b.n	8006008 <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006058:	4a05      	ldr	r2, [pc, #20]	; (8006070 <inc_lock+0xa0>)
 800605a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800605e:	8191      	strh	r1, [r2, #12]

	return i + 1;
 8006060:	1c58      	adds	r0, r3, #1
}
 8006062:	bc70      	pop	{r4, r5, r6}
 8006064:	4770      	bx	lr
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006066:	2000      	movs	r0, #0
 8006068:	e7fb      	b.n	8006062 <inc_lock+0x92>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800606a:	2000      	movs	r0, #0
 800606c:	e7f9      	b.n	8006062 <inc_lock+0x92>
 800606e:	bf00      	nop
 8006070:	200006c4 	.word	0x200006c4

08006074 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006074:	3801      	subs	r0, #1
 8006076:	2801      	cmp	r0, #1
 8006078:	d815      	bhi.n	80060a6 <dec_lock+0x32>
		n = Files[i].ctr;
 800607a:	4b0d      	ldr	r3, [pc, #52]	; (80060b0 <dec_lock+0x3c>)
 800607c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8006080:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006086:	d003      	beq.n	8006090 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 8006088:	b11b      	cbz	r3, 8006092 <dec_lock+0x1e>
 800608a:	3b01      	subs	r3, #1
 800608c:	b29b      	uxth	r3, r3
 800608e:	e000      	b.n	8006092 <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006090:	2300      	movs	r3, #0
		Files[i].ctr = n;
 8006092:	4a07      	ldr	r2, [pc, #28]	; (80060b0 <dec_lock+0x3c>)
 8006094:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8006098:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800609a:	b933      	cbnz	r3, 80060aa <dec_lock+0x36>
 800609c:	0103      	lsls	r3, r0, #4
 800609e:	2000      	movs	r0, #0
 80060a0:	4a03      	ldr	r2, [pc, #12]	; (80060b0 <dec_lock+0x3c>)
 80060a2:	50d0      	str	r0, [r2, r3]
 80060a4:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80060a6:	2002      	movs	r0, #2
 80060a8:	4770      	bx	lr
		res = FR_OK;
 80060aa:	2000      	movs	r0, #0
	}
	return res;
}
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	200006c4 	.word	0x200006c4

080060b4 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80060b4:	2300      	movs	r3, #0
 80060b6:	e003      	b.n	80060c0 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 80060b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060bc:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 80060be:	3301      	adds	r3, #1
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d811      	bhi.n	80060e8 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80060c4:	011a      	lsls	r2, r3, #4
 80060c6:	4909      	ldr	r1, [pc, #36]	; (80060ec <clear_lock+0x38>)
 80060c8:	588a      	ldr	r2, [r1, r2]
 80060ca:	4282      	cmp	r2, r0
 80060cc:	d1f7      	bne.n	80060be <clear_lock+0xa>
{
 80060ce:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 80060d0:	011a      	lsls	r2, r3, #4
 80060d2:	2400      	movs	r4, #0
 80060d4:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 80060d6:	3301      	adds	r3, #1
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d8ed      	bhi.n	80060b8 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80060dc:	011a      	lsls	r2, r3, #4
 80060de:	4903      	ldr	r1, [pc, #12]	; (80060ec <clear_lock+0x38>)
 80060e0:	588a      	ldr	r2, [r1, r2]
 80060e2:	4282      	cmp	r2, r0
 80060e4:	d1f7      	bne.n	80060d6 <clear_lock+0x22>
 80060e6:	e7f3      	b.n	80060d0 <clear_lock+0x1c>
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	200006c4 	.word	0x200006c4

080060f0 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 80060f0:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80060f2:	6983      	ldr	r3, [r0, #24]
 80060f4:	3b02      	subs	r3, #2
 80060f6:	428b      	cmp	r3, r1
 80060f8:	d904      	bls.n	8006104 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 80060fa:	8943      	ldrh	r3, [r0, #10]
 80060fc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80060fe:	fb01 0003 	mla	r0, r1, r3, r0
 8006102:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006104:	2000      	movs	r0, #0
}
 8006106:	4770      	bx	lr

08006108 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006108:	b570      	push	{r4, r5, r6, lr}
 800610a:	4606      	mov	r6, r0
 800610c:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800610e:	f101 001a 	add.w	r0, r1, #26
 8006112:	f7ff fecd 	bl	8005eb0 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 8006116:	7833      	ldrb	r3, [r6, #0]
 8006118:	2b03      	cmp	r3, #3
 800611a:	d000      	beq.n	800611e <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 800611c:	bd70      	pop	{r4, r5, r6, pc}
 800611e:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006120:	f105 0014 	add.w	r0, r5, #20
 8006124:	f7ff fec4 	bl	8005eb0 <ld_word>
 8006128:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 800612c:	e7f6      	b.n	800611c <ld_clust+0x14>

0800612e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800612e:	b570      	push	{r4, r5, r6, lr}
 8006130:	4606      	mov	r6, r0
 8006132:	460c      	mov	r4, r1
 8006134:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006136:	b291      	uxth	r1, r2
 8006138:	f104 001a 	add.w	r0, r4, #26
 800613c:	f7ff fec8 	bl	8005ed0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006140:	7833      	ldrb	r3, [r6, #0]
 8006142:	2b03      	cmp	r3, #3
 8006144:	d000      	beq.n	8006148 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 8006146:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006148:	0c29      	lsrs	r1, r5, #16
 800614a:	f104 0014 	add.w	r0, r4, #20
 800614e:	f7ff febf 	bl	8005ed0 <st_word>
}
 8006152:	e7f8      	b.n	8006146 <st_clust+0x18>

08006154 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8006154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006158:	4680      	mov	r8, r0
 800615a:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800615c:	f101 001a 	add.w	r0, r1, #26
 8006160:	f7ff fea6 	bl	8005eb0 <ld_word>
 8006164:	bb50      	cbnz	r0, 80061bc <pick_lfn+0x68>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8006166:	7835      	ldrb	r5, [r6, #0]
 8006168:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 800616c:	3d01      	subs	r5, #1
 800616e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8006172:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006176:	2701      	movs	r7, #1
 8006178:	2400      	movs	r4, #0
 800617a:	e004      	b.n	8006186 <pick_lfn+0x32>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800617c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006180:	4298      	cmp	r0, r3
 8006182:	d120      	bne.n	80061c6 <pick_lfn+0x72>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006184:	3401      	adds	r4, #1
 8006186:	2c0c      	cmp	r4, #12
 8006188:	d80d      	bhi.n	80061a6 <pick_lfn+0x52>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800618a:	4b12      	ldr	r3, [pc, #72]	; (80061d4 <pick_lfn+0x80>)
 800618c:	5d18      	ldrb	r0, [r3, r4]
 800618e:	4430      	add	r0, r6
 8006190:	f7ff fe8e 	bl	8005eb0 <ld_word>
		if (wc) {
 8006194:	2f00      	cmp	r7, #0
 8006196:	d0f1      	beq.n	800617c <pick_lfn+0x28>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006198:	2dfe      	cmp	r5, #254	; 0xfe
 800619a:	d812      	bhi.n	80061c2 <pick_lfn+0x6e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800619c:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
 80061a0:	4607      	mov	r7, r0
 80061a2:	3501      	adds	r5, #1
 80061a4:	e7ee      	b.n	8006184 <pick_lfn+0x30>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80061a6:	7833      	ldrb	r3, [r6, #0]
 80061a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80061ac:	d00d      	beq.n	80061ca <pick_lfn+0x76>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80061ae:	2dfe      	cmp	r5, #254	; 0xfe
 80061b0:	d80d      	bhi.n	80061ce <pick_lfn+0x7a>
		lfnbuf[i] = 0;
 80061b2:	2300      	movs	r3, #0
 80061b4:	f828 3015 	strh.w	r3, [r8, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
 80061b8:	2001      	movs	r0, #1
 80061ba:	e000      	b.n	80061be <pick_lfn+0x6a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80061bc:	2000      	movs	r0, #0
}
 80061be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80061c2:	2000      	movs	r0, #0
 80061c4:	e7fb      	b.n	80061be <pick_lfn+0x6a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80061c6:	2000      	movs	r0, #0
 80061c8:	e7f9      	b.n	80061be <pick_lfn+0x6a>
	return 1;		/* The part of LFN is valid */
 80061ca:	2001      	movs	r0, #1
 80061cc:	e7f7      	b.n	80061be <pick_lfn+0x6a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80061ce:	2000      	movs	r0, #0
 80061d0:	e7f5      	b.n	80061be <pick_lfn+0x6a>
 80061d2:	bf00      	nop
 80061d4:	08007e1c 	.word	0x08007e1c

080061d8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80061d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061dc:	4680      	mov	r8, r0
 80061de:	460f      	mov	r7, r1
 80061e0:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80061e2:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80061e4:	230f      	movs	r3, #15
 80061e6:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 80061e8:	2400      	movs	r4, #0
 80061ea:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 80061ec:	4621      	mov	r1, r4
 80061ee:	f107 001a 	add.w	r0, r7, #26
 80061f2:	f7ff fe6d 	bl	8005ed0 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80061f6:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 80061fa:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80061fe:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 8006202:	4625      	mov	r5, r4
 8006204:	e002      	b.n	800620c <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 8006206:	3401      	adds	r4, #1
 8006208:	2c0c      	cmp	r4, #12
 800620a:	d811      	bhi.n	8006230 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800620c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006210:	429d      	cmp	r5, r3
 8006212:	d002      	beq.n	800621a <put_lfn+0x42>
 8006214:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 8006218:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800621a:	4b0c      	ldr	r3, [pc, #48]	; (800624c <put_lfn+0x74>)
 800621c:	5d18      	ldrb	r0, [r3, r4]
 800621e:	4629      	mov	r1, r5
 8006220:	4438      	add	r0, r7
 8006222:	f7ff fe55 	bl	8005ed0 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006226:	2d00      	cmp	r5, #0
 8006228:	d1ed      	bne.n	8006206 <put_lfn+0x2e>
 800622a:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800622e:	e7ea      	b.n	8006206 <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006234:	429d      	cmp	r5, r3
 8006236:	d002      	beq.n	800623e <put_lfn+0x66>
 8006238:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 800623c:	b90b      	cbnz	r3, 8006242 <put_lfn+0x6a>
 800623e:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006242:	f887 9000 	strb.w	r9, [r7]
}
 8006246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800624a:	bf00      	nop
 800624c:	08007e1c 	.word	0x08007e1c

08006250 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	4605      	mov	r5, r0
 8006256:	4616      	mov	r6, r2
 8006258:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800625a:	220b      	movs	r2, #11
 800625c:	f7ff fe46 	bl	8005eec <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006260:	2c05      	cmp	r4, #5
 8006262:	d811      	bhi.n	8006288 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 8006264:	2307      	movs	r3, #7
 8006266:	e01f      	b.n	80062a8 <gen_numname+0x58>
 8006268:	3101      	adds	r1, #1
 800626a:	290f      	cmp	r1, #15
 800626c:	d80c      	bhi.n	8006288 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 800626e:	f003 0c01 	and.w	ip, r3, #1
 8006272:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
				wc >>= 1;
 8006276:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8006278:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800627c:	d0f4      	beq.n	8006268 <gen_numname+0x18>
 800627e:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 8006282:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 8006286:	e7ef      	b.n	8006268 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 8006288:	8833      	ldrh	r3, [r6, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0ea      	beq.n	8006264 <gen_numname+0x14>
			wc = *lfn++;
 800628e:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
 8006290:	2100      	movs	r1, #0
 8006292:	e7ea      	b.n	800626a <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
 8006294:	1e5a      	subs	r2, r3, #1
 8006296:	3308      	adds	r3, #8
 8006298:	446b      	add	r3, sp
 800629a:	f803 1c08 	strb.w	r1, [r3, #-8]
		seq /= 16;
 800629e:	0921      	lsrs	r1, r4, #4
	} while (seq);
 80062a0:	2c0f      	cmp	r4, #15
 80062a2:	d90a      	bls.n	80062ba <gen_numname+0x6a>
		ns[i--] = c;
 80062a4:	4613      	mov	r3, r2
		seq /= 16;
 80062a6:	460c      	mov	r4, r1
		c = (BYTE)((seq % 16) + '0');
 80062a8:	f004 020f 	and.w	r2, r4, #15
 80062ac:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
 80062b0:	2939      	cmp	r1, #57	; 0x39
 80062b2:	d9ef      	bls.n	8006294 <gen_numname+0x44>
 80062b4:	f102 0137 	add.w	r1, r2, #55	; 0x37
 80062b8:	e7ec      	b.n	8006294 <gen_numname+0x44>
	ns[i] = '~';
 80062ba:	217e      	movs	r1, #126	; 0x7e
 80062bc:	f102 0308 	add.w	r3, r2, #8
 80062c0:	446b      	add	r3, sp
 80062c2:	f803 1c08 	strb.w	r1, [r3, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80062c6:	2300      	movs	r3, #0
 80062c8:	e000      	b.n	80062cc <gen_numname+0x7c>
 80062ca:	3301      	adds	r3, #1
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d209      	bcs.n	80062e4 <gen_numname+0x94>
 80062d0:	5ce9      	ldrb	r1, [r5, r3]
 80062d2:	2920      	cmp	r1, #32
 80062d4:	d1f9      	bne.n	80062ca <gen_numname+0x7a>
 80062d6:	e005      	b.n	80062e4 <gen_numname+0x94>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80062d8:	2020      	movs	r0, #32
 80062da:	1c59      	adds	r1, r3, #1
 80062dc:	54e8      	strb	r0, [r5, r3]
	} while (j < 8);
 80062de:	2907      	cmp	r1, #7
 80062e0:	d809      	bhi.n	80062f6 <gen_numname+0xa6>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80062e2:	460b      	mov	r3, r1
 80062e4:	2a07      	cmp	r2, #7
 80062e6:	d8f7      	bhi.n	80062d8 <gen_numname+0x88>
 80062e8:	f102 0108 	add.w	r1, r2, #8
 80062ec:	4469      	add	r1, sp
 80062ee:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 80062f2:	3201      	adds	r2, #1
 80062f4:	e7f1      	b.n	80062da <gen_numname+0x8a>
}
 80062f6:	b002      	add	sp, #8
 80062f8:	bd70      	pop	{r4, r5, r6, pc}

080062fa <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80062fa:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 80062fc:	f04f 0c0b 	mov.w	ip, #11
	BYTE sum = 0;
 8006300:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006302:	01c3      	lsls	r3, r0, #7
 8006304:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8006308:	7808      	ldrb	r0, [r1, #0]
 800630a:	3101      	adds	r1, #1
 800630c:	fa50 f383 	uxtab	r3, r0, r3
 8006310:	b2d8      	uxtb	r0, r3
	} while (--n);
 8006312:	f1bc 0c01 	subs.w	ip, ip, #1
 8006316:	d1f4      	bne.n	8006302 <sum_sfn+0x8>
	return sum;
}
 8006318:	4770      	bx	lr
	...

0800631c <get_achar>:
)
{
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800631c:	6803      	ldr	r3, [r0, #0]
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	6002      	str	r2, [r0, #0]
 8006322:	7818      	ldrb	r0, [r3, #0]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8006324:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006328:	b29b      	uxth	r3, r3
 800632a:	2b19      	cmp	r3, #25
 800632c:	d801      	bhi.n	8006332 <get_achar+0x16>
 800632e:	3820      	subs	r0, #32
 8006330:	b280      	uxth	r0, r0
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8006332:	287f      	cmp	r0, #127	; 0x7f
 8006334:	d902      	bls.n	800633c <get_achar+0x20>
 8006336:	3880      	subs	r0, #128	; 0x80
 8006338:	4b01      	ldr	r3, [pc, #4]	; (8006340 <get_achar+0x24>)
 800633a:	5c18      	ldrb	r0, [r3, r0]
#endif
	return chr;
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	08007d9c 	.word	0x08007d9c

08006344 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8006344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006348:	b084      	sub	sp, #16
 800634a:	4607      	mov	r7, r0
 800634c:	9101      	str	r1, [sp, #4]
 800634e:	4614      	mov	r4, r2
 8006350:	4698      	mov	r8, r3
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8006352:	4626      	mov	r6, r4
 8006354:	3c01      	subs	r4, #1
 8006356:	b14e      	cbz	r6, 800636c <pattern_matching+0x28>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8006358:	a801      	add	r0, sp, #4
 800635a:	f7ff ffdf 	bl	800631c <get_achar>
 800635e:	2800      	cmp	r0, #0
 8006360:	d1f7      	bne.n	8006352 <pattern_matching+0xe>
 8006362:	2600      	movs	r6, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 8006364:	4630      	mov	r0, r6
 8006366:	b004      	add	sp, #16
 8006368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800636c:	783b      	ldrb	r3, [r7, #0]
 800636e:	bb1b      	cbnz	r3, 80063b8 <pattern_matching+0x74>
 8006370:	f1b8 0f00 	cmp.w	r8, #0
 8006374:	d020      	beq.n	80063b8 <pattern_matching+0x74>
 8006376:	2601      	movs	r6, #1
 8006378:	e7f4      	b.n	8006364 <pattern_matching+0x20>
				nm = nx = 0;
 800637a:	4633      	mov	r3, r6
 800637c:	4632      	mov	r2, r6
 800637e:	e005      	b.n	800638c <pattern_matching+0x48>
					if (*pp++ == '?') nm++; else nx = 1;
 8006380:	3201      	adds	r2, #1
				} while (*pp == '?' || *pp == '*');
 8006382:	7849      	ldrb	r1, [r1, #1]
 8006384:	292a      	cmp	r1, #42	; 0x2a
 8006386:	bf18      	it	ne
 8006388:	293f      	cmpne	r1, #63	; 0x3f
 800638a:	d107      	bne.n	800639c <pattern_matching+0x58>
					if (*pp++ == '?') nm++; else nx = 1;
 800638c:	9903      	ldr	r1, [sp, #12]
 800638e:	1c48      	adds	r0, r1, #1
 8006390:	9003      	str	r0, [sp, #12]
 8006392:	780c      	ldrb	r4, [r1, #0]
 8006394:	2c3f      	cmp	r4, #63	; 0x3f
 8006396:	d0f3      	beq.n	8006380 <pattern_matching+0x3c>
 8006398:	2301      	movs	r3, #1
 800639a:	e7f2      	b.n	8006382 <pattern_matching+0x3e>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800639c:	9902      	ldr	r1, [sp, #8]
 800639e:	f7ff ffd1 	bl	8006344 <pattern_matching>
 80063a2:	bb00      	cbnz	r0, 80063e6 <pattern_matching+0xa2>
				nc = *np; break;	/* Branch mismatched */
 80063a4:	9b02      	ldr	r3, [sp, #8]
 80063a6:	781d      	ldrb	r5, [r3, #0]
		get_achar(&nam);			/* nam++ */
 80063a8:	a801      	add	r0, sp, #4
 80063aa:	f7ff ffb7 	bl	800631c <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 80063ae:	f1b8 0f00 	cmp.w	r8, #0
 80063b2:	bf18      	it	ne
 80063b4:	2d00      	cmpne	r5, #0
 80063b6:	d0d5      	beq.n	8006364 <pattern_matching+0x20>
		pp = pat; np = nam;			/* Top of pattern and name to match */
 80063b8:	9703      	str	r7, [sp, #12]
 80063ba:	9b01      	ldr	r3, [sp, #4]
 80063bc:	9302      	str	r3, [sp, #8]
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 80063be:	9b03      	ldr	r3, [sp, #12]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b2a      	cmp	r3, #42	; 0x2a
 80063c4:	bf18      	it	ne
 80063c6:	2b3f      	cmpne	r3, #63	; 0x3f
 80063c8:	d0d7      	beq.n	800637a <pattern_matching+0x36>
			pc = get_achar(&pp);	/* Get a pattern char */
 80063ca:	a803      	add	r0, sp, #12
 80063cc:	f7ff ffa6 	bl	800631c <get_achar>
 80063d0:	4604      	mov	r4, r0
			nc = get_achar(&np);	/* Get a name char */
 80063d2:	a802      	add	r0, sp, #8
 80063d4:	f7ff ffa2 	bl	800631c <get_achar>
 80063d8:	4605      	mov	r5, r0
			if (pc != nc) break;	/* Branch mismatched? */
 80063da:	4284      	cmp	r4, r0
 80063dc:	d1e4      	bne.n	80063a8 <pattern_matching+0x64>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 80063de:	2c00      	cmp	r4, #0
 80063e0:	d1ed      	bne.n	80063be <pattern_matching+0x7a>
 80063e2:	2601      	movs	r6, #1
 80063e4:	e7be      	b.n	8006364 <pattern_matching+0x20>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80063e6:	2601      	movs	r6, #1
 80063e8:	e7bc      	b.n	8006364 <pattern_matching+0x20>

080063ea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80063ea:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80063ec:	6800      	ldr	r0, [r0, #0]
 80063ee:	b108      	cbz	r0, 80063f4 <get_ldnumber+0xa>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80063f0:	4602      	mov	r2, r0
 80063f2:	e003      	b.n	80063fc <get_ldnumber+0x12>
	int vol = -1;
 80063f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063f8:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80063fa:	3201      	adds	r2, #1
 80063fc:	7813      	ldrb	r3, [r2, #0]
 80063fe:	2b3a      	cmp	r3, #58	; 0x3a
 8006400:	bf18      	it	ne
 8006402:	2b1f      	cmpne	r3, #31
 8006404:	d8f9      	bhi.n	80063fa <get_ldnumber+0x10>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006406:	2b3a      	cmp	r3, #58	; 0x3a
 8006408:	d001      	beq.n	800640e <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800640a:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 800640c:	4770      	bx	lr
			i = *tp++ - '0';
 800640e:	4603      	mov	r3, r0
 8006410:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006414:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006416:	2809      	cmp	r0, #9
 8006418:	bf98      	it	ls
 800641a:	429a      	cmpls	r2, r3
 800641c:	d103      	bne.n	8006426 <get_ldnumber+0x3c>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800641e:	b928      	cbnz	r0, 800642c <get_ldnumber+0x42>
					*path = ++tt;
 8006420:	3201      	adds	r2, #1
 8006422:	600a      	str	r2, [r1, #0]
 8006424:	4770      	bx	lr
	int vol = -1;
 8006426:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800642a:	4770      	bx	lr
 800642c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return vol;
 8006430:	4770      	bx	lr

08006432 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006432:	b538      	push	{r3, r4, r5, lr}
 8006434:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006436:	4604      	mov	r4, r0
 8006438:	b198      	cbz	r0, 8006462 <validate+0x30>
 800643a:	6803      	ldr	r3, [r0, #0]
 800643c:	b19b      	cbz	r3, 8006466 <validate+0x34>
 800643e:	781a      	ldrb	r2, [r3, #0]
 8006440:	b1a2      	cbz	r2, 800646c <validate+0x3a>
 8006442:	8881      	ldrh	r1, [r0, #4]
 8006444:	88da      	ldrh	r2, [r3, #6]
 8006446:	4291      	cmp	r1, r2
 8006448:	d003      	beq.n	8006452 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 800644a:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800644c:	2400      	movs	r4, #0
 800644e:	602c      	str	r4, [r5, #0]
	return res;
}
 8006450:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006452:	7858      	ldrb	r0, [r3, #1]
 8006454:	f7ff fce8 	bl	8005e28 <disk_status>
 8006458:	f010 0001 	ands.w	r0, r0, #1
 800645c:	d109      	bne.n	8006472 <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800645e:	6824      	ldr	r4, [r4, #0]
 8006460:	e7f5      	b.n	800644e <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8006462:	2009      	movs	r0, #9
 8006464:	e7f3      	b.n	800644e <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006466:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 8006468:	2009      	movs	r0, #9
 800646a:	e7f0      	b.n	800644e <validate+0x1c>
 800646c:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800646e:	2400      	movs	r4, #0
 8006470:	e7ed      	b.n	800644e <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8006472:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006474:	2400      	movs	r4, #0
 8006476:	e7ea      	b.n	800644e <validate+0x1c>

08006478 <sync_window>:
{
 8006478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800647c:	78c5      	ldrb	r5, [r0, #3]
 800647e:	b915      	cbnz	r5, 8006486 <sync_window+0xe>
}
 8006480:	4628      	mov	r0, r5
 8006482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006486:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8006488:	6b07      	ldr	r7, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800648a:	f100 0834 	add.w	r8, r0, #52	; 0x34
 800648e:	2301      	movs	r3, #1
 8006490:	463a      	mov	r2, r7
 8006492:	4641      	mov	r1, r8
 8006494:	7840      	ldrb	r0, [r0, #1]
 8006496:	f7ff fcf3 	bl	8005e80 <disk_write>
 800649a:	4605      	mov	r5, r0
 800649c:	b9a0      	cbnz	r0, 80064c8 <sync_window+0x50>
			fs->wflag = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80064a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064a4:	1afb      	subs	r3, r7, r3
 80064a6:	69e2      	ldr	r2, [r4, #28]
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d2e9      	bcs.n	8006480 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80064ac:	78a6      	ldrb	r6, [r4, #2]
 80064ae:	e008      	b.n	80064c2 <sync_window+0x4a>
					wsect += fs->fsize;
 80064b0:	69e3      	ldr	r3, [r4, #28]
 80064b2:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80064b4:	2301      	movs	r3, #1
 80064b6:	463a      	mov	r2, r7
 80064b8:	4641      	mov	r1, r8
 80064ba:	7860      	ldrb	r0, [r4, #1]
 80064bc:	f7ff fce0 	bl	8005e80 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80064c0:	3e01      	subs	r6, #1
 80064c2:	2e01      	cmp	r6, #1
 80064c4:	d8f4      	bhi.n	80064b0 <sync_window+0x38>
 80064c6:	e7db      	b.n	8006480 <sync_window+0x8>
			res = FR_DISK_ERR;
 80064c8:	2501      	movs	r5, #1
 80064ca:	e7d9      	b.n	8006480 <sync_window+0x8>

080064cc <move_window>:
{
 80064cc:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 80064ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80064d0:	428b      	cmp	r3, r1
 80064d2:	d102      	bne.n	80064da <move_window+0xe>
	FRESULT res = FR_OK;
 80064d4:	2600      	movs	r6, #0
}
 80064d6:	4630      	mov	r0, r6
 80064d8:	bd70      	pop	{r4, r5, r6, pc}
 80064da:	4604      	mov	r4, r0
 80064dc:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 80064de:	f7ff ffcb 	bl	8006478 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80064e2:	4606      	mov	r6, r0
 80064e4:	2800      	cmp	r0, #0
 80064e6:	d1f6      	bne.n	80064d6 <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80064e8:	2301      	movs	r3, #1
 80064ea:	462a      	mov	r2, r5
 80064ec:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80064f0:	7860      	ldrb	r0, [r4, #1]
 80064f2:	f7ff fcb9 	bl	8005e68 <disk_read>
 80064f6:	b110      	cbz	r0, 80064fe <move_window+0x32>
				res = FR_DISK_ERR;
 80064f8:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80064fa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
 80064fe:	6325      	str	r5, [r4, #48]	; 0x30
 8006500:	e7e9      	b.n	80064d6 <move_window+0xa>
	...

08006504 <check_fs>:
{
 8006504:	b538      	push	{r3, r4, r5, lr}
 8006506:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006508:	2300      	movs	r3, #0
 800650a:	70c3      	strb	r3, [r0, #3]
 800650c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006510:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006512:	f7ff ffdb 	bl	80064cc <move_window>
 8006516:	bb30      	cbnz	r0, 8006566 <check_fs+0x62>
 8006518:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800651a:	f204 2032 	addw	r0, r4, #562	; 0x232
 800651e:	f7ff fcc7 	bl	8005eb0 <ld_word>
 8006522:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006526:	4298      	cmp	r0, r3
 8006528:	d11f      	bne.n	800656a <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800652a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800652e:	2be9      	cmp	r3, #233	; 0xe9
 8006530:	d007      	beq.n	8006542 <check_fs+0x3e>
 8006532:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006534:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8006538:	4a0d      	ldr	r2, [pc, #52]	; (8006570 <check_fs+0x6c>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d001      	beq.n	8006542 <check_fs+0x3e>
	return 2;
 800653e:	2502      	movs	r5, #2
 8006540:	e014      	b.n	800656c <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006542:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 8006546:	f7ff fcb8 	bl	8005eba <ld_dword>
 800654a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800654e:	4b09      	ldr	r3, [pc, #36]	; (8006574 <check_fs+0x70>)
 8006550:	4298      	cmp	r0, r3
 8006552:	d00b      	beq.n	800656c <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006554:	f104 0086 	add.w	r0, r4, #134	; 0x86
 8006558:	f7ff fcaf 	bl	8005eba <ld_dword>
 800655c:	4b06      	ldr	r3, [pc, #24]	; (8006578 <check_fs+0x74>)
 800655e:	4298      	cmp	r0, r3
 8006560:	d004      	beq.n	800656c <check_fs+0x68>
	return 2;
 8006562:	2502      	movs	r5, #2
 8006564:	e002      	b.n	800656c <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006566:	2504      	movs	r5, #4
 8006568:	e000      	b.n	800656c <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800656a:	2503      	movs	r5, #3
}
 800656c:	4628      	mov	r0, r5
 800656e:	bd38      	pop	{r3, r4, r5, pc}
 8006570:	009000eb 	.word	0x009000eb
 8006574:	00544146 	.word	0x00544146
 8006578:	33544146 	.word	0x33544146

0800657c <find_volume>:
{
 800657c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006580:	b085      	sub	sp, #20
 8006582:	460d      	mov	r5, r1
 8006584:	4616      	mov	r6, r2
	*rfs = 0;
 8006586:	2300      	movs	r3, #0
 8006588:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 800658a:	f7ff ff2e 	bl	80063ea <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800658e:	1e07      	subs	r7, r0, #0
 8006590:	f2c0 8146 	blt.w	8006820 <find_volume+0x2a4>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006594:	4bb6      	ldr	r3, [pc, #728]	; (8006870 <find_volume+0x2f4>)
 8006596:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800659a:	2c00      	cmp	r4, #0
 800659c:	f000 8145 	beq.w	800682a <find_volume+0x2ae>
	*rfs = fs;							/* Return pointer to the file system object */
 80065a0:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80065a2:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80065a6:	7823      	ldrb	r3, [r4, #0]
 80065a8:	b173      	cbz	r3, 80065c8 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 80065aa:	7860      	ldrb	r0, [r4, #1]
 80065ac:	f7ff fc3c 	bl	8005e28 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80065b0:	f010 0501 	ands.w	r5, r0, #1
 80065b4:	d108      	bne.n	80065c8 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80065b6:	2e00      	cmp	r6, #0
 80065b8:	f000 8133 	beq.w	8006822 <find_volume+0x2a6>
 80065bc:	f010 0f04 	tst.w	r0, #4
 80065c0:	f000 812f 	beq.w	8006822 <find_volume+0x2a6>
				return FR_WRITE_PROTECTED;
 80065c4:	250a      	movs	r5, #10
 80065c6:	e12c      	b.n	8006822 <find_volume+0x2a6>
	fs->fs_type = 0;					/* Clear the file system object */
 80065c8:	2300      	movs	r3, #0
 80065ca:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80065cc:	b2f8      	uxtb	r0, r7
 80065ce:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80065d0:	f7ff fc36 	bl	8005e40 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80065d4:	f010 0501 	ands.w	r5, r0, #1
 80065d8:	f040 8129 	bne.w	800682e <find_volume+0x2b2>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80065dc:	b11e      	cbz	r6, 80065e6 <find_volume+0x6a>
 80065de:	f010 0f04 	tst.w	r0, #4
 80065e2:	f040 8126 	bne.w	8006832 <find_volume+0x2b6>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80065e6:	2100      	movs	r1, #0
 80065e8:	4620      	mov	r0, r4
 80065ea:	f7ff ff8b 	bl	8006504 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80065ee:	2802      	cmp	r0, #2
 80065f0:	f000 80b8 	beq.w	8006764 <find_volume+0x1e8>
	bsect = 0;
 80065f4:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80065f6:	2804      	cmp	r0, #4
 80065f8:	f000 811d 	beq.w	8006836 <find_volume+0x2ba>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80065fc:	2801      	cmp	r0, #1
 80065fe:	f200 811c 	bhi.w	800683a <find_volume+0x2be>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006602:	f104 003f 	add.w	r0, r4, #63	; 0x3f
 8006606:	f7ff fc53 	bl	8005eb0 <ld_word>
 800660a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800660e:	f040 8116 	bne.w	800683e <find_volume+0x2c2>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006612:	f104 004a 	add.w	r0, r4, #74	; 0x4a
 8006616:	f7ff fc4b 	bl	8005eb0 <ld_word>
 800661a:	4606      	mov	r6, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800661c:	b920      	cbnz	r0, 8006628 <find_volume+0xac>
 800661e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006622:	f7ff fc4a 	bl	8005eba <ld_dword>
 8006626:	4606      	mov	r6, r0
		fs->fsize = fasize;
 8006628:	61e6      	str	r6, [r4, #28]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800662a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800662e:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006630:	1e53      	subs	r3, r2, #1
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b01      	cmp	r3, #1
 8006636:	f200 8104 	bhi.w	8006842 <find_volume+0x2c6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800663a:	fb06 f802 	mul.w	r8, r6, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800663e:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
 8006642:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006646:	f1b9 0f00 	cmp.w	r9, #0
 800664a:	f000 80fc 	beq.w	8006846 <find_volume+0x2ca>
 800664e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8006652:	ea19 0f03 	tst.w	r9, r3
 8006656:	f040 80f8 	bne.w	800684a <find_volume+0x2ce>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800665a:	f104 0045 	add.w	r0, r4, #69	; 0x45
 800665e:	f7ff fc27 	bl	8005eb0 <ld_word>
 8006662:	4682      	mov	sl, r0
 8006664:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006666:	f010 0f0f 	tst.w	r0, #15
 800666a:	f040 80f0 	bne.w	800684e <find_volume+0x2d2>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800666e:	f104 0047 	add.w	r0, r4, #71	; 0x47
 8006672:	f7ff fc1d 	bl	8005eb0 <ld_word>
 8006676:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006678:	b920      	cbnz	r0, 8006684 <find_volume+0x108>
 800667a:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800667e:	f7ff fc1c 	bl	8005eba <ld_dword>
 8006682:	4683      	mov	fp, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006684:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8006688:	f7ff fc12 	bl	8005eb0 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800668c:	4602      	mov	r2, r0
 800668e:	2800      	cmp	r0, #0
 8006690:	f000 80df 	beq.w	8006852 <find_volume+0x2d6>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006694:	eb00 0308 	add.w	r3, r0, r8
 8006698:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800669c:	459b      	cmp	fp, r3
 800669e:	f0c0 80da 	bcc.w	8006856 <find_volume+0x2da>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80066a2:	ebab 0b03 	sub.w	fp, fp, r3
 80066a6:	fbbb f1f9 	udiv	r1, fp, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80066aa:	45cb      	cmp	fp, r9
 80066ac:	f0c0 80d5 	bcc.w	800685a <find_volume+0x2de>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80066b0:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 80066b4:	4281      	cmp	r1, r0
 80066b6:	d96d      	bls.n	8006794 <find_volume+0x218>
		fmt = FS_FAT32;
 80066b8:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80066bc:	f640 70f5 	movw	r0, #4085	; 0xff5
 80066c0:	4281      	cmp	r1, r0
 80066c2:	d801      	bhi.n	80066c8 <find_volume+0x14c>
 80066c4:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80066c8:	f101 0902 	add.w	r9, r1, #2
 80066cc:	f8c4 9018 	str.w	r9, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80066d0:	6227      	str	r7, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80066d2:	443a      	add	r2, r7
 80066d4:	6262      	str	r2, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80066d6:	443b      	add	r3, r7
 80066d8:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80066da:	f1bb 0f03 	cmp.w	fp, #3
 80066de:	d05c      	beq.n	800679a <find_volume+0x21e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80066e0:	f1ba 0f00 	cmp.w	sl, #0
 80066e4:	f000 80bf 	beq.w	8006866 <find_volume+0x2ea>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80066e8:	4442      	add	r2, r8
 80066ea:	62a2      	str	r2, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80066ec:	f1bb 0f02 	cmp.w	fp, #2
 80066f0:	d064      	beq.n	80067bc <find_volume+0x240>
 80066f2:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 80066f6:	f009 0901 	and.w	r9, r9, #1
 80066fa:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80066fe:	f209 19ff 	addw	r9, r9, #511	; 0x1ff
 8006702:	ebb6 2f59 	cmp.w	r6, r9, lsr #9
 8006706:	f0c0 80b0 	bcc.w	800686a <find_volume+0x2ee>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800670a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800670e:	6163      	str	r3, [r4, #20]
 8006710:	6123      	str	r3, [r4, #16]
		fs->fsi_flag = 0x80;
 8006712:	2380      	movs	r3, #128	; 0x80
 8006714:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006716:	f1bb 0f03 	cmp.w	fp, #3
 800671a:	d052      	beq.n	80067c2 <find_volume+0x246>
	fs->fs_type = fmt;		/* FAT sub-type */
 800671c:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8006720:	4a54      	ldr	r2, [pc, #336]	; (8006874 <find_volume+0x2f8>)
 8006722:	8813      	ldrh	r3, [r2, #0]
 8006724:	3301      	adds	r3, #1
 8006726:	b29b      	uxth	r3, r3
 8006728:	8013      	strh	r3, [r2, #0]
 800672a:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800672c:	4b52      	ldr	r3, [pc, #328]	; (8006878 <find_volume+0x2fc>)
 800672e:	60e3      	str	r3, [r4, #12]
	clear_lock(fs);
 8006730:	4620      	mov	r0, r4
 8006732:	f7ff fcbf 	bl	80060b4 <clear_lock>
	return FR_OK;
 8006736:	e074      	b.n	8006822 <find_volume+0x2a6>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006738:	2000      	movs	r0, #0
 800673a:	ab04      	add	r3, sp, #16
 800673c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8006740:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006744:	3601      	adds	r6, #1
 8006746:	2e03      	cmp	r6, #3
 8006748:	d80e      	bhi.n	8006768 <find_volume+0x1ec>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800674a:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800674e:	0133      	lsls	r3, r6, #4
 8006750:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006754:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006756:	7903      	ldrb	r3, [r0, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0ed      	beq.n	8006738 <find_volume+0x1bc>
 800675c:	3008      	adds	r0, #8
 800675e:	f7ff fbac 	bl	8005eba <ld_dword>
 8006762:	e7ea      	b.n	800673a <find_volume+0x1be>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006764:	2600      	movs	r6, #0
 8006766:	e7ee      	b.n	8006746 <find_volume+0x1ca>
 8006768:	2600      	movs	r6, #0
 800676a:	e00a      	b.n	8006782 <find_volume+0x206>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800676c:	4639      	mov	r1, r7
 800676e:	4620      	mov	r0, r4
 8006770:	f7ff fec8 	bl	8006504 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006774:	2801      	cmp	r0, #1
 8006776:	f67f af3e 	bls.w	80065f6 <find_volume+0x7a>
 800677a:	3601      	adds	r6, #1
 800677c:	2e03      	cmp	r6, #3
 800677e:	f63f af3a 	bhi.w	80065f6 <find_volume+0x7a>
			bsect = br[i];
 8006782:	ab04      	add	r3, sp, #16
 8006784:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8006788:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800678c:	2f00      	cmp	r7, #0
 800678e:	d1ed      	bne.n	800676c <find_volume+0x1f0>
 8006790:	2003      	movs	r0, #3
 8006792:	e7f2      	b.n	800677a <find_volume+0x1fe>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006794:	f04f 0b02 	mov.w	fp, #2
 8006798:	e790      	b.n	80066bc <find_volume+0x140>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800679a:	f104 005e 	add.w	r0, r4, #94	; 0x5e
 800679e:	f7ff fb87 	bl	8005eb0 <ld_word>
 80067a2:	2800      	cmp	r0, #0
 80067a4:	d15b      	bne.n	800685e <find_volume+0x2e2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80067a6:	f1ba 0f00 	cmp.w	sl, #0
 80067aa:	d15a      	bne.n	8006862 <find_volume+0x2e6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80067ac:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80067b0:	f7ff fb83 	bl	8005eba <ld_dword>
 80067b4:	62a0      	str	r0, [r4, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80067b6:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80067ba:	e7a0      	b.n	80066fe <find_volume+0x182>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80067bc:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80067c0:	e79d      	b.n	80066fe <find_volume+0x182>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80067c2:	f104 0064 	add.w	r0, r4, #100	; 0x64
 80067c6:	f7ff fb73 	bl	8005eb0 <ld_word>
 80067ca:	2801      	cmp	r0, #1
 80067cc:	d1a6      	bne.n	800671c <find_volume+0x1a0>
			&& move_window(fs, bsect + 1) == FR_OK)
 80067ce:	1c79      	adds	r1, r7, #1
 80067d0:	4620      	mov	r0, r4
 80067d2:	f7ff fe7b 	bl	80064cc <move_window>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d1a0      	bne.n	800671c <find_volume+0x1a0>
			fs->fsi_flag = 0;
 80067da:	2300      	movs	r3, #0
 80067dc:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80067de:	f204 2032 	addw	r0, r4, #562	; 0x232
 80067e2:	f7ff fb65 	bl	8005eb0 <ld_word>
 80067e6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80067ea:	4298      	cmp	r0, r3
 80067ec:	d196      	bne.n	800671c <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80067ee:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80067f2:	f7ff fb62 	bl	8005eba <ld_dword>
 80067f6:	4b21      	ldr	r3, [pc, #132]	; (800687c <find_volume+0x300>)
 80067f8:	4298      	cmp	r0, r3
 80067fa:	d18f      	bne.n	800671c <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80067fc:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8006800:	f7ff fb5b 	bl	8005eba <ld_dword>
 8006804:	4b1e      	ldr	r3, [pc, #120]	; (8006880 <find_volume+0x304>)
 8006806:	4298      	cmp	r0, r3
 8006808:	d188      	bne.n	800671c <find_volume+0x1a0>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800680a:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800680e:	f7ff fb54 	bl	8005eba <ld_dword>
 8006812:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006814:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8006818:	f7ff fb4f 	bl	8005eba <ld_dword>
 800681c:	6120      	str	r0, [r4, #16]
 800681e:	e77d      	b.n	800671c <find_volume+0x1a0>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006820:	250b      	movs	r5, #11
}
 8006822:	4628      	mov	r0, r5
 8006824:	b005      	add	sp, #20
 8006826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800682a:	250c      	movs	r5, #12
 800682c:	e7f9      	b.n	8006822 <find_volume+0x2a6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800682e:	2503      	movs	r5, #3
 8006830:	e7f7      	b.n	8006822 <find_volume+0x2a6>
		return FR_WRITE_PROTECTED;
 8006832:	250a      	movs	r5, #10
 8006834:	e7f5      	b.n	8006822 <find_volume+0x2a6>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006836:	2501      	movs	r5, #1
 8006838:	e7f3      	b.n	8006822 <find_volume+0x2a6>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800683a:	250d      	movs	r5, #13
 800683c:	e7f1      	b.n	8006822 <find_volume+0x2a6>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800683e:	250d      	movs	r5, #13
 8006840:	e7ef      	b.n	8006822 <find_volume+0x2a6>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006842:	250d      	movs	r5, #13
 8006844:	e7ed      	b.n	8006822 <find_volume+0x2a6>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006846:	250d      	movs	r5, #13
 8006848:	e7eb      	b.n	8006822 <find_volume+0x2a6>
 800684a:	250d      	movs	r5, #13
 800684c:	e7e9      	b.n	8006822 <find_volume+0x2a6>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800684e:	250d      	movs	r5, #13
 8006850:	e7e7      	b.n	8006822 <find_volume+0x2a6>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006852:	250d      	movs	r5, #13
 8006854:	e7e5      	b.n	8006822 <find_volume+0x2a6>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006856:	250d      	movs	r5, #13
 8006858:	e7e3      	b.n	8006822 <find_volume+0x2a6>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800685a:	250d      	movs	r5, #13
 800685c:	e7e1      	b.n	8006822 <find_volume+0x2a6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800685e:	250d      	movs	r5, #13
 8006860:	e7df      	b.n	8006822 <find_volume+0x2a6>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006862:	250d      	movs	r5, #13
 8006864:	e7dd      	b.n	8006822 <find_volume+0x2a6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006866:	250d      	movs	r5, #13
 8006868:	e7db      	b.n	8006822 <find_volume+0x2a6>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800686a:	250d      	movs	r5, #13
 800686c:	e7d9      	b.n	8006822 <find_volume+0x2a6>
 800686e:	bf00      	nop
 8006870:	200006c0 	.word	0x200006c0
 8006874:	200006e4 	.word	0x200006e4
 8006878:	200006e8 	.word	0x200006e8
 800687c:	41615252 	.word	0x41615252
 8006880:	61417272 	.word	0x61417272

08006884 <put_fat>:
{
 8006884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006888:	2901      	cmp	r1, #1
 800688a:	d97e      	bls.n	800698a <put_fat+0x106>
 800688c:	4607      	mov	r7, r0
 800688e:	460c      	mov	r4, r1
 8006890:	4616      	mov	r6, r2
 8006892:	6983      	ldr	r3, [r0, #24]
 8006894:	428b      	cmp	r3, r1
 8006896:	d97a      	bls.n	800698e <put_fat+0x10a>
		switch (fs->fs_type) {
 8006898:	7803      	ldrb	r3, [r0, #0]
 800689a:	2b02      	cmp	r3, #2
 800689c:	d045      	beq.n	800692a <put_fat+0xa6>
 800689e:	2b03      	cmp	r3, #3
 80068a0:	d057      	beq.n	8006952 <put_fat+0xce>
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d003      	beq.n	80068ae <put_fat+0x2a>
 80068a6:	2502      	movs	r5, #2
}
 80068a8:	4628      	mov	r0, r5
 80068aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 80068ae:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80068b2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80068b4:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 80068b8:	f7ff fe08 	bl	80064cc <move_window>
			if (res != FR_OK) break;
 80068bc:	4605      	mov	r5, r0
 80068be:	2800      	cmp	r0, #0
 80068c0:	d1f2      	bne.n	80068a8 <put_fat+0x24>
			p = fs->win + bc++ % SS(fs);
 80068c2:	f107 0a34 	add.w	sl, r7, #52	; 0x34
 80068c6:	f108 0901 	add.w	r9, r8, #1
 80068ca:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80068ce:	f014 0401 	ands.w	r4, r4, #1
 80068d2:	d01f      	beq.n	8006914 <put_fat+0x90>
 80068d4:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 80068d8:	f003 030f 	and.w	r3, r3, #15
 80068dc:	0132      	lsls	r2, r6, #4
 80068de:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80068e2:	4313      	orrs	r3, r2
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 80068ea:	2301      	movs	r3, #1
 80068ec:	70fb      	strb	r3, [r7, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80068ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068f0:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 80068f4:	4638      	mov	r0, r7
 80068f6:	f7ff fde9 	bl	80064cc <move_window>
			if (res != FR_OK) break;
 80068fa:	4605      	mov	r5, r0
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d1d3      	bne.n	80068a8 <put_fat+0x24>
			p = fs->win + bc % SS(fs);
 8006900:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006904:	b144      	cbz	r4, 8006918 <put_fat+0x94>
 8006906:	f3c6 1207 	ubfx	r2, r6, #4, #8
 800690a:	f80a 2009 	strb.w	r2, [sl, r9]
			fs->wflag = 1;
 800690e:	2301      	movs	r3, #1
 8006910:	70fb      	strb	r3, [r7, #3]
			break;
 8006912:	e7c9      	b.n	80068a8 <put_fat+0x24>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006914:	b2f3      	uxtb	r3, r6
 8006916:	e7e6      	b.n	80068e6 <put_fat+0x62>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006918:	f91a 2009 	ldrsb.w	r2, [sl, r9]
 800691c:	f022 020f 	bic.w	r2, r2, #15
 8006920:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8006924:	4332      	orrs	r2, r6
 8006926:	b2d2      	uxtb	r2, r2
 8006928:	e7ef      	b.n	800690a <put_fat+0x86>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800692a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800692c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8006930:	f7ff fdcc 	bl	80064cc <move_window>
			if (res != FR_OK) break;
 8006934:	4605      	mov	r5, r0
 8006936:	2800      	cmp	r0, #0
 8006938:	d1b6      	bne.n	80068a8 <put_fat+0x24>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800693a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800693e:	0064      	lsls	r4, r4, #1
 8006940:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8006944:	b2b1      	uxth	r1, r6
 8006946:	4420      	add	r0, r4
 8006948:	f7ff fac2 	bl	8005ed0 <st_word>
			fs->wflag = 1;
 800694c:	2301      	movs	r3, #1
 800694e:	70fb      	strb	r3, [r7, #3]
			break;
 8006950:	e7aa      	b.n	80068a8 <put_fat+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006952:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8006954:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8006958:	f7ff fdb8 	bl	80064cc <move_window>
			if (res != FR_OK) break;
 800695c:	4605      	mov	r5, r0
 800695e:	2800      	cmp	r0, #0
 8006960:	d1a2      	bne.n	80068a8 <put_fat+0x24>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006962:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 8006966:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800696a:	00a4      	lsls	r4, r4, #2
 800696c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8006970:	441c      	add	r4, r3
 8006972:	4620      	mov	r0, r4
 8006974:	f7ff faa1 	bl	8005eba <ld_dword>
 8006978:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800697c:	4331      	orrs	r1, r6
 800697e:	4620      	mov	r0, r4
 8006980:	f7ff faaa 	bl	8005ed8 <st_dword>
			fs->wflag = 1;
 8006984:	2301      	movs	r3, #1
 8006986:	70fb      	strb	r3, [r7, #3]
			break;
 8006988:	e78e      	b.n	80068a8 <put_fat+0x24>
	FRESULT res = FR_INT_ERR;
 800698a:	2502      	movs	r5, #2
 800698c:	e78c      	b.n	80068a8 <put_fat+0x24>
 800698e:	2502      	movs	r5, #2
 8006990:	e78a      	b.n	80068a8 <put_fat+0x24>

08006992 <get_fat>:
{
 8006992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8006994:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006996:	2901      	cmp	r1, #1
 8006998:	d956      	bls.n	8006a48 <get_fat+0xb6>
 800699a:	460c      	mov	r4, r1
 800699c:	69ab      	ldr	r3, [r5, #24]
 800699e:	428b      	cmp	r3, r1
 80069a0:	d954      	bls.n	8006a4c <get_fat+0xba>
		switch (fs->fs_type) {
 80069a2:	782b      	ldrb	r3, [r5, #0]
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d02d      	beq.n	8006a04 <get_fat+0x72>
 80069a8:	2b03      	cmp	r3, #3
 80069aa:	d03b      	beq.n	8006a24 <get_fat+0x92>
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d001      	beq.n	80069b4 <get_fat+0x22>
 80069b0:	2001      	movs	r0, #1
 80069b2:	e04a      	b.n	8006a4a <get_fat+0xb8>
			bc = (UINT)clst; bc += bc / 2;
 80069b4:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069b8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80069ba:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 80069be:	4628      	mov	r0, r5
 80069c0:	f7ff fd84 	bl	80064cc <move_window>
 80069c4:	b110      	cbz	r0, 80069cc <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80069c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069ca:	e03e      	b.n	8006a4a <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
 80069cc:	1c77      	adds	r7, r6, #1
 80069ce:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80069d2:	442e      	add	r6, r5
 80069d4:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069d8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80069da:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80069de:	4628      	mov	r0, r5
 80069e0:	f7ff fd74 	bl	80064cc <move_window>
 80069e4:	bba0      	cbnz	r0, 8006a50 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 80069e6:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80069ea:	443d      	add	r5, r7
 80069ec:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 80069f0:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80069f4:	f014 0f01 	tst.w	r4, #1
 80069f8:	d001      	beq.n	80069fe <get_fat+0x6c>
 80069fa:	0900      	lsrs	r0, r0, #4
 80069fc:	e025      	b.n	8006a4a <get_fat+0xb8>
 80069fe:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8006a02:	e022      	b.n	8006a4a <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006a04:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8006a06:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	f7ff fd5e 	bl	80064cc <move_window>
 8006a10:	bb08      	cbnz	r0, 8006a56 <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006a12:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8006a16:	0064      	lsls	r4, r4, #1
 8006a18:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8006a1c:	4420      	add	r0, r4
 8006a1e:	f7ff fa47 	bl	8005eb0 <ld_word>
			break;
 8006a22:	e012      	b.n	8006a4a <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006a24:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8006a26:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f7ff fd4e 	bl	80064cc <move_window>
 8006a30:	b9a0      	cbnz	r0, 8006a5c <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006a32:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8006a36:	00a4      	lsls	r4, r4, #2
 8006a38:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8006a3c:	4420      	add	r0, r4
 8006a3e:	f7ff fa3c 	bl	8005eba <ld_dword>
 8006a42:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8006a46:	e000      	b.n	8006a4a <get_fat+0xb8>
		val = 1;	/* Internal error */
 8006a48:	2001      	movs	r0, #1
}
 8006a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8006a4c:	2001      	movs	r0, #1
 8006a4e:	e7fc      	b.n	8006a4a <get_fat+0xb8>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a54:	e7f9      	b.n	8006a4a <get_fat+0xb8>
 8006a56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a5a:	e7f6      	b.n	8006a4a <get_fat+0xb8>
 8006a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return val;
 8006a60:	e7f3      	b.n	8006a4a <get_fat+0xb8>

08006a62 <dir_sdi>:
{
 8006a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8006a66:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006a6a:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006a6e:	d240      	bcs.n	8006af2 <dir_sdi+0x90>
 8006a70:	4606      	mov	r6, r0
 8006a72:	460f      	mov	r7, r1
 8006a74:	f011 0f1f 	tst.w	r1, #31
 8006a78:	d13d      	bne.n	8006af6 <dir_sdi+0x94>
	dp->dptr = ofs;				/* Set current offset */
 8006a7a:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006a7c:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006a7e:	b92c      	cbnz	r4, 8006a8c <dir_sdi+0x2a>
 8006a80:	f898 3000 	ldrb.w	r3, [r8]
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d901      	bls.n	8006a8c <dir_sdi+0x2a>
		clst = fs->dirbase;
 8006a88:	f8d8 4028 	ldr.w	r4, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006a8c:	b9b4      	cbnz	r4, 8006abc <dir_sdi+0x5a>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006a8e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8006a92:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 8006a96:	d930      	bls.n	8006afa <dir_sdi+0x98>
		dp->sect = fs->dirbase;
 8006a98:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8006a9c:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 8006a9e:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006aa0:	69f3      	ldr	r3, [r6, #28]
 8006aa2:	b393      	cbz	r3, 8006b0a <dir_sdi+0xa8>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006aa4:	eb03 2357 	add.w	r3, r3, r7, lsr #9
 8006aa8:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006aaa:	f108 0334 	add.w	r3, r8, #52	; 0x34
 8006aae:	f3c7 0108 	ubfx	r1, r7, #0, #9
 8006ab2:	4419      	add	r1, r3
 8006ab4:	6231      	str	r1, [r6, #32]
	return FR_OK;
 8006ab6:	2000      	movs	r0, #0
}
 8006ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006abc:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 8006ac0:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8006ac2:	42af      	cmp	r7, r5
 8006ac4:	d30f      	bcc.n	8006ae6 <dir_sdi+0x84>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f7ff ff62 	bl	8006992 <get_fat>
 8006ace:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006ad0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006ad4:	d013      	beq.n	8006afe <dir_sdi+0x9c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006ad6:	2801      	cmp	r0, #1
 8006ad8:	d913      	bls.n	8006b02 <dir_sdi+0xa0>
 8006ada:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006ade:	4283      	cmp	r3, r0
 8006ae0:	d911      	bls.n	8006b06 <dir_sdi+0xa4>
			ofs -= csz;
 8006ae2:	1b7f      	subs	r7, r7, r5
 8006ae4:	e7ed      	b.n	8006ac2 <dir_sdi+0x60>
		dp->sect = clust2sect(fs, clst);
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	4640      	mov	r0, r8
 8006aea:	f7ff fb01 	bl	80060f0 <clust2sect>
 8006aee:	61f0      	str	r0, [r6, #28]
 8006af0:	e7d5      	b.n	8006a9e <dir_sdi+0x3c>
		return FR_INT_ERR;
 8006af2:	2002      	movs	r0, #2
 8006af4:	e7e0      	b.n	8006ab8 <dir_sdi+0x56>
 8006af6:	2002      	movs	r0, #2
 8006af8:	e7de      	b.n	8006ab8 <dir_sdi+0x56>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006afa:	2002      	movs	r0, #2
 8006afc:	e7dc      	b.n	8006ab8 <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006afe:	2001      	movs	r0, #1
 8006b00:	e7da      	b.n	8006ab8 <dir_sdi+0x56>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006b02:	2002      	movs	r0, #2
 8006b04:	e7d8      	b.n	8006ab8 <dir_sdi+0x56>
 8006b06:	2002      	movs	r0, #2
 8006b08:	e7d6      	b.n	8006ab8 <dir_sdi+0x56>
	if (!dp->sect) return FR_INT_ERR;
 8006b0a:	2002      	movs	r0, #2
 8006b0c:	e7d4      	b.n	8006ab8 <dir_sdi+0x56>

08006b0e <create_chain>:
{
 8006b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b12:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 8006b14:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8006b16:	460f      	mov	r7, r1
 8006b18:	b951      	cbnz	r1, 8006b30 <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006b1a:	f8d6 8010 	ldr.w	r8, [r6, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006b1e:	f1b8 0f00 	cmp.w	r8, #0
 8006b22:	d012      	beq.n	8006b4a <create_chain+0x3c>
 8006b24:	69b3      	ldr	r3, [r6, #24]
 8006b26:	4543      	cmp	r3, r8
 8006b28:	d811      	bhi.n	8006b4e <create_chain+0x40>
 8006b2a:	f04f 0801 	mov.w	r8, #1
 8006b2e:	e00e      	b.n	8006b4e <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006b30:	f7ff ff2f 	bl	8006992 <get_fat>
 8006b34:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006b36:	2801      	cmp	r0, #1
 8006b38:	d94c      	bls.n	8006bd4 <create_chain+0xc6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006b3a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006b3e:	d04e      	beq.n	8006bde <create_chain+0xd0>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006b40:	69b2      	ldr	r2, [r6, #24]
 8006b42:	4282      	cmp	r2, r0
 8006b44:	d84b      	bhi.n	8006bde <create_chain+0xd0>
		scl = clst;
 8006b46:	46b8      	mov	r8, r7
 8006b48:	e001      	b.n	8006b4e <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006b4a:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 8006b4e:	4644      	mov	r4, r8
 8006b50:	e00c      	b.n	8006b6c <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006b52:	4621      	mov	r1, r4
 8006b54:	4628      	mov	r0, r5
 8006b56:	f7ff ff1c 	bl	8006992 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	b178      	cbz	r0, 8006b7e <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006b5e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006b62:	bf18      	it	ne
 8006b64:	2801      	cmpne	r0, #1
 8006b66:	d03a      	beq.n	8006bde <create_chain+0xd0>
			if (ncl == scl) return 0;		/* No free cluster */
 8006b68:	4544      	cmp	r4, r8
 8006b6a:	d037      	beq.n	8006bdc <create_chain+0xce>
			ncl++;							/* Next cluster */
 8006b6c:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006b6e:	69b3      	ldr	r3, [r6, #24]
 8006b70:	42a3      	cmp	r3, r4
 8006b72:	d8ee      	bhi.n	8006b52 <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 8006b74:	f1b8 0f01 	cmp.w	r8, #1
 8006b78:	d92e      	bls.n	8006bd8 <create_chain+0xca>
				ncl = 2;
 8006b7a:	2402      	movs	r4, #2
 8006b7c:	e7e9      	b.n	8006b52 <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006b7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b82:	4621      	mov	r1, r4
 8006b84:	4630      	mov	r0, r6
 8006b86:	f7ff fe7d 	bl	8006884 <put_fat>
		if (res == FR_OK && clst != 0) {
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	fab0 f080 	clz	r0, r0
 8006b90:	0940      	lsrs	r0, r0, #5
 8006b92:	2f00      	cmp	r7, #0
 8006b94:	bf08      	it	eq
 8006b96:	2000      	moveq	r0, #0
 8006b98:	b970      	cbnz	r0, 8006bb8 <create_chain+0xaa>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006b9a:	b9a3      	cbnz	r3, 8006bc6 <create_chain+0xb8>
		fs->last_clst = ncl;
 8006b9c:	6134      	str	r4, [r6, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006b9e:	6972      	ldr	r2, [r6, #20]
 8006ba0:	69b3      	ldr	r3, [r6, #24]
 8006ba2:	3b02      	subs	r3, #2
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d801      	bhi.n	8006bac <create_chain+0x9e>
 8006ba8:	3a01      	subs	r2, #1
 8006baa:	6172      	str	r2, [r6, #20]
		fs->fsi_flag |= 1;
 8006bac:	7933      	ldrb	r3, [r6, #4]
 8006bae:	f043 0301 	orr.w	r3, r3, #1
 8006bb2:	7133      	strb	r3, [r6, #4]
 8006bb4:	4623      	mov	r3, r4
 8006bb6:	e012      	b.n	8006bde <create_chain+0xd0>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006bb8:	4622      	mov	r2, r4
 8006bba:	4639      	mov	r1, r7
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	f7ff fe61 	bl	8006884 <put_fat>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	e7e9      	b.n	8006b9a <create_chain+0x8c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d001      	beq.n	8006bce <create_chain+0xc0>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e007      	b.n	8006bde <create_chain+0xd0>
 8006bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bd2:	e004      	b.n	8006bde <create_chain+0xd0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e002      	b.n	8006bde <create_chain+0xd0>
				if (ncl > scl) return 0;	/* No free cluster */
 8006bd8:	2300      	movs	r3, #0
 8006bda:	e000      	b.n	8006bde <create_chain+0xd0>
			if (ncl == scl) return 0;		/* No free cluster */
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006be4 <remove_chain>:
{
 8006be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be6:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 8006be8:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006bea:	2901      	cmp	r1, #1
 8006bec:	d92e      	bls.n	8006c4c <remove_chain+0x68>
 8006bee:	4606      	mov	r6, r0
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	69ab      	ldr	r3, [r5, #24]
 8006bf4:	42a3      	cmp	r3, r4
 8006bf6:	d92b      	bls.n	8006c50 <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006bf8:	b14a      	cbz	r2, 8006c0e <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006bfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bfe:	4628      	mov	r0, r5
 8006c00:	f7ff fe40 	bl	8006884 <put_fat>
		if (res != FR_OK) return res;
 8006c04:	4607      	mov	r7, r0
 8006c06:	b110      	cbz	r0, 8006c0e <remove_chain+0x2a>
 8006c08:	e023      	b.n	8006c52 <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006c0a:	42a2      	cmp	r2, r4
 8006c0c:	d921      	bls.n	8006c52 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006c0e:	4627      	mov	r7, r4
 8006c10:	4621      	mov	r1, r4
 8006c12:	4630      	mov	r0, r6
 8006c14:	f7ff febd 	bl	8006992 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8006c18:	4604      	mov	r4, r0
 8006c1a:	b1e0      	cbz	r0, 8006c56 <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006c1c:	2801      	cmp	r0, #1
 8006c1e:	d01c      	beq.n	8006c5a <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006c20:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006c24:	d01b      	beq.n	8006c5e <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006c26:	2200      	movs	r2, #0
 8006c28:	4639      	mov	r1, r7
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f7ff fe2a 	bl	8006884 <put_fat>
			if (res != FR_OK) return res;
 8006c30:	4607      	mov	r7, r0
 8006c32:	b970      	cbnz	r0, 8006c52 <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006c34:	696b      	ldr	r3, [r5, #20]
 8006c36:	69aa      	ldr	r2, [r5, #24]
 8006c38:	1e91      	subs	r1, r2, #2
 8006c3a:	428b      	cmp	r3, r1
 8006c3c:	d2e5      	bcs.n	8006c0a <remove_chain+0x26>
			fs->free_clst++;
 8006c3e:	3301      	adds	r3, #1
 8006c40:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8006c42:	792b      	ldrb	r3, [r5, #4]
 8006c44:	f043 0301 	orr.w	r3, r3, #1
 8006c48:	712b      	strb	r3, [r5, #4]
 8006c4a:	e7de      	b.n	8006c0a <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006c4c:	2702      	movs	r7, #2
 8006c4e:	e000      	b.n	8006c52 <remove_chain+0x6e>
 8006c50:	2702      	movs	r7, #2
}
 8006c52:	4638      	mov	r0, r7
 8006c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 8006c56:	2700      	movs	r7, #0
 8006c58:	e7fb      	b.n	8006c52 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006c5a:	2702      	movs	r7, #2
 8006c5c:	e7f9      	b.n	8006c52 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006c5e:	2701      	movs	r7, #1
 8006c60:	e7f7      	b.n	8006c52 <remove_chain+0x6e>

08006c62 <dir_next>:
{
 8006c62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
 8006c66:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006c68:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006c6a:	69c3      	ldr	r3, [r0, #28]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d06c      	beq.n	8006d4a <dir_next+0xe8>
 8006c70:	4604      	mov	r4, r0
 8006c72:	4688      	mov	r8, r1
 8006c74:	3520      	adds	r5, #32
 8006c76:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8006c7a:	d268      	bcs.n	8006d4e <dir_next+0xec>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006c7c:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8006c80:	b93f      	cbnz	r7, 8006c92 <dir_next+0x30>
		dp->sect++;				/* Next sector */
 8006c82:	3301      	adds	r3, #1
 8006c84:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8006c86:	6981      	ldr	r1, [r0, #24]
 8006c88:	b979      	cbnz	r1, 8006caa <dir_next+0x48>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006c8a:	8933      	ldrh	r3, [r6, #8]
 8006c8c:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8006c90:	d907      	bls.n	8006ca2 <dir_next+0x40>
	dp->dptr = ofs;						/* Current entry */
 8006c92:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006c94:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8006c98:	443b      	add	r3, r7
 8006c9a:	6223      	str	r3, [r4, #32]
	return FR_OK;
 8006c9c:	2000      	movs	r0, #0
}
 8006c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	61c3      	str	r3, [r0, #28]
 8006ca6:	2004      	movs	r0, #4
 8006ca8:	e7f9      	b.n	8006c9e <dir_next+0x3c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006caa:	8973      	ldrh	r3, [r6, #10]
 8006cac:	3b01      	subs	r3, #1
 8006cae:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 8006cb2:	d1ee      	bne.n	8006c92 <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006cb4:	f7ff fe6d 	bl	8006992 <get_fat>
 8006cb8:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006cba:	2801      	cmp	r0, #1
 8006cbc:	d949      	bls.n	8006d52 <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006cbe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006cc2:	d048      	beq.n	8006d56 <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006cc4:	69b3      	ldr	r3, [r6, #24]
 8006cc6:	4283      	cmp	r3, r0
 8006cc8:	d837      	bhi.n	8006d3a <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 8006cca:	f1b8 0f00 	cmp.w	r8, #0
 8006cce:	d011      	beq.n	8006cf4 <dir_next+0x92>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006cd0:	69a1      	ldr	r1, [r4, #24]
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f7ff ff1b 	bl	8006b0e <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006cd8:	4682      	mov	sl, r0
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d03d      	beq.n	8006d5a <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006cde:	2801      	cmp	r0, #1
 8006ce0:	d03d      	beq.n	8006d5e <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006ce2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006ce6:	d03c      	beq.n	8006d62 <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f7ff fbc5 	bl	8006478 <sync_window>
 8006cee:	b128      	cbz	r0, 8006cfc <dir_next+0x9a>
 8006cf0:	2001      	movs	r0, #1
 8006cf2:	e7d4      	b.n	8006c9e <dir_next+0x3c>
						dp->sect = 0; return FR_NO_FILE;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	61e3      	str	r3, [r4, #28]
 8006cf8:	2004      	movs	r0, #4
 8006cfa:	e7d0      	b.n	8006c9e <dir_next+0x3c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d00:	2100      	movs	r1, #0
 8006d02:	f106 0034 	add.w	r0, r6, #52	; 0x34
 8006d06:	f7ff f8fb 	bl	8005f00 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006d0a:	4651      	mov	r1, sl
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	f7ff f9ef 	bl	80060f0 <clust2sect>
 8006d12:	6330      	str	r0, [r6, #48]	; 0x30
 8006d14:	8973      	ldrh	r3, [r6, #10]
 8006d16:	4599      	cmp	r9, r3
 8006d18:	d20b      	bcs.n	8006d32 <dir_next+0xd0>
						fs->wflag = 1;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006d1e:	4630      	mov	r0, r6
 8006d20:	f7ff fbaa 	bl	8006478 <sync_window>
 8006d24:	b9f8      	cbnz	r0, 8006d66 <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006d26:	f109 0901 	add.w	r9, r9, #1
 8006d2a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	6333      	str	r3, [r6, #48]	; 0x30
 8006d30:	e7f0      	b.n	8006d14 <dir_next+0xb2>
					fs->winsect -= n;							/* Restore window offset */
 8006d32:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8006d34:	eba3 0309 	sub.w	r3, r3, r9
 8006d38:	6333      	str	r3, [r6, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 8006d3a:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 8006d3e:	4651      	mov	r1, sl
 8006d40:	4630      	mov	r0, r6
 8006d42:	f7ff f9d5 	bl	80060f0 <clust2sect>
 8006d46:	61e0      	str	r0, [r4, #28]
 8006d48:	e7a3      	b.n	8006c92 <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006d4a:	2004      	movs	r0, #4
 8006d4c:	e7a7      	b.n	8006c9e <dir_next+0x3c>
 8006d4e:	2004      	movs	r0, #4
 8006d50:	e7a5      	b.n	8006c9e <dir_next+0x3c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006d52:	2002      	movs	r0, #2
 8006d54:	e7a3      	b.n	8006c9e <dir_next+0x3c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006d56:	2001      	movs	r0, #1
 8006d58:	e7a1      	b.n	8006c9e <dir_next+0x3c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006d5a:	2007      	movs	r0, #7
 8006d5c:	e79f      	b.n	8006c9e <dir_next+0x3c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006d5e:	2002      	movs	r0, #2
 8006d60:	e79d      	b.n	8006c9e <dir_next+0x3c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006d62:	2001      	movs	r0, #1
 8006d64:	e79b      	b.n	8006c9e <dir_next+0x3c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006d66:	2001      	movs	r0, #1
 8006d68:	e799      	b.n	8006c9e <dir_next+0x3c>

08006d6a <dir_alloc>:
{
 8006d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6c:	4604      	mov	r4, r0
 8006d6e:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 8006d70:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 8006d72:	2100      	movs	r1, #0
 8006d74:	f7ff fe75 	bl	8006a62 <dir_sdi>
	if (res == FR_OK) {
 8006d78:	4602      	mov	r2, r0
 8006d7a:	b9b8      	cbnz	r0, 8006dac <dir_alloc+0x42>
		n = 0;
 8006d7c:	2500      	movs	r5, #0
 8006d7e:	e006      	b.n	8006d8e <dir_alloc+0x24>
				n = 0;					/* Not a blank entry. Restart to search */
 8006d80:	2500      	movs	r5, #0
			res = dir_next(dp, 1);
 8006d82:	2101      	movs	r1, #1
 8006d84:	4620      	mov	r0, r4
 8006d86:	f7ff ff6c 	bl	8006c62 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	b970      	cbnz	r0, 8006dac <dir_alloc+0x42>
			res = move_window(fs, dp->sect);
 8006d8e:	69e1      	ldr	r1, [r4, #28]
 8006d90:	4638      	mov	r0, r7
 8006d92:	f7ff fb9b 	bl	80064cc <move_window>
			if (res != FR_OK) break;
 8006d96:	4602      	mov	r2, r0
 8006d98:	b940      	cbnz	r0, 8006dac <dir_alloc+0x42>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006d9a:	6a23      	ldr	r3, [r4, #32]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	bf18      	it	ne
 8006da2:	2be5      	cmpne	r3, #229	; 0xe5
 8006da4:	d1ec      	bne.n	8006d80 <dir_alloc+0x16>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006da6:	3501      	adds	r5, #1
 8006da8:	42b5      	cmp	r5, r6
 8006daa:	d1ea      	bne.n	8006d82 <dir_alloc+0x18>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006dac:	2a04      	cmp	r2, #4
 8006dae:	d001      	beq.n	8006db4 <dir_alloc+0x4a>
}
 8006db0:	4610      	mov	r0, r2
 8006db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006db4:	2207      	movs	r2, #7
 8006db6:	e7fb      	b.n	8006db0 <dir_alloc+0x46>

08006db8 <dir_read>:
{
 8006db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
 8006dc0:	6807      	ldr	r7, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 8006dc2:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8006dc6:	464e      	mov	r6, r9
	FRESULT res = FR_NO_FILE;
 8006dc8:	2504      	movs	r5, #4
	while (dp->sect) {
 8006dca:	e02c      	b.n	8006e26 <dir_read+0x6e>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8006dcc:	2b0f      	cmp	r3, #15
 8006dce:	d119      	bne.n	8006e04 <dir_read+0x4c>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8006dd0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006dd4:	d006      	beq.n	8006de4 <dir_read+0x2c>
						sum = dp->dir[LDIR_Chksum];
 8006dd6:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 8006dda:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 8006dde:	6963      	ldr	r3, [r4, #20]
 8006de0:	6323      	str	r3, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;
 8006de2:	4616      	mov	r6, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006de4:	42b2      	cmp	r2, r6
 8006de6:	d001      	beq.n	8006dec <dir_read+0x34>
 8006de8:	26ff      	movs	r6, #255	; 0xff
 8006dea:	e016      	b.n	8006e1a <dir_read+0x62>
 8006dec:	7b4b      	ldrb	r3, [r1, #13]
 8006dee:	454b      	cmp	r3, r9
 8006df0:	d001      	beq.n	8006df6 <dir_read+0x3e>
 8006df2:	26ff      	movs	r6, #255	; 0xff
 8006df4:	e011      	b.n	8006e1a <dir_read+0x62>
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f7ff f9ac 	bl	8006154 <pick_lfn>
 8006dfc:	b378      	cbz	r0, 8006e5e <dir_read+0xa6>
 8006dfe:	3e01      	subs	r6, #1
 8006e00:	b2f6      	uxtb	r6, r6
 8006e02:	e00a      	b.n	8006e1a <dir_read+0x62>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8006e04:	b926      	cbnz	r6, 8006e10 <dir_read+0x58>
 8006e06:	4608      	mov	r0, r1
 8006e08:	f7ff fa77 	bl	80062fa <sum_sfn>
 8006e0c:	4548      	cmp	r0, r9
 8006e0e:	d029      	beq.n	8006e64 <dir_read+0xac>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8006e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e14:	6323      	str	r3, [r4, #48]	; 0x30
 8006e16:	e025      	b.n	8006e64 <dir_read+0xac>
				ord = 0xFF;
 8006e18:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f7ff ff20 	bl	8006c62 <dir_next>
		if (res != FR_OK) break;
 8006e22:	4605      	mov	r5, r0
 8006e24:	b9f0      	cbnz	r0, 8006e64 <dir_read+0xac>
	while (dp->sect) {
 8006e26:	69e1      	ldr	r1, [r4, #28]
 8006e28:	b1e1      	cbz	r1, 8006e64 <dir_read+0xac>
		res = move_window(fs, dp->sect);
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	f7ff fb4e 	bl	80064cc <move_window>
		if (res != FR_OK) break;
 8006e30:	4605      	mov	r5, r0
 8006e32:	b9b8      	cbnz	r0, 8006e64 <dir_read+0xac>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006e34:	6a21      	ldr	r1, [r4, #32]
 8006e36:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 8006e38:	b19a      	cbz	r2, 8006e62 <dir_read+0xaa>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006e3a:	7acb      	ldrb	r3, [r1, #11]
 8006e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e40:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8006e42:	2a2e      	cmp	r2, #46	; 0x2e
 8006e44:	bf18      	it	ne
 8006e46:	2ae5      	cmpne	r2, #229	; 0xe5
 8006e48:	d0e6      	beq.n	8006e18 <dir_read+0x60>
 8006e4a:	f023 0020 	bic.w	r0, r3, #32
 8006e4e:	2808      	cmp	r0, #8
 8006e50:	bf14      	ite	ne
 8006e52:	2000      	movne	r0, #0
 8006e54:	2001      	moveq	r0, #1
 8006e56:	4540      	cmp	r0, r8
 8006e58:	d0b8      	beq.n	8006dcc <dir_read+0x14>
				ord = 0xFF;
 8006e5a:	26ff      	movs	r6, #255	; 0xff
 8006e5c:	e7dd      	b.n	8006e1a <dir_read+0x62>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006e5e:	26ff      	movs	r6, #255	; 0xff
 8006e60:	e7db      	b.n	8006e1a <dir_read+0x62>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006e62:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006e64:	b10d      	cbz	r5, 8006e6a <dir_read+0xb2>
 8006e66:	2300      	movs	r3, #0
 8006e68:	61e3      	str	r3, [r4, #28]
}
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006e70 <create_name>:
{
 8006e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e74:	b083      	sub	sp, #12
 8006e76:	4680      	mov	r8, r0
 8006e78:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006e7a:	f8d1 9000 	ldr.w	r9, [r1]
 8006e7e:	6803      	ldr	r3, [r0, #0]
 8006e80:	68dd      	ldr	r5, [r3, #12]
 8006e82:	2400      	movs	r4, #0
 8006e84:	4623      	mov	r3, r4
 8006e86:	e01d      	b.n	8006ec4 <create_name+0x54>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006e88:	3701      	adds	r7, #1
 8006e8a:	f819 3007 	ldrb.w	r3, [r9, r7]
 8006e8e:	2b5c      	cmp	r3, #92	; 0x5c
 8006e90:	bf18      	it	ne
 8006e92:	2b2f      	cmpne	r3, #47	; 0x2f
 8006e94:	d0f8      	beq.n	8006e88 <create_name+0x18>
	*path = &p[si];						/* Return pointer to the next segment */
 8006e96:	444f      	add	r7, r9
 8006e98:	f8ca 7000 	str.w	r7, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006e9c:	281f      	cmp	r0, #31
 8006e9e:	d82e      	bhi.n	8006efe <create_name+0x8e>
 8006ea0:	f04f 0904 	mov.w	r9, #4
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006ea4:	b374      	cbz	r4, 8006f04 <create_name+0x94>
		w = lfn[di - 1];
 8006ea6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006eaa:	4423      	add	r3, r4
 8006eac:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 8006eb0:	2b20      	cmp	r3, #32
 8006eb2:	bf18      	it	ne
 8006eb4:	2b2e      	cmpne	r3, #46	; 0x2e
 8006eb6:	d125      	bne.n	8006f04 <create_name+0x94>
		di--;
 8006eb8:	3c01      	subs	r4, #1
 8006eba:	e7f3      	b.n	8006ea4 <create_name+0x34>
		lfn[di++] = w;					/* Store the Unicode character */
 8006ebc:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
 8006ec0:	3401      	adds	r4, #1
		w = p[si++];					/* Get a character */
 8006ec2:	463b      	mov	r3, r7
 8006ec4:	1c5f      	adds	r7, r3, #1
 8006ec6:	f819 0003 	ldrb.w	r0, [r9, r3]
		if (w < ' ') break;				/* Break if end of the path name */
 8006eca:	281f      	cmp	r0, #31
 8006ecc:	d9e3      	bls.n	8006e96 <create_name+0x26>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006ece:	285c      	cmp	r0, #92	; 0x5c
 8006ed0:	bf18      	it	ne
 8006ed2:	282f      	cmpne	r0, #47	; 0x2f
 8006ed4:	d0d9      	beq.n	8006e8a <create_name+0x1a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006ed6:	2cfe      	cmp	r4, #254	; 0xfe
 8006ed8:	f200 80d7 	bhi.w	800708a <create_name+0x21a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006edc:	2101      	movs	r1, #1
 8006ede:	f000 fea5 	bl	8007c2c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	f000 80d2 	beq.w	800708e <create_name+0x21e>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006eea:	287f      	cmp	r0, #127	; 0x7f
 8006eec:	d8e6      	bhi.n	8006ebc <create_name+0x4c>
 8006eee:	4601      	mov	r1, r0
 8006ef0:	4869      	ldr	r0, [pc, #420]	; (8007098 <create_name+0x228>)
 8006ef2:	f7ff f817 	bl	8005f24 <chk_chr>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	d0e0      	beq.n	8006ebc <create_name+0x4c>
 8006efa:	2006      	movs	r0, #6
 8006efc:	e06f      	b.n	8006fde <create_name+0x16e>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006efe:	f04f 0900 	mov.w	r9, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006f02:	e7cf      	b.n	8006ea4 <create_name+0x34>
	lfn[di] = 0;						/* LFN is created */
 8006f04:	2300      	movs	r3, #0
 8006f06:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006f0a:	2c00      	cmp	r4, #0
 8006f0c:	f000 80c1 	beq.w	8007092 <create_name+0x222>
	mem_set(dp->fn, ' ', 11);
 8006f10:	220b      	movs	r2, #11
 8006f12:	2120      	movs	r1, #32
 8006f14:	f108 0024 	add.w	r0, r8, #36	; 0x24
 8006f18:	f7fe fff2 	bl	8005f00 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 8006f22:	2a2e      	cmp	r2, #46	; 0x2e
 8006f24:	bf18      	it	ne
 8006f26:	2a20      	cmpne	r2, #32
 8006f28:	d101      	bne.n	8006f2e <create_name+0xbe>
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	e7f7      	b.n	8006f1e <create_name+0xae>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006f2e:	b11b      	cbz	r3, 8006f38 <create_name+0xc8>
 8006f30:	f049 0903 	orr.w	r9, r9, #3
 8006f34:	e000      	b.n	8006f38 <create_name+0xc8>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006f36:	3c01      	subs	r4, #1
 8006f38:	b16c      	cbz	r4, 8006f56 <create_name+0xe6>
 8006f3a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006f3e:	4422      	add	r2, r4
 8006f40:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 8006f44:	2a2e      	cmp	r2, #46	; 0x2e
 8006f46:	d1f6      	bne.n	8006f36 <create_name+0xc6>
 8006f48:	f04f 0b08 	mov.w	fp, #8
 8006f4c:	f04f 0a00 	mov.w	sl, #0
 8006f50:	f8cd a004 	str.w	sl, [sp, #4]
 8006f54:	e008      	b.n	8006f68 <create_name+0xf8>
 8006f56:	46a2      	mov	sl, r4
 8006f58:	f04f 0b08 	mov.w	fp, #8
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	9201      	str	r2, [sp, #4]
 8006f60:	e002      	b.n	8006f68 <create_name+0xf8>
			cf |= NS_LOSS | NS_LFN; continue;
 8006f62:	f049 0903 	orr.w	r9, r9, #3
		w = lfn[si++];					/* Get an LFN character */
 8006f66:	463b      	mov	r3, r7
 8006f68:	1c5f      	adds	r7, r3, #1
 8006f6a:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 8006f6e:	b1be      	cbz	r6, 8006fa0 <create_name+0x130>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006f70:	2e20      	cmp	r6, #32
 8006f72:	d0f6      	beq.n	8006f62 <create_name+0xf2>
 8006f74:	2e2e      	cmp	r6, #46	; 0x2e
 8006f76:	bf14      	ite	ne
 8006f78:	2300      	movne	r3, #0
 8006f7a:	2301      	moveq	r3, #1
 8006f7c:	42bc      	cmp	r4, r7
 8006f7e:	bf08      	it	eq
 8006f80:	2300      	moveq	r3, #0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1ed      	bne.n	8006f62 <create_name+0xf2>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006f86:	42bc      	cmp	r4, r7
 8006f88:	bf18      	it	ne
 8006f8a:	45da      	cmpne	sl, fp
 8006f8c:	d337      	bcc.n	8006ffe <create_name+0x18e>
			if (ni == 11) {				/* Long extension */
 8006f8e:	f1bb 0f0b 	cmp.w	fp, #11
 8006f92:	d027      	beq.n	8006fe4 <create_name+0x174>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006f94:	42bc      	cmp	r4, r7
 8006f96:	d001      	beq.n	8006f9c <create_name+0x12c>
 8006f98:	f049 0903 	orr.w	r9, r9, #3
			if (si > di) break;			/* No extension */
 8006f9c:	42bc      	cmp	r4, r7
 8006f9e:	d224      	bcs.n	8006fea <create_name+0x17a>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006fa0:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 8006fa4:	2be5      	cmp	r3, #229	; 0xe5
 8006fa6:	d061      	beq.n	800706c <create_name+0x1fc>
	if (ni == 8) b <<= 2;
 8006fa8:	f1bb 0f08 	cmp.w	fp, #8
 8006fac:	d062      	beq.n	8007074 <create_name+0x204>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006fae:	9b01      	ldr	r3, [sp, #4]
 8006fb0:	f003 020c 	and.w	r2, r3, #12
 8006fb4:	2a0c      	cmp	r2, #12
 8006fb6:	d003      	beq.n	8006fc0 <create_name+0x150>
 8006fb8:	f003 0303 	and.w	r3, r3, #3
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d101      	bne.n	8006fc4 <create_name+0x154>
 8006fc0:	f049 0902 	orr.w	r9, r9, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006fc4:	f019 0f02 	tst.w	r9, #2
 8006fc8:	d106      	bne.n	8006fd8 <create_name+0x168>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006fca:	9b01      	ldr	r3, [sp, #4]
 8006fcc:	f003 0303 	and.w	r3, r3, #3
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d054      	beq.n	800707e <create_name+0x20e>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006fd4:	2a04      	cmp	r2, #4
 8006fd6:	d055      	beq.n	8007084 <create_name+0x214>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006fd8:	f888 902f 	strb.w	r9, [r8, #47]	; 0x2f
	return FR_OK;
 8006fdc:	2000      	movs	r0, #0
}
 8006fde:	b003      	add	sp, #12
 8006fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 8006fe4:	f049 0903 	orr.w	r9, r9, #3
 8006fe8:	e7da      	b.n	8006fa0 <create_name+0x130>
			b <<= 2; continue;
 8006fea:	9b01      	ldr	r3, [sp, #4]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006ff2:	4623      	mov	r3, r4
 8006ff4:	f04f 0b0b 	mov.w	fp, #11
 8006ff8:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 8006ffc:	e7b4      	b.n	8006f68 <create_name+0xf8>
		if (w >= 0x80) {				/* Non ASCII character */
 8006ffe:	2e7f      	cmp	r6, #127	; 0x7f
 8007000:	d80b      	bhi.n	800701a <create_name+0x1aa>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007002:	b9be      	cbnz	r6, 8007034 <create_name+0x1c4>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007004:	f049 0903 	orr.w	r9, r9, #3
 8007008:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800700a:	eb08 030a 	add.w	r3, r8, sl
 800700e:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007012:	463b      	mov	r3, r7
		dp->fn[i++] = (BYTE)w;
 8007014:	f10a 0a01 	add.w	sl, sl, #1
 8007018:	e7a6      	b.n	8006f68 <create_name+0xf8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800701a:	2100      	movs	r1, #0
 800701c:	4630      	mov	r0, r6
 800701e:	f000 fe05 	bl	8007c2c <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007022:	4606      	mov	r6, r0
 8007024:	b118      	cbz	r0, 800702e <create_name+0x1be>
 8007026:	f1a0 0680 	sub.w	r6, r0, #128	; 0x80
 800702a:	4b1c      	ldr	r3, [pc, #112]	; (800709c <create_name+0x22c>)
 800702c:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
 800702e:	f049 0902 	orr.w	r9, r9, #2
 8007032:	e7e6      	b.n	8007002 <create_name+0x192>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007034:	4631      	mov	r1, r6
 8007036:	481a      	ldr	r0, [pc, #104]	; (80070a0 <create_name+0x230>)
 8007038:	f7fe ff74 	bl	8005f24 <chk_chr>
 800703c:	2800      	cmp	r0, #0
 800703e:	d1e1      	bne.n	8007004 <create_name+0x194>
				if (IsUpper(w)) {		/* ASCII large capital */
 8007040:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 8007044:	b29b      	uxth	r3, r3
 8007046:	2b19      	cmp	r3, #25
 8007048:	d804      	bhi.n	8007054 <create_name+0x1e4>
					b |= 2;
 800704a:	9b01      	ldr	r3, [sp, #4]
 800704c:	f043 0302 	orr.w	r3, r3, #2
 8007050:	9301      	str	r3, [sp, #4]
 8007052:	e7da      	b.n	800700a <create_name+0x19a>
					if (IsLower(w)) {	/* ASCII small capital */
 8007054:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 8007058:	b29b      	uxth	r3, r3
 800705a:	2b19      	cmp	r3, #25
 800705c:	d8d5      	bhi.n	800700a <create_name+0x19a>
						b |= 1; w -= 0x20;
 800705e:	9b01      	ldr	r3, [sp, #4]
 8007060:	f043 0301 	orr.w	r3, r3, #1
 8007064:	9301      	str	r3, [sp, #4]
 8007066:	3e20      	subs	r6, #32
 8007068:	b2b6      	uxth	r6, r6
 800706a:	e7ce      	b.n	800700a <create_name+0x19a>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800706c:	2305      	movs	r3, #5
 800706e:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
 8007072:	e799      	b.n	8006fa8 <create_name+0x138>
	if (ni == 8) b <<= 2;
 8007074:	9b01      	ldr	r3, [sp, #4]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	b2db      	uxtb	r3, r3
 800707a:	9301      	str	r3, [sp, #4]
 800707c:	e797      	b.n	8006fae <create_name+0x13e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800707e:	f049 0910 	orr.w	r9, r9, #16
 8007082:	e7a7      	b.n	8006fd4 <create_name+0x164>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007084:	f049 0908 	orr.w	r9, r9, #8
 8007088:	e7a6      	b.n	8006fd8 <create_name+0x168>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800708a:	2006      	movs	r0, #6
 800708c:	e7a7      	b.n	8006fde <create_name+0x16e>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800708e:	2006      	movs	r0, #6
 8007090:	e7a5      	b.n	8006fde <create_name+0x16e>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007092:	2006      	movs	r0, #6
 8007094:	e7a3      	b.n	8006fde <create_name+0x16e>
 8007096:	bf00      	nop
 8007098:	08007d88 	.word	0x08007d88
 800709c:	08007d9c 	.word	0x08007d9c
 80070a0:	08007d94 	.word	0x08007d94

080070a4 <get_fileinfo>:
{
 80070a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 80070a8:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 80070ac:	2300      	movs	r3, #0
 80070ae:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80070b0:	69c3      	ldr	r3, [r0, #28]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d06b      	beq.n	800718e <get_fileinfo+0xea>
 80070b6:	4606      	mov	r6, r0
 80070b8:	460c      	mov	r4, r1
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80070ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80070bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070c0:	d016      	beq.n	80070f0 <get_fileinfo+0x4c>
			i = j = 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	461d      	mov	r5, r3
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80070c6:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80070ca:	1c5f      	adds	r7, r3, #1
 80070cc:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80070d0:	b158      	cbz	r0, 80070ea <get_fileinfo+0x46>
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80070d2:	2100      	movs	r1, #0
 80070d4:	f000 fdaa 	bl	8007c2c <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80070d8:	b130      	cbz	r0, 80070e8 <get_fileinfo+0x44>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80070da:	2dfe      	cmp	r5, #254	; 0xfe
 80070dc:	d80c      	bhi.n	80070f8 <get_fileinfo+0x54>
				fno->fname[i++] = (TCHAR)w;
 80070de:	1962      	adds	r2, r4, r5
 80070e0:	7590      	strb	r0, [r2, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80070e2:	463b      	mov	r3, r7
				fno->fname[i++] = (TCHAR)w;
 80070e4:	3501      	adds	r5, #1
 80070e6:	e7ee      	b.n	80070c6 <get_fileinfo+0x22>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80070e8:	2500      	movs	r5, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 80070ea:	4425      	add	r5, r4
 80070ec:	2300      	movs	r3, #0
 80070ee:	75ab      	strb	r3, [r5, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80070f0:	7da5      	ldrb	r5, [r4, #22]
	i = j = 0;
 80070f2:	2200      	movs	r2, #0
 80070f4:	4613      	mov	r3, r2
	while (i < 11) {		/* Copy name body and extension */
 80070f6:	e012      	b.n	800711e <get_fileinfo+0x7a>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80070f8:	2500      	movs	r5, #0
 80070fa:	e7f6      	b.n	80070ea <get_fileinfo+0x46>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80070fc:	23e5      	movs	r3, #229	; 0xe5
 80070fe:	e017      	b.n	8007130 <get_fileinfo+0x8c>
			if (!lfv) fno->fname[j] = '.';
 8007100:	b915      	cbnz	r5, 8007108 <get_fileinfo+0x64>
 8007102:	18a0      	adds	r0, r4, r2
 8007104:	272e      	movs	r7, #46	; 0x2e
 8007106:	7587      	strb	r7, [r0, #22]
			fno->altname[j++] = '.';
 8007108:	18a0      	adds	r0, r4, r2
 800710a:	272e      	movs	r7, #46	; 0x2e
 800710c:	7247      	strb	r7, [r0, #9]
 800710e:	3201      	adds	r2, #1
 8007110:	e010      	b.n	8007134 <get_fileinfo+0x90>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8007112:	2010      	movs	r0, #16
 8007114:	e01c      	b.n	8007150 <get_fileinfo+0xac>
			fno->fname[j] = c;
 8007116:	18a0      	adds	r0, r4, r2
 8007118:	7583      	strb	r3, [r0, #22]
		j++;
 800711a:	3201      	adds	r2, #1
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800711c:	460b      	mov	r3, r1
	while (i < 11) {		/* Copy name body and extension */
 800711e:	2b0a      	cmp	r3, #10
 8007120:	d81b      	bhi.n	800715a <get_fileinfo+0xb6>
		c = (TCHAR)dp->dir[i++];
 8007122:	6a30      	ldr	r0, [r6, #32]
 8007124:	1c59      	adds	r1, r3, #1
 8007126:	5cc3      	ldrb	r3, [r0, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007128:	2b20      	cmp	r3, #32
 800712a:	d0f7      	beq.n	800711c <get_fileinfo+0x78>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800712c:	2b05      	cmp	r3, #5
 800712e:	d0e5      	beq.n	80070fc <get_fileinfo+0x58>
		if (i == 9) {						/* Insert a . if extension is exist */
 8007130:	2909      	cmp	r1, #9
 8007132:	d0e5      	beq.n	8007100 <get_fileinfo+0x5c>
		fno->altname[j] = c;
 8007134:	18a0      	adds	r0, r4, r2
 8007136:	7243      	strb	r3, [r0, #9]
		if (!lfv) {
 8007138:	2d00      	cmp	r5, #0
 800713a:	d1ee      	bne.n	800711a <get_fileinfo+0x76>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800713c:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 8007140:	b2c0      	uxtb	r0, r0
 8007142:	2819      	cmp	r0, #25
 8007144:	d8e7      	bhi.n	8007116 <get_fileinfo+0x72>
 8007146:	6a30      	ldr	r0, [r6, #32]
 8007148:	7b07      	ldrb	r7, [r0, #12]
 800714a:	2908      	cmp	r1, #8
 800714c:	d8e1      	bhi.n	8007112 <get_fileinfo+0x6e>
 800714e:	2008      	movs	r0, #8
 8007150:	4207      	tst	r7, r0
 8007152:	d0e0      	beq.n	8007116 <get_fileinfo+0x72>
				c += 0x20;			/* To lower */
 8007154:	3320      	adds	r3, #32
 8007156:	b2db      	uxtb	r3, r3
 8007158:	e7dd      	b.n	8007116 <get_fileinfo+0x72>
	if (!lfv) {
 800715a:	b935      	cbnz	r5, 800716a <get_fileinfo+0xc6>
		fno->fname[j] = 0;
 800715c:	18a3      	adds	r3, r4, r2
 800715e:	2100      	movs	r1, #0
 8007160:	7599      	strb	r1, [r3, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8007162:	6a33      	ldr	r3, [r6, #32]
 8007164:	7b1b      	ldrb	r3, [r3, #12]
 8007166:	b903      	cbnz	r3, 800716a <get_fileinfo+0xc6>
 8007168:	460a      	mov	r2, r1
	fno->altname[j] = 0;	/* Terminate the SFN */
 800716a:	4422      	add	r2, r4
 800716c:	2300      	movs	r3, #0
 800716e:	7253      	strb	r3, [r2, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007170:	6a33      	ldr	r3, [r6, #32]
 8007172:	7adb      	ldrb	r3, [r3, #11]
 8007174:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007176:	6a30      	ldr	r0, [r6, #32]
 8007178:	301c      	adds	r0, #28
 800717a:	f7fe fe9e 	bl	8005eba <ld_dword>
 800717e:	6020      	str	r0, [r4, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007180:	6a30      	ldr	r0, [r6, #32]
 8007182:	3016      	adds	r0, #22
 8007184:	f7fe fe99 	bl	8005eba <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007188:	80e0      	strh	r0, [r4, #6]
 800718a:	0c00      	lsrs	r0, r0, #16
 800718c:	80a0      	strh	r0, [r4, #4]
}
 800718e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007194 <cmp_lfn>:
{
 8007194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007198:	4681      	mov	r9, r0
 800719a:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800719c:	f101 001a 	add.w	r0, r1, #26
 80071a0:	f7fe fe86 	bl	8005eb0 <ld_word>
 80071a4:	bbc8      	cbnz	r0, 800721a <cmp_lfn+0x86>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80071a6:	783e      	ldrb	r6, [r7, #0]
 80071a8:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 80071ac:	3e01      	subs	r6, #1
 80071ae:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80071b2:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80071b6:	f04f 0801 	mov.w	r8, #1
 80071ba:	2500      	movs	r5, #0
 80071bc:	e006      	b.n	80071cc <cmp_lfn+0x38>
				return 0;					/* Not matched */
 80071be:	2000      	movs	r0, #0
 80071c0:	e02c      	b.n	800721c <cmp_lfn+0x88>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80071c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80071c6:	4298      	cmp	r0, r3
 80071c8:	d12a      	bne.n	8007220 <cmp_lfn+0x8c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80071ca:	3501      	adds	r5, #1
 80071cc:	2d0c      	cmp	r5, #12
 80071ce:	d818      	bhi.n	8007202 <cmp_lfn+0x6e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80071d0:	4b17      	ldr	r3, [pc, #92]	; (8007230 <cmp_lfn+0x9c>)
 80071d2:	5d58      	ldrb	r0, [r3, r5]
 80071d4:	4438      	add	r0, r7
 80071d6:	f7fe fe6b 	bl	8005eb0 <ld_word>
 80071da:	4604      	mov	r4, r0
		if (wc) {
 80071dc:	f1b8 0f00 	cmp.w	r8, #0
 80071e0:	d0ef      	beq.n	80071c2 <cmp_lfn+0x2e>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80071e2:	2efe      	cmp	r6, #254	; 0xfe
 80071e4:	d8eb      	bhi.n	80071be <cmp_lfn+0x2a>
 80071e6:	f000 fd3f 	bl	8007c68 <ff_wtoupper>
 80071ea:	4680      	mov	r8, r0
 80071ec:	f106 0a01 	add.w	sl, r6, #1
 80071f0:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
 80071f4:	f000 fd38 	bl	8007c68 <ff_wtoupper>
 80071f8:	4580      	cmp	r8, r0
 80071fa:	d1e0      	bne.n	80071be <cmp_lfn+0x2a>
			wc = uc;
 80071fc:	46a0      	mov	r8, r4
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80071fe:	4656      	mov	r6, sl
 8007200:	e7e3      	b.n	80071ca <cmp_lfn+0x36>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007202:	783b      	ldrb	r3, [r7, #0]
 8007204:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007208:	d00c      	beq.n	8007224 <cmp_lfn+0x90>
 800720a:	f1b8 0f00 	cmp.w	r8, #0
 800720e:	d00b      	beq.n	8007228 <cmp_lfn+0x94>
 8007210:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
 8007214:	b953      	cbnz	r3, 800722c <cmp_lfn+0x98>
	return 1;		/* The part of LFN matched */
 8007216:	2001      	movs	r0, #1
 8007218:	e000      	b.n	800721c <cmp_lfn+0x88>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800721a:	2000      	movs	r0, #0
}
 800721c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007220:	2000      	movs	r0, #0
 8007222:	e7fb      	b.n	800721c <cmp_lfn+0x88>
	return 1;		/* The part of LFN matched */
 8007224:	2001      	movs	r0, #1
 8007226:	e7f9      	b.n	800721c <cmp_lfn+0x88>
 8007228:	2001      	movs	r0, #1
 800722a:	e7f7      	b.n	800721c <cmp_lfn+0x88>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800722c:	2000      	movs	r0, #0
 800722e:	e7f5      	b.n	800721c <cmp_lfn+0x88>
 8007230:	08007e1c 	.word	0x08007e1c

08007234 <dir_find>:
{
 8007234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007238:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800723a:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800723e:	2100      	movs	r1, #0
 8007240:	f7ff fc0f 	bl	8006a62 <dir_sdi>
	if (res != FR_OK) return res;
 8007244:	4606      	mov	r6, r0
 8007246:	2800      	cmp	r0, #0
 8007248:	d164      	bne.n	8007314 <dir_find+0xe0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800724a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800724e:	6323      	str	r3, [r4, #48]	; 0x30
 8007250:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8007254:	464f      	mov	r7, r9
 8007256:	e00a      	b.n	800726e <dir_find+0x3a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800725c:	6323      	str	r3, [r4, #48]	; 0x30
 800725e:	27ff      	movs	r7, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 8007260:	2100      	movs	r1, #0
 8007262:	4620      	mov	r0, r4
 8007264:	f7ff fcfd 	bl	8006c62 <dir_next>
	} while (res == FR_OK);
 8007268:	4606      	mov	r6, r0
 800726a:	2800      	cmp	r0, #0
 800726c:	d152      	bne.n	8007314 <dir_find+0xe0>
		res = move_window(fs, dp->sect);
 800726e:	69e1      	ldr	r1, [r4, #28]
 8007270:	4640      	mov	r0, r8
 8007272:	f7ff f92b 	bl	80064cc <move_window>
		if (res != FR_OK) break;
 8007276:	4606      	mov	r6, r0
 8007278:	2800      	cmp	r0, #0
 800727a:	d14b      	bne.n	8007314 <dir_find+0xe0>
		c = dp->dir[DIR_Name];
 800727c:	6a25      	ldr	r5, [r4, #32]
 800727e:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007280:	2b00      	cmp	r3, #0
 8007282:	d046      	beq.n	8007312 <dir_find+0xde>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007284:	7ae9      	ldrb	r1, [r5, #11]
 8007286:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 800728a:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800728c:	2be5      	cmp	r3, #229	; 0xe5
 800728e:	d0e3      	beq.n	8007258 <dir_find+0x24>
 8007290:	f011 0f08 	tst.w	r1, #8
 8007294:	d001      	beq.n	800729a <dir_find+0x66>
 8007296:	2a0f      	cmp	r2, #15
 8007298:	d1de      	bne.n	8007258 <dir_find+0x24>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800729a:	2a0f      	cmp	r2, #15
 800729c:	d016      	beq.n	80072cc <dir_find+0x98>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800729e:	b927      	cbnz	r7, 80072aa <dir_find+0x76>
 80072a0:	4628      	mov	r0, r5
 80072a2:	f7ff f82a 	bl	80062fa <sum_sfn>
 80072a6:	4548      	cmp	r0, r9
 80072a8:	d034      	beq.n	8007314 <dir_find+0xe0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80072aa:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80072ae:	f013 0f01 	tst.w	r3, #1
 80072b2:	d106      	bne.n	80072c2 <dir_find+0x8e>
 80072b4:	220b      	movs	r2, #11
 80072b6:	f104 0124 	add.w	r1, r4, #36	; 0x24
 80072ba:	4628      	mov	r0, r5
 80072bc:	f7fe fe25 	bl	8005f0a <mem_cmp>
 80072c0:	b340      	cbz	r0, 8007314 <dir_find+0xe0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80072c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072c6:	6323      	str	r3, [r4, #48]	; 0x30
 80072c8:	27ff      	movs	r7, #255	; 0xff
 80072ca:	e7c9      	b.n	8007260 <dir_find+0x2c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80072cc:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 80072d0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80072d4:	d1c4      	bne.n	8007260 <dir_find+0x2c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80072d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80072da:	d006      	beq.n	80072ea <dir_find+0xb6>
						sum = dp->dir[LDIR_Chksum];
 80072dc:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80072e0:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80072e4:	6962      	ldr	r2, [r4, #20]
 80072e6:	6322      	str	r2, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80072e8:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80072ea:	42bb      	cmp	r3, r7
 80072ec:	d001      	beq.n	80072f2 <dir_find+0xbe>
 80072ee:	27ff      	movs	r7, #255	; 0xff
 80072f0:	e7b6      	b.n	8007260 <dir_find+0x2c>
 80072f2:	7b6b      	ldrb	r3, [r5, #13]
 80072f4:	454b      	cmp	r3, r9
 80072f6:	d001      	beq.n	80072fc <dir_find+0xc8>
 80072f8:	27ff      	movs	r7, #255	; 0xff
 80072fa:	e7b1      	b.n	8007260 <dir_find+0x2c>
 80072fc:	4629      	mov	r1, r5
 80072fe:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8007302:	f7ff ff47 	bl	8007194 <cmp_lfn>
 8007306:	b110      	cbz	r0, 800730e <dir_find+0xda>
 8007308:	3f01      	subs	r7, #1
 800730a:	b2ff      	uxtb	r7, r7
 800730c:	e7a8      	b.n	8007260 <dir_find+0x2c>
 800730e:	27ff      	movs	r7, #255	; 0xff
 8007310:	e7a6      	b.n	8007260 <dir_find+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007312:	2604      	movs	r6, #4
}
 8007314:	4630      	mov	r0, r6
 8007316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800731a <follow_path>:
{
 800731a:	b530      	push	{r4, r5, lr}
 800731c:	b083      	sub	sp, #12
 800731e:	4604      	mov	r4, r0
 8007320:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8007322:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007324:	e001      	b.n	800732a <follow_path+0x10>
 8007326:	3301      	adds	r3, #1
 8007328:	9301      	str	r3, [sp, #4]
 800732a:	9b01      	ldr	r3, [sp, #4]
 800732c:	781a      	ldrb	r2, [r3, #0]
 800732e:	2a5c      	cmp	r2, #92	; 0x5c
 8007330:	bf18      	it	ne
 8007332:	2a2f      	cmpne	r2, #47	; 0x2f
 8007334:	d0f7      	beq.n	8007326 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8007336:	2200      	movs	r2, #0
 8007338:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	2b1f      	cmp	r3, #31
 800733e:	d91e      	bls.n	800737e <follow_path+0x64>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007340:	a901      	add	r1, sp, #4
 8007342:	4620      	mov	r0, r4
 8007344:	f7ff fd94 	bl	8006e70 <create_name>
			if (res != FR_OK) break;
 8007348:	4603      	mov	r3, r0
 800734a:	bb00      	cbnz	r0, 800738e <follow_path+0x74>
			res = dir_find(dp);				/* Find an object with the segment name */
 800734c:	4620      	mov	r0, r4
 800734e:	f7ff ff71 	bl	8007234 <dir_find>
			ns = dp->fn[NSFLAG];
 8007352:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8007356:	4603      	mov	r3, r0
 8007358:	b9e0      	cbnz	r0, 8007394 <follow_path+0x7a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800735a:	f012 0f04 	tst.w	r2, #4
 800735e:	d116      	bne.n	800738e <follow_path+0x74>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007360:	79a3      	ldrb	r3, [r4, #6]
 8007362:	f013 0f10 	tst.w	r3, #16
 8007366:	d01c      	beq.n	80073a2 <follow_path+0x88>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007368:	f105 0334 	add.w	r3, r5, #52	; 0x34
 800736c:	6961      	ldr	r1, [r4, #20]
 800736e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007372:	4419      	add	r1, r3
 8007374:	4628      	mov	r0, r5
 8007376:	f7fe fec7 	bl	8006108 <ld_clust>
 800737a:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800737c:	e7e0      	b.n	8007340 <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
 800737e:	2380      	movs	r3, #128	; 0x80
 8007380:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007384:	4611      	mov	r1, r2
 8007386:	4620      	mov	r0, r4
 8007388:	f7ff fb6b 	bl	8006a62 <dir_sdi>
 800738c:	4603      	mov	r3, r0
}
 800738e:	4618      	mov	r0, r3
 8007390:	b003      	add	sp, #12
 8007392:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007394:	2804      	cmp	r0, #4
 8007396:	d1fa      	bne.n	800738e <follow_path+0x74>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007398:	f012 0f04 	tst.w	r2, #4
 800739c:	d1f7      	bne.n	800738e <follow_path+0x74>
 800739e:	2305      	movs	r3, #5
 80073a0:	e7f5      	b.n	800738e <follow_path+0x74>
				res = FR_NO_PATH; break;
 80073a2:	2305      	movs	r3, #5
 80073a4:	e7f3      	b.n	800738e <follow_path+0x74>
	...

080073a8 <dir_register>:
{
 80073a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073ac:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 80073ae:	6806      	ldr	r6, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80073b0:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 80073b4:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 80073b8:	f040 808e 	bne.w	80074d8 <dir_register+0x130>
 80073bc:	4607      	mov	r7, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80073be:	2400      	movs	r4, #0
 80073c0:	e000      	b.n	80073c4 <dir_register+0x1c>
 80073c2:	3401      	adds	r4, #1
 80073c4:	68f3      	ldr	r3, [r6, #12]
 80073c6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1f9      	bne.n	80073c2 <dir_register+0x1a>
	mem_cpy(sn, dp->fn, 12);
 80073ce:	f107 0824 	add.w	r8, r7, #36	; 0x24
 80073d2:	220c      	movs	r2, #12
 80073d4:	4641      	mov	r1, r8
 80073d6:	a801      	add	r0, sp, #4
 80073d8:	f7fe fd88 	bl	8005eec <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80073dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80073e0:	f013 0f01 	tst.w	r3, #1
 80073e4:	d01c      	beq.n	8007420 <dir_register+0x78>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80073e6:	2340      	movs	r3, #64	; 0x40
 80073e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80073ec:	2501      	movs	r5, #1
 80073ee:	e000      	b.n	80073f2 <dir_register+0x4a>
 80073f0:	3501      	adds	r5, #1
 80073f2:	2d63      	cmp	r5, #99	; 0x63
 80073f4:	d80b      	bhi.n	800740e <dir_register+0x66>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80073f6:	462b      	mov	r3, r5
 80073f8:	68f2      	ldr	r2, [r6, #12]
 80073fa:	a901      	add	r1, sp, #4
 80073fc:	4640      	mov	r0, r8
 80073fe:	f7fe ff27 	bl	8006250 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007402:	4638      	mov	r0, r7
 8007404:	f7ff ff16 	bl	8007234 <dir_find>
			if (res != FR_OK) break;
 8007408:	4681      	mov	r9, r0
 800740a:	2800      	cmp	r0, #0
 800740c:	d0f0      	beq.n	80073f0 <dir_register+0x48>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800740e:	2d64      	cmp	r5, #100	; 0x64
 8007410:	d065      	beq.n	80074de <dir_register+0x136>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007412:	f1b9 0f04 	cmp.w	r9, #4
 8007416:	d11b      	bne.n	8007450 <dir_register+0xa8>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007418:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800741c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007420:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8007424:	f013 0f02 	tst.w	r3, #2
 8007428:	d006      	beq.n	8007438 <dir_register+0x90>
 800742a:	340c      	adds	r4, #12
 800742c:	4b2d      	ldr	r3, [pc, #180]	; (80074e4 <dir_register+0x13c>)
 800742e:	fba3 3404 	umull	r3, r4, r3, r4
 8007432:	08a4      	lsrs	r4, r4, #2
 8007434:	3401      	adds	r4, #1
 8007436:	e000      	b.n	800743a <dir_register+0x92>
 8007438:	2401      	movs	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800743a:	4621      	mov	r1, r4
 800743c:	4638      	mov	r0, r7
 800743e:	f7ff fc94 	bl	8006d6a <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007442:	4681      	mov	r9, r0
 8007444:	b908      	cbnz	r0, 800744a <dir_register+0xa2>
 8007446:	3c01      	subs	r4, #1
 8007448:	d106      	bne.n	8007458 <dir_register+0xb0>
	if (res == FR_OK) {
 800744a:	f1b9 0f00 	cmp.w	r9, #0
 800744e:	d029      	beq.n	80074a4 <dir_register+0xfc>
}
 8007450:	4648      	mov	r0, r9
 8007452:	b005      	add	sp, #20
 8007454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007458:	6979      	ldr	r1, [r7, #20]
 800745a:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 800745e:	4638      	mov	r0, r7
 8007460:	f7ff faff 	bl	8006a62 <dir_sdi>
		if (res == FR_OK) {
 8007464:	4681      	mov	r9, r0
 8007466:	2800      	cmp	r0, #0
 8007468:	d1ef      	bne.n	800744a <dir_register+0xa2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800746a:	4640      	mov	r0, r8
 800746c:	f7fe ff45 	bl	80062fa <sum_sfn>
 8007470:	4605      	mov	r5, r0
				res = move_window(fs, dp->sect);
 8007472:	69f9      	ldr	r1, [r7, #28]
 8007474:	4630      	mov	r0, r6
 8007476:	f7ff f829 	bl	80064cc <move_window>
				if (res != FR_OK) break;
 800747a:	4681      	mov	r9, r0
 800747c:	2800      	cmp	r0, #0
 800747e:	d1e4      	bne.n	800744a <dir_register+0xa2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007480:	462b      	mov	r3, r5
 8007482:	b2e2      	uxtb	r2, r4
 8007484:	6a39      	ldr	r1, [r7, #32]
 8007486:	68f0      	ldr	r0, [r6, #12]
 8007488:	f7fe fea6 	bl	80061d8 <put_lfn>
				fs->wflag = 1;
 800748c:	2301      	movs	r3, #1
 800748e:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007490:	2100      	movs	r1, #0
 8007492:	4638      	mov	r0, r7
 8007494:	f7ff fbe5 	bl	8006c62 <dir_next>
			} while (res == FR_OK && --nent);
 8007498:	4681      	mov	r9, r0
 800749a:	2800      	cmp	r0, #0
 800749c:	d1d5      	bne.n	800744a <dir_register+0xa2>
 800749e:	3c01      	subs	r4, #1
 80074a0:	d1e7      	bne.n	8007472 <dir_register+0xca>
 80074a2:	e7d2      	b.n	800744a <dir_register+0xa2>
		res = move_window(fs, dp->sect);
 80074a4:	69f9      	ldr	r1, [r7, #28]
 80074a6:	4630      	mov	r0, r6
 80074a8:	f7ff f810 	bl	80064cc <move_window>
		if (res == FR_OK) {
 80074ac:	4681      	mov	r9, r0
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d1ce      	bne.n	8007450 <dir_register+0xa8>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80074b2:	2220      	movs	r2, #32
 80074b4:	2100      	movs	r1, #0
 80074b6:	6a38      	ldr	r0, [r7, #32]
 80074b8:	f7fe fd22 	bl	8005f00 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80074bc:	220b      	movs	r2, #11
 80074be:	4641      	mov	r1, r8
 80074c0:	6a38      	ldr	r0, [r7, #32]
 80074c2:	f7fe fd13 	bl	8005eec <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80074c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074ca:	6a3a      	ldr	r2, [r7, #32]
 80074cc:	f003 0318 	and.w	r3, r3, #24
 80074d0:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 80074d2:	2301      	movs	r3, #1
 80074d4:	70f3      	strb	r3, [r6, #3]
 80074d6:	e7bb      	b.n	8007450 <dir_register+0xa8>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80074d8:	f04f 0906 	mov.w	r9, #6
 80074dc:	e7b8      	b.n	8007450 <dir_register+0xa8>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80074de:	f04f 0907 	mov.w	r9, #7
 80074e2:	e7b5      	b.n	8007450 <dir_register+0xa8>
 80074e4:	4ec4ec4f 	.word	0x4ec4ec4f

080074e8 <sync_fs>:
{
 80074e8:	b570      	push	{r4, r5, r6, lr}
 80074ea:	4604      	mov	r4, r0
	res = sync_window(fs);
 80074ec:	f7fe ffc4 	bl	8006478 <sync_window>
	if (res == FR_OK) {
 80074f0:	4605      	mov	r5, r0
 80074f2:	b948      	cbnz	r0, 8007508 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80074f4:	7823      	ldrb	r3, [r4, #0]
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d008      	beq.n	800750c <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80074fa:	2200      	movs	r2, #0
 80074fc:	4611      	mov	r1, r2
 80074fe:	7860      	ldrb	r0, [r4, #1]
 8007500:	f7fe fcca 	bl	8005e98 <disk_ioctl>
 8007504:	b100      	cbz	r0, 8007508 <sync_fs+0x20>
 8007506:	2501      	movs	r5, #1
}
 8007508:	4628      	mov	r0, r5
 800750a:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800750c:	7923      	ldrb	r3, [r4, #4]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d1f3      	bne.n	80074fa <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 8007512:	f104 0634 	add.w	r6, r4, #52	; 0x34
 8007516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800751a:	2100      	movs	r1, #0
 800751c:	4630      	mov	r0, r6
 800751e:	f7fe fcef 	bl	8005f00 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007522:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007526:	f204 2032 	addw	r0, r4, #562	; 0x232
 800752a:	f7fe fcd1 	bl	8005ed0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800752e:	490f      	ldr	r1, [pc, #60]	; (800756c <sync_fs+0x84>)
 8007530:	4630      	mov	r0, r6
 8007532:	f7fe fcd1 	bl	8005ed8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007536:	490e      	ldr	r1, [pc, #56]	; (8007570 <sync_fs+0x88>)
 8007538:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800753c:	f7fe fccc 	bl	8005ed8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007540:	6961      	ldr	r1, [r4, #20]
 8007542:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8007546:	f7fe fcc7 	bl	8005ed8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800754a:	6921      	ldr	r1, [r4, #16]
 800754c:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8007550:	f7fe fcc2 	bl	8005ed8 <st_dword>
			fs->winsect = fs->volbase + 1;
 8007554:	6a22      	ldr	r2, [r4, #32]
 8007556:	3201      	adds	r2, #1
 8007558:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800755a:	2301      	movs	r3, #1
 800755c:	4631      	mov	r1, r6
 800755e:	7860      	ldrb	r0, [r4, #1]
 8007560:	f7fe fc8e 	bl	8005e80 <disk_write>
			fs->fsi_flag = 0;
 8007564:	2300      	movs	r3, #0
 8007566:	7123      	strb	r3, [r4, #4]
 8007568:	e7c7      	b.n	80074fa <sync_fs+0x12>
 800756a:	bf00      	nop
 800756c:	41615252 	.word	0x41615252
 8007570:	61417272 	.word	0x61417272

08007574 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007574:	b570      	push	{r4, r5, r6, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	9001      	str	r0, [sp, #4]
 800757a:	9100      	str	r1, [sp, #0]
 800757c:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800757e:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007580:	a803      	add	r0, sp, #12
 8007582:	f7fe ff32 	bl	80063ea <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007586:	1e04      	subs	r4, r0, #0
 8007588:	db20      	blt.n	80075cc <f_mount+0x58>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800758a:	4b11      	ldr	r3, [pc, #68]	; (80075d0 <f_mount+0x5c>)
 800758c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]

	if (cfs) {
 8007590:	b125      	cbz	r5, 800759c <f_mount+0x28>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007592:	4628      	mov	r0, r5
 8007594:	f7fe fd8e 	bl	80060b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007598:	2300      	movs	r3, #0
 800759a:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
 800759c:	9b01      	ldr	r3, [sp, #4]
 800759e:	b10b      	cbz	r3, 80075a4 <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 80075a0:	2200      	movs	r2, #0
 80075a2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80075a4:	9b01      	ldr	r3, [sp, #4]
 80075a6:	4a0a      	ldr	r2, [pc, #40]	; (80075d0 <f_mount+0x5c>)
 80075a8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80075ac:	1e72      	subs	r2, r6, #1
 80075ae:	bf18      	it	ne
 80075b0:	2201      	movne	r2, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	bf08      	it	eq
 80075b6:	f042 0201 	orreq.w	r2, r2, #1
 80075ba:	b112      	cbz	r2, 80075c2 <f_mount+0x4e>
 80075bc:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80075be:	b004      	add	sp, #16
 80075c0:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80075c2:	a901      	add	r1, sp, #4
 80075c4:	4668      	mov	r0, sp
 80075c6:	f7fe ffd9 	bl	800657c <find_volume>
	LEAVE_FF(fs, res);
 80075ca:	e7f8      	b.n	80075be <f_mount+0x4a>
	if (vol < 0) return FR_INVALID_DRIVE;
 80075cc:	200b      	movs	r0, #11
 80075ce:	e7f6      	b.n	80075be <f_mount+0x4a>
 80075d0:	200006c0 	.word	0x200006c0

080075d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80075d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075d8:	b093      	sub	sp, #76	; 0x4c
 80075da:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80075dc:	2800      	cmp	r0, #0
 80075de:	f000 810d 	beq.w	80077fc <f_open+0x228>
 80075e2:	4615      	mov	r5, r2
 80075e4:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80075e6:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 80075ea:	463a      	mov	r2, r7
 80075ec:	a903      	add	r1, sp, #12
 80075ee:	a801      	add	r0, sp, #4
 80075f0:	f7fe ffc4 	bl	800657c <find_volume>
	if (res == FR_OK) {
 80075f4:	4604      	mov	r4, r0
 80075f6:	b130      	cbz	r0, 8007606 <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80075f8:	b10c      	cbz	r4, 80075fe <f_open+0x2a>
 80075fa:	2300      	movs	r3, #0
 80075fc:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 80075fe:	4620      	mov	r0, r4
 8007600:	b013      	add	sp, #76	; 0x4c
 8007602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 8007606:	9b03      	ldr	r3, [sp, #12]
 8007608:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800760a:	9901      	ldr	r1, [sp, #4]
 800760c:	a804      	add	r0, sp, #16
 800760e:	f7ff fe84 	bl	800731a <follow_path>
		if (res == FR_OK) {
 8007612:	4604      	mov	r4, r0
 8007614:	b960      	cbnz	r0, 8007630 <f_open+0x5c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007616:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800761a:	2b00      	cmp	r3, #0
 800761c:	db50      	blt.n	80076c0 <f_open+0xec>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800761e:	f037 0301 	bics.w	r3, r7, #1
 8007622:	bf14      	ite	ne
 8007624:	2101      	movne	r1, #1
 8007626:	2100      	moveq	r1, #0
 8007628:	a804      	add	r0, sp, #16
 800762a:	f7fe fc83 	bl	8005f34 <chk_lock>
 800762e:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007630:	f015 0f1c 	tst.w	r5, #28
 8007634:	d05a      	beq.n	80076ec <f_open+0x118>
			if (res != FR_OK) {					/* No file, create new */
 8007636:	2c00      	cmp	r4, #0
 8007638:	d04e      	beq.n	80076d8 <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800763a:	2c04      	cmp	r4, #4
 800763c:	d042      	beq.n	80076c4 <f_open+0xf0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800763e:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007642:	2c00      	cmp	r4, #0
 8007644:	d161      	bne.n	800770a <f_open+0x136>
 8007646:	f017 0f08 	tst.w	r7, #8
 800764a:	d05e      	beq.n	800770a <f_open+0x136>
				dw = GET_FATTIME();
 800764c:	f7fe fb1a 	bl	8005c84 <get_fattime>
 8007650:	4605      	mov	r5, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007652:	4601      	mov	r1, r0
 8007654:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007656:	300e      	adds	r0, #14
 8007658:	f7fe fc3e 	bl	8005ed8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800765c:	4629      	mov	r1, r5
 800765e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007660:	3016      	adds	r0, #22
 8007662:	f7fe fc39 	bl	8005ed8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007666:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007668:	2220      	movs	r2, #32
 800766a:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800766c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007670:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8007674:	4649      	mov	r1, r9
 8007676:	4640      	mov	r0, r8
 8007678:	f7fe fd46 	bl	8006108 <ld_clust>
 800767c:	4605      	mov	r5, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800767e:	2200      	movs	r2, #0
 8007680:	4649      	mov	r1, r9
 8007682:	4640      	mov	r0, r8
 8007684:	f7fe fd53 	bl	800612e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007688:	2100      	movs	r1, #0
 800768a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800768c:	301c      	adds	r0, #28
 800768e:	f7fe fc23 	bl	8005ed8 <st_dword>
					fs->wflag = 1;
 8007692:	9b03      	ldr	r3, [sp, #12]
 8007694:	2201      	movs	r2, #1
 8007696:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8007698:	b3bd      	cbz	r5, 800770a <f_open+0x136>
						dw = fs->winsect;
 800769a:	9b03      	ldr	r3, [sp, #12]
 800769c:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 80076a0:	2200      	movs	r2, #0
 80076a2:	4629      	mov	r1, r5
 80076a4:	a804      	add	r0, sp, #16
 80076a6:	f7ff fa9d 	bl	8006be4 <remove_chain>
						if (res == FR_OK) {
 80076aa:	4604      	mov	r4, r0
 80076ac:	bb68      	cbnz	r0, 800770a <f_open+0x136>
							res = move_window(fs, dw);
 80076ae:	4641      	mov	r1, r8
 80076b0:	9803      	ldr	r0, [sp, #12]
 80076b2:	f7fe ff0b 	bl	80064cc <move_window>
 80076b6:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80076b8:	3d01      	subs	r5, #1
 80076ba:	9b03      	ldr	r3, [sp, #12]
 80076bc:	611d      	str	r5, [r3, #16]
 80076be:	e024      	b.n	800770a <f_open+0x136>
				res = FR_INVALID_NAME;
 80076c0:	2406      	movs	r4, #6
 80076c2:	e7b5      	b.n	8007630 <f_open+0x5c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80076c4:	f7fe fc74 	bl	8005fb0 <enq_lock>
 80076c8:	b908      	cbnz	r0, 80076ce <f_open+0xfa>
 80076ca:	2412      	movs	r4, #18
 80076cc:	e7b7      	b.n	800763e <f_open+0x6a>
 80076ce:	a804      	add	r0, sp, #16
 80076d0:	f7ff fe6a 	bl	80073a8 <dir_register>
 80076d4:	4604      	mov	r4, r0
 80076d6:	e7b2      	b.n	800763e <f_open+0x6a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80076d8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80076dc:	f013 0f11 	tst.w	r3, #17
 80076e0:	d112      	bne.n	8007708 <f_open+0x134>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80076e2:	f015 0f04 	tst.w	r5, #4
 80076e6:	d0ac      	beq.n	8007642 <f_open+0x6e>
 80076e8:	2408      	movs	r4, #8
 80076ea:	e00e      	b.n	800770a <f_open+0x136>
			if (res == FR_OK) {					/* Following succeeded */
 80076ec:	b96c      	cbnz	r4, 800770a <f_open+0x136>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80076ee:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80076f2:	f013 0f10 	tst.w	r3, #16
 80076f6:	d14b      	bne.n	8007790 <f_open+0x1bc>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80076f8:	f015 0f02 	tst.w	r5, #2
 80076fc:	d005      	beq.n	800770a <f_open+0x136>
 80076fe:	f013 0f01 	tst.w	r3, #1
 8007702:	d002      	beq.n	800770a <f_open+0x136>
						res = FR_DENIED;
 8007704:	2407      	movs	r4, #7
 8007706:	e016      	b.n	8007736 <f_open+0x162>
					res = FR_DENIED;
 8007708:	2407      	movs	r4, #7
		if (res == FR_OK) {
 800770a:	b9a4      	cbnz	r4, 8007736 <f_open+0x162>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800770c:	f017 0f08 	tst.w	r7, #8
 8007710:	d001      	beq.n	8007716 <f_open+0x142>
				mode |= FA_MODIFIED;
 8007712:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007716:	9b03      	ldr	r3, [sp, #12]
 8007718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771a:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800771c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800771e:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007720:	f037 0301 	bics.w	r3, r7, #1
 8007724:	bf14      	ite	ne
 8007726:	2101      	movne	r1, #1
 8007728:	2100      	moveq	r1, #0
 800772a:	a804      	add	r0, sp, #16
 800772c:	f7fe fc50 	bl	8005fd0 <inc_lock>
 8007730:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007732:	2800      	cmp	r0, #0
 8007734:	d060      	beq.n	80077f8 <f_open+0x224>
		if (res == FR_OK) {
 8007736:	2c00      	cmp	r4, #0
 8007738:	f47f af5e 	bne.w	80075f8 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800773c:	9d03      	ldr	r5, [sp, #12]
 800773e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8007742:	4641      	mov	r1, r8
 8007744:	4628      	mov	r0, r5
 8007746:	f7fe fcdf 	bl	8006108 <ld_clust>
 800774a:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800774c:	f108 001c 	add.w	r0, r8, #28
 8007750:	f7fe fbb3 	bl	8005eba <ld_dword>
 8007754:	60f0      	str	r0, [r6, #12]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007756:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
 8007758:	88eb      	ldrh	r3, [r5, #6]
 800775a:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 800775c:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 800775e:	2100      	movs	r1, #0
 8007760:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007762:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007764:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007766:	f106 082c 	add.w	r8, r6, #44	; 0x2c
 800776a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800776e:	4640      	mov	r0, r8
 8007770:	f7fe fbc6 	bl	8005f00 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007774:	f017 0f20 	tst.w	r7, #32
 8007778:	f43f af3e 	beq.w	80075f8 <f_open+0x24>
 800777c:	68f5      	ldr	r5, [r6, #12]
 800777e:	2d00      	cmp	r5, #0
 8007780:	f43f af3a 	beq.w	80075f8 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007784:	61b5      	str	r5, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007786:	9b03      	ldr	r3, [sp, #12]
 8007788:	895f      	ldrh	r7, [r3, #10]
 800778a:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800778c:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800778e:	e005      	b.n	800779c <f_open+0x1c8>
					res = FR_NO_FILE;
 8007790:	2404      	movs	r4, #4
 8007792:	e7d0      	b.n	8007736 <f_open+0x162>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007794:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8007798:	d00f      	beq.n	80077ba <f_open+0x1e6>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800779a:	1bed      	subs	r5, r5, r7
 800779c:	fab4 f384 	clz	r3, r4
 80077a0:	095b      	lsrs	r3, r3, #5
 80077a2:	42bd      	cmp	r5, r7
 80077a4:	bf98      	it	ls
 80077a6:	2300      	movls	r3, #0
 80077a8:	b14b      	cbz	r3, 80077be <f_open+0x1ea>
					clst = get_fat(&fp->obj, clst);
 80077aa:	4630      	mov	r0, r6
 80077ac:	f7ff f8f1 	bl	8006992 <get_fat>
 80077b0:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80077b2:	2801      	cmp	r0, #1
 80077b4:	d8ee      	bhi.n	8007794 <f_open+0x1c0>
 80077b6:	2402      	movs	r4, #2
 80077b8:	e7ec      	b.n	8007794 <f_open+0x1c0>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80077ba:	2401      	movs	r4, #1
 80077bc:	e7ed      	b.n	800779a <f_open+0x1c6>
				fp->clust = clst;
 80077be:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80077c0:	2c00      	cmp	r4, #0
 80077c2:	f47f af19 	bne.w	80075f8 <f_open+0x24>
 80077c6:	f3c5 0308 	ubfx	r3, r5, #0, #9
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f43f af14 	beq.w	80075f8 <f_open+0x24>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80077d0:	9f03      	ldr	r7, [sp, #12]
 80077d2:	4638      	mov	r0, r7
 80077d4:	f7fe fc8c 	bl	80060f0 <clust2sect>
 80077d8:	b908      	cbnz	r0, 80077de <f_open+0x20a>
						res = FR_INT_ERR;
 80077da:	2402      	movs	r4, #2
 80077dc:	e70d      	b.n	80075fa <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80077de:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 80077e2:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	4641      	mov	r1, r8
 80077e8:	7878      	ldrb	r0, [r7, #1]
 80077ea:	f7fe fb3d 	bl	8005e68 <disk_read>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	f43f af02 	beq.w	80075f8 <f_open+0x24>
 80077f4:	2401      	movs	r4, #1
 80077f6:	e700      	b.n	80075fa <f_open+0x26>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80077f8:	2402      	movs	r4, #2
 80077fa:	e6fd      	b.n	80075f8 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 80077fc:	2409      	movs	r4, #9
 80077fe:	e6fe      	b.n	80075fe <f_open+0x2a>

08007800 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007804:	b085      	sub	sp, #20
 8007806:	4604      	mov	r4, r0
 8007808:	460e      	mov	r6, r1
 800780a:	4617      	mov	r7, r2
 800780c:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800780e:	2300      	movs	r3, #0
 8007810:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007814:	a903      	add	r1, sp, #12
 8007816:	f7fe fe0c 	bl	8006432 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800781a:	9001      	str	r0, [sp, #4]
 800781c:	2800      	cmp	r0, #0
 800781e:	f040 80a8 	bne.w	8007972 <f_read+0x172>
 8007822:	7d63      	ldrb	r3, [r4, #21]
 8007824:	9301      	str	r3, [sp, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	f040 80a3 	bne.w	8007972 <f_read+0x172>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800782c:	7d23      	ldrb	r3, [r4, #20]
 800782e:	f013 0f01 	tst.w	r3, #1
 8007832:	f000 80bd 	beq.w	80079b0 <f_read+0x1b0>
	remain = fp->obj.objsize - fp->fptr;
 8007836:	68e5      	ldr	r5, [r4, #12]
 8007838:	69a3      	ldr	r3, [r4, #24]
 800783a:	1aed      	subs	r5, r5, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800783c:	42bd      	cmp	r5, r7
 800783e:	d35c      	bcc.n	80078fa <f_read+0xfa>
 8007840:	463d      	mov	r5, r7
 8007842:	e05a      	b.n	80078fa <f_read+0xfa>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007844:	69e1      	ldr	r1, [r4, #28]
 8007846:	4620      	mov	r0, r4
 8007848:	f7ff f8a3 	bl	8006992 <get_fat>
 800784c:	e065      	b.n	800791a <f_read+0x11a>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800784e:	f04f 0a02 	mov.w	sl, #2
 8007852:	f884 a015 	strb.w	sl, [r4, #21]
 8007856:	f8cd a004 	str.w	sl, [sp, #4]
 800785a:	e08a      	b.n	8007972 <f_read+0x172>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800785c:	f04f 0a01 	mov.w	sl, #1
 8007860:	f884 a015 	strb.w	sl, [r4, #21]
 8007864:	f8cd a004 	str.w	sl, [sp, #4]
 8007868:	e083      	b.n	8007972 <f_read+0x172>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 800786a:	f04f 0a02 	mov.w	sl, #2
 800786e:	f884 a015 	strb.w	sl, [r4, #21]
 8007872:	f8cd a004 	str.w	sl, [sp, #4]
 8007876:	e07c      	b.n	8007972 <f_read+0x172>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007878:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800787c:	2b00      	cmp	r3, #0
 800787e:	db02      	blt.n	8007886 <f_read+0x86>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007880:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 8007884:	e02f      	b.n	80078e6 <f_read+0xe6>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007886:	6a20      	ldr	r0, [r4, #32]
 8007888:	eba0 0009 	sub.w	r0, r0, r9
 800788c:	4550      	cmp	r0, sl
 800788e:	d2f7      	bcs.n	8007880 <f_read+0x80>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007894:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8007898:	eb06 2040 	add.w	r0, r6, r0, lsl #9
 800789c:	f7fe fb26 	bl	8005eec <mem_cpy>
 80078a0:	e7ee      	b.n	8007880 <f_read+0x80>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80078a2:	6a22      	ldr	r2, [r4, #32]
 80078a4:	454a      	cmp	r2, r9
 80078a6:	d00d      	beq.n	80078c4 <f_read+0xc4>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80078a8:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	db64      	blt.n	800797a <f_read+0x17a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80078b0:	2301      	movs	r3, #1
 80078b2:	464a      	mov	r2, r9
 80078b4:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80078b8:	9803      	ldr	r0, [sp, #12]
 80078ba:	7840      	ldrb	r0, [r0, #1]
 80078bc:	f7fe fad4 	bl	8005e68 <disk_read>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	d16e      	bne.n	80079a2 <f_read+0x1a2>
			}
#endif
			fp->sect = sect;
 80078c4:	f8c4 9020 	str.w	r9, [r4, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80078c8:	69a3      	ldr	r3, [r4, #24]
 80078ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ce:	f5c3 7700 	rsb	r7, r3, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80078d2:	42bd      	cmp	r5, r7
 80078d4:	d200      	bcs.n	80078d8 <f_read+0xd8>
 80078d6:	462f      	mov	r7, r5
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80078d8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80078dc:	463a      	mov	r2, r7
 80078de:	4419      	add	r1, r3
 80078e0:	4630      	mov	r0, r6
 80078e2:	f7fe fb03 	bl	8005eec <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80078e6:	443e      	add	r6, r7
 80078e8:	69a3      	ldr	r3, [r4, #24]
 80078ea:	443b      	add	r3, r7
 80078ec:	61a3      	str	r3, [r4, #24]
 80078ee:	f8d8 3000 	ldr.w	r3, [r8]
 80078f2:	443b      	add	r3, r7
 80078f4:	f8c8 3000 	str.w	r3, [r8]
 80078f8:	1bed      	subs	r5, r5, r7
	for ( ;  btr;								/* Repeat until all data read */
 80078fa:	2d00      	cmp	r5, #0
 80078fc:	d039      	beq.n	8007972 <f_read+0x172>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80078fe:	69a3      	ldr	r3, [r4, #24]
 8007900:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007904:	2a00      	cmp	r2, #0
 8007906:	d1df      	bne.n	80078c8 <f_read+0xc8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007908:	9a03      	ldr	r2, [sp, #12]
 800790a:	8957      	ldrh	r7, [r2, #10]
 800790c:	3f01      	subs	r7, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800790e:	ea17 2753 	ands.w	r7, r7, r3, lsr #9
 8007912:	d108      	bne.n	8007926 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007914:	2b00      	cmp	r3, #0
 8007916:	d195      	bne.n	8007844 <f_read+0x44>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007918:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800791a:	2801      	cmp	r0, #1
 800791c:	d997      	bls.n	800784e <f_read+0x4e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800791e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007922:	d09b      	beq.n	800785c <f_read+0x5c>
				fp->clust = clst;				/* Update current cluster */
 8007924:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007926:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800792a:	69e1      	ldr	r1, [r4, #28]
 800792c:	4658      	mov	r0, fp
 800792e:	f7fe fbdf 	bl	80060f0 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007932:	4681      	mov	r9, r0
 8007934:	2800      	cmp	r0, #0
 8007936:	d098      	beq.n	800786a <f_read+0x6a>
			sect += csect;
 8007938:	44b9      	add	r9, r7
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800793a:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {							/* Read maximum contiguous sectors directly */
 800793e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8007942:	d3ae      	bcc.n	80078a2 <f_read+0xa2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007944:	eb07 030a 	add.w	r3, r7, sl
 8007948:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 800794c:	4293      	cmp	r3, r2
 800794e:	d901      	bls.n	8007954 <f_read+0x154>
					cc = fs->csize - csect;
 8007950:	eba2 0a07 	sub.w	sl, r2, r7
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007954:	4653      	mov	r3, sl
 8007956:	464a      	mov	r2, r9
 8007958:	4631      	mov	r1, r6
 800795a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800795e:	f7fe fa83 	bl	8005e68 <disk_read>
 8007962:	2800      	cmp	r0, #0
 8007964:	d088      	beq.n	8007878 <f_read+0x78>
 8007966:	f04f 0a01 	mov.w	sl, #1
 800796a:	f884 a015 	strb.w	sl, [r4, #21]
 800796e:	f8cd a004 	str.w	sl, [sp, #4]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8007972:	9801      	ldr	r0, [sp, #4]
 8007974:	b005      	add	sp, #20
 8007976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800797a:	2301      	movs	r3, #1
 800797c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8007980:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8007984:	f7fe fa7c 	bl	8005e80 <disk_write>
 8007988:	b920      	cbnz	r0, 8007994 <f_read+0x194>
					fp->flag &= (BYTE)~FA_DIRTY;
 800798a:	7d23      	ldrb	r3, [r4, #20]
 800798c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007990:	7523      	strb	r3, [r4, #20]
 8007992:	e78d      	b.n	80078b0 <f_read+0xb0>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007994:	f04f 0a01 	mov.w	sl, #1
 8007998:	f884 a015 	strb.w	sl, [r4, #21]
 800799c:	f8cd a004 	str.w	sl, [sp, #4]
 80079a0:	e7e7      	b.n	8007972 <f_read+0x172>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80079a2:	f04f 0a01 	mov.w	sl, #1
 80079a6:	f884 a015 	strb.w	sl, [r4, #21]
 80079aa:	f8cd a004 	str.w	sl, [sp, #4]
 80079ae:	e7e0      	b.n	8007972 <f_read+0x172>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80079b0:	2307      	movs	r3, #7
 80079b2:	9301      	str	r3, [sp, #4]
 80079b4:	e7dd      	b.n	8007972 <f_read+0x172>

080079b6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80079b6:	b570      	push	{r4, r5, r6, lr}
 80079b8:	b082      	sub	sp, #8
 80079ba:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80079bc:	a901      	add	r1, sp, #4
 80079be:	f7fe fd38 	bl	8006432 <validate>
	if (res == FR_OK) {
 80079c2:	b970      	cbnz	r0, 80079e2 <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80079c4:	7d23      	ldrb	r3, [r4, #20]
 80079c6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80079ca:	d00a      	beq.n	80079e2 <f_sync+0x2c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80079cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80079d0:	d109      	bne.n	80079e6 <f_sync+0x30>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80079d2:	f7fe f957 	bl	8005c84 <get_fattime>
 80079d6:	4605      	mov	r5, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80079d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80079da:	9801      	ldr	r0, [sp, #4]
 80079dc:	f7fe fd76 	bl	80064cc <move_window>
				if (res == FR_OK) {
 80079e0:	b178      	cbz	r0, 8007a02 <f_sync+0x4c>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 80079e2:	b002      	add	sp, #8
 80079e4:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80079e6:	2301      	movs	r3, #1
 80079e8:	6a22      	ldr	r2, [r4, #32]
 80079ea:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80079ee:	9801      	ldr	r0, [sp, #4]
 80079f0:	7840      	ldrb	r0, [r0, #1]
 80079f2:	f7fe fa45 	bl	8005e80 <disk_write>
 80079f6:	bb40      	cbnz	r0, 8007a4a <f_sync+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 80079f8:	7d23      	ldrb	r3, [r4, #20]
 80079fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079fe:	7523      	strb	r3, [r4, #20]
 8007a00:	e7e7      	b.n	80079d2 <f_sync+0x1c>
					dir = fp->dir_ptr;
 8007a02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007a04:	7af3      	ldrb	r3, [r6, #11]
 8007a06:	f043 0320 	orr.w	r3, r3, #32
 8007a0a:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007a0c:	68a2      	ldr	r2, [r4, #8]
 8007a0e:	4631      	mov	r1, r6
 8007a10:	6820      	ldr	r0, [r4, #0]
 8007a12:	f7fe fb8c 	bl	800612e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007a16:	68e1      	ldr	r1, [r4, #12]
 8007a18:	f106 001c 	add.w	r0, r6, #28
 8007a1c:	f7fe fa5c 	bl	8005ed8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007a20:	4629      	mov	r1, r5
 8007a22:	f106 0016 	add.w	r0, r6, #22
 8007a26:	f7fe fa57 	bl	8005ed8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	f106 0012 	add.w	r0, r6, #18
 8007a30:	f7fe fa4e 	bl	8005ed0 <st_word>
					fs->wflag = 1;
 8007a34:	9b01      	ldr	r3, [sp, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007a3a:	9801      	ldr	r0, [sp, #4]
 8007a3c:	f7ff fd54 	bl	80074e8 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007a40:	7d23      	ldrb	r3, [r4, #20]
 8007a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a46:	7523      	strb	r3, [r4, #20]
 8007a48:	e7cb      	b.n	80079e2 <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007a4a:	2001      	movs	r0, #1
 8007a4c:	e7c9      	b.n	80079e2 <f_sync+0x2c>

08007a4e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007a4e:	b510      	push	{r4, lr}
 8007a50:	b082      	sub	sp, #8
 8007a52:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007a54:	f7ff ffaf 	bl	80079b6 <f_sync>
	if (res == FR_OK)
 8007a58:	b108      	cbz	r0, 8007a5e <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8007a5a:	b002      	add	sp, #8
 8007a5c:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007a5e:	a901      	add	r1, sp, #4
 8007a60:	4620      	mov	r0, r4
 8007a62:	f7fe fce6 	bl	8006432 <validate>
		if (res == FR_OK) {
 8007a66:	2800      	cmp	r0, #0
 8007a68:	d1f7      	bne.n	8007a5a <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007a6a:	6920      	ldr	r0, [r4, #16]
 8007a6c:	f7fe fb02 	bl	8006074 <dec_lock>
			if (res == FR_OK)
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d1f2      	bne.n	8007a5a <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 8007a74:	6020      	str	r0, [r4, #0]
 8007a76:	e7f0      	b.n	8007a5a <f_close+0xc>

08007a78 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8007a78:	b530      	push	{r4, r5, lr}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d03d      	beq.n	8007afe <f_opendir+0x86>
 8007a82:	4605      	mov	r5, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 8007a84:	2200      	movs	r2, #0
 8007a86:	a903      	add	r1, sp, #12
 8007a88:	a801      	add	r0, sp, #4
 8007a8a:	f7fe fd77 	bl	800657c <find_volume>
	if (res == FR_OK) {
 8007a8e:	4604      	mov	r4, r0
 8007a90:	b128      	cbz	r0, 8007a9e <f_opendir+0x26>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8007a92:	b10c      	cbz	r4, 8007a98 <f_opendir+0x20>
 8007a94:	2300      	movs	r3, #0
 8007a96:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 8007a98:	4620      	mov	r0, r4
 8007a9a:	b005      	add	sp, #20
 8007a9c:	bd30      	pop	{r4, r5, pc}
		obj->fs = fs;
 8007a9e:	9b03      	ldr	r3, [sp, #12]
 8007aa0:	602b      	str	r3, [r5, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8007aa2:	9901      	ldr	r1, [sp, #4]
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	f7ff fc38 	bl	800731a <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8007aaa:	4604      	mov	r4, r0
 8007aac:	bb18      	cbnz	r0, 8007af6 <f_opendir+0x7e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8007aae:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	db08      	blt.n	8007ac8 <f_opendir+0x50>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8007ab6:	79ab      	ldrb	r3, [r5, #6]
 8007ab8:	f013 0f10 	tst.w	r3, #16
 8007abc:	d01a      	beq.n	8007af4 <f_opendir+0x7c>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8007abe:	6a29      	ldr	r1, [r5, #32]
 8007ac0:	9803      	ldr	r0, [sp, #12]
 8007ac2:	f7fe fb21 	bl	8006108 <ld_clust>
 8007ac6:	60a8      	str	r0, [r5, #8]
				obj->id = fs->id;
 8007ac8:	9b03      	ldr	r3, [sp, #12]
 8007aca:	88db      	ldrh	r3, [r3, #6]
 8007acc:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007ace:	2100      	movs	r1, #0
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	f7fe ffc6 	bl	8006a62 <dir_sdi>
				if (res == FR_OK) {
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	b968      	cbnz	r0, 8007af6 <f_opendir+0x7e>
					if (obj->sclust) {
 8007ada:	68ab      	ldr	r3, [r5, #8]
 8007adc:	b913      	cbnz	r3, 8007ae4 <f_opendir+0x6c>
						obj->lockid = 0;	/* Root directory need not to be locked */
 8007ade:	2300      	movs	r3, #0
 8007ae0:	612b      	str	r3, [r5, #16]
 8007ae2:	e008      	b.n	8007af6 <f_opendir+0x7e>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f7fe fa72 	bl	8005fd0 <inc_lock>
 8007aec:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007aee:	b910      	cbnz	r0, 8007af6 <f_opendir+0x7e>
 8007af0:	2412      	movs	r4, #18
 8007af2:	e7ce      	b.n	8007a92 <f_opendir+0x1a>
					res = FR_NO_PATH;
 8007af4:	2405      	movs	r4, #5
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007af6:	2c04      	cmp	r4, #4
 8007af8:	d1cb      	bne.n	8007a92 <f_opendir+0x1a>
 8007afa:	2405      	movs	r4, #5
 8007afc:	e7ca      	b.n	8007a94 <f_opendir+0x1c>
	if (!dp) return FR_INVALID_OBJECT;
 8007afe:	2409      	movs	r4, #9
 8007b00:	e7ca      	b.n	8007a98 <f_opendir+0x20>

08007b02 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8007b02:	b510      	push	{r4, lr}
 8007b04:	b082      	sub	sp, #8
 8007b06:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8007b08:	a901      	add	r1, sp, #4
 8007b0a:	f7fe fc92 	bl	8006432 <validate>
	if (res == FR_OK) {
 8007b0e:	b920      	cbnz	r0, 8007b1a <f_closedir+0x18>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8007b10:	6923      	ldr	r3, [r4, #16]
 8007b12:	b923      	cbnz	r3, 8007b1e <f_closedir+0x1c>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
 8007b14:	b908      	cbnz	r0, 8007b1a <f_closedir+0x18>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8007b16:	2300      	movs	r3, #0
 8007b18:	6023      	str	r3, [r4, #0]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 8007b1a:	b002      	add	sp, #8
 8007b1c:	bd10      	pop	{r4, pc}
			res = dec_lock(dp->obj.lockid);
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fe faa8 	bl	8006074 <dec_lock>
 8007b24:	e7f6      	b.n	8007b14 <f_closedir+0x12>

08007b26 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007b26:	b570      	push	{r4, r5, r6, lr}
 8007b28:	b082      	sub	sp, #8
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	460d      	mov	r5, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8007b2e:	a901      	add	r1, sp, #4
 8007b30:	f7fe fc7f 	bl	8006432 <validate>
	if (res == FR_OK) {
 8007b34:	4606      	mov	r6, r0
 8007b36:	b9c0      	cbnz	r0, 8007b6a <f_readdir+0x44>
		if (!fno) {
 8007b38:	b195      	cbz	r5, 8007b60 <f_readdir+0x3a>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	f7ff f93b 	bl	8006db8 <dir_read>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8007b42:	2804      	cmp	r0, #4
 8007b44:	d000      	beq.n	8007b48 <f_readdir+0x22>
			if (res == FR_OK) {				/* A valid entry is found */
 8007b46:	b998      	cbnz	r0, 8007b70 <f_readdir+0x4a>
				get_fileinfo(dp, fno);		/* Get the object information */
 8007b48:	4629      	mov	r1, r5
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	f7ff faaa 	bl	80070a4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007b50:	2100      	movs	r1, #0
 8007b52:	4620      	mov	r0, r4
 8007b54:	f7ff f885 	bl	8006c62 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8007b58:	2804      	cmp	r0, #4
 8007b5a:	d006      	beq.n	8007b6a <f_readdir+0x44>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007b5c:	4606      	mov	r6, r0
 8007b5e:	e004      	b.n	8007b6a <f_readdir+0x44>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8007b60:	2100      	movs	r1, #0
 8007b62:	4620      	mov	r0, r4
 8007b64:	f7fe ff7d 	bl	8006a62 <dir_sdi>
 8007b68:	4606      	mov	r6, r0
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	b002      	add	sp, #8
 8007b6e:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_read(dp, 0);			/* Read an item */
 8007b70:	4606      	mov	r6, r0
 8007b72:	e7fa      	b.n	8007b6a <f_readdir+0x44>

08007b74 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8007b74:	b570      	push	{r4, r5, r6, lr}
 8007b76:	4605      	mov	r5, r0
 8007b78:	460c      	mov	r4, r1
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	f7ff ffd2 	bl	8007b26 <f_readdir>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8007b82:	4606      	mov	r6, r0
 8007b84:	fab4 f384 	clz	r3, r4
 8007b88:	095b      	lsrs	r3, r3, #5
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	bf18      	it	ne
 8007b8e:	f043 0301 	orrne.w	r3, r3, #1
 8007b92:	b953      	cbnz	r3, 8007baa <f_findnext+0x36>
 8007b94:	7da3      	ldrb	r3, [r4, #22]
 8007b96:	b143      	cbz	r3, 8007baa <f_findnext+0x36>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8007b98:	2300      	movs	r3, #0
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	f104 0116 	add.w	r1, r4, #22
 8007ba0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8007ba2:	f7fe fbcf 	bl	8006344 <pattern_matching>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d0e7      	beq.n	8007b7a <f_findnext+0x6>
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 8007baa:	4630      	mov	r0, r6
 8007bac:	bd70      	pop	{r4, r5, r6, pc}

08007bae <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8007bae:	b538      	push	{r3, r4, r5, lr}
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	460d      	mov	r5, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8007bb4:	6343      	str	r3, [r0, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	f7ff ff5e 	bl	8007a78 <f_opendir>
	if (res == FR_OK) {
 8007bbc:	b100      	cbz	r0, 8007bc0 <f_findfirst+0x12>
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 8007bbe:	bd38      	pop	{r3, r4, r5, pc}
		res = f_findnext(dp, fno);	/* Find the first item */
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	f7ff ffd6 	bl	8007b74 <f_findnext>
 8007bc8:	e7f9      	b.n	8007bbe <f_findfirst+0x10>
	...

08007bcc <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8007bcc:	4b13      	ldr	r3, [pc, #76]	; (8007c1c <FATFS_LinkDriverEx+0x50>)
 8007bce:	7a5b      	ldrb	r3, [r3, #9]
 8007bd0:	bb13      	cbnz	r3, 8007c18 <FATFS_LinkDriverEx+0x4c>
{
 8007bd2:	b510      	push	{r4, lr}
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 8007bda:	4b10      	ldr	r3, [pc, #64]	; (8007c1c <FATFS_LinkDriverEx+0x50>)
 8007bdc:	f893 c009 	ldrb.w	ip, [r3, #9]
 8007be0:	fa5f fc8c 	uxtb.w	ip, ip
 8007be4:	f04f 0e00 	mov.w	lr, #0
 8007be8:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8007bec:	f893 c009 	ldrb.w	ip, [r3, #9]
 8007bf0:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8007bf4:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 8007bf8:	7a5c      	ldrb	r4, [r3, #9]
 8007bfa:	441c      	add	r4, r3
 8007bfc:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8007bfe:	7a5a      	ldrb	r2, [r3, #9]
 8007c00:	1c54      	adds	r4, r2, #1
 8007c02:	b2e4      	uxtb	r4, r4
 8007c04:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8007c06:	3230      	adds	r2, #48	; 0x30
 8007c08:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8007c0a:	233a      	movs	r3, #58	; 0x3a
 8007c0c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8007c0e:	232f      	movs	r3, #47	; 0x2f
 8007c10:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8007c12:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8007c16:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 8007c18:	2001      	movs	r0, #1
}
 8007c1a:	4770      	bx	lr
 8007c1c:	200008e8 	.word	0x200008e8

08007c20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007c20:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8007c22:	2200      	movs	r2, #0
 8007c24:	f7ff ffd2 	bl	8007bcc <FATFS_LinkDriverEx>
}
 8007c28:	bd08      	pop	{r3, pc}
	...

08007c2c <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007c2c:	287f      	cmp	r0, #127	; 0x7f
 8007c2e:	d917      	bls.n	8007c60 <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007c30:	b131      	cbz	r1, 8007c40 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007c32:	28ff      	cmp	r0, #255	; 0xff
 8007c34:	d813      	bhi.n	8007c5e <ff_convert+0x32>
 8007c36:	3880      	subs	r0, #128	; 0x80
 8007c38:	4b0a      	ldr	r3, [pc, #40]	; (8007c64 <ff_convert+0x38>)
 8007c3a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8007c3e:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007c40:	2300      	movs	r3, #0
 8007c42:	2b7f      	cmp	r3, #127	; 0x7f
 8007c44:	d807      	bhi.n	8007c56 <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 8007c46:	4a07      	ldr	r2, [pc, #28]	; (8007c64 <ff_convert+0x38>)
 8007c48:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8007c4c:	4282      	cmp	r2, r0
 8007c4e:	d002      	beq.n	8007c56 <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 8007c50:	3301      	adds	r3, #1
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	e7f5      	b.n	8007c42 <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 8007c56:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8007c5a:	b2c0      	uxtb	r0, r0
 8007c5c:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007c5e:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	08007e2c 	.word	0x08007e2c

08007c68 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007c68:	b510      	push	{r4, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007c6a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8007c6e:	d201      	bcs.n	8007c74 <ff_wtoupper+0xc>
 8007c70:	4b22      	ldr	r3, [pc, #136]	; (8007cfc <ff_wtoupper+0x94>)
 8007c72:	e002      	b.n	8007c7a <ff_wtoupper+0x12>
 8007c74:	4b22      	ldr	r3, [pc, #136]	; (8007d00 <ff_wtoupper+0x98>)
 8007c76:	e000      	b.n	8007c7a <ff_wtoupper+0x12>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007c78:	4673      	mov	r3, lr
		bc = *p++;								/* Get block base */
 8007c7a:	8819      	ldrh	r1, [r3, #0]
		if (!bc || chr < bc) break;
 8007c7c:	4288      	cmp	r0, r1
 8007c7e:	bf2c      	ite	cs
 8007c80:	2200      	movcs	r2, #0
 8007c82:	2201      	movcc	r2, #1
 8007c84:	2900      	cmp	r1, #0
 8007c86:	bf08      	it	eq
 8007c88:	f042 0201 	orreq.w	r2, r2, #1
 8007c8c:	b9ca      	cbnz	r2, 8007cc2 <ff_wtoupper+0x5a>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007c8e:	f103 0e04 	add.w	lr, r3, #4
 8007c92:	885b      	ldrh	r3, [r3, #2]
 8007c94:	0a1a      	lsrs	r2, r3, #8
 8007c96:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 8007c98:	eb03 0c01 	add.w	ip, r3, r1
 8007c9c:	4560      	cmp	r0, ip
 8007c9e:	db04      	blt.n	8007caa <ff_wtoupper+0x42>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8007ca0:	2a00      	cmp	r2, #0
 8007ca2:	d1e9      	bne.n	8007c78 <ff_wtoupper+0x10>
 8007ca4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007ca8:	e7e7      	b.n	8007c7a <ff_wtoupper+0x12>
			switch (cmd) {
 8007caa:	2a08      	cmp	r2, #8
 8007cac:	d809      	bhi.n	8007cc2 <ff_wtoupper+0x5a>
 8007cae:	e8df f002 	tbb	[pc, r2]
 8007cb2:	0905      	.short	0x0905
 8007cb4:	1815120f 	.word	0x1815120f
 8007cb8:	1e1b      	.short	0x1e1b
 8007cba:	21          	.byte	0x21
 8007cbb:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007cbc:	1a41      	subs	r1, r0, r1
 8007cbe:	f83e 0011 	ldrh.w	r0, [lr, r1, lsl #1]
	}

	return chr;
}
 8007cc2:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007cc4:	1a43      	subs	r3, r0, r1
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	1ac0      	subs	r0, r0, r3
 8007ccc:	b280      	uxth	r0, r0
 8007cce:	e7f8      	b.n	8007cc2 <ff_wtoupper+0x5a>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007cd0:	3810      	subs	r0, #16
 8007cd2:	b280      	uxth	r0, r0
 8007cd4:	e7f5      	b.n	8007cc2 <ff_wtoupper+0x5a>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007cd6:	3820      	subs	r0, #32
 8007cd8:	b280      	uxth	r0, r0
 8007cda:	e7f2      	b.n	8007cc2 <ff_wtoupper+0x5a>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007cdc:	3830      	subs	r0, #48	; 0x30
 8007cde:	b280      	uxth	r0, r0
 8007ce0:	e7ef      	b.n	8007cc2 <ff_wtoupper+0x5a>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007ce2:	381a      	subs	r0, #26
 8007ce4:	b280      	uxth	r0, r0
 8007ce6:	e7ec      	b.n	8007cc2 <ff_wtoupper+0x5a>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007ce8:	3008      	adds	r0, #8
 8007cea:	b280      	uxth	r0, r0
 8007cec:	e7e9      	b.n	8007cc2 <ff_wtoupper+0x5a>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007cee:	3850      	subs	r0, #80	; 0x50
 8007cf0:	b280      	uxth	r0, r0
 8007cf2:	e7e6      	b.n	8007cc2 <ff_wtoupper+0x5a>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007cf4:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8007cf8:	b280      	uxth	r0, r0
 8007cfa:	e7e2      	b.n	8007cc2 <ff_wtoupper+0x5a>
 8007cfc:	08007f2c 	.word	0x08007f2c
 8007d00:	08008120 	.word	0x08008120

08007d04 <__libc_init_array>:
 8007d04:	b570      	push	{r4, r5, r6, lr}
 8007d06:	4d0d      	ldr	r5, [pc, #52]	; (8007d3c <__libc_init_array+0x38>)
 8007d08:	4c0d      	ldr	r4, [pc, #52]	; (8007d40 <__libc_init_array+0x3c>)
 8007d0a:	1b64      	subs	r4, r4, r5
 8007d0c:	10a4      	asrs	r4, r4, #2
 8007d0e:	2600      	movs	r6, #0
 8007d10:	42a6      	cmp	r6, r4
 8007d12:	d109      	bne.n	8007d28 <__libc_init_array+0x24>
 8007d14:	4d0b      	ldr	r5, [pc, #44]	; (8007d44 <__libc_init_array+0x40>)
 8007d16:	4c0c      	ldr	r4, [pc, #48]	; (8007d48 <__libc_init_array+0x44>)
 8007d18:	f000 fa60 	bl	80081dc <_init>
 8007d1c:	1b64      	subs	r4, r4, r5
 8007d1e:	10a4      	asrs	r4, r4, #2
 8007d20:	2600      	movs	r6, #0
 8007d22:	42a6      	cmp	r6, r4
 8007d24:	d105      	bne.n	8007d32 <__libc_init_array+0x2e>
 8007d26:	bd70      	pop	{r4, r5, r6, pc}
 8007d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d2c:	4798      	blx	r3
 8007d2e:	3601      	adds	r6, #1
 8007d30:	e7ee      	b.n	8007d10 <__libc_init_array+0xc>
 8007d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d36:	4798      	blx	r3
 8007d38:	3601      	adds	r6, #1
 8007d3a:	e7f2      	b.n	8007d22 <__libc_init_array+0x1e>
 8007d3c:	080081f4 	.word	0x080081f4
 8007d40:	080081f4 	.word	0x080081f4
 8007d44:	080081f4 	.word	0x080081f4
 8007d48:	080081f8 	.word	0x080081f8

08007d4c <memset>:
 8007d4c:	4402      	add	r2, r0
 8007d4e:	4603      	mov	r3, r0
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d100      	bne.n	8007d56 <memset+0xa>
 8007d54:	4770      	bx	lr
 8007d56:	f803 1b01 	strb.w	r1, [r3], #1
 8007d5a:	e7f9      	b.n	8007d50 <memset+0x4>
 8007d5c:	69622e2a 	.word	0x69622e2a
 8007d60:	0000006e 	.word	0x0000006e

08007d64 <D1CorePrescTable>:
 8007d64:	00000000 04030201 04030201 09080706     ................

08007d74 <SD_Driver>:
 8007d74:	08005d59 08005d81 08005d89 08005dad     Y]...]...]...]..
 8007d84:	08005dd1 3c3a2a22 7f7c3f3e 00000000     .].."*:<>?|.....
 8007d94:	3d3b2c2b 00005d5b                       +,;=[]..

08007d9c <ExCvt>:
 8007d9c:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
 8007dac:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
 8007dbc:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
 8007dcc:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
 8007ddc:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
 8007dec:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
 8007dfc:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
 8007e0c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

08007e1c <LfnOfs>:
 8007e1c:	07050301 12100e09 1c181614 0000001e     ................

08007e2c <Tbl>:
 8007e2c:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
 8007e3c:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
 8007e4c:	00e600c9 00f400c6 00f200f6 00f900fb     ................
 8007e5c:	00d600ff 00f800dc 00d800a3 019200d7     ................
 8007e6c:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
 8007e7c:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
 8007e8c:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
 8007e9c:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
 8007eac:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
 8007ebc:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
 8007ecc:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
 8007edc:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
 8007eec:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
 8007efc:	00da00de 00d900db 00dd00fd 00b400af     ................
 8007f0c:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
 8007f1c:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

08007f2c <cvt1.1>:
 8007f2c:	031a0061 031700e0 030700f8 000100ff     a...............
 8007f3c:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
 8007f4c:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
 8007f5c:	01840182 01860184 01870187 018a0189     ................
 8007f6c:	018b018b 018e018d 0190018f 01910191     ................
 8007f7c:	01940193 019601f6 01980197 023d0198     ..............=.
 8007f8c:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
 8007f9c:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
 8007fac:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
 8007fbc:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
 8007fcc:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
 8007fdc:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
 8007fec:	01ca01cb 011001cd 000101dd 01de018e     ................
 8007ffc:	01f30112 01f10003 01f401f4 012801f8     ..............(.
 800800c:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
 800801c:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
 800802c:	01810040 02550186 018a0189 018f0258     @.....U.....X...
 800803c:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
 800804c:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
 800805c:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
 800806c:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
 800807c:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
 800808c:	01a90282 02850284 02870286 024401ae     ..............D.
 800809c:	01b201b1 028d0245 028f028e 02910290     ....E...........
 80080ac:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
 80080bc:	03880386 038a0389 031103b1 000203c2     ................
 80080cc:	03a303a3 030803c4 000303cc 038e038c     ................
 80080dc:	03d8038f 03f20118 03f9000a 03f403f3     ................
 80080ec:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
 80080fc:	04500320 04600710 048a0122 04c10136      .P...`."...6...
 800810c:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
 800811c:	00000000                                ....

08008120 <cvt2.0>:
 8008120:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
 8008130:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
 8008140:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
 8008150:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
 8008160:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
 8008170:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
 8008180:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
 8008190:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
 80081a0:	1fec0001 00011ff2 214e1ffc 21320001     ..........N!..2!
 80081b0:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
 80081c0:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
 80081d0:	2d000164 ff410826 0000031a              d..-&.A.....

080081dc <_init>:
 80081dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081de:	bf00      	nop
 80081e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e2:	bc08      	pop	{r3}
 80081e4:	469e      	mov	lr, r3
 80081e6:	4770      	bx	lr

080081e8 <_fini>:
 80081e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ea:	bf00      	nop
 80081ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ee:	bc08      	pop	{r3}
 80081f0:	469e      	mov	lr, r3
 80081f2:	4770      	bx	lr
